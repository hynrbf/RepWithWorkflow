import {
  ButtonView,
  IconView,
  View
} from "./chunk-SGTDNT4V.js";
import {
  CKEditorError,
  Collection,
  ContextPlugin,
  Editor,
  icons
} from "./chunk-JI2V5GJZ.js";

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/permissions.js
var _0x32af = ["plugins", "noPermissions", "context", "forceDisabled", "no-permissions", "commands", "enableReadOnlyMode", "CommentsOnly", "comment:write", "CommentsRepository", "get", "setPermissions", "find", "isEnabled", "includes", "disableReadOnlyMode", "document:write", "comment:admin", "comment:modify_all", "clearForceDisabled", "addCommentThread", "has", "config", "editors", "collaboration.channelId"];
(function(_0x51eaa9, _0x32af09) {
  const _0x528871 = function(_0x430132) {
    while (--_0x430132) {
      _0x51eaa9["push"](_0x51eaa9["shift"]());
    }
  };
  _0x528871(++_0x32af09);
})(_0x32af, 444);
var _0x5288 = function(_0x51eaa9, _0x32af09) {
  _0x51eaa9 = _0x51eaa9 - 0;
  let _0x528871 = _0x32af[_0x51eaa9];
  return _0x528871;
};
var n = class extends ContextPlugin {
  static get ["pluginName"]() {
    return "Permissions";
  }
  [_0x5288("0x11")](_0x35e5cd, _0x5cc55f) {
    let _0x9f0f23;
    if (_0x5cc55f || (_0x5cc55f = this[_0x5288("0x8")][_0x5288("0x3")][_0x5288("0x10")](_0x5288("0x5"))), this[_0x5288("0x8")][_0x5288("0x3")][_0x5288("0x10")](_0x5288("0x5")) == _0x5cc55f ? _0x9f0f23 = this[_0x5288("0x8")] : _0x5288("0x4") in this[_0x5288("0x8")] && this[_0x5288("0x8")][_0x5288("0x4")] && (_0x9f0f23 = this[_0x5288("0x8")][_0x5288("0x4")][_0x5288("0x12")]((_0x12e74e) => _0x12e74e[_0x5288("0x3")]["get"](_0x5288("0x5")) == _0x5cc55f)), !_0x9f0f23)
      throw new CKEditorError("permissions-set-permissions-invalid-channel-id", null);
    const _0x170d9a = _0x9f0f23[_0x5288("0x6")], _0x15e19c = _0x170d9a[_0x5288("0x2")](_0x5288("0xf")) ? _0x170d9a[_0x5288("0x10")](_0x5288("0xf")) : void 0, _0xc61891 = _0x170d9a[_0x5288("0x2")](_0x5288("0xd")) && _0x170d9a["get"]("CommentsOnly"), _0x1a2ecd = _0x35e5cd[_0x5288("0x14")](_0x5288("0x16")), _0xbc36b7 = _0x35e5cd[_0x5288("0x14")](_0x5288("0x18")), _0x552f14 = _0x35e5cd[_0x5288("0x14")](_0x5288("0x17")), _0x29219b = _0x35e5cd["includes"](_0x5288("0xe")), _0x50a20d = _0x29219b || _0x552f14, _0x244cae = _0x50a20d || _0xbc36b7, _0x3d1f04 = _0x1a2ecd || _0x50a20d;
    (_0xc61891 && (_0xc61891[_0x5288("0x13")] = !_0x1a2ecd && _0x244cae), _0x9f0f23 instanceof Editor) && (!(_0x1a2ecd || _0x244cae && _0x15e19c) ? _0x9f0f23[_0x5288("0xc")](_0x5288("0xa")) : _0x9f0f23[_0x5288("0x15")](_0x5288("0xa")));
    if (_0x15e19c) {
      _0x15e19c[_0x5288("0x11")]({ "admin": _0x552f14, "modifyAll": _0xbc36b7, "write": _0x29219b, "resolve": _0x3d1f04 }, _0x5cc55f);
      const _0x47c13b = _0x9f0f23 instanceof Editor && _0x9f0f23[_0x5288("0xb")][_0x5288("0x10")](_0x5288("0x1"));
      _0x47c13b && (_0x50a20d ? _0x47c13b[_0x5288("0x0")](_0x5288("0x7")) : _0x47c13b[_0x5288("0x9")](_0x5288("0x7")));
    }
  }
};

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/utils/common-translations.js
function getTranslation(_0x3f4592, _0x2ab62d) {
  const t2 = _0x3f4592["t"];
  switch (_0x2ab62d) {
    case "Anonymous":
      return t2("Anonymous");
    case "Yes":
      return t2("Yes");
    case "No":
      return t2("No");
    case "Are you sure?":
      return t2("Are you sure?");
    default:
      return "";
  }
}

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/users.js
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/usercolors.css";
var _0x5183 = ["users-me-missing-user", "config", "charAt", "trial-license-key-reached-limit-time", "_id", "color", "isAnonymous", "has", "licenseKeyValid", "getOperationAuthor", "_lastColor", "decorate", "users-add-invalid-id", "_licenseKeyCheckInterval", "licenseKeyTrialLimit:time", "defineMe", "_addAnonymousUser", "getBackgroundColorClass", "users.anonymousUserId", "requires", "split", "context", "addUser", "define", "licenseKeyTrial", "trial-license-key-reached-limit-changes", "_locale", "licenseKey", "name", "users", "get", "useAnonymousUser", "init", "licenseKeyTrialLimit:operations", "Anonymous", "licenseKeyInvalid", "_getNextColor", "_getInitial", "users.colorsCount", "_myId", "licenseKeyTrialLimit:revisions", "avatar", "getSelectionClass", "pluginName", "Users", "_isAnonymous", "getUser", "anonymous-user", "ck-user__marker--", "length", "getMarkerClass", "string", "You are using the trial version of CKEditor 5 collaboration plugin with limited usage. Make sure you will not use it in the production environment.", "invalid-license-key", "includes", "trial-license-key-reached-limit-revisions"];
(function(_0x39358b, _0x5183cd) {
  const _0x185864 = function(_0x28c88a) {
    while (--_0x28c88a) {
      _0x39358b["push"](_0x39358b["shift"]());
    }
  };
  _0x185864(++_0x5183cd);
})(_0x5183, 340);
var _0x1858 = function(_0x39358b, _0x5183cd) {
  _0x39358b = _0x39358b - 0;
  let _0x185864 = _0x5183[_0x39358b];
  return _0x185864;
};
var l = class extends ContextPlugin {
  static get [_0x1858("0x27")]() {
    return _0x1858("0x28");
  }
  static get [_0x1858("0xf")]() {
    return [n];
  }
  constructor(_0x3e7961) {
    super(_0x3e7961), this["context"][_0x1858("0x35")][_0x1858("0x13")](_0x1858("0xe"), _0x1858("0x2b")), this[_0x1858("0x11")]["config"][_0x1858("0x13")](_0x1858("0x22"), 8), this[_0x1858("0x19")] = new Collection(), this[_0x1858("0x16")] = _0x3e7961["locale"], this[_0x1858("0x9")] = null, this[_0x1858("0x6")] = 0, this["_myId"] = null, this[_0x1858("0x7")]("getOperationAuthor");
  }
  [_0x1858("0x1c")]() {
    const _0x3f08de = this["context"];
    this[_0x1858("0x17")] = _0x3f08de[_0x1858("0x35")][_0x1858("0x1a")](_0x1858("0x17"));
    const _0x5c77e7 = ["licenseKeyTrial", _0x1858("0x1f"), _0x1858("0x4"), _0x1858("0x1d"), _0x1858("0xa"), _0x1858("0x24")];
    this[_0x1858("0x9")] = setInterval(() => {
      let _0x1a493c;
      for (const _0x5ce2fd in _0x3f08de) {
        const _0x23f20a = _0x3f08de[_0x5ce2fd];
        if (_0x5c77e7[_0x1858("0x32")](_0x23f20a)) {
          delete _0x3f08de[_0x5ce2fd], _0x1a493c = _0x23f20a;
          break;
        }
      }
      if (_0x1858("0x1f") === _0x1a493c)
        throw clearInterval(this[_0x1858("0x9")]), new CKEditorError(_0x1858("0x31"), null);
      if (_0x1858("0x14") === _0x1a493c && console["info"](_0x1858("0x30")), "licenseKeyTrialLimit:operations" === _0x1a493c)
        throw clearInterval(this[_0x1858("0x9")]), new CKEditorError(_0x1858("0x15"), null);
      if ("licenseKeyTrialLimit:time" === _0x1a493c)
        throw clearInterval(this[_0x1858("0x9")]), new CKEditorError(_0x1858("0x37"), null);
      if (_0x1858("0x24") === _0x1a493c)
        throw clearInterval(this[_0x1858("0x9")]), new CKEditorError(_0x1858("0x33"), null);
      _0x1858("0x4") === _0x1a493c && clearInterval(this[_0x1858("0x9")]);
    }, 1e3), this[_0x1858("0xc")]();
  }
  get ["me"]() {
    return null == this[_0x1858("0x23")] ? null : this["getUser"](this[_0x1858("0x23")]);
  }
  [_0x1858("0x12")]({ id: _0x1a6c41, name: _0x473008, ..._0x406c4c }) {
    if (!_0x1a6c41 || _0x1858("0x2f") != typeof _0x1a6c41)
      throw new CKEditorError(_0x1858("0x8"));
    if (this[_0x1858("0x19")][_0x1858("0x3")](_0x1a6c41))
      throw new CKEditorError("users-add-duplicated-id", null, { "id": _0x1a6c41 });
    const _0x3f244c = { ..._0x406c4c, "id": _0x1a6c41, "name": a(this[_0x1858("0x16")], _0x473008), "color": this[_0x1858("0x20")]() };
    _0x3f244c[_0x1858("0x18")] = a(this[_0x1858("0x16")], _0x3f244c[_0x1858("0x18")]);
    const _0x4df087 = new User(_0x3f244c);
    return this[_0x1858("0x19")]["add"](_0x4df087), _0x4df087;
  }
  [_0x1858("0x2a")](_0x41e3ae) {
    return this[_0x1858("0x19")][_0x1858("0x1a")](_0x41e3ae);
  }
  [_0x1858("0x1b")]() {
    const _0x768889 = this[_0x1858("0x11")][_0x1858("0x35")][_0x1858("0x1a")](_0x1858("0xe"));
    this["_myId"] || this["defineMe"](_0x768889);
  }
  [_0x1858("0xb")](_0x487f82) {
    if (this[_0x1858("0x23")])
      throw new CKEditorError("users-me-already-defined", null);
    if (!this[_0x1858("0x2a")](_0x487f82))
      throw new CKEditorError(_0x1858("0x34"), null);
    this[_0x1858("0x23")] = _0x487f82;
  }
  [_0x1858("0x5")]() {
    return this["me"];
  }
  ["destroy"]() {
    super["destroy"](), clearInterval(this["_licenseKeyCheckInterval"]);
  }
  [_0x1858("0x20")]() {
    const _0x55bbcf = this["context"][_0x1858("0x35")][_0x1858("0x1a")](_0x1858("0x22"));
    return this[_0x1858("0x6")] >= _0x55bbcf && (this[_0x1858("0x6")] = 0), new u(this[_0x1858("0x6")]++);
  }
  [_0x1858("0xc")]() {
    const _0x223650 = this[_0x1858("0x11")][_0x1858("0x35")][_0x1858("0x1a")]("users.anonymousUserId");
    this[_0x1858("0x12")]({ "id": _0x223650, "name": getTranslation(this["_locale"], _0x1858("0x1e")) })[_0x1858("0x29")] = true;
  }
};
var User = class {
  constructor(_0x3959b9) {
    this["id"] = _0x3959b9["id"], this[_0x1858("0x1")] = _0x3959b9[_0x1858("0x1")], this["name"] = _0x3959b9["name"], this[_0x1858("0x25")] = _0x3959b9[_0x1858("0x25")], this[_0x1858("0x29")] = false;
  }
  get [_0x1858("0x2")]() {
    return this[_0x1858("0x29")];
  }
  get ["initials"]() {
    const _0x4f4011 = this[_0x1858("0x18")][_0x1858("0x10")](" ");
    return 1 === _0x4f4011["length"] ? this[_0x1858("0x21")](_0x4f4011[0]) : this[_0x1858("0x21")](_0x4f4011[0]) + this["_getInitial"](_0x4f4011[_0x4f4011[_0x1858("0x2d")] - 1]);
  }
  ["_getInitial"](_0x388ead) {
    return _0x388ead[_0x1858("0x36")](0)["toUpperCase"]();
  }
};
function a(_0x110552, _0x366335 = "") {
  return "" == (_0x366335 = _0x366335["trim"]()) ? getTranslation(_0x110552, _0x1858("0x1e")) : _0x366335;
}
var u = class {
  constructor(_0x431eba) {
    this["_id"] = _0x431eba;
  }
  [_0x1858("0xd")]() {
    return "ck-user__bg-color--" + this[_0x1858("0x0")];
  }
  [_0x1858("0x26")]() {
    return "ck-user__selection--" + this[_0x1858("0x0")];
  }
  [_0x1858("0x2e")]() {
    return _0x1858("0x2c") + this[_0x1858("0x0")];
  }
};

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/users/view/userview.js
import _0x315e6a from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/icons/notification.svg";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/users.css";
var _0x5d98 = ["div", "ck-user__notification", "push", "extendTemplate", "name", "ck ck-user__name", "url('", "ck ck-user__name ck-user__name--hidden", "notificationView", "ck-user__icon", "isAnonymous", "setTemplate", "ck-user__img", "ck-user__anonymous", "ck-user", "avatar"];
(function(_0xc80d97, _0x5d98b7) {
  const _0x2a15db = function(_0x3ade18) {
    while (--_0x3ade18) {
      _0xc80d97["push"](_0xc80d97["shift"]());
    }
  };
  _0x2a15db(++_0x5d98b7);
})(_0x5d98, 152);
var _0x2a15 = function(_0xc80d97, _0x5d98b7) {
  _0xc80d97 = _0xc80d97 - 0;
  let _0x2a15db = _0x5d98[_0xc80d97];
  return _0x2a15db;
};
var B = class extends View {
  constructor(_0x4eea9c, _0x5e1f52, _0x4c5ee4) {
    super(_0x4eea9c), this[_0x2a15("0xc")] = _0x5e1f52[_0x2a15("0xc")], this[_0x2a15("0x0")] = null;
    const _0x3f5c46 = ["ck", _0x2a15("0x4")];
    if (_0x5e1f52[_0x2a15("0x2")] && _0x3f5c46[_0x2a15("0xa")](_0x2a15("0x5")), _0x5e1f52["avatar"] && _0x3f5c46[_0x2a15("0xa")]("ck-user__avatar"), _0x4c5ee4) {
      const _0xc6552f = new IconView();
      _0xc6552f[_0x2a15("0xb")]({ "attributes": { "class": [_0x2a15("0x1")] } }), _0xc6552f["content"] = _0x315e6a, this[_0x2a15("0x0")] = { "tag": "div", "attributes": { "class": ["ck", _0x2a15("0x9")], "data-cke-tooltip-position": "n", "data-cke-tooltip-text": _0x4c5ee4 }, "children": [_0xc6552f] };
    }
    const _0x106324 = [{ "tag": "div", "attributes": { "class": _0x3f5c46, "style": { "background-image": _0x5e1f52[_0x2a15("0x7")] ? _0x2a15("0xe") + _0x5e1f52["avatar"] + "')" : "" } } }, { "tag": _0x2a15("0x8"), "attributes": { "class": _0x5e1f52["avatar"] ? _0x2a15("0xf") : _0x2a15("0xd") }, "children": [{ "text": _0x5e1f52["initials"] }] }];
    this[_0x2a15("0x0")] && _0x106324[_0x2a15("0xa")](this[_0x2a15("0x0")]), this[_0x2a15("0x3")]({ "tag": _0x2a15("0x8"), "attributes": { "class": ["ck", _0x2a15("0x6")], "data-user-id": _0x5e1f52["id"] }, "children": _0x106324 });
  }
};

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a2(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u2(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a3(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return lightFormatters_default.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/parseISO/index.js
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures)
    return {
      year: NaN,
      restDateString: ""
    };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null)
    return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures)
    return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures)
    return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z")
    return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures)
    return 0;
  var sign = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = /* @__PURE__ */ new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/differenceInCalendarDays/index.js
var MILLISECONDS_IN_DAY2 = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY2);
}

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/utils/getdatetimeformatter.js
var _0x4861 = ["string", "MM-dd-yyyy hh:mma", "dateTimeFormat", "invalid-date-time-format", "'Yesterday' hh:mma", "'Last' EEEE hh:mma", "'Today' hh:mma"];
(function(_0x5f5811, _0x486138) {
  const _0x47f989 = function(_0x5bb565) {
    while (--_0x5bb565) {
      _0x5f5811["push"](_0x5f5811["shift"]());
    }
  };
  _0x47f989(++_0x486138);
})(_0x4861, 500);
var _0x47f9 = function(_0x5f5811, _0x486138) {
  _0x5f5811 = _0x5f5811 - 0;
  let _0x47f989 = _0x4861[_0x5f5811];
  return _0x47f989;
};
function E2(_0x1cd2a4 = {}) {
  if (void 0 !== _0x1cd2a4["dateTimeFormat"] && "function" != typeof _0x1cd2a4[_0x47f9("0x6")])
    throw new CKEditorError(_0x47f9("0x0"));
  return (_0x5286a4) => {
    const _0x255ffe = _0x47f9("0x4") == typeof _0x5286a4 ? parseISO(_0x5286a4) : _0x5286a4, _0x179aea = /* @__PURE__ */ new Date(), _0x4e1dfc = differenceInCalendarDays(_0x179aea, _0x255ffe);
    return _0x1cd2a4[_0x47f9("0x6")] ? _0x1cd2a4["dateTimeFormat"](_0x255ffe) : format(_0x255ffe, 0 === _0x4e1dfc ? _0x47f9("0x3") : 1 === _0x4e1dfc ? _0x47f9("0x1") : _0x4e1dfc < 7 ? _0x47f9("0x2") : _0x47f9("0x5"));
  };
}

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/utils/trim-html.js
var _0x40a8 = ["match", "...", "split", "indexOf", "slice", "join", "replace", "startsWith", "substring", "length", "push"];
(function(_0x248b0f, _0x40a82c) {
  const _0x181057 = function(_0x5dc27c) {
    while (--_0x5dc27c) {
      _0x248b0f["push"](_0x248b0f["shift"]());
    }
  };
  _0x181057(++_0x40a82c);
})(_0x40a8, 253);
var _0x1810 = function(_0x248b0f, _0x40a82c) {
  _0x248b0f = _0x248b0f - 0;
  let _0x181057 = _0x40a8[_0x248b0f];
  return _0x181057;
};
function z2(_0x19e263, { limit: _0x5a87c3, suffix: _0x5b24ef = _0x1810("0x1") }) {
  const _0x272643 = [];
  let _0x44ce8b = 0;
  const _0x59fa60 = _0x19e263[_0x1810("0x6")](/</g, "\n<")["replace"](/>/g, ">\n")[_0x1810("0x6")](/^\n/g, "")[_0x1810("0x6")](/\n$/g, "")[_0x1810("0x2")]("\n");
  for (let _0x5f3e99 = 0; _0x5f3e99 < _0x59fa60[_0x1810("0x9")]; _0x5f3e99++) {
    let _0x26d9f4 = _0x59fa60[_0x5f3e99];
    const _0x576c6f = Z(_0x26d9f4);
    if (_0x26d9f4[_0x1810("0x7")]("<")) {
      if (_0x44ce8b >= _0x5a87c3) {
        const _0x25bb5e = _0x26d9f4["match"](/[a-zA-Z]+/);
        if (!_0x25bb5e) {
          _0x59fa60[_0x5f3e99] = "";
          continue;
        }
        const _0x2d7f58 = _0x25bb5e[0];
        _0x26d9f4["startsWith"]("</") ? (_0x272643[_0x1810("0x9")] && (_0x26d9f4 = ""), _0x272643["pop"]()) : (_0x272643[_0x1810("0xa")](_0x2d7f58), _0x26d9f4 = "");
      }
    } else {
      if (_0x44ce8b >= _0x5a87c3)
        _0x26d9f4 = "";
      else {
        if (_0x44ce8b + _0x576c6f[_0x1810("0x9")] >= _0x5a87c3) {
          let _0x4393e4 = _0x5a87c3 - _0x44ce8b;
          if (" " === _0x576c6f[_0x4393e4 - 1])
            _0x4393e4--;
          else {
            const _0x44db57 = _0x576c6f[_0x1810("0x4")](_0x4393e4)[_0x1810("0x3")](" ");
            -1 !== _0x44db57 ? _0x4393e4 += _0x44db57 : _0x4393e4 = _0x26d9f4[_0x1810("0x9")];
          }
          _0x26d9f4 = _0x576c6f[_0x1810("0x4")](0, _0x4393e4)["join"]("") + _0x5b24ef, _0x44ce8b = _0x5a87c3;
        } else
          _0x44ce8b += _0x576c6f["length"];
      }
    }
    _0x59fa60[_0x5f3e99] = _0x26d9f4;
  }
  return _0x59fa60[_0x1810("0x5")]("\n")[_0x1810("0x6")](/\n/g, "");
}
function Z(_0x5b28c6) {
  const _0x3e96da = [];
  for (let _0x238d7e = 0; _0x238d7e < _0x5b28c6[_0x1810("0x9")]; _0x238d7e++) {
    const _0x3bec0b = _0x5b28c6[_0x1810("0x8")](_0x238d7e)[_0x1810("0x0")](/^&[a-z0-9#]+;/);
    if (_0x3bec0b) {
      const _0x1543a5 = _0x3bec0b[0];
      _0x3e96da[_0x1810("0xa")](_0x1543a5), _0x238d7e += _0x1543a5["length"] - 1;
    } else
      _0x3e96da["push"](_0x5b28c6[_0x238d7e]);
  }
  return _0x3e96da;
}

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/utils/confirmview.js
var _0x28de = ["submit", "fire", "submitView", "label", "check", "setTemplate", "_createButtonView", "message", "cancelView", "ck-thread__remove-confirm-actions", "cancel", "icon", "Are you sure?", "ck-thread__remove-confirm", "ck-thread__remove-confirm-", "ck-thread__remove-confirm-inner", "bindTemplate", "div", "extendTemplate"];
(function(_0x5cbc45, _0x28decf) {
  const _0x29495e = function(_0x4f3e95) {
    while (--_0x4f3e95) {
      _0x5cbc45["push"](_0x5cbc45["shift"]());
    }
  };
  _0x29495e(++_0x28decf);
})(_0x28de, 489);
var _0x2949 = function(_0x5cbc45, _0x28decf) {
  _0x5cbc45 = _0x5cbc45 - 0;
  let _0x29495e = _0x28de[_0x5cbc45];
  return _0x29495e;
};
var h3 = class extends View {
  constructor(_0x487b62) {
    super(_0x487b62);
    const _0x26ba15 = this[_0x2949("0x2")];
    this[_0x2949("0x7")] = this[_0x2949("0xb")](_0x487b62, getTranslation(_0x487b62, "Yes"), icons[_0x2949("0x9")], _0x2949("0x5")), this[_0x2949("0xd")] = this[_0x2949("0xb")](_0x487b62, getTranslation(_0x487b62, "No"), icons[_0x2949("0xf")], "cancel"), this["set"](_0x2949("0xc"), getTranslation(_0x487b62, _0x2949("0x11"))), this[_0x2949("0xa")]({ "tag": _0x2949("0x3"), "attributes": { "class": [_0x2949("0x12")] }, "children": [{ "tag": "div", "attributes": { "class": _0x2949("0x1") }, "children": [{ "tag": "p", "children": [{ "text": _0x26ba15["to"]("message") }] }, { "tag": _0x2949("0x3"), "attributes": { "class": _0x2949("0xe") }, "children": [this[_0x2949("0x7")], this[_0x2949("0xd")]] }] }] });
  }
  [_0x2949("0xb")](_0x28477d, _0xe1f216, _0x481ca5, _0xc5fcea) {
    const _0x4af93c = new ButtonView(_0x28477d);
    return _0x4af93c[_0x2949("0x8")] = _0xe1f216, _0x4af93c[_0x2949("0x10")] = _0x481ca5, _0x4af93c[_0x2949("0x4")]({ "attributes": { "class": _0x2949("0x0") + _0xc5fcea } }), _0x4af93c["on"]("execute", () => this[_0x2949("0x6")](_0xc5fcea)), _0x4af93c;
  }
};

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/utils/confirmmixin.js
var _0x4b29 = ["element", "render", "isConfirm", "confirmView", "submit", "locale", "focus", "set", "cancel", "_removeConfirm", "cancelConfirm", "destroy", "deregisterChild", "fire", "once", "registerChild", "remove"];
(function(_0x1a95f0, _0x4b29d5) {
  var _0x16f690 = function(_0xbc22a0) {
    while (--_0xbc22a0) {
      _0x1a95f0["push"](_0x1a95f0["shift"]());
    }
  };
  _0x16f690(++_0x4b29d5);
})(_0x4b29, 211);
var _0x16f6 = function(_0x1a95f0, _0x4b29d5) {
  _0x1a95f0 = _0x1a95f0 - 0;
  var _0x16f690 = _0x4b29[_0x1a95f0];
  return _0x16f690;
};
function m3(_0x15a755) {
  return class extends _0x15a755 {
    ["showConfirm"](_0x44d7b9, _0x531572) {
      return this[_0x16f6("0xd")] = new h3(this[_0x16f6("0xf")]), this[_0x16f6("0xd")][_0x16f6("0xb")](), this["confirmView"]["message"] = _0x44d7b9, this[_0x16f6("0xd")][_0x16f6("0x7")](_0x16f6("0x1"), () => {
        this[_0x16f6("0x2")]();
      }), this[_0x16f6("0xd")]["once"]("submit", () => {
        this["_removeConfirm"]();
      }), _0x531572["appendChild"](this[_0x16f6("0xd")]["element"]), this[_0x16f6("0x8")](this[_0x16f6("0xd")]), this[_0x16f6("0xa")][_0x16f6("0x10")](), this[_0x16f6("0x0")]("isConfirm", true), new Promise((_0x2b8bcf) => this[_0x16f6("0xd")]["on"](_0x16f6("0xe"), _0x2b8bcf));
    }
    [_0x16f6("0x3")]() {
      this[_0x16f6("0xc")] && this["confirmView"][_0x16f6("0x6")](_0x16f6("0x1"));
    }
    [_0x16f6("0x2")]() {
      this[_0x16f6("0xa")] && this[_0x16f6("0xd")] && this["confirmView"]["element"] && (this[_0x16f6("0xa")][_0x16f6("0x10")](), this["confirmView"][_0x16f6("0xa")][_0x16f6("0x9")](), this[_0x16f6("0x5")](this[_0x16f6("0xd")]), this[_0x16f6("0xc")] = false, this[_0x16f6("0xd")][_0x16f6("0x4")](), this[_0x16f6("0xd")] = void 0);
    }
  };
}

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/utils/hashobject.js
var _0x4273 = ["sort", "sign", "keys", "object", "number", "charCodeAt", "toString"];
(function(_0x3dd6d8, _0x427316) {
  const _0x5992f3 = function(_0x5cc801) {
    while (--_0x5cc801) {
      _0x3dd6d8["push"](_0x3dd6d8["shift"]());
    }
  };
  _0x5992f3(++_0x427316);
})(_0x4273, 360);
var _0x5992 = function(_0x3dd6d8, _0x427316) {
  _0x3dd6d8 = _0x3dd6d8 - 0;
  let _0x5992f3 = _0x4273[_0x3dd6d8];
  return _0x5992f3;
};
function b2(_0x3aa396) {
  let _0x5be8eb = 0, _0x1e9c6e = 0;
  for (const _0x70dc56 of g(_0x3aa396))
    _0x5be8eb = (_0x5be8eb << 5) - _0x5be8eb + _0x70dc56, _0x5be8eb &= _0x5be8eb, [_0x5be8eb, _0x1e9c6e] = [_0x1e9c6e, _0x5be8eb];
  return O2(_0x5be8eb) + O2(_0x1e9c6e);
}
function* j(_0x4cab11) {
  _0x4cab11 ? "boolean" == typeof _0x4cab11 ? yield 1 : Array["isArray"](_0x4cab11) ? yield* function* (_0x11ec68) {
    for (const _0x122294 of _0x11ec68)
      yield* j(_0x122294);
  }(_0x4cab11) : _0x5992("0x0") == typeof _0x4cab11 ? yield* g(_0x4cab11) : "string" == typeof _0x4cab11 ? yield* A(_0x4cab11) : _0x5992("0x1") == typeof _0x4cab11 && (yield _0x4cab11) : yield 0;
}
function* g(_0x436fd1) {
  if (yield M3("{"), _0x436fd1) {
    const _0x506108 = Object[_0x5992("0x6")](_0x436fd1)[_0x5992("0x4")]();
    for (const _0x2e28f1 of _0x506108) {
      yield* A(_0x2e28f1), yield M3(":");
      const _0x2edfca = _0x436fd1[_0x2e28f1];
      yield* j(_0x2edfca);
    }
  }
  yield M3("}");
}
function* A(_0x16a815) {
  yield M3('"');
  for (const _0x2e19a1 of _0x16a815)
    yield M3(_0x2e19a1);
  yield M3('"');
}
function M3(_0x1ab596) {
  return _0x1ab596[_0x5992("0x2")](0);
}
function O2(_0x1a6bb1) {
  return (_0x1a6bb1 *= Math[_0x5992("0x5")](_0x1a6bb1))[_0x5992("0x3")](36);
}

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/utils/sanitizeEditorConfig.js
var _0x453b = ["WordCount", "concat", "config", "Autosave", "pluginName", "length", "names", "find", "initialData", "RevisionTracker", "constructor", "every", "toolbar", "extraPlugins", "requires", "map", "filter", "has", "from", "string", "includes", "plugins", "WProofreader", "get", "_context", "WebSocketGateway", "removePlugins", "set"];
(function(_0x272f53, _0x453b64) {
  const _0x23353b = function(_0xc4cc5e) {
    while (--_0xc4cc5e) {
      _0x272f53["push"](_0x272f53["shift"]());
    }
  };
  _0x23353b(++_0x453b64);
})(_0x453b, 264);
var _0x2335 = function(_0x272f53, _0x453b64) {
  _0x272f53 = _0x272f53 - 0;
  let _0x23353b = _0x453b[_0x272f53];
  return _0x23353b;
};
var w2 = [_0x2335("0x18"), "context", _0x2335("0x0"), "rootsAttributes"];
var W = [_0x2335("0xd"), _0x2335("0x19"), _0x2335("0x13"), _0x2335("0x10"), "DocumentOutline", _0x2335("0xa")];
function v(_0x5227bd, _0x2356c5, _0x8d0e99, _0x331093 = []) {
  const _0x44a7eb = "string" == typeof _0x5227bd ? _0x8d0e99["get"](_0x5227bd)["constructor"] : _0x5227bd, _0x1c242a = _0x44a7eb["pluginName"] || _0x44a7eb["name"];
  if (_0x2356c5[_0x2335("0x5")](_0x1c242a))
    return _0x2356c5["get"](_0x1c242a);
  if (_0x2356c5[_0x2335("0xf")](_0x1c242a, true), _0x1c242a && W[_0x2335("0x11")](_0x331093)[_0x2335("0x8")](_0x1c242a))
    return _0x2356c5[_0x2335("0xf")](_0x1c242a, false), false;
  if (!_0x44a7eb[_0x2335("0x2")])
    return _0x2356c5["set"](_0x1c242a, true), true;
  const _0x5829ac = _0x44a7eb[_0x2335("0x2")][_0x2335("0x1b")]((_0x34eb81) => v(_0x34eb81, _0x2356c5, _0x8d0e99, _0x331093));
  return _0x2356c5[_0x2335("0xf")](_0x1c242a, _0x5829ac), _0x5829ac;
}
function D2(_0x45bc6b, _0x41ea40) {
  const _0x6797e1 = {};
  for (const _0x67f26c of _0x45bc6b[_0x2335("0x12")][_0x2335("0x16")]())
    w2["includes"](_0x67f26c) || (_0x6797e1[_0x67f26c] = _0x45bc6b[_0x2335("0x12")][_0x2335("0xb")](_0x67f26c));
  const _0x1d1a9e = _0x6797e1[_0x2335("0x9")] || [], _0x365de5 = _0x45bc6b[_0x2335("0x1a")]["builtinPlugins"] || [], _0x1e7e82 = _0x1d1a9e[_0x2335("0x15")] ? _0x1d1a9e : _0x365de5, _0x492f98 = _0x6797e1[_0x2335("0x1")] || [];
  delete _0x6797e1[_0x2335("0x1")];
  const _0x5aa422 = _0x6797e1[_0x2335("0xe")] || [];
  delete _0x6797e1[_0x2335("0xe")];
  const _0x389f71 = _0x45bc6b[_0x2335("0xc")]["config"]["get"](_0x2335("0x9")) || [], _0x488967 = _0x1e7e82[_0x2335("0x11")](_0x492f98)[_0x2335("0x11")](_0x389f71)[_0x2335("0x3")]((_0x4d7c09) => _0x2335("0x7") == typeof _0x4d7c09 ? _0x365de5[_0x2335("0x17")]((_0x4e8f6a) => _0x4e8f6a[_0x2335("0x14")] == _0x4d7c09) : _0x4d7c09)[_0x2335("0x4")]((_0x24606e) => !_0x5aa422["includes"](_0x24606e)), _0x58ebf9 = Array[_0x2335("0x6")](new Set(_0x488967)), _0x11ed0b = /* @__PURE__ */ new Map();
  return _0x6797e1[_0x2335("0x9")] = _0x58ebf9["filter"]((_0x5a7b32) => v(_0x5a7b32, _0x11ed0b, _0x45bc6b[_0x2335("0x9")], _0x41ea40)), _0x6797e1;
}

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/utils/getmarkerdomelement.js
var _0x34c2 = ["markerNameToElements", "filter", "mapViewToDom", "push", "length", "getClientRects", "mapper", "name", "domConverter", "values", "sort", "map", "view"];
(function(_0x2f2644, _0x34c2ee) {
  const _0x54e886 = function(_0x39e37c) {
    while (--_0x39e37c) {
      _0x2f2644["push"](_0x2f2644["shift"]());
    }
  };
  _0x54e886(++_0x34c2ee);
})(_0x34c2, 298);
var _0x54e8 = function(_0x2f2644, _0x34c2ee) {
  _0x2f2644 = _0x2f2644 - 0;
  let _0x54e886 = _0x34c2[_0x2f2644];
  return _0x54e886;
};
function getAllMarkersDomElementsSorted(_0x32a6b7, _0x4508e6) {
  if (0 === _0x4508e6["length"])
    return null;
  const _0x2677cb = [], _0x553e1b = _0x32a6b7["view"]["domConverter"];
  for (const _0x4641a7 of _0x4508e6) {
    const _0x2c7a0f = _0x32a6b7[_0x54e8("0x7")][_0x54e8("0x1")](_0x4641a7["name"]);
    if (!_0x2c7a0f)
      continue;
    const _0x52ebf1 = Array["from"](_0x2c7a0f)[_0x54e8("0xc")]((_0x47a947) => _0x553e1b[_0x54e8("0x3")](_0x47a947))[_0x54e8("0x2")]((_0x369e59) => !!_0x369e59);
    _0x2677cb[_0x54e8("0x4")](..._0x52ebf1);
  }
  if (0 === _0x2677cb[_0x54e8("0x5")])
    return null;
  const _0x7bdcae = [];
  for (const _0x57ead3 of _0x2677cb) {
    const _0x361d7a = _0x57ead3[_0x54e8("0x6")]()["item"](0);
    _0x361d7a && _0x7bdcae[_0x54e8("0x4")]({ "x": _0x361d7a["x"], "y": _0x361d7a["y"], "domElement": _0x57ead3 });
  }
  return 0 === _0x7bdcae["length"] ? null : (_0x7bdcae[_0x54e8("0xb")]((_0x2dd88a, _0x3aa55a) => _0x2dd88a["y"] - _0x3aa55a["y"] || _0x2dd88a["x"] - _0x3aa55a["x"]), _0x7bdcae[_0x54e8("0xc")]((_0x1be58e) => _0x1be58e["domElement"]));
}

// node_modules/@ckeditor/ckeditor5-collaboration-core/src/suggestionstyles.js
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/suggestion.css";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/suggestionmarker.css";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/integrations/image.css";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/integrations/horizontalline.css";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/integrations/mediaembed.css";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/integrations/pagebreak.css";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/integrations/table.css";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-collaboration-core/theme/integrations/codeblock.css";

export {
  l,
  B,
  E2 as E,
  getAllMarkersDomElementsSorted,
  z2 as z,
  m3 as m,
  b2 as b,
  D2 as D
};
/*! Bundled license information:

ckeditor5-collaboration/src/collaboration-core.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)
*/
//# sourceMappingURL=chunk-SUMFKJJ3.js.map
