import "./chunk-LTAT4F5Y.js";
import "./chunk-VQXVBVB4.js";
import {
  ButtonView
} from "./chunk-SGTDNT4V.js";
import "./chunk-6LVMAMLV.js";
import {
  Command,
  Plugin,
  first
} from "./chunk-JI2V5GJZ.js";
import "./chunk-6DXDGCMU.js";
import "./chunk-HM4MQYWN.js";

// node_modules/@ckeditor/ckeditor5-remove-format/src/removeformatui.js
import removeFormatIcon from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-remove-format/theme/icons/remove-format.svg";
var REMOVE_FORMAT = "removeFormat";
var RemoveFormatUI = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "RemoveFormatUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const t = editor.t;
    editor.ui.componentFactory.add(REMOVE_FORMAT, (locale) => {
      const command = editor.commands.get(REMOVE_FORMAT);
      const view = new ButtonView(locale);
      view.set({
        label: t("Remove Format"),
        icon: removeFormatIcon,
        tooltip: true
      });
      view.bind("isOn", "isEnabled").to(command, "value", "isEnabled");
      this.listenTo(view, "execute", () => {
        editor.execute(REMOVE_FORMAT);
        editor.editing.view.focus();
      });
      return view;
    });
  }
};

// node_modules/@ckeditor/ckeditor5-remove-format/src/removeformatcommand.js
var RemoveFormatCommand = class extends Command {
  /**
   * @inheritDoc
   */
  refresh() {
    const model = this.editor.model;
    this.isEnabled = !!first(this._getFormattingItems(model.document.selection, model.schema));
  }
  /**
   * @inheritDoc
   */
  execute() {
    const model = this.editor.model;
    const schema = model.schema;
    model.change((writer) => {
      for (const item of this._getFormattingItems(model.document.selection, schema)) {
        if (item.is("selection")) {
          for (const attributeName of this._getFormattingAttributes(item, schema)) {
            writer.removeSelectionAttribute(attributeName);
          }
        } else {
          const itemRange = writer.createRangeOn(item);
          for (const attributeName of this._getFormattingAttributes(item, schema)) {
            writer.removeAttribute(attributeName, itemRange);
          }
        }
      }
    });
  }
  /**
   * Returns an iterable of items in a selection (including the selection itself) that have formatting model
   * attributes to be removed by the feature.
   *
   * @param schema The schema describing the item.
   */
  *_getFormattingItems(selection, schema) {
    const itemHasRemovableFormatting = (item) => {
      return !!first(this._getFormattingAttributes(item, schema));
    };
    for (const curRange of selection.getRanges()) {
      for (const item of curRange.getItems()) {
        if (!schema.isBlock(item) && itemHasRemovableFormatting(item)) {
          yield item;
        }
      }
    }
    for (const block of selection.getSelectedBlocks()) {
      if (itemHasRemovableFormatting(block)) {
        yield block;
      }
    }
    if (itemHasRemovableFormatting(selection)) {
      yield selection;
    }
  }
  /**
   * Returns an iterable of formatting attributes of a given model item.
   *
   * **Note:** Formatting items have the `isFormatting` property set to `true`.
   *
   * @param schema The schema describing the item.
   * @returns The names of formatting attributes found in a given item.
   */
  *_getFormattingAttributes(item, schema) {
    for (const [attributeName] of item.getAttributes()) {
      const attributeProperties = schema.getAttributeProperties(attributeName);
      if (attributeProperties && attributeProperties.isFormatting) {
        yield attributeName;
      }
    }
  }
};

// node_modules/@ckeditor/ckeditor5-remove-format/src/removeformatediting.js
var RemoveFormatEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "RemoveFormatEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.commands.add("removeFormat", new RemoveFormatCommand(editor));
  }
};

// node_modules/@ckeditor/ckeditor5-remove-format/src/removeformat.js
var RemoveFormat = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [RemoveFormatEditing, RemoveFormatUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "RemoveFormat";
  }
};
export {
  RemoveFormat,
  RemoveFormatEditing,
  RemoveFormatUI
};
/*! Bundled license information:

@ckeditor/ckeditor5-remove-format/src/removeformatui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-remove-format/src/removeformatcommand.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-remove-format/src/removeformatediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-remove-format/src/removeformat.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-remove-format/src/augmentation.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-remove-format/src/index.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)
*/
//# sourceMappingURL=@ckeditor_ckeditor5-remove-format.js.map
