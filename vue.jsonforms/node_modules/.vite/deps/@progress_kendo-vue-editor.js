import {
  TabStrip,
  TabStripTab
} from "./chunk-HKDVYCRN.js";
import "./chunk-T2ROD4JR.js";
import {
  FieldWrapper,
  Form,
  FormElement
} from "./chunk-HLGAO77A.js";
import {
  savePDF
} from "./chunk-DUAICYJM.js";
import "./chunk-PU4UKSZF.js";
import {
  DropDownList
} from "./chunk-IBGZHAYS.js";
import {
  Checkbox,
  ColorPicker,
  Input
} from "./chunk-N4XRXEE2.js";
import "./chunk-C5E7VHMO.js";
import "./chunk-PPZBNG6G.js";
import "./chunk-RFYN2QK2.js";
import {
  DialogActionsBar,
  Window
} from "./chunk-WKLUZJPW.js";
import {
  provideLocalizationService
} from "./chunk-TNWINVQ6.js";
import {
  Button,
  ButtonGroup,
  Toolbar,
  ToolbarSeparator
} from "./chunk-EA6IUSJI.js";
import {
  Popup
} from "./chunk-P43752AQ.js";
import "./chunk-GK4QQKT7.js";
import {
  alignCenterIcon,
  alignJustifyIcon,
  alignLeftIcon,
  alignRemoveIcon,
  alignRightIcon,
  boldIcon,
  cellSplitHorizontallyIcon,
  cellsMergeIcon,
  chevronLeftIcon,
  chevronRightIcon,
  clearCssIcon,
  codeIcon,
  dropletIcon,
  fileAddIcon,
  filePdfIcon,
  foregroundColorIcon,
  imageIcon,
  indentIcon,
  italicIcon,
  linkIcon,
  listOrderedIcon,
  listUnorderedIcon,
  outdentIcon,
  printIcon,
  redoIcon,
  searchIcon,
  selectAllIcon,
  strikethroughIcon,
  subscriptIcon,
  supscriptIcon,
  tableAddIcon,
  tableColumnDeleteIcon,
  tableColumnInsertLeftIcon,
  tableColumnInsertRightIcon,
  tableDeleteIcon,
  tableRowDeleteIcon,
  tableRowInsertAboveIcon,
  tableRowInsertBelowIcon,
  underlineIcon,
  undoIcon,
  unlinkIcon
} from "./chunk-HKPTYRTE.js";
import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";
import "./chunk-HM4MQYWN.js";

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value2) {
  return typeof value2 === "object";
};

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/classNames.js
var classNames = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.filter(function(arg) {
    return arg !== true && !!arg;
  }).map(function(arg) {
    return Array.isArray(arg) ? classNames.apply(void 0, arg) : isObject(arg) ? Object.keys(arg).map(function(key, idx) {
      return arg[idx] || arg[key] && key || null;
    }).filter(function(el) {
      return el !== null;
    }).join(" ") : arg;
  }).filter(function(arg) {
    return !!arg;
  }).join(" ");
};

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/refs.js
function getRef(comp, refName, customRef) {
  return comp.v3 ? comp["".concat(refName, "Ref")] : comp.$refs["".concat(customRef || refName)];
}
function setRef(comp, refName, customRef) {
  return comp.v3 ? function(el) {
    comp["".concat(refName, "Ref")] = el;
  } : customRef || refName;
}

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _defineProperty(obj, key, value2) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/noop.js
var noop = function() {
};

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a2) {
  var h = _a2.h, template = _a2.template, defaultRendering = _a2.defaultRendering, defaultSlots = _a2.defaultSlots, additionalProps = _a2.additionalProps, additionalListeners = _a2.additionalListeners, swapDefaultSlots = _a2.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata2) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata2);
  } else {
    var message = "License activation failed for ".concat(packageMetadata2.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata2.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/icons/constants.js
var SIZE_CLASSES = {
  "default": "",
  "xsmall": "k-icon-xs",
  "small": "k-icon-sm",
  "medium": "k-icon-md",
  "large": "k-icon-lg",
  "xlarge": "k-icon-xl"
};

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";
var FontIconVue2 = {
  name: "KendoFontIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    tabIndex: Number
  },
  computed: {
    fontClassNames: function fontClassNames() {
      var _a2;
      var _b = this.$props, name = _b.name, flip = _b.flip, size = _b.size, themeColor = _b.themeColor;
      return _a2 = {
        "k-icon": true
      }, _a2["k-i-" + name] = name, _a2["k-color-" + themeColor] = themeColor, _a2["k-flip-h"] = flip === "horizontal" || flip === "both", _a2["k-flip-v"] = flip === "vertical" || flip === "both", _a2[SIZE_CLASSES[size]] = size, _a2;
    }
  },
  // @ts-ignore
  setup: !isV33 ? void 0 : function() {
    var v3 = !!isV33;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh2 || createElement;
    var _a2 = this.$props, id = _a2.id, title = _a2.title, tabIndex = _a2.tabIndex, ariaLabel = _a2.ariaLabel;
    return h("span", {
      "class": this.fontClassNames,
      id,
      attrs: this.v3 ? void 0 : {
        id,
        title,
        "aria-label": ariaLabel,
        tabIndex,
        role: "presentation"
      },
      title,
      "aria-label": ariaLabel,
      tabIndex,
      role: "presentation",
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    });
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit("click", e);
    }
  }
};
var FontIcon = FontIconVue2;

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";
var SvgIconVue2 = {
  name: "KendoSvgIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    icon: Object,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a2;
      var _b = this.$props, name = _b.name, flip = _b.flip, size = _b.size, themeColor = _b.themeColor;
      return _a2 = {
        "k-svg-icon": true
      }, _a2["k-color-" + themeColor] = themeColor, _a2["k-svg-i-" + name] = name, _a2["k-flip-h"] = flip === "horizontal" || flip === "both", _a2["k-flip-v"] = flip === "vertical" || flip === "both", _a2[SIZE_CLASSES[size]] = size, _a2;
    }
  },
  // @ts-ignore
  setup: !isV34 ? void 0 : function() {
    var v3 = !!isV34;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render3(createElement) {
    var h = gh3 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a2 = this.$props, svgClassName = _a2.svgClassName, icon = _a2.icon, id = _a2.id, tabIndex = _a2.tabIndex, svgStyle = _a2.svgStyle, viewBox = _a2.viewBox, title = _a2.title, ariaLabel = _a2.ariaLabel;
    var innerHTML = icon ? icon.content : void 0;
    var attrs = {
      id,
      title,
      "aria-hidden": true,
      tabIndex,
      ariaLabel,
      focusable: "false",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: icon ? icon.viewBox : viewBox
    };
    var svg = h("svg", __assign2(__assign2({}, attrs), {
      attrs: this.v3 ? void 0 : attrs,
      domProps: this.v3 ? void 0 : {
        innerHTML
      },
      innerHTML,
      "class": svgClassName,
      style: svgStyle
    }), [icon ? void 0 : defaultSlot]);
    return h("span", {
      "class": this.wrapperClass,
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }, [svg]);
  },
  methods: {
    handleClick: function handleClick2(e) {
      this.$emit("click", e);
    }
  }
};
var SvgIcon = SvgIconVue2;

// node_modules/@progress/kendo-vue-editor/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";
var IconVue2 = {
  name: "KendoIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  inject: {
    kendoIcons: {
      default: {
        type: "font",
        icons: {}
      }
    }
  },
  props: {
    name: String,
    icon: Object,
    title: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number
  },
  // @ts-ignore
  setup: !isV35 ? void 0 : function() {
    var v3 = !!isV35;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render4(createElement) {
    var h = gh4 || createElement;
    var _a2 = this.$props, name = _a2.name, icon = _a2.icon, themeColor = _a2.themeColor, size = _a2.size, flip = _a2.flip, id = _a2.id, viewBox = _a2.viewBox, tabIndex = _a2.tabIndex, title = _a2.title, ariaLabel = _a2.ariaLabel;
    var svg = name && this.kendoIcons && this.kendoIcons.icons[name] || icon;
    var renderSVG = this.kendoIcons && this.kendoIcons.type === "svg" && svg !== void 0;
    var resolvedName = name || (icon && icon.name ? icon.name : void 0);
    var commonProps = {
      themeColor,
      size,
      flip,
      id,
      tabIndex,
      title,
      ariaLabel
    };
    var fontIcon = h(FontIcon, __assign3(__assign3({}, commonProps), {
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    var svgIcon = h(SvgIcon, __assign3(__assign3({}, commonProps), {
      icon: svg,
      viewBox,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        icon: svg,
        viewBox
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    return renderSVG ? svgIcon : fontIcon;
  },
  methods: {
    handleClick: function handleClick3(e) {
      this.$emit("click", e);
    }
  }
};
var Icon = IconVue2;

// node_modules/orderedmap/dist/index.js
function OrderedMap(content) {
  this.content = content;
}
OrderedMap.prototype = {
  constructor: OrderedMap,
  find: function(key) {
    for (var i = 0; i < this.content.length; i += 2)
      if (this.content[i] === key)
        return i;
    return -1;
  },
  // :: (string) → ?any
  // Retrieve the value stored under `key`, or return undefined when
  // no such key exists.
  get: function(key) {
    var found2 = this.find(key);
    return found2 == -1 ? void 0 : this.content[found2 + 1];
  },
  // :: (string, any, ?string) → OrderedMap
  // Create a new map by replacing the value of `key` with a new
  // value, or adding a binding to the end of the map. If `newKey` is
  // given, the key of the binding will be replaced with that key.
  update: function(key, value2, newKey) {
    var self = newKey && newKey != key ? this.remove(newKey) : this;
    var found2 = self.find(key), content = self.content.slice();
    if (found2 == -1) {
      content.push(newKey || key, value2);
    } else {
      content[found2 + 1] = value2;
      if (newKey)
        content[found2] = newKey;
    }
    return new OrderedMap(content);
  },
  // :: (string) → OrderedMap
  // Return a map with the given key removed, if it existed.
  remove: function(key) {
    var found2 = this.find(key);
    if (found2 == -1)
      return this;
    var content = this.content.slice();
    content.splice(found2, 2);
    return new OrderedMap(content);
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the start of the map.
  addToStart: function(key, value2) {
    return new OrderedMap([key, value2].concat(this.remove(key).content));
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the end of the map.
  addToEnd: function(key, value2) {
    var content = this.remove(key).content.slice();
    content.push(key, value2);
    return new OrderedMap(content);
  },
  // :: (string, string, any) → OrderedMap
  // Add a key after the given key. If `place` is not found, the new
  // key is added to the end.
  addBefore: function(place, key, value2) {
    var without = this.remove(key), content = without.content.slice();
    var found2 = without.find(place);
    content.splice(found2 == -1 ? content.length : found2, 0, key, value2);
    return new OrderedMap(content);
  },
  // :: ((key: string, value: any))
  // Call the given function for each key/value pair in the map, in
  // order.
  forEach: function(f) {
    for (var i = 0; i < this.content.length; i += 2)
      f(this.content[i], this.content[i + 1]);
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by prepending the keys in this map that don't
  // appear in `map` before the keys in `map`.
  prepend: function(map2) {
    map2 = OrderedMap.from(map2);
    if (!map2.size)
      return this;
    return new OrderedMap(map2.content.concat(this.subtract(map2).content));
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by appending the keys in this map that don't
  // appear in `map` after the keys in `map`.
  append: function(map2) {
    map2 = OrderedMap.from(map2);
    if (!map2.size)
      return this;
    return new OrderedMap(this.subtract(map2).content.concat(map2.content));
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a map containing all the keys in this map that don't
  // appear in `map`.
  subtract: function(map2) {
    var result = this;
    map2 = OrderedMap.from(map2);
    for (var i = 0; i < map2.content.length; i += 2)
      result = result.remove(map2.content[i]);
    return result;
  },
  // :: () → Object
  // Turn ordered map into a plain object.
  toObject: function() {
    var result = {};
    this.forEach(function(key, value2) {
      result[key] = value2;
    });
    return result;
  },
  // :: number
  // The amount of keys in this map.
  get size() {
    return this.content.length >> 1;
  }
};
OrderedMap.from = function(value2) {
  if (value2 instanceof OrderedMap)
    return value2;
  var content = [];
  if (value2)
    for (var prop in value2)
      content.push(prop, value2[prop]);
  return new OrderedMap(content);
};
var dist_default = OrderedMap;

// node_modules/prosemirror-model/dist/index.js
function findDiffStart(a, b, pos) {
  for (let i = 0; ; i++) {
    if (i == a.childCount || i == b.childCount)
      return a.childCount == b.childCount ? null : pos;
    let childA = a.child(i), childB = b.child(i);
    if (childA == childB) {
      pos += childA.nodeSize;
      continue;
    }
    if (!childA.sameMarkup(childB))
      return pos;
    if (childA.isText && childA.text != childB.text) {
      for (let j = 0; childA.text[j] == childB.text[j]; j++)
        pos++;
      return pos;
    }
    if (childA.content.size || childB.content.size) {
      let inner = findDiffStart(childA.content, childB.content, pos + 1);
      if (inner != null)
        return inner;
    }
    pos += childA.nodeSize;
  }
}
function findDiffEnd(a, b, posA, posB) {
  for (let iA = a.childCount, iB = b.childCount; ; ) {
    if (iA == 0 || iB == 0)
      return iA == iB ? null : { a: posA, b: posB };
    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;
    if (childA == childB) {
      posA -= size;
      posB -= size;
      continue;
    }
    if (!childA.sameMarkup(childB))
      return { a: posA, b: posB };
    if (childA.isText && childA.text != childB.text) {
      let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
        same++;
        posA--;
        posB--;
      }
      return { a: posA, b: posB };
    }
    if (childA.content.size || childB.content.size) {
      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
      if (inner)
        return inner;
    }
    posA -= size;
    posB -= size;
  }
}
var Fragment = class _Fragment {
  /**
  @internal
  */
  constructor(content, size) {
    this.content = content;
    this.size = size || 0;
    if (size == null)
      for (let i = 0; i < content.length; i++)
        this.size += content[i].nodeSize;
  }
  /**
  Invoke a callback for all descendant nodes between the given two
  positions (relative to start of this fragment). Doesn't descend
  into a node when the callback returns `false`.
  */
  nodesBetween(from2, to, f, nodeStart = 0, parent) {
    for (let i = 0, pos = 0; pos < to; i++) {
      let child = this.content[i], end = pos + child.nodeSize;
      if (end > from2 && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {
        let start = pos + 1;
        child.nodesBetween(Math.max(0, from2 - start), Math.min(child.content.size, to - start), f, nodeStart + start);
      }
      pos = end;
    }
  }
  /**
  Call the given callback for every descendant node. `pos` will be
  relative to the start of the fragment. The callback may return
  `false` to prevent traversal of a given node's children.
  */
  descendants(f) {
    this.nodesBetween(0, this.size, f);
  }
  /**
  Extract the text between `from` and `to`. See the same method on
  [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
  */
  textBetween(from2, to, blockSeparator, leafText) {
    let text = "", separated = true;
    this.nodesBetween(from2, to, (node, pos) => {
      if (node.isText) {
        text += node.text.slice(Math.max(from2, pos) - pos, to - pos);
        separated = !blockSeparator;
      } else if (node.isLeaf) {
        if (leafText) {
          text += typeof leafText === "function" ? leafText(node) : leafText;
        } else if (node.type.spec.leafText) {
          text += node.type.spec.leafText(node);
        }
        separated = !blockSeparator;
      } else if (!separated && node.isBlock) {
        text += blockSeparator;
        separated = true;
      }
    }, 0);
    return text;
  }
  /**
  Create a new fragment containing the combined content of this
  fragment and the other.
  */
  append(other) {
    if (!other.size)
      return this;
    if (!this.size)
      return other;
    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;
    if (last.isText && last.sameMarkup(first)) {
      content[content.length - 1] = last.withText(last.text + first.text);
      i = 1;
    }
    for (; i < other.content.length; i++)
      content.push(other.content[i]);
    return new _Fragment(content, this.size + other.size);
  }
  /**
  Cut out the sub-fragment between the two given positions.
  */
  cut(from2, to = this.size) {
    if (from2 == 0 && to == this.size)
      return this;
    let result = [], size = 0;
    if (to > from2)
      for (let i = 0, pos = 0; pos < to; i++) {
        let child = this.content[i], end = pos + child.nodeSize;
        if (end > from2) {
          if (pos < from2 || end > to) {
            if (child.isText)
              child = child.cut(Math.max(0, from2 - pos), Math.min(child.text.length, to - pos));
            else
              child = child.cut(Math.max(0, from2 - pos - 1), Math.min(child.content.size, to - pos - 1));
          }
          result.push(child);
          size += child.nodeSize;
        }
        pos = end;
      }
    return new _Fragment(result, size);
  }
  /**
  @internal
  */
  cutByIndex(from2, to) {
    if (from2 == to)
      return _Fragment.empty;
    if (from2 == 0 && to == this.content.length)
      return this;
    return new _Fragment(this.content.slice(from2, to));
  }
  /**
  Create a new fragment in which the node at the given index is
  replaced by the given node.
  */
  replaceChild(index, node) {
    let current = this.content[index];
    if (current == node)
      return this;
    let copy2 = this.content.slice();
    let size = this.size + node.nodeSize - current.nodeSize;
    copy2[index] = node;
    return new _Fragment(copy2, size);
  }
  /**
  Create a new fragment by prepending the given node to this
  fragment.
  */
  addToStart(node) {
    return new _Fragment([node].concat(this.content), this.size + node.nodeSize);
  }
  /**
  Create a new fragment by appending the given node to this
  fragment.
  */
  addToEnd(node) {
    return new _Fragment(this.content.concat(node), this.size + node.nodeSize);
  }
  /**
  Compare this fragment to another one.
  */
  eq(other) {
    if (this.content.length != other.content.length)
      return false;
    for (let i = 0; i < this.content.length; i++)
      if (!this.content[i].eq(other.content[i]))
        return false;
    return true;
  }
  /**
  The first child of the fragment, or `null` if it is empty.
  */
  get firstChild() {
    return this.content.length ? this.content[0] : null;
  }
  /**
  The last child of the fragment, or `null` if it is empty.
  */
  get lastChild() {
    return this.content.length ? this.content[this.content.length - 1] : null;
  }
  /**
  The number of child nodes in this fragment.
  */
  get childCount() {
    return this.content.length;
  }
  /**
  Get the child node at the given index. Raise an error when the
  index is out of range.
  */
  child(index) {
    let found2 = this.content[index];
    if (!found2)
      throw new RangeError("Index " + index + " out of range for " + this);
    return found2;
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(index) {
    return this.content[index] || null;
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(f) {
    for (let i = 0, p = 0; i < this.content.length; i++) {
      let child = this.content[i];
      f(child, p, i);
      p += child.nodeSize;
    }
  }
  /**
  Find the first position at which this fragment and another
  fragment differ, or `null` if they are the same.
  */
  findDiffStart(other, pos = 0) {
    return findDiffStart(this, other, pos);
  }
  /**
  Find the first position, searching from the end, at which this
  fragment and the given fragment differ, or `null` if they are
  the same. Since this position will not be the same in both
  nodes, an object with two separate positions is returned.
  */
  findDiffEnd(other, pos = this.size, otherPos = other.size) {
    return findDiffEnd(this, other, pos, otherPos);
  }
  /**
  Find the index and inner offset corresponding to a given relative
  position in this fragment. The result object will be reused
  (overwritten) the next time the function is called. (Not public.)
  */
  findIndex(pos, round = -1) {
    if (pos == 0)
      return retIndex(0, pos);
    if (pos == this.size)
      return retIndex(this.content.length, pos);
    if (pos > this.size || pos < 0)
      throw new RangeError(`Position ${pos} outside of fragment (${this})`);
    for (let i = 0, curPos = 0; ; i++) {
      let cur = this.child(i), end = curPos + cur.nodeSize;
      if (end >= pos) {
        if (end == pos || round > 0)
          return retIndex(i + 1, end);
        return retIndex(i, curPos);
      }
      curPos = end;
    }
  }
  /**
  Return a debugging string that describes this fragment.
  */
  toString() {
    return "<" + this.toStringInner() + ">";
  }
  /**
  @internal
  */
  toStringInner() {
    return this.content.join(", ");
  }
  /**
  Create a JSON-serializeable representation of this fragment.
  */
  toJSON() {
    return this.content.length ? this.content.map((n) => n.toJSON()) : null;
  }
  /**
  Deserialize a fragment from its JSON representation.
  */
  static fromJSON(schema, value2) {
    if (!value2)
      return _Fragment.empty;
    if (!Array.isArray(value2))
      throw new RangeError("Invalid input for Fragment.fromJSON");
    return new _Fragment(value2.map(schema.nodeFromJSON));
  }
  /**
  Build a fragment from an array of nodes. Ensures that adjacent
  text nodes with the same marks are joined together.
  */
  static fromArray(array) {
    if (!array.length)
      return _Fragment.empty;
    let joined, size = 0;
    for (let i = 0; i < array.length; i++) {
      let node = array[i];
      size += node.nodeSize;
      if (i && node.isText && array[i - 1].sameMarkup(node)) {
        if (!joined)
          joined = array.slice(0, i);
        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text);
      } else if (joined) {
        joined.push(node);
      }
    }
    return new _Fragment(joined || array, size);
  }
  /**
  Create a fragment from something that can be interpreted as a
  set of nodes. For `null`, it returns the empty fragment. For a
  fragment, the fragment itself. For a node or array of nodes, a
  fragment containing those nodes.
  */
  static from(nodes3) {
    if (!nodes3)
      return _Fragment.empty;
    if (nodes3 instanceof _Fragment)
      return nodes3;
    if (Array.isArray(nodes3))
      return this.fromArray(nodes3);
    if (nodes3.attrs)
      return new _Fragment([nodes3], nodes3.nodeSize);
    throw new RangeError("Can not convert " + nodes3 + " to a Fragment" + (nodes3.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
  }
};
Fragment.empty = new Fragment([], 0);
var found = { index: 0, offset: 0 };
function retIndex(index, offset) {
  found.index = index;
  found.offset = offset;
  return found;
}
function compareDeep(a, b) {
  if (a === b)
    return true;
  if (!(a && typeof a == "object") || !(b && typeof b == "object"))
    return false;
  let array = Array.isArray(a);
  if (Array.isArray(b) != array)
    return false;
  if (array) {
    if (a.length != b.length)
      return false;
    for (let i = 0; i < a.length; i++)
      if (!compareDeep(a[i], b[i]))
        return false;
  } else {
    for (let p in a)
      if (!(p in b) || !compareDeep(a[p], b[p]))
        return false;
    for (let p in b)
      if (!(p in a))
        return false;
  }
  return true;
}
var Mark = class _Mark {
  /**
  @internal
  */
  constructor(type, attrs) {
    this.type = type;
    this.attrs = attrs;
  }
  /**
  Given a set of marks, create a new set which contains this one as
  well, in the right position. If this mark is already in the set,
  the set itself is returned. If any marks that are set to be
  [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
  those are replaced by this one.
  */
  addToSet(set) {
    let copy2, placed = false;
    for (let i = 0; i < set.length; i++) {
      let other = set[i];
      if (this.eq(other))
        return set;
      if (this.type.excludes(other.type)) {
        if (!copy2)
          copy2 = set.slice(0, i);
      } else if (other.type.excludes(this.type)) {
        return set;
      } else {
        if (!placed && other.type.rank > this.type.rank) {
          if (!copy2)
            copy2 = set.slice(0, i);
          copy2.push(this);
          placed = true;
        }
        if (copy2)
          copy2.push(other);
      }
    }
    if (!copy2)
      copy2 = set.slice();
    if (!placed)
      copy2.push(this);
    return copy2;
  }
  /**
  Remove this mark from the given set, returning a new set. If this
  mark is not in the set, the set itself is returned.
  */
  removeFromSet(set) {
    for (let i = 0; i < set.length; i++)
      if (this.eq(set[i]))
        return set.slice(0, i).concat(set.slice(i + 1));
    return set;
  }
  /**
  Test whether this mark is in the given set of marks.
  */
  isInSet(set) {
    for (let i = 0; i < set.length; i++)
      if (this.eq(set[i]))
        return true;
    return false;
  }
  /**
  Test whether this mark has the same type and attributes as
  another mark.
  */
  eq(other) {
    return this == other || this.type == other.type && compareDeep(this.attrs, other.attrs);
  }
  /**
  Convert this mark to a JSON-serializeable representation.
  */
  toJSON() {
    let obj = { type: this.type.name };
    for (let _ in this.attrs) {
      obj.attrs = this.attrs;
      break;
    }
    return obj;
  }
  /**
  Deserialize a mark from JSON.
  */
  static fromJSON(schema, json) {
    if (!json)
      throw new RangeError("Invalid input for Mark.fromJSON");
    let type = schema.marks[json.type];
    if (!type)
      throw new RangeError(`There is no mark type ${json.type} in this schema`);
    return type.create(json.attrs);
  }
  /**
  Test whether two sets of marks are identical.
  */
  static sameSet(a, b) {
    if (a == b)
      return true;
    if (a.length != b.length)
      return false;
    for (let i = 0; i < a.length; i++)
      if (!a[i].eq(b[i]))
        return false;
    return true;
  }
  /**
  Create a properly sorted mark set from null, a single mark, or an
  unsorted array of marks.
  */
  static setFrom(marks2) {
    if (!marks2 || Array.isArray(marks2) && marks2.length == 0)
      return _Mark.none;
    if (marks2 instanceof _Mark)
      return [marks2];
    let copy2 = marks2.slice();
    copy2.sort((a, b) => a.type.rank - b.type.rank);
    return copy2;
  }
};
Mark.none = [];
var ReplaceError = class extends Error {
};
var Slice = class _Slice {
  /**
  Create a slice. When specifying a non-zero open depth, you must
  make sure that there are nodes of at least that depth at the
  appropriate side of the fragment—i.e. if the fragment is an
  empty paragraph node, `openStart` and `openEnd` can't be greater
  than 1.
  
  It is not necessary for the content of open nodes to conform to
  the schema's content constraints, though it should be a valid
  start/end/middle for such a node, depending on which sides are
  open.
  */
  constructor(content, openStart, openEnd) {
    this.content = content;
    this.openStart = openStart;
    this.openEnd = openEnd;
  }
  /**
  The size this slice would add when inserted into a document.
  */
  get size() {
    return this.content.size - this.openStart - this.openEnd;
  }
  /**
  @internal
  */
  insertAt(pos, fragment) {
    let content = insertInto(this.content, pos + this.openStart, fragment);
    return content && new _Slice(content, this.openStart, this.openEnd);
  }
  /**
  @internal
  */
  removeBetween(from2, to) {
    return new _Slice(removeRange(this.content, from2 + this.openStart, to + this.openStart), this.openStart, this.openEnd);
  }
  /**
  Tests whether this slice is equal to another slice.
  */
  eq(other) {
    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
  }
  /**
  @internal
  */
  toString() {
    return this.content + "(" + this.openStart + "," + this.openEnd + ")";
  }
  /**
  Convert a slice to a JSON-serializable representation.
  */
  toJSON() {
    if (!this.content.size)
      return null;
    let json = { content: this.content.toJSON() };
    if (this.openStart > 0)
      json.openStart = this.openStart;
    if (this.openEnd > 0)
      json.openEnd = this.openEnd;
    return json;
  }
  /**
  Deserialize a slice from its JSON representation.
  */
  static fromJSON(schema, json) {
    if (!json)
      return _Slice.empty;
    let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
    if (typeof openStart != "number" || typeof openEnd != "number")
      throw new RangeError("Invalid input for Slice.fromJSON");
    return new _Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
  }
  /**
  Create a slice from a fragment by taking the maximum possible
  open value on both side of the fragment.
  */
  static maxOpen(fragment, openIsolating = true) {
    let openStart = 0, openEnd = 0;
    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)
      openStart++;
    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)
      openEnd++;
    return new _Slice(fragment, openStart, openEnd);
  }
};
Slice.empty = new Slice(Fragment.empty, 0, 0);
function removeRange(content, from2, to) {
  let { index, offset } = content.findIndex(from2), child = content.maybeChild(index);
  let { index: indexTo, offset: offsetTo } = content.findIndex(to);
  if (offset == from2 || child.isText) {
    if (offsetTo != to && !content.child(indexTo).isText)
      throw new RangeError("Removing non-flat range");
    return content.cut(0, from2).append(content.cut(to));
  }
  if (index != indexTo)
    throw new RangeError("Removing non-flat range");
  return content.replaceChild(index, child.copy(removeRange(child.content, from2 - offset - 1, to - offset - 1)));
}
function insertInto(content, dist, insert, parent) {
  let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);
  if (offset == dist || child.isText) {
    if (parent && !parent.canReplace(index, index, insert))
      return null;
    return content.cut(0, dist).append(insert).append(content.cut(dist));
  }
  let inner = insertInto(child.content, dist - offset - 1, insert);
  return inner && content.replaceChild(index, child.copy(inner));
}
function replace($from, $to, slice2) {
  if (slice2.openStart > $from.depth)
    throw new ReplaceError("Inserted content deeper than insertion position");
  if ($from.depth - slice2.openStart != $to.depth - slice2.openEnd)
    throw new ReplaceError("Inconsistent open depths");
  return replaceOuter($from, $to, slice2, 0);
}
function replaceOuter($from, $to, slice2, depth) {
  let index = $from.index(depth), node = $from.node(depth);
  if (index == $to.index(depth) && depth < $from.depth - slice2.openStart) {
    let inner = replaceOuter($from, $to, slice2, depth + 1);
    return node.copy(node.content.replaceChild(index, inner));
  } else if (!slice2.content.size) {
    return close(node, replaceTwoWay($from, $to, depth));
  } else if (!slice2.openStart && !slice2.openEnd && $from.depth == depth && $to.depth == depth) {
    let parent = $from.parent, content = parent.content;
    return close(parent, content.cut(0, $from.parentOffset).append(slice2.content).append(content.cut($to.parentOffset)));
  } else {
    let { start, end } = prepareSliceForReplace(slice2, $from);
    return close(node, replaceThreeWay($from, start, end, $to, depth));
  }
}
function checkJoin(main, sub) {
  if (!sub.type.compatibleContent(main.type))
    throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
}
function joinable($before, $after, depth) {
  let node = $before.node(depth);
  checkJoin(node, $after.node(depth));
  return node;
}
function addNode(child, target) {
  let last = target.length - 1;
  if (last >= 0 && child.isText && child.sameMarkup(target[last]))
    target[last] = child.withText(target[last].text + child.text);
  else
    target.push(child);
}
function addRange($start, $end, depth, target) {
  let node = ($end || $start).node(depth);
  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;
  if ($start) {
    startIndex = $start.index(depth);
    if ($start.depth > depth) {
      startIndex++;
    } else if ($start.textOffset) {
      addNode($start.nodeAfter, target);
      startIndex++;
    }
  }
  for (let i = startIndex; i < endIndex; i++)
    addNode(node.child(i), target);
  if ($end && $end.depth == depth && $end.textOffset)
    addNode($end.nodeBefore, target);
}
function close(node, content) {
  node.type.checkContent(content);
  return node.copy(content);
}
function replaceThreeWay($from, $start, $end, $to, depth) {
  let openStart = $from.depth > depth && joinable($from, $start, depth + 1);
  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1);
  let content = [];
  addRange(null, $from, depth, content);
  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
    checkJoin(openStart, openEnd);
    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
  } else {
    if (openStart)
      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);
    addRange($start, $end, depth, content);
    if (openEnd)
      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
  }
  addRange($to, null, depth, content);
  return new Fragment(content);
}
function replaceTwoWay($from, $to, depth) {
  let content = [];
  addRange(null, $from, depth, content);
  if ($from.depth > depth) {
    let type = joinable($from, $to, depth + 1);
    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
  }
  addRange($to, null, depth, content);
  return new Fragment(content);
}
function prepareSliceForReplace(slice2, $along) {
  let extra = $along.depth - slice2.openStart, parent = $along.node(extra);
  let node = parent.copy(slice2.content);
  for (let i = extra - 1; i >= 0; i--)
    node = $along.node(i).copy(Fragment.from(node));
  return {
    start: node.resolveNoCache(slice2.openStart + extra),
    end: node.resolveNoCache(node.content.size - slice2.openEnd - extra)
  };
}
var ResolvedPos = class _ResolvedPos {
  /**
  @internal
  */
  constructor(pos, path, parentOffset) {
    this.pos = pos;
    this.path = path;
    this.parentOffset = parentOffset;
    this.depth = path.length / 3 - 1;
  }
  /**
  @internal
  */
  resolveDepth(val) {
    if (val == null)
      return this.depth;
    if (val < 0)
      return this.depth + val;
    return val;
  }
  /**
  The parent node that the position points into. Note that even if
  a position points into a text node, that node is not considered
  the parent—text nodes are ‘flat’ in this model, and have no content.
  */
  get parent() {
    return this.node(this.depth);
  }
  /**
  The root node in which the position was resolved.
  */
  get doc() {
    return this.node(0);
  }
  /**
  The ancestor node at the given level. `p.node(p.depth)` is the
  same as `p.parent`.
  */
  node(depth) {
    return this.path[this.resolveDepth(depth) * 3];
  }
  /**
  The index into the ancestor at the given level. If this points
  at the 3rd node in the 2nd paragraph on the top level, for
  example, `p.index(0)` is 1 and `p.index(1)` is 2.
  */
  index(depth) {
    return this.path[this.resolveDepth(depth) * 3 + 1];
  }
  /**
  The index pointing after this position into the ancestor at the
  given level.
  */
  indexAfter(depth) {
    depth = this.resolveDepth(depth);
    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
  }
  /**
  The (absolute) position at the start of the node at the given
  level.
  */
  start(depth) {
    depth = this.resolveDepth(depth);
    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
  }
  /**
  The (absolute) position at the end of the node at the given
  level.
  */
  end(depth) {
    depth = this.resolveDepth(depth);
    return this.start(depth) + this.node(depth).content.size;
  }
  /**
  The (absolute) position directly before the wrapping node at the
  given level, or, when `depth` is `this.depth + 1`, the original
  position.
  */
  before(depth) {
    depth = this.resolveDepth(depth);
    if (!depth)
      throw new RangeError("There is no position before the top-level node");
    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
  }
  /**
  The (absolute) position directly after the wrapping node at the
  given level, or the original position when `depth` is `this.depth + 1`.
  */
  after(depth) {
    depth = this.resolveDepth(depth);
    if (!depth)
      throw new RangeError("There is no position after the top-level node");
    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
  }
  /**
  When this position points into a text node, this returns the
  distance between the position and the start of the text node.
  Will be zero for positions that point between nodes.
  */
  get textOffset() {
    return this.pos - this.path[this.path.length - 1];
  }
  /**
  Get the node directly after the position, if any. If the position
  points into a text node, only the part of that node after the
  position is returned.
  */
  get nodeAfter() {
    let parent = this.parent, index = this.index(this.depth);
    if (index == parent.childCount)
      return null;
    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);
    return dOff ? parent.child(index).cut(dOff) : child;
  }
  /**
  Get the node directly before the position, if any. If the
  position points into a text node, only the part of that node
  before the position is returned.
  */
  get nodeBefore() {
    let index = this.index(this.depth);
    let dOff = this.pos - this.path[this.path.length - 1];
    if (dOff)
      return this.parent.child(index).cut(0, dOff);
    return index == 0 ? null : this.parent.child(index - 1);
  }
  /**
  Get the position at the given index in the parent node at the
  given depth (which defaults to `this.depth`).
  */
  posAtIndex(index, depth) {
    depth = this.resolveDepth(depth);
    let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
    for (let i = 0; i < index; i++)
      pos += node.child(i).nodeSize;
    return pos;
  }
  /**
  Get the marks at this position, factoring in the surrounding
  marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
  position is at the start of a non-empty node, the marks of the
  node after it (if any) are returned.
  */
  marks() {
    let parent = this.parent, index = this.index();
    if (parent.content.size == 0)
      return Mark.none;
    if (this.textOffset)
      return parent.child(index).marks;
    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);
    if (!main) {
      let tmp = main;
      main = other;
      other = tmp;
    }
    let marks2 = main.marks;
    for (var i = 0; i < marks2.length; i++)
      if (marks2[i].type.spec.inclusive === false && (!other || !marks2[i].isInSet(other.marks)))
        marks2 = marks2[i--].removeFromSet(marks2);
    return marks2;
  }
  /**
  Get the marks after the current position, if any, except those
  that are non-inclusive and not present at position `$end`. This
  is mostly useful for getting the set of marks to preserve after a
  deletion. Will return `null` if this position is at the end of
  its parent node or its parent node isn't a textblock (in which
  case no marks should be preserved).
  */
  marksAcross($end) {
    let after = this.parent.maybeChild(this.index());
    if (!after || !after.isInline)
      return null;
    let marks2 = after.marks, next = $end.parent.maybeChild($end.index());
    for (var i = 0; i < marks2.length; i++)
      if (marks2[i].type.spec.inclusive === false && (!next || !marks2[i].isInSet(next.marks)))
        marks2 = marks2[i--].removeFromSet(marks2);
    return marks2;
  }
  /**
  The depth up to which this position and the given (non-resolved)
  position share the same parent nodes.
  */
  sharedDepth(pos) {
    for (let depth = this.depth; depth > 0; depth--)
      if (this.start(depth) <= pos && this.end(depth) >= pos)
        return depth;
    return 0;
  }
  /**
  Returns a range based on the place where this position and the
  given position diverge around block content. If both point into
  the same textblock, for example, a range around that textblock
  will be returned. If they point into different blocks, the range
  around those blocks in their shared ancestor is returned. You can
  pass in an optional predicate that will be called with a parent
  node to see if a range into that parent is acceptable.
  */
  blockRange(other = this, pred) {
    if (other.pos < this.pos)
      return other.blockRange(this);
    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)
      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
        return new NodeRange(this, other, d);
    return null;
  }
  /**
  Query whether the given position shares the same parent node.
  */
  sameParent(other) {
    return this.pos - this.parentOffset == other.pos - other.parentOffset;
  }
  /**
  Return the greater of this and the given position.
  */
  max(other) {
    return other.pos > this.pos ? other : this;
  }
  /**
  Return the smaller of this and the given position.
  */
  min(other) {
    return other.pos < this.pos ? other : this;
  }
  /**
  @internal
  */
  toString() {
    let str = "";
    for (let i = 1; i <= this.depth; i++)
      str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
    return str + ":" + this.parentOffset;
  }
  /**
  @internal
  */
  static resolve(doc3, pos) {
    if (!(pos >= 0 && pos <= doc3.content.size))
      throw new RangeError("Position " + pos + " out of range");
    let path = [];
    let start = 0, parentOffset = pos;
    for (let node = doc3; ; ) {
      let { index, offset } = node.content.findIndex(parentOffset);
      let rem = parentOffset - offset;
      path.push(node, index, start + offset);
      if (!rem)
        break;
      node = node.child(index);
      if (node.isText)
        break;
      parentOffset = rem - 1;
      start += offset + 1;
    }
    return new _ResolvedPos(pos, path, parentOffset);
  }
  /**
  @internal
  */
  static resolveCached(doc3, pos) {
    for (let i = 0; i < resolveCache.length; i++) {
      let cached = resolveCache[i];
      if (cached.pos == pos && cached.doc == doc3)
        return cached;
    }
    let result = resolveCache[resolveCachePos] = _ResolvedPos.resolve(doc3, pos);
    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
    return result;
  }
};
var resolveCache = [];
var resolveCachePos = 0;
var resolveCacheSize = 12;
var NodeRange = class {
  /**
  Construct a node range. `$from` and `$to` should point into the
  same node until at least the given `depth`, since a node range
  denotes an adjacent set of nodes in a single parent node.
  */
  constructor($from, $to, depth) {
    this.$from = $from;
    this.$to = $to;
    this.depth = depth;
  }
  /**
  The position at the start of the range.
  */
  get start() {
    return this.$from.before(this.depth + 1);
  }
  /**
  The position at the end of the range.
  */
  get end() {
    return this.$to.after(this.depth + 1);
  }
  /**
  The parent node that the range points into.
  */
  get parent() {
    return this.$from.node(this.depth);
  }
  /**
  The start index of the range in the parent node.
  */
  get startIndex() {
    return this.$from.index(this.depth);
  }
  /**
  The end index of the range in the parent node.
  */
  get endIndex() {
    return this.$to.indexAfter(this.depth);
  }
};
var emptyAttrs = /* @__PURE__ */ Object.create(null);
var Node2 = class _Node {
  /**
  @internal
  */
  constructor(type, attrs, content, marks2 = Mark.none) {
    this.type = type;
    this.attrs = attrs;
    this.marks = marks2;
    this.content = content || Fragment.empty;
  }
  /**
  The size of this node, as defined by the integer-based [indexing
  scheme](/docs/guide/#doc.indexing). For text nodes, this is the
  amount of characters. For other leaf nodes, it is one. For
  non-leaf nodes, it is the size of the content plus two (the
  start and end token).
  */
  get nodeSize() {
    return this.isLeaf ? 1 : 2 + this.content.size;
  }
  /**
  The number of children that the node has.
  */
  get childCount() {
    return this.content.childCount;
  }
  /**
  Get the child node at the given index. Raises an error when the
  index is out of range.
  */
  child(index) {
    return this.content.child(index);
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(index) {
    return this.content.maybeChild(index);
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(f) {
    this.content.forEach(f);
  }
  /**
  Invoke a callback for all descendant nodes recursively between
  the given two positions that are relative to start of this
  node's content. The callback is invoked with the node, its
  parent-relative position, its parent node, and its child index.
  When the callback returns false for a given node, that node's
  children will not be recursed over. The last parameter can be
  used to specify a starting position to count from.
  */
  nodesBetween(from2, to, f, startPos = 0) {
    this.content.nodesBetween(from2, to, f, startPos, this);
  }
  /**
  Call the given callback for every descendant node. Doesn't
  descend into a node when the callback returns `false`.
  */
  descendants(f) {
    this.nodesBetween(0, this.content.size, f);
  }
  /**
  Concatenates all the text nodes found in this fragment and its
  children.
  */
  get textContent() {
    return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, "");
  }
  /**
  Get all text between positions `from` and `to`. When
  `blockSeparator` is given, it will be inserted to separate text
  from different block nodes. If `leafText` is given, it'll be
  inserted for every non-text leaf node encountered, otherwise
  [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
  */
  textBetween(from2, to, blockSeparator, leafText) {
    return this.content.textBetween(from2, to, blockSeparator, leafText);
  }
  /**
  Returns this node's first child, or `null` if there are no
  children.
  */
  get firstChild() {
    return this.content.firstChild;
  }
  /**
  Returns this node's last child, or `null` if there are no
  children.
  */
  get lastChild() {
    return this.content.lastChild;
  }
  /**
  Test whether two nodes represent the same piece of document.
  */
  eq(other) {
    return this == other || this.sameMarkup(other) && this.content.eq(other.content);
  }
  /**
  Compare the markup (type, attributes, and marks) of this node to
  those of another. Returns `true` if both have the same markup.
  */
  sameMarkup(other) {
    return this.hasMarkup(other.type, other.attrs, other.marks);
  }
  /**
  Check whether this node's markup correspond to the given type,
  attributes, and marks.
  */
  hasMarkup(type, attrs, marks2) {
    return this.type == type && compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) && Mark.sameSet(this.marks, marks2 || Mark.none);
  }
  /**
  Create a new node with the same markup as this node, containing
  the given content (or empty, if no content is given).
  */
  copy(content = null) {
    if (content == this.content)
      return this;
    return new _Node(this.type, this.attrs, content, this.marks);
  }
  /**
  Create a copy of this node, with the given set of marks instead
  of the node's own marks.
  */
  mark(marks2) {
    return marks2 == this.marks ? this : new _Node(this.type, this.attrs, this.content, marks2);
  }
  /**
  Create a copy of this node with only the content between the
  given positions. If `to` is not given, it defaults to the end of
  the node.
  */
  cut(from2, to = this.content.size) {
    if (from2 == 0 && to == this.content.size)
      return this;
    return this.copy(this.content.cut(from2, to));
  }
  /**
  Cut out the part of the document between the given positions, and
  return it as a `Slice` object.
  */
  slice(from2, to = this.content.size, includeParents = false) {
    if (from2 == to)
      return Slice.empty;
    let $from = this.resolve(from2), $to = this.resolve(to);
    let depth = includeParents ? 0 : $from.sharedDepth(to);
    let start = $from.start(depth), node = $from.node(depth);
    let content = node.content.cut($from.pos - start, $to.pos - start);
    return new Slice(content, $from.depth - depth, $to.depth - depth);
  }
  /**
  Replace the part of the document between the given positions with
  the given slice. The slice must 'fit', meaning its open sides
  must be able to connect to the surrounding content, and its
  content nodes must be valid children for the node they are placed
  into. If any of this is violated, an error of type
  [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
  */
  replace(from2, to, slice2) {
    return replace(this.resolve(from2), this.resolve(to), slice2);
  }
  /**
  Find the node directly after the given position.
  */
  nodeAt(pos) {
    for (let node = this; ; ) {
      let { index, offset } = node.content.findIndex(pos);
      node = node.maybeChild(index);
      if (!node)
        return null;
      if (offset == pos || node.isText)
        return node;
      pos -= offset + 1;
    }
  }
  /**
  Find the (direct) child node after the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childAfter(pos) {
    let { index, offset } = this.content.findIndex(pos);
    return { node: this.content.maybeChild(index), index, offset };
  }
  /**
  Find the (direct) child node before the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childBefore(pos) {
    if (pos == 0)
      return { node: null, index: 0, offset: 0 };
    let { index, offset } = this.content.findIndex(pos);
    if (offset < pos)
      return { node: this.content.child(index), index, offset };
    let node = this.content.child(index - 1);
    return { node, index: index - 1, offset: offset - node.nodeSize };
  }
  /**
  Resolve the given position in the document, returning an
  [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
  */
  resolve(pos) {
    return ResolvedPos.resolveCached(this, pos);
  }
  /**
  @internal
  */
  resolveNoCache(pos) {
    return ResolvedPos.resolve(this, pos);
  }
  /**
  Test whether a given mark or mark type occurs in this document
  between the two given positions.
  */
  rangeHasMark(from2, to, type) {
    let found2 = false;
    if (to > from2)
      this.nodesBetween(from2, to, (node) => {
        if (type.isInSet(node.marks))
          found2 = true;
        return !found2;
      });
    return found2;
  }
  /**
  True when this is a block (non-inline node)
  */
  get isBlock() {
    return this.type.isBlock;
  }
  /**
  True when this is a textblock node, a block node with inline
  content.
  */
  get isTextblock() {
    return this.type.isTextblock;
  }
  /**
  True when this node allows inline content.
  */
  get inlineContent() {
    return this.type.inlineContent;
  }
  /**
  True when this is an inline node (a text node or a node that can
  appear among text).
  */
  get isInline() {
    return this.type.isInline;
  }
  /**
  True when this is a text node.
  */
  get isText() {
    return this.type.isText;
  }
  /**
  True when this is a leaf node.
  */
  get isLeaf() {
    return this.type.isLeaf;
  }
  /**
  True when this is an atom, i.e. when it does not have directly
  editable content. This is usually the same as `isLeaf`, but can
  be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
  on a node's spec (typically used when the node is displayed as
  an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
  */
  get isAtom() {
    return this.type.isAtom;
  }
  /**
  Return a string representation of this node for debugging
  purposes.
  */
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    let name = this.type.name;
    if (this.content.size)
      name += "(" + this.content.toStringInner() + ")";
    return wrapMarks(this.marks, name);
  }
  /**
  Get the content match in this node at the given index.
  */
  contentMatchAt(index) {
    let match = this.type.contentMatch.matchFragment(this.content, 0, index);
    if (!match)
      throw new Error("Called contentMatchAt on a node with invalid content");
    return match;
  }
  /**
  Test whether replacing the range between `from` and `to` (by
  child index) with the given replacement fragment (which defaults
  to the empty fragment) would leave the node's content valid. You
  can optionally pass `start` and `end` indices into the
  replacement fragment.
  */
  canReplace(from2, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {
    let one = this.contentMatchAt(from2).matchFragment(replacement, start, end);
    let two = one && one.matchFragment(this.content, to);
    if (!two || !two.validEnd)
      return false;
    for (let i = start; i < end; i++)
      if (!this.type.allowsMarks(replacement.child(i).marks))
        return false;
    return true;
  }
  /**
  Test whether replacing the range `from` to `to` (by index) with
  a node of the given type would leave the node's content valid.
  */
  canReplaceWith(from2, to, type, marks2) {
    if (marks2 && !this.type.allowsMarks(marks2))
      return false;
    let start = this.contentMatchAt(from2).matchType(type);
    let end = start && start.matchFragment(this.content, to);
    return end ? end.validEnd : false;
  }
  /**
  Test whether the given node's content could be appended to this
  node. If that node is empty, this will only return true if there
  is at least one node type that can appear in both nodes (to avoid
  merging completely incompatible nodes).
  */
  canAppend(other) {
    if (other.content.size)
      return this.canReplace(this.childCount, this.childCount, other.content);
    else
      return this.type.compatibleContent(other.type);
  }
  /**
  Check whether this node and its descendants conform to the
  schema, and raise error when they do not.
  */
  check() {
    this.type.checkContent(this.content);
    let copy2 = Mark.none;
    for (let i = 0; i < this.marks.length; i++)
      copy2 = this.marks[i].addToSet(copy2);
    if (!Mark.sameSet(copy2, this.marks))
      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((m) => m.type.name)}`);
    this.content.forEach((node) => node.check());
  }
  /**
  Return a JSON-serializeable representation of this node.
  */
  toJSON() {
    let obj = { type: this.type.name };
    for (let _ in this.attrs) {
      obj.attrs = this.attrs;
      break;
    }
    if (this.content.size)
      obj.content = this.content.toJSON();
    if (this.marks.length)
      obj.marks = this.marks.map((n) => n.toJSON());
    return obj;
  }
  /**
  Deserialize a node from its JSON representation.
  */
  static fromJSON(schema, json) {
    if (!json)
      throw new RangeError("Invalid input for Node.fromJSON");
    let marks2 = null;
    if (json.marks) {
      if (!Array.isArray(json.marks))
        throw new RangeError("Invalid mark data for Node.fromJSON");
      marks2 = json.marks.map(schema.markFromJSON);
    }
    if (json.type == "text") {
      if (typeof json.text != "string")
        throw new RangeError("Invalid text node in JSON");
      return schema.text(json.text, marks2);
    }
    let content = Fragment.fromJSON(schema, json.content);
    return schema.nodeType(json.type).create(json.attrs, content, marks2);
  }
};
Node2.prototype.text = void 0;
var TextNode = class _TextNode extends Node2 {
  /**
  @internal
  */
  constructor(type, attrs, content, marks2) {
    super(type, attrs, null, marks2);
    if (!content)
      throw new RangeError("Empty text nodes are not allowed");
    this.text = content;
  }
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    return wrapMarks(this.marks, JSON.stringify(this.text));
  }
  get textContent() {
    return this.text;
  }
  textBetween(from2, to) {
    return this.text.slice(from2, to);
  }
  get nodeSize() {
    return this.text.length;
  }
  mark(marks2) {
    return marks2 == this.marks ? this : new _TextNode(this.type, this.attrs, this.text, marks2);
  }
  withText(text) {
    if (text == this.text)
      return this;
    return new _TextNode(this.type, this.attrs, text, this.marks);
  }
  cut(from2 = 0, to = this.text.length) {
    if (from2 == 0 && to == this.text.length)
      return this;
    return this.withText(this.text.slice(from2, to));
  }
  eq(other) {
    return this.sameMarkup(other) && this.text == other.text;
  }
  toJSON() {
    let base2 = super.toJSON();
    base2.text = this.text;
    return base2;
  }
};
function wrapMarks(marks2, str) {
  for (let i = marks2.length - 1; i >= 0; i--)
    str = marks2[i].type.name + "(" + str + ")";
  return str;
}
var ContentMatch = class _ContentMatch {
  /**
  @internal
  */
  constructor(validEnd) {
    this.validEnd = validEnd;
    this.next = [];
    this.wrapCache = [];
  }
  /**
  @internal
  */
  static parse(string, nodeTypes) {
    let stream = new TokenStream(string, nodeTypes);
    if (stream.next == null)
      return _ContentMatch.empty;
    let expr = parseExpr(stream);
    if (stream.next)
      stream.err("Unexpected trailing text");
    let match = dfa(nfa(expr));
    checkForDeadEnds(match, stream);
    return match;
  }
  /**
  Match a node type, returning a match after that node if
  successful.
  */
  matchType(type) {
    for (let i = 0; i < this.next.length; i++)
      if (this.next[i].type == type)
        return this.next[i].next;
    return null;
  }
  /**
  Try to match a fragment. Returns the resulting match when
  successful.
  */
  matchFragment(frag, start = 0, end = frag.childCount) {
    let cur = this;
    for (let i = start; cur && i < end; i++)
      cur = cur.matchType(frag.child(i).type);
    return cur;
  }
  /**
  @internal
  */
  get inlineContent() {
    return this.next.length != 0 && this.next[0].type.isInline;
  }
  /**
  Get the first matching node type at this match position that can
  be generated.
  */
  get defaultType() {
    for (let i = 0; i < this.next.length; i++) {
      let { type } = this.next[i];
      if (!(type.isText || type.hasRequiredAttrs()))
        return type;
    }
    return null;
  }
  /**
  @internal
  */
  compatible(other) {
    for (let i = 0; i < this.next.length; i++)
      for (let j = 0; j < other.next.length; j++)
        if (this.next[i].type == other.next[j].type)
          return true;
    return false;
  }
  /**
  Try to match the given fragment, and if that fails, see if it can
  be made to match by inserting nodes in front of it. When
  successful, return a fragment of inserted nodes (which may be
  empty if nothing had to be inserted). When `toEnd` is true, only
  return a fragment if the resulting match goes to the end of the
  content expression.
  */
  fillBefore(after, toEnd = false, startIndex = 0) {
    let seen = [this];
    function search(match, types) {
      let finished = match.matchFragment(after, startIndex);
      if (finished && (!toEnd || finished.validEnd))
        return Fragment.from(types.map((tp) => tp.createAndFill()));
      for (let i = 0; i < match.next.length; i++) {
        let { type, next } = match.next[i];
        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
          seen.push(next);
          let found2 = search(next, types.concat(type));
          if (found2)
            return found2;
        }
      }
      return null;
    }
    return search(this, []);
  }
  /**
  Find a set of wrapping node types that would allow a node of the
  given type to appear at this position. The result may be empty
  (when it fits directly) and will be null when no such wrapping
  exists.
  */
  findWrapping(target) {
    for (let i = 0; i < this.wrapCache.length; i += 2)
      if (this.wrapCache[i] == target)
        return this.wrapCache[i + 1];
    let computed = this.computeWrapping(target);
    this.wrapCache.push(target, computed);
    return computed;
  }
  /**
  @internal
  */
  computeWrapping(target) {
    let seen = /* @__PURE__ */ Object.create(null), active = [{ match: this, type: null, via: null }];
    while (active.length) {
      let current = active.shift(), match = current.match;
      if (match.matchType(target)) {
        let result = [];
        for (let obj = current; obj.type; obj = obj.via)
          result.push(obj.type);
        return result.reverse();
      }
      for (let i = 0; i < match.next.length; i++) {
        let { type, next } = match.next[i];
        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {
          active.push({ match: type.contentMatch, type, via: current });
          seen[type.name] = true;
        }
      }
    }
    return null;
  }
  /**
  The number of outgoing edges this node has in the finite
  automaton that describes the content expression.
  */
  get edgeCount() {
    return this.next.length;
  }
  /**
  Get the _n_​th outgoing edge from this node in the finite
  automaton that describes the content expression.
  */
  edge(n) {
    if (n >= this.next.length)
      throw new RangeError(`There's no ${n}th edge in this content match`);
    return this.next[n];
  }
  /**
  @internal
  */
  toString() {
    let seen = [];
    function scan(m) {
      seen.push(m);
      for (let i = 0; i < m.next.length; i++)
        if (seen.indexOf(m.next[i].next) == -1)
          scan(m.next[i].next);
    }
    scan(this);
    return seen.map((m, i) => {
      let out = i + (m.validEnd ? "*" : " ") + " ";
      for (let i2 = 0; i2 < m.next.length; i2++)
        out += (i2 ? ", " : "") + m.next[i2].type.name + "->" + seen.indexOf(m.next[i2].next);
      return out;
    }).join("\n");
  }
};
ContentMatch.empty = new ContentMatch(true);
var TokenStream = class {
  constructor(string, nodeTypes) {
    this.string = string;
    this.nodeTypes = nodeTypes;
    this.inline = null;
    this.pos = 0;
    this.tokens = string.split(/\s*(?=\b|\W|$)/);
    if (this.tokens[this.tokens.length - 1] == "")
      this.tokens.pop();
    if (this.tokens[0] == "")
      this.tokens.shift();
  }
  get next() {
    return this.tokens[this.pos];
  }
  eat(tok) {
    return this.next == tok && (this.pos++ || true);
  }
  err(str) {
    throw new SyntaxError(str + " (in content expression '" + this.string + "')");
  }
};
function parseExpr(stream) {
  let exprs = [];
  do {
    exprs.push(parseExprSeq(stream));
  } while (stream.eat("|"));
  return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
}
function parseExprSeq(stream) {
  let exprs = [];
  do {
    exprs.push(parseExprSubscript(stream));
  } while (stream.next && stream.next != ")" && stream.next != "|");
  return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
}
function parseExprSubscript(stream) {
  let expr = parseExprAtom(stream);
  for (; ; ) {
    if (stream.eat("+"))
      expr = { type: "plus", expr };
    else if (stream.eat("*"))
      expr = { type: "star", expr };
    else if (stream.eat("?"))
      expr = { type: "opt", expr };
    else if (stream.eat("{"))
      expr = parseExprRange(stream, expr);
    else
      break;
  }
  return expr;
}
function parseNum(stream) {
  if (/\D/.test(stream.next))
    stream.err("Expected number, got '" + stream.next + "'");
  let result = Number(stream.next);
  stream.pos++;
  return result;
}
function parseExprRange(stream, expr) {
  let min = parseNum(stream), max = min;
  if (stream.eat(",")) {
    if (stream.next != "}")
      max = parseNum(stream);
    else
      max = -1;
  }
  if (!stream.eat("}"))
    stream.err("Unclosed braced range");
  return { type: "range", min, max, expr };
}
function resolveName(stream, name) {
  let types = stream.nodeTypes, type = types[name];
  if (type)
    return [type];
  let result = [];
  for (let typeName in types) {
    let type2 = types[typeName];
    if (type2.groups.indexOf(name) > -1)
      result.push(type2);
  }
  if (result.length == 0)
    stream.err("No node type or group '" + name + "' found");
  return result;
}
function parseExprAtom(stream) {
  if (stream.eat("(")) {
    let expr = parseExpr(stream);
    if (!stream.eat(")"))
      stream.err("Missing closing paren");
    return expr;
  } else if (!/\W/.test(stream.next)) {
    let exprs = resolveName(stream, stream.next).map((type) => {
      if (stream.inline == null)
        stream.inline = type.isInline;
      else if (stream.inline != type.isInline)
        stream.err("Mixing inline and block content");
      return { type: "name", value: type };
    });
    stream.pos++;
    return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
  } else {
    stream.err("Unexpected token '" + stream.next + "'");
  }
}
function nfa(expr) {
  let nfa2 = [[]];
  connect(compile(expr, 0), node());
  return nfa2;
  function node() {
    return nfa2.push([]) - 1;
  }
  function edge(from2, to, term) {
    let edge2 = { term, to };
    nfa2[from2].push(edge2);
    return edge2;
  }
  function connect(edges, to) {
    edges.forEach((edge2) => edge2.to = to);
  }
  function compile(expr2, from2) {
    if (expr2.type == "choice") {
      return expr2.exprs.reduce((out, expr3) => out.concat(compile(expr3, from2)), []);
    } else if (expr2.type == "seq") {
      for (let i = 0; ; i++) {
        let next = compile(expr2.exprs[i], from2);
        if (i == expr2.exprs.length - 1)
          return next;
        connect(next, from2 = node());
      }
    } else if (expr2.type == "star") {
      let loop = node();
      edge(from2, loop);
      connect(compile(expr2.expr, loop), loop);
      return [edge(loop)];
    } else if (expr2.type == "plus") {
      let loop = node();
      connect(compile(expr2.expr, from2), loop);
      connect(compile(expr2.expr, loop), loop);
      return [edge(loop)];
    } else if (expr2.type == "opt") {
      return [edge(from2)].concat(compile(expr2.expr, from2));
    } else if (expr2.type == "range") {
      let cur = from2;
      for (let i = 0; i < expr2.min; i++) {
        let next = node();
        connect(compile(expr2.expr, cur), next);
        cur = next;
      }
      if (expr2.max == -1) {
        connect(compile(expr2.expr, cur), cur);
      } else {
        for (let i = expr2.min; i < expr2.max; i++) {
          let next = node();
          edge(cur, next);
          connect(compile(expr2.expr, cur), next);
          cur = next;
        }
      }
      return [edge(cur)];
    } else if (expr2.type == "name") {
      return [edge(from2, void 0, expr2.value)];
    } else {
      throw new Error("Unknown expr type");
    }
  }
}
function cmp(a, b) {
  return b - a;
}
function nullFrom(nfa2, node) {
  let result = [];
  scan(node);
  return result.sort(cmp);
  function scan(node2) {
    let edges = nfa2[node2];
    if (edges.length == 1 && !edges[0].term)
      return scan(edges[0].to);
    result.push(node2);
    for (let i = 0; i < edges.length; i++) {
      let { term, to } = edges[i];
      if (!term && result.indexOf(to) == -1)
        scan(to);
    }
  }
}
function dfa(nfa2) {
  let labeled = /* @__PURE__ */ Object.create(null);
  return explore(nullFrom(nfa2, 0));
  function explore(states) {
    let out = [];
    states.forEach((node) => {
      nfa2[node].forEach(({ term, to }) => {
        if (!term)
          return;
        let set;
        for (let i = 0; i < out.length; i++)
          if (out[i][0] == term)
            set = out[i][1];
        nullFrom(nfa2, to).forEach((node2) => {
          if (!set)
            out.push([term, set = []]);
          if (set.indexOf(node2) == -1)
            set.push(node2);
        });
      });
    });
    let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa2.length - 1) > -1);
    for (let i = 0; i < out.length; i++) {
      let states2 = out[i][1].sort(cmp);
      state.next.push({ type: out[i][0], next: labeled[states2.join(",")] || explore(states2) });
    }
    return state;
  }
}
function checkForDeadEnds(match, stream) {
  for (let i = 0, work = [match]; i < work.length; i++) {
    let state = work[i], dead = !state.validEnd, nodes3 = [];
    for (let j = 0; j < state.next.length; j++) {
      let { type, next } = state.next[j];
      nodes3.push(type.name);
      if (dead && !(type.isText || type.hasRequiredAttrs()))
        dead = false;
      if (work.indexOf(next) == -1)
        work.push(next);
    }
    if (dead)
      stream.err("Only non-generatable nodes (" + nodes3.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
  }
}
function defaultAttrs(attrs) {
  let defaults = /* @__PURE__ */ Object.create(null);
  for (let attrName in attrs) {
    let attr = attrs[attrName];
    if (!attr.hasDefault)
      return null;
    defaults[attrName] = attr.default;
  }
  return defaults;
}
function computeAttrs(attrs, value2) {
  let built = /* @__PURE__ */ Object.create(null);
  for (let name in attrs) {
    let given = value2 && value2[name];
    if (given === void 0) {
      let attr = attrs[name];
      if (attr.hasDefault)
        given = attr.default;
      else
        throw new RangeError("No value supplied for attribute " + name);
    }
    built[name] = given;
  }
  return built;
}
function initAttrs(attrs) {
  let result = /* @__PURE__ */ Object.create(null);
  if (attrs)
    for (let name in attrs)
      result[name] = new Attribute(attrs[name]);
  return result;
}
var NodeType = class _NodeType {
  /**
  @internal
  */
  constructor(name, schema, spec) {
    this.name = name;
    this.schema = schema;
    this.spec = spec;
    this.markSet = null;
    this.groups = spec.group ? spec.group.split(" ") : [];
    this.attrs = initAttrs(spec.attrs);
    this.defaultAttrs = defaultAttrs(this.attrs);
    this.contentMatch = null;
    this.inlineContent = null;
    this.isBlock = !(spec.inline || name == "text");
    this.isText = name == "text";
  }
  /**
  True if this is an inline type.
  */
  get isInline() {
    return !this.isBlock;
  }
  /**
  True if this is a textblock type, a block that contains inline
  content.
  */
  get isTextblock() {
    return this.isBlock && this.inlineContent;
  }
  /**
  True for node types that allow no content.
  */
  get isLeaf() {
    return this.contentMatch == ContentMatch.empty;
  }
  /**
  True when this node is an atom, i.e. when it does not have
  directly editable content.
  */
  get isAtom() {
    return this.isLeaf || !!this.spec.atom;
  }
  /**
  The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
  */
  get whitespace() {
    return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
  }
  /**
  Tells you whether this node type has any required attributes.
  */
  hasRequiredAttrs() {
    for (let n in this.attrs)
      if (this.attrs[n].isRequired)
        return true;
    return false;
  }
  /**
  Indicates whether this node allows some of the same content as
  the given node type.
  */
  compatibleContent(other) {
    return this == other || this.contentMatch.compatible(other.contentMatch);
  }
  /**
  @internal
  */
  computeAttrs(attrs) {
    if (!attrs && this.defaultAttrs)
      return this.defaultAttrs;
    else
      return computeAttrs(this.attrs, attrs);
  }
  /**
  Create a `Node` of this type. The given attributes are
  checked and defaulted (you can pass `null` to use the type's
  defaults entirely, if no required attributes exist). `content`
  may be a `Fragment`, a node, an array of nodes, or
  `null`. Similarly `marks` may be `null` to default to the empty
  set of marks.
  */
  create(attrs = null, content, marks2) {
    if (this.isText)
      throw new Error("NodeType.create can't construct text nodes");
    return new Node2(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks2));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
  against the node type's content restrictions, and throw an error
  if it doesn't match.
  */
  createChecked(attrs = null, content, marks2) {
    content = Fragment.from(content);
    this.checkContent(content);
    return new Node2(this, this.computeAttrs(attrs), content, Mark.setFrom(marks2));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
  necessary to add nodes to the start or end of the given fragment
  to make it fit the node. If no fitting wrapping can be found,
  return null. Note that, due to the fact that required nodes can
  always be created, this will always succeed if you pass null or
  `Fragment.empty` as content.
  */
  createAndFill(attrs = null, content, marks2) {
    attrs = this.computeAttrs(attrs);
    content = Fragment.from(content);
    if (content.size) {
      let before = this.contentMatch.fillBefore(content);
      if (!before)
        return null;
      content = before.append(content);
    }
    let matched = this.contentMatch.matchFragment(content);
    let after = matched && matched.fillBefore(Fragment.empty, true);
    if (!after)
      return null;
    return new Node2(this, attrs, content.append(after), Mark.setFrom(marks2));
  }
  /**
  Returns true if the given fragment is valid content for this node
  type with the given attributes.
  */
  validContent(content) {
    let result = this.contentMatch.matchFragment(content);
    if (!result || !result.validEnd)
      return false;
    for (let i = 0; i < content.childCount; i++)
      if (!this.allowsMarks(content.child(i).marks))
        return false;
    return true;
  }
  /**
  Throws a RangeError if the given fragment is not valid content for this
  node type.
  @internal
  */
  checkContent(content) {
    if (!this.validContent(content))
      throw new RangeError(`Invalid content for node ${this.name}: ${content.toString().slice(0, 50)}`);
  }
  /**
  Check whether the given mark type is allowed in this node.
  */
  allowsMarkType(markType) {
    return this.markSet == null || this.markSet.indexOf(markType) > -1;
  }
  /**
  Test whether the given set of marks are allowed in this node.
  */
  allowsMarks(marks2) {
    if (this.markSet == null)
      return true;
    for (let i = 0; i < marks2.length; i++)
      if (!this.allowsMarkType(marks2[i].type))
        return false;
    return true;
  }
  /**
  Removes the marks that are not allowed in this node from the given set.
  */
  allowedMarks(marks2) {
    if (this.markSet == null)
      return marks2;
    let copy2;
    for (let i = 0; i < marks2.length; i++) {
      if (!this.allowsMarkType(marks2[i].type)) {
        if (!copy2)
          copy2 = marks2.slice(0, i);
      } else if (copy2) {
        copy2.push(marks2[i]);
      }
    }
    return !copy2 ? marks2 : copy2.length ? copy2 : Mark.none;
  }
  /**
  @internal
  */
  static compile(nodes3, schema) {
    let result = /* @__PURE__ */ Object.create(null);
    nodes3.forEach((name, spec) => result[name] = new _NodeType(name, schema, spec));
    let topType = schema.spec.topNode || "doc";
    if (!result[topType])
      throw new RangeError("Schema is missing its top node type ('" + topType + "')");
    if (!result.text)
      throw new RangeError("Every schema needs a 'text' type");
    for (let _ in result.text.attrs)
      throw new RangeError("The text node type should not have attributes");
    return result;
  }
};
var Attribute = class {
  constructor(options) {
    this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
    this.default = options.default;
  }
  get isRequired() {
    return !this.hasDefault;
  }
};
var MarkType = class _MarkType {
  /**
  @internal
  */
  constructor(name, rank, schema, spec) {
    this.name = name;
    this.rank = rank;
    this.schema = schema;
    this.spec = spec;
    this.attrs = initAttrs(spec.attrs);
    this.excluded = null;
    let defaults = defaultAttrs(this.attrs);
    this.instance = defaults ? new Mark(this, defaults) : null;
  }
  /**
  Create a mark of this type. `attrs` may be `null` or an object
  containing only some of the mark's attributes. The others, if
  they have defaults, will be added.
  */
  create(attrs = null) {
    if (!attrs && this.instance)
      return this.instance;
    return new Mark(this, computeAttrs(this.attrs, attrs));
  }
  /**
  @internal
  */
  static compile(marks2, schema) {
    let result = /* @__PURE__ */ Object.create(null), rank = 0;
    marks2.forEach((name, spec) => result[name] = new _MarkType(name, rank++, schema, spec));
    return result;
  }
  /**
  When there is a mark of this type in the given set, a new set
  without it is returned. Otherwise, the input set is returned.
  */
  removeFromSet(set) {
    for (var i = 0; i < set.length; i++)
      if (set[i].type == this) {
        set = set.slice(0, i).concat(set.slice(i + 1));
        i--;
      }
    return set;
  }
  /**
  Tests whether there is a mark of this type in the given set.
  */
  isInSet(set) {
    for (let i = 0; i < set.length; i++)
      if (set[i].type == this)
        return set[i];
  }
  /**
  Queries whether a given mark type is
  [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
  */
  excludes(other) {
    return this.excluded.indexOf(other) > -1;
  }
};
var Schema = class {
  /**
  Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
  */
  constructor(spec) {
    this.cached = /* @__PURE__ */ Object.create(null);
    let instanceSpec = this.spec = {};
    for (let prop in spec)
      instanceSpec[prop] = spec[prop];
    instanceSpec.nodes = dist_default.from(spec.nodes), instanceSpec.marks = dist_default.from(spec.marks || {}), this.nodes = NodeType.compile(this.spec.nodes, this);
    this.marks = MarkType.compile(this.spec.marks, this);
    let contentExprCache = /* @__PURE__ */ Object.create(null);
    for (let prop in this.nodes) {
      if (prop in this.marks)
        throw new RangeError(prop + " can not be both a node and a mark");
      let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
      type.contentMatch = contentExprCache[contentExpr] || (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
      type.inlineContent = type.contentMatch.inlineContent;
      type.markSet = markExpr == "_" ? null : markExpr ? gatherMarks(this, markExpr.split(" ")) : markExpr == "" || !type.inlineContent ? [] : null;
    }
    for (let prop in this.marks) {
      let type = this.marks[prop], excl = type.spec.excludes;
      type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
    }
    this.nodeFromJSON = this.nodeFromJSON.bind(this);
    this.markFromJSON = this.markFromJSON.bind(this);
    this.topNodeType = this.nodes[this.spec.topNode || "doc"];
    this.cached.wrappings = /* @__PURE__ */ Object.create(null);
  }
  /**
  Create a node in this schema. The `type` may be a string or a
  `NodeType` instance. Attributes will be extended with defaults,
  `content` may be a `Fragment`, `null`, a `Node`, or an array of
  nodes.
  */
  node(type, attrs = null, content, marks2) {
    if (typeof type == "string")
      type = this.nodeType(type);
    else if (!(type instanceof NodeType))
      throw new RangeError("Invalid node type: " + type);
    else if (type.schema != this)
      throw new RangeError("Node type from different schema used (" + type.name + ")");
    return type.createChecked(attrs, content, marks2);
  }
  /**
  Create a text node in the schema. Empty text nodes are not
  allowed.
  */
  text(text, marks2) {
    let type = this.nodes.text;
    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks2));
  }
  /**
  Create a mark with the given type and attributes.
  */
  mark(type, attrs) {
    if (typeof type == "string")
      type = this.marks[type];
    return type.create(attrs);
  }
  /**
  Deserialize a node from its JSON representation. This method is
  bound.
  */
  nodeFromJSON(json) {
    return Node2.fromJSON(this, json);
  }
  /**
  Deserialize a mark from its JSON representation. This method is
  bound.
  */
  markFromJSON(json) {
    return Mark.fromJSON(this, json);
  }
  /**
  @internal
  */
  nodeType(name) {
    let found2 = this.nodes[name];
    if (!found2)
      throw new RangeError("Unknown node type: " + name);
    return found2;
  }
};
function gatherMarks(schema, marks2) {
  let found2 = [];
  for (let i = 0; i < marks2.length; i++) {
    let name = marks2[i], mark = schema.marks[name], ok = mark;
    if (mark) {
      found2.push(mark);
    } else {
      for (let prop in schema.marks) {
        let mark2 = schema.marks[prop];
        if (name == "_" || mark2.spec.group && mark2.spec.group.split(" ").indexOf(name) > -1)
          found2.push(ok = mark2);
      }
    }
    if (!ok)
      throw new SyntaxError("Unknown mark type: '" + marks2[i] + "'");
  }
  return found2;
}
var DOMParser2 = class _DOMParser {
  /**
  Create a parser that targets the given schema, using the given
  parsing rules.
  */
  constructor(schema, rules) {
    this.schema = schema;
    this.rules = rules;
    this.tags = [];
    this.styles = [];
    rules.forEach((rule) => {
      if (rule.tag)
        this.tags.push(rule);
      else if (rule.style)
        this.styles.push(rule);
    });
    this.normalizeLists = !this.tags.some((r) => {
      if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
        return false;
      let node = schema.nodes[r.node];
      return node.contentMatch.matchType(node);
    });
  }
  /**
  Parse a document from the content of a DOM node.
  */
  parse(dom, options = {}) {
    let context = new ParseContext(this, options, false);
    context.addAll(dom, options.from, options.to);
    return context.finish();
  }
  /**
  Parses the content of the given DOM node, like
  [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
  options. But unlike that method, which produces a whole node,
  this one returns a slice that is open at the sides, meaning that
  the schema constraints aren't applied to the start of nodes to
  the left of the input and the end of nodes at the end.
  */
  parseSlice(dom, options = {}) {
    let context = new ParseContext(this, options, true);
    context.addAll(dom, options.from, options.to);
    return Slice.maxOpen(context.finish());
  }
  /**
  @internal
  */
  matchTag(dom, context, after) {
    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {
      let rule = this.tags[i];
      if (matches(dom, rule.tag) && (rule.namespace === void 0 || dom.namespaceURI == rule.namespace) && (!rule.context || context.matchesContext(rule.context))) {
        if (rule.getAttrs) {
          let result = rule.getAttrs(dom);
          if (result === false)
            continue;
          rule.attrs = result || void 0;
        }
        return rule;
      }
    }
  }
  /**
  @internal
  */
  matchStyle(prop, value2, context, after) {
    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {
      let rule = this.styles[i], style2 = rule.style;
      if (style2.indexOf(prop) != 0 || rule.context && !context.matchesContext(rule.context) || // Test that the style string either precisely matches the prop,
      // or has an '=' sign after the prop, followed by the given
      // value.
      style2.length > prop.length && (style2.charCodeAt(prop.length) != 61 || style2.slice(prop.length + 1) != value2))
        continue;
      if (rule.getAttrs) {
        let result = rule.getAttrs(value2);
        if (result === false)
          continue;
        rule.attrs = result || void 0;
      }
      return rule;
    }
  }
  /**
  @internal
  */
  static schemaRules(schema) {
    let result = [];
    function insert(rule) {
      let priority = rule.priority == null ? 50 : rule.priority, i = 0;
      for (; i < result.length; i++) {
        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;
        if (nextPriority < priority)
          break;
      }
      result.splice(i, 0, rule);
    }
    for (let name in schema.marks) {
      let rules = schema.marks[name].spec.parseDOM;
      if (rules)
        rules.forEach((rule) => {
          insert(rule = copy(rule));
          if (!(rule.mark || rule.ignore || rule.clearMark))
            rule.mark = name;
        });
    }
    for (let name in schema.nodes) {
      let rules = schema.nodes[name].spec.parseDOM;
      if (rules)
        rules.forEach((rule) => {
          insert(rule = copy(rule));
          if (!(rule.node || rule.ignore || rule.mark))
            rule.node = name;
        });
    }
    return result;
  }
  /**
  Construct a DOM parser using the parsing rules listed in a
  schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
  [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
  */
  static fromSchema(schema) {
    return schema.cached.domParser || (schema.cached.domParser = new _DOMParser(schema, _DOMParser.schemaRules(schema)));
  }
};
var blockTags = {
  address: true,
  article: true,
  aside: true,
  blockquote: true,
  canvas: true,
  dd: true,
  div: true,
  dl: true,
  fieldset: true,
  figcaption: true,
  figure: true,
  footer: true,
  form: true,
  h1: true,
  h2: true,
  h3: true,
  h4: true,
  h5: true,
  h6: true,
  header: true,
  hgroup: true,
  hr: true,
  li: true,
  noscript: true,
  ol: true,
  output: true,
  p: true,
  pre: true,
  section: true,
  table: true,
  tfoot: true,
  ul: true
};
var ignoreTags = {
  head: true,
  noscript: true,
  object: true,
  script: true,
  style: true,
  title: true
};
var listTags = { ol: true, ul: true };
var OPT_PRESERVE_WS = 1;
var OPT_PRESERVE_WS_FULL = 2;
var OPT_OPEN_LEFT = 4;
function wsOptionsFor(type, preserveWhitespace, base2) {
  if (preserveWhitespace != null)
    return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
  return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base2 & ~OPT_OPEN_LEFT;
}
var NodeContext = class {
  constructor(type, attrs, marks2, pendingMarks, solid, match, options) {
    this.type = type;
    this.attrs = attrs;
    this.marks = marks2;
    this.pendingMarks = pendingMarks;
    this.solid = solid;
    this.options = options;
    this.content = [];
    this.activeMarks = Mark.none;
    this.stashMarks = [];
    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
  }
  findWrapping(node) {
    if (!this.match) {
      if (!this.type)
        return [];
      let fill = this.type.contentMatch.fillBefore(Fragment.from(node));
      if (fill) {
        this.match = this.type.contentMatch.matchFragment(fill);
      } else {
        let start = this.type.contentMatch, wrap2;
        if (wrap2 = start.findWrapping(node.type)) {
          this.match = start;
          return wrap2;
        } else {
          return null;
        }
      }
    }
    return this.match.findWrapping(node.type);
  }
  finish(openEnd) {
    if (!(this.options & OPT_PRESERVE_WS)) {
      let last = this.content[this.content.length - 1], m;
      if (last && last.isText && (m = /[ \t\r\n\u000c]+$/.exec(last.text))) {
        let text = last;
        if (last.text.length == m[0].length)
          this.content.pop();
        else
          this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));
      }
    }
    let content = Fragment.from(this.content);
    if (!openEnd && this.match)
      content = content.append(this.match.fillBefore(Fragment.empty, true));
    return this.type ? this.type.create(this.attrs, content, this.marks) : content;
  }
  popFromStashMark(mark) {
    for (let i = this.stashMarks.length - 1; i >= 0; i--)
      if (mark.eq(this.stashMarks[i]))
        return this.stashMarks.splice(i, 1)[0];
  }
  applyPending(nextType) {
    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {
      let mark = pending[i];
      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) && !mark.isInSet(this.activeMarks)) {
        this.activeMarks = mark.addToSet(this.activeMarks);
        this.pendingMarks = mark.removeFromSet(this.pendingMarks);
      }
    }
  }
  inlineContext(node) {
    if (this.type)
      return this.type.inlineContent;
    if (this.content.length)
      return this.content[0].isInline;
    return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());
  }
};
var ParseContext = class {
  constructor(parser, options, isOpen) {
    this.parser = parser;
    this.options = options;
    this.isOpen = isOpen;
    this.open = 0;
    let topNode = options.topNode, topContext;
    let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
    if (topNode)
      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
    else if (isOpen)
      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);
    else
      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);
    this.nodes = [topContext];
    this.find = options.findPositions;
    this.needsBlock = false;
  }
  get top() {
    return this.nodes[this.open];
  }
  // Add a DOM node to the content. Text is inserted as text node,
  // otherwise, the node is passed to `addElement` or, if it has a
  // `style` attribute, `addElementWithStyles`.
  addDOM(dom) {
    if (dom.nodeType == 3) {
      this.addTextNode(dom);
    } else if (dom.nodeType == 1) {
      let style2 = dom.getAttribute("style");
      if (!style2) {
        this.addElement(dom);
      } else {
        let marks2 = this.readStyles(parseStyles(style2));
        if (!marks2)
          return;
        let [addMarks, removeMarks2] = marks2, top = this.top;
        for (let i = 0; i < removeMarks2.length; i++)
          this.removePendingMark(removeMarks2[i], top);
        for (let i = 0; i < addMarks.length; i++)
          this.addPendingMark(addMarks[i]);
        this.addElement(dom);
        for (let i = 0; i < addMarks.length; i++)
          this.removePendingMark(addMarks[i], top);
        for (let i = 0; i < removeMarks2.length; i++)
          this.addPendingMark(removeMarks2[i]);
      }
    }
  }
  addTextNode(dom) {
    let value2 = dom.nodeValue;
    let top = this.top;
    if (top.options & OPT_PRESERVE_WS_FULL || top.inlineContext(dom) || /[^ \t\r\n\u000c]/.test(value2)) {
      if (!(top.options & OPT_PRESERVE_WS)) {
        value2 = value2.replace(/[ \t\r\n\u000c]+/g, " ");
        if (/^[ \t\r\n\u000c]/.test(value2) && this.open == this.nodes.length - 1) {
          let nodeBefore = top.content[top.content.length - 1];
          let domNodeBefore = dom.previousSibling;
          if (!nodeBefore || domNodeBefore && domNodeBefore.nodeName == "BR" || nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text))
            value2 = value2.slice(1);
        }
      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
        value2 = value2.replace(/\r?\n|\r/g, " ");
      } else {
        value2 = value2.replace(/\r\n?/g, "\n");
      }
      if (value2)
        this.insertNode(this.parser.schema.text(value2));
      this.findInText(dom);
    } else {
      this.findInside(dom);
    }
  }
  // Try to find a handler for the given tag and use that to parse. If
  // none is found, the element's content nodes are added directly.
  addElement(dom, matchAfter) {
    let name = dom.nodeName.toLowerCase(), ruleID;
    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
      normalizeList(dom);
    let rule = this.options.ruleFromNode && this.options.ruleFromNode(dom) || (ruleID = this.parser.matchTag(dom, this, matchAfter));
    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
      this.findInside(dom);
      this.ignoreFallback(dom);
    } else if (!rule || rule.skip || rule.closeParent) {
      if (rule && rule.closeParent)
        this.open = Math.max(0, this.open - 1);
      else if (rule && rule.skip.nodeType)
        dom = rule.skip;
      let sync, top = this.top, oldNeedsBlock = this.needsBlock;
      if (blockTags.hasOwnProperty(name)) {
        if (top.content.length && top.content[0].isInline && this.open) {
          this.open--;
          top = this.top;
        }
        sync = true;
        if (!top.type)
          this.needsBlock = true;
      } else if (!dom.firstChild) {
        this.leafFallback(dom);
        return;
      }
      this.addAll(dom);
      if (sync)
        this.sync(top);
      this.needsBlock = oldNeedsBlock;
    } else {
      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : void 0);
    }
  }
  // Called for leaf DOM nodes that would otherwise be ignored
  leafFallback(dom) {
    if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
      this.addTextNode(dom.ownerDocument.createTextNode("\n"));
  }
  // Called for ignored nodes
  ignoreFallback(dom) {
    if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
      this.findPlace(this.parser.schema.text("-"));
  }
  // Run any style parser associated with the node's styles. Either
  // return an array of marks, or null to indicate some of the styles
  // had a rule with `ignore` set.
  readStyles(styles) {
    let add2 = Mark.none, remove = Mark.none;
    style:
      for (let i = 0; i < styles.length; i += 2) {
        for (let after = void 0; ; ) {
          let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);
          if (!rule)
            continue style;
          if (rule.ignore)
            return null;
          if (rule.clearMark) {
            this.top.pendingMarks.forEach((m) => {
              if (rule.clearMark(m))
                remove = m.addToSet(remove);
            });
          } else {
            add2 = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(add2);
          }
          if (rule.consuming === false)
            after = rule;
          else
            break;
        }
      }
    return [add2, remove];
  }
  // Look up a handler for the given node. If none are found, return
  // false. Otherwise, apply it, use its return value to drive the way
  // the node's content is wrapped, and return true.
  addElementByRule(dom, rule, continueAfter) {
    let sync, nodeType, mark;
    if (rule.node) {
      nodeType = this.parser.schema.nodes[rule.node];
      if (!nodeType.isLeaf) {
        sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);
      } else if (!this.insertNode(nodeType.create(rule.attrs))) {
        this.leafFallback(dom);
      }
    } else {
      let markType = this.parser.schema.marks[rule.mark];
      mark = markType.create(rule.attrs);
      this.addPendingMark(mark);
    }
    let startIn = this.top;
    if (nodeType && nodeType.isLeaf) {
      this.findInside(dom);
    } else if (continueAfter) {
      this.addElement(dom, continueAfter);
    } else if (rule.getContent) {
      this.findInside(dom);
      rule.getContent(dom, this.parser.schema).forEach((node) => this.insertNode(node));
    } else {
      let contentDOM = dom;
      if (typeof rule.contentElement == "string")
        contentDOM = dom.querySelector(rule.contentElement);
      else if (typeof rule.contentElement == "function")
        contentDOM = rule.contentElement(dom);
      else if (rule.contentElement)
        contentDOM = rule.contentElement;
      this.findAround(dom, contentDOM, true);
      this.addAll(contentDOM);
    }
    if (sync && this.sync(startIn))
      this.open--;
    if (mark)
      this.removePendingMark(mark, startIn);
  }
  // Add all child nodes between `startIndex` and `endIndex` (or the
  // whole node, if not given). If `sync` is passed, use it to
  // synchronize after every block element.
  addAll(parent, startIndex, endIndex) {
    let index = startIndex || 0;
    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {
      this.findAtPoint(parent, index);
      this.addDOM(dom);
    }
    this.findAtPoint(parent, index);
  }
  // Try to find a way to fit the given node type into the current
  // context. May add intermediate wrappers and/or leave non-solid
  // nodes that we're in.
  findPlace(node) {
    let route, sync;
    for (let depth = this.open; depth >= 0; depth--) {
      let cx = this.nodes[depth];
      let found2 = cx.findWrapping(node);
      if (found2 && (!route || route.length > found2.length)) {
        route = found2;
        sync = cx;
        if (!found2.length)
          break;
      }
      if (cx.solid)
        break;
    }
    if (!route)
      return false;
    this.sync(sync);
    for (let i = 0; i < route.length; i++)
      this.enterInner(route[i], null, false);
    return true;
  }
  // Try to insert the given node, adjusting the context when needed.
  insertNode(node) {
    if (node.isInline && this.needsBlock && !this.top.type) {
      let block = this.textblockFromContext();
      if (block)
        this.enterInner(block);
    }
    if (this.findPlace(node)) {
      this.closeExtra();
      let top = this.top;
      top.applyPending(node.type);
      if (top.match)
        top.match = top.match.matchType(node.type);
      let marks2 = top.activeMarks;
      for (let i = 0; i < node.marks.length; i++)
        if (!top.type || top.type.allowsMarkType(node.marks[i].type))
          marks2 = node.marks[i].addToSet(marks2);
      top.content.push(node.mark(marks2));
      return true;
    }
    return false;
  }
  // Try to start a node of the given type, adjusting the context when
  // necessary.
  enter(type, attrs, preserveWS) {
    let ok = this.findPlace(type.create(attrs));
    if (ok)
      this.enterInner(type, attrs, true, preserveWS);
    return ok;
  }
  // Open a node of the given type
  enterInner(type, attrs = null, solid = false, preserveWS) {
    this.closeExtra();
    let top = this.top;
    top.applyPending(type);
    top.match = top.match && top.match.matchType(type);
    let options = wsOptionsFor(type, preserveWS, top.options);
    if (top.options & OPT_OPEN_LEFT && top.content.length == 0)
      options |= OPT_OPEN_LEFT;
    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));
    this.open++;
  }
  // Make sure all nodes above this.open are finished and added to
  // their parents
  closeExtra(openEnd = false) {
    let i = this.nodes.length - 1;
    if (i > this.open) {
      for (; i > this.open; i--)
        this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));
      this.nodes.length = this.open + 1;
    }
  }
  finish() {
    this.open = 0;
    this.closeExtra(this.isOpen);
    return this.nodes[0].finish(this.isOpen || this.options.topOpen);
  }
  sync(to) {
    for (let i = this.open; i >= 0; i--)
      if (this.nodes[i] == to) {
        this.open = i;
        return true;
      }
    return false;
  }
  get currentPos() {
    this.closeExtra();
    let pos = 0;
    for (let i = this.open; i >= 0; i--) {
      let content = this.nodes[i].content;
      for (let j = content.length - 1; j >= 0; j--)
        pos += content[j].nodeSize;
      if (i)
        pos++;
    }
    return pos;
  }
  findAtPoint(parent, offset) {
    if (this.find)
      for (let i = 0; i < this.find.length; i++) {
        if (this.find[i].node == parent && this.find[i].offset == offset)
          this.find[i].pos = this.currentPos;
      }
  }
  findInside(parent) {
    if (this.find)
      for (let i = 0; i < this.find.length; i++) {
        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))
          this.find[i].pos = this.currentPos;
      }
  }
  findAround(parent, content, before) {
    if (parent != content && this.find)
      for (let i = 0; i < this.find.length; i++) {
        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {
          let pos = content.compareDocumentPosition(this.find[i].node);
          if (pos & (before ? 2 : 4))
            this.find[i].pos = this.currentPos;
        }
      }
  }
  findInText(textNode) {
    if (this.find)
      for (let i = 0; i < this.find.length; i++) {
        if (this.find[i].node == textNode)
          this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);
      }
  }
  // Determines whether the given context string matches this context.
  matchesContext(context) {
    if (context.indexOf("|") > -1)
      return context.split(/\s*\|\s*/).some(this.matchesContext, this);
    let parts = context.split("/");
    let option = this.options.context;
    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
    let match = (i, depth) => {
      for (; i >= 0; i--) {
        let part = parts[i];
        if (part == "") {
          if (i == parts.length - 1 || i == 0)
            continue;
          for (; depth >= minDepth; depth--)
            if (match(i - 1, depth))
              return true;
          return false;
        } else {
          let next = depth > 0 || depth == 0 && useRoot ? this.nodes[depth].type : option && depth >= minDepth ? option.node(depth - minDepth).type : null;
          if (!next || next.name != part && next.groups.indexOf(part) == -1)
            return false;
          depth--;
        }
      }
      return true;
    };
    return match(parts.length - 1, this.open);
  }
  textblockFromContext() {
    let $context = this.options.context;
    if ($context)
      for (let d = $context.depth; d >= 0; d--) {
        let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
        if (deflt && deflt.isTextblock && deflt.defaultAttrs)
          return deflt;
      }
    for (let name in this.parser.schema.nodes) {
      let type = this.parser.schema.nodes[name];
      if (type.isTextblock && type.defaultAttrs)
        return type;
    }
  }
  addPendingMark(mark) {
    let found2 = findSameMarkInSet(mark, this.top.pendingMarks);
    if (found2)
      this.top.stashMarks.push(found2);
    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
  }
  removePendingMark(mark, upto) {
    for (let depth = this.open; depth >= 0; depth--) {
      let level = this.nodes[depth];
      let found2 = level.pendingMarks.lastIndexOf(mark);
      if (found2 > -1) {
        level.pendingMarks = mark.removeFromSet(level.pendingMarks);
      } else {
        level.activeMarks = mark.removeFromSet(level.activeMarks);
        let stashMark = level.popFromStashMark(mark);
        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
          level.activeMarks = stashMark.addToSet(level.activeMarks);
      }
      if (level == upto)
        break;
    }
  }
};
function normalizeList(dom) {
  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
    if (name && listTags.hasOwnProperty(name) && prevItem) {
      prevItem.appendChild(child);
      child = prevItem;
    } else if (name == "li") {
      prevItem = child;
    } else if (name) {
      prevItem = null;
    }
  }
}
function matches(dom, selector) {
  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
}
function parseStyles(style2) {
  let re = /\s*([\w-]+)\s*:\s*([^;]+)/g, m, result = [];
  while (m = re.exec(style2))
    result.push(m[1], m[2].trim());
  return result;
}
function copy(obj) {
  let copy2 = {};
  for (let prop in obj)
    copy2[prop] = obj[prop];
  return copy2;
}
function markMayApply(markType, nodeType) {
  let nodes3 = nodeType.schema.nodes;
  for (let name in nodes3) {
    let parent = nodes3[name];
    if (!parent.allowsMarkType(markType))
      continue;
    let seen = [], scan = (match) => {
      seen.push(match);
      for (let i = 0; i < match.edgeCount; i++) {
        let { type, next } = match.edge(i);
        if (type == nodeType)
          return true;
        if (seen.indexOf(next) < 0 && scan(next))
          return true;
      }
    };
    if (scan(parent.contentMatch))
      return true;
  }
}
function findSameMarkInSet(mark, set) {
  for (let i = 0; i < set.length; i++) {
    if (mark.eq(set[i]))
      return set[i];
  }
}
var DOMSerializer = class _DOMSerializer {
  /**
  Create a serializer. `nodes` should map node names to functions
  that take a node and return a description of the corresponding
  DOM. `marks` does the same for mark names, but also gets an
  argument that tells it whether the mark's content is block or
  inline content (for typical use, it'll always be inline). A mark
  serializer may be `null` to indicate that marks of that type
  should not be serialized.
  */
  constructor(nodes3, marks2) {
    this.nodes = nodes3;
    this.marks = marks2;
  }
  /**
  Serialize the content of this fragment to a DOM fragment. When
  not in the browser, the `document` option, containing a DOM
  document, should be passed so that the serializer can create
  nodes.
  */
  serializeFragment(fragment, options = {}, target) {
    if (!target)
      target = doc(options).createDocumentFragment();
    let top = target, active = [];
    fragment.forEach((node) => {
      if (active.length || node.marks.length) {
        let keep = 0, rendered = 0;
        while (keep < active.length && rendered < node.marks.length) {
          let next = node.marks[rendered];
          if (!this.marks[next.type.name]) {
            rendered++;
            continue;
          }
          if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)
            break;
          keep++;
          rendered++;
        }
        while (keep < active.length)
          top = active.pop()[1];
        while (rendered < node.marks.length) {
          let add2 = node.marks[rendered++];
          let markDOM = this.serializeMark(add2, node.isInline, options);
          if (markDOM) {
            active.push([add2, top]);
            top.appendChild(markDOM.dom);
            top = markDOM.contentDOM || markDOM.dom;
          }
        }
      }
      top.appendChild(this.serializeNodeInner(node, options));
    });
    return target;
  }
  /**
  @internal
  */
  serializeNodeInner(node, options) {
    let { dom, contentDOM } = _DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));
    if (contentDOM) {
      if (node.isLeaf)
        throw new RangeError("Content hole not allowed in a leaf node spec");
      this.serializeFragment(node.content, options, contentDOM);
    }
    return dom;
  }
  /**
  Serialize this node to a DOM node. This can be useful when you
  need to serialize a part of a document, as opposed to the whole
  document. To serialize a whole document, use
  [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
  its [content](https://prosemirror.net/docs/ref/#model.Node.content).
  */
  serializeNode(node, options = {}) {
    let dom = this.serializeNodeInner(node, options);
    for (let i = node.marks.length - 1; i >= 0; i--) {
      let wrap2 = this.serializeMark(node.marks[i], node.isInline, options);
      if (wrap2) {
        (wrap2.contentDOM || wrap2.dom).appendChild(dom);
        dom = wrap2.dom;
      }
    }
    return dom;
  }
  /**
  @internal
  */
  serializeMark(mark, inline, options = {}) {
    let toDOM = this.marks[mark.type.name];
    return toDOM && _DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));
  }
  /**
  Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
  the spec has a hole (zero) in it, `contentDOM` will point at the
  node with the hole.
  */
  static renderSpec(doc3, structure, xmlNS = null) {
    if (typeof structure == "string")
      return { dom: doc3.createTextNode(structure) };
    if (structure.nodeType != null)
      return { dom: structure };
    if (structure.dom && structure.dom.nodeType != null)
      return structure;
    let tagName = structure[0], space = tagName.indexOf(" ");
    if (space > 0) {
      xmlNS = tagName.slice(0, space);
      tagName = tagName.slice(space + 1);
    }
    let contentDOM;
    let dom = xmlNS ? doc3.createElementNS(xmlNS, tagName) : doc3.createElement(tagName);
    let attrs = structure[1], start = 1;
    if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
      start = 2;
      for (let name in attrs)
        if (attrs[name] != null) {
          let space2 = name.indexOf(" ");
          if (space2 > 0)
            dom.setAttributeNS(name.slice(0, space2), name.slice(space2 + 1), attrs[name]);
          else
            dom.setAttribute(name, attrs[name]);
        }
    }
    for (let i = start; i < structure.length; i++) {
      let child = structure[i];
      if (child === 0) {
        if (i < structure.length - 1 || i > start)
          throw new RangeError("Content hole must be the only child of its parent node");
        return { dom, contentDOM: dom };
      } else {
        let { dom: inner, contentDOM: innerContent } = _DOMSerializer.renderSpec(doc3, child, xmlNS);
        dom.appendChild(inner);
        if (innerContent) {
          if (contentDOM)
            throw new RangeError("Multiple content holes");
          contentDOM = innerContent;
        }
      }
    }
    return { dom, contentDOM };
  }
  /**
  Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
  properties in a schema's node and mark specs.
  */
  static fromSchema(schema) {
    return schema.cached.domSerializer || (schema.cached.domSerializer = new _DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
  }
  /**
  Gather the serializers in a schema's node specs into an object.
  This can be useful as a base to build a custom serializer from.
  */
  static nodesFromSchema(schema) {
    let result = gatherToDOM(schema.nodes);
    if (!result.text)
      result.text = (node) => node.text;
    return result;
  }
  /**
  Gather the serializers in a schema's mark specs into an object.
  */
  static marksFromSchema(schema) {
    return gatherToDOM(schema.marks);
  }
};
function gatherToDOM(obj) {
  let result = {};
  for (let name in obj) {
    let toDOM = obj[name].spec.toDOM;
    if (toDOM)
      result[name] = toDOM;
  }
  return result;
}
function doc(options) {
  return options.document || window.document;
}

// node_modules/prosemirror-transform/dist/index.js
var lower16 = 65535;
var factor16 = Math.pow(2, 16);
function makeRecover(index, offset) {
  return index + offset * factor16;
}
function recoverIndex(value2) {
  return value2 & lower16;
}
function recoverOffset(value2) {
  return (value2 - (value2 & lower16)) / factor16;
}
var DEL_BEFORE = 1;
var DEL_AFTER = 2;
var DEL_ACROSS = 4;
var DEL_SIDE = 8;
var MapResult = class {
  /**
  @internal
  */
  constructor(pos, delInfo, recover) {
    this.pos = pos;
    this.delInfo = delInfo;
    this.recover = recover;
  }
  /**
  Tells you whether the position was deleted, that is, whether the
  step removed the token on the side queried (via the `assoc`)
  argument from the document.
  */
  get deleted() {
    return (this.delInfo & DEL_SIDE) > 0;
  }
  /**
  Tells you whether the token before the mapped position was deleted.
  */
  get deletedBefore() {
    return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0;
  }
  /**
  True when the token after the mapped position was deleted.
  */
  get deletedAfter() {
    return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0;
  }
  /**
  Tells whether any of the steps mapped through deletes across the
  position (including both the token before and after the
  position).
  */
  get deletedAcross() {
    return (this.delInfo & DEL_ACROSS) > 0;
  }
};
var StepMap = class _StepMap {
  /**
  Create a position map. The modifications to the document are
  represented as an array of numbers, in which each group of three
  represents a modified chunk as `[start, oldSize, newSize]`.
  */
  constructor(ranges, inverted = false) {
    this.ranges = ranges;
    this.inverted = inverted;
    if (!ranges.length && _StepMap.empty)
      return _StepMap.empty;
  }
  /**
  @internal
  */
  recover(value2) {
    let diff = 0, index = recoverIndex(value2);
    if (!this.inverted)
      for (let i = 0; i < index; i++)
        diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
    return this.ranges[index * 3] + diff + recoverOffset(value2);
  }
  mapResult(pos, assoc = 1) {
    return this._map(pos, assoc, false);
  }
  map(pos, assoc = 1) {
    return this._map(pos, assoc, true);
  }
  /**
  @internal
  */
  _map(pos, assoc, simple) {
    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
    for (let i = 0; i < this.ranges.length; i += 3) {
      let start = this.ranges[i] - (this.inverted ? diff : 0);
      if (start > pos)
        break;
      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
      if (pos <= end) {
        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
        let result = start + diff + (side < 0 ? 0 : newSize);
        if (simple)
          return result;
        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
        let del2 = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
        if (assoc < 0 ? pos != start : pos != end)
          del2 |= DEL_SIDE;
        return new MapResult(result, del2, recover);
      }
      diff += newSize - oldSize;
    }
    return simple ? pos + diff : new MapResult(pos + diff, 0, null);
  }
  /**
  @internal
  */
  touches(pos, recover) {
    let diff = 0, index = recoverIndex(recover);
    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
    for (let i = 0; i < this.ranges.length; i += 3) {
      let start = this.ranges[i] - (this.inverted ? diff : 0);
      if (start > pos)
        break;
      let oldSize = this.ranges[i + oldIndex], end = start + oldSize;
      if (pos <= end && i == index * 3)
        return true;
      diff += this.ranges[i + newIndex] - oldSize;
    }
    return false;
  }
  /**
  Calls the given function on each of the changed ranges included in
  this map.
  */
  forEach(f) {
    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
      f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
      diff += newSize - oldSize;
    }
  }
  /**
  Create an inverted version of this map. The result can be used to
  map positions in the post-step document to the pre-step document.
  */
  invert() {
    return new _StepMap(this.ranges, !this.inverted);
  }
  /**
  @internal
  */
  toString() {
    return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
  }
  /**
  Create a map that moves all positions by offset `n` (which may be
  negative). This can be useful when applying steps meant for a
  sub-document to a larger document, or vice-versa.
  */
  static offset(n) {
    return n == 0 ? _StepMap.empty : new _StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
  }
};
StepMap.empty = new StepMap([]);
var Mapping = class _Mapping {
  /**
  Create a new mapping with the given position maps.
  */
  constructor(maps = [], mirror, from2 = 0, to = maps.length) {
    this.maps = maps;
    this.mirror = mirror;
    this.from = from2;
    this.to = to;
  }
  /**
  Create a mapping that maps only through a part of this one.
  */
  slice(from2 = 0, to = this.maps.length) {
    return new _Mapping(this.maps, this.mirror, from2, to);
  }
  /**
  @internal
  */
  copy() {
    return new _Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
  }
  /**
  Add a step map to the end of this mapping. If `mirrors` is
  given, it should be the index of the step map that is the mirror
  image of this one.
  */
  appendMap(map2, mirrors) {
    this.to = this.maps.push(map2);
    if (mirrors != null)
      this.setMirror(this.maps.length - 1, mirrors);
  }
  /**
  Add all the step maps in a given mapping to this one (preserving
  mirroring information).
  */
  appendMapping(mapping) {
    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
      let mirr = mapping.getMirror(i);
      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : void 0);
    }
  }
  /**
  Finds the offset of the step map that mirrors the map at the
  given offset, in this mapping (as per the second argument to
  `appendMap`).
  */
  getMirror(n) {
    if (this.mirror) {
      for (let i = 0; i < this.mirror.length; i++)
        if (this.mirror[i] == n)
          return this.mirror[i + (i % 2 ? -1 : 1)];
    }
  }
  /**
  @internal
  */
  setMirror(n, m) {
    if (!this.mirror)
      this.mirror = [];
    this.mirror.push(n, m);
  }
  /**
  Append the inverse of the given mapping to this one.
  */
  appendMappingInverted(mapping) {
    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
      let mirr = mapping.getMirror(i);
      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : void 0);
    }
  }
  /**
  Create an inverted version of this mapping.
  */
  invert() {
    let inverse = new _Mapping();
    inverse.appendMappingInverted(this);
    return inverse;
  }
  /**
  Map a position through this mapping.
  */
  map(pos, assoc = 1) {
    if (this.mirror)
      return this._map(pos, assoc, true);
    for (let i = this.from; i < this.to; i++)
      pos = this.maps[i].map(pos, assoc);
    return pos;
  }
  /**
  Map a position through this mapping, returning a mapping
  result.
  */
  mapResult(pos, assoc = 1) {
    return this._map(pos, assoc, false);
  }
  /**
  @internal
  */
  _map(pos, assoc, simple) {
    let delInfo = 0;
    for (let i = this.from; i < this.to; i++) {
      let map2 = this.maps[i], result = map2.mapResult(pos, assoc);
      if (result.recover != null) {
        let corr = this.getMirror(i);
        if (corr != null && corr > i && corr < this.to) {
          i = corr;
          pos = this.maps[corr].recover(result.recover);
          continue;
        }
      }
      delInfo |= result.delInfo;
      pos = result.pos;
    }
    return simple ? pos : new MapResult(pos, delInfo, null);
  }
};
var stepsByID = /* @__PURE__ */ Object.create(null);
var Step = class {
  /**
  Get the step map that represents the changes made by this step,
  and which can be used to transform between positions in the old
  and the new document.
  */
  getMap() {
    return StepMap.empty;
  }
  /**
  Try to merge this step with another one, to be applied directly
  after it. Returns the merged step when possible, null if the
  steps can't be merged.
  */
  merge(other) {
    return null;
  }
  /**
  Deserialize a step from its JSON representation. Will call
  through to the step class' own implementation of this method.
  */
  static fromJSON(schema, json) {
    if (!json || !json.stepType)
      throw new RangeError("Invalid input for Step.fromJSON");
    let type = stepsByID[json.stepType];
    if (!type)
      throw new RangeError(`No step type ${json.stepType} defined`);
    return type.fromJSON(schema, json);
  }
  /**
  To be able to serialize steps to JSON, each step needs a string
  ID to attach to its JSON representation. Use this method to
  register an ID for your step classes. Try to pick something
  that's unlikely to clash with steps from other modules.
  */
  static jsonID(id, stepClass) {
    if (id in stepsByID)
      throw new RangeError("Duplicate use of step JSON ID " + id);
    stepsByID[id] = stepClass;
    stepClass.prototype.jsonID = id;
    return stepClass;
  }
};
var StepResult = class _StepResult {
  /**
  @internal
  */
  constructor(doc3, failed) {
    this.doc = doc3;
    this.failed = failed;
  }
  /**
  Create a successful step result.
  */
  static ok(doc3) {
    return new _StepResult(doc3, null);
  }
  /**
  Create a failed step result.
  */
  static fail(message) {
    return new _StepResult(null, message);
  }
  /**
  Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
  arguments. Create a successful result if it succeeds, and a
  failed one if it throws a `ReplaceError`.
  */
  static fromReplace(doc3, from2, to, slice2) {
    try {
      return _StepResult.ok(doc3.replace(from2, to, slice2));
    } catch (e) {
      if (e instanceof ReplaceError)
        return _StepResult.fail(e.message);
      throw e;
    }
  }
};
function mapFragment(fragment, f, parent) {
  let mapped = [];
  for (let i = 0; i < fragment.childCount; i++) {
    let child = fragment.child(i);
    if (child.content.size)
      child = child.copy(mapFragment(child.content, f, child));
    if (child.isInline)
      child = f(child, parent, i);
    mapped.push(child);
  }
  return Fragment.fromArray(mapped);
}
var AddMarkStep = class _AddMarkStep extends Step {
  /**
  Create a mark step.
  */
  constructor(from2, to, mark) {
    super();
    this.from = from2;
    this.to = to;
    this.mark = mark;
  }
  apply(doc3) {
    let oldSlice = doc3.slice(this.from, this.to), $from = doc3.resolve(this.from);
    let parent = $from.node($from.sharedDepth(this.to));
    let slice2 = new Slice(mapFragment(oldSlice.content, (node, parent2) => {
      if (!node.isAtom || !parent2.type.allowsMarkType(this.mark.type))
        return node;
      return node.mark(this.mark.addToSet(node.marks));
    }, parent), oldSlice.openStart, oldSlice.openEnd);
    return StepResult.fromReplace(doc3, this.from, this.to, slice2);
  }
  invert() {
    return new RemoveMarkStep(this.from, this.to, this.mark);
  }
  map(mapping) {
    let from2 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
    if (from2.deleted && to.deleted || from2.pos >= to.pos)
      return null;
    return new _AddMarkStep(from2.pos, to.pos, this.mark);
  }
  merge(other) {
    if (other instanceof _AddMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from)
      return new _AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
    return null;
  }
  toJSON() {
    return {
      stepType: "addMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number")
      throw new RangeError("Invalid input for AddMarkStep.fromJSON");
    return new _AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
  }
};
Step.jsonID("addMark", AddMarkStep);
var RemoveMarkStep = class _RemoveMarkStep extends Step {
  /**
  Create a mark-removing step.
  */
  constructor(from2, to, mark) {
    super();
    this.from = from2;
    this.to = to;
    this.mark = mark;
  }
  apply(doc3) {
    let oldSlice = doc3.slice(this.from, this.to);
    let slice2 = new Slice(mapFragment(oldSlice.content, (node) => {
      return node.mark(this.mark.removeFromSet(node.marks));
    }, doc3), oldSlice.openStart, oldSlice.openEnd);
    return StepResult.fromReplace(doc3, this.from, this.to, slice2);
  }
  invert() {
    return new AddMarkStep(this.from, this.to, this.mark);
  }
  map(mapping) {
    let from2 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
    if (from2.deleted && to.deleted || from2.pos >= to.pos)
      return null;
    return new _RemoveMarkStep(from2.pos, to.pos, this.mark);
  }
  merge(other) {
    if (other instanceof _RemoveMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from)
      return new _RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
    return null;
  }
  toJSON() {
    return {
      stepType: "removeMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number")
      throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
    return new _RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
  }
};
Step.jsonID("removeMark", RemoveMarkStep);
var AddNodeMarkStep = class _AddNodeMarkStep extends Step {
  /**
  Create a node mark step.
  */
  constructor(pos, mark) {
    super();
    this.pos = pos;
    this.mark = mark;
  }
  apply(doc3) {
    let node = doc3.nodeAt(this.pos);
    if (!node)
      return StepResult.fail("No node at mark step's position");
    let updated4 = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));
    return StepResult.fromReplace(doc3, this.pos, this.pos + 1, new Slice(Fragment.from(updated4), 0, node.isLeaf ? 0 : 1));
  }
  invert(doc3) {
    let node = doc3.nodeAt(this.pos);
    if (node) {
      let newSet = this.mark.addToSet(node.marks);
      if (newSet.length == node.marks.length) {
        for (let i = 0; i < node.marks.length; i++)
          if (!node.marks[i].isInSet(newSet))
            return new _AddNodeMarkStep(this.pos, node.marks[i]);
        return new _AddNodeMarkStep(this.pos, this.mark);
      }
    }
    return new RemoveNodeMarkStep(this.pos, this.mark);
  }
  map(mapping) {
    let pos = mapping.mapResult(this.pos, 1);
    return pos.deletedAfter ? null : new _AddNodeMarkStep(pos.pos, this.mark);
  }
  toJSON() {
    return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.pos != "number")
      throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
    return new _AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
  }
};
Step.jsonID("addNodeMark", AddNodeMarkStep);
var RemoveNodeMarkStep = class _RemoveNodeMarkStep extends Step {
  /**
  Create a mark-removing step.
  */
  constructor(pos, mark) {
    super();
    this.pos = pos;
    this.mark = mark;
  }
  apply(doc3) {
    let node = doc3.nodeAt(this.pos);
    if (!node)
      return StepResult.fail("No node at mark step's position");
    let updated4 = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));
    return StepResult.fromReplace(doc3, this.pos, this.pos + 1, new Slice(Fragment.from(updated4), 0, node.isLeaf ? 0 : 1));
  }
  invert(doc3) {
    let node = doc3.nodeAt(this.pos);
    if (!node || !this.mark.isInSet(node.marks))
      return this;
    return new AddNodeMarkStep(this.pos, this.mark);
  }
  map(mapping) {
    let pos = mapping.mapResult(this.pos, 1);
    return pos.deletedAfter ? null : new _RemoveNodeMarkStep(pos.pos, this.mark);
  }
  toJSON() {
    return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.pos != "number")
      throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
    return new _RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
  }
};
Step.jsonID("removeNodeMark", RemoveNodeMarkStep);
var ReplaceStep = class _ReplaceStep extends Step {
  /**
  The given `slice` should fit the 'gap' between `from` and
  `to`—the depths must line up, and the surrounding nodes must be
  able to be joined with the open sides of the slice. When
  `structure` is true, the step will fail if the content between
  from and to is not just a sequence of closing and then opening
  tokens (this is to guard against rebased replace steps
  overwriting something they weren't supposed to).
  */
  constructor(from2, to, slice2, structure = false) {
    super();
    this.from = from2;
    this.to = to;
    this.slice = slice2;
    this.structure = structure;
  }
  apply(doc3) {
    if (this.structure && contentBetween(doc3, this.from, this.to))
      return StepResult.fail("Structure replace would overwrite content");
    return StepResult.fromReplace(doc3, this.from, this.to, this.slice);
  }
  getMap() {
    return new StepMap([this.from, this.to - this.from, this.slice.size]);
  }
  invert(doc3) {
    return new _ReplaceStep(this.from, this.from + this.slice.size, doc3.slice(this.from, this.to));
  }
  map(mapping) {
    let from2 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
    if (from2.deletedAcross && to.deletedAcross)
      return null;
    return new _ReplaceStep(from2.pos, Math.max(from2.pos, to.pos), this.slice);
  }
  merge(other) {
    if (!(other instanceof _ReplaceStep) || other.structure || this.structure)
      return null;
    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
      let slice2 = this.slice.size + other.slice.size == 0 ? Slice.empty : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
      return new _ReplaceStep(this.from, this.to + (other.to - other.from), slice2, this.structure);
    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
      let slice2 = this.slice.size + other.slice.size == 0 ? Slice.empty : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
      return new _ReplaceStep(other.from, this.to, slice2, this.structure);
    } else {
      return null;
    }
  }
  toJSON() {
    let json = { stepType: "replace", from: this.from, to: this.to };
    if (this.slice.size)
      json.slice = this.slice.toJSON();
    if (this.structure)
      json.structure = true;
    return json;
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number")
      throw new RangeError("Invalid input for ReplaceStep.fromJSON");
    return new _ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);
  }
};
Step.jsonID("replace", ReplaceStep);
var ReplaceAroundStep = class _ReplaceAroundStep extends Step {
  /**
  Create a replace-around step with the given range and gap.
  `insert` should be the point in the slice into which the content
  of the gap should be moved. `structure` has the same meaning as
  it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
  */
  constructor(from2, to, gapFrom, gapTo, slice2, insert, structure = false) {
    super();
    this.from = from2;
    this.to = to;
    this.gapFrom = gapFrom;
    this.gapTo = gapTo;
    this.slice = slice2;
    this.insert = insert;
    this.structure = structure;
  }
  apply(doc3) {
    if (this.structure && (contentBetween(doc3, this.from, this.gapFrom) || contentBetween(doc3, this.gapTo, this.to)))
      return StepResult.fail("Structure gap-replace would overwrite content");
    let gap = doc3.slice(this.gapFrom, this.gapTo);
    if (gap.openStart || gap.openEnd)
      return StepResult.fail("Gap is not a flat range");
    let inserted = this.slice.insertAt(this.insert, gap.content);
    if (!inserted)
      return StepResult.fail("Content does not fit in gap");
    return StepResult.fromReplace(doc3, this.from, this.to, inserted);
  }
  getMap() {
    return new StepMap([
      this.from,
      this.gapFrom - this.from,
      this.insert,
      this.gapTo,
      this.to - this.gapTo,
      this.slice.size - this.insert
    ]);
  }
  invert(doc3) {
    let gap = this.gapTo - this.gapFrom;
    return new _ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc3.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
  }
  map(mapping) {
    let from2 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
    if (from2.deletedAcross && to.deletedAcross || gapFrom < from2.pos || gapTo > to.pos)
      return null;
    return new _ReplaceAroundStep(from2.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
  }
  toJSON() {
    let json = {
      stepType: "replaceAround",
      from: this.from,
      to: this.to,
      gapFrom: this.gapFrom,
      gapTo: this.gapTo,
      insert: this.insert
    };
    if (this.slice.size)
      json.slice = this.slice.toJSON();
    if (this.structure)
      json.structure = true;
    return json;
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number" || typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
      throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
    return new _ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
  }
};
Step.jsonID("replaceAround", ReplaceAroundStep);
function contentBetween(doc3, from2, to) {
  let $from = doc3.resolve(from2), dist = to - from2, depth = $from.depth;
  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
    depth--;
    dist--;
  }
  if (dist > 0) {
    let next = $from.node(depth).maybeChild($from.indexAfter(depth));
    while (dist > 0) {
      if (!next || next.isLeaf)
        return true;
      next = next.firstChild;
      dist--;
    }
  }
  return false;
}
function addMark(tr, from2, to, mark) {
  let removed = [], added = [];
  let removing, adding;
  tr.doc.nodesBetween(from2, to, (node, pos, parent) => {
    if (!node.isInline)
      return;
    let marks2 = node.marks;
    if (!mark.isInSet(marks2) && parent.type.allowsMarkType(mark.type)) {
      let start = Math.max(pos, from2), end = Math.min(pos + node.nodeSize, to);
      let newSet = mark.addToSet(marks2);
      for (let i = 0; i < marks2.length; i++) {
        if (!marks2[i].isInSet(newSet)) {
          if (removing && removing.to == start && removing.mark.eq(marks2[i]))
            removing.to = end;
          else
            removed.push(removing = new RemoveMarkStep(start, end, marks2[i]));
        }
      }
      if (adding && adding.to == start)
        adding.to = end;
      else
        added.push(adding = new AddMarkStep(start, end, mark));
    }
  });
  removed.forEach((s) => tr.step(s));
  added.forEach((s) => tr.step(s));
}
function removeMark(tr, from2, to, mark) {
  let matched = [], step = 0;
  tr.doc.nodesBetween(from2, to, (node, pos) => {
    if (!node.isInline)
      return;
    step++;
    let toRemove = null;
    if (mark instanceof MarkType) {
      let set = node.marks, found2;
      while (found2 = mark.isInSet(set)) {
        (toRemove || (toRemove = [])).push(found2);
        set = found2.removeFromSet(set);
      }
    } else if (mark) {
      if (mark.isInSet(node.marks))
        toRemove = [mark];
    } else {
      toRemove = node.marks;
    }
    if (toRemove && toRemove.length) {
      let end = Math.min(pos + node.nodeSize, to);
      for (let i = 0; i < toRemove.length; i++) {
        let style2 = toRemove[i], found2;
        for (let j = 0; j < matched.length; j++) {
          let m = matched[j];
          if (m.step == step - 1 && style2.eq(matched[j].style))
            found2 = m;
        }
        if (found2) {
          found2.to = end;
          found2.step = step;
        } else {
          matched.push({ style: style2, from: Math.max(pos, from2), to: end, step });
        }
      }
    }
  });
  matched.forEach((m) => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));
}
function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch) {
  let node = tr.doc.nodeAt(pos);
  let delSteps = [], cur = pos + 1;
  for (let i = 0; i < node.childCount; i++) {
    let child = node.child(i), end = cur + child.nodeSize;
    let allowed = match.matchType(child.type);
    if (!allowed) {
      delSteps.push(new ReplaceStep(cur, end, Slice.empty));
    } else {
      match = allowed;
      for (let j = 0; j < child.marks.length; j++)
        if (!parentType.allowsMarkType(child.marks[j].type))
          tr.step(new RemoveMarkStep(cur, end, child.marks[j]));
    }
    cur = end;
  }
  if (!match.validEnd) {
    let fill = match.fillBefore(Fragment.empty, true);
    tr.replace(cur, cur, new Slice(fill, 0, 0));
  }
  for (let i = delSteps.length - 1; i >= 0; i--)
    tr.step(delSteps[i]);
}
function canCut(node, start, end) {
  return (start == 0 || node.canReplace(start, node.childCount)) && (end == node.childCount || node.canReplace(0, end));
}
function liftTarget(range) {
  let parent = range.parent;
  let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
  for (let depth = range.depth; ; --depth) {
    let node = range.$from.node(depth);
    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
    if (depth < range.depth && node.canReplace(index, endIndex, content))
      return depth;
    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))
      break;
  }
  return null;
}
function lift(tr, range, target) {
  let { $from, $to, depth } = range;
  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
  let start = gapStart, end = gapEnd;
  let before = Fragment.empty, openStart = 0;
  for (let d = depth, splitting = false; d > target; d--)
    if (splitting || $from.index(d) > 0) {
      splitting = true;
      before = Fragment.from($from.node(d).copy(before));
      openStart++;
    } else {
      start--;
    }
  let after = Fragment.empty, openEnd = 0;
  for (let d = depth, splitting = false; d > target; d--)
    if (splitting || $to.after(d + 1) < $to.end(d)) {
      splitting = true;
      after = Fragment.from($to.node(d).copy(after));
      openEnd++;
    } else {
      end++;
    }
  tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
}
function findWrapping(range, nodeType, attrs = null, innerRange = range) {
  let around = findWrappingOutside(range, nodeType);
  let inner = around && findWrappingInside(innerRange, nodeType);
  if (!inner)
    return null;
  return around.map(withAttrs).concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
}
function withAttrs(type) {
  return { type, attrs: null };
}
function findWrappingOutside(range, type) {
  let { parent, startIndex, endIndex } = range;
  let around = parent.contentMatchAt(startIndex).findWrapping(type);
  if (!around)
    return null;
  let outer = around.length ? around[0] : type;
  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
}
function findWrappingInside(range, type) {
  let { parent, startIndex, endIndex } = range;
  let inner = parent.child(startIndex);
  let inside = type.contentMatch.findWrapping(inner.type);
  if (!inside)
    return null;
  let lastType = inside.length ? inside[inside.length - 1] : type;
  let innerMatch = lastType.contentMatch;
  for (let i = startIndex; innerMatch && i < endIndex; i++)
    innerMatch = innerMatch.matchType(parent.child(i).type);
  if (!innerMatch || !innerMatch.validEnd)
    return null;
  return inside;
}
function wrap(tr, range, wrappers) {
  let content = Fragment.empty;
  for (let i = wrappers.length - 1; i >= 0; i--) {
    if (content.size) {
      let match = wrappers[i].type.contentMatch.matchFragment(content);
      if (!match || !match.validEnd)
        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
    }
    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
  }
  let start = range.start, end = range.end;
  tr.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true));
}
function setBlockType(tr, from2, to, type, attrs) {
  if (!type.isTextblock)
    throw new RangeError("Type given to setBlockType should be a textblock");
  let mapFrom = tr.steps.length;
  tr.doc.nodesBetween(from2, to, (node, pos) => {
    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
      tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), type);
      let mapping = tr.mapping.slice(mapFrom);
      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
      tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
      return false;
    }
  });
}
function canChangeType(doc3, pos, type) {
  let $pos = doc3.resolve(pos), index = $pos.index();
  return $pos.parent.canReplaceWith(index, index + 1, type);
}
function setNodeMarkup(tr, pos, type, attrs, marks2) {
  let node = tr.doc.nodeAt(pos);
  if (!node)
    throw new RangeError("No node at given position");
  if (!type)
    type = node.type;
  let newNode = type.create(attrs, null, marks2 || node.marks);
  if (node.isLeaf)
    return tr.replaceWith(pos, pos + node.nodeSize, newNode);
  if (!type.validContent(node.content))
    throw new RangeError("Invalid content for node type " + type.name);
  tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));
}
function canSplit(doc3, pos, depth = 1, typesAfter) {
  let $pos = doc3.resolve(pos), base2 = $pos.depth - depth;
  let innerType = typesAfter && typesAfter[typesAfter.length - 1] || $pos.parent;
  if (base2 < 0 || $pos.parent.type.spec.isolating || !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) || !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
    return false;
  for (let d = $pos.depth - 1, i = depth - 2; d > base2; d--, i--) {
    let node = $pos.node(d), index2 = $pos.index(d);
    if (node.type.spec.isolating)
      return false;
    let rest = node.content.cutByIndex(index2, node.childCount);
    let after = typesAfter && typesAfter[i] || node;
    if (after != node)
      rest = rest.replaceChild(0, after.type.create(after.attrs));
    if (!node.canReplace(index2 + 1, node.childCount) || !after.type.validContent(rest))
      return false;
  }
  let index = $pos.indexAfter(base2);
  let baseType = typesAfter && typesAfter[0];
  return $pos.node(base2).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base2 + 1).type);
}
function split(tr, pos, depth = 1, typesAfter) {
  let $pos = tr.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
    before = Fragment.from($pos.node(d).copy(before));
    let typeAfter = typesAfter && typesAfter[i];
    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
  }
  tr.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true));
}
function canJoin(doc3, pos) {
  let $pos = doc3.resolve(pos), index = $pos.index();
  return joinable2($pos.nodeBefore, $pos.nodeAfter) && $pos.parent.canReplace(index, index + 1);
}
function joinable2(a, b) {
  return !!(a && b && !a.isLeaf && a.canAppend(b));
}
function joinPoint(doc3, pos, dir = -1) {
  let $pos = doc3.resolve(pos);
  for (let d = $pos.depth; ; d--) {
    let before, after, index = $pos.index(d);
    if (d == $pos.depth) {
      before = $pos.nodeBefore;
      after = $pos.nodeAfter;
    } else if (dir > 0) {
      before = $pos.node(d + 1);
      index++;
      after = $pos.node(d).maybeChild(index);
    } else {
      before = $pos.node(d).maybeChild(index - 1);
      after = $pos.node(d + 1);
    }
    if (before && !before.isTextblock && joinable2(before, after) && $pos.node(d).canReplace(index, index + 1))
      return pos;
    if (d == 0)
      break;
    pos = dir < 0 ? $pos.before(d) : $pos.after(d);
  }
}
function join(tr, pos, depth) {
  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
  tr.step(step);
}
function insertPoint(doc3, pos, nodeType) {
  let $pos = doc3.resolve(pos);
  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
    return pos;
  if ($pos.parentOffset == 0)
    for (let d = $pos.depth - 1; d >= 0; d--) {
      let index = $pos.index(d);
      if ($pos.node(d).canReplaceWith(index, index, nodeType))
        return $pos.before(d + 1);
      if (index > 0)
        return null;
    }
  if ($pos.parentOffset == $pos.parent.content.size)
    for (let d = $pos.depth - 1; d >= 0; d--) {
      let index = $pos.indexAfter(d);
      if ($pos.node(d).canReplaceWith(index, index, nodeType))
        return $pos.after(d + 1);
      if (index < $pos.node(d).childCount)
        return null;
    }
  return null;
}
function dropPoint(doc3, pos, slice2) {
  let $pos = doc3.resolve(pos);
  if (!slice2.content.size)
    return pos;
  let content = slice2.content;
  for (let i = 0; i < slice2.openStart; i++)
    content = content.firstChild.content;
  for (let pass = 1; pass <= (slice2.openStart == 0 && slice2.size ? 2 : 1); pass++) {
    for (let d = $pos.depth; d >= 0; d--) {
      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
      let parent = $pos.node(d), fits = false;
      if (pass == 1) {
        fits = parent.canReplace(insertPos, insertPos, content);
      } else {
        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
      }
      if (fits)
        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
    }
  }
  return null;
}
function replaceStep(doc3, from2, to = from2, slice2 = Slice.empty) {
  if (from2 == to && !slice2.size)
    return null;
  let $from = doc3.resolve(from2), $to = doc3.resolve(to);
  if (fitsTrivially($from, $to, slice2))
    return new ReplaceStep(from2, to, slice2);
  return new Fitter($from, $to, slice2).fit();
}
function fitsTrivially($from, $to, slice2) {
  return !slice2.openStart && !slice2.openEnd && $from.start() == $to.start() && $from.parent.canReplace($from.index(), $to.index(), slice2.content);
}
var Fitter = class {
  constructor($from, $to, unplaced) {
    this.$from = $from;
    this.$to = $to;
    this.unplaced = unplaced;
    this.frontier = [];
    this.placed = Fragment.empty;
    for (let i = 0; i <= $from.depth; i++) {
      let node = $from.node(i);
      this.frontier.push({
        type: node.type,
        match: node.contentMatchAt($from.indexAfter(i))
      });
    }
    for (let i = $from.depth; i > 0; i--)
      this.placed = Fragment.from($from.node(i).copy(this.placed));
  }
  get depth() {
    return this.frontier.length - 1;
  }
  fit() {
    while (this.unplaced.size) {
      let fit = this.findFittable();
      if (fit)
        this.placeNodes(fit);
      else
        this.openMore() || this.dropNode();
    }
    let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
    let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
    if (!$to)
      return null;
    let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
    while (openStart && openEnd && content.childCount == 1) {
      content = content.firstChild.content;
      openStart--;
      openEnd--;
    }
    let slice2 = new Slice(content, openStart, openEnd);
    if (moveInline > -1)
      return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice2, placedSize);
    if (slice2.size || $from.pos != this.$to.pos)
      return new ReplaceStep($from.pos, $to.pos, slice2);
    return null;
  }
  // Find a position on the start spine of `this.unplaced` that has
  // content that can be moved somewhere on the frontier. Returns two
  // depths, one for the slice and one for the frontier.
  findFittable() {
    let startDepth = this.unplaced.openStart;
    for (let cur = this.unplaced.content, d = 0, openEnd = this.unplaced.openEnd; d < startDepth; d++) {
      let node = cur.firstChild;
      if (cur.childCount > 1)
        openEnd = 0;
      if (node.type.spec.isolating && openEnd <= d) {
        startDepth = d;
        break;
      }
      cur = node.content;
    }
    for (let pass = 1; pass <= 2; pass++) {
      for (let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
        let fragment, parent = null;
        if (sliceDepth) {
          parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
          fragment = parent.content;
        } else {
          fragment = this.unplaced.content;
        }
        let first = fragment.firstChild;
        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
          let { type, match } = this.frontier[frontierDepth], wrap2, inject = null;
          if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false)) : parent && type.compatibleContent(parent.type)))
            return { sliceDepth, frontierDepth, parent, inject };
          else if (pass == 2 && first && (wrap2 = match.findWrapping(first.type)))
            return { sliceDepth, frontierDepth, parent, wrap: wrap2 };
          if (parent && match.matchType(parent.type))
            break;
        }
      }
    }
  }
  openMore() {
    let { content, openStart, openEnd } = this.unplaced;
    let inner = contentAt(content, openStart);
    if (!inner.childCount || inner.firstChild.isLeaf)
      return false;
    this.unplaced = new Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
    return true;
  }
  dropNode() {
    let { content, openStart, openEnd } = this.unplaced;
    let inner = contentAt(content, openStart);
    if (inner.childCount <= 1 && openStart > 0) {
      let openAtEnd = content.size - openStart <= openStart + inner.size;
      this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
    } else {
      this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
    }
  }
  // Move content from the unplaced slice at `sliceDepth` to the
  // frontier node at `frontierDepth`. Close that frontier node when
  // applicable.
  placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap: wrap2 }) {
    while (this.depth > frontierDepth)
      this.closeFrontierNode();
    if (wrap2)
      for (let i = 0; i < wrap2.length; i++)
        this.openFrontierNode(wrap2[i]);
    let slice2 = this.unplaced, fragment = parent ? parent.content : slice2.content;
    let openStart = slice2.openStart - sliceDepth;
    let taken = 0, add2 = [];
    let { match, type } = this.frontier[frontierDepth];
    if (inject) {
      for (let i = 0; i < inject.childCount; i++)
        add2.push(inject.child(i));
      match = match.matchFragment(inject);
    }
    let openEndCount = fragment.size + sliceDepth - (slice2.content.size - slice2.openEnd);
    while (taken < fragment.childCount) {
      let next = fragment.child(taken), matches2 = match.matchType(next.type);
      if (!matches2)
        break;
      taken++;
      if (taken > 1 || openStart == 0 || next.content.size) {
        match = matches2;
        add2.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
      }
    }
    let toEnd = taken == fragment.childCount;
    if (!toEnd)
      openEndCount = -1;
    this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add2));
    this.frontier[frontierDepth].match = match;
    if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
      this.closeFrontierNode();
    for (let i = 0, cur = fragment; i < openEndCount; i++) {
      let node = cur.lastChild;
      this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });
      cur = node.content;
    }
    this.unplaced = !toEnd ? new Slice(dropFromFragment(slice2.content, sliceDepth, taken), slice2.openStart, slice2.openEnd) : sliceDepth == 0 ? Slice.empty : new Slice(dropFromFragment(slice2.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice2.openEnd : sliceDepth - 1);
  }
  mustMoveInline() {
    if (!this.$to.parent.isTextblock)
      return -1;
    let top = this.frontier[this.depth], level;
    if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) || this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)
      return -1;
    let { depth } = this.$to, after = this.$to.after(depth);
    while (depth > 1 && after == this.$to.end(--depth))
      ++after;
    return after;
  }
  findCloseLevel($to) {
    scan:
      for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
        let { match, type } = this.frontier[i];
        let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
        let fit = contentAfterFits($to, i, type, match, dropInner);
        if (!fit)
          continue;
        for (let d = i - 1; d >= 0; d--) {
          let { match: match2, type: type2 } = this.frontier[d];
          let matches2 = contentAfterFits($to, d, type2, match2, true);
          if (!matches2 || matches2.childCount)
            continue scan;
        }
        return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
      }
  }
  close($to) {
    let close2 = this.findCloseLevel($to);
    if (!close2)
      return null;
    while (this.depth > close2.depth)
      this.closeFrontierNode();
    if (close2.fit.childCount)
      this.placed = addToFragment(this.placed, close2.depth, close2.fit);
    $to = close2.move;
    for (let d = close2.depth + 1; d <= $to.depth; d++) {
      let node = $to.node(d), add2 = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
      this.openFrontierNode(node.type, node.attrs, add2);
    }
    return $to;
  }
  openFrontierNode(type, attrs = null, content) {
    let top = this.frontier[this.depth];
    top.match = top.match.matchType(type);
    this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));
    this.frontier.push({ type, match: type.contentMatch });
  }
  closeFrontierNode() {
    let open = this.frontier.pop();
    let add2 = open.match.fillBefore(Fragment.empty, true);
    if (add2.childCount)
      this.placed = addToFragment(this.placed, this.frontier.length, add2);
  }
};
function dropFromFragment(fragment, depth, count) {
  if (depth == 0)
    return fragment.cutByIndex(count, fragment.childCount);
  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
}
function addToFragment(fragment, depth, content) {
  if (depth == 0)
    return fragment.append(content);
  return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
}
function contentAt(fragment, depth) {
  for (let i = 0; i < depth; i++)
    fragment = fragment.firstChild.content;
  return fragment;
}
function closeNodeStart(node, openStart, openEnd) {
  if (openStart <= 0)
    return node;
  let frag = node.content;
  if (openStart > 1)
    frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
  if (openStart > 0) {
    frag = node.type.contentMatch.fillBefore(frag).append(frag);
    if (openEnd <= 0)
      frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));
  }
  return node.copy(frag);
}
function contentAfterFits($to, depth, type, match, open) {
  let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
  if (index == node.childCount && !type.compatibleContent(node.type))
    return null;
  let fit = match.fillBefore(node.content, true, index);
  return fit && !invalidMarks(type, node.content, index) ? fit : null;
}
function invalidMarks(type, fragment, start) {
  for (let i = start; i < fragment.childCount; i++)
    if (!type.allowsMarks(fragment.child(i).marks))
      return true;
  return false;
}
function definesContent(type) {
  return type.spec.defining || type.spec.definingForContent;
}
function replaceRange(tr, from2, to, slice2) {
  if (!slice2.size)
    return tr.deleteRange(from2, to);
  let $from = tr.doc.resolve(from2), $to = tr.doc.resolve(to);
  if (fitsTrivially($from, $to, slice2))
    return tr.step(new ReplaceStep(from2, to, slice2));
  let targetDepths = coveredDepths($from, tr.doc.resolve(to));
  if (targetDepths[targetDepths.length - 1] == 0)
    targetDepths.pop();
  let preferredTarget = -($from.depth + 1);
  targetDepths.unshift(preferredTarget);
  for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
    let spec = $from.node(d).type.spec;
    if (spec.defining || spec.definingAsContext || spec.isolating)
      break;
    if (targetDepths.indexOf(d) > -1)
      preferredTarget = d;
    else if ($from.before(d) == pos)
      targetDepths.splice(1, 0, -d);
  }
  let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
  let leftNodes = [], preferredDepth = slice2.openStart;
  for (let content = slice2.content, i = 0; ; i++) {
    let node = content.firstChild;
    leftNodes.push(node);
    if (i == slice2.openStart)
      break;
    content = node.content;
  }
  for (let d = preferredDepth - 1; d >= 0; d--) {
    let type = leftNodes[d].type, def = definesContent(type);
    if (def && $from.node(preferredTargetIndex).type != type)
      preferredDepth = d;
    else if (def || !type.isTextblock)
      break;
  }
  for (let j = slice2.openStart; j >= 0; j--) {
    let openDepth = (j + preferredDepth + 1) % (slice2.openStart + 1);
    let insert = leftNodes[openDepth];
    if (!insert)
      continue;
    for (let i = 0; i < targetDepths.length; i++) {
      let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
      if (targetDepth < 0) {
        expand = false;
        targetDepth = -targetDepth;
      }
      let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
      if (parent.canReplaceWith(index, index, insert.type, insert.marks))
        return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new Slice(closeFragment(slice2.content, 0, slice2.openStart, openDepth), openDepth, slice2.openEnd));
    }
  }
  let startSteps = tr.steps.length;
  for (let i = targetDepths.length - 1; i >= 0; i--) {
    tr.replace(from2, to, slice2);
    if (tr.steps.length > startSteps)
      break;
    let depth = targetDepths[i];
    if (depth < 0)
      continue;
    from2 = $from.before(depth);
    to = $to.after(depth);
  }
}
function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
  if (depth < oldOpen) {
    let first = fragment.firstChild;
    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
  }
  if (depth > newOpen) {
    let match = parent.contentMatchAt(0);
    let start = match.fillBefore(fragment).append(fragment);
    fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));
  }
  return fragment;
}
function replaceRangeWith(tr, from2, to, node) {
  if (!node.isInline && from2 == to && tr.doc.resolve(from2).parent.content.size) {
    let point = insertPoint(tr.doc, from2, node.type);
    if (point != null)
      from2 = to = point;
  }
  tr.replaceRange(from2, to, new Slice(Fragment.from(node), 0, 0));
}
function deleteRange(tr, from2, to) {
  let $from = tr.doc.resolve(from2), $to = tr.doc.resolve(to);
  let covered = coveredDepths($from, $to);
  for (let i = 0; i < covered.length; i++) {
    let depth = covered[i], last = i == covered.length - 1;
    if (last && depth == 0 || $from.node(depth).type.contentMatch.validEnd)
      return tr.delete($from.start(depth), $to.end(depth));
    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
      return tr.delete($from.before(depth), $to.after(depth));
  }
  for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
    if (from2 - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
      return tr.delete($from.before(d), to);
  }
  tr.delete(from2, to);
}
function coveredDepths($from, $to) {
  let result = [], minDepth = Math.min($from.depth, $to.depth);
  for (let d = minDepth; d >= 0; d--) {
    let start = $from.start(d);
    if (start < $from.pos - ($from.depth - d) || $to.end(d) > $to.pos + ($to.depth - d) || $from.node(d).type.spec.isolating || $to.node(d).type.spec.isolating)
      break;
    if (start == $to.start(d) || d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent && d && $to.start(d - 1) == start - 1)
      result.push(d);
  }
  return result;
}
var AttrStep = class _AttrStep extends Step {
  /**
  Construct an attribute step.
  */
  constructor(pos, attr, value2) {
    super();
    this.pos = pos;
    this.attr = attr;
    this.value = value2;
  }
  apply(doc3) {
    let node = doc3.nodeAt(this.pos);
    if (!node)
      return StepResult.fail("No node at attribute step's position");
    let attrs = /* @__PURE__ */ Object.create(null);
    for (let name in node.attrs)
      attrs[name] = node.attrs[name];
    attrs[this.attr] = this.value;
    let updated4 = node.type.create(attrs, null, node.marks);
    return StepResult.fromReplace(doc3, this.pos, this.pos + 1, new Slice(Fragment.from(updated4), 0, node.isLeaf ? 0 : 1));
  }
  getMap() {
    return StepMap.empty;
  }
  invert(doc3) {
    return new _AttrStep(this.pos, this.attr, doc3.nodeAt(this.pos).attrs[this.attr]);
  }
  map(mapping) {
    let pos = mapping.mapResult(this.pos, 1);
    return pos.deletedAfter ? null : new _AttrStep(pos.pos, this.attr, this.value);
  }
  toJSON() {
    return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
  }
  static fromJSON(schema, json) {
    if (typeof json.pos != "number" || typeof json.attr != "string")
      throw new RangeError("Invalid input for AttrStep.fromJSON");
    return new _AttrStep(json.pos, json.attr, json.value);
  }
};
Step.jsonID("attr", AttrStep);
var TransformError = class extends Error {
};
TransformError = function TransformError2(message) {
  let err = Error.call(this, message);
  err.__proto__ = TransformError2.prototype;
  return err;
};
TransformError.prototype = Object.create(Error.prototype);
TransformError.prototype.constructor = TransformError;
TransformError.prototype.name = "TransformError";
var Transform = class {
  /**
  Create a transform that starts with the given document.
  */
  constructor(doc3) {
    this.doc = doc3;
    this.steps = [];
    this.docs = [];
    this.mapping = new Mapping();
  }
  /**
  The starting document.
  */
  get before() {
    return this.docs.length ? this.docs[0] : this.doc;
  }
  /**
  Apply a new step in this transform, saving the result. Throws an
  error when the step fails.
  */
  step(step) {
    let result = this.maybeStep(step);
    if (result.failed)
      throw new TransformError(result.failed);
    return this;
  }
  /**
  Try to apply a step in this transformation, ignoring it if it
  fails. Returns the step result.
  */
  maybeStep(step) {
    let result = step.apply(this.doc);
    if (!result.failed)
      this.addStep(step, result.doc);
    return result;
  }
  /**
  True when the document has been changed (when there are any
  steps).
  */
  get docChanged() {
    return this.steps.length > 0;
  }
  /**
  @internal
  */
  addStep(step, doc3) {
    this.docs.push(this.doc);
    this.steps.push(step);
    this.mapping.appendMap(step.getMap());
    this.doc = doc3;
  }
  /**
  Replace the part of the document between `from` and `to` with the
  given `slice`.
  */
  replace(from2, to = from2, slice2 = Slice.empty) {
    let step = replaceStep(this.doc, from2, to, slice2);
    if (step)
      this.step(step);
    return this;
  }
  /**
  Replace the given range with the given content, which may be a
  fragment, node, or array of nodes.
  */
  replaceWith(from2, to, content) {
    return this.replace(from2, to, new Slice(Fragment.from(content), 0, 0));
  }
  /**
  Delete the content between the given positions.
  */
  delete(from2, to) {
    return this.replace(from2, to, Slice.empty);
  }
  /**
  Insert the given content at the given position.
  */
  insert(pos, content) {
    return this.replaceWith(pos, pos, content);
  }
  /**
  Replace a range of the document with a given slice, using
  `from`, `to`, and the slice's
  [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
  than fixed start and end points. This method may grow the
  replaced area or close open nodes in the slice in order to get a
  fit that is more in line with WYSIWYG expectations, by dropping
  fully covered parent nodes of the replaced region when they are
  marked [non-defining as
  context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
  open parent node from the slice that _is_ marked as [defining
  its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
  
  This is the method, for example, to handle paste. The similar
  [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
  primitive tool which will _not_ move the start and end of its given
  range, and is useful in situations where you need more precise
  control over what happens.
  */
  replaceRange(from2, to, slice2) {
    replaceRange(this, from2, to, slice2);
    return this;
  }
  /**
  Replace the given range with a node, but use `from` and `to` as
  hints, rather than precise positions. When from and to are the same
  and are at the start or end of a parent node in which the given
  node doesn't fit, this method may _move_ them out towards a parent
  that does allow the given node to be placed. When the given range
  completely covers a parent node, this method may completely replace
  that parent node.
  */
  replaceRangeWith(from2, to, node) {
    replaceRangeWith(this, from2, to, node);
    return this;
  }
  /**
  Delete the given range, expanding it to cover fully covered
  parent nodes until a valid replace is found.
  */
  deleteRange(from2, to) {
    deleteRange(this, from2, to);
    return this;
  }
  /**
  Split the content in the given range off from its parent, if there
  is sibling content before or after it, and move it up the tree to
  the depth specified by `target`. You'll probably want to use
  [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
  sure the lift is valid.
  */
  lift(range, target) {
    lift(this, range, target);
    return this;
  }
  /**
  Join the blocks around the given position. If depth is 2, their
  last and first siblings are also joined, and so on.
  */
  join(pos, depth = 1) {
    join(this, pos, depth);
    return this;
  }
  /**
  Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
  The wrappers are assumed to be valid in this position, and should
  probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
  */
  wrap(range, wrappers) {
    wrap(this, range, wrappers);
    return this;
  }
  /**
  Set the type of all textblocks (partly) between `from` and `to` to
  the given node type with the given attributes.
  */
  setBlockType(from2, to = from2, type, attrs = null) {
    setBlockType(this, from2, to, type, attrs);
    return this;
  }
  /**
  Change the type, attributes, and/or marks of the node at `pos`.
  When `type` isn't given, the existing node type is preserved,
  */
  setNodeMarkup(pos, type, attrs = null, marks2) {
    setNodeMarkup(this, pos, type, attrs, marks2);
    return this;
  }
  /**
  Set a single attribute on a given node to a new value.
  */
  setNodeAttribute(pos, attr, value2) {
    this.step(new AttrStep(pos, attr, value2));
    return this;
  }
  /**
  Add a mark to the node at position `pos`.
  */
  addNodeMark(pos, mark) {
    this.step(new AddNodeMarkStep(pos, mark));
    return this;
  }
  /**
  Remove a mark (or a mark of the given type) from the node at
  position `pos`.
  */
  removeNodeMark(pos, mark) {
    if (!(mark instanceof Mark)) {
      let node = this.doc.nodeAt(pos);
      if (!node)
        throw new RangeError("No node at position " + pos);
      mark = mark.isInSet(node.marks);
      if (!mark)
        return this;
    }
    this.step(new RemoveNodeMarkStep(pos, mark));
    return this;
  }
  /**
  Split the node at the given position, and optionally, if `depth` is
  greater than one, any number of nodes above that. By default, the
  parts split off will inherit the node type of the original node.
  This can be changed by passing an array of types and attributes to
  use after the split.
  */
  split(pos, depth = 1, typesAfter) {
    split(this, pos, depth, typesAfter);
    return this;
  }
  /**
  Add the given mark to the inline content between `from` and `to`.
  */
  addMark(from2, to, mark) {
    addMark(this, from2, to, mark);
    return this;
  }
  /**
  Remove marks from inline nodes between `from` and `to`. When
  `mark` is a single mark, remove precisely that mark. When it is
  a mark type, remove all marks of that type. When it is null,
  remove all marks of any type.
  */
  removeMark(from2, to, mark) {
    removeMark(this, from2, to, mark);
    return this;
  }
  /**
  Removes all marks and nodes from the content of the node at
  `pos` that don't match the given new parent node type. Accepts
  an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
  third argument.
  */
  clearIncompatible(pos, parentType, match) {
    clearIncompatible(this, pos, parentType, match);
    return this;
  }
};

// node_modules/prosemirror-state/dist/index.js
var classesById = /* @__PURE__ */ Object.create(null);
var Selection = class {
  /**
  Initialize a selection with the head and anchor and ranges. If no
  ranges are given, constructs a single range across `$anchor` and
  `$head`.
  */
  constructor($anchor, $head, ranges) {
    this.$anchor = $anchor;
    this.$head = $head;
    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
  }
  /**
  The selection's anchor, as an unresolved position.
  */
  get anchor() {
    return this.$anchor.pos;
  }
  /**
  The selection's head.
  */
  get head() {
    return this.$head.pos;
  }
  /**
  The lower bound of the selection's main range.
  */
  get from() {
    return this.$from.pos;
  }
  /**
  The upper bound of the selection's main range.
  */
  get to() {
    return this.$to.pos;
  }
  /**
  The resolved lower  bound of the selection's main range.
  */
  get $from() {
    return this.ranges[0].$from;
  }
  /**
  The resolved upper bound of the selection's main range.
  */
  get $to() {
    return this.ranges[0].$to;
  }
  /**
  Indicates whether the selection contains any content.
  */
  get empty() {
    let ranges = this.ranges;
    for (let i = 0; i < ranges.length; i++)
      if (ranges[i].$from.pos != ranges[i].$to.pos)
        return false;
    return true;
  }
  /**
  Get the content of this selection as a slice.
  */
  content() {
    return this.$from.doc.slice(this.from, this.to, true);
  }
  /**
  Replace the selection with a slice or, if no slice is given,
  delete the selection. Will append to the given transaction.
  */
  replace(tr, content = Slice.empty) {
    let lastNode = content.content.lastChild, lastParent = null;
    for (let i = 0; i < content.openEnd; i++) {
      lastParent = lastNode;
      lastNode = lastNode.lastChild;
    }
    let mapFrom = tr.steps.length, ranges = this.ranges;
    for (let i = 0; i < ranges.length; i++) {
      let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content);
      if (i == 0)
        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
    }
  }
  /**
  Replace the selection with the given node, appending the changes
  to the given transaction.
  */
  replaceWith(tr, node) {
    let mapFrom = tr.steps.length, ranges = this.ranges;
    for (let i = 0; i < ranges.length; i++) {
      let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
      let from2 = mapping.map($from.pos), to = mapping.map($to.pos);
      if (i) {
        tr.deleteRange(from2, to);
      } else {
        tr.replaceRangeWith(from2, to, node);
        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);
      }
    }
  }
  /**
  Find a valid cursor or leaf node selection starting at the given
  position and searching back if `dir` is negative, and forward if
  positive. When `textOnly` is true, only consider cursor
  selections. Will return null when no valid selection position is
  found.
  */
  static findFrom($pos, dir, textOnly = false) {
    let inner = $pos.parent.inlineContent ? new TextSelection($pos) : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
    if (inner)
      return inner;
    for (let depth = $pos.depth - 1; depth >= 0; depth--) {
      let found2 = dir < 0 ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly) : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
      if (found2)
        return found2;
    }
    return null;
  }
  /**
  Find a valid cursor or leaf node selection near the given
  position. Searches forward first by default, but if `bias` is
  negative, it will search backwards first.
  */
  static near($pos, bias = 1) {
    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
  }
  /**
  Find the cursor or leaf node selection closest to the start of
  the given document. Will return an
  [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
  exists.
  */
  static atStart(doc3) {
    return findSelectionIn(doc3, doc3, 0, 0, 1) || new AllSelection(doc3);
  }
  /**
  Find the cursor or leaf node selection closest to the end of the
  given document.
  */
  static atEnd(doc3) {
    return findSelectionIn(doc3, doc3, doc3.content.size, doc3.childCount, -1) || new AllSelection(doc3);
  }
  /**
  Deserialize the JSON representation of a selection. Must be
  implemented for custom classes (as a static class method).
  */
  static fromJSON(doc3, json) {
    if (!json || !json.type)
      throw new RangeError("Invalid input for Selection.fromJSON");
    let cls = classesById[json.type];
    if (!cls)
      throw new RangeError(`No selection type ${json.type} defined`);
    return cls.fromJSON(doc3, json);
  }
  /**
  To be able to deserialize selections from JSON, custom selection
  classes must register themselves with an ID string, so that they
  can be disambiguated. Try to pick something that's unlikely to
  clash with classes from other modules.
  */
  static jsonID(id, selectionClass) {
    if (id in classesById)
      throw new RangeError("Duplicate use of selection JSON ID " + id);
    classesById[id] = selectionClass;
    selectionClass.prototype.jsonID = id;
    return selectionClass;
  }
  /**
  Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
  which is a value that can be mapped without having access to a
  current document, and later resolved to a real selection for a
  given document again. (This is used mostly by the history to
  track and restore old selections.) The default implementation of
  this method just converts the selection to a text selection and
  returns the bookmark for that.
  */
  getBookmark() {
    return TextSelection.between(this.$anchor, this.$head).getBookmark();
  }
};
Selection.prototype.visible = true;
var SelectionRange = class {
  /**
  Create a range.
  */
  constructor($from, $to) {
    this.$from = $from;
    this.$to = $to;
  }
};
var warnedAboutTextSelection = false;
function checkTextSelection($pos) {
  if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
    warnedAboutTextSelection = true;
    console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
  }
}
var TextSelection = class _TextSelection extends Selection {
  /**
  Construct a text selection between the given points.
  */
  constructor($anchor, $head = $anchor) {
    checkTextSelection($anchor);
    checkTextSelection($head);
    super($anchor, $head);
  }
  /**
  Returns a resolved position if this is a cursor selection (an
  empty text selection), and null otherwise.
  */
  get $cursor() {
    return this.$anchor.pos == this.$head.pos ? this.$head : null;
  }
  map(doc3, mapping) {
    let $head = doc3.resolve(mapping.map(this.head));
    if (!$head.parent.inlineContent)
      return Selection.near($head);
    let $anchor = doc3.resolve(mapping.map(this.anchor));
    return new _TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
  }
  replace(tr, content = Slice.empty) {
    super.replace(tr, content);
    if (content == Slice.empty) {
      let marks2 = this.$from.marksAcross(this.$to);
      if (marks2)
        tr.ensureMarks(marks2);
    }
  }
  eq(other) {
    return other instanceof _TextSelection && other.anchor == this.anchor && other.head == this.head;
  }
  getBookmark() {
    return new TextBookmark(this.anchor, this.head);
  }
  toJSON() {
    return { type: "text", anchor: this.anchor, head: this.head };
  }
  /**
  @internal
  */
  static fromJSON(doc3, json) {
    if (typeof json.anchor != "number" || typeof json.head != "number")
      throw new RangeError("Invalid input for TextSelection.fromJSON");
    return new _TextSelection(doc3.resolve(json.anchor), doc3.resolve(json.head));
  }
  /**
  Create a text selection from non-resolved positions.
  */
  static create(doc3, anchor, head = anchor) {
    let $anchor = doc3.resolve(anchor);
    return new this($anchor, head == anchor ? $anchor : doc3.resolve(head));
  }
  /**
  Return a text selection that spans the given positions or, if
  they aren't text positions, find a text selection near them.
  `bias` determines whether the method searches forward (default)
  or backwards (negative number) first. Will fall back to calling
  [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
  doesn't contain a valid text position.
  */
  static between($anchor, $head, bias) {
    let dPos = $anchor.pos - $head.pos;
    if (!bias || dPos)
      bias = dPos >= 0 ? 1 : -1;
    if (!$head.parent.inlineContent) {
      let found2 = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
      if (found2)
        $head = found2.$head;
      else
        return Selection.near($head, bias);
    }
    if (!$anchor.parent.inlineContent) {
      if (dPos == 0) {
        $anchor = $head;
      } else {
        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
        if ($anchor.pos < $head.pos != dPos < 0)
          $anchor = $head;
      }
    }
    return new _TextSelection($anchor, $head);
  }
};
Selection.jsonID("text", TextSelection);
var TextBookmark = class _TextBookmark {
  constructor(anchor, head) {
    this.anchor = anchor;
    this.head = head;
  }
  map(mapping) {
    return new _TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
  }
  resolve(doc3) {
    return TextSelection.between(doc3.resolve(this.anchor), doc3.resolve(this.head));
  }
};
var NodeSelection = class _NodeSelection extends Selection {
  /**
  Create a node selection. Does not verify the validity of its
  argument.
  */
  constructor($pos) {
    let node = $pos.nodeAfter;
    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
    super($pos, $end);
    this.node = node;
  }
  map(doc3, mapping) {
    let { deleted, pos } = mapping.mapResult(this.anchor);
    let $pos = doc3.resolve(pos);
    if (deleted)
      return Selection.near($pos);
    return new _NodeSelection($pos);
  }
  content() {
    return new Slice(Fragment.from(this.node), 0, 0);
  }
  eq(other) {
    return other instanceof _NodeSelection && other.anchor == this.anchor;
  }
  toJSON() {
    return { type: "node", anchor: this.anchor };
  }
  getBookmark() {
    return new NodeBookmark(this.anchor);
  }
  /**
  @internal
  */
  static fromJSON(doc3, json) {
    if (typeof json.anchor != "number")
      throw new RangeError("Invalid input for NodeSelection.fromJSON");
    return new _NodeSelection(doc3.resolve(json.anchor));
  }
  /**
  Create a node selection from non-resolved positions.
  */
  static create(doc3, from2) {
    return new _NodeSelection(doc3.resolve(from2));
  }
  /**
  Determines whether the given node may be selected as a node
  selection.
  */
  static isSelectable(node) {
    return !node.isText && node.type.spec.selectable !== false;
  }
};
NodeSelection.prototype.visible = false;
Selection.jsonID("node", NodeSelection);
var NodeBookmark = class _NodeBookmark {
  constructor(anchor) {
    this.anchor = anchor;
  }
  map(mapping) {
    let { deleted, pos } = mapping.mapResult(this.anchor);
    return deleted ? new TextBookmark(pos, pos) : new _NodeBookmark(pos);
  }
  resolve(doc3) {
    let $pos = doc3.resolve(this.anchor), node = $pos.nodeAfter;
    if (node && NodeSelection.isSelectable(node))
      return new NodeSelection($pos);
    return Selection.near($pos);
  }
};
var AllSelection = class _AllSelection extends Selection {
  /**
  Create an all-selection over the given document.
  */
  constructor(doc3) {
    super(doc3.resolve(0), doc3.resolve(doc3.content.size));
  }
  replace(tr, content = Slice.empty) {
    if (content == Slice.empty) {
      tr.delete(0, tr.doc.content.size);
      let sel = Selection.atStart(tr.doc);
      if (!sel.eq(tr.selection))
        tr.setSelection(sel);
    } else {
      super.replace(tr, content);
    }
  }
  toJSON() {
    return { type: "all" };
  }
  /**
  @internal
  */
  static fromJSON(doc3) {
    return new _AllSelection(doc3);
  }
  map(doc3) {
    return new _AllSelection(doc3);
  }
  eq(other) {
    return other instanceof _AllSelection;
  }
  getBookmark() {
    return AllBookmark;
  }
};
Selection.jsonID("all", AllSelection);
var AllBookmark = {
  map() {
    return this;
  },
  resolve(doc3) {
    return new AllSelection(doc3);
  }
};
function findSelectionIn(doc3, node, pos, index, dir, text = false) {
  if (node.inlineContent)
    return TextSelection.create(doc3, pos);
  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
    let child = node.child(i);
    if (!child.isAtom) {
      let inner = findSelectionIn(doc3, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
      if (inner)
        return inner;
    } else if (!text && NodeSelection.isSelectable(child)) {
      return NodeSelection.create(doc3, pos - (dir < 0 ? child.nodeSize : 0));
    }
    pos += child.nodeSize * dir;
  }
  return null;
}
function selectionToInsertionEnd(tr, startLen, bias) {
  let last = tr.steps.length - 1;
  if (last < startLen)
    return;
  let step = tr.steps[last];
  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
    return;
  let map2 = tr.mapping.maps[last], end;
  map2.forEach((_from, _to, _newFrom, newTo) => {
    if (end == null)
      end = newTo;
  });
  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
}
var UPDATED_SEL = 1;
var UPDATED_MARKS = 2;
var UPDATED_SCROLL = 4;
var Transaction = class extends Transform {
  /**
  @internal
  */
  constructor(state) {
    super(state.doc);
    this.curSelectionFor = 0;
    this.updated = 0;
    this.meta = /* @__PURE__ */ Object.create(null);
    this.time = Date.now();
    this.curSelection = state.selection;
    this.storedMarks = state.storedMarks;
  }
  /**
  The transaction's current selection. This defaults to the editor
  selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
  transaction, but can be overwritten with
  [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
  */
  get selection() {
    if (this.curSelectionFor < this.steps.length) {
      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
      this.curSelectionFor = this.steps.length;
    }
    return this.curSelection;
  }
  /**
  Update the transaction's current selection. Will determine the
  selection that the editor gets when the transaction is applied.
  */
  setSelection(selection) {
    if (selection.$from.doc != this.doc)
      throw new RangeError("Selection passed to setSelection must point at the current document");
    this.curSelection = selection;
    this.curSelectionFor = this.steps.length;
    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
    this.storedMarks = null;
    return this;
  }
  /**
  Whether the selection was explicitly updated by this transaction.
  */
  get selectionSet() {
    return (this.updated & UPDATED_SEL) > 0;
  }
  /**
  Set the current stored marks.
  */
  setStoredMarks(marks2) {
    this.storedMarks = marks2;
    this.updated |= UPDATED_MARKS;
    return this;
  }
  /**
  Make sure the current stored marks or, if that is null, the marks
  at the selection, match the given set of marks. Does nothing if
  this is already the case.
  */
  ensureMarks(marks2) {
    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks2))
      this.setStoredMarks(marks2);
    return this;
  }
  /**
  Add a mark to the set of stored marks.
  */
  addStoredMark(mark) {
    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Remove a mark or mark type from the set of stored marks.
  */
  removeStoredMark(mark) {
    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Whether the stored marks were explicitly set for this transaction.
  */
  get storedMarksSet() {
    return (this.updated & UPDATED_MARKS) > 0;
  }
  /**
  @internal
  */
  addStep(step, doc3) {
    super.addStep(step, doc3);
    this.updated = this.updated & ~UPDATED_MARKS;
    this.storedMarks = null;
  }
  /**
  Update the timestamp for the transaction.
  */
  setTime(time) {
    this.time = time;
    return this;
  }
  /**
  Replace the current selection with the given slice.
  */
  replaceSelection(slice2) {
    this.selection.replace(this, slice2);
    return this;
  }
  /**
  Replace the selection with the given node. When `inheritMarks` is
  true and the content is inline, it inherits the marks from the
  place where it is inserted.
  */
  replaceSelectionWith(node, inheritMarks = true) {
    let selection = this.selection;
    if (inheritMarks)
      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : selection.$from.marksAcross(selection.$to) || Mark.none));
    selection.replaceWith(this, node);
    return this;
  }
  /**
  Delete the selection.
  */
  deleteSelection() {
    this.selection.replace(this);
    return this;
  }
  /**
  Replace the given range, or the selection if no range is given,
  with a text node containing the given string.
  */
  insertText(text, from2, to) {
    let schema = this.doc.type.schema;
    if (from2 == null) {
      if (!text)
        return this.deleteSelection();
      return this.replaceSelectionWith(schema.text(text), true);
    } else {
      if (to == null)
        to = from2;
      to = to == null ? from2 : to;
      if (!text)
        return this.deleteRange(from2, to);
      let marks2 = this.storedMarks;
      if (!marks2) {
        let $from = this.doc.resolve(from2);
        marks2 = to == from2 ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
      }
      this.replaceRangeWith(from2, to, schema.text(text, marks2));
      if (!this.selection.empty)
        this.setSelection(Selection.near(this.selection.$to));
      return this;
    }
  }
  /**
  Store a metadata property in this transaction, keyed either by
  name or by plugin.
  */
  setMeta(key, value2) {
    this.meta[typeof key == "string" ? key : key.key] = value2;
    return this;
  }
  /**
  Retrieve a metadata property for a given name or plugin.
  */
  getMeta(key) {
    return this.meta[typeof key == "string" ? key : key.key];
  }
  /**
  Returns true if this transaction doesn't contain any metadata,
  and can thus safely be extended.
  */
  get isGeneric() {
    for (let _ in this.meta)
      return false;
    return true;
  }
  /**
  Indicate that the editor should scroll the selection into view
  when updated to the state produced by this transaction.
  */
  scrollIntoView() {
    this.updated |= UPDATED_SCROLL;
    return this;
  }
  /**
  True when this transaction has had `scrollIntoView` called on it.
  */
  get scrolledIntoView() {
    return (this.updated & UPDATED_SCROLL) > 0;
  }
};
function bind(f, self) {
  return !self || !f ? f : f.bind(self);
}
var FieldDesc = class {
  constructor(name, desc, self) {
    this.name = name;
    this.init = bind(desc.init, self);
    this.apply = bind(desc.apply, self);
  }
};
var baseFields = [
  new FieldDesc("doc", {
    init(config) {
      return config.doc || config.schema.topNodeType.createAndFill();
    },
    apply(tr) {
      return tr.doc;
    }
  }),
  new FieldDesc("selection", {
    init(config, instance) {
      return config.selection || Selection.atStart(instance.doc);
    },
    apply(tr) {
      return tr.selection;
    }
  }),
  new FieldDesc("storedMarks", {
    init(config) {
      return config.storedMarks || null;
    },
    apply(tr, _marks, _old, state) {
      return state.selection.$cursor ? tr.storedMarks : null;
    }
  }),
  new FieldDesc("scrollToSelection", {
    init() {
      return 0;
    },
    apply(tr, prev) {
      return tr.scrolledIntoView ? prev + 1 : prev;
    }
  })
];
var Configuration = class {
  constructor(schema, plugins) {
    this.schema = schema;
    this.plugins = [];
    this.pluginsByKey = /* @__PURE__ */ Object.create(null);
    this.fields = baseFields.slice();
    if (plugins)
      plugins.forEach((plugin) => {
        if (this.pluginsByKey[plugin.key])
          throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
        this.plugins.push(plugin);
        this.pluginsByKey[plugin.key] = plugin;
        if (plugin.spec.state)
          this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
      });
  }
};
var EditorState = class _EditorState {
  /**
  @internal
  */
  constructor(config) {
    this.config = config;
  }
  /**
  The schema of the state's document.
  */
  get schema() {
    return this.config.schema;
  }
  /**
  The plugins that are active in this state.
  */
  get plugins() {
    return this.config.plugins;
  }
  /**
  Apply the given transaction to produce a new state.
  */
  apply(tr) {
    return this.applyTransaction(tr).state;
  }
  /**
  @internal
  */
  filterTransaction(tr, ignore = -1) {
    for (let i = 0; i < this.config.plugins.length; i++)
      if (i != ignore) {
        let plugin = this.config.plugins[i];
        if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))
          return false;
      }
    return true;
  }
  /**
  Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
  returns the precise transactions that were applied (which might
  be influenced by the [transaction
  hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
  plugins) along with the new state.
  */
  applyTransaction(rootTr) {
    if (!this.filterTransaction(rootTr))
      return { state: this, transactions: [] };
    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
    for (; ; ) {
      let haveNew = false;
      for (let i = 0; i < this.config.plugins.length; i++) {
        let plugin = this.config.plugins[i];
        if (plugin.spec.appendTransaction) {
          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;
          let tr = n < trs.length && plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
          if (tr && newState.filterTransaction(tr, i)) {
            tr.setMeta("appendedTransaction", rootTr);
            if (!seen) {
              seen = [];
              for (let j = 0; j < this.config.plugins.length; j++)
                seen.push(j < i ? { state: newState, n: trs.length } : { state: this, n: 0 });
            }
            trs.push(tr);
            newState = newState.applyInner(tr);
            haveNew = true;
          }
          if (seen)
            seen[i] = { state: newState, n: trs.length };
        }
      }
      if (!haveNew)
        return { state: newState, transactions: trs };
    }
  }
  /**
  @internal
  */
  applyInner(tr) {
    if (!tr.before.eq(this.doc))
      throw new RangeError("Applying a mismatched transaction");
    let newInstance = new _EditorState(this.config), fields = this.config.fields;
    for (let i = 0; i < fields.length; i++) {
      let field = fields[i];
      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);
    }
    return newInstance;
  }
  /**
  Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
  */
  get tr() {
    return new Transaction(this);
  }
  /**
  Create a new state.
  */
  static create(config) {
    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
    let instance = new _EditorState($config);
    for (let i = 0; i < $config.fields.length; i++)
      instance[$config.fields[i].name] = $config.fields[i].init(config, instance);
    return instance;
  }
  /**
  Create a new state based on this one, but with an adjusted set
  of active plugins. State fields that exist in both sets of
  plugins are kept unchanged. Those that no longer exist are
  dropped, and those that are new are initialized using their
  [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
  configuration object..
  */
  reconfigure(config) {
    let $config = new Configuration(this.schema, config.plugins);
    let fields = $config.fields, instance = new _EditorState($config);
    for (let i = 0; i < fields.length; i++) {
      let name = fields[i].name;
      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);
    }
    return instance;
  }
  /**
  Serialize this state to JSON. If you want to serialize the state
  of plugins, pass an object mapping property names to use in the
  resulting JSON object to plugin objects. The argument may also be
  a string or number, in which case it is ignored, to support the
  way `JSON.stringify` calls `toString` methods.
  */
  toJSON(pluginFields) {
    let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
    if (this.storedMarks)
      result.storedMarks = this.storedMarks.map((m) => m.toJSON());
    if (pluginFields && typeof pluginFields == "object")
      for (let prop in pluginFields) {
        if (prop == "doc" || prop == "selection")
          throw new RangeError("The JSON fields `doc` and `selection` are reserved");
        let plugin = pluginFields[prop], state = plugin.spec.state;
        if (state && state.toJSON)
          result[prop] = state.toJSON.call(plugin, this[plugin.key]);
      }
    return result;
  }
  /**
  Deserialize a JSON representation of a state. `config` should
  have at least a `schema` field, and should contain array of
  plugins to initialize the state with. `pluginFields` can be used
  to deserialize the state of plugins, by associating plugin
  instances with the property names they use in the JSON object.
  */
  static fromJSON(config, json, pluginFields) {
    if (!json)
      throw new RangeError("Invalid input for EditorState.fromJSON");
    if (!config.schema)
      throw new RangeError("Required config field 'schema' missing");
    let $config = new Configuration(config.schema, config.plugins);
    let instance = new _EditorState($config);
    $config.fields.forEach((field) => {
      if (field.name == "doc") {
        instance.doc = Node2.fromJSON(config.schema, json.doc);
      } else if (field.name == "selection") {
        instance.selection = Selection.fromJSON(instance.doc, json.selection);
      } else if (field.name == "storedMarks") {
        if (json.storedMarks)
          instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
      } else {
        if (pluginFields)
          for (let prop in pluginFields) {
            let plugin = pluginFields[prop], state = plugin.spec.state;
            if (plugin.key == field.name && state && state.fromJSON && Object.prototype.hasOwnProperty.call(json, prop)) {
              instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
              return;
            }
          }
        instance[field.name] = field.init(config, instance);
      }
    });
    return instance;
  }
};
function bindProps(obj, self, target) {
  for (let prop in obj) {
    let val = obj[prop];
    if (val instanceof Function)
      val = val.bind(self);
    else if (prop == "handleDOMEvents")
      val = bindProps(val, self, {});
    target[prop] = val;
  }
  return target;
}
var Plugin = class {
  /**
  Create a plugin.
  */
  constructor(spec) {
    this.spec = spec;
    this.props = {};
    if (spec.props)
      bindProps(spec.props, this, this.props);
    this.key = spec.key ? spec.key.key : createKey("plugin");
  }
  /**
  Extract the plugin's state field from an editor state.
  */
  getState(state) {
    return state[this.key];
  }
};
var keys = /* @__PURE__ */ Object.create(null);
function createKey(name) {
  if (name in keys)
    return name + "$" + ++keys[name];
  keys[name] = 0;
  return name + "$";
}
var PluginKey = class {
  /**
  Create a plugin key.
  */
  constructor(name = "key") {
    this.key = createKey(name);
  }
  /**
  Get the active plugin with this key, if any, from an editor
  state.
  */
  get(state) {
    return state.config.pluginsByKey[this.key];
  }
  /**
  Get the plugin's state from an editor state.
  */
  getState(state) {
    return state[this.key];
  }
};

// node_modules/@progress/kendo-editor-common/dist/es/config/constants.js
var rowTypeAttr = "k-parent-node";
var colgroupAttr = "k-colgroup-data";
var resizableAttr = "k-resizable-node";
var resizableWrap = "k-editor-resize-wrap-element";
var resizeHandle = "k-editor-resize-handle";
var dataResizeDirTable = "data-dir-table-resize";
var dataResizeDirImage = "data-dir-image-resize";

// node_modules/@progress/kendo-editor-common/dist/es/source.js
var blockWrappers = [
  "div",
  "ol",
  "ul",
  "li",
  "table",
  "tbody",
  "thead",
  "tfoot",
  "td",
  "th",
  "p",
  "tr",
  "col",
  "colgroup",
  "article",
  "main",
  "nav",
  "header",
  "footer",
  "aside",
  "section"
];
var removeRowType = function(table, nodeName) {
  var wrapper = (table.ownerDocument || document).createElement(nodeName);
  Array.from(table.rows).filter(function(r) {
    return r.getAttribute(rowTypeAttr) === nodeName;
  }).forEach(function(row) {
    row.removeAttribute(rowTypeAttr);
    wrapper.appendChild(row);
  });
  if (wrapper.children.length) {
    table.appendChild(wrapper);
  }
};
var restoreTables = function(fragment) {
  Array.from(fragment.querySelectorAll("table")).forEach(function(table) {
    removeRowType(table, "thead");
    removeRowType(table, "tbody");
    removeRowType(table, "tfoot");
    var emptyElement = Array.from(table.children).find(function(el) {
      return el.children.length === 0;
    });
    if (emptyElement) {
      emptyElement.remove();
    }
  });
};
var setRowType = function(children, nodeName) {
  var tag = nodeName.toUpperCase();
  children.filter(function(c) {
    return c.nodeName === tag;
  }).forEach(function(rowsWrapper) {
    Array.from(rowsWrapper.children).forEach(function(row) {
      row.setAttribute(rowTypeAttr, nodeName);
      if (rowsWrapper.parentNode) {
        rowsWrapper.parentNode.insertBefore(row, rowsWrapper);
      }
    });
    rowsWrapper.remove();
  });
};
var validateTablesToPmSchema = function(fragment) {
  Array.from(fragment.querySelectorAll("table")).forEach(function(table) {
    var children = Array.from(table.children);
    if (children.some(function(e) {
      return e.nodeName === "THEAD" || e.nodeName === "TFOOT";
    })) {
      setRowType(children, "thead");
      setRowType(children, "tbody");
      setRowType(children, "tfoot");
    }
    var colgroup = children.find(function(c) {
      return c.nodeName === "COLGROUP";
    });
    if (colgroup) {
      table.setAttribute(colgroupAttr, colgroup.outerHTML);
      colgroup.remove();
    }
  });
};
var trimWhitespace = function(html, trimAroundTags) {
  if (trimAroundTags === void 0) {
    trimAroundTags = blockWrappers;
  }
  var tags = trimAroundTags.join("|");
  return html.replace(new RegExp("\\s*(<(?:" + tags + ")(?:\\s[^>]*?)?>)", "g"), "$1").replace(new RegExp("(<\\/(?:" + tags + ")(?:\\s[^>]*?)?>)\\s*", "g"), "$1");
};
var htmlToFragment = function(html) {
  var template = document.createElement("template");
  var fragment;
  if ("content" in template) {
    template.innerHTML = html;
    fragment = template.content;
  } else {
    var parsedDocument = new DOMParser().parseFromString(html, "text/html");
    fragment = document.createDocumentFragment();
    var dom = parsedDocument.body;
    while (dom && dom.firstChild) {
      fragment.appendChild(dom.firstChild);
    }
  }
  return fragment;
};
var fragmentToHtml = function(fragment) {
  return Array.from(fragment.children).reduce(function(acc, cur) {
    return acc + (cur.outerHTML || cur.textContent || "");
  }, "");
};
var pmDocToFragment = function(doc3) {
  var fragment = DOMSerializer.fromSchema(doc3.type.schema).serializeFragment(doc3.content);
  restoreTables(fragment);
  return fragment;
};
var domToPmDoc = function(dom, schema, parseOptions) {
  return DOMParser2.fromSchema(schema).parse(dom, parseOptions);
};
var parseContent = function(content, schema, parseOptions) {
  var dom = htmlToFragment(content);
  validateTablesToPmSchema(dom);
  return domToPmDoc(dom, schema, parseOptions);
};
var getHtml = function(state) {
  var fragment = pmDocToFragment(state.doc);
  var container = document.createElement("div");
  container.appendChild(fragment);
  return container.innerHTML;
};
var setHtml = function(content, command3, parseOptions) {
  if (command3 === void 0) {
    command3 = "setHTML";
  }
  if (parseOptions === void 0) {
    parseOptions = { preserveWhitespace: "full" };
  }
  return function(state, dispatch) {
    return dispatch(state.tr.setSelection(new AllSelection(state.doc)).replaceSelectionWith(parseContent(content, state.schema, parseOptions)).setMeta("commandName", command3));
  };
};

// node_modules/@progress/kendo-editor-common/node_modules/tslib/tslib.es6.mjs
var __assign4 = function() {
  __assign4 = Object.assign || function __assign29(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __spreadArray(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}

// node_modules/@progress/kendo-editor-common/dist/es/utils.js
var changeStylesString = function(styleText, newStyle) {
  var styleToChange = newStyle.style;
  var regExp = newStyle.value;
  var newValue = newStyle.newValue;
  if (!styleText) {
    return { changed: false, style: null };
  }
  var styles = styleText.split(/\s*;\s*/).filter(function(s) {
    return Boolean(s);
  });
  var filtered = styles.filter(function(s) {
    var nameValue = s.split(/\s*:\s*/);
    return !(nameValue[0].toLowerCase() === styleToChange && regExp.test(nameValue[1]));
  });
  if (newValue) {
    filtered.push(styleToChange + ": " + newValue);
  }
  return {
    style: filtered.join("; ") + (filtered.length ? ";" : ""),
    changed: Boolean(newValue) || filtered.length !== styles.length
  };
};
var canInsert = function(state, nodeType) {
  var $from = state.selection.$from;
  for (var d = $from.depth; d >= 0; d--) {
    var index = $from.index(d);
    if ($from.node(d).canReplaceWith(index, index, nodeType)) {
      return true;
    }
  }
  return false;
};
var getTypeName = function(n) {
  return n instanceof Node2 ? n.type.name : n.name;
};
var findNthParentNode = function(predicate, depth) {
  if (depth === void 0) {
    depth = 1;
  }
  return function(selection) {
    var $from = selection.$from;
    for (var i = $from.depth; i > 0; i--) {
      var node = $from.node(i);
      if (predicate(node)) {
        depth = depth - 1;
        if (depth === 0) {
          return { depth: i, node };
        }
      }
    }
  };
};
var findNthParentNodeOfType = function(nodeType, depth) {
  if (depth === void 0) {
    depth = 1;
  }
  return function(selection) {
    return findNthParentNode(function(node) {
      return getTypeName(node) === getTypeName(nodeType);
    }, depth)(selection);
  };
};
var insertNode = function(node, scrollIntoView) {
  return function(state, dispatch) {
    var tr = state.tr.replaceSelectionWith(node);
    if (scrollIntoView) {
      tr.scrollIntoView();
    }
    dispatch(tr);
  };
};
var getSelectionText = function(state) {
  var sel = state.selection;
  if (sel instanceof TextSelection || sel instanceof AllSelection) {
    var fragment = sel.content().content;
    return fragment.textBetween(0, fragment.size);
  }
  return "";
};
var selectedLineTextOnly = function(state) {
  var result = "", hasLeafs = false;
  var selection = state.selection, doc3 = state.doc;
  var $from = selection.$from, $to = selection.$to, from2 = selection.from, to = selection.to;
  if ($from.sameParent($to)) {
    doc3.nodesBetween(from2, to, function(node) {
      hasLeafs = hasLeafs || node.isLeaf && !node.isText;
    });
    if (!hasLeafs) {
      result = getSelectionText(state);
    }
  }
  return result;
};
var indentHtml = function(content) {
  return content.replace(/<\/(p|li|ul|ol|h[1-6]|table|tr|td|th)>/ig, "</$1>\n").replace(/<(ul|ol)([^>]*)><li/ig, "<$1$2>\n<li").replace(/<br \/>/ig, "<br />\n").replace(/\n$/, "");
};
var shallowEqual = function(object1, object2) {
  var keys1 = Object.keys(object1);
  var keys22 = Object.keys(object2);
  return keys1.length === keys22.length && keys1.every(function(k) {
    return object1[k] === object2[k];
  });
};

// node_modules/@progress/kendo-editor-common/dist/es/mark.js
var markApplies = function(doc3, ranges, type) {
  var loop = function(i2) {
    var ref = ranges[i2];
    var $from = ref.$from;
    var $to = ref.$to;
    var can = $from.depth === 0 ? doc3.type.allowsMarkType(type) : false;
    doc3.nodesBetween($from.pos, $to.pos, function(node) {
      if (can) {
        return false;
      }
      can = node.inlineContent && node.type.allowsMarkType(type);
    });
    if (can) {
      return { v: true };
    }
  };
  for (var i = 0; i < ranges.length; i++) {
    var returned = loop(i);
    if (returned) {
      return returned.v;
    }
  }
  return false;
};
var toggleMark = function(markType, attrs, tr) {
  return function(state, dispatch) {
    var _a2 = state.selection, empty2 = _a2.empty, $cursor = _a2.$cursor, ranges = _a2.ranges;
    if (empty2 && !$cursor || !markApplies(state.doc, ranges, markType)) {
      return false;
    }
    if (dispatch) {
      if ($cursor) {
        if (markType.isInSet(state.storedMarks || $cursor.marks())) {
          dispatch(tr.removeStoredMark(markType));
        } else {
          dispatch(tr.addStoredMark(markType.create(attrs)));
        }
      } else {
        var has = false;
        for (var i = 0; !has && i < ranges.length; i++) {
          var _b = ranges[i], $from = _b.$from, $to = _b.$to;
          has = state.doc.rangeHasMark($from.pos, $to.pos, markType);
        }
        for (var i = 0; i < ranges.length; i++) {
          var _c = ranges[i], $from = _c.$from, $to = _c.$to;
          if (has) {
            tr.removeMark($from.pos, $to.pos, markType);
          } else {
            tr.addMark($from.pos, $to.pos, markType.create(attrs));
          }
        }
        dispatch(tr.scrollIntoView());
      }
    }
    return true;
  };
};
var removeMark2 = function(tr, from2, to, mark) {
  if (mark === void 0) {
    mark = null;
  }
  var matched = [], step = 0;
  tr.doc.nodesBetween(from2, to, function(node, pos) {
    if (!node.isInline) {
      return;
    }
    step++;
    var toRemove = null;
    if (mark instanceof MarkType) {
      var found2 = mark.isInSet(node.marks);
      if (found2) {
        toRemove = [found2];
      }
    } else if (mark) {
      if (mark.isInSet(node.marks)) {
        toRemove = [mark];
      }
    } else {
      toRemove = node.marks;
    }
    if (toRemove && toRemove.length) {
      var end = Math.min(pos + node.nodeSize, to);
      for (var i = 0; i < toRemove.length; i++) {
        var style2 = toRemove[i], found$1 = void 0;
        for (var j = 0; j < matched.length; j++) {
          var m = matched[j];
          if (m.step === step - 1 && style2.eq(m.style)) {
            found$1 = m;
          }
        }
        if (found$1) {
          found$1.to = end;
          found$1.step = step;
        } else {
          matched.push({ style: style2, from: Math.max(pos, from2), to: end, step });
        }
      }
    }
  });
  matched.forEach(function(m) {
    return tr.step(new RemoveMarkStep(m.from, m.to, m.style));
  });
  return tr;
};
var removeMarks = function(marks2, state, dispatch, tr) {
  var _a2 = state.selection, $cursor = _a2.$cursor, ranges = _a2.ranges;
  tr = tr || state.tr;
  if ($cursor) {
    marks2.forEach(function(m) {
      if (m.isInSet(state.storedMarks || $cursor.marks())) {
        dispatch(tr.removeStoredMark(m));
      }
    });
  } else {
    var _loop_1 = function(i2) {
      var _b = ranges[i2], $from = _b.$from, $to = _b.$to;
      marks2.forEach(function(m) {
        removeMark2(tr, $from.pos, $to.pos, m);
      });
    };
    for (var i = 0; i < ranges.length; i++) {
      _loop_1(i);
    }
    dispatch(tr.scrollIntoView());
  }
  return true;
};
var cleanMarks = function(tr, _a2) {
  var except = _a2.except;
  var doc3 = tr.doc, selection = tr.selection;
  var schema = doc3.type.schema;
  var empty2 = selection.empty, ranges = selection.ranges;
  var excludedMarkTypes = (except || []).map(function(mt) {
    return mt.name;
  });
  if (!empty2) {
    var marks_1 = Object.keys(schema.marks).map(function(m) {
      return schema.marks[m];
    }).filter(function(mt) {
      return excludedMarkTypes.indexOf(mt.name) === -1;
    });
    ranges.forEach(function(_a3) {
      var $from = _a3.$from, $to = _a3.$to;
      marks_1.forEach(function(mark) {
        return tr.removeMark($from.pos, $to.pos, mark);
      });
    });
  }
};
var hasMark = function(state, options) {
  var marks2 = state.schema.marks;
  var altMarks = (options.altMarks || []).filter(function(m) {
    return marks2[m];
  });
  var altStyle = options.altStyle;
  var _a2 = state.selection, from2 = _a2.from, $from = _a2.$from, to = _a2.to, empty2 = _a2.empty;
  var type = marks2[options.mark];
  var doc3 = state.doc;
  var result = false;
  var currMarks;
  if (empty2) {
    currMarks = state.storedMarks || $from.marks();
    result = type && type.isInSet(currMarks) || altMarks.some(function(m) {
      return marks2[m].isInSet(currMarks);
    });
  } else {
    result = type && doc3.rangeHasMark(from2, to, type) || altMarks.some(function(m) {
      return doc3.rangeHasMark(from2, to, marks2[m]);
    });
  }
  if (!result && altStyle && marks2.style) {
    return selectionMarks(state, marks2.style).some(function(mark) {
      return styleValue(mark, altStyle) !== null;
    });
  }
  return Boolean(result);
};
var styleValue = function(mark, style2) {
  var styleText = mark && mark.attrs.style || "";
  var styles = styleText.split(/\s*;\s*/).filter(function(s) {
    return Boolean(s);
  });
  for (var i = 0; i < styles.length; i++) {
    var nameValue = styles[i].split(/\s*:\s*/);
    if (nameValue[0].toLowerCase() === style2.name && style2.value.test(nameValue[1])) {
      return nameValue[1];
    }
  }
  return null;
};
var selectionMarks = function(state, markType) {
  var _a2 = state.selection, from2 = _a2.from, $from = _a2.$from, to = _a2.to, empty2 = _a2.empty;
  var marks2 = [];
  if (empty2) {
    marks2.push(markType.isInSet(state.storedMarks || $from.marks()));
  } else {
    state.doc.nodesBetween(from2, to, function(node) {
      if (node.isInline) {
        marks2.push(markType.isInSet(node.marks));
      }
    });
  }
  return marks2;
};
var getMark = function(state, markType) {
  var marks2 = selectionMarks(state, markType);
  var filtered = marks2.filter(function(m) {
    return Boolean(m);
  });
  return marks2.length === filtered.length ? marks2[0] : void 0;
};

// node_modules/@progress/kendo-editor-common/dist/es/inline-style.js
var changeStyleFromMark = function(marks2, toChange) {
  var styleMark = marks2.find(function(m) {
    return m.type.name === "style";
  });
  var elementStyle = styleMark && styleMark.attrs.style;
  return changeStylesString(elementStyle, toChange);
};
var changeStyleMark = function(tr, from2, to, attrs, markType) {
  var mark = markType.create({ style: attrs.style });
  var removed = [], added = [], removing = null, adding = null;
  tr.doc.nodesBetween(from2, to, function(node, pos, parent) {
    if (!node.isInline) {
      return;
    }
    var marks2 = node.marks;
    if (!mark.isInSet(marks2) && parent.type.allowsMarkType(mark.type)) {
      var start = Math.max(pos, from2), end = Math.min(pos + node.nodeSize, to);
      var newStyle = changeStyleFromMark(marks2, attrs);
      if (newStyle.changed || attrs.newValue) {
        var style2 = newStyle.changed ? { style: newStyle.style || null } : { style: [attrs.style] + ": " + attrs.newValue + ";" };
        var currentMark = markType.isInSet(marks2) ? marks2.find(function(m) {
          return m.type.name === "style";
        }) : null;
        var newMarkAttrs_1 = currentMark ? __assign4(__assign4({}, currentMark.attrs), style2) : style2;
        var newStyleMark = markType.create(newMarkAttrs_1);
        var newSet = newStyleMark.addToSet(marks2);
        for (var i = 0; i < marks2.length; i++) {
          if (!marks2[i].isInSet(newSet)) {
            if (removing && removing.to === start && removing.mark.eq(marks2[i])) {
              removing.to = end;
            } else {
              removing = new RemoveMarkStep(start, end, marks2[i]);
              removed.push(removing);
            }
          }
        }
        var previousAdded = adding && adding.to === start;
        var sameAdding = previousAdded && newStyleMark.attrs.style === adding.mark.attrs.style;
        if (previousAdded && sameAdding) {
          adding.to = end;
        } else if (Object.keys(newMarkAttrs_1).some(function(attrName) {
          return newMarkAttrs_1[attrName] !== null;
        })) {
          adding = new AddMarkStep(start, end, newStyleMark);
          added.push(adding);
        }
      }
    }
  });
  removed.forEach(function(s) {
    return tr.step(s);
  });
  added.forEach(function(s) {
    return tr.step(s);
  });
  return removed.length + added.length > 0;
};
var getInlineStyles = function(state, style2) {
  var styleMark = state.schema.marks.style;
  var marks2 = styleMark ? selectionMarks(state, styleMark) : [];
  return marks2.map(function(mark) {
    return styleValue(mark, style2);
  }).filter(function(m) {
    return m !== null;
  });
};
var changeStyle = function(markType, attrs) {
  return function(state, dispatch, tr) {
    var _a2 = state.selection, empty2 = _a2.empty, $cursor = _a2.$cursor, ranges = _a2.ranges;
    if (empty2 && !$cursor || !markApplies(state.doc, ranges, markType)) {
      return false;
    }
    var result = false;
    if (dispatch) {
      var transaction = tr || state.tr;
      if ($cursor) {
        var currentMarks = state.storedMarks || $cursor.marks();
        if (markType.isInSet(currentMarks)) {
          var newStyle = changeStyleFromMark(currentMarks, attrs);
          var styleMark = currentMarks.find(function(m) {
            return m.type.name === "style";
          });
          var newAttrs_1 = __assign4(__assign4({}, styleMark ? styleMark.attrs : {}), { style: newStyle.style || null });
          if (shallowEqual(styleMark.attrs, newAttrs_1)) {
            return false;
          }
          dispatch(transaction.removeStoredMark(markType));
          if (Object.keys(newAttrs_1).some(function(attrName) {
            return newAttrs_1[attrName] !== null;
          })) {
            dispatch(transaction.addStoredMark(markType.create(newAttrs_1)));
          }
          result = true;
        }
      } else {
        for (var i = 0; i < ranges.length; i++) {
          var _b = ranges[i], $from = _b.$from, $to = _b.$to;
          result = changeStyleMark(transaction, $from.pos, $to.pos, attrs, markType);
        }
        if (result) {
          transaction.scrollIntoView();
          dispatch(transaction);
        }
      }
    }
    return result;
  };
};
var toggleInlineFormat = function(options, tr, markAttrs) {
  return function(state, dispatch) {
    var marks2 = state.schema.marks;
    var altStyle = options.altStyle, _a2 = options.altMarks, altMarks = _a2 === void 0 ? [] : _a2, mark = options.mark;
    var transaction = tr || state.tr;
    var styleRemoved = false;
    var dispatched = false;
    var markDispatched = function() {
      return dispatched = true;
    };
    if (altStyle && marks2.style) {
      var cmd = changeStyle(marks2.style, { style: altStyle.name, value: altStyle.value });
      styleRemoved = cmd(state, markDispatched, transaction);
    }
    var allMarks = __spreadArray([mark], altMarks).filter(function(m) {
      return marks2[m];
    });
    var toRemove = allMarks.map(function(m) {
      return hasMark(state, { mark: m }) && marks2[m];
    }).filter(function(m) {
      return m;
    });
    if (toRemove.length) {
      removeMarks(toRemove, state, markDispatched, transaction);
    } else {
      if (!styleRemoved) {
        toggleMark(marks2[mark], markAttrs, transaction)(state, markDispatched);
      }
    }
    if (dispatched) {
      dispatch(transaction);
    }
    return dispatched;
  };
};
var applyInlineStyle = function(options, command3) {
  return function(state, dispatch) {
    var marks2 = state.schema.marks;
    var markType = marks2.style;
    var attrs = {
      style: options.style,
      value: /^.+$/,
      newValue: options.value
    };
    var tr = state.tr;
    if (command3) {
      tr.setMeta("commandName", command3);
    }
    tr.setMeta("args", options);
    var _a2 = state.selection, empty2 = _a2.empty, $cursor = _a2.$cursor, ranges = _a2.ranges;
    if (empty2 && !$cursor || !markType || !markApplies(state.doc, ranges, markType)) {
      return false;
    }
    if ($cursor) {
      var marksFromSelection = state.storedMarks || $cursor.marks();
      var currentMark = markType.isInSet(marksFromSelection) ? marksFromSelection.find(function(m) {
        return m.type.name === "style";
      }) : null;
      var newStyles = { style: null };
      if (currentMark && currentMark.attrs.style) {
        var resultStyles = changeStylesString(currentMark.attrs.style, attrs);
        if (resultStyles.changed && resultStyles.style) {
          newStyles.style = resultStyles.style;
        }
      } else if (attrs.newValue) {
        newStyles.style = [attrs.style] + ": " + attrs.newValue + ";";
      }
      var newMarkAttrs_2 = currentMark ? __assign4(__assign4({}, currentMark.attrs), newStyles) : newStyles;
      if (Object.keys(newMarkAttrs_2).some(function(attrName) {
        return newMarkAttrs_2[attrName] !== null;
      })) {
        dispatch(tr.addStoredMark(markType.create(newMarkAttrs_2)));
      } else {
        dispatch(tr.removeStoredMark(markType));
      }
      return true;
    }
    return changeStyle(markType, attrs)(state, dispatch, tr);
  };
};

// node_modules/@progress/kendo-editor-common/dist/es/link.js
var modifyLink = function(options, tr) {
  return function(state, dispatch) {
    var _a2 = state.selection, $cursor = _a2.$cursor, from2 = _a2.from, to = _a2.to;
    var markType = state.schema.marks[options.mark];
    if (!$cursor) {
      tr.doc.nodesBetween(from2, to, function(node, pos) {
        if (node.isInline && markType.isInSet(node.marks)) {
          tr.removeMark(pos, pos + node.nodeSize, markType);
          tr.addMark(pos, pos + node.nodeSize, markType.create(options.attrs));
          dispatch(tr);
        }
      });
    } else {
      var parentNode3 = $cursor.parent;
      var cursorNodeIndex = $cursor.index();
      var mark = parentNode3.child(cursorNodeIndex).marks.find(function(m) {
        return m.type === markType;
      });
      var childCount = parentNode3.childCount;
      var linkStart = $cursor.pos - $cursor.textOffset, linkSize = parentNode3.child(cursorNodeIndex).nodeSize, index = void 0, nodeSize2 = void 0;
      index = cursorNodeIndex - 1;
      while (index >= 0 && mark.isInSet(parentNode3.child(index).marks)) {
        nodeSize2 = parentNode3.child(index).nodeSize;
        linkSize += nodeSize2;
        linkStart -= nodeSize2;
        index -= 1;
      }
      index = cursorNodeIndex + 1;
      while (index < childCount && mark.isInSet(parentNode3.child(index).marks)) {
        linkSize += parentNode3.child(index).nodeSize;
        index += 1;
      }
      tr.removeMark(linkStart, linkStart + linkSize, markType);
      tr.addMark(linkStart, linkStart + linkSize, markType.create(options.attrs));
      dispatch(tr);
    }
  };
};
var removeLink = function(options, tr) {
  return function(state, dispatch) {
    var $cursor = state.selection.$cursor;
    if (!$cursor) {
      toggleInlineFormat(options, tr)(state, dispatch);
    } else {
      var parentNode3 = $cursor.parent;
      var cursorNodeIndex = $cursor.index();
      var toolMark_1 = state.schema.marks[options.mark];
      var mark = parentNode3.child(cursorNodeIndex).marks.find(function(m) {
        return m.type === toolMark_1;
      });
      var childCount = parentNode3.childCount;
      var linkStart = $cursor.pos - $cursor.textOffset, linkSize = parentNode3.child(cursorNodeIndex).nodeSize, index = void 0, nodeSize2 = void 0;
      index = cursorNodeIndex - 1;
      while (index >= 0 && mark.isInSet(parentNode3.child(index).marks)) {
        nodeSize2 = parentNode3.child(index).nodeSize;
        linkSize += nodeSize2;
        linkStart -= nodeSize2;
        index -= 1;
      }
      index = cursorNodeIndex + 1;
      while (index < childCount && mark.isInSet(parentNode3.child(index).marks)) {
        linkSize += parentNode3.child(index).nodeSize;
        index += 1;
      }
      dispatch(removeMark2(tr || state.tr, linkStart, linkStart + linkSize, mark));
    }
  };
};
var getParentMark = function(state, markType) {
  var marks2 = selectionMarks(state, markType);
  return marks2.length === 1 && marks2[0] ? marks2[0] : null;
};
var applyLink = function(_a2, commandName) {
  var mark = _a2.mark, attrs = _a2.attrs;
  if (commandName === void 0) {
    commandName = "link";
  }
  return function(state, dispatch) {
    var marks2 = state.schema.marks;
    var tr = state.tr;
    if (commandName) {
      tr.setMeta("commandName", commandName);
      tr.setMeta("args", attrs);
    }
    var dispatched = false;
    var markDispatched = function() {
      return dispatched = true;
    };
    if (getParentMark(state, marks2[mark])) {
      modifyLink({ mark, attrs }, tr)(state, markDispatched);
    } else {
      var nextState = state;
      if (hasMark(state, { mark })) {
        removeLink({ mark, attrs }, tr)(state, markDispatched);
        nextState = EditorState.create({ doc: tr.doc, selection: tr.selection });
      }
      if (dispatched) {
        toggleMark(marks2[mark], attrs, tr)(nextState, markDispatched);
      } else {
        toggleInlineFormat({ mark }, tr, attrs)(nextState, markDispatched);
      }
    }
    if (dispatched) {
      dispatch(tr);
    }
    return dispatched;
  };
};

// node_modules/@progress/kendo-editor-common/dist/es/blockNode.js
var canChangeType2 = function(stateDoc, pos, type) {
  var $pos = stateDoc.resolve(pos), index = $pos.index();
  return $pos.parent.canReplaceWith(index, index + 1, type);
};
var changeTextBlock = function(tr, node, nodeType, attrs) {
  if (!nodeType.isTextblock) {
    return false;
  }
  var ranges = tr.selection.ranges;
  ranges.forEach(function(range) {
    var mapFrom = tr.steps.length;
    var from2 = range.$from.pos;
    var to = range.$to.pos;
    tr.doc.nodesBetween(from2, to, function(currNode, pos) {
      if (currNode.eq(node) && currNode.isTextblock && !currNode.hasMarkup(nodeType, attrs) && canChangeType2(tr.doc, tr.mapping.slice(mapFrom).map(pos), nodeType)) {
        tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), nodeType);
        var mapping = tr.mapping.slice(mapFrom);
        var startM = mapping.map(pos, 1), endM = mapping.map(pos + currNode.nodeSize, 1);
        var slice2 = new Slice(Fragment.from(nodeType.create(attrs, null, currNode.marks)), 0, 0);
        tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, slice2, 1, true));
        return false;
      }
    });
  });
};
var blockNodes = function(state, options) {
  if (options === void 0) {
    options = { blocksInSelection: false };
  }
  var doc3 = state.doc, selection = state.selection;
  var $from = selection.$from, ranges = selection.ranges;
  var blocksInSelection = options.blocksInSelection;
  var result = [];
  var selNode = selection instanceof NodeSelection ? selection.node : void 0;
  if (selNode) {
    if (selNode.isBlock) {
      result.push(selNode);
      selNode.nodesBetween(0, selNode.content.size, function(node) {
        if (node.isBlock) {
          result.push(node);
        }
      });
    } else if (!blocksInSelection && $from.parent && $from.parent.isBlock) {
      result.push($from.parent);
    }
  } else {
    ranges.forEach(function(range) {
      var from2 = range.$from.pos;
      var to = range.$to.pos;
      doc3.nodesBetween(from2, to, function(node, pos, _parent, _index) {
        if (node.isBlock && (!blocksInSelection || pos >= from2 && pos + node.content.size + 2 <= to)) {
          result.push(node);
        }
      });
    });
  }
  return result;
};
var formatBlockElements = function(value2, commandName) {
  return function(state, dispatch) {
    var blocks = blockNodes(state);
    var nodes3 = state.schema.nodes;
    var tr = state.tr;
    tr.setMeta("commandName", commandName);
    tr.setMeta("args", { value: value2 });
    blocks.forEach(function(node) {
      if (node.type.isTextblock) {
        if (value2 === "p") {
          var _a2 = node.attrs, level = _a2.level, attrs = __rest(_a2, ["level"]);
          changeTextBlock(tr, node, nodes3.paragraph, attrs);
        } else if (/^h[1-6]$/i.test(value2)) {
          var level = parseInt(value2.substr(1), 10);
          changeTextBlock(tr, node, nodes3.heading, __assign4(__assign4({}, node.attrs), { level }));
        } else if (value2 === "blockquote") {
          var _b = node.attrs, level = _b.level, attrs = __rest(_b, ["level"]);
          changeTextBlock(tr, node, nodes3.blockquote, attrs);
        }
      }
    });
    var result = tr.docChanged;
    if (result) {
      dispatch(tr.scrollIntoView());
    }
    return result;
  };
};
var cleanTextBlockFormatting = function(tr, options) {
  if (options === void 0) {
    options = { blocksInSelection: true };
  }
  var doc3 = tr.doc, selection = tr.selection;
  var blocksInSelection = options.blocksInSelection, blockNodeType = options.blockNodeType;
  var nodes3 = blockNodes({ doc: doc3, selection }, { blocksInSelection });
  var textBlocks = nodes3.filter(function(node) {
    return node.isTextblock;
  });
  textBlocks.forEach(function(node) {
    var _a2 = node.attrs || {}, _b = _a2.style, style2 = _b === void 0 ? "" : _b, _c = _a2.class, className = _c === void 0 ? "" : _c, attrs = __rest(_a2, ["style", "class"]);
    var nodeType = blockNodeType || node.type;
    if (style2 || className || nodeType !== node.type) {
      changeTextBlock(tr, node, nodeType, attrs);
    }
  });
};
var getBlockFormats = function(state) {
  var blocks = blockNodes(state);
  var nodes3 = state.schema.nodes;
  var result = [];
  blocks.forEach(function(node) {
    if (node.type === nodes3.paragraph) {
      result.push("p");
    } else if (node.type === nodes3.heading) {
      result.push("h" + node.attrs.level);
    } else if (node.type === nodes3.blockquote && nodes3.blockquote.isTextblock) {
      result.push("blockquote");
    }
  });
  return result;
};
var addStyles = function(node, stylesToApply) {
  var currentStyles = node.attrs.style, changedStyleResult, toChange;
  if (currentStyles) {
    stylesToApply.forEach(function(style2) {
      toChange = { style: style2.name, value: /^.+$/, newValue: style2.value };
      changedStyleResult = changeStylesString(currentStyles, toChange);
      currentStyles = changedStyleResult.changed ? changedStyleResult.style : currentStyles;
    });
  }
  var reducer = function(acc, curr) {
    return (acc && curr.value ? acc + " " : "") + curr.value ? curr.name + ": " + curr.value + ";" : "";
  };
  currentStyles = currentStyles || stylesToApply.reduce(reducer, "");
  return Object.assign({}, node.attrs, { style: currentStyles || null });
};
var hasNode = function(state, nodeType) {
  var _a2 = state.selection, from2 = _a2.from, to = _a2.to;
  var result = false;
  state.doc.nodesBetween(from2, to, function(node) {
    result = result || node.type === nodeType;
    return !result;
  });
  return result;
};

// node_modules/@progress/kendo-editor-common/dist/es/align.js
var alignBlocks = function(actions, commandName) {
  return function(state, dispatch) {
    var blocks = blockNodes(state);
    var tr = state.tr;
    tr.setMeta("commandName", commandName);
    blocks.forEach(function(node) {
      if (node.type.isTextblock) {
        var newAttrs = {};
        var action = actions.find(function(n) {
          return n.node === node.type.name;
        });
        if (action) {
          newAttrs = addStyles(node, action.style);
        }
        changeTextBlock(tr, node, node.type, newAttrs);
      }
    });
    var result = tr.docChanged;
    if (result) {
      dispatch(tr.scrollIntoView());
    }
    return result;
  };
};
var isAligned = function(state, actions) {
  var blocks = blockNodes(state);
  var result = false;
  blocks.forEach(function(node) {
    if (!result && node.type.isTextblock && node.attrs.style) {
      var action = actions.find(function(a) {
        return a.node === node.type.name;
      });
      if (action) {
        result = action.style.every(function(style2) {
          return !!style2.value && new RegExp(style2.name + ":\\s?" + style2.value, "i").test(node.attrs.style);
        });
      }
    }
  });
  return result;
};

// node_modules/@progress/kendo-editor-common/dist/es/cleanFormatting.js
var cleanFormatting = function(options) {
  if (options === void 0) {
    options = { blocksInSelection: true };
  }
  return function(state, dispatch) {
    var tr = state.tr;
    var blocksInSelection = options.blocksInSelection, blockNodeType = options.blockNodeType, exceptMarks = options.exceptMarks;
    var except = (exceptMarks || [state.schema.marks.link]).filter(Boolean);
    cleanMarks(tr, { except });
    cleanTextBlockFormatting(tr, { blocksInSelection, blockNodeType });
    var result = tr.docChanged;
    if (result && dispatch) {
      dispatch(tr);
    }
    return result;
  };
};

// node_modules/prosemirror-schema-list/dist/index.js
var olDOM = ["ol", 0];
var ulDOM = ["ul", 0];
var liDOM = ["li", 0];
var orderedList = {
  attrs: { order: { default: 1 } },
  parseDOM: [{ tag: "ol", getAttrs(dom) {
    return { order: dom.hasAttribute("start") ? +dom.getAttribute("start") : 1 };
  } }],
  toDOM(node) {
    return node.attrs.order == 1 ? olDOM : ["ol", { start: node.attrs.order }, 0];
  }
};
var bulletList = {
  parseDOM: [{ tag: "ul" }],
  toDOM() {
    return ulDOM;
  }
};
var listItem = {
  parseDOM: [{ tag: "li" }],
  toDOM() {
    return liDOM;
  },
  defining: true
};
function add(obj, props) {
  let copy2 = {};
  for (let prop in obj)
    copy2[prop] = obj[prop];
  for (let prop in props)
    copy2[prop] = props[prop];
  return copy2;
}
function addListNodes(nodes3, itemContent, listGroup) {
  return nodes3.append({
    ordered_list: add(orderedList, { content: "list_item+", group: listGroup }),
    bullet_list: add(bulletList, { content: "list_item+", group: listGroup }),
    list_item: add(listItem, { content: itemContent })
  });
}
function wrapInList(listType, attrs = null) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to), doJoin = false, outerRange = range;
    if (!range)
      return false;
    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {
      if ($from.index(range.depth - 1) == 0)
        return false;
      let $insert = state.doc.resolve(range.start - 2);
      outerRange = new NodeRange($insert, $insert, range.depth);
      if (range.endIndex < range.parent.childCount)
        range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);
      doJoin = true;
    }
    let wrap2 = findWrapping(outerRange, listType, attrs, range);
    if (!wrap2)
      return false;
    if (dispatch)
      dispatch(doWrapInList(state.tr, range, wrap2, doJoin, listType).scrollIntoView());
    return true;
  };
}
function doWrapInList(tr, range, wrappers, joinBefore, listType) {
  let content = Fragment.empty;
  for (let i = wrappers.length - 1; i >= 0; i--)
    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
  tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new Slice(content, 0, 0), wrappers.length, true));
  let found2 = 0;
  for (let i = 0; i < wrappers.length; i++)
    if (wrappers[i].type == listType)
      found2 = i + 1;
  let splitDepth = wrappers.length - found2;
  let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;
  for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {
    if (!first && canSplit(tr.doc, splitPos, splitDepth)) {
      tr.split(splitPos, splitDepth);
      splitPos += 2 * splitDepth;
    }
    splitPos += parent.child(i).nodeSize;
  }
  return tr;
}
function splitListItem(itemType) {
  return function(state, dispatch) {
    let { $from, $to, node } = state.selection;
    if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to))
      return false;
    let grandParent = $from.node(-1);
    if (grandParent.type != itemType)
      return false;
    if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {
      if ($from.depth == 3 || $from.node(-3).type != itemType || $from.index(-2) != $from.node(-2).childCount - 1)
        return false;
      if (dispatch) {
        let wrap2 = Fragment.empty;
        let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
        for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d--)
          wrap2 = Fragment.from($from.node(d).copy(wrap2));
        let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;
        wrap2 = wrap2.append(Fragment.from(itemType.createAndFill()));
        let start = $from.before($from.depth - (depthBefore - 1));
        let tr2 = state.tr.replace(start, $from.after(-depthAfter), new Slice(wrap2, 4 - depthBefore, 0));
        let sel = -1;
        tr2.doc.nodesBetween(start, tr2.doc.content.size, (node2, pos) => {
          if (sel > -1)
            return false;
          if (node2.isTextblock && node2.content.size == 0)
            sel = pos + 1;
        });
        if (sel > -1)
          tr2.setSelection(Selection.near(tr2.doc.resolve(sel)));
        dispatch(tr2.scrollIntoView());
      }
      return true;
    }
    let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
    let tr = state.tr.delete($from.pos, $to.pos);
    let types = nextType ? [null, { type: nextType }] : void 0;
    if (!canSplit(tr.doc, $from.pos, 2, types))
      return false;
    if (dispatch)
      dispatch(tr.split($from.pos, 2, types).scrollIntoView());
    return true;
  };
}
function liftListItem(itemType) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to, (node) => node.childCount > 0 && node.firstChild.type == itemType);
    if (!range)
      return false;
    if (!dispatch)
      return true;
    if ($from.node(range.depth - 1).type == itemType)
      return liftToOuterList(state, dispatch, itemType, range);
    else
      return liftOutOfList(state, dispatch, range);
  };
}
function liftToOuterList(state, dispatch, itemType, range) {
  let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);
  if (end < endOfList) {
    tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
    range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);
  }
  const target = liftTarget(range);
  if (target == null)
    return false;
  tr.lift(range, target);
  let after = tr.mapping.map(end, -1) - 1;
  if (canJoin(tr.doc, after))
    tr.join(after);
  dispatch(tr.scrollIntoView());
  return true;
}
function liftOutOfList(state, dispatch, range) {
  let tr = state.tr, list = range.parent;
  for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {
    pos -= list.child(i).nodeSize;
    tr.delete(pos - 1, pos + 1);
  }
  let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;
  if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)
    return false;
  let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;
  let parent = $start.node(-1), indexBefore = $start.index(-1);
  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))
    return false;
  let start = $start.pos, end = start + item.nodeSize;
  tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))).append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
  dispatch(tr.scrollIntoView());
  return true;
}
function sinkListItem(itemType) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to, (node) => node.childCount > 0 && node.firstChild.type == itemType);
    if (!range)
      return false;
    let startIndex = range.startIndex;
    if (startIndex == 0)
      return false;
    let parent = range.parent, nodeBefore = parent.child(startIndex - 1);
    if (nodeBefore.type != itemType)
      return false;
    if (dispatch) {
      let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
      let inner = Fragment.from(nestedBefore ? itemType.create() : null);
      let slice2 = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
      let before = range.start, after = range.end;
      dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice2, 1, true)).scrollIntoView());
    }
    return true;
  };
}

// node_modules/@progress/kendo-editor-common/dist/es/config/list-settings.js
var listsTypes = {
  orderedList: "ordered_list",
  bulletList: "bullet_list",
  listItem: "list_item"
};
var orderedList2 = {
  listType: listsTypes.orderedList,
  types: __assign4({}, listsTypes)
};
var bulletList2 = {
  listType: listsTypes.bulletList,
  types: __assign4({}, listsTypes)
};

// node_modules/@progress/kendo-editor-common/dist/es/config/indent-rules.js
var indentRules = {
  nodes: [{
    node: "paragraph",
    style: "margin-left",
    rtlStyle: "margin-right",
    step: 30,
    unit: "px"
  }, {
    node: "heading",
    style: "margin-left",
    rtlStyle: "margin-right",
    step: 30,
    unit: "px"
  }],
  listsTypes: __assign4({}, listsTypes)
};
var outdentRules = {
  nodes: [{
    node: "paragraph",
    style: "margin-left",
    rtlStyle: "margin-right",
    step: -30,
    unit: "px"
  }, {
    node: "heading",
    style: "margin-left",
    rtlStyle: "margin-right",
    step: -30,
    unit: "px"
  }],
  listsTypes: __assign4({}, listsTypes)
};

// node_modules/prosemirror-commands/dist/index.js
var deleteSelection = (state, dispatch) => {
  if (state.selection.empty)
    return false;
  if (dispatch)
    dispatch(state.tr.deleteSelection().scrollIntoView());
  return true;
};
function atBlockStart(state, view) {
  let { $cursor } = state.selection;
  if (!$cursor || (view ? !view.endOfTextblock("backward", state) : $cursor.parentOffset > 0))
    return null;
  return $cursor;
}
var joinBackward = (state, dispatch, view) => {
  let $cursor = atBlockStart(state, view);
  if (!$cursor)
    return false;
  let $cut = findCutBefore($cursor);
  if (!$cut) {
    let range = $cursor.blockRange(), target = range && liftTarget(range);
    if (target == null)
      return false;
    if (dispatch)
      dispatch(state.tr.lift(range, target).scrollIntoView());
    return true;
  }
  let before = $cut.nodeBefore;
  if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
    return true;
  if ($cursor.parent.content.size == 0 && (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
    if (delStep && delStep.slice.size < delStep.to - delStep.from) {
      if (dispatch) {
        let tr = state.tr.step(delStep);
        tr.setSelection(textblockAt(before, "end") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1) : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
        dispatch(tr.scrollIntoView());
      }
      return true;
    }
  }
  if (before.isAtom && $cut.depth == $cursor.depth - 1) {
    if (dispatch)
      dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
    return true;
  }
  return false;
};
function textblockAt(node, side, only = false) {
  for (let scan = node; scan; scan = side == "start" ? scan.firstChild : scan.lastChild) {
    if (scan.isTextblock)
      return true;
    if (only && scan.childCount != 1)
      return false;
  }
  return false;
}
var selectNodeBackward = (state, dispatch, view) => {
  let { $head, empty: empty2 } = state.selection, $cut = $head;
  if (!empty2)
    return false;
  if ($head.parent.isTextblock) {
    if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
      return false;
    $cut = findCutBefore($head);
  }
  let node = $cut && $cut.nodeBefore;
  if (!node || !NodeSelection.isSelectable(node))
    return false;
  if (dispatch)
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());
  return true;
};
function findCutBefore($pos) {
  if (!$pos.parent.type.spec.isolating)
    for (let i = $pos.depth - 1; i >= 0; i--) {
      if ($pos.index(i) > 0)
        return $pos.doc.resolve($pos.before(i + 1));
      if ($pos.node(i).type.spec.isolating)
        break;
    }
  return null;
}
function atBlockEnd(state, view) {
  let { $cursor } = state.selection;
  if (!$cursor || (view ? !view.endOfTextblock("forward", state) : $cursor.parentOffset < $cursor.parent.content.size))
    return null;
  return $cursor;
}
var joinForward = (state, dispatch, view) => {
  let $cursor = atBlockEnd(state, view);
  if (!$cursor)
    return false;
  let $cut = findCutAfter($cursor);
  if (!$cut)
    return false;
  let after = $cut.nodeAfter;
  if (deleteBarrier(state, $cut, dispatch))
    return true;
  if ($cursor.parent.content.size == 0 && (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
    if (delStep && delStep.slice.size < delStep.to - delStep.from) {
      if (dispatch) {
        let tr = state.tr.step(delStep);
        tr.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1) : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
        dispatch(tr.scrollIntoView());
      }
      return true;
    }
  }
  if (after.isAtom && $cut.depth == $cursor.depth - 1) {
    if (dispatch)
      dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
    return true;
  }
  return false;
};
var selectNodeForward = (state, dispatch, view) => {
  let { $head, empty: empty2 } = state.selection, $cut = $head;
  if (!empty2)
    return false;
  if ($head.parent.isTextblock) {
    if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
      return false;
    $cut = findCutAfter($head);
  }
  let node = $cut && $cut.nodeAfter;
  if (!node || !NodeSelection.isSelectable(node))
    return false;
  if (dispatch)
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
  return true;
};
function findCutAfter($pos) {
  if (!$pos.parent.type.spec.isolating)
    for (let i = $pos.depth - 1; i >= 0; i--) {
      let parent = $pos.node(i);
      if ($pos.index(i) + 1 < parent.childCount)
        return $pos.doc.resolve($pos.after(i + 1));
      if (parent.type.spec.isolating)
        break;
    }
  return null;
}
var joinUp = (state, dispatch) => {
  let sel = state.selection, nodeSel = sel instanceof NodeSelection, point;
  if (nodeSel) {
    if (sel.node.isTextblock || !canJoin(state.doc, sel.from))
      return false;
    point = sel.from;
  } else {
    point = joinPoint(state.doc, sel.from, -1);
    if (point == null)
      return false;
  }
  if (dispatch) {
    let tr = state.tr.join(point);
    if (nodeSel)
      tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));
    dispatch(tr.scrollIntoView());
  }
  return true;
};
var joinDown = (state, dispatch) => {
  let sel = state.selection, point;
  if (sel instanceof NodeSelection) {
    if (sel.node.isTextblock || !canJoin(state.doc, sel.to))
      return false;
    point = sel.to;
  } else {
    point = joinPoint(state.doc, sel.to, 1);
    if (point == null)
      return false;
  }
  if (dispatch)
    dispatch(state.tr.join(point).scrollIntoView());
  return true;
};
var lift2 = (state, dispatch) => {
  let { $from, $to } = state.selection;
  let range = $from.blockRange($to), target = range && liftTarget(range);
  if (target == null)
    return false;
  if (dispatch)
    dispatch(state.tr.lift(range, target).scrollIntoView());
  return true;
};
var newlineInCode = (state, dispatch) => {
  let { $head, $anchor } = state.selection;
  if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
    return false;
  if (dispatch)
    dispatch(state.tr.insertText("\n").scrollIntoView());
  return true;
};
function defaultBlockAt(match) {
  for (let i = 0; i < match.edgeCount; i++) {
    let { type } = match.edge(i);
    if (type.isTextblock && !type.hasRequiredAttrs())
      return type;
  }
  return null;
}
var exitCode = (state, dispatch) => {
  let { $head, $anchor } = state.selection;
  if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
    return false;
  let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));
  if (!type || !above.canReplaceWith(after, after, type))
    return false;
  if (dispatch) {
    let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
    tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));
    dispatch(tr.scrollIntoView());
  }
  return true;
};
var createParagraphNear = (state, dispatch) => {
  let sel = state.selection, { $from, $to } = sel;
  if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
    return false;
  let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
  if (!type || !type.isTextblock)
    return false;
  if (dispatch) {
    let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
    let tr = state.tr.insert(side, type.createAndFill());
    tr.setSelection(TextSelection.create(tr.doc, side + 1));
    dispatch(tr.scrollIntoView());
  }
  return true;
};
var liftEmptyBlock = (state, dispatch) => {
  let { $cursor } = state.selection;
  if (!$cursor || $cursor.parent.content.size)
    return false;
  if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
    let before = $cursor.before();
    if (canSplit(state.doc, before)) {
      if (dispatch)
        dispatch(state.tr.split(before).scrollIntoView());
      return true;
    }
  }
  let range = $cursor.blockRange(), target = range && liftTarget(range);
  if (target == null)
    return false;
  if (dispatch)
    dispatch(state.tr.lift(range, target).scrollIntoView());
  return true;
};
function splitBlockAs(splitNode) {
  return (state, dispatch) => {
    let { $from, $to } = state.selection;
    if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {
      if (!$from.parentOffset || !canSplit(state.doc, $from.pos))
        return false;
      if (dispatch)
        dispatch(state.tr.split($from.pos).scrollIntoView());
      return true;
    }
    if (!$from.parent.isBlock)
      return false;
    if (dispatch) {
      let atEnd = $to.parentOffset == $to.parent.content.size;
      let tr = state.tr;
      if (state.selection instanceof TextSelection || state.selection instanceof AllSelection)
        tr.deleteSelection();
      let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
      let splitType = splitNode && splitNode($to.parent, atEnd);
      let types = splitType ? [splitType] : atEnd && deflt ? [{ type: deflt }] : void 0;
      let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
      if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : void 0)) {
        if (deflt)
          types = [{ type: deflt }];
        can = true;
      }
      if (can) {
        tr.split(tr.mapping.map($from.pos), 1, types);
        if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
          let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);
          if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))
            tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
        }
      }
      dispatch(tr.scrollIntoView());
    }
    return true;
  };
}
var splitBlock = splitBlockAs();
var splitBlockKeepMarks = (state, dispatch) => {
  return splitBlock(state, dispatch && ((tr) => {
    let marks2 = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();
    if (marks2)
      tr.ensureMarks(marks2);
    dispatch(tr);
  }));
};
var selectParentNode = (state, dispatch) => {
  let { $from, to } = state.selection, pos;
  let same = $from.sharedDepth(to);
  if (same == 0)
    return false;
  pos = $from.before(same);
  if (dispatch)
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
  return true;
};
var selectAll = (state, dispatch) => {
  if (dispatch)
    dispatch(state.tr.setSelection(new AllSelection(state.doc)));
  return true;
};
function joinMaybeClear(state, $pos, dispatch) {
  let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();
  if (!before || !after || !before.type.compatibleContent(after.type))
    return false;
  if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
    if (dispatch)
      dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
    return true;
  }
  if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
    return false;
  if (dispatch)
    dispatch(state.tr.clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount)).join($pos.pos).scrollIntoView());
  return true;
}
function deleteBarrier(state, $cut, dispatch) {
  let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
  if (before.type.spec.isolating || after.type.spec.isolating)
    return false;
  if (joinMaybeClear(state, $cut, dispatch))
    return true;
  let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
  if (canDelAfter && (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) && match.matchType(conn[0] || after.type).validEnd) {
    if (dispatch) {
      let end = $cut.pos + after.nodeSize, wrap2 = Fragment.empty;
      for (let i = conn.length - 1; i >= 0; i--)
        wrap2 = Fragment.from(conn[i].create(null, wrap2));
      wrap2 = Fragment.from(before.copy(wrap2));
      let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap2, 1, 0), conn.length, true));
      let joinAt = end + 2 * conn.length;
      if (canJoin(tr.doc, joinAt))
        tr.join(joinAt);
      dispatch(tr.scrollIntoView());
    }
    return true;
  }
  let selAfter = Selection.findFrom($cut, 1);
  let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);
  if (target != null && target >= $cut.depth) {
    if (dispatch)
      dispatch(state.tr.lift(range, target).scrollIntoView());
    return true;
  }
  if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
    let at = before, wrap2 = [];
    for (; ; ) {
      wrap2.push(at);
      if (at.isTextblock)
        break;
      at = at.lastChild;
    }
    let afterText = after, afterDepth = 1;
    for (; !afterText.isTextblock; afterText = afterText.firstChild)
      afterDepth++;
    if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
      if (dispatch) {
        let end = Fragment.empty;
        for (let i = wrap2.length - 1; i >= 0; i--)
          end = Fragment.from(wrap2[i].copy(end));
        let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap2.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap2.length, 0), 0, true));
        dispatch(tr.scrollIntoView());
      }
      return true;
    }
  }
  return false;
}
function selectTextblockSide(side) {
  return function(state, dispatch) {
    let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
    let depth = $pos.depth;
    while ($pos.node(depth).isInline) {
      if (!depth)
        return false;
      depth--;
    }
    if (!$pos.node(depth).isTextblock)
      return false;
    if (dispatch)
      dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));
    return true;
  };
}
var selectTextblockStart = selectTextblockSide(-1);
var selectTextblockEnd = selectTextblockSide(1);
function wrapIn(nodeType, attrs = null) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);
    if (!wrapping)
      return false;
    if (dispatch)
      dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
    return true;
  };
}
function setBlockType2(nodeType, attrs = null) {
  return function(state, dispatch) {
    let applicable = false;
    for (let i = 0; i < state.selection.ranges.length && !applicable; i++) {
      let { $from: { pos: from2 }, $to: { pos: to } } = state.selection.ranges[i];
      state.doc.nodesBetween(from2, to, (node, pos) => {
        if (applicable)
          return false;
        if (!node.isTextblock || node.hasMarkup(nodeType, attrs))
          return;
        if (node.type == nodeType) {
          applicable = true;
        } else {
          let $pos = state.doc.resolve(pos), index = $pos.index();
          applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
        }
      });
    }
    if (!applicable)
      return false;
    if (dispatch) {
      let tr = state.tr;
      for (let i = 0; i < state.selection.ranges.length; i++) {
        let { $from: { pos: from2 }, $to: { pos: to } } = state.selection.ranges[i];
        tr.setBlockType(from2, to, nodeType, attrs);
      }
      dispatch(tr.scrollIntoView());
    }
    return true;
  };
}
function markApplies2(doc3, ranges, type) {
  for (let i = 0; i < ranges.length; i++) {
    let { $from, $to } = ranges[i];
    let can = $from.depth == 0 ? doc3.inlineContent && doc3.type.allowsMarkType(type) : false;
    doc3.nodesBetween($from.pos, $to.pos, (node) => {
      if (can)
        return false;
      can = node.inlineContent && node.type.allowsMarkType(type);
    });
    if (can)
      return true;
  }
  return false;
}
function toggleMark2(markType, attrs = null) {
  return function(state, dispatch) {
    let { empty: empty2, $cursor, ranges } = state.selection;
    if (empty2 && !$cursor || !markApplies2(state.doc, ranges, markType))
      return false;
    if (dispatch) {
      if ($cursor) {
        if (markType.isInSet(state.storedMarks || $cursor.marks()))
          dispatch(state.tr.removeStoredMark(markType));
        else
          dispatch(state.tr.addStoredMark(markType.create(attrs)));
      } else {
        let has = false, tr = state.tr;
        for (let i = 0; !has && i < ranges.length; i++) {
          let { $from, $to } = ranges[i];
          has = state.doc.rangeHasMark($from.pos, $to.pos, markType);
        }
        for (let i = 0; i < ranges.length; i++) {
          let { $from, $to } = ranges[i];
          if (has) {
            tr.removeMark($from.pos, $to.pos, markType);
          } else {
            let from2 = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;
            let spaceStart = start && start.isText ? /^\s*/.exec(start.text)[0].length : 0;
            let spaceEnd = end && end.isText ? /\s*$/.exec(end.text)[0].length : 0;
            if (from2 + spaceStart < to) {
              from2 += spaceStart;
              to -= spaceEnd;
            }
            tr.addMark(from2, to, markType.create(attrs));
          }
        }
        dispatch(tr.scrollIntoView());
      }
    }
    return true;
  };
}
function wrapDispatchForJoin(dispatch, isJoinable) {
  return (tr) => {
    if (!tr.isGeneric)
      return dispatch(tr);
    let ranges = [];
    for (let i = 0; i < tr.mapping.maps.length; i++) {
      let map2 = tr.mapping.maps[i];
      for (let j = 0; j < ranges.length; j++)
        ranges[j] = map2.map(ranges[j]);
      map2.forEach((_s, _e, from2, to) => ranges.push(from2, to));
    }
    let joinable3 = [];
    for (let i = 0; i < ranges.length; i += 2) {
      let from2 = ranges[i], to = ranges[i + 1];
      let $from = tr.doc.resolve(from2), depth = $from.sharedDepth(to), parent = $from.node(depth);
      for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {
        let after = parent.maybeChild(index);
        if (!after)
          break;
        if (index && joinable3.indexOf(pos) == -1) {
          let before = parent.child(index - 1);
          if (before.type == after.type && isJoinable(before, after))
            joinable3.push(pos);
        }
        pos += after.nodeSize;
      }
    }
    joinable3.sort((a, b) => a - b);
    for (let i = joinable3.length - 1; i >= 0; i--) {
      if (canJoin(tr.doc, joinable3[i]))
        tr.join(joinable3[i]);
    }
    dispatch(tr);
  };
}
function autoJoin(command3, isJoinable) {
  let canJoin2 = Array.isArray(isJoinable) ? (node) => isJoinable.indexOf(node.type.name) > -1 : isJoinable;
  return (state, dispatch, view) => command3(state, dispatch && wrapDispatchForJoin(dispatch, canJoin2), view);
}
function chainCommands(...commands) {
  return function(state, dispatch, view) {
    for (let i = 0; i < commands.length; i++)
      if (commands[i](state, dispatch, view))
        return true;
    return false;
  };
}
var backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
var del = chainCommands(deleteSelection, joinForward, selectNodeForward);
var pcBaseKeymap = {
  "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
  "Mod-Enter": exitCode,
  "Backspace": backspace,
  "Mod-Backspace": backspace,
  "Shift-Backspace": backspace,
  "Delete": del,
  "Mod-Delete": del,
  "Mod-a": selectAll
};
var macBaseKeymap = {
  "Ctrl-h": pcBaseKeymap["Backspace"],
  "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
  "Ctrl-d": pcBaseKeymap["Delete"],
  "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
  "Alt-Delete": pcBaseKeymap["Mod-Delete"],
  "Alt-d": pcBaseKeymap["Mod-Delete"],
  "Ctrl-a": selectTextblockStart,
  "Ctrl-e": selectTextblockEnd
};
for (let key in pcBaseKeymap)
  macBaseKeymap[key] = pcBaseKeymap[key];
var mac = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;
var baseKeymap = mac ? macBaseKeymap : pcBaseKeymap;

// node_modules/@progress/kendo-editor-common/dist/es/indent.js
var indentBlocks = function(actions, command3, dir) {
  return function(state, dispatch) {
    var blocks = blockNodes(state);
    var tr = state.tr;
    tr.setMeta("commandName", command3);
    blocks.forEach(function(node) {
      if (node.type.isTextblock) {
        var newAttrs = void 0;
        var action = actions.find(function(a) {
          return a.node === node.type.name;
        });
        if (action) {
          var style2 = dir === "rtl" ? action.rtlStyle : action.style;
          var newStyle = {
            name: style2,
            value: action.step > 0 ? "" + action.step + action.unit : ""
          };
          if (node.attrs.style) {
            var re = new RegExp(style2 + ":\\s?(\\d+)" + action.unit, "i");
            var match = node.attrs.style.match(re);
            if (match) {
              var newMargin = parseFloat(match[1]) + action.step;
              newMargin = newMargin <= 0 ? "" : newMargin;
              newStyle.value = "" + newMargin + (newMargin ? action.unit : "");
            }
          }
          newAttrs = addStyles(node, [newStyle]);
        }
        if (newAttrs) {
          changeTextBlock(tr, node, node.type, newAttrs);
        }
      }
    });
    var result = tr.docChanged;
    if (result) {
      dispatch(tr.scrollIntoView());
    }
    return result;
  };
};
var isIndented = function(state, rules, dir) {
  var blocks = blockNodes(state);
  var result = false;
  blocks.forEach(function(node) {
    if (!result && node.type.isTextblock && node.attrs.style) {
      var action = rules.find(function(a) {
        return a.node === node.type.name;
      });
      if (action) {
        var style2 = dir === "rtl" ? action.rtlStyle : action.style;
        var reIndent = new RegExp(style2 + ":\\s?\\d+" + action.unit, "i");
        result = reIndent.test(node.attrs.style);
      }
    }
  });
  return result;
};
var canIndentAsListItem = function(state, nodeType) {
  return sinkListItem(nodeType)(state);
};
var canOutdentAsListItem = function(state, rules) {
  var listItem2 = state.schema.nodes[rules.listsTypes.listItem];
  var orderedList4 = state.schema.nodes[rules.listsTypes.orderedList];
  var bulletList4 = state.schema.nodes[rules.listsTypes.bulletList];
  var isNestedInOL = !!findNthParentNodeOfType(orderedList4, 2)(state.selection);
  var isNestedInUL = !!findNthParentNodeOfType(bulletList4, 2)(state.selection);
  return (isNestedInOL || isNestedInUL) && liftListItem(listItem2)(state);
};

// node_modules/@progress/kendo-editor-common/dist/es/lists.js
var rootListDepth = function(pos, nodes3) {
  var bulletList4 = nodes3.bulletList, orderedList4 = nodes3.orderedList, listItem2 = nodes3.listItem;
  var depth;
  for (var i = pos.depth - 1; i > 0; i--) {
    var node = pos.node(i);
    if (node.type === bulletList4 || node.type === orderedList4) {
      depth = i;
    }
    if (node.type !== bulletList4 && node.type !== orderedList4 && node.type !== listItem2) {
      break;
    }
  }
  return depth;
};
var getListLiftTarget = function(schema, resPos, options) {
  var target = resPos.depth;
  var bulletList4 = schema.nodes[options.bulletList];
  var orderedList4 = schema.nodes[options.orderedList];
  var listItem2 = schema.nodes[options.listItem];
  for (var i = resPos.depth; i > 0; i--) {
    var node = resPos.node(i);
    if (node.type === bulletList4 || node.type === orderedList4) {
      target = i;
    }
    if (node.type !== bulletList4 && node.type !== orderedList4 && node.type !== listItem2) {
      break;
    }
  }
  return target - 1;
};
function liftSelectionList(state, tr, options) {
  var _a2 = state.selection, from2 = _a2.from, to = _a2.to;
  var _b = state.schema.nodes, paragraph = _b.paragraph, heading = _b.heading;
  var listCol = [];
  tr.doc.nodesBetween(from2, to, function(node, pos) {
    if (node.type === paragraph || node.type === heading) {
      listCol.push({ node, pos });
    }
  });
  for (var i = listCol.length - 1; i >= 0; i--) {
    var block = listCol[i];
    var start = tr.doc.resolve(tr.mapping.map(block.pos));
    if (start.depth > 0) {
      var end = void 0;
      if (block.node.textContent && block.node.textContent.length > 0) {
        end = tr.doc.resolve(tr.mapping.map(block.pos + block.node.textContent.length));
      } else {
        end = tr.doc.resolve(tr.mapping.map(block.pos + 1));
      }
      var range = start.blockRange(end);
      if (range) {
        tr.lift(range, getListLiftTarget(state.schema, start, options));
      }
    }
  }
  return tr;
}
function toggleListCommand(options) {
  return function(state, dispatch, view) {
    if (!view) {
      return false;
    }
    state = view.state;
    var listNode = state.schema.nodes[options.listType];
    var _a2 = state.selection, $from = _a2.$from, $to = _a2.$to;
    var parent = $from.node(-2);
    var grandgrandParent = $from.node(-3);
    var isRangeOfSingleType = isRangeOfType(state.doc, $from, $to, listNode);
    if ((parent && parent.type === listNode || grandgrandParent && grandgrandParent.type === listNode) && isRangeOfSingleType) {
      return liftListItems(options)(state, dispatch);
    } else {
      if (!isRangeOfSingleType) {
        liftListItems(options)(state, dispatch);
        state = view.state;
      }
      return wrapInList2(listNode, options.listAttrs)(state, dispatch);
    }
  };
}
function liftListItem2(state, selection, tr, nodeType) {
  var listItemNodeType = nodeType || state.schema.nodes.listItem;
  var $from = selection.$from, $to = selection.$to;
  var range = $from.blockRange($to, function(node) {
    return node.childCount && node.firstChild.type === listItemNodeType;
  });
  if (!range || range.depth < 2 || $from.node(range.depth - 1).type !== listItemNodeType) {
    return tr;
  }
  var end = range.end;
  var endOfList = $to.end(range.depth);
  if (end < endOfList) {
    tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(listItemNodeType.create(void 0, range.parent.copy())), 1, 0), 1, true));
    range = new NodeRange(tr.doc.resolve($from.pos), tr.doc.resolve(endOfList), range.depth);
  }
  return tr.lift(range, liftTarget(range)).scrollIntoView();
}
function liftFollowingList(state, from2, to, rootListDepthNum, tr, listItem2) {
  if (!listItem2) {
    listItem2 = state.schema.nodes.listItem;
  }
  var lifted = false;
  tr.doc.nodesBetween(from2, to, function(node, pos) {
    if (!lifted && node.type === listItem2 && pos > from2) {
      lifted = true;
      var listDepth = rootListDepthNum + 3;
      while (listDepth > rootListDepthNum + 2) {
        var start = tr.doc.resolve(tr.mapping.map(pos));
        listDepth = start.depth;
        var end = tr.doc.resolve(tr.mapping.map(pos + node.textContent.length));
        var sel = new TextSelection(start, end);
        tr = liftListItem2(state, sel, tr, listItem2);
      }
    }
  });
  return tr;
}
function isRangeOfType(doc3, $from, $to, nodeType) {
  return getAncestorNodesBetween(doc3, $from, $to).filter(function(node) {
    return node.type !== nodeType;
  }).length === 0;
}
function getAncestorNodesBetween(doc3, $from, $to) {
  var nodes3 = Array();
  var maxDepth = findAncestorPosition(doc3, $from).depth;
  var current = doc3.resolve($from.start(maxDepth));
  while (current.pos <= $to.start($to.depth)) {
    var depth = Math.min(current.depth, maxDepth);
    var node = current.node(depth);
    if (node) {
      nodes3.push(node);
    }
    if (depth === 0) {
      break;
    }
    var next = doc3.resolve(current.after(depth));
    if (next.start(depth) >= doc3.nodeSize - 2) {
      break;
    }
    if (next.depth !== current.depth) {
      next = doc3.resolve(next.pos + 2);
    }
    if (next.depth) {
      current = doc3.resolve(next.start(next.depth));
    } else {
      current = doc3.resolve(next.end(next.depth));
    }
  }
  return nodes3;
}
function findAncestorPosition(doc3, pos) {
  var nestableBlocks = ["blockquote", "bulletList", "orderedList"];
  if (pos.depth === 1) {
    return pos;
  }
  var node = pos.node(pos.depth);
  var newPos = pos;
  while (pos.depth >= 1) {
    pos = doc3.resolve(pos.before(pos.depth));
    node = pos.node(pos.depth);
    if (node && nestableBlocks.indexOf(node.type.name) !== -1) {
      newPos = pos;
    }
  }
  return newPos;
}
function liftListItems(options) {
  return function(state, dispatch) {
    var tr = state.tr;
    var _a2 = state.selection, $from = _a2.$from, $to = _a2.$to;
    tr.doc.nodesBetween($from.pos, $to.pos, function(node, pos) {
      if (node.isTextblock || node.type.name === "blockquote" || node.type.name === "div") {
        var sel = new NodeSelection(tr.doc.resolve(tr.mapping.map(pos)));
        var range = sel.$from.blockRange(sel.$to);
        if (!range || sel.$from.parent.type !== state.schema.nodes[options.listItem]) {
          return false;
        }
        var target = range && liftTarget(range);
        if (target === void 0 || target === null) {
          return false;
        }
        tr.lift(range, target);
      }
    });
    if (dispatch) {
      dispatch(tr);
    }
    return true;
  };
}
function wrapInList2(nodeType, attrs) {
  if (attrs === void 0) {
    attrs = {};
  }
  return autoJoin(wrapInList(nodeType, attrs), function(before, after) {
    return before.type === after.type && before.type === nodeType;
  });
}
var reListStyle = /list\-style\-type:\s?([\w-]+)/;
var listStyle = function(attrs) {
  var styleAttr = attrs.style || "";
  var execArray = reListStyle.exec(styleAttr);
  return execArray && execArray[1] || "";
};
var toggleList = function(state, dispatch, view, options, command3) {
  var listType = options.listType, _a2 = options.listAttrs, listAttrs = _a2 === void 0 ? { style: null } : _a2;
  var selection = state.selection;
  var fromNode = selection.$from.node(selection.$from.depth - 2);
  var endNode = selection.$to.node(selection.$to.depth - 2);
  if (!fromNode || fromNode.type.name !== listType || listStyle(fromNode.attrs) !== listStyle(listAttrs) || (!endNode || endNode.type.name !== listType || listStyle(endNode.attrs) !== listStyle(listAttrs))) {
    return toggleListCommand(options)(state, dispatch, view);
  } else {
    var nodes3 = view.state.schema.nodes;
    var listNodes = {
      bulletList: nodes3[options.bulletList],
      orderedList: nodes3[options.orderedList],
      listItem: nodes3[options.listItem]
    };
    var depth = rootListDepth(selection.$to, listNodes);
    var tr = liftFollowingList(state, selection.$to.pos, selection.$to.end(depth), depth, view.state.tr, listNodes.listItem);
    tr = liftSelectionList(state, tr, options);
    tr.setMeta("commandName", command3);
    dispatch(tr);
    return true;
  }
};

// node_modules/@progress/kendo-editor-common/dist/es/config/align-rules.js
var style = function(name, value2) {
  return { name, value: value2 };
};
var alignLeftRules = [
  { node: "paragraph", style: [style("text-align", "left")] },
  { node: "heading", style: [style("text-align", "left")] }
];
var alignRightRules = [
  { node: "paragraph", style: [style("text-align", "right")] },
  { node: "heading", style: [style("text-align", "right")] }
];
var alignCenterRules = [
  { node: "paragraph", style: [style("text-align", "center")] },
  { node: "heading", style: [style("text-align", "center")] }
];
var alignJustifyRules = [
  { node: "paragraph", style: [style("text-align", "justify")] },
  { node: "heading", style: [style("text-align", "justify")] }
];
var alignRemoveRules = [
  { node: "paragraph", style: [style("text-align", "")] },
  { node: "heading", style: [style("text-align", "")] }
];

// node_modules/prosemirror-view/dist/index.js
var domIndex = function(node) {
  for (var index = 0; ; index++) {
    node = node.previousSibling;
    if (!node)
      return index;
  }
};
var parentNode = function(node) {
  let parent = node.assignedSlot || node.parentNode;
  return parent && parent.nodeType == 11 ? parent.host : parent;
};
var reusedRange = null;
var textRange = function(node, from2, to) {
  let range = reusedRange || (reusedRange = document.createRange());
  range.setEnd(node, to == null ? node.nodeValue.length : to);
  range.setStart(node, from2 || 0);
  return range;
};
var isEquivalentPosition = function(node, off, targetNode, targetOff) {
  return targetNode && (scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1));
};
var atomElements = /^(img|br|input|textarea|hr)$/i;
function scanFor(node, off, targetNode, targetOff, dir) {
  for (; ; ) {
    if (node == targetNode && off == targetOff)
      return true;
    if (off == (dir < 0 ? 0 : nodeSize(node))) {
      let parent = node.parentNode;
      if (!parent || parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) || node.contentEditable == "false")
        return false;
      off = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node.contentEditable == "false")
        return false;
      off = dir < 0 ? nodeSize(node) : 0;
    } else {
      return false;
    }
  }
}
function nodeSize(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function isOnEdge(node, offset, parent) {
  for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd; ) {
    if (node == parent)
      return true;
    let index = domIndex(node);
    node = node.parentNode;
    if (!node)
      return false;
    atStart = atStart && index == 0;
    atEnd = atEnd && index == nodeSize(node);
  }
}
function hasBlockDesc(dom) {
  let desc;
  for (let cur = dom; cur; cur = cur.parentNode)
    if (desc = cur.pmViewDesc)
      break;
  return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
}
var selectionCollapsed = function(domSel) {
  return domSel.focusNode && isEquivalentPosition(domSel.focusNode, domSel.focusOffset, domSel.anchorNode, domSel.anchorOffset);
};
function keyEvent(keyCode, key) {
  let event = document.createEvent("Event");
  event.initEvent("keydown", true, true);
  event.keyCode = keyCode;
  event.key = event.code = key;
  return event;
}
function deepActiveElement(doc3) {
  let elt = doc3.activeElement;
  while (elt && elt.shadowRoot)
    elt = elt.shadowRoot.activeElement;
  return elt;
}
var nav = typeof navigator != "undefined" ? navigator : null;
var doc2 = typeof document != "undefined" ? document : null;
var agent = nav && nav.userAgent || "";
var ie_edge = /Edge\/(\d+)/.exec(agent);
var ie_upto10 = /MSIE \d/.exec(agent);
var ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
var ie = !!(ie_upto10 || ie_11up || ie_edge);
var ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
var gecko = !ie && /gecko\/(\d+)/i.test(agent);
gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
var _chrome = !ie && /Chrome\/(\d+)/.exec(agent);
var chrome = !!_chrome;
var chrome_version = _chrome ? +_chrome[1] : 0;
var safari = !ie && !!nav && /Apple Computer/.test(nav.vendor);
var ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
var mac2 = ios || (nav ? /Mac/.test(nav.platform) : false);
var android = /Android \d/.test(agent);
var webkit = !!doc2 && "webkitFontSmoothing" in doc2.documentElement.style;
var webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
function windowRect(doc3) {
  return {
    left: 0,
    right: doc3.documentElement.clientWidth,
    top: 0,
    bottom: doc3.documentElement.clientHeight
  };
}
function getSide(value2, side) {
  return typeof value2 == "number" ? value2 : value2[side];
}
function clientRect(node) {
  let rect = node.getBoundingClientRect();
  let scaleX = rect.width / node.offsetWidth || 1;
  let scaleY = rect.height / node.offsetHeight || 1;
  return {
    left: rect.left,
    right: rect.left + node.clientWidth * scaleX,
    top: rect.top,
    bottom: rect.top + node.clientHeight * scaleY
  };
}
function scrollRectIntoView(view, rect, startDOM) {
  let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
  let doc3 = view.dom.ownerDocument;
  for (let parent = startDOM || view.dom; ; parent = parentNode(parent)) {
    if (!parent)
      break;
    if (parent.nodeType != 1)
      continue;
    let elt = parent;
    let atTop = elt == doc3.body;
    let bounding = atTop ? windowRect(doc3) : clientRect(elt);
    let moveX = 0, moveY = 0;
    if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
      moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
    else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
      moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
    if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
      moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
    else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
      moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
    if (moveX || moveY) {
      if (atTop) {
        doc3.defaultView.scrollBy(moveX, moveY);
      } else {
        let startX = elt.scrollLeft, startY = elt.scrollTop;
        if (moveY)
          elt.scrollTop += moveY;
        if (moveX)
          elt.scrollLeft += moveX;
        let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
        rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
      }
    }
    if (atTop)
      break;
  }
}
function storeScrollPos(view) {
  let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
  let refDOM, refTop;
  for (let x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
    let dom = view.root.elementFromPoint(x, y);
    if (!dom || dom == view.dom || !view.dom.contains(dom))
      continue;
    let localRect = dom.getBoundingClientRect();
    if (localRect.top >= startY - 20) {
      refDOM = dom;
      refTop = localRect.top;
      break;
    }
  }
  return { refDOM, refTop, stack: scrollStack(view.dom) };
}
function scrollStack(dom) {
  let stack = [], doc3 = dom.ownerDocument;
  for (let cur = dom; cur; cur = parentNode(cur)) {
    stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
    if (dom == doc3)
      break;
  }
  return stack;
}
function resetScrollPos({ refDOM, refTop, stack }) {
  let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
  restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
}
function restoreScrollStack(stack, dTop) {
  for (let i = 0; i < stack.length; i++) {
    let { dom, top, left } = stack[i];
    if (dom.scrollTop != top + dTop)
      dom.scrollTop = top + dTop;
    if (dom.scrollLeft != left)
      dom.scrollLeft = left;
  }
}
var preventScrollSupported = null;
function focusPreventScroll(dom) {
  if (dom.setActive)
    return dom.setActive();
  if (preventScrollSupported)
    return dom.focus(preventScrollSupported);
  let stored = scrollStack(dom);
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = { preventScroll: true };
      return true;
    }
  } : void 0);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    restoreScrollStack(stored, 0);
  }
}
function findOffsetInNode(node, coords) {
  let closest2, dxClosest = 2e8, coordsClosest, offset = 0;
  let rowBot = coords.top, rowTop = coords.top;
  for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
    let rects;
    if (child.nodeType == 1)
      rects = child.getClientRects();
    else if (child.nodeType == 3)
      rects = textRange(child).getClientRects();
    else
      continue;
    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      if (rect.top <= rowBot && rect.bottom >= rowTop) {
        rowBot = Math.max(rect.bottom, rowBot);
        rowTop = Math.min(rect.top, rowTop);
        let dx = rect.left > coords.left ? rect.left - coords.left : rect.right < coords.left ? coords.left - rect.right : 0;
        if (dx < dxClosest) {
          closest2 = child;
          dxClosest = dx;
          coordsClosest = dx && closest2.nodeType == 3 ? {
            left: rect.right < coords.left ? rect.right : rect.left,
            top: coords.top
          } : coords;
          if (child.nodeType == 1 && dx)
            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
          continue;
        }
      }
      if (!closest2 && (coords.left >= rect.right && coords.top >= rect.top || coords.left >= rect.left && coords.top >= rect.bottom))
        offset = childIndex + 1;
    }
  }
  if (closest2 && closest2.nodeType == 3)
    return findOffsetInText(closest2, coordsClosest);
  if (!closest2 || dxClosest && closest2.nodeType == 1)
    return { node, offset };
  return findOffsetInNode(closest2, coordsClosest);
}
function findOffsetInText(node, coords) {
  let len = node.nodeValue.length;
  let range = document.createRange();
  for (let i = 0; i < len; i++) {
    range.setEnd(node, i + 1);
    range.setStart(node, i);
    let rect = singleRect(range, 1);
    if (rect.top == rect.bottom)
      continue;
    if (inRect(coords, rect))
      return { node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
  }
  return { node, offset: 0 };
}
function inRect(coords, rect) {
  return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 && coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
}
function targetKludge(dom, coords) {
  let parent = dom.parentNode;
  if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
    return parent;
  return dom;
}
function posFromElement(view, elt, coords) {
  let { node, offset } = findOffsetInNode(elt, coords), bias = -1;
  if (node.nodeType == 1 && !node.firstChild) {
    let rect = node.getBoundingClientRect();
    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
  }
  return view.docView.posFromDOM(node, offset, bias);
}
function posFromCaret(view, node, offset, coords) {
  let outsideBlock = -1;
  for (let cur = node, sawBlock = false; ; ) {
    if (cur == view.dom)
      break;
    let desc = view.docView.nearestDesc(cur, true);
    if (!desc)
      return null;
    if (desc.dom.nodeType == 1 && (desc.node.isBlock && desc.parent && !sawBlock || !desc.contentDOM)) {
      let rect = desc.dom.getBoundingClientRect();
      if (desc.node.isBlock && desc.parent && !sawBlock) {
        sawBlock = true;
        if (rect.left > coords.left || rect.top > coords.top)
          outsideBlock = desc.posBefore;
        else if (rect.right < coords.left || rect.bottom < coords.top)
          outsideBlock = desc.posAfter;
      }
      if (!desc.contentDOM && outsideBlock < 0) {
        let before = desc.node.isBlock ? coords.top < (rect.top + rect.bottom) / 2 : coords.left < (rect.left + rect.right) / 2;
        return before ? desc.posBefore : desc.posAfter;
      }
    }
    cur = desc.dom.parentNode;
  }
  return outsideBlock > -1 ? outsideBlock : view.docView.posFromDOM(node, offset, -1);
}
function elementFromPoint(element, coords, box) {
  let len = element.childNodes.length;
  if (len && box.top < box.bottom) {
    for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI; ; ) {
      let child = element.childNodes[i];
      if (child.nodeType == 1) {
        let rects = child.getClientRects();
        for (let j = 0; j < rects.length; j++) {
          let rect = rects[j];
          if (inRect(coords, rect))
            return elementFromPoint(child, coords, rect);
        }
      }
      if ((i = (i + 1) % len) == startI)
        break;
    }
  }
  return element;
}
function posAtCoords(view, coords) {
  let doc3 = view.dom.ownerDocument, node, offset = 0;
  if (doc3.caretPositionFromPoint) {
    try {
      let pos2 = doc3.caretPositionFromPoint(coords.left, coords.top);
      if (pos2)
        ({ offsetNode: node, offset } = pos2);
    } catch (_) {
    }
  }
  if (!node && doc3.caretRangeFromPoint) {
    let range = doc3.caretRangeFromPoint(coords.left, coords.top);
    if (range)
      ({ startContainer: node, startOffset: offset } = range);
  }
  let elt = (view.root.elementFromPoint ? view.root : doc3).elementFromPoint(coords.left, coords.top);
  let pos;
  if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
    let box = view.dom.getBoundingClientRect();
    if (!inRect(coords, box))
      return null;
    elt = elementFromPoint(view.dom, coords, box);
    if (!elt)
      return null;
  }
  if (safari) {
    for (let p = elt; node && p; p = parentNode(p))
      if (p.draggable)
        node = void 0;
  }
  elt = targetKludge(elt, coords);
  if (node) {
    if (gecko && node.nodeType == 1) {
      offset = Math.min(offset, node.childNodes.length);
      if (offset < node.childNodes.length) {
        let next = node.childNodes[offset], box;
        if (next.nodeName == "IMG" && (box = next.getBoundingClientRect()).right <= coords.left && box.bottom > coords.top)
          offset++;
      }
    }
    if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 && coords.top > node.lastChild.getBoundingClientRect().bottom)
      pos = view.state.doc.content.size;
    else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR")
      pos = posFromCaret(view, node, offset, coords);
  }
  if (pos == null)
    pos = posFromElement(view, elt, coords);
  let desc = view.docView.nearestDesc(elt, true);
  return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
}
function singleRect(target, bias) {
  let rects = target.getClientRects();
  return !rects.length ? target.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1];
}
var BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
function coordsAtPos(view, pos, side) {
  let { node, offset, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
  let supportEmptyRange = webkit || gecko;
  if (node.nodeType == 3) {
    if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {
      let rect = singleRect(textRange(node, offset, offset), side);
      if (gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
        let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);
        if (rectBefore.top == rect.top) {
          let rectAfter = singleRect(textRange(node, offset, offset + 1), -1);
          if (rectAfter.top != rect.top)
            return flattenV(rectAfter, rectAfter.left < rectBefore.left);
        }
      }
      return rect;
    } else {
      let from2 = offset, to = offset, takeSide = side < 0 ? 1 : -1;
      if (side < 0 && !offset) {
        to++;
        takeSide = -1;
      } else if (side >= 0 && offset == node.nodeValue.length) {
        from2--;
        takeSide = 1;
      } else if (side < 0) {
        from2--;
      } else {
        to++;
      }
      return flattenV(singleRect(textRange(node, from2, to), 1), takeSide < 0);
    }
  }
  let $dom = view.state.doc.resolve(pos - (atom || 0));
  if (!$dom.parent.inlineContent) {
    if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
      let before = node.childNodes[offset - 1];
      if (before.nodeType == 1)
        return flattenH(before.getBoundingClientRect(), false);
    }
    if (atom == null && offset < nodeSize(node)) {
      let after = node.childNodes[offset];
      if (after.nodeType == 1)
        return flattenH(after.getBoundingClientRect(), true);
    }
    return flattenH(node.getBoundingClientRect(), side >= 0);
  }
  if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
    let before = node.childNodes[offset - 1];
    let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1)) : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
    if (target)
      return flattenV(singleRect(target, 1), false);
  }
  if (atom == null && offset < nodeSize(node)) {
    let after = node.childNodes[offset];
    while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
      after = after.nextSibling;
    let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, supportEmptyRange ? 0 : 1) : after.nodeType == 1 ? after : null;
    if (target)
      return flattenV(singleRect(target, -1), true);
  }
  return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0);
}
function flattenV(rect, left) {
  if (rect.width == 0)
    return rect;
  let x = left ? rect.left : rect.right;
  return { top: rect.top, bottom: rect.bottom, left: x, right: x };
}
function flattenH(rect, top) {
  if (rect.height == 0)
    return rect;
  let y = top ? rect.top : rect.bottom;
  return { top: y, bottom: y, left: rect.left, right: rect.right };
}
function withFlushedState(view, state, f) {
  let viewState = view.state, active = view.root.activeElement;
  if (viewState != state)
    view.updateState(state);
  if (active != view.dom)
    view.focus();
  try {
    return f();
  } finally {
    if (viewState != state)
      view.updateState(viewState);
    if (active != view.dom && active)
      active.focus();
  }
}
function endOfTextblockVertical(view, state, dir) {
  let sel = state.selection;
  let $pos = dir == "up" ? sel.$from : sel.$to;
  return withFlushedState(view, state, () => {
    let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
    for (; ; ) {
      let nearest = view.docView.nearestDesc(dom, true);
      if (!nearest)
        break;
      if (nearest.node.isBlock) {
        dom = nearest.contentDOM || nearest.dom;
        break;
      }
      dom = nearest.dom.parentNode;
    }
    let coords = coordsAtPos(view, $pos.pos, 1);
    for (let child = dom.firstChild; child; child = child.nextSibling) {
      let boxes;
      if (child.nodeType == 1)
        boxes = child.getClientRects();
      else if (child.nodeType == 3)
        boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
      else
        continue;
      for (let i = 0; i < boxes.length; i++) {
        let box = boxes[i];
        if (box.bottom > box.top + 1 && (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2 : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
          return false;
      }
    }
    return true;
  });
}
var maybeRTL = /[\u0590-\u08ac]/;
function endOfTextblockHorizontal(view, state, dir) {
  let { $head } = state.selection;
  if (!$head.parent.isTextblock)
    return false;
  let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
  let sel = view.domSelection();
  if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
    return dir == "left" || dir == "backward" ? atStart : atEnd;
  return withFlushedState(view, state, () => {
    let { focusNode: oldNode, focusOffset: oldOff, anchorNode, anchorOffset } = view.domSelectionRange();
    let oldBidiLevel = sel.caretBidiLevel;
    sel.modify("move", dir, "character");
    let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
    let { focusNode: newNode, focusOffset: newOff } = view.domSelectionRange();
    let result = newNode && !parentDOM.contains(newNode.nodeType == 1 ? newNode : newNode.parentNode) || oldNode == newNode && oldOff == newOff;
    try {
      sel.collapse(anchorNode, anchorOffset);
      if (oldNode && (oldNode != anchorNode || oldOff != anchorOffset) && sel.extend)
        sel.extend(oldNode, oldOff);
    } catch (_) {
    }
    if (oldBidiLevel != null)
      sel.caretBidiLevel = oldBidiLevel;
    return result;
  });
}
var cachedState = null;
var cachedDir = null;
var cachedResult = false;
function endOfTextblock(view, state, dir) {
  if (cachedState == state && cachedDir == dir)
    return cachedResult;
  cachedState = state;
  cachedDir = dir;
  return cachedResult = dir == "up" || dir == "down" ? endOfTextblockVertical(view, state, dir) : endOfTextblockHorizontal(view, state, dir);
}
var NOT_DIRTY = 0;
var CHILD_DIRTY = 1;
var CONTENT_DIRTY = 2;
var NODE_DIRTY = 3;
var ViewDesc = class {
  constructor(parent, children, dom, contentDOM) {
    this.parent = parent;
    this.children = children;
    this.dom = dom;
    this.contentDOM = contentDOM;
    this.dirty = NOT_DIRTY;
    dom.pmViewDesc = this;
  }
  // Used to check whether a given description corresponds to a
  // widget/mark/node.
  matchesWidget(widget) {
    return false;
  }
  matchesMark(mark) {
    return false;
  }
  matchesNode(node, outerDeco, innerDeco) {
    return false;
  }
  matchesHack(nodeName) {
    return false;
  }
  // When parsing in-editor content (in domchange.js), we allow
  // descriptions to determine the parse rules that should be used to
  // parse them.
  parseRule() {
    return null;
  }
  // Used by the editor's event handler to ignore events that come
  // from certain descs.
  stopEvent(event) {
    return false;
  }
  // The size of the content represented by this desc.
  get size() {
    let size = 0;
    for (let i = 0; i < this.children.length; i++)
      size += this.children[i].size;
    return size;
  }
  // For block nodes, this represents the space taken up by their
  // start/end tokens.
  get border() {
    return 0;
  }
  destroy() {
    this.parent = void 0;
    if (this.dom.pmViewDesc == this)
      this.dom.pmViewDesc = void 0;
    for (let i = 0; i < this.children.length; i++)
      this.children[i].destroy();
  }
  posBeforeChild(child) {
    for (let i = 0, pos = this.posAtStart; ; i++) {
      let cur = this.children[i];
      if (cur == child)
        return pos;
      pos += cur.size;
    }
  }
  get posBefore() {
    return this.parent.posBeforeChild(this);
  }
  get posAtStart() {
    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
  }
  get posAfter() {
    return this.posBefore + this.size;
  }
  get posAtEnd() {
    return this.posAtStart + this.size - 2 * this.border;
  }
  localPosFromDOM(dom, offset, bias) {
    if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
      if (bias < 0) {
        let domBefore, desc;
        if (dom == this.contentDOM) {
          domBefore = dom.childNodes[offset - 1];
        } else {
          while (dom.parentNode != this.contentDOM)
            dom = dom.parentNode;
          domBefore = dom.previousSibling;
        }
        while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
          domBefore = domBefore.previousSibling;
        return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
      } else {
        let domAfter, desc;
        if (dom == this.contentDOM) {
          domAfter = dom.childNodes[offset];
        } else {
          while (dom.parentNode != this.contentDOM)
            dom = dom.parentNode;
          domAfter = dom.nextSibling;
        }
        while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
          domAfter = domAfter.nextSibling;
        return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
      }
    }
    let atEnd;
    if (dom == this.dom && this.contentDOM) {
      atEnd = offset > domIndex(this.contentDOM);
    } else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
      atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
    } else if (this.dom.firstChild) {
      if (offset == 0)
        for (let search = dom; ; search = search.parentNode) {
          if (search == this.dom) {
            atEnd = false;
            break;
          }
          if (search.previousSibling)
            break;
        }
      if (atEnd == null && offset == dom.childNodes.length)
        for (let search = dom; ; search = search.parentNode) {
          if (search == this.dom) {
            atEnd = true;
            break;
          }
          if (search.nextSibling)
            break;
        }
    }
    return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
  }
  nearestDesc(dom, onlyNodes = false) {
    for (let first = true, cur = dom; cur; cur = cur.parentNode) {
      let desc = this.getDesc(cur), nodeDOM;
      if (desc && (!onlyNodes || desc.node)) {
        if (first && (nodeDOM = desc.nodeDOM) && !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
          first = false;
        else
          return desc;
      }
    }
  }
  getDesc(dom) {
    let desc = dom.pmViewDesc;
    for (let cur = desc; cur; cur = cur.parent)
      if (cur == this)
        return desc;
  }
  posFromDOM(dom, offset, bias) {
    for (let scan = dom; scan; scan = scan.parentNode) {
      let desc = this.getDesc(scan);
      if (desc)
        return desc.localPosFromDOM(dom, offset, bias);
    }
    return -1;
  }
  // Find the desc for the node after the given pos, if any. (When a
  // parent node overrode rendering, there might not be one.)
  descAt(pos) {
    for (let i = 0, offset = 0; i < this.children.length; i++) {
      let child = this.children[i], end = offset + child.size;
      if (offset == pos && end != offset) {
        while (!child.border && child.children.length)
          child = child.children[0];
        return child;
      }
      if (pos < end)
        return child.descAt(pos - offset - child.border);
      offset = end;
    }
  }
  domFromPos(pos, side) {
    if (!this.contentDOM)
      return { node: this.dom, offset: 0, atom: pos + 1 };
    let i = 0, offset = 0;
    for (let curPos = 0; i < this.children.length; i++) {
      let child = this.children[i], end = curPos + child.size;
      if (end > pos || child instanceof TrailingHackViewDesc) {
        offset = pos - curPos;
        break;
      }
      curPos = end;
    }
    if (offset)
      return this.children[i].domFromPos(offset - this.children[i].border, side);
    for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i--) {
    }
    if (side <= 0) {
      let prev, enter2 = true;
      for (; ; i--, enter2 = false) {
        prev = i ? this.children[i - 1] : null;
        if (!prev || prev.dom.parentNode == this.contentDOM)
          break;
      }
      if (prev && side && enter2 && !prev.border && !prev.domAtom)
        return prev.domFromPos(prev.size, side);
      return { node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0 };
    } else {
      let next, enter2 = true;
      for (; ; i++, enter2 = false) {
        next = i < this.children.length ? this.children[i] : null;
        if (!next || next.dom.parentNode == this.contentDOM)
          break;
      }
      if (next && enter2 && !next.border && !next.domAtom)
        return next.domFromPos(0, side);
      return { node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length };
    }
  }
  // Used to find a DOM range in a single parent for a given changed
  // range.
  parseRange(from2, to, base2 = 0) {
    if (this.children.length == 0)
      return { node: this.contentDOM, from: from2, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
    let fromOffset = -1, toOffset = -1;
    for (let offset = base2, i = 0; ; i++) {
      let child = this.children[i], end = offset + child.size;
      if (fromOffset == -1 && from2 <= end) {
        let childBase = offset + child.border;
        if (from2 >= childBase && to <= end - child.border && child.node && child.contentDOM && this.contentDOM.contains(child.contentDOM))
          return child.parseRange(from2, to, childBase);
        from2 = offset;
        for (let j = i; j > 0; j--) {
          let prev = this.children[j - 1];
          if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
            fromOffset = domIndex(prev.dom) + 1;
            break;
          }
          from2 -= prev.size;
        }
        if (fromOffset == -1)
          fromOffset = 0;
      }
      if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {
        to = end;
        for (let j = i + 1; j < this.children.length; j++) {
          let next = this.children[j];
          if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
            toOffset = domIndex(next.dom);
            break;
          }
          to += next.size;
        }
        if (toOffset == -1)
          toOffset = this.contentDOM.childNodes.length;
        break;
      }
      offset = end;
    }
    return { node: this.contentDOM, from: from2, to, fromOffset, toOffset };
  }
  emptyChildAt(side) {
    if (this.border || !this.contentDOM || !this.children.length)
      return false;
    let child = this.children[side < 0 ? 0 : this.children.length - 1];
    return child.size == 0 || child.emptyChildAt(side);
  }
  domAfterPos(pos) {
    let { node, offset } = this.domFromPos(pos, 0);
    if (node.nodeType != 1 || offset == node.childNodes.length)
      throw new RangeError("No node after pos " + pos);
    return node.childNodes[offset];
  }
  // View descs are responsible for setting any selection that falls
  // entirely inside of them, so that custom implementations can do
  // custom things with the selection. Note that this falls apart when
  // a selection starts in such a node and ends in another, in which
  // case we just use whatever domFromPos produces as a best effort.
  setSelection(anchor, head, root, force = false) {
    let from2 = Math.min(anchor, head), to = Math.max(anchor, head);
    for (let i = 0, offset = 0; i < this.children.length; i++) {
      let child = this.children[i], end = offset + child.size;
      if (from2 > offset && to < end)
        return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);
      offset = end;
    }
    let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
    let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
    let domSel = root.getSelection();
    let brKludge = false;
    if ((gecko || safari) && anchor == head) {
      let { node, offset } = anchorDOM;
      if (node.nodeType == 3) {
        brKludge = !!(offset && node.nodeValue[offset - 1] == "\n");
        if (brKludge && offset == node.nodeValue.length) {
          for (let scan = node, after; scan; scan = scan.parentNode) {
            if (after = scan.nextSibling) {
              if (after.nodeName == "BR")
                anchorDOM = headDOM = { node: after.parentNode, offset: domIndex(after) + 1 };
              break;
            }
            let desc = scan.pmViewDesc;
            if (desc && desc.node && desc.node.isBlock)
              break;
          }
        }
      } else {
        let prev = node.childNodes[offset - 1];
        brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
      }
    }
    if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
      let after = domSel.focusNode.childNodes[domSel.focusOffset];
      if (after && after.contentEditable == "false")
        force = true;
    }
    if (!(force || brKludge && safari) && isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) && isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
      return;
    let domSelExtended = false;
    if ((domSel.extend || anchor == head) && !brKludge) {
      domSel.collapse(anchorDOM.node, anchorDOM.offset);
      try {
        if (anchor != head)
          domSel.extend(headDOM.node, headDOM.offset);
        domSelExtended = true;
      } catch (_) {
      }
    }
    if (!domSelExtended) {
      if (anchor > head) {
        let tmp = anchorDOM;
        anchorDOM = headDOM;
        headDOM = tmp;
      }
      let range = document.createRange();
      range.setEnd(headDOM.node, headDOM.offset);
      range.setStart(anchorDOM.node, anchorDOM.offset);
      domSel.removeAllRanges();
      domSel.addRange(range);
    }
  }
  ignoreMutation(mutation) {
    return !this.contentDOM && mutation.type != "selection";
  }
  get contentLost() {
    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
  }
  // Remove a subtree of the element tree that has been touched
  // by a DOM change, so that the next update will redraw it.
  markDirty(from2, to) {
    for (let offset = 0, i = 0; i < this.children.length; i++) {
      let child = this.children[i], end = offset + child.size;
      if (offset == end ? from2 <= end && to >= offset : from2 < end && to > offset) {
        let startInside = offset + child.border, endInside = end - child.border;
        if (from2 >= startInside && to <= endInside) {
          this.dirty = from2 == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
          if (from2 == startInside && to == endInside && (child.contentLost || child.dom.parentNode != this.contentDOM))
            child.dirty = NODE_DIRTY;
          else
            child.markDirty(from2 - startInside, to - startInside);
          return;
        } else {
          child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length ? CONTENT_DIRTY : NODE_DIRTY;
        }
      }
      offset = end;
    }
    this.dirty = CONTENT_DIRTY;
  }
  markParentsDirty() {
    let level = 1;
    for (let node = this.parent; node; node = node.parent, level++) {
      let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
      if (node.dirty < dirty)
        node.dirty = dirty;
    }
  }
  get domAtom() {
    return false;
  }
  get ignoreForCoords() {
    return false;
  }
};
var WidgetViewDesc = class extends ViewDesc {
  constructor(parent, widget, view, pos) {
    let self, dom = widget.type.toDOM;
    if (typeof dom == "function")
      dom = dom(view, () => {
        if (!self)
          return pos;
        if (self.parent)
          return self.parent.posBeforeChild(self);
      });
    if (!widget.type.spec.raw) {
      if (dom.nodeType != 1) {
        let wrap2 = document.createElement("span");
        wrap2.appendChild(dom);
        dom = wrap2;
      }
      dom.contentEditable = "false";
      dom.classList.add("ProseMirror-widget");
    }
    super(parent, [], dom, null);
    this.widget = widget;
    this.widget = widget;
    self = this;
  }
  matchesWidget(widget) {
    return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
  }
  parseRule() {
    return { ignore: true };
  }
  stopEvent(event) {
    let stop = this.widget.spec.stopEvent;
    return stop ? stop(event) : false;
  }
  ignoreMutation(mutation) {
    return mutation.type != "selection" || this.widget.spec.ignoreSelection;
  }
  destroy() {
    this.widget.type.destroy(this.dom);
    super.destroy();
  }
  get domAtom() {
    return true;
  }
  get side() {
    return this.widget.type.side;
  }
};
var CompositionViewDesc = class extends ViewDesc {
  constructor(parent, dom, textDOM, text) {
    super(parent, [], dom, null);
    this.textDOM = textDOM;
    this.text = text;
  }
  get size() {
    return this.text.length;
  }
  localPosFromDOM(dom, offset) {
    if (dom != this.textDOM)
      return this.posAtStart + (offset ? this.size : 0);
    return this.posAtStart + offset;
  }
  domFromPos(pos) {
    return { node: this.textDOM, offset: pos };
  }
  ignoreMutation(mut) {
    return mut.type === "characterData" && mut.target.nodeValue == mut.oldValue;
  }
};
var MarkViewDesc = class _MarkViewDesc extends ViewDesc {
  constructor(parent, mark, dom, contentDOM) {
    super(parent, [], dom, contentDOM);
    this.mark = mark;
  }
  static create(parent, mark, inline, view) {
    let custom = view.nodeViews[mark.type.name];
    let spec = custom && custom(mark, view, inline);
    if (!spec || !spec.dom)
      spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
    return new _MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
  }
  parseRule() {
    if (this.dirty & NODE_DIRTY || this.mark.type.spec.reparseInView)
      return null;
    return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM || void 0 };
  }
  matchesMark(mark) {
    return this.dirty != NODE_DIRTY && this.mark.eq(mark);
  }
  markDirty(from2, to) {
    super.markDirty(from2, to);
    if (this.dirty != NOT_DIRTY) {
      let parent = this.parent;
      while (!parent.node)
        parent = parent.parent;
      if (parent.dirty < this.dirty)
        parent.dirty = this.dirty;
      this.dirty = NOT_DIRTY;
    }
  }
  slice(from2, to, view) {
    let copy2 = _MarkViewDesc.create(this.parent, this.mark, true, view);
    let nodes3 = this.children, size = this.size;
    if (to < size)
      nodes3 = replaceNodes(nodes3, to, size, view);
    if (from2 > 0)
      nodes3 = replaceNodes(nodes3, 0, from2, view);
    for (let i = 0; i < nodes3.length; i++)
      nodes3[i].parent = copy2;
    copy2.children = nodes3;
    return copy2;
  }
};
var NodeViewDesc = class _NodeViewDesc extends ViewDesc {
  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
    super(parent, [], dom, contentDOM);
    this.node = node;
    this.outerDeco = outerDeco;
    this.innerDeco = innerDeco;
    this.nodeDOM = nodeDOM;
    if (contentDOM)
      this.updateChildren(view, pos);
  }
  // By default, a node is rendered using the `toDOM` method from the
  // node type spec. But client code can use the `nodeViews` spec to
  // supply a custom node view, which can influence various aspects of
  // the way the node works.
  //
  // (Using subclassing for this was intentionally decided against,
  // since it'd require exposing a whole slew of finicky
  // implementation details to the user code that they probably will
  // never need.)
  static create(parent, node, outerDeco, innerDeco, view, pos) {
    let custom = view.nodeViews[node.type.name], descObj;
    let spec = custom && custom(node, view, () => {
      if (!descObj)
        return pos;
      if (descObj.parent)
        return descObj.parent.posBeforeChild(descObj);
    }, outerDeco, innerDeco);
    let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
    if (node.isText) {
      if (!dom)
        dom = document.createTextNode(node.text);
      else if (dom.nodeType != 3)
        throw new RangeError("Text must be rendered as a DOM text node");
    } else if (!dom) {
      ({ dom, contentDOM } = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)));
    }
    if (!contentDOM && !node.isText && dom.nodeName != "BR") {
      if (!dom.hasAttribute("contenteditable"))
        dom.contentEditable = "false";
      if (node.type.spec.draggable)
        dom.draggable = true;
    }
    let nodeDOM = dom;
    dom = applyOuterDeco(dom, outerDeco, node);
    if (spec)
      return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
    else if (node.isText)
      return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);
    else
      return new _NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
  }
  parseRule() {
    if (this.node.type.spec.reparseInView)
      return null;
    let rule = { node: this.node.type.name, attrs: this.node.attrs };
    if (this.node.type.whitespace == "pre")
      rule.preserveWhitespace = "full";
    if (!this.contentDOM) {
      rule.getContent = () => this.node.content;
    } else if (!this.contentLost) {
      rule.contentElement = this.contentDOM;
    } else {
      for (let i = this.children.length - 1; i >= 0; i--) {
        let child = this.children[i];
        if (this.dom.contains(child.dom.parentNode)) {
          rule.contentElement = child.dom.parentNode;
          break;
        }
      }
      if (!rule.contentElement)
        rule.getContent = () => Fragment.empty;
    }
    return rule;
  }
  matchesNode(node, outerDeco, innerDeco) {
    return this.dirty == NOT_DIRTY && node.eq(this.node) && sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
  }
  get size() {
    return this.node.nodeSize;
  }
  get border() {
    return this.node.isLeaf ? 0 : 1;
  }
  // Syncs `this.children` to match `this.node.content` and the local
  // decorations, possibly introducing nesting for marks. Then, in a
  // separate step, syncs the DOM inside `this.contentDOM` to
  // `this.children`.
  updateChildren(view, pos) {
    let inline = this.node.inlineContent, off = pos;
    let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
    let localComposition = composition && composition.pos > -1 ? composition : null;
    let compositionInChild = composition && composition.pos < 0;
    let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
    iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {
      if (widget.spec.marks)
        updater.syncToMarks(widget.spec.marks, inline, view);
      else if (widget.type.side >= 0 && !insideNode)
        updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline, view);
      updater.placeWidget(widget, view, off);
    }, (child, outerDeco, innerDeco, i) => {
      updater.syncToMarks(child.marks, inline, view);
      let compIndex;
      if (updater.findNodeMatch(child, outerDeco, innerDeco, i))
        ;
      else if (compositionInChild && view.state.selection.from > off && view.state.selection.to < off + child.nodeSize && (compIndex = updater.findIndexWithChild(composition.node)) > -1 && updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view))
        ;
      else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i))
        ;
      else {
        updater.addNode(child, outerDeco, innerDeco, view, off);
      }
      off += child.nodeSize;
    });
    updater.syncToMarks([], inline, view);
    if (this.node.isTextblock)
      updater.addTextblockHacks();
    updater.destroyRest();
    if (updater.changed || this.dirty == CONTENT_DIRTY) {
      if (localComposition)
        this.protectLocalComposition(view, localComposition);
      renderDescs(this.contentDOM, this.children, view);
      if (ios)
        iosHacks(this.dom);
    }
  }
  localCompositionInfo(view, pos) {
    let { from: from2, to } = view.state.selection;
    if (!(view.state.selection instanceof TextSelection) || from2 < pos || to > pos + this.node.content.size)
      return null;
    let sel = view.domSelectionRange();
    let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset);
    if (!textNode || !this.dom.contains(textNode.parentNode))
      return null;
    if (this.node.inlineContent) {
      let text = textNode.nodeValue;
      let textPos = findTextInFragment(this.node.content, text, from2 - pos, to - pos);
      return textPos < 0 ? null : { node: textNode, pos: textPos, text };
    } else {
      return { node: textNode, pos: -1, text: "" };
    }
  }
  protectLocalComposition(view, { node, pos, text }) {
    if (this.getDesc(node))
      return;
    let topNode = node;
    for (; ; topNode = topNode.parentNode) {
      if (topNode.parentNode == this.contentDOM)
        break;
      while (topNode.previousSibling)
        topNode.parentNode.removeChild(topNode.previousSibling);
      while (topNode.nextSibling)
        topNode.parentNode.removeChild(topNode.nextSibling);
      if (topNode.pmViewDesc)
        topNode.pmViewDesc = void 0;
    }
    let desc = new CompositionViewDesc(this, topNode, node, text);
    view.input.compositionNodes.push(desc);
    this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
  }
  // If this desc must be updated to match the given node decoration,
  // do so and return true.
  update(node, outerDeco, innerDeco, view) {
    if (this.dirty == NODE_DIRTY || !node.sameMarkup(this.node))
      return false;
    this.updateInner(node, outerDeco, innerDeco, view);
    return true;
  }
  updateInner(node, outerDeco, innerDeco, view) {
    this.updateOuterDeco(outerDeco);
    this.node = node;
    this.innerDeco = innerDeco;
    if (this.contentDOM)
      this.updateChildren(view, this.posAtStart);
    this.dirty = NOT_DIRTY;
  }
  updateOuterDeco(outerDeco) {
    if (sameOuterDeco(outerDeco, this.outerDeco))
      return;
    let needsWrap = this.nodeDOM.nodeType != 1;
    let oldDOM = this.dom;
    this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
    if (this.dom != oldDOM) {
      oldDOM.pmViewDesc = void 0;
      this.dom.pmViewDesc = this;
    }
    this.outerDeco = outerDeco;
  }
  // Mark this node as being the selected node.
  selectNode() {
    if (this.nodeDOM.nodeType == 1)
      this.nodeDOM.classList.add("ProseMirror-selectednode");
    if (this.contentDOM || !this.node.type.spec.draggable)
      this.dom.draggable = true;
  }
  // Remove selected node marking from this node.
  deselectNode() {
    if (this.nodeDOM.nodeType == 1)
      this.nodeDOM.classList.remove("ProseMirror-selectednode");
    if (this.contentDOM || !this.node.type.spec.draggable)
      this.dom.removeAttribute("draggable");
  }
  get domAtom() {
    return this.node.isAtom;
  }
};
function docViewDesc(doc3, outerDeco, innerDeco, dom, view) {
  applyOuterDeco(dom, outerDeco, doc3);
  return new NodeViewDesc(void 0, doc3, outerDeco, innerDeco, dom, dom, dom, view, 0);
}
var TextViewDesc = class _TextViewDesc extends NodeViewDesc {
  constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
    super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
  }
  parseRule() {
    let skip = this.nodeDOM.parentNode;
    while (skip && skip != this.dom && !skip.pmIsDeco)
      skip = skip.parentNode;
    return { skip: skip || true };
  }
  update(node, outerDeco, innerDeco, view) {
    if (this.dirty == NODE_DIRTY || this.dirty != NOT_DIRTY && !this.inParent() || !node.sameMarkup(this.node))
      return false;
    this.updateOuterDeco(outerDeco);
    if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
      this.nodeDOM.nodeValue = node.text;
      if (view.trackWrites == this.nodeDOM)
        view.trackWrites = null;
    }
    this.node = node;
    this.dirty = NOT_DIRTY;
    return true;
  }
  inParent() {
    let parentDOM = this.parent.contentDOM;
    for (let n = this.nodeDOM; n; n = n.parentNode)
      if (n == parentDOM)
        return true;
    return false;
  }
  domFromPos(pos) {
    return { node: this.nodeDOM, offset: pos };
  }
  localPosFromDOM(dom, offset, bias) {
    if (dom == this.nodeDOM)
      return this.posAtStart + Math.min(offset, this.node.text.length);
    return super.localPosFromDOM(dom, offset, bias);
  }
  ignoreMutation(mutation) {
    return mutation.type != "characterData" && mutation.type != "selection";
  }
  slice(from2, to, view) {
    let node = this.node.cut(from2, to), dom = document.createTextNode(node.text);
    return new _TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view);
  }
  markDirty(from2, to) {
    super.markDirty(from2, to);
    if (this.dom != this.nodeDOM && (from2 == 0 || to == this.nodeDOM.nodeValue.length))
      this.dirty = NODE_DIRTY;
  }
  get domAtom() {
    return false;
  }
};
var TrailingHackViewDesc = class extends ViewDesc {
  parseRule() {
    return { ignore: true };
  }
  matchesHack(nodeName) {
    return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName;
  }
  get domAtom() {
    return true;
  }
  get ignoreForCoords() {
    return this.dom.nodeName == "IMG";
  }
};
var CustomNodeViewDesc = class extends NodeViewDesc {
  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
    super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
    this.spec = spec;
  }
  // A custom `update` method gets to decide whether the update goes
  // through. If it does, and there's a `contentDOM` node, our logic
  // updates the children.
  update(node, outerDeco, innerDeco, view) {
    if (this.dirty == NODE_DIRTY)
      return false;
    if (this.spec.update) {
      let result = this.spec.update(node, outerDeco, innerDeco);
      if (result)
        this.updateInner(node, outerDeco, innerDeco, view);
      return result;
    } else if (!this.contentDOM && !node.isLeaf) {
      return false;
    } else {
      return super.update(node, outerDeco, innerDeco, view);
    }
  }
  selectNode() {
    this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
  }
  deselectNode() {
    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
  }
  setSelection(anchor, head, root, force) {
    this.spec.setSelection ? this.spec.setSelection(anchor, head, root) : super.setSelection(anchor, head, root, force);
  }
  destroy() {
    if (this.spec.destroy)
      this.spec.destroy();
    super.destroy();
  }
  stopEvent(event) {
    return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
  }
  ignoreMutation(mutation) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
  }
};
function renderDescs(parentDOM, descs, view) {
  let dom = parentDOM.firstChild, written = false;
  for (let i = 0; i < descs.length; i++) {
    let desc = descs[i], childDOM = desc.dom;
    if (childDOM.parentNode == parentDOM) {
      while (childDOM != dom) {
        dom = rm(dom);
        written = true;
      }
      dom = dom.nextSibling;
    } else {
      written = true;
      parentDOM.insertBefore(childDOM, dom);
    }
    if (desc instanceof MarkViewDesc) {
      let pos = dom ? dom.previousSibling : parentDOM.lastChild;
      renderDescs(desc.contentDOM, desc.children, view);
      dom = pos ? pos.nextSibling : parentDOM.firstChild;
    }
  }
  while (dom) {
    dom = rm(dom);
    written = true;
  }
  if (written && view.trackWrites == parentDOM)
    view.trackWrites = null;
}
var OuterDecoLevel = function(nodeName) {
  if (nodeName)
    this.nodeName = nodeName;
};
OuterDecoLevel.prototype = /* @__PURE__ */ Object.create(null);
var noDeco = [new OuterDecoLevel()];
function computeOuterDeco(outerDeco, node, needsWrap) {
  if (outerDeco.length == 0)
    return noDeco;
  let top = needsWrap ? noDeco[0] : new OuterDecoLevel(), result = [top];
  for (let i = 0; i < outerDeco.length; i++) {
    let attrs = outerDeco[i].type.attrs;
    if (!attrs)
      continue;
    if (attrs.nodeName)
      result.push(top = new OuterDecoLevel(attrs.nodeName));
    for (let name in attrs) {
      let val = attrs[name];
      if (val == null)
        continue;
      if (needsWrap && result.length == 1)
        result.push(top = new OuterDecoLevel(node.isInline ? "span" : "div"));
      if (name == "class")
        top.class = (top.class ? top.class + " " : "") + val;
      else if (name == "style")
        top.style = (top.style ? top.style + ";" : "") + val;
      else if (name != "nodeName")
        top[name] = val;
    }
  }
  return result;
}
function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
  if (prevComputed == noDeco && curComputed == noDeco)
    return nodeDOM;
  let curDOM = nodeDOM;
  for (let i = 0; i < curComputed.length; i++) {
    let deco = curComputed[i], prev = prevComputed[i];
    if (i) {
      let parent;
      if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM && (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
        curDOM = parent;
      } else {
        parent = document.createElement(deco.nodeName);
        parent.pmIsDeco = true;
        parent.appendChild(curDOM);
        prev = noDeco[0];
        curDOM = parent;
      }
    }
    patchAttributes(curDOM, prev || noDeco[0], deco);
  }
  return curDOM;
}
function patchAttributes(dom, prev, cur) {
  for (let name in prev)
    if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
      dom.removeAttribute(name);
  for (let name in cur)
    if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev[name])
      dom.setAttribute(name, cur[name]);
  if (prev.class != cur.class) {
    let prevList = prev.class ? prev.class.split(" ").filter(Boolean) : [];
    let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
    for (let i = 0; i < prevList.length; i++)
      if (curList.indexOf(prevList[i]) == -1)
        dom.classList.remove(prevList[i]);
    for (let i = 0; i < curList.length; i++)
      if (prevList.indexOf(curList[i]) == -1)
        dom.classList.add(curList[i]);
    if (dom.classList.length == 0)
      dom.removeAttribute("class");
  }
  if (prev.style != cur.style) {
    if (prev.style) {
      let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
      while (m = prop.exec(prev.style))
        dom.style.removeProperty(m[1]);
    }
    if (cur.style)
      dom.style.cssText += cur.style;
  }
}
function applyOuterDeco(dom, deco, node) {
  return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));
}
function sameOuterDeco(a, b) {
  if (a.length != b.length)
    return false;
  for (let i = 0; i < a.length; i++)
    if (!a[i].type.eq(b[i].type))
      return false;
  return true;
}
function rm(dom) {
  let next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}
var ViewTreeUpdater = class {
  constructor(top, lock, view) {
    this.lock = lock;
    this.view = view;
    this.index = 0;
    this.stack = [];
    this.changed = false;
    this.top = top;
    this.preMatch = preMatch(top.node.content, top);
  }
  // Destroy and remove the children between the given indices in
  // `this.top`.
  destroyBetween(start, end) {
    if (start == end)
      return;
    for (let i = start; i < end; i++)
      this.top.children[i].destroy();
    this.top.children.splice(start, end - start);
    this.changed = true;
  }
  // Destroy all remaining children in `this.top`.
  destroyRest() {
    this.destroyBetween(this.index, this.top.children.length);
  }
  // Sync the current stack of mark descs with the given array of
  // marks, reusing existing mark descs when possible.
  syncToMarks(marks2, inline, view) {
    let keep = 0, depth = this.stack.length >> 1;
    let maxKeep = Math.min(depth, marks2.length);
    while (keep < maxKeep && (keep == depth - 1 ? this.top : this.stack[keep + 1 << 1]).matchesMark(marks2[keep]) && marks2[keep].type.spec.spanning !== false)
      keep++;
    while (keep < depth) {
      this.destroyRest();
      this.top.dirty = NOT_DIRTY;
      this.index = this.stack.pop();
      this.top = this.stack.pop();
      depth--;
    }
    while (depth < marks2.length) {
      this.stack.push(this.top, this.index + 1);
      let found2 = -1;
      for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
        let next = this.top.children[i];
        if (next.matchesMark(marks2[depth]) && !this.isLocked(next.dom)) {
          found2 = i;
          break;
        }
      }
      if (found2 > -1) {
        if (found2 > this.index) {
          this.changed = true;
          this.destroyBetween(this.index, found2);
        }
        this.top = this.top.children[this.index];
      } else {
        let markDesc = MarkViewDesc.create(this.top, marks2[depth], inline, view);
        this.top.children.splice(this.index, 0, markDesc);
        this.top = markDesc;
        this.changed = true;
      }
      this.index = 0;
      depth++;
    }
  }
  // Try to find a node desc matching the given data. Skip over it and
  // return true when successful.
  findNodeMatch(node, outerDeco, innerDeco, index) {
    let found2 = -1, targetDesc;
    if (index >= this.preMatch.index && (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top && targetDesc.matchesNode(node, outerDeco, innerDeco)) {
      found2 = this.top.children.indexOf(targetDesc, this.index);
    } else {
      for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {
        let child = this.top.children[i];
        if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
          found2 = i;
          break;
        }
      }
    }
    if (found2 < 0)
      return false;
    this.destroyBetween(this.index, found2);
    this.index++;
    return true;
  }
  updateNodeAt(node, outerDeco, innerDeco, index, view) {
    let child = this.top.children[index];
    if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
      child.dirty = CONTENT_DIRTY;
    if (!child.update(node, outerDeco, innerDeco, view))
      return false;
    this.destroyBetween(this.index, index);
    this.index++;
    return true;
  }
  findIndexWithChild(domNode) {
    for (; ; ) {
      let parent = domNode.parentNode;
      if (!parent)
        return -1;
      if (parent == this.top.contentDOM) {
        let desc = domNode.pmViewDesc;
        if (desc)
          for (let i = this.index; i < this.top.children.length; i++) {
            if (this.top.children[i] == desc)
              return i;
          }
        return -1;
      }
      domNode = parent;
    }
  }
  // Try to update the next node, if any, to the given data. Checks
  // pre-matches to avoid overwriting nodes that could still be used.
  updateNextNode(node, outerDeco, innerDeco, view, index) {
    for (let i = this.index; i < this.top.children.length; i++) {
      let next = this.top.children[i];
      if (next instanceof NodeViewDesc) {
        let preMatch2 = this.preMatch.matched.get(next);
        if (preMatch2 != null && preMatch2 != index)
          return false;
        let nextDOM = next.dom;
        let locked = this.isLocked(nextDOM) && !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text && next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
        if (!locked && next.update(node, outerDeco, innerDeco, view)) {
          this.destroyBetween(this.index, i);
          if (next.dom != nextDOM)
            this.changed = true;
          this.index++;
          return true;
        }
        break;
      }
    }
    return false;
  }
  // Insert the node as a newly created node desc.
  addNode(node, outerDeco, innerDeco, view, pos) {
    this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos));
    this.changed = true;
  }
  placeWidget(widget, view, pos) {
    let next = this.index < this.top.children.length ? this.top.children[this.index] : null;
    if (next && next.matchesWidget(widget) && (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
      this.index++;
    } else {
      let desc = new WidgetViewDesc(this.top, widget, view, pos);
      this.top.children.splice(this.index++, 0, desc);
      this.changed = true;
    }
  }
  // Make sure a textblock looks and behaves correctly in
  // contentEditable.
  addTextblockHacks() {
    let lastChild = this.top.children[this.index - 1], parent = this.top;
    while (lastChild instanceof MarkViewDesc) {
      parent = lastChild;
      lastChild = parent.children[parent.children.length - 1];
    }
    if (!lastChild || // Empty textblock
    !(lastChild instanceof TextViewDesc) || /\n$/.test(lastChild.node.text) || this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text)) {
      if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == "false")
        this.addHackNode("IMG", parent);
      this.addHackNode("BR", this.top);
    }
  }
  addHackNode(nodeName, parent) {
    if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
      this.index++;
    } else {
      let dom = document.createElement(nodeName);
      if (nodeName == "IMG") {
        dom.className = "ProseMirror-separator";
        dom.alt = "";
      }
      if (nodeName == "BR")
        dom.className = "ProseMirror-trailingBreak";
      let hack = new TrailingHackViewDesc(this.top, [], dom, null);
      if (parent != this.top)
        parent.children.push(hack);
      else
        parent.children.splice(this.index++, 0, hack);
      this.changed = true;
    }
  }
  isLocked(node) {
    return this.lock && (node == this.lock || node.nodeType == 1 && node.contains(this.lock.parentNode));
  }
};
function preMatch(frag, parentDesc) {
  let curDesc = parentDesc, descI = curDesc.children.length;
  let fI = frag.childCount, matched = /* @__PURE__ */ new Map(), matches2 = [];
  outer:
    while (fI > 0) {
      let desc;
      for (; ; ) {
        if (descI) {
          let next = curDesc.children[descI - 1];
          if (next instanceof MarkViewDesc) {
            curDesc = next;
            descI = next.children.length;
          } else {
            desc = next;
            descI--;
            break;
          }
        } else if (curDesc == parentDesc) {
          break outer;
        } else {
          descI = curDesc.parent.children.indexOf(curDesc);
          curDesc = curDesc.parent;
        }
      }
      let node = desc.node;
      if (!node)
        continue;
      if (node != frag.child(fI - 1))
        break;
      --fI;
      matched.set(desc, fI);
      matches2.push(desc);
    }
  return { index: fI, matched, matches: matches2.reverse() };
}
function compareSide(a, b) {
  return a.type.side - b.type.side;
}
function iterDeco(parent, deco, onWidget, onNode) {
  let locals = deco.locals(parent), offset = 0;
  if (locals.length == 0) {
    for (let i = 0; i < parent.childCount; i++) {
      let child = parent.child(i);
      onNode(child, locals, deco.forChild(offset, child), i);
      offset += child.nodeSize;
    }
    return;
  }
  let decoIndex = 0, active = [], restNode = null;
  for (let parentIndex = 0; ; ) {
    if (decoIndex < locals.length && locals[decoIndex].to == offset) {
      let widget = locals[decoIndex++], widgets;
      while (decoIndex < locals.length && locals[decoIndex].to == offset)
        (widgets || (widgets = [widget])).push(locals[decoIndex++]);
      if (widgets) {
        widgets.sort(compareSide);
        for (let i = 0; i < widgets.length; i++)
          onWidget(widgets[i], parentIndex, !!restNode);
      } else {
        onWidget(widget, parentIndex, !!restNode);
      }
    }
    let child, index;
    if (restNode) {
      index = -1;
      child = restNode;
      restNode = null;
    } else if (parentIndex < parent.childCount) {
      index = parentIndex;
      child = parent.child(parentIndex++);
    } else {
      break;
    }
    for (let i = 0; i < active.length; i++)
      if (active[i].to <= offset)
        active.splice(i--, 1);
    while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
      active.push(locals[decoIndex++]);
    let end = offset + child.nodeSize;
    if (child.isText) {
      let cutAt = end;
      if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
        cutAt = locals[decoIndex].from;
      for (let i = 0; i < active.length; i++)
        if (active[i].to < cutAt)
          cutAt = active[i].to;
      if (cutAt < end) {
        restNode = child.cut(cutAt - offset);
        child = child.cut(0, cutAt - offset);
        end = cutAt;
        index = -1;
      }
    }
    let outerDeco = child.isInline && !child.isLeaf ? active.filter((d) => !d.inline) : active.slice();
    onNode(child, outerDeco, deco.forChild(offset, child), index);
    offset = end;
  }
}
function iosHacks(dom) {
  if (dom.nodeName == "UL" || dom.nodeName == "OL") {
    let oldCSS = dom.style.cssText;
    dom.style.cssText = oldCSS + "; list-style: square !important";
    window.getComputedStyle(dom).listStyle;
    dom.style.cssText = oldCSS;
  }
}
function nearbyTextNode(node, offset) {
  for (; ; ) {
    if (node.nodeType == 3)
      return node;
    if (node.nodeType == 1 && offset > 0) {
      if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)
        return node.childNodes[offset];
      node = node.childNodes[offset - 1];
      offset = nodeSize(node);
    } else if (node.nodeType == 1 && offset < node.childNodes.length) {
      node = node.childNodes[offset];
      offset = 0;
    } else {
      return null;
    }
  }
}
function findTextInFragment(frag, text, from2, to) {
  for (let i = 0, pos = 0; i < frag.childCount && pos <= to; ) {
    let child = frag.child(i++), childStart = pos;
    pos += child.nodeSize;
    if (!child.isText)
      continue;
    let str = child.text;
    while (i < frag.childCount) {
      let next = frag.child(i++);
      pos += next.nodeSize;
      if (!next.isText)
        break;
      str += next.text;
    }
    if (pos >= from2) {
      let found2 = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;
      if (found2 >= 0 && found2 + text.length + childStart >= from2)
        return childStart + found2;
      if (from2 == to && str.length >= to + text.length - childStart && str.slice(to - childStart, to - childStart + text.length) == text)
        return to;
    }
  }
  return -1;
}
function replaceNodes(nodes3, from2, to, view, replacement) {
  let result = [];
  for (let i = 0, off = 0; i < nodes3.length; i++) {
    let child = nodes3[i], start = off, end = off += child.size;
    if (start >= to || end <= from2) {
      result.push(child);
    } else {
      if (start < from2)
        result.push(child.slice(0, from2 - start, view));
      if (replacement) {
        result.push(replacement);
        replacement = void 0;
      }
      if (end > to)
        result.push(child.slice(to - start, child.size, view));
    }
  }
  return result;
}
function selectionFromDOM(view, origin = null) {
  let domSel = view.domSelectionRange(), doc3 = view.state.doc;
  if (!domSel.focusNode)
    return null;
  let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
  let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
  if (head < 0)
    return null;
  let $head = doc3.resolve(head), $anchor, selection;
  if (selectionCollapsed(domSel)) {
    $anchor = $head;
    while (nearestDesc && !nearestDesc.node)
      nearestDesc = nearestDesc.parent;
    let nearestDescNode = nearestDesc.node;
    if (nearestDesc && nearestDescNode.isAtom && NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
      let pos = nearestDesc.posBefore;
      selection = new NodeSelection(head == pos ? $head : doc3.resolve(pos));
    }
  } else {
    let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
    if (anchor < 0)
      return null;
    $anchor = doc3.resolve(anchor);
  }
  if (!selection) {
    let bias = origin == "pointer" || view.state.selection.head < $head.pos && !inWidget ? 1 : -1;
    selection = selectionBetween(view, $anchor, $head, bias);
  }
  return selection;
}
function editorOwnsSelection(view) {
  return view.editable ? view.hasFocus() : hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
}
function selectionToDOM(view, force = false) {
  let sel = view.state.selection;
  syncNodeSelection(view, sel);
  if (!editorOwnsSelection(view))
    return;
  if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {
    let domSel = view.domSelectionRange(), curSel = view.domObserver.currentSelection;
    if (domSel.anchorNode && curSel.anchorNode && isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
      view.input.mouseDown.delayedSelectionSync = true;
      view.domObserver.setCurSelection();
      return;
    }
  }
  view.domObserver.disconnectSelection();
  if (view.cursorWrapper) {
    selectCursorWrapper(view);
  } else {
    let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
    if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
      if (!sel.$from.parent.inlineContent)
        resetEditableFrom = temporarilyEditableNear(view, sel.from);
      if (!sel.empty && !sel.$from.parent.inlineContent)
        resetEditableTo = temporarilyEditableNear(view, sel.to);
    }
    view.docView.setSelection(anchor, head, view.root, force);
    if (brokenSelectBetweenUneditable) {
      if (resetEditableFrom)
        resetEditable(resetEditableFrom);
      if (resetEditableTo)
        resetEditable(resetEditableTo);
    }
    if (sel.visible) {
      view.dom.classList.remove("ProseMirror-hideselection");
    } else {
      view.dom.classList.add("ProseMirror-hideselection");
      if ("onselectionchange" in document)
        removeClassOnSelectionChange(view);
    }
  }
  view.domObserver.setCurSelection();
  view.domObserver.connectSelection();
}
var brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;
function temporarilyEditableNear(view, pos) {
  let { node, offset } = view.docView.domFromPos(pos, 0);
  let after = offset < node.childNodes.length ? node.childNodes[offset] : null;
  let before = offset ? node.childNodes[offset - 1] : null;
  if (safari && after && after.contentEditable == "false")
    return setEditable(after);
  if ((!after || after.contentEditable == "false") && (!before || before.contentEditable == "false")) {
    if (after)
      return setEditable(after);
    else if (before)
      return setEditable(before);
  }
}
function setEditable(element) {
  element.contentEditable = "true";
  if (safari && element.draggable) {
    element.draggable = false;
    element.wasDraggable = true;
  }
  return element;
}
function resetEditable(element) {
  element.contentEditable = "false";
  if (element.wasDraggable) {
    element.draggable = true;
    element.wasDraggable = null;
  }
}
function removeClassOnSelectionChange(view) {
  let doc3 = view.dom.ownerDocument;
  doc3.removeEventListener("selectionchange", view.input.hideSelectionGuard);
  let domSel = view.domSelectionRange();
  let node = domSel.anchorNode, offset = domSel.anchorOffset;
  doc3.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
    if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
      doc3.removeEventListener("selectionchange", view.input.hideSelectionGuard);
      setTimeout(() => {
        if (!editorOwnsSelection(view) || view.state.selection.visible)
          view.dom.classList.remove("ProseMirror-hideselection");
      }, 20);
    }
  });
}
function selectCursorWrapper(view) {
  let domSel = view.domSelection(), range = document.createRange();
  let node = view.cursorWrapper.dom, img = node.nodeName == "IMG";
  if (img)
    range.setEnd(node.parentNode, domIndex(node) + 1);
  else
    range.setEnd(node, 0);
  range.collapse(false);
  domSel.removeAllRanges();
  domSel.addRange(range);
  if (!img && !view.state.selection.visible && ie && ie_version <= 11) {
    node.disabled = true;
    node.disabled = false;
  }
}
function syncNodeSelection(view, sel) {
  if (sel instanceof NodeSelection) {
    let desc = view.docView.descAt(sel.from);
    if (desc != view.lastSelectedViewDesc) {
      clearNodeSelection(view);
      if (desc)
        desc.selectNode();
      view.lastSelectedViewDesc = desc;
    }
  } else {
    clearNodeSelection(view);
  }
}
function clearNodeSelection(view) {
  if (view.lastSelectedViewDesc) {
    if (view.lastSelectedViewDesc.parent)
      view.lastSelectedViewDesc.deselectNode();
    view.lastSelectedViewDesc = void 0;
  }
}
function selectionBetween(view, $anchor, $head, bias) {
  return view.someProp("createSelectionBetween", (f) => f(view, $anchor, $head)) || TextSelection.between($anchor, $head, bias);
}
function hasFocusAndSelection(view) {
  if (view.editable && !view.hasFocus())
    return false;
  return hasSelection(view);
}
function hasSelection(view) {
  let sel = view.domSelectionRange();
  if (!sel.anchorNode)
    return false;
  try {
    return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) && (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
  } catch (_) {
    return false;
  }
}
function anchorInRightPlace(view) {
  let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
  let domSel = view.domSelectionRange();
  return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
}
function moveSelectionBlock(state, dir) {
  let { $anchor, $head } = state.selection;
  let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
  let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
  return $start && Selection.findFrom($start, dir);
}
function apply(view, sel) {
  view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
  return true;
}
function selectHorizontally(view, dir, mods) {
  let sel = view.state.selection;
  if (sel instanceof TextSelection) {
    if (!sel.empty || mods.indexOf("s") > -1) {
      return false;
    } else if (view.endOfTextblock(dir > 0 ? "right" : "left")) {
      let next = moveSelectionBlock(view.state, dir);
      if (next && next instanceof NodeSelection)
        return apply(view, next);
      return false;
    } else if (!(mac2 && mods.indexOf("m") > -1)) {
      let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
      if (!node || node.isText)
        return false;
      let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
      if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
        return false;
      if (NodeSelection.isSelectable(node)) {
        return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));
      } else if (webkit) {
        return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)));
      } else {
        return false;
      }
    }
  } else if (sel instanceof NodeSelection && sel.node.isInline) {
    return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from));
  } else {
    let next = moveSelectionBlock(view.state, dir);
    if (next)
      return apply(view, next);
    return false;
  }
}
function nodeLen(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function isIgnorable(dom) {
  let desc = dom.pmViewDesc;
  return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != "BR");
}
function skipIgnoredNodesLeft(view) {
  let sel = view.domSelectionRange();
  let node = sel.focusNode, offset = sel.focusOffset;
  if (!node)
    return;
  let moveNode, moveOffset, force = false;
  if (gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset]))
    force = true;
  for (; ; ) {
    if (offset > 0) {
      if (node.nodeType != 1) {
        break;
      } else {
        let before = node.childNodes[offset - 1];
        if (isIgnorable(before)) {
          moveNode = node;
          moveOffset = --offset;
        } else if (before.nodeType == 3) {
          node = before;
          offset = node.nodeValue.length;
        } else
          break;
      }
    } else if (isBlockNode(node)) {
      break;
    } else {
      let prev = node.previousSibling;
      while (prev && isIgnorable(prev)) {
        moveNode = node.parentNode;
        moveOffset = domIndex(prev);
        prev = prev.previousSibling;
      }
      if (!prev) {
        node = node.parentNode;
        if (node == view.dom)
          break;
        offset = 0;
      } else {
        node = prev;
        offset = nodeLen(node);
      }
    }
  }
  if (force)
    setSelFocus(view, node, offset);
  else if (moveNode)
    setSelFocus(view, moveNode, moveOffset);
}
function skipIgnoredNodesRight(view) {
  let sel = view.domSelectionRange();
  let node = sel.focusNode, offset = sel.focusOffset;
  if (!node)
    return;
  let len = nodeLen(node);
  let moveNode, moveOffset;
  for (; ; ) {
    if (offset < len) {
      if (node.nodeType != 1)
        break;
      let after = node.childNodes[offset];
      if (isIgnorable(after)) {
        moveNode = node;
        moveOffset = ++offset;
      } else
        break;
    } else if (isBlockNode(node)) {
      break;
    } else {
      let next = node.nextSibling;
      while (next && isIgnorable(next)) {
        moveNode = next.parentNode;
        moveOffset = domIndex(next) + 1;
        next = next.nextSibling;
      }
      if (!next) {
        node = node.parentNode;
        if (node == view.dom)
          break;
        offset = len = 0;
      } else {
        node = next;
        offset = 0;
        len = nodeLen(node);
      }
    }
  }
  if (moveNode)
    setSelFocus(view, moveNode, moveOffset);
}
function isBlockNode(dom) {
  let desc = dom.pmViewDesc;
  return desc && desc.node && desc.node.isBlock;
}
function setSelFocus(view, node, offset) {
  let sel = view.domSelection();
  if (selectionCollapsed(sel)) {
    let range = document.createRange();
    range.setEnd(node, offset);
    range.setStart(node, offset);
    sel.removeAllRanges();
    sel.addRange(range);
  } else if (sel.extend) {
    sel.extend(node, offset);
  }
  view.domObserver.setCurSelection();
  let { state } = view;
  setTimeout(() => {
    if (view.state == state)
      selectionToDOM(view);
  }, 50);
}
function selectVertically(view, dir, mods) {
  let sel = view.state.selection;
  if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1)
    return false;
  if (mac2 && mods.indexOf("m") > -1)
    return false;
  let { $from, $to } = sel;
  if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
    let next = moveSelectionBlock(view.state, dir);
    if (next && next instanceof NodeSelection)
      return apply(view, next);
  }
  if (!$from.parent.inlineContent) {
    let side = dir < 0 ? $from : $to;
    let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
    return beyond ? apply(view, beyond) : false;
  }
  return false;
}
function stopNativeHorizontalDelete(view, dir) {
  if (!(view.state.selection instanceof TextSelection))
    return true;
  let { $head, $anchor, empty: empty2 } = view.state.selection;
  if (!$head.sameParent($anchor))
    return true;
  if (!empty2)
    return false;
  if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
    return true;
  let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
  if (nextNode && !nextNode.isText) {
    let tr = view.state.tr;
    if (dir < 0)
      tr.delete($head.pos - nextNode.nodeSize, $head.pos);
    else
      tr.delete($head.pos, $head.pos + nextNode.nodeSize);
    view.dispatch(tr);
    return true;
  }
  return false;
}
function switchEditable(view, node, state) {
  view.domObserver.stop();
  node.contentEditable = state;
  view.domObserver.start();
}
function safariDownArrowBug(view) {
  if (!safari || view.state.selection.$head.parentOffset > 0)
    return false;
  let { focusNode, focusOffset } = view.domSelectionRange();
  if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 && focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
    let child = focusNode.firstChild;
    switchEditable(view, child, "true");
    setTimeout(() => switchEditable(view, child, "false"), 20);
  }
  return false;
}
function getMods(event) {
  let result = "";
  if (event.ctrlKey)
    result += "c";
  if (event.metaKey)
    result += "m";
  if (event.altKey)
    result += "a";
  if (event.shiftKey)
    result += "s";
  return result;
}
function captureKeyDown(view, event) {
  let code = event.keyCode, mods = getMods(event);
  if (code == 8 || mac2 && code == 72 && mods == "c") {
    return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view);
  } else if (code == 46 || mac2 && code == 68 && mods == "c") {
    return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view);
  } else if (code == 13 || code == 27) {
    return true;
  } else if (code == 37 || mac2 && code == 66 && mods == "c") {
    return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view);
  } else if (code == 39 || mac2 && code == 70 && mods == "c") {
    return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view);
  } else if (code == 38 || mac2 && code == 80 && mods == "c") {
    return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view);
  } else if (code == 40 || mac2 && code == 78 && mods == "c") {
    return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view);
  } else if (mods == (mac2 ? "m" : "c") && (code == 66 || code == 73 || code == 89 || code == 90)) {
    return true;
  }
  return false;
}
function serializeForClipboard(view, slice2) {
  view.someProp("transformCopied", (f) => {
    slice2 = f(slice2, view);
  });
  let context = [], { content, openStart, openEnd } = slice2;
  while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
    openStart--;
    openEnd--;
    let node = content.firstChild;
    context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);
    content = node.content;
  }
  let serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
  let doc3 = detachedDoc(), wrap2 = doc3.createElement("div");
  wrap2.appendChild(serializer.serializeFragment(content, { document: doc3 }));
  let firstChild = wrap2.firstChild, needsWrap, wrappers = 0;
  while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
    for (let i = needsWrap.length - 1; i >= 0; i--) {
      let wrapper = doc3.createElement(needsWrap[i]);
      while (wrap2.firstChild)
        wrapper.appendChild(wrap2.firstChild);
      wrap2.appendChild(wrapper);
      wrappers++;
    }
    firstChild = wrap2.firstChild;
  }
  if (firstChild && firstChild.nodeType == 1)
    firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
  let text = view.someProp("clipboardTextSerializer", (f) => f(slice2, view)) || slice2.content.textBetween(0, slice2.content.size, "\n\n");
  return { dom: wrap2, text };
}
function parseFromClipboard(view, text, html, plainText, $context) {
  let inCode = $context.parent.type.spec.code;
  let dom, slice2;
  if (!html && !text)
    return null;
  let asText = text && (plainText || inCode || !html);
  if (asText) {
    view.someProp("transformPastedText", (f) => {
      text = f(text, inCode || plainText, view);
    });
    if (inCode)
      return text ? new Slice(Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) : Slice.empty;
    let parsed = view.someProp("clipboardTextParser", (f) => f(text, $context, plainText, view));
    if (parsed) {
      slice2 = parsed;
    } else {
      let marks2 = $context.marks();
      let { schema } = view.state, serializer = DOMSerializer.fromSchema(schema);
      dom = document.createElement("div");
      text.split(/(?:\r\n?|\n)+/).forEach((block) => {
        let p = dom.appendChild(document.createElement("p"));
        if (block)
          p.appendChild(serializer.serializeNode(schema.text(block, marks2)));
      });
    }
  } else {
    view.someProp("transformPastedHTML", (f) => {
      html = f(html, view);
    });
    dom = readHTML(html);
    if (webkit)
      restoreReplacedSpaces(dom);
  }
  let contextNode = dom && dom.querySelector("[data-pm-slice]");
  let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
  if (sliceData && sliceData[3])
    for (let i = +sliceData[3]; i > 0; i--) {
      let child = dom.firstChild;
      while (child && child.nodeType != 1)
        child = child.nextSibling;
      if (!child)
        break;
      dom = child;
    }
  if (!slice2) {
    let parser = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser2.fromSchema(view.state.schema);
    slice2 = parser.parseSlice(dom, {
      preserveWhitespace: !!(asText || sliceData),
      context: $context,
      ruleFromNode(dom2) {
        if (dom2.nodeName == "BR" && !dom2.nextSibling && dom2.parentNode && !inlineParents.test(dom2.parentNode.nodeName))
          return { ignore: true };
        return null;
      }
    });
  }
  if (sliceData) {
    slice2 = addContext(closeSlice(slice2, +sliceData[1], +sliceData[2]), sliceData[4]);
  } else {
    slice2 = Slice.maxOpen(normalizeSiblings(slice2.content, $context), true);
    if (slice2.openStart || slice2.openEnd) {
      let openStart = 0, openEnd = 0;
      for (let node = slice2.content.firstChild; openStart < slice2.openStart && !node.type.spec.isolating; openStart++, node = node.firstChild) {
      }
      for (let node = slice2.content.lastChild; openEnd < slice2.openEnd && !node.type.spec.isolating; openEnd++, node = node.lastChild) {
      }
      slice2 = closeSlice(slice2, openStart, openEnd);
    }
  }
  view.someProp("transformPasted", (f) => {
    slice2 = f(slice2, view);
  });
  return slice2;
}
var inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
function normalizeSiblings(fragment, $context) {
  if (fragment.childCount < 2)
    return fragment;
  for (let d = $context.depth; d >= 0; d--) {
    let parent = $context.node(d);
    let match = parent.contentMatchAt($context.index(d));
    let lastWrap, result = [];
    fragment.forEach((node) => {
      if (!result)
        return;
      let wrap2 = match.findWrapping(node.type), inLast;
      if (!wrap2)
        return result = null;
      if (inLast = result.length && lastWrap.length && addToSibling(wrap2, lastWrap, node, result[result.length - 1], 0)) {
        result[result.length - 1] = inLast;
      } else {
        if (result.length)
          result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
        let wrapped = withWrappers(node, wrap2);
        result.push(wrapped);
        match = match.matchType(wrapped.type);
        lastWrap = wrap2;
      }
    });
    if (result)
      return Fragment.from(result);
  }
  return fragment;
}
function withWrappers(node, wrap2, from2 = 0) {
  for (let i = wrap2.length - 1; i >= from2; i--)
    node = wrap2[i].create(null, Fragment.from(node));
  return node;
}
function addToSibling(wrap2, lastWrap, node, sibling, depth) {
  if (depth < wrap2.length && depth < lastWrap.length && wrap2[depth] == lastWrap[depth]) {
    let inner = addToSibling(wrap2, lastWrap, node, sibling.lastChild, depth + 1);
    if (inner)
      return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
    let match = sibling.contentMatchAt(sibling.childCount);
    if (match.matchType(depth == wrap2.length - 1 ? node.type : wrap2[depth + 1]))
      return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap2, depth + 1))));
  }
}
function closeRight(node, depth) {
  if (depth == 0)
    return node;
  let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
  let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true);
  return node.copy(fragment.append(fill));
}
function closeRange(fragment, side, from2, to, depth, openEnd) {
  let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content;
  if (depth < to - 1)
    inner = closeRange(inner, side, from2, to, depth + 1, openEnd);
  if (depth >= from2)
    inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner) : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true));
  return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner));
}
function closeSlice(slice2, openStart, openEnd) {
  if (openStart < slice2.openStart)
    slice2 = new Slice(closeRange(slice2.content, -1, openStart, slice2.openStart, 0, slice2.openEnd), openStart, slice2.openEnd);
  if (openEnd < slice2.openEnd)
    slice2 = new Slice(closeRange(slice2.content, 1, openEnd, slice2.openEnd, 0, 0), slice2.openStart, openEnd);
  return slice2;
}
var wrapMap = {
  thead: ["table"],
  tbody: ["table"],
  tfoot: ["table"],
  caption: ["table"],
  colgroup: ["table"],
  col: ["table", "colgroup"],
  tr: ["table", "tbody"],
  td: ["table", "tbody", "tr"],
  th: ["table", "tbody", "tr"]
};
var _detachedDoc = null;
function detachedDoc() {
  return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
}
function readHTML(html) {
  let metas = /^(\s*<meta [^>]*>)*/.exec(html);
  if (metas)
    html = html.slice(metas[0].length);
  let elt = detachedDoc().createElement("div");
  let firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap2;
  if (wrap2 = firstTag && wrapMap[firstTag[1].toLowerCase()])
    html = wrap2.map((n) => "<" + n + ">").join("") + html + wrap2.map((n) => "</" + n + ">").reverse().join("");
  elt.innerHTML = html;
  if (wrap2)
    for (let i = 0; i < wrap2.length; i++)
      elt = elt.querySelector(wrap2[i]) || elt;
  return elt;
}
function restoreReplacedSpaces(dom) {
  let nodes3 = dom.querySelectorAll(chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
  for (let i = 0; i < nodes3.length; i++) {
    let node = nodes3[i];
    if (node.childNodes.length == 1 && node.textContent == " " && node.parentNode)
      node.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node);
  }
}
function addContext(slice2, context) {
  if (!slice2.size)
    return slice2;
  let schema = slice2.content.firstChild.type.schema, array;
  try {
    array = JSON.parse(context);
  } catch (e) {
    return slice2;
  }
  let { content, openStart, openEnd } = slice2;
  for (let i = array.length - 2; i >= 0; i -= 2) {
    let type = schema.nodes[array[i]];
    if (!type || type.hasRequiredAttrs())
      break;
    content = Fragment.from(type.create(array[i + 1], content));
    openStart++;
    openEnd++;
  }
  return new Slice(content, openStart, openEnd);
}
var handlers = {};
var editHandlers = {};
var passiveHandlers = { touchstart: true, touchmove: true };
var InputState = class {
  constructor() {
    this.shiftKey = false;
    this.mouseDown = null;
    this.lastKeyCode = null;
    this.lastKeyCodeTime = 0;
    this.lastClick = { time: 0, x: 0, y: 0, type: "" };
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastIOSEnter = 0;
    this.lastIOSEnterFallbackTimeout = -1;
    this.lastFocus = 0;
    this.lastTouch = 0;
    this.lastAndroidDelete = 0;
    this.composing = false;
    this.composingTimeout = -1;
    this.compositionNodes = [];
    this.compositionEndedAt = -2e8;
    this.domChangeCount = 0;
    this.eventHandlers = /* @__PURE__ */ Object.create(null);
    this.hideSelectionGuard = null;
  }
};
function initInput(view) {
  for (let event in handlers) {
    let handler = handlers[event];
    view.dom.addEventListener(event, view.input.eventHandlers[event] = (event2) => {
      if (eventBelongsToView(view, event2) && !runCustomHandler(view, event2) && (view.editable || !(event2.type in editHandlers)))
        handler(view, event2);
    }, passiveHandlers[event] ? { passive: true } : void 0);
  }
  if (safari)
    view.dom.addEventListener("input", () => null);
  ensureListeners(view);
}
function setSelectionOrigin(view, origin) {
  view.input.lastSelectionOrigin = origin;
  view.input.lastSelectionTime = Date.now();
}
function destroyInput(view) {
  view.domObserver.stop();
  for (let type in view.input.eventHandlers)
    view.dom.removeEventListener(type, view.input.eventHandlers[type]);
  clearTimeout(view.input.composingTimeout);
  clearTimeout(view.input.lastIOSEnterFallbackTimeout);
}
function ensureListeners(view) {
  view.someProp("handleDOMEvents", (currentHandlers) => {
    for (let type in currentHandlers)
      if (!view.input.eventHandlers[type])
        view.dom.addEventListener(type, view.input.eventHandlers[type] = (event) => runCustomHandler(view, event));
  });
}
function runCustomHandler(view, event) {
  return view.someProp("handleDOMEvents", (handlers2) => {
    let handler = handlers2[event.type];
    return handler ? handler(view, event) || event.defaultPrevented : false;
  });
}
function eventBelongsToView(view, event) {
  if (!event.bubbles)
    return true;
  if (event.defaultPrevented)
    return false;
  for (let node = event.target; node != view.dom; node = node.parentNode)
    if (!node || node.nodeType == 11 || node.pmViewDesc && node.pmViewDesc.stopEvent(event))
      return false;
  return true;
}
function dispatchEvent(view, event) {
  if (!runCustomHandler(view, event) && handlers[event.type] && (view.editable || !(event.type in editHandlers)))
    handlers[event.type](view, event);
}
editHandlers.keydown = (view, _event) => {
  let event = _event;
  view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
  if (inOrNearComposition(view, event))
    return;
  view.input.lastKeyCode = event.keyCode;
  view.input.lastKeyCodeTime = Date.now();
  if (android && chrome && event.keyCode == 13)
    return;
  if (event.keyCode != 229)
    view.domObserver.forceFlush();
  if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
    let now = Date.now();
    view.input.lastIOSEnter = now;
    view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
      if (view.input.lastIOSEnter == now) {
        view.someProp("handleKeyDown", (f) => f(view, keyEvent(13, "Enter")));
        view.input.lastIOSEnter = 0;
      }
    }, 200);
  } else if (view.someProp("handleKeyDown", (f) => f(view, event)) || captureKeyDown(view, event)) {
    event.preventDefault();
  } else {
    setSelectionOrigin(view, "key");
  }
};
editHandlers.keyup = (view, event) => {
  if (event.keyCode == 16)
    view.input.shiftKey = false;
};
editHandlers.keypress = (view, _event) => {
  let event = _event;
  if (inOrNearComposition(view, event) || !event.charCode || event.ctrlKey && !event.altKey || mac2 && event.metaKey)
    return;
  if (view.someProp("handleKeyPress", (f) => f(view, event))) {
    event.preventDefault();
    return;
  }
  let sel = view.state.selection;
  if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
    let text = String.fromCharCode(event.charCode);
    if (!/[\r\n]/.test(text) && !view.someProp("handleTextInput", (f) => f(view, sel.$from.pos, sel.$to.pos, text)))
      view.dispatch(view.state.tr.insertText(text).scrollIntoView());
    event.preventDefault();
  }
};
function eventCoords(event) {
  return { left: event.clientX, top: event.clientY };
}
function isNear(event, click) {
  let dx = click.x - event.clientX, dy = click.y - event.clientY;
  return dx * dx + dy * dy < 100;
}
function runHandlerOnContext(view, propName, pos, inside, event) {
  if (inside == -1)
    return false;
  let $pos = view.state.doc.resolve(inside);
  for (let i = $pos.depth + 1; i > 0; i--) {
    if (view.someProp(propName, (f) => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true) : f(view, pos, $pos.node(i), $pos.before(i), event, false)))
      return true;
  }
  return false;
}
function updateSelection(view, selection, origin) {
  if (!view.focused)
    view.focus();
  let tr = view.state.tr.setSelection(selection);
  if (origin == "pointer")
    tr.setMeta("pointer", true);
  view.dispatch(tr);
}
function selectClickedLeaf(view, inside) {
  if (inside == -1)
    return false;
  let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
  if (node && node.isAtom && NodeSelection.isSelectable(node)) {
    updateSelection(view, new NodeSelection($pos), "pointer");
    return true;
  }
  return false;
}
function selectClickedNode(view, inside) {
  if (inside == -1)
    return false;
  let sel = view.state.selection, selectedNode, selectAt;
  if (sel instanceof NodeSelection)
    selectedNode = sel.node;
  let $pos = view.state.doc.resolve(inside);
  for (let i = $pos.depth + 1; i > 0; i--) {
    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
    if (NodeSelection.isSelectable(node)) {
      if (selectedNode && sel.$from.depth > 0 && i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
        selectAt = $pos.before(sel.$from.depth);
      else
        selectAt = $pos.before(i);
      break;
    }
  }
  if (selectAt != null) {
    updateSelection(view, NodeSelection.create(view.state.doc, selectAt), "pointer");
    return true;
  } else {
    return false;
  }
}
function handleSingleClick(view, pos, inside, event, selectNode) {
  return runHandlerOnContext(view, "handleClickOn", pos, inside, event) || view.someProp("handleClick", (f) => f(view, pos, event)) || (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
}
function handleDoubleClick(view, pos, inside, event) {
  return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) || view.someProp("handleDoubleClick", (f) => f(view, pos, event));
}
function handleTripleClick(view, pos, inside, event) {
  return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) || view.someProp("handleTripleClick", (f) => f(view, pos, event)) || defaultTripleClick(view, inside, event);
}
function defaultTripleClick(view, inside, event) {
  if (event.button != 0)
    return false;
  let doc3 = view.state.doc;
  if (inside == -1) {
    if (doc3.inlineContent) {
      updateSelection(view, TextSelection.create(doc3, 0, doc3.content.size), "pointer");
      return true;
    }
    return false;
  }
  let $pos = doc3.resolve(inside);
  for (let i = $pos.depth + 1; i > 0; i--) {
    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
    let nodePos = $pos.before(i);
    if (node.inlineContent)
      updateSelection(view, TextSelection.create(doc3, nodePos + 1, nodePos + 1 + node.content.size), "pointer");
    else if (NodeSelection.isSelectable(node))
      updateSelection(view, NodeSelection.create(doc3, nodePos), "pointer");
    else
      continue;
    return true;
  }
}
function forceDOMFlush(view) {
  return endComposition(view);
}
var selectNodeModifier = mac2 ? "metaKey" : "ctrlKey";
handlers.mousedown = (view, _event) => {
  let event = _event;
  view.input.shiftKey = event.shiftKey;
  let flushed = forceDOMFlush(view);
  let now = Date.now(), type = "singleClick";
  if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
    if (view.input.lastClick.type == "singleClick")
      type = "doubleClick";
    else if (view.input.lastClick.type == "doubleClick")
      type = "tripleClick";
  }
  view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
  let pos = view.posAtCoords(eventCoords(event));
  if (!pos)
    return;
  if (type == "singleClick") {
    if (view.input.mouseDown)
      view.input.mouseDown.done();
    view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
  } else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
    event.preventDefault();
  } else {
    setSelectionOrigin(view, "pointer");
  }
};
var MouseDown = class {
  constructor(view, pos, event, flushed) {
    this.view = view;
    this.pos = pos;
    this.event = event;
    this.flushed = flushed;
    this.delayedSelectionSync = false;
    this.mightDrag = null;
    this.startDoc = view.state.doc;
    this.selectNode = !!event[selectNodeModifier];
    this.allowDefault = event.shiftKey;
    let targetNode, targetPos;
    if (pos.inside > -1) {
      targetNode = view.state.doc.nodeAt(pos.inside);
      targetPos = pos.inside;
    } else {
      let $pos = view.state.doc.resolve(pos.pos);
      targetNode = $pos.parent;
      targetPos = $pos.depth ? $pos.before() : 0;
    }
    const target = flushed ? null : event.target;
    const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
    this.target = targetDesc ? targetDesc.dom : null;
    let { selection } = view.state;
    if (event.button == 0 && targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false || selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
      this.mightDrag = {
        node: targetNode,
        pos: targetPos,
        addAttr: !!(this.target && !this.target.draggable),
        setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
      };
    if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
      this.view.domObserver.stop();
      if (this.mightDrag.addAttr)
        this.target.draggable = true;
      if (this.mightDrag.setUneditable)
        setTimeout(() => {
          if (this.view.input.mouseDown == this)
            this.target.setAttribute("contentEditable", "false");
        }, 20);
      this.view.domObserver.start();
    }
    view.root.addEventListener("mouseup", this.up = this.up.bind(this));
    view.root.addEventListener("mousemove", this.move = this.move.bind(this));
    setSelectionOrigin(view, "pointer");
  }
  done() {
    this.view.root.removeEventListener("mouseup", this.up);
    this.view.root.removeEventListener("mousemove", this.move);
    if (this.mightDrag && this.target) {
      this.view.domObserver.stop();
      if (this.mightDrag.addAttr)
        this.target.removeAttribute("draggable");
      if (this.mightDrag.setUneditable)
        this.target.removeAttribute("contentEditable");
      this.view.domObserver.start();
    }
    if (this.delayedSelectionSync)
      setTimeout(() => selectionToDOM(this.view));
    this.view.input.mouseDown = null;
  }
  up(event) {
    this.done();
    if (!this.view.dom.contains(event.target))
      return;
    let pos = this.pos;
    if (this.view.state.doc != this.startDoc)
      pos = this.view.posAtCoords(eventCoords(event));
    this.updateAllowDefault(event);
    if (this.allowDefault || !pos) {
      setSelectionOrigin(this.view, "pointer");
    } else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
      event.preventDefault();
    } else if (event.button == 0 && (this.flushed || // Safari ignores clicks on draggable elements
    safari && this.mightDrag && !this.mightDrag.node.isAtom || // Chrome will sometimes treat a node selection as a
    // cursor, but still report that the node is selected
    // when asked through getSelection. You'll then get a
    // situation where clicking at the point where that
    // (hidden) cursor is doesn't change the selection, and
    // thus doesn't get a reaction from ProseMirror. This
    // works around that.
    chrome && !this.view.state.selection.visible && Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2)) {
      updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
      event.preventDefault();
    } else {
      setSelectionOrigin(this.view, "pointer");
    }
  }
  move(event) {
    this.updateAllowDefault(event);
    setSelectionOrigin(this.view, "pointer");
    if (event.buttons == 0)
      this.done();
  }
  updateAllowDefault(event) {
    if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 || Math.abs(this.event.y - event.clientY) > 4))
      this.allowDefault = true;
  }
};
handlers.touchstart = (view) => {
  view.input.lastTouch = Date.now();
  forceDOMFlush(view);
  setSelectionOrigin(view, "pointer");
};
handlers.touchmove = (view) => {
  view.input.lastTouch = Date.now();
  setSelectionOrigin(view, "pointer");
};
handlers.contextmenu = (view) => forceDOMFlush(view);
function inOrNearComposition(view, event) {
  if (view.composing)
    return true;
  if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
    view.input.compositionEndedAt = -2e8;
    return true;
  }
  return false;
}
var timeoutComposition = android ? 5e3 : -1;
editHandlers.compositionstart = editHandlers.compositionupdate = (view) => {
  if (!view.composing) {
    view.domObserver.flush();
    let { state } = view, $pos = state.selection.$from;
    if (state.selection.empty && (state.storedMarks || !$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some((m) => m.type.spec.inclusive === false))) {
      view.markCursor = view.state.storedMarks || $pos.marks();
      endComposition(view, true);
      view.markCursor = null;
    } else {
      endComposition(view);
      if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
        let sel = view.domSelectionRange();
        for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0; ) {
          let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];
          if (!before)
            break;
          if (before.nodeType == 3) {
            view.domSelection().collapse(before, before.nodeValue.length);
            break;
          } else {
            node = before;
            offset = -1;
          }
        }
      }
    }
    view.input.composing = true;
  }
  scheduleComposeEnd(view, timeoutComposition);
};
editHandlers.compositionend = (view, event) => {
  if (view.composing) {
    view.input.composing = false;
    view.input.compositionEndedAt = event.timeStamp;
    scheduleComposeEnd(view, 20);
  }
};
function scheduleComposeEnd(view, delay) {
  clearTimeout(view.input.composingTimeout);
  if (delay > -1)
    view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
}
function clearComposition(view) {
  if (view.composing) {
    view.input.composing = false;
    view.input.compositionEndedAt = timestampFromCustomEvent();
  }
  while (view.input.compositionNodes.length > 0)
    view.input.compositionNodes.pop().markParentsDirty();
}
function timestampFromCustomEvent() {
  let event = document.createEvent("Event");
  event.initEvent("event", true, true);
  return event.timeStamp;
}
function endComposition(view, forceUpdate = false) {
  if (android && view.domObserver.flushingSoon >= 0)
    return;
  view.domObserver.forceFlush();
  clearComposition(view);
  if (forceUpdate || view.docView && view.docView.dirty) {
    let sel = selectionFromDOM(view);
    if (sel && !sel.eq(view.state.selection))
      view.dispatch(view.state.tr.setSelection(sel));
    else
      view.updateState(view.state);
    return true;
  }
  return false;
}
function captureCopy(view, dom) {
  if (!view.dom.parentNode)
    return;
  let wrap2 = view.dom.parentNode.appendChild(document.createElement("div"));
  wrap2.appendChild(dom);
  wrap2.style.cssText = "position: fixed; left: -10000px; top: 10px";
  let sel = getSelection(), range = document.createRange();
  range.selectNodeContents(dom);
  view.dom.blur();
  sel.removeAllRanges();
  sel.addRange(range);
  setTimeout(() => {
    if (wrap2.parentNode)
      wrap2.parentNode.removeChild(wrap2);
    view.focus();
  }, 50);
}
var brokenClipboardAPI = ie && ie_version < 15 || ios && webkit_version < 604;
handlers.copy = editHandlers.cut = (view, _event) => {
  let event = _event;
  let sel = view.state.selection, cut = event.type == "cut";
  if (sel.empty)
    return;
  let data13 = brokenClipboardAPI ? null : event.clipboardData;
  let slice2 = sel.content(), { dom, text } = serializeForClipboard(view, slice2);
  if (data13) {
    event.preventDefault();
    data13.clearData();
    data13.setData("text/html", dom.innerHTML);
    data13.setData("text/plain", text);
  } else {
    captureCopy(view, dom);
  }
  if (cut)
    view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
};
function sliceSingleNode(slice2) {
  return slice2.openStart == 0 && slice2.openEnd == 0 && slice2.content.childCount == 1 ? slice2.content.firstChild : null;
}
function capturePaste(view, event) {
  if (!view.dom.parentNode)
    return;
  let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
  let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
  if (!plainText)
    target.contentEditable = "true";
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(() => {
    view.focus();
    if (target.parentNode)
      target.parentNode.removeChild(target);
    if (plainText)
      doPaste(view, target.value, null, view.input.shiftKey, event);
    else
      doPaste(view, target.textContent, target.innerHTML, view.input.shiftKey, event);
  }, 50);
}
function doPaste(view, text, html, preferPlain, event) {
  let slice2 = parseFromClipboard(view, text, html, preferPlain, view.state.selection.$from);
  if (view.someProp("handlePaste", (f) => f(view, event, slice2 || Slice.empty)))
    return true;
  if (!slice2)
    return false;
  let singleNode = sliceSingleNode(slice2);
  let tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, view.input.shiftKey) : view.state.tr.replaceSelection(slice2);
  view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
  return true;
}
editHandlers.paste = (view, _event) => {
  let event = _event;
  if (view.composing && !android)
    return;
  let data13 = brokenClipboardAPI ? null : event.clipboardData;
  if (data13 && doPaste(view, data13.getData("text/plain"), data13.getData("text/html"), view.input.shiftKey, event))
    event.preventDefault();
  else
    capturePaste(view, event);
};
var Dragging = class {
  constructor(slice2, move) {
    this.slice = slice2;
    this.move = move;
  }
};
var dragCopyModifier = mac2 ? "altKey" : "ctrlKey";
handlers.dragstart = (view, _event) => {
  let event = _event;
  let mouseDown = view.input.mouseDown;
  if (mouseDown)
    mouseDown.done();
  if (!event.dataTransfer)
    return;
  let sel = view.state.selection;
  let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
  if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1 : sel.to))
    ;
  else if (mouseDown && mouseDown.mightDrag) {
    view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));
  } else if (event.target && event.target.nodeType == 1) {
    let desc = view.docView.nearestDesc(event.target, true);
    if (desc && desc.node.type.spec.draggable && desc != view.docView)
      view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore)));
  }
  let slice2 = view.state.selection.content(), { dom, text } = serializeForClipboard(view, slice2);
  event.dataTransfer.clearData();
  event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
  event.dataTransfer.effectAllowed = "copyMove";
  if (!brokenClipboardAPI)
    event.dataTransfer.setData("text/plain", text);
  view.dragging = new Dragging(slice2, !event[dragCopyModifier]);
};
handlers.dragend = (view) => {
  let dragging = view.dragging;
  window.setTimeout(() => {
    if (view.dragging == dragging)
      view.dragging = null;
  }, 50);
};
editHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault();
editHandlers.drop = (view, _event) => {
  let event = _event;
  let dragging = view.dragging;
  view.dragging = null;
  if (!event.dataTransfer)
    return;
  let eventPos = view.posAtCoords(eventCoords(event));
  if (!eventPos)
    return;
  let $mouse = view.state.doc.resolve(eventPos.pos);
  let slice2 = dragging && dragging.slice;
  if (slice2) {
    view.someProp("transformPasted", (f) => {
      slice2 = f(slice2, view);
    });
  } else {
    slice2 = parseFromClipboard(view, event.dataTransfer.getData(brokenClipboardAPI ? "Text" : "text/plain"), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
  }
  let move = !!(dragging && !event[dragCopyModifier]);
  if (view.someProp("handleDrop", (f) => f(view, event, slice2 || Slice.empty, move))) {
    event.preventDefault();
    return;
  }
  if (!slice2)
    return;
  event.preventDefault();
  let insertPos = slice2 ? dropPoint(view.state.doc, $mouse.pos, slice2) : $mouse.pos;
  if (insertPos == null)
    insertPos = $mouse.pos;
  let tr = view.state.tr;
  if (move)
    tr.deleteSelection();
  let pos = tr.mapping.map(insertPos);
  let isNode = slice2.openStart == 0 && slice2.openEnd == 0 && slice2.content.childCount == 1;
  let beforeInsert = tr.doc;
  if (isNode)
    tr.replaceRangeWith(pos, pos, slice2.content.firstChild);
  else
    tr.replaceRange(pos, pos, slice2);
  if (tr.doc.eq(beforeInsert))
    return;
  let $pos = tr.doc.resolve(pos);
  if (isNode && NodeSelection.isSelectable(slice2.content.firstChild) && $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice2.content.firstChild)) {
    tr.setSelection(new NodeSelection($pos));
  } else {
    let end = tr.mapping.map(insertPos);
    tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo);
    tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
  }
  view.focus();
  view.dispatch(tr.setMeta("uiEvent", "drop"));
};
handlers.focus = (view) => {
  view.input.lastFocus = Date.now();
  if (!view.focused) {
    view.domObserver.stop();
    view.dom.classList.add("ProseMirror-focused");
    view.domObserver.start();
    view.focused = true;
    setTimeout(() => {
      if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelectionRange()))
        selectionToDOM(view);
    }, 20);
  }
};
handlers.blur = (view, _event) => {
  let event = _event;
  if (view.focused) {
    view.domObserver.stop();
    view.dom.classList.remove("ProseMirror-focused");
    view.domObserver.start();
    if (event.relatedTarget && view.dom.contains(event.relatedTarget))
      view.domObserver.currentSelection.clear();
    view.focused = false;
  }
};
handlers.beforeinput = (view, _event) => {
  let event = _event;
  if (chrome && android && event.inputType == "deleteContentBackward") {
    view.domObserver.flushSoon();
    let { domChangeCount } = view.input;
    setTimeout(() => {
      if (view.input.domChangeCount != domChangeCount)
        return;
      view.dom.blur();
      view.focus();
      if (view.someProp("handleKeyDown", (f) => f(view, keyEvent(8, "Backspace"))))
        return;
      let { $cursor } = view.state.selection;
      if ($cursor && $cursor.pos > 0)
        view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
    }, 50);
  }
};
for (let prop in editHandlers)
  handlers[prop] = editHandlers[prop];
function compareObjs(a, b) {
  if (a == b)
    return true;
  for (let p in a)
    if (a[p] !== b[p])
      return false;
  for (let p in b)
    if (!(p in a))
      return false;
  return true;
}
var WidgetType = class _WidgetType {
  constructor(toDOM, spec) {
    this.toDOM = toDOM;
    this.spec = spec || noSpec;
    this.side = this.spec.side || 0;
  }
  map(mapping, span, offset, oldOffset) {
    let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
    return deleted ? null : new Decoration(pos - offset, pos - offset, this);
  }
  valid() {
    return true;
  }
  eq(other) {
    return this == other || other instanceof _WidgetType && (this.spec.key && this.spec.key == other.spec.key || this.toDOM == other.toDOM && compareObjs(this.spec, other.spec));
  }
  destroy(node) {
    if (this.spec.destroy)
      this.spec.destroy(node);
  }
};
var InlineType = class _InlineType {
  constructor(attrs, spec) {
    this.attrs = attrs;
    this.spec = spec || noSpec;
  }
  map(mapping, span, offset, oldOffset) {
    let from2 = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
    let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
    return from2 >= to ? null : new Decoration(from2, to, this);
  }
  valid(_, span) {
    return span.from < span.to;
  }
  eq(other) {
    return this == other || other instanceof _InlineType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);
  }
  static is(span) {
    return span.type instanceof _InlineType;
  }
  destroy() {
  }
};
var NodeType2 = class _NodeType {
  constructor(attrs, spec) {
    this.attrs = attrs;
    this.spec = spec || noSpec;
  }
  map(mapping, span, offset, oldOffset) {
    let from2 = mapping.mapResult(span.from + oldOffset, 1);
    if (from2.deleted)
      return null;
    let to = mapping.mapResult(span.to + oldOffset, -1);
    if (to.deleted || to.pos <= from2.pos)
      return null;
    return new Decoration(from2.pos - offset, to.pos - offset, this);
  }
  valid(node, span) {
    let { index, offset } = node.content.findIndex(span.from), child;
    return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to;
  }
  eq(other) {
    return this == other || other instanceof _NodeType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);
  }
  destroy() {
  }
};
var Decoration = class _Decoration {
  /**
  @internal
  */
  constructor(from2, to, type) {
    this.from = from2;
    this.to = to;
    this.type = type;
  }
  /**
  @internal
  */
  copy(from2, to) {
    return new _Decoration(from2, to, this.type);
  }
  /**
  @internal
  */
  eq(other, offset = 0) {
    return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;
  }
  /**
  @internal
  */
  map(mapping, offset, oldOffset) {
    return this.type.map(mapping, this, offset, oldOffset);
  }
  /**
  Creates a widget decoration, which is a DOM node that's shown in
  the document at the given position. It is recommended that you
  delay rendering the widget by passing a function that will be
  called when the widget is actually drawn in a view, but you can
  also directly pass a DOM node. `getPos` can be used to find the
  widget's current document position.
  */
  static widget(pos, toDOM, spec) {
    return new _Decoration(pos, pos, new WidgetType(toDOM, spec));
  }
  /**
  Creates an inline decoration, which adds the given attributes to
  each inline node between `from` and `to`.
  */
  static inline(from2, to, attrs, spec) {
    return new _Decoration(from2, to, new InlineType(attrs, spec));
  }
  /**
  Creates a node decoration. `from` and `to` should point precisely
  before and after a node in the document. That node, and only that
  node, will receive the given attributes.
  */
  static node(from2, to, attrs, spec) {
    return new _Decoration(from2, to, new NodeType2(attrs, spec));
  }
  /**
  The spec provided when creating this decoration. Can be useful
  if you've stored extra information in that object.
  */
  get spec() {
    return this.type.spec;
  }
  /**
  @internal
  */
  get inline() {
    return this.type instanceof InlineType;
  }
};
var none = [];
var noSpec = {};
var DecorationSet = class _DecorationSet {
  /**
  @internal
  */
  constructor(local, children) {
    this.local = local.length ? local : none;
    this.children = children.length ? children : none;
  }
  /**
  Create a set of decorations, using the structure of the given
  document.
  */
  static create(doc3, decorations) {
    return decorations.length ? buildTree(decorations, doc3, 0, noSpec) : empty;
  }
  /**
  Find all decorations in this set which touch the given range
  (including decorations that start or end directly at the
  boundaries) and match the given predicate on their spec. When
  `start` and `end` are omitted, all decorations in the set are
  considered. When `predicate` isn't given, all decorations are
  assumed to match.
  */
  find(start, end, predicate) {
    let result = [];
    this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
    return result;
  }
  findInner(start, end, result, offset, predicate) {
    for (let i = 0; i < this.local.length; i++) {
      let span = this.local[i];
      if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
        result.push(span.copy(span.from + offset, span.to + offset));
    }
    for (let i = 0; i < this.children.length; i += 3) {
      if (this.children[i] < end && this.children[i + 1] > start) {
        let childOff = this.children[i] + 1;
        this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
      }
    }
  }
  /**
  Map the set of decorations in response to a change in the
  document.
  */
  map(mapping, doc3, options) {
    if (this == empty || mapping.maps.length == 0)
      return this;
    return this.mapInner(mapping, doc3, 0, 0, options || noSpec);
  }
  /**
  @internal
  */
  mapInner(mapping, node, offset, oldOffset, options) {
    let newLocal;
    for (let i = 0; i < this.local.length; i++) {
      let mapped = this.local[i].map(mapping, offset, oldOffset);
      if (mapped && mapped.type.valid(node, mapped))
        (newLocal || (newLocal = [])).push(mapped);
      else if (options.onRemove)
        options.onRemove(this.local[i].spec);
    }
    if (this.children.length)
      return mapChildren(this.children, newLocal || [], mapping, node, offset, oldOffset, options);
    else
      return newLocal ? new _DecorationSet(newLocal.sort(byPos), none) : empty;
  }
  /**
  Add the given array of decorations to the ones in the set,
  producing a new set. Needs access to the current document to
  create the appropriate tree structure.
  */
  add(doc3, decorations) {
    if (!decorations.length)
      return this;
    if (this == empty)
      return _DecorationSet.create(doc3, decorations);
    return this.addInner(doc3, decorations, 0);
  }
  addInner(doc3, decorations, offset) {
    let children, childIndex = 0;
    doc3.forEach((childNode, childOffset) => {
      let baseOffset = childOffset + offset, found2;
      if (!(found2 = takeSpansForNode(decorations, childNode, baseOffset)))
        return;
      if (!children)
        children = this.children.slice();
      while (childIndex < children.length && children[childIndex] < childOffset)
        childIndex += 3;
      if (children[childIndex] == childOffset)
        children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found2, baseOffset + 1);
      else
        children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found2, childNode, baseOffset + 1, noSpec));
      childIndex += 3;
    });
    let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
    for (let i = 0; i < local.length; i++)
      if (!local[i].type.valid(doc3, local[i]))
        local.splice(i--, 1);
    return new _DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
  }
  /**
  Create a new set that contains the decorations in this set, minus
  the ones in the given array.
  */
  remove(decorations) {
    if (decorations.length == 0 || this == empty)
      return this;
    return this.removeInner(decorations, 0);
  }
  removeInner(decorations, offset) {
    let children = this.children, local = this.local;
    for (let i = 0; i < children.length; i += 3) {
      let found2;
      let from2 = children[i] + offset, to = children[i + 1] + offset;
      for (let j = 0, span; j < decorations.length; j++)
        if (span = decorations[j]) {
          if (span.from > from2 && span.to < to) {
            decorations[j] = null;
            (found2 || (found2 = [])).push(span);
          }
        }
      if (!found2)
        continue;
      if (children == this.children)
        children = this.children.slice();
      let removed = children[i + 2].removeInner(found2, from2 + 1);
      if (removed != empty) {
        children[i + 2] = removed;
      } else {
        children.splice(i, 3);
        i -= 3;
      }
    }
    if (local.length) {
      for (let i = 0, span; i < decorations.length; i++)
        if (span = decorations[i]) {
          for (let j = 0; j < local.length; j++)
            if (local[j].eq(span, offset)) {
              if (local == this.local)
                local = this.local.slice();
              local.splice(j--, 1);
            }
        }
    }
    if (children == this.children && local == this.local)
      return this;
    return local.length || children.length ? new _DecorationSet(local, children) : empty;
  }
  /**
  @internal
  */
  forChild(offset, node) {
    if (this == empty)
      return this;
    if (node.isLeaf)
      return _DecorationSet.empty;
    let child, local;
    for (let i = 0; i < this.children.length; i += 3)
      if (this.children[i] >= offset) {
        if (this.children[i] == offset)
          child = this.children[i + 2];
        break;
      }
    let start = offset + 1, end = start + node.content.size;
    for (let i = 0; i < this.local.length; i++) {
      let dec = this.local[i];
      if (dec.from < end && dec.to > start && dec.type instanceof InlineType) {
        let from2 = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
        if (from2 < to)
          (local || (local = [])).push(dec.copy(from2, to));
      }
    }
    if (local) {
      let localSet = new _DecorationSet(local.sort(byPos), none);
      return child ? new DecorationGroup([localSet, child]) : localSet;
    }
    return child || empty;
  }
  /**
  @internal
  */
  eq(other) {
    if (this == other)
      return true;
    if (!(other instanceof _DecorationSet) || this.local.length != other.local.length || this.children.length != other.children.length)
      return false;
    for (let i = 0; i < this.local.length; i++)
      if (!this.local[i].eq(other.local[i]))
        return false;
    for (let i = 0; i < this.children.length; i += 3)
      if (this.children[i] != other.children[i] || this.children[i + 1] != other.children[i + 1] || !this.children[i + 2].eq(other.children[i + 2]))
        return false;
    return true;
  }
  /**
  @internal
  */
  locals(node) {
    return removeOverlap(this.localsInner(node));
  }
  /**
  @internal
  */
  localsInner(node) {
    if (this == empty)
      return none;
    if (node.inlineContent || !this.local.some(InlineType.is))
      return this.local;
    let result = [];
    for (let i = 0; i < this.local.length; i++) {
      if (!(this.local[i].type instanceof InlineType))
        result.push(this.local[i]);
    }
    return result;
  }
};
DecorationSet.empty = new DecorationSet([], []);
DecorationSet.removeOverlap = removeOverlap;
var empty = DecorationSet.empty;
var DecorationGroup = class _DecorationGroup {
  constructor(members) {
    this.members = members;
  }
  map(mapping, doc3) {
    const mappedDecos = this.members.map((member) => member.map(mapping, doc3, noSpec));
    return _DecorationGroup.from(mappedDecos);
  }
  forChild(offset, child) {
    if (child.isLeaf)
      return DecorationSet.empty;
    let found2 = [];
    for (let i = 0; i < this.members.length; i++) {
      let result = this.members[i].forChild(offset, child);
      if (result == empty)
        continue;
      if (result instanceof _DecorationGroup)
        found2 = found2.concat(result.members);
      else
        found2.push(result);
    }
    return _DecorationGroup.from(found2);
  }
  eq(other) {
    if (!(other instanceof _DecorationGroup) || other.members.length != this.members.length)
      return false;
    for (let i = 0; i < this.members.length; i++)
      if (!this.members[i].eq(other.members[i]))
        return false;
    return true;
  }
  locals(node) {
    let result, sorted = true;
    for (let i = 0; i < this.members.length; i++) {
      let locals = this.members[i].localsInner(node);
      if (!locals.length)
        continue;
      if (!result) {
        result = locals;
      } else {
        if (sorted) {
          result = result.slice();
          sorted = false;
        }
        for (let j = 0; j < locals.length; j++)
          result.push(locals[j]);
      }
    }
    return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
  }
  // Create a group for the given array of decoration sets, or return
  // a single set when possible.
  static from(members) {
    switch (members.length) {
      case 0:
        return empty;
      case 1:
        return members[0];
      default:
        return new _DecorationGroup(members.every((m) => m instanceof DecorationSet) ? members : members.reduce((r, m) => r.concat(m instanceof DecorationSet ? m : m.members), []));
    }
  }
};
function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
  let children = oldChildren.slice();
  for (let i = 0, baseOffset = oldOffset; i < mapping.maps.length; i++) {
    let moved = 0;
    mapping.maps[i].forEach((oldStart, oldEnd, newStart, newEnd) => {
      let dSize = newEnd - newStart - (oldEnd - oldStart);
      for (let i2 = 0; i2 < children.length; i2 += 3) {
        let end = children[i2 + 1];
        if (end < 0 || oldStart > end + baseOffset - moved)
          continue;
        let start = children[i2] + baseOffset - moved;
        if (oldEnd >= start) {
          children[i2 + 1] = oldStart <= start ? -2 : -1;
        } else if (newStart >= offset && dSize) {
          children[i2] += dSize;
          children[i2 + 1] += dSize;
        }
      }
      moved += dSize;
    });
    baseOffset = mapping.maps[i].map(baseOffset, -1);
  }
  let mustRebuild = false;
  for (let i = 0; i < children.length; i += 3)
    if (children[i + 1] < 0) {
      if (children[i + 1] == -2) {
        mustRebuild = true;
        children[i + 1] = -1;
        continue;
      }
      let from2 = mapping.map(oldChildren[i] + oldOffset), fromLocal = from2 - offset;
      if (fromLocal < 0 || fromLocal >= node.content.size) {
        mustRebuild = true;
        continue;
      }
      let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset;
      let { index, offset: childOffset } = node.content.findIndex(fromLocal);
      let childNode = node.maybeChild(index);
      if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
        let mapped = children[i + 2].mapInner(mapping, childNode, from2 + 1, oldChildren[i] + oldOffset + 1, options);
        if (mapped != empty) {
          children[i] = fromLocal;
          children[i + 1] = toLocal;
          children[i + 2] = mapped;
        } else {
          children[i + 1] = -2;
          mustRebuild = true;
        }
      } else {
        mustRebuild = true;
      }
    }
  if (mustRebuild) {
    let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);
    let built = buildTree(decorations, node, 0, options);
    newLocal = built.local;
    for (let i = 0; i < children.length; i += 3)
      if (children[i + 1] < 0) {
        children.splice(i, 3);
        i -= 3;
      }
    for (let i = 0, j = 0; i < built.children.length; i += 3) {
      let from2 = built.children[i];
      while (j < children.length && children[j] < from2)
        j += 3;
      children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2]);
    }
  }
  return new DecorationSet(newLocal.sort(byPos), children);
}
function moveSpans(spans, offset) {
  if (!offset || !spans.length)
    return spans;
  let result = [];
  for (let i = 0; i < spans.length; i++) {
    let span = spans[i];
    result.push(new Decoration(span.from + offset, span.to + offset, span.type));
  }
  return result;
}
function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
  function gather(set, oldOffset2) {
    for (let i = 0; i < set.local.length; i++) {
      let mapped = set.local[i].map(mapping, offset, oldOffset2);
      if (mapped)
        decorations.push(mapped);
      else if (options.onRemove)
        options.onRemove(set.local[i].spec);
    }
    for (let i = 0; i < set.children.length; i += 3)
      gather(set.children[i + 2], set.children[i] + oldOffset2 + 1);
  }
  for (let i = 0; i < children.length; i += 3)
    if (children[i + 1] == -1)
      gather(children[i + 2], oldChildren[i] + oldOffset + 1);
  return decorations;
}
function takeSpansForNode(spans, node, offset) {
  if (node.isLeaf)
    return null;
  let end = offset + node.nodeSize, found2 = null;
  for (let i = 0, span; i < spans.length; i++) {
    if ((span = spans[i]) && span.from > offset && span.to < end) {
      (found2 || (found2 = [])).push(span);
      spans[i] = null;
    }
  }
  return found2;
}
function withoutNulls(array) {
  let result = [];
  for (let i = 0; i < array.length; i++)
    if (array[i] != null)
      result.push(array[i]);
  return result;
}
function buildTree(spans, node, offset, options) {
  let children = [], hasNulls = false;
  node.forEach((childNode, localStart) => {
    let found2 = takeSpansForNode(spans, childNode, localStart + offset);
    if (found2) {
      hasNulls = true;
      let subtree = buildTree(found2, childNode, offset + localStart + 1, options);
      if (subtree != empty)
        children.push(localStart, localStart + childNode.nodeSize, subtree);
    }
  });
  let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
  for (let i = 0; i < locals.length; i++)
    if (!locals[i].type.valid(node, locals[i])) {
      if (options.onRemove)
        options.onRemove(locals[i].spec);
      locals.splice(i--, 1);
    }
  return locals.length || children.length ? new DecorationSet(locals, children) : empty;
}
function byPos(a, b) {
  return a.from - b.from || a.to - b.to;
}
function removeOverlap(spans) {
  let working = spans;
  for (let i = 0; i < working.length - 1; i++) {
    let span = working[i];
    if (span.from != span.to)
      for (let j = i + 1; j < working.length; j++) {
        let next = working[j];
        if (next.from == span.from) {
          if (next.to != span.to) {
            if (working == spans)
              working = spans.slice();
            working[j] = next.copy(next.from, span.to);
            insertAhead(working, j + 1, next.copy(span.to, next.to));
          }
          continue;
        } else {
          if (next.from < span.to) {
            if (working == spans)
              working = spans.slice();
            working[i] = span.copy(span.from, next.from);
            insertAhead(working, j, span.copy(next.from, span.to));
          }
          break;
        }
      }
  }
  return working;
}
function insertAhead(array, i, deco) {
  while (i < array.length && byPos(deco, array[i]) > 0)
    i++;
  array.splice(i, 0, deco);
}
function viewDecorations(view) {
  let found2 = [];
  view.someProp("decorations", (f) => {
    let result = f(view.state);
    if (result && result != empty)
      found2.push(result);
  });
  if (view.cursorWrapper)
    found2.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
  return DecorationGroup.from(found2);
}
var observeOptions = {
  childList: true,
  characterData: true,
  characterDataOldValue: true,
  attributes: true,
  attributeOldValue: true,
  subtree: true
};
var useCharData = ie && ie_version <= 11;
var SelectionState = class {
  constructor() {
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  set(sel) {
    this.anchorNode = sel.anchorNode;
    this.anchorOffset = sel.anchorOffset;
    this.focusNode = sel.focusNode;
    this.focusOffset = sel.focusOffset;
  }
  clear() {
    this.anchorNode = this.focusNode = null;
  }
  eq(sel) {
    return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset && sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
  }
};
var DOMObserver = class {
  constructor(view, handleDOMChange) {
    this.view = view;
    this.handleDOMChange = handleDOMChange;
    this.queue = [];
    this.flushingSoon = -1;
    this.observer = null;
    this.currentSelection = new SelectionState();
    this.onCharData = null;
    this.suppressingSelectionUpdates = false;
    this.observer = window.MutationObserver && new window.MutationObserver((mutations) => {
      for (let i = 0; i < mutations.length; i++)
        this.queue.push(mutations[i]);
      if (ie && ie_version <= 11 && mutations.some((m) => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
        this.flushSoon();
      else
        this.flush();
    });
    if (useCharData) {
      this.onCharData = (e) => {
        this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue });
        this.flushSoon();
      };
    }
    this.onSelectionChange = this.onSelectionChange.bind(this);
  }
  flushSoon() {
    if (this.flushingSoon < 0)
      this.flushingSoon = window.setTimeout(() => {
        this.flushingSoon = -1;
        this.flush();
      }, 20);
  }
  forceFlush() {
    if (this.flushingSoon > -1) {
      window.clearTimeout(this.flushingSoon);
      this.flushingSoon = -1;
      this.flush();
    }
  }
  start() {
    if (this.observer) {
      this.observer.takeRecords();
      this.observer.observe(this.view.dom, observeOptions);
    }
    if (this.onCharData)
      this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
    this.connectSelection();
  }
  stop() {
    if (this.observer) {
      let take = this.observer.takeRecords();
      if (take.length) {
        for (let i = 0; i < take.length; i++)
          this.queue.push(take[i]);
        window.setTimeout(() => this.flush(), 20);
      }
      this.observer.disconnect();
    }
    if (this.onCharData)
      this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    this.disconnectSelection();
  }
  connectSelection() {
    this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
  }
  disconnectSelection() {
    this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
  }
  suppressSelectionUpdates() {
    this.suppressingSelectionUpdates = true;
    setTimeout(() => this.suppressingSelectionUpdates = false, 50);
  }
  onSelectionChange() {
    if (!hasFocusAndSelection(this.view))
      return;
    if (this.suppressingSelectionUpdates)
      return selectionToDOM(this.view);
    if (ie && ie_version <= 11 && !this.view.state.selection.empty) {
      let sel = this.view.domSelectionRange();
      if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
        return this.flushSoon();
    }
    this.flush();
  }
  setCurSelection() {
    this.currentSelection.set(this.view.domSelectionRange());
  }
  ignoreSelectionChange(sel) {
    if (!sel.focusNode)
      return true;
    let ancestors = /* @__PURE__ */ new Set(), container;
    for (let scan = sel.focusNode; scan; scan = parentNode(scan))
      ancestors.add(scan);
    for (let scan = sel.anchorNode; scan; scan = parentNode(scan))
      if (ancestors.has(scan)) {
        container = scan;
        break;
      }
    let desc = container && this.view.docView.nearestDesc(container);
    if (desc && desc.ignoreMutation({
      type: "selection",
      target: container.nodeType == 3 ? container.parentNode : container
    })) {
      this.setCurSelection();
      return true;
    }
  }
  flush() {
    let { view } = this;
    if (!view.docView || this.flushingSoon > -1)
      return;
    let mutations = this.observer ? this.observer.takeRecords() : [];
    if (this.queue.length) {
      mutations = this.queue.concat(mutations);
      this.queue.length = 0;
    }
    let sel = view.domSelectionRange();
    let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
    let from2 = -1, to = -1, typeOver = false, added = [];
    if (view.editable) {
      for (let i = 0; i < mutations.length; i++) {
        let result = this.registerMutation(mutations[i], added);
        if (result) {
          from2 = from2 < 0 ? result.from : Math.min(result.from, from2);
          to = to < 0 ? result.to : Math.max(result.to, to);
          if (result.typeOver)
            typeOver = true;
        }
      }
    }
    if (gecko && added.length > 1) {
      let brs = added.filter((n) => n.nodeName == "BR");
      if (brs.length == 2) {
        let a = brs[0], b = brs[1];
        if (a.parentNode && a.parentNode.parentNode == b.parentNode)
          b.remove();
        else
          a.remove();
      }
    }
    let readSel = null;
    if (from2 < 0 && newSel && view.input.lastFocus > Date.now() - 200 && Math.max(view.input.lastTouch, view.input.lastClick.time) < Date.now() - 300 && selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) && readSel.eq(Selection.near(view.state.doc.resolve(0), 1))) {
      view.input.lastFocus = 0;
      selectionToDOM(view);
      this.currentSelection.set(sel);
      view.scrollToSelection();
    } else if (from2 > -1 || newSel) {
      if (from2 > -1) {
        view.docView.markDirty(from2, to);
        checkCSS(view);
      }
      this.handleDOMChange(from2, to, typeOver, added);
      if (view.docView && view.docView.dirty)
        view.updateState(view.state);
      else if (!this.currentSelection.eq(sel))
        selectionToDOM(view);
      this.currentSelection.set(sel);
    }
  }
  registerMutation(mut, added) {
    if (added.indexOf(mut.target) > -1)
      return null;
    let desc = this.view.docView.nearestDesc(mut.target);
    if (mut.type == "attributes" && (desc == this.view.docView || mut.attributeName == "contenteditable" || // Firefox sometimes fires spurious events for null/empty styles
    mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style")))
      return null;
    if (!desc || desc.ignoreMutation(mut))
      return null;
    if (mut.type == "childList") {
      for (let i = 0; i < mut.addedNodes.length; i++)
        added.push(mut.addedNodes[i]);
      if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
        return { from: desc.posBefore, to: desc.posAfter };
      let prev = mut.previousSibling, next = mut.nextSibling;
      if (ie && ie_version <= 11 && mut.addedNodes.length) {
        for (let i = 0; i < mut.addedNodes.length; i++) {
          let { previousSibling, nextSibling } = mut.addedNodes[i];
          if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
            prev = previousSibling;
          if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
            next = nextSibling;
        }
      }
      let fromOffset = prev && prev.parentNode == mut.target ? domIndex(prev) + 1 : 0;
      let from2 = desc.localPosFromDOM(mut.target, fromOffset, -1);
      let toOffset = next && next.parentNode == mut.target ? domIndex(next) : mut.target.childNodes.length;
      let to = desc.localPosFromDOM(mut.target, toOffset, 1);
      return { from: from2, to };
    } else if (mut.type == "attributes") {
      return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
    } else {
      return {
        from: desc.posAtStart,
        to: desc.posAtEnd,
        // An event was generated for a text change that didn't change
        // any text. Mark the dom change to fall back to assuming the
        // selection was typed over with an identical value if it can't
        // find another change.
        typeOver: mut.target.nodeValue == mut.oldValue
      };
    }
  }
};
var cssChecked = /* @__PURE__ */ new WeakMap();
var cssCheckWarned = false;
function checkCSS(view) {
  if (cssChecked.has(view))
    return;
  cssChecked.set(view, null);
  if (["normal", "nowrap", "pre-line"].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
    view.requiresGeckoHackNode = gecko;
    if (cssCheckWarned)
      return;
    console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
    cssCheckWarned = true;
  }
}
function safariShadowSelectionRange(view) {
  let found2;
  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found2 = event.getTargetRanges()[0];
  }
  view.dom.addEventListener("beforeinput", read, true);
  document.execCommand("indent");
  view.dom.removeEventListener("beforeinput", read, true);
  let anchorNode = found2.startContainer, anchorOffset = found2.startOffset;
  let focusNode = found2.endContainer, focusOffset = found2.endOffset;
  let currentAnchor = view.domAtPos(view.state.selection.anchor);
  if (isEquivalentPosition(currentAnchor.node, currentAnchor.offset, focusNode, focusOffset))
    [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return { anchorNode, anchorOffset, focusNode, focusOffset };
}
function parseBetween(view, from_, to_) {
  let { node: parent, fromOffset, toOffset, from: from2, to } = view.docView.parseRange(from_, to_);
  let domSel = view.domSelectionRange();
  let find2;
  let anchor = domSel.anchorNode;
  if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
    find2 = [{ node: anchor, offset: domSel.anchorOffset }];
    if (!selectionCollapsed(domSel))
      find2.push({ node: domSel.focusNode, offset: domSel.focusOffset });
  }
  if (chrome && view.input.lastKeyCode === 8) {
    for (let off = toOffset; off > fromOffset; off--) {
      let node = parent.childNodes[off - 1], desc = node.pmViewDesc;
      if (node.nodeName == "BR" && !desc) {
        toOffset = off;
        break;
      }
      if (!desc || desc.size)
        break;
    }
  }
  let startDoc = view.state.doc;
  let parser = view.someProp("domParser") || DOMParser2.fromSchema(view.state.schema);
  let $from = startDoc.resolve(from2);
  let sel = null, doc3 = parser.parse(parent, {
    topNode: $from.parent,
    topMatch: $from.parent.contentMatchAt($from.index()),
    topOpen: true,
    from: fromOffset,
    to: toOffset,
    preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
    findPositions: find2,
    ruleFromNode,
    context: $from
  });
  if (find2 && find2[0].pos != null) {
    let anchor2 = find2[0].pos, head = find2[1] && find2[1].pos;
    if (head == null)
      head = anchor2;
    sel = { anchor: anchor2 + from2, head: head + from2 };
  }
  return { doc: doc3, sel, from: from2, to };
}
function ruleFromNode(dom) {
  let desc = dom.pmViewDesc;
  if (desc) {
    return desc.parseRule();
  } else if (dom.nodeName == "BR" && dom.parentNode) {
    if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
      let skip = document.createElement("div");
      skip.appendChild(document.createElement("li"));
      return { skip };
    } else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
      return { ignore: true };
    }
  } else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
    return { ignore: true };
  }
  return null;
}
var isInline = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
function readDOMChange(view, from2, to, typeOver, addedNodes) {
  if (from2 < 0) {
    let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
    let newSel = selectionFromDOM(view, origin);
    if (newSel && !view.state.selection.eq(newSel)) {
      if (chrome && android && view.input.lastKeyCode === 13 && Date.now() - 100 < view.input.lastKeyCodeTime && view.someProp("handleKeyDown", (f) => f(view, keyEvent(13, "Enter"))))
        return;
      let tr2 = view.state.tr.setSelection(newSel);
      if (origin == "pointer")
        tr2.setMeta("pointer", true);
      else if (origin == "key")
        tr2.scrollIntoView();
      view.dispatch(tr2);
    }
    return;
  }
  let $before = view.state.doc.resolve(from2);
  let shared = $before.sharedDepth(to);
  from2 = $before.before(shared + 1);
  to = view.state.doc.resolve(to).after(shared + 1);
  let sel = view.state.selection;
  let parse = parseBetween(view, from2, to);
  let doc3 = view.state.doc, compare = doc3.slice(parse.from, parse.to);
  let preferredPos, preferredSide;
  if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
    preferredPos = view.state.selection.to;
    preferredSide = "end";
  } else {
    preferredPos = view.state.selection.from;
    preferredSide = "start";
  }
  view.input.lastKeyCode = null;
  let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
  if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) && addedNodes.some((n) => n.nodeType == 1 && !isInline.test(n.nodeName)) && (!change || change.endA >= change.endB) && view.someProp("handleKeyDown", (f) => f(view, keyEvent(13, "Enter")))) {
    view.input.lastIOSEnter = 0;
    return;
  }
  if (!change) {
    if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) && !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {
      change = { start: sel.from, endA: sel.to, endB: sel.to };
    } else {
      if (parse.sel) {
        let sel2 = resolveSelection(view, view.state.doc, parse.sel);
        if (sel2 && !sel2.eq(view.state.selection))
          view.dispatch(view.state.tr.setSelection(sel2));
      }
      return;
    }
  }
  if (chrome && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from && parse.sel.head == parse.sel.anchor) {
    let size = change.endB - change.start;
    parse.sel = { anchor: parse.sel.anchor + size, head: parse.sel.anchor + size };
  }
  view.input.domChangeCount++;
  if (view.state.selection.from < view.state.selection.to && change.start == change.endB && view.state.selection instanceof TextSelection) {
    if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 && view.state.selection.from >= parse.from) {
      change.start = view.state.selection.from;
    } else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 && view.state.selection.to <= parse.to) {
      change.endB += view.state.selection.to - change.endA;
      change.endA = view.state.selection.to;
    }
  }
  if (ie && ie_version <= 11 && change.endB == change.start + 1 && change.endA == change.start && change.start > parse.from && parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == "  ") {
    change.start--;
    change.endA--;
    change.endB--;
  }
  let $from = parse.doc.resolveNoCache(change.start - parse.from);
  let $to = parse.doc.resolveNoCache(change.endB - parse.from);
  let $fromA = doc3.resolve(change.start);
  let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
  let nextSel;
  if ((ios && view.input.lastIOSEnter > Date.now() - 225 && (!inlineChange || addedNodes.some((n) => n.nodeName == "DIV" || n.nodeName == "P")) || !inlineChange && $from.pos < parse.doc.content.size && (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) && nextSel.head == $to.pos) && view.someProp("handleKeyDown", (f) => f(view, keyEvent(13, "Enter")))) {
    view.input.lastIOSEnter = 0;
    return;
  }
  if (view.state.selection.anchor > change.start && looksLikeJoin(doc3, change.start, change.endA, $from, $to) && view.someProp("handleKeyDown", (f) => f(view, keyEvent(8, "Backspace")))) {
    if (android && chrome)
      view.domObserver.suppressSelectionUpdates();
    return;
  }
  if (chrome && android && change.endB == change.start)
    view.input.lastAndroidDelete = Date.now();
  if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth && parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {
    change.endB -= 2;
    $to = parse.doc.resolveNoCache(change.endB - parse.from);
    setTimeout(() => {
      view.someProp("handleKeyDown", function(f) {
        return f(view, keyEvent(13, "Enter"));
      });
    }, 20);
  }
  let chFrom = change.start, chTo = change.endA;
  let tr, storedMarks, markChange;
  if (inlineChange) {
    if ($from.pos == $to.pos) {
      if (ie && ie_version <= 11 && $from.parentOffset == 0) {
        view.domObserver.suppressSelectionUpdates();
        setTimeout(() => selectionToDOM(view), 20);
      }
      tr = view.state.tr.delete(chFrom, chTo);
      storedMarks = doc3.resolve(change.start).marksAcross(doc3.resolve(change.endA));
    } else if (
      // Adding or removing a mark
      change.endA == change.endB && (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))
    ) {
      tr = view.state.tr;
      if (markChange.type == "add")
        tr.addMark(chFrom, chTo, markChange.mark);
      else
        tr.removeMark(chFrom, chTo, markChange.mark);
    } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
      let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
      if (view.someProp("handleTextInput", (f) => f(view, chFrom, chTo, text)))
        return;
      tr = view.state.tr.insertText(text, chFrom, chTo);
    }
  }
  if (!tr)
    tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from));
  if (parse.sel) {
    let sel2 = resolveSelection(view, tr.doc, parse.sel);
    if (sel2 && !(chrome && android && view.composing && sel2.empty && (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) && (sel2.head == chFrom || sel2.head == tr.mapping.map(chTo) - 1) || ie && sel2.empty && sel2.head == chFrom))
      tr.setSelection(sel2);
  }
  if (storedMarks)
    tr.ensureMarks(storedMarks);
  view.dispatch(tr.scrollIntoView());
}
function resolveSelection(view, doc3, parsedSel) {
  if (Math.max(parsedSel.anchor, parsedSel.head) > doc3.content.size)
    return null;
  return selectionBetween(view, doc3.resolve(parsedSel.anchor), doc3.resolve(parsedSel.head));
}
function isMarkChange(cur, prev) {
  let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
  let added = curMarks, removed = prevMarks, type, mark, update;
  for (let i = 0; i < prevMarks.length; i++)
    added = prevMarks[i].removeFromSet(added);
  for (let i = 0; i < curMarks.length; i++)
    removed = curMarks[i].removeFromSet(removed);
  if (added.length == 1 && removed.length == 0) {
    mark = added[0];
    type = "add";
    update = (node) => node.mark(mark.addToSet(node.marks));
  } else if (added.length == 0 && removed.length == 1) {
    mark = removed[0];
    type = "remove";
    update = (node) => node.mark(mark.removeFromSet(node.marks));
  } else {
    return null;
  }
  let updated4 = [];
  for (let i = 0; i < prev.childCount; i++)
    updated4.push(update(prev.child(i)));
  if (Fragment.from(updated4).eq(cur))
    return { mark, type };
}
function looksLikeJoin(old, start, end, $newStart, $newEnd) {
  if (!$newStart.parent.isTextblock || // The content must have shrunk
  end - start <= $newEnd.pos - $newStart.pos || // newEnd must point directly at or after the end of the block that newStart points into
  skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
    return false;
  let $start = old.resolve(start);
  if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
    return false;
  let $next = old.resolve(skipClosingAndOpening($start, true, true));
  if (!$next.parent.isTextblock || $next.pos > end || skipClosingAndOpening($next, true, false) < end)
    return false;
  return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
}
function skipClosingAndOpening($pos, fromEnd, mayOpen) {
  let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
  while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
    depth--;
    end++;
    fromEnd = false;
  }
  if (mayOpen) {
    let next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
    while (next && !next.isLeaf) {
      next = next.firstChild;
      end++;
    }
  }
  return end;
}
function findDiff(a, b, pos, preferredPos, preferredSide) {
  let start = a.findDiffStart(b, pos);
  if (start == null)
    return null;
  let { a: endA, b: endB } = a.findDiffEnd(b, pos + a.size, pos + b.size);
  if (preferredSide == "end") {
    let adjust = Math.max(0, start - Math.min(endA, endB));
    preferredPos -= endA + adjust - start;
  }
  if (endA < start && a.size < b.size) {
    let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
    start -= move;
    endB = start + (endB - endA);
    endA = start;
  } else if (endB < start) {
    let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
    start -= move;
    endA = start + (endA - endB);
    endB = start;
  }
  return { start, endA, endB };
}
var EditorView = class {
  /**
  Create a view. `place` may be a DOM node that the editor should
  be appended to, a function that will place it into the document,
  or an object whose `mount` property holds the node to use as the
  document container. If it is `null`, the editor will not be
  added to the document.
  */
  constructor(place, props) {
    this._root = null;
    this.focused = false;
    this.trackWrites = null;
    this.mounted = false;
    this.markCursor = null;
    this.cursorWrapper = null;
    this.lastSelectedViewDesc = void 0;
    this.input = new InputState();
    this.prevDirectPlugins = [];
    this.pluginViews = [];
    this.requiresGeckoHackNode = false;
    this.dragging = null;
    this._props = props;
    this.state = props.state;
    this.directPlugins = props.plugins || [];
    this.directPlugins.forEach(checkStateComponent);
    this.dispatch = this.dispatch.bind(this);
    this.dom = place && place.mount || document.createElement("div");
    if (place) {
      if (place.appendChild)
        place.appendChild(this.dom);
      else if (typeof place == "function")
        place(this.dom);
      else if (place.mount)
        this.mounted = true;
    }
    this.editable = getEditable(this);
    updateCursorWrapper(this);
    this.nodeViews = buildNodeViews(this);
    this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
    this.domObserver = new DOMObserver(this, (from2, to, typeOver, added) => readDOMChange(this, from2, to, typeOver, added));
    this.domObserver.start();
    initInput(this);
    this.updatePluginViews();
  }
  /**
  Holds `true` when a
  [composition](https://w3c.github.io/uievents/#events-compositionevents)
  is active.
  */
  get composing() {
    return this.input.composing;
  }
  /**
  The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
  */
  get props() {
    if (this._props.state != this.state) {
      let prev = this._props;
      this._props = {};
      for (let name in prev)
        this._props[name] = prev[name];
      this._props.state = this.state;
    }
    return this._props;
  }
  /**
  Update the view's props. Will immediately cause an update to
  the DOM.
  */
  update(props) {
    if (props.handleDOMEvents != this._props.handleDOMEvents)
      ensureListeners(this);
    let prevProps = this._props;
    this._props = props;
    if (props.plugins) {
      props.plugins.forEach(checkStateComponent);
      this.directPlugins = props.plugins;
    }
    this.updateStateInner(props.state, prevProps);
  }
  /**
  Update the view by updating existing props object with the object
  given as argument. Equivalent to `view.update(Object.assign({},
  view.props, props))`.
  */
  setProps(props) {
    let updated4 = {};
    for (let name in this._props)
      updated4[name] = this._props[name];
    updated4.state = this.state;
    for (let name in props)
      updated4[name] = props[name];
    this.update(updated4);
  }
  /**
  Update the editor's `state` prop, without touching any of the
  other props.
  */
  updateState(state) {
    this.updateStateInner(state, this._props);
  }
  updateStateInner(state, prevProps) {
    let prev = this.state, redraw = false, updateSel = false;
    if (state.storedMarks && this.composing) {
      clearComposition(this);
      updateSel = true;
    }
    this.state = state;
    let pluginsChanged = prev.plugins != state.plugins || this._props.plugins != prevProps.plugins;
    if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {
      let nodeViews = buildNodeViews(this);
      if (changedNodeViews(nodeViews, this.nodeViews)) {
        this.nodeViews = nodeViews;
        redraw = true;
      }
    }
    if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {
      ensureListeners(this);
    }
    this.editable = getEditable(this);
    updateCursorWrapper(this);
    let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
    let scroll = prev.plugins != state.plugins && !prev.doc.eq(state.doc) ? "reset" : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
    let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
    if (updateDoc || !state.selection.eq(prev.selection))
      updateSel = true;
    let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
    if (updateSel) {
      this.domObserver.stop();
      let forceSelUpdate = updateDoc && (ie || chrome) && !this.composing && !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
      if (updateDoc) {
        let chromeKludge = chrome ? this.trackWrites = this.domSelectionRange().focusNode : null;
        if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
          this.docView.updateOuterDeco([]);
          this.docView.destroy();
          this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
        }
        if (chromeKludge && !this.trackWrites)
          forceSelUpdate = true;
      }
      if (forceSelUpdate || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && anchorInRightPlace(this))) {
        selectionToDOM(this, forceSelUpdate);
      } else {
        syncNodeSelection(this, state.selection);
        this.domObserver.setCurSelection();
      }
      this.domObserver.start();
    }
    this.updatePluginViews(prev);
    if (scroll == "reset") {
      this.dom.scrollTop = 0;
    } else if (scroll == "to selection") {
      this.scrollToSelection();
    } else if (oldScrollPos) {
      resetScrollPos(oldScrollPos);
    }
  }
  /**
  @internal
  */
  scrollToSelection() {
    let startDOM = this.domSelectionRange().focusNode;
    if (this.someProp("handleScrollToSelection", (f) => f(this)))
      ;
    else if (this.state.selection instanceof NodeSelection) {
      let target = this.docView.domAfterPos(this.state.selection.from);
      if (target.nodeType == 1)
        scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
    } else {
      scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
    }
  }
  destroyPluginViews() {
    let view;
    while (view = this.pluginViews.pop())
      if (view.destroy)
        view.destroy();
  }
  updatePluginViews(prevState) {
    if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
      this.prevDirectPlugins = this.directPlugins;
      this.destroyPluginViews();
      for (let i = 0; i < this.directPlugins.length; i++) {
        let plugin = this.directPlugins[i];
        if (plugin.spec.view)
          this.pluginViews.push(plugin.spec.view(this));
      }
      for (let i = 0; i < this.state.plugins.length; i++) {
        let plugin = this.state.plugins[i];
        if (plugin.spec.view)
          this.pluginViews.push(plugin.spec.view(this));
      }
    } else {
      for (let i = 0; i < this.pluginViews.length; i++) {
        let pluginView = this.pluginViews[i];
        if (pluginView.update)
          pluginView.update(this, prevState);
      }
    }
  }
  someProp(propName, f) {
    let prop = this._props && this._props[propName], value2;
    if (prop != null && (value2 = f ? f(prop) : prop))
      return value2;
    for (let i = 0; i < this.directPlugins.length; i++) {
      let prop2 = this.directPlugins[i].props[propName];
      if (prop2 != null && (value2 = f ? f(prop2) : prop2))
        return value2;
    }
    let plugins = this.state.plugins;
    if (plugins)
      for (let i = 0; i < plugins.length; i++) {
        let prop2 = plugins[i].props[propName];
        if (prop2 != null && (value2 = f ? f(prop2) : prop2))
          return value2;
      }
  }
  /**
  Query whether the view has focus.
  */
  hasFocus() {
    if (ie) {
      let node = this.root.activeElement;
      if (node == this.dom)
        return true;
      if (!node || !this.dom.contains(node))
        return false;
      while (node && this.dom != node && this.dom.contains(node)) {
        if (node.contentEditable == "false")
          return false;
        node = node.parentElement;
      }
      return true;
    }
    return this.root.activeElement == this.dom;
  }
  /**
  Focus the editor.
  */
  focus() {
    this.domObserver.stop();
    if (this.editable)
      focusPreventScroll(this.dom);
    selectionToDOM(this);
    this.domObserver.start();
  }
  /**
  Get the document root in which the editor exists. This will
  usually be the top-level `document`, but might be a [shadow
  DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
  root if the editor is inside one.
  */
  get root() {
    let cached = this._root;
    if (cached == null)
      for (let search = this.dom.parentNode; search; search = search.parentNode) {
        if (search.nodeType == 9 || search.nodeType == 11 && search.host) {
          if (!search.getSelection)
            Object.getPrototypeOf(search).getSelection = () => search.ownerDocument.getSelection();
          return this._root = search;
        }
      }
    return cached || document;
  }
  /**
  Given a pair of viewport coordinates, return the document
  position that corresponds to them. May return null if the given
  coordinates aren't inside of the editor. When an object is
  returned, its `pos` property is the position nearest to the
  coordinates, and its `inside` property holds the position of the
  inner node that the position falls inside of, or -1 if it is at
  the top level, not in any node.
  */
  posAtCoords(coords) {
    return posAtCoords(this, coords);
  }
  /**
  Returns the viewport rectangle at a given document position.
  `left` and `right` will be the same number, as this returns a
  flat cursor-ish rectangle. If the position is between two things
  that aren't directly adjacent, `side` determines which element
  is used. When < 0, the element before the position is used,
  otherwise the element after.
  */
  coordsAtPos(pos, side = 1) {
    return coordsAtPos(this, pos, side);
  }
  /**
  Find the DOM position that corresponds to the given document
  position. When `side` is negative, find the position as close as
  possible to the content before the position. When positive,
  prefer positions close to the content after the position. When
  zero, prefer as shallow a position as possible.
  
  Note that you should **not** mutate the editor's internal DOM,
  only inspect it (and even that is usually not necessary).
  */
  domAtPos(pos, side = 0) {
    return this.docView.domFromPos(pos, side);
  }
  /**
  Find the DOM node that represents the document node after the
  given position. May return `null` when the position doesn't point
  in front of a node or if the node is inside an opaque node view.
  
  This is intended to be able to call things like
  `getBoundingClientRect` on that DOM node. Do **not** mutate the
  editor DOM directly, or add styling this way, since that will be
  immediately overriden by the editor as it redraws the node.
  */
  nodeDOM(pos) {
    let desc = this.docView.descAt(pos);
    return desc ? desc.nodeDOM : null;
  }
  /**
  Find the document position that corresponds to a given DOM
  position. (Whenever possible, it is preferable to inspect the
  document structure directly, rather than poking around in the
  DOM, but sometimes—for example when interpreting an event
  target—you don't have a choice.)
  
  The `bias` parameter can be used to influence which side of a DOM
  node to use when the position is inside a leaf node.
  */
  posAtDOM(node, offset, bias = -1) {
    let pos = this.docView.posFromDOM(node, offset, bias);
    if (pos == null)
      throw new RangeError("DOM position not inside the editor");
    return pos;
  }
  /**
  Find out whether the selection is at the end of a textblock when
  moving in a given direction. When, for example, given `"left"`,
  it will return true if moving left from the current cursor
  position would leave that position's parent textblock. Will apply
  to the view's current state by default, but it is possible to
  pass a different state.
  */
  endOfTextblock(dir, state) {
    return endOfTextblock(this, state || this.state, dir);
  }
  /**
  Run the editor's paste logic with the given HTML string. The
  `event`, if given, will be passed to the
  [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
  */
  pasteHTML(html, event) {
    return doPaste(this, "", html, false, event || new ClipboardEvent("paste"));
  }
  /**
  Run the editor's paste logic with the given plain-text input.
  */
  pasteText(text, event) {
    return doPaste(this, text, null, true, event || new ClipboardEvent("paste"));
  }
  /**
  Removes the editor from the DOM and destroys all [node
  views](https://prosemirror.net/docs/ref/#view.NodeView).
  */
  destroy() {
    if (!this.docView)
      return;
    destroyInput(this);
    this.destroyPluginViews();
    if (this.mounted) {
      this.docView.update(this.state.doc, [], viewDecorations(this), this);
      this.dom.textContent = "";
    } else if (this.dom.parentNode) {
      this.dom.parentNode.removeChild(this.dom);
    }
    this.docView.destroy();
    this.docView = null;
  }
  /**
  This is true when the view has been
  [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
  used anymore).
  */
  get isDestroyed() {
    return this.docView == null;
  }
  /**
  Used for testing.
  */
  dispatchEvent(event) {
    return dispatchEvent(this, event);
  }
  /**
  Dispatch a transaction. Will call
  [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
  when given, and otherwise defaults to applying the transaction to
  the current state and calling
  [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
  This method is bound to the view instance, so that it can be
  easily passed around.
  */
  dispatch(tr) {
    let dispatchTransaction2 = this._props.dispatchTransaction;
    if (dispatchTransaction2)
      dispatchTransaction2.call(this, tr);
    else
      this.updateState(this.state.apply(tr));
  }
  /**
  @internal
  */
  domSelectionRange() {
    return safari && this.root.nodeType === 11 && deepActiveElement(this.dom.ownerDocument) == this.dom ? safariShadowSelectionRange(this) : this.domSelection();
  }
  /**
  @internal
  */
  domSelection() {
    return this.root.getSelection();
  }
};
function computeDocDeco(view) {
  let attrs = /* @__PURE__ */ Object.create(null);
  attrs.class = "ProseMirror";
  attrs.contenteditable = String(view.editable);
  attrs.translate = "no";
  view.someProp("attributes", (value2) => {
    if (typeof value2 == "function")
      value2 = value2(view.state);
    if (value2)
      for (let attr in value2) {
        if (attr == "class")
          attrs.class += " " + value2[attr];
        if (attr == "style") {
          attrs.style = (attrs.style ? attrs.style + ";" : "") + value2[attr];
        } else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
          attrs[attr] = String(value2[attr]);
      }
  });
  return [Decoration.node(0, view.state.doc.content.size, attrs)];
}
function updateCursorWrapper(view) {
  if (view.markCursor) {
    let dom = document.createElement("img");
    dom.className = "ProseMirror-separator";
    dom.setAttribute("mark-placeholder", "true");
    dom.setAttribute("alt", "");
    view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
  } else {
    view.cursorWrapper = null;
  }
}
function getEditable(view) {
  return !view.someProp("editable", (value2) => value2(view.state) === false);
}
function selectionContextChanged(sel1, sel2) {
  let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
  return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
}
function buildNodeViews(view) {
  let result = /* @__PURE__ */ Object.create(null);
  function add2(obj) {
    for (let prop in obj)
      if (!Object.prototype.hasOwnProperty.call(result, prop))
        result[prop] = obj[prop];
  }
  view.someProp("nodeViews", add2);
  view.someProp("markViews", add2);
  return result;
}
function changedNodeViews(a, b) {
  let nA = 0, nB = 0;
  for (let prop in a) {
    if (a[prop] != b[prop])
      return true;
    nA++;
  }
  for (let _ in b)
    nB++;
  return nA != nB;
}
function checkStateComponent(plugin) {
  if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
    throw new RangeError("Plugins passed directly to the view must not have a state component");
}

// node_modules/w3c-keyname/index.js
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
};
var mac3 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie2 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (i = 0; i < 10; i++)
  base[48 + i] = base[96 + i] = String(i);
var i;
for (i = 1; i <= 24; i++)
  base[i + 111] = "F" + i;
var i;
for (i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}
var i;
for (code in base)
  if (!shift.hasOwnProperty(code))
    shift[code] = base[code];
var code;
function keyName(event) {
  var ignoreKey = mac3 && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie2 && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  if (name == "Esc")
    name = "Escape";
  if (name == "Del")
    name = "Delete";
  if (name == "Left")
    name = "ArrowLeft";
  if (name == "Up")
    name = "ArrowUp";
  if (name == "Right")
    name = "ArrowRight";
  if (name == "Down")
    name = "ArrowDown";
  return name;
}

// node_modules/prosemirror-keymap/dist/index.js
var mac4 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
function normalizeKeyName(name) {
  let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
  if (result == "Space")
    result = " ";
  let alt, ctrl, shift2, meta;
  for (let i = 0; i < parts.length - 1; i++) {
    let mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod))
      meta = true;
    else if (/^a(lt)?$/i.test(mod))
      alt = true;
    else if (/^(c|ctrl|control)$/i.test(mod))
      ctrl = true;
    else if (/^s(hift)?$/i.test(mod))
      shift2 = true;
    else if (/^mod$/i.test(mod)) {
      if (mac4)
        meta = true;
      else
        ctrl = true;
    } else
      throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt)
    result = "Alt-" + result;
  if (ctrl)
    result = "Ctrl-" + result;
  if (meta)
    result = "Meta-" + result;
  if (shift2)
    result = "Shift-" + result;
  return result;
}
function normalize(map2) {
  let copy2 = /* @__PURE__ */ Object.create(null);
  for (let prop in map2)
    copy2[normalizeKeyName(prop)] = map2[prop];
  return copy2;
}
function modifiers(name, event, shift2 = true) {
  if (event.altKey)
    name = "Alt-" + name;
  if (event.ctrlKey)
    name = "Ctrl-" + name;
  if (event.metaKey)
    name = "Meta-" + name;
  if (shift2 && event.shiftKey)
    name = "Shift-" + name;
  return name;
}
function keymap(bindings) {
  return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
}
function keydownHandler(bindings) {
  let map2 = normalize(bindings);
  return function(view, event) {
    let name = keyName(event), baseName, direct = map2[modifiers(name, event)];
    if (direct && direct(view.state, view.dispatch, view))
      return true;
    if (name.length == 1 && name != " ") {
      if (event.shiftKey) {
        let noShift = map2[modifiers(name, event, false)];
        if (noShift && noShift(view.state, view.dispatch, view))
          return true;
      }
      if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) && (baseName = base[event.keyCode]) && baseName != name) {
        let fromCode = map2[modifiers(baseName, event)];
        if (fromCode && fromCode(view.state, view.dispatch, view))
          return true;
      }
    }
    return false;
  };
}

// node_modules/prosemirror-tables/dist/index.js
var readFromCache;
var addToCache;
if (typeof WeakMap != "undefined") {
  let cache = /* @__PURE__ */ new WeakMap();
  readFromCache = (key) => cache.get(key);
  addToCache = (key, value2) => {
    cache.set(key, value2);
    return value2;
  };
} else {
  const cache = [];
  const cacheSize = 10;
  let cachePos = 0;
  readFromCache = (key) => {
    for (let i = 0; i < cache.length; i += 2)
      if (cache[i] == key)
        return cache[i + 1];
  };
  addToCache = (key, value2) => {
    if (cachePos == cacheSize)
      cachePos = 0;
    cache[cachePos++] = key;
    return cache[cachePos++] = value2;
  };
}
var TableMap = class {
  constructor(width, height, map2, problems) {
    this.width = width;
    this.height = height;
    this.map = map2;
    this.problems = problems;
  }
  findCell(pos) {
    for (let i = 0; i < this.map.length; i++) {
      const curPos = this.map[i];
      if (curPos != pos)
        continue;
      const left = i % this.width;
      const top = i / this.width | 0;
      let right = left + 1;
      let bottom = top + 1;
      for (let j = 1; right < this.width && this.map[i + j] == curPos; j++) {
        right++;
      }
      for (let j = 1; bottom < this.height && this.map[i + this.width * j] == curPos; j++) {
        bottom++;
      }
      return { left, top, right, bottom };
    }
    throw new RangeError(`No cell with offset ${pos} found`);
  }
  colCount(pos) {
    for (let i = 0; i < this.map.length; i++) {
      if (this.map[i] == pos) {
        return i % this.width;
      }
    }
    throw new RangeError(`No cell with offset ${pos} found`);
  }
  nextCell(pos, axis, dir) {
    const { left, right, top, bottom } = this.findCell(pos);
    if (axis == "horiz") {
      if (dir < 0 ? left == 0 : right == this.width)
        return null;
      return this.map[top * this.width + (dir < 0 ? left - 1 : right)];
    } else {
      if (dir < 0 ? top == 0 : bottom == this.height)
        return null;
      return this.map[left + this.width * (dir < 0 ? top - 1 : bottom)];
    }
  }
  rectBetween(a, b) {
    const {
      left: leftA,
      right: rightA,
      top: topA,
      bottom: bottomA
    } = this.findCell(a);
    const {
      left: leftB,
      right: rightB,
      top: topB,
      bottom: bottomB
    } = this.findCell(b);
    return {
      left: Math.min(leftA, leftB),
      top: Math.min(topA, topB),
      right: Math.max(rightA, rightB),
      bottom: Math.max(bottomA, bottomB)
    };
  }
  cellsInRect(rect) {
    const result = [];
    const seen = {};
    for (let row = rect.top; row < rect.bottom; row++) {
      for (let col = rect.left; col < rect.right; col++) {
        const index = row * this.width + col;
        const pos = this.map[index];
        if (seen[pos])
          continue;
        seen[pos] = true;
        if (col == rect.left && col && this.map[index - 1] == pos || row == rect.top && row && this.map[index - this.width] == pos) {
          continue;
        }
        result.push(pos);
      }
    }
    return result;
  }
  positionAt(row, col, table) {
    for (let i = 0, rowStart = 0; ; i++) {
      const rowEnd = rowStart + table.child(i).nodeSize;
      if (i == row) {
        let index = col + row * this.width;
        const rowEndIndex = (row + 1) * this.width;
        while (index < rowEndIndex && this.map[index] < rowStart)
          index++;
        return index == rowEndIndex ? rowEnd - 1 : this.map[index];
      }
      rowStart = rowEnd;
    }
  }
  static get(table) {
    return readFromCache(table) || addToCache(table, computeMap(table));
  }
};
function computeMap(table) {
  if (table.type.spec.tableRole != "table")
    throw new RangeError("Not a table node: " + table.type.name);
  const width = findWidth(table), height = table.childCount;
  const map2 = [];
  let mapPos = 0;
  let problems = null;
  const colWidths = [];
  for (let i = 0, e = width * height; i < e; i++)
    map2[i] = 0;
  for (let row = 0, pos = 0; row < height; row++) {
    const rowNode = table.child(row);
    pos++;
    for (let i = 0; ; i++) {
      while (mapPos < map2.length && map2[mapPos] != 0)
        mapPos++;
      if (i == rowNode.childCount)
        break;
      const cellNode = rowNode.child(i);
      const { colspan, rowspan, colwidth } = cellNode.attrs;
      for (let h = 0; h < rowspan; h++) {
        if (h + row >= height) {
          (problems || (problems = [])).push({
            type: "overlong_rowspan",
            pos,
            n: rowspan - h
          });
          break;
        }
        const start = mapPos + h * width;
        for (let w = 0; w < colspan; w++) {
          if (map2[start + w] == 0)
            map2[start + w] = pos;
          else
            (problems || (problems = [])).push({
              type: "collision",
              row,
              pos,
              n: colspan - w
            });
          const colW = colwidth && colwidth[w];
          if (colW) {
            const widthIndex = (start + w) % width * 2, prev = colWidths[widthIndex];
            if (prev == null || prev != colW && colWidths[widthIndex + 1] == 1) {
              colWidths[widthIndex] = colW;
              colWidths[widthIndex + 1] = 1;
            } else if (prev == colW) {
              colWidths[widthIndex + 1]++;
            }
          }
        }
      }
      mapPos += colspan;
      pos += cellNode.nodeSize;
    }
    const expectedPos = (row + 1) * width;
    let missing = 0;
    while (mapPos < expectedPos)
      if (map2[mapPos++] == 0)
        missing++;
    if (missing)
      (problems || (problems = [])).push({ type: "missing", row, n: missing });
    pos++;
  }
  const tableMap = new TableMap(width, height, map2, problems);
  let badWidths = false;
  for (let i = 0; !badWidths && i < colWidths.length; i += 2)
    if (colWidths[i] != null && colWidths[i + 1] < height)
      badWidths = true;
  if (badWidths)
    findBadColWidths(tableMap, colWidths, table);
  return tableMap;
}
function findWidth(table) {
  let width = -1;
  let hasRowSpan = false;
  for (let row = 0; row < table.childCount; row++) {
    const rowNode = table.child(row);
    let rowWidth = 0;
    if (hasRowSpan)
      for (let j = 0; j < row; j++) {
        const prevRow = table.child(j);
        for (let i = 0; i < prevRow.childCount; i++) {
          const cell = prevRow.child(i);
          if (j + cell.attrs.rowspan > row)
            rowWidth += cell.attrs.colspan;
        }
      }
    for (let i = 0; i < rowNode.childCount; i++) {
      const cell = rowNode.child(i);
      rowWidth += cell.attrs.colspan;
      if (cell.attrs.rowspan > 1)
        hasRowSpan = true;
    }
    if (width == -1)
      width = rowWidth;
    else if (width != rowWidth)
      width = Math.max(width, rowWidth);
  }
  return width;
}
function findBadColWidths(map2, colWidths, table) {
  if (!map2.problems)
    map2.problems = [];
  const seen = {};
  for (let i = 0; i < map2.map.length; i++) {
    const pos = map2.map[i];
    if (seen[pos])
      continue;
    seen[pos] = true;
    const node = table.nodeAt(pos);
    if (!node) {
      throw new RangeError(`No cell with offset ${pos} found`);
    }
    let updated4 = null;
    const attrs = node.attrs;
    for (let j = 0; j < attrs.colspan; j++) {
      const col = (i + j) % map2.width;
      const colWidth = colWidths[col * 2];
      if (colWidth != null && (!attrs.colwidth || attrs.colwidth[j] != colWidth))
        (updated4 || (updated4 = freshColWidth(attrs)))[j] = colWidth;
    }
    if (updated4)
      map2.problems.unshift({
        type: "colwidth mismatch",
        pos,
        colwidth: updated4
      });
  }
}
function freshColWidth(attrs) {
  if (attrs.colwidth)
    return attrs.colwidth.slice();
  const result = [];
  for (let i = 0; i < attrs.colspan; i++)
    result.push(0);
  return result;
}
function getCellAttrs(dom, extraAttrs) {
  if (typeof dom === "string") {
    return {};
  }
  const widthAttr = dom.getAttribute("data-colwidth");
  const widths = widthAttr && /^\d+(,\d+)*$/.test(widthAttr) ? widthAttr.split(",").map((s) => Number(s)) : null;
  const colspan = Number(dom.getAttribute("colspan") || 1);
  const result = {
    colspan,
    rowspan: Number(dom.getAttribute("rowspan") || 1),
    colwidth: widths && widths.length == colspan ? widths : null
  };
  for (const prop in extraAttrs) {
    const getter2 = extraAttrs[prop].getFromDOM;
    const value2 = getter2 && getter2(dom);
    if (value2 != null) {
      result[prop] = value2;
    }
  }
  return result;
}
function setCellAttrs(node, extraAttrs) {
  const attrs = {};
  if (node.attrs.colspan != 1)
    attrs.colspan = node.attrs.colspan;
  if (node.attrs.rowspan != 1)
    attrs.rowspan = node.attrs.rowspan;
  if (node.attrs.colwidth)
    attrs["data-colwidth"] = node.attrs.colwidth.join(",");
  for (const prop in extraAttrs) {
    const setter2 = extraAttrs[prop].setDOMAttr;
    if (setter2)
      setter2(node.attrs[prop], attrs);
  }
  return attrs;
}
function tableNodes(options) {
  const extraAttrs = options.cellAttributes || {};
  const cellAttrs = {
    colspan: { default: 1 },
    rowspan: { default: 1 },
    colwidth: { default: null }
  };
  for (const prop in extraAttrs)
    cellAttrs[prop] = { default: extraAttrs[prop].default };
  return {
    table: {
      content: "table_row+",
      tableRole: "table",
      isolating: true,
      group: options.tableGroup,
      parseDOM: [{ tag: "table" }],
      toDOM() {
        return ["table", ["tbody", 0]];
      }
    },
    table_row: {
      content: "(table_cell | table_header)*",
      tableRole: "row",
      parseDOM: [{ tag: "tr" }],
      toDOM() {
        return ["tr", 0];
      }
    },
    table_cell: {
      content: options.cellContent,
      attrs: cellAttrs,
      tableRole: "cell",
      isolating: true,
      parseDOM: [
        { tag: "td", getAttrs: (dom) => getCellAttrs(dom, extraAttrs) }
      ],
      toDOM(node) {
        return ["td", setCellAttrs(node, extraAttrs), 0];
      }
    },
    table_header: {
      content: options.cellContent,
      attrs: cellAttrs,
      tableRole: "header_cell",
      isolating: true,
      parseDOM: [
        { tag: "th", getAttrs: (dom) => getCellAttrs(dom, extraAttrs) }
      ],
      toDOM(node) {
        return ["th", setCellAttrs(node, extraAttrs), 0];
      }
    }
  };
}
function tableNodeTypes(schema) {
  let result = schema.cached.tableNodeTypes;
  if (!result) {
    result = schema.cached.tableNodeTypes = {};
    for (const name in schema.nodes) {
      const type = schema.nodes[name], role = type.spec.tableRole;
      if (role)
        result[role] = type;
    }
  }
  return result;
}
var tableEditingKey = new PluginKey("selectingCells");
function cellAround($pos) {
  for (let d = $pos.depth - 1; d > 0; d--)
    if ($pos.node(d).type.spec.tableRole == "row")
      return $pos.node(0).resolve($pos.before(d + 1));
  return null;
}
function cellWrapping($pos) {
  for (let d = $pos.depth; d > 0; d--) {
    const role = $pos.node(d).type.spec.tableRole;
    if (role === "cell" || role === "header_cell")
      return $pos.node(d);
  }
  return null;
}
function isInTable(state) {
  const $head = state.selection.$head;
  for (let d = $head.depth; d > 0; d--)
    if ($head.node(d).type.spec.tableRole == "row")
      return true;
  return false;
}
function selectionCell(state) {
  const sel = state.selection;
  if ("$anchorCell" in sel && sel.$anchorCell) {
    return sel.$anchorCell.pos > sel.$headCell.pos ? sel.$anchorCell : sel.$headCell;
  } else if ("node" in sel && sel.node && sel.node.type.spec.tableRole == "cell") {
    return sel.$anchor;
  }
  const $cell = cellAround(sel.$head) || cellNear(sel.$head);
  if ($cell) {
    return $cell;
  }
  throw new RangeError(`No cell found around position ${sel.head}`);
}
function cellNear($pos) {
  for (let after = $pos.nodeAfter, pos = $pos.pos; after; after = after.firstChild, pos++) {
    const role = after.type.spec.tableRole;
    if (role == "cell" || role == "header_cell")
      return $pos.doc.resolve(pos);
  }
  for (let before = $pos.nodeBefore, pos = $pos.pos; before; before = before.lastChild, pos--) {
    const role = before.type.spec.tableRole;
    if (role == "cell" || role == "header_cell")
      return $pos.doc.resolve(pos - before.nodeSize);
  }
}
function pointsAtCell($pos) {
  return $pos.parent.type.spec.tableRole == "row" && !!$pos.nodeAfter;
}
function moveCellForward($pos) {
  return $pos.node(0).resolve($pos.pos + $pos.nodeAfter.nodeSize);
}
function inSameTable($cellA, $cellB) {
  return $cellA.depth == $cellB.depth && $cellA.pos >= $cellB.start(-1) && $cellA.pos <= $cellB.end(-1);
}
function findCell($pos) {
  return TableMap.get($pos.node(-1)).findCell($pos.pos - $pos.start(-1));
}
function colCount($pos) {
  return TableMap.get($pos.node(-1)).colCount($pos.pos - $pos.start(-1));
}
function nextCell($pos, axis, dir) {
  const table = $pos.node(-1);
  const map2 = TableMap.get(table);
  const tableStart = $pos.start(-1);
  const moved = map2.nextCell($pos.pos - tableStart, axis, dir);
  return moved == null ? null : $pos.node(0).resolve(tableStart + moved);
}
function removeColSpan(attrs, pos, n = 1) {
  const result = { ...attrs, colspan: attrs.colspan - n };
  if (result.colwidth) {
    result.colwidth = result.colwidth.slice();
    result.colwidth.splice(pos, n);
    if (!result.colwidth.some((w) => w > 0))
      result.colwidth = null;
  }
  return result;
}
function addColSpan(attrs, pos, n = 1) {
  const result = { ...attrs, colspan: attrs.colspan + n };
  if (result.colwidth) {
    result.colwidth = result.colwidth.slice();
    for (let i = 0; i < n; i++)
      result.colwidth.splice(pos, 0, 0);
  }
  return result;
}
function columnIsHeader(map2, table, col) {
  const headerCell = tableNodeTypes(table.type.schema).header_cell;
  for (let row = 0; row < map2.height; row++)
    if (table.nodeAt(map2.map[col + row * map2.width]).type != headerCell)
      return false;
  return true;
}
var CellSelection = class extends Selection {
  constructor($anchorCell, $headCell = $anchorCell) {
    const table = $anchorCell.node(-1);
    const map2 = TableMap.get(table);
    const tableStart = $anchorCell.start(-1);
    const rect = map2.rectBetween(
      $anchorCell.pos - tableStart,
      $headCell.pos - tableStart
    );
    const doc3 = $anchorCell.node(0);
    const cells = map2.cellsInRect(rect).filter((p) => p != $headCell.pos - tableStart);
    cells.unshift($headCell.pos - tableStart);
    const ranges = cells.map((pos) => {
      const cell = table.nodeAt(pos);
      if (!cell) {
        throw RangeError(`No cell with offset ${pos} found`);
      }
      const from2 = tableStart + pos + 1;
      return new SelectionRange(
        doc3.resolve(from2),
        doc3.resolve(from2 + cell.content.size)
      );
    });
    super(ranges[0].$from, ranges[0].$to, ranges);
    this.$anchorCell = $anchorCell;
    this.$headCell = $headCell;
  }
  map(doc3, mapping) {
    const $anchorCell = doc3.resolve(mapping.map(this.$anchorCell.pos));
    const $headCell = doc3.resolve(mapping.map(this.$headCell.pos));
    if (pointsAtCell($anchorCell) && pointsAtCell($headCell) && inSameTable($anchorCell, $headCell)) {
      const tableChanged = this.$anchorCell.node(-1) != $anchorCell.node(-1);
      if (tableChanged && this.isRowSelection())
        return CellSelection.rowSelection($anchorCell, $headCell);
      else if (tableChanged && this.isColSelection())
        return CellSelection.colSelection($anchorCell, $headCell);
      else
        return new CellSelection($anchorCell, $headCell);
    }
    return TextSelection.between($anchorCell, $headCell);
  }
  content() {
    const table = this.$anchorCell.node(-1);
    const map2 = TableMap.get(table);
    const tableStart = this.$anchorCell.start(-1);
    const rect = map2.rectBetween(
      this.$anchorCell.pos - tableStart,
      this.$headCell.pos - tableStart
    );
    const seen = {};
    const rows = [];
    for (let row = rect.top; row < rect.bottom; row++) {
      const rowContent = [];
      for (let index = row * map2.width + rect.left, col = rect.left; col < rect.right; col++, index++) {
        const pos = map2.map[index];
        if (seen[pos])
          continue;
        seen[pos] = true;
        const cellRect = map2.findCell(pos);
        let cell = table.nodeAt(pos);
        if (!cell) {
          throw RangeError(`No cell with offset ${pos} found`);
        }
        const extraLeft = rect.left - cellRect.left;
        const extraRight = cellRect.right - rect.right;
        if (extraLeft > 0 || extraRight > 0) {
          let attrs = cell.attrs;
          if (extraLeft > 0) {
            attrs = removeColSpan(attrs, 0, extraLeft);
          }
          if (extraRight > 0) {
            attrs = removeColSpan(
              attrs,
              attrs.colspan - extraRight,
              extraRight
            );
          }
          if (cellRect.left < rect.left) {
            cell = cell.type.createAndFill(attrs);
            if (!cell) {
              throw RangeError(
                `Could not create cell with attrs ${JSON.stringify(attrs)}`
              );
            }
          } else {
            cell = cell.type.create(attrs, cell.content);
          }
        }
        if (cellRect.top < rect.top || cellRect.bottom > rect.bottom) {
          const attrs = {
            ...cell.attrs,
            rowspan: Math.min(cellRect.bottom, rect.bottom) - Math.max(cellRect.top, rect.top)
          };
          if (cellRect.top < rect.top) {
            cell = cell.type.createAndFill(attrs);
          } else {
            cell = cell.type.create(attrs, cell.content);
          }
        }
        rowContent.push(cell);
      }
      rows.push(table.child(row).copy(Fragment.from(rowContent)));
    }
    const fragment = this.isColSelection() && this.isRowSelection() ? table : rows;
    return new Slice(Fragment.from(fragment), 1, 1);
  }
  replace(tr, content = Slice.empty) {
    const mapFrom = tr.steps.length, ranges = this.ranges;
    for (let i = 0; i < ranges.length; i++) {
      const { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
      tr.replace(
        mapping.map($from.pos),
        mapping.map($to.pos),
        i ? Slice.empty : content
      );
    }
    const sel = Selection.findFrom(
      tr.doc.resolve(tr.mapping.slice(mapFrom).map(this.to)),
      -1
    );
    if (sel)
      tr.setSelection(sel);
  }
  replaceWith(tr, node) {
    this.replace(tr, new Slice(Fragment.from(node), 0, 0));
  }
  forEachCell(f) {
    const table = this.$anchorCell.node(-1);
    const map2 = TableMap.get(table);
    const tableStart = this.$anchorCell.start(-1);
    const cells = map2.cellsInRect(
      map2.rectBetween(
        this.$anchorCell.pos - tableStart,
        this.$headCell.pos - tableStart
      )
    );
    for (let i = 0; i < cells.length; i++) {
      f(table.nodeAt(cells[i]), tableStart + cells[i]);
    }
  }
  isColSelection() {
    const anchorTop = this.$anchorCell.index(-1);
    const headTop = this.$headCell.index(-1);
    if (Math.min(anchorTop, headTop) > 0)
      return false;
    const anchorBottom = anchorTop + this.$anchorCell.nodeAfter.attrs.rowspan;
    const headBottom = headTop + this.$headCell.nodeAfter.attrs.rowspan;
    return Math.max(anchorBottom, headBottom) == this.$headCell.node(-1).childCount;
  }
  static colSelection($anchorCell, $headCell = $anchorCell) {
    const table = $anchorCell.node(-1);
    const map2 = TableMap.get(table);
    const tableStart = $anchorCell.start(-1);
    const anchorRect = map2.findCell($anchorCell.pos - tableStart);
    const headRect = map2.findCell($headCell.pos - tableStart);
    const doc3 = $anchorCell.node(0);
    if (anchorRect.top <= headRect.top) {
      if (anchorRect.top > 0)
        $anchorCell = doc3.resolve(tableStart + map2.map[anchorRect.left]);
      if (headRect.bottom < map2.height)
        $headCell = doc3.resolve(
          tableStart + map2.map[map2.width * (map2.height - 1) + headRect.right - 1]
        );
    } else {
      if (headRect.top > 0)
        $headCell = doc3.resolve(tableStart + map2.map[headRect.left]);
      if (anchorRect.bottom < map2.height)
        $anchorCell = doc3.resolve(
          tableStart + map2.map[map2.width * (map2.height - 1) + anchorRect.right - 1]
        );
    }
    return new CellSelection($anchorCell, $headCell);
  }
  isRowSelection() {
    const table = this.$anchorCell.node(-1);
    const map2 = TableMap.get(table);
    const tableStart = this.$anchorCell.start(-1);
    const anchorLeft = map2.colCount(this.$anchorCell.pos - tableStart);
    const headLeft = map2.colCount(this.$headCell.pos - tableStart);
    if (Math.min(anchorLeft, headLeft) > 0)
      return false;
    const anchorRight = anchorLeft + this.$anchorCell.nodeAfter.attrs.colspan;
    const headRight = headLeft + this.$headCell.nodeAfter.attrs.colspan;
    return Math.max(anchorRight, headRight) == map2.width;
  }
  eq(other) {
    return other instanceof CellSelection && other.$anchorCell.pos == this.$anchorCell.pos && other.$headCell.pos == this.$headCell.pos;
  }
  static rowSelection($anchorCell, $headCell = $anchorCell) {
    const table = $anchorCell.node(-1);
    const map2 = TableMap.get(table);
    const tableStart = $anchorCell.start(-1);
    const anchorRect = map2.findCell($anchorCell.pos - tableStart);
    const headRect = map2.findCell($headCell.pos - tableStart);
    const doc3 = $anchorCell.node(0);
    if (anchorRect.left <= headRect.left) {
      if (anchorRect.left > 0)
        $anchorCell = doc3.resolve(
          tableStart + map2.map[anchorRect.top * map2.width]
        );
      if (headRect.right < map2.width)
        $headCell = doc3.resolve(
          tableStart + map2.map[map2.width * (headRect.top + 1) - 1]
        );
    } else {
      if (headRect.left > 0)
        $headCell = doc3.resolve(tableStart + map2.map[headRect.top * map2.width]);
      if (anchorRect.right < map2.width)
        $anchorCell = doc3.resolve(
          tableStart + map2.map[map2.width * (anchorRect.top + 1) - 1]
        );
    }
    return new CellSelection($anchorCell, $headCell);
  }
  toJSON() {
    return {
      type: "cell",
      anchor: this.$anchorCell.pos,
      head: this.$headCell.pos
    };
  }
  static fromJSON(doc3, json) {
    return new CellSelection(doc3.resolve(json.anchor), doc3.resolve(json.head));
  }
  static create(doc3, anchorCell, headCell = anchorCell) {
    return new CellSelection(doc3.resolve(anchorCell), doc3.resolve(headCell));
  }
  getBookmark() {
    return new CellBookmark(this.$anchorCell.pos, this.$headCell.pos);
  }
};
CellSelection.prototype.visible = false;
Selection.jsonID("cell", CellSelection);
var CellBookmark = class {
  constructor(anchor, head) {
    this.anchor = anchor;
    this.head = head;
  }
  map(mapping) {
    return new CellBookmark(mapping.map(this.anchor), mapping.map(this.head));
  }
  resolve(doc3) {
    const $anchorCell = doc3.resolve(this.anchor), $headCell = doc3.resolve(this.head);
    if ($anchorCell.parent.type.spec.tableRole == "row" && $headCell.parent.type.spec.tableRole == "row" && $anchorCell.index() < $anchorCell.parent.childCount && $headCell.index() < $headCell.parent.childCount && inSameTable($anchorCell, $headCell))
      return new CellSelection($anchorCell, $headCell);
    else
      return Selection.near($headCell, 1);
  }
};
function drawCellSelection(state) {
  if (!(state.selection instanceof CellSelection))
    return null;
  const cells = [];
  state.selection.forEachCell((node, pos) => {
    cells.push(
      Decoration.node(pos, pos + node.nodeSize, { class: "selectedCell" })
    );
  });
  return DecorationSet.create(state.doc, cells);
}
function isCellBoundarySelection({ $from, $to }) {
  if ($from.pos == $to.pos || $from.pos < $from.pos - 6)
    return false;
  let afterFrom = $from.pos;
  let beforeTo = $to.pos;
  let depth = $from.depth;
  for (; depth >= 0; depth--, afterFrom++)
    if ($from.after(depth + 1) < $from.end(depth))
      break;
  for (let d = $to.depth; d >= 0; d--, beforeTo--)
    if ($to.before(d + 1) > $to.start(d))
      break;
  return afterFrom == beforeTo && /row|table/.test($from.node(depth).type.spec.tableRole);
}
function isTextSelectionAcrossCells({ $from, $to }) {
  let fromCellBoundaryNode;
  let toCellBoundaryNode;
  for (let i = $from.depth; i > 0; i--) {
    const node = $from.node(i);
    if (node.type.spec.tableRole === "cell" || node.type.spec.tableRole === "header_cell") {
      fromCellBoundaryNode = node;
      break;
    }
  }
  for (let i = $to.depth; i > 0; i--) {
    const node = $to.node(i);
    if (node.type.spec.tableRole === "cell" || node.type.spec.tableRole === "header_cell") {
      toCellBoundaryNode = node;
      break;
    }
  }
  return fromCellBoundaryNode !== toCellBoundaryNode && $to.parentOffset === 0;
}
function normalizeSelection(state, tr, allowTableNodeSelection) {
  const sel = (tr || state).selection;
  const doc3 = (tr || state).doc;
  let normalize2;
  let role;
  if (sel instanceof NodeSelection && (role = sel.node.type.spec.tableRole)) {
    if (role == "cell" || role == "header_cell") {
      normalize2 = CellSelection.create(doc3, sel.from);
    } else if (role == "row") {
      const $cell = doc3.resolve(sel.from + 1);
      normalize2 = CellSelection.rowSelection($cell, $cell);
    } else if (!allowTableNodeSelection) {
      const map2 = TableMap.get(sel.node);
      const start = sel.from + 1;
      const lastCell = start + map2.map[map2.width * map2.height - 1];
      normalize2 = CellSelection.create(doc3, start + 1, lastCell);
    }
  } else if (sel instanceof TextSelection && isCellBoundarySelection(sel)) {
    normalize2 = TextSelection.create(doc3, sel.from);
  } else if (sel instanceof TextSelection && isTextSelectionAcrossCells(sel)) {
    normalize2 = TextSelection.create(doc3, sel.$from.start(), sel.$from.end());
  }
  if (normalize2)
    (tr || (tr = state.tr)).setSelection(normalize2);
  return tr;
}
var fixTablesKey = new PluginKey("fix-tables");
function changedDescendants(old, cur, offset, f) {
  const oldSize = old.childCount, curSize = cur.childCount;
  outer:
    for (let i = 0, j = 0; i < curSize; i++) {
      const child = cur.child(i);
      for (let scan = j, e = Math.min(oldSize, i + 3); scan < e; scan++) {
        if (old.child(scan) == child) {
          j = scan + 1;
          offset += child.nodeSize;
          continue outer;
        }
      }
      f(child, offset);
      if (j < oldSize && old.child(j).sameMarkup(child))
        changedDescendants(old.child(j), child, offset + 1, f);
      else
        child.nodesBetween(0, child.content.size, f, offset + 1);
      offset += child.nodeSize;
    }
}
function fixTables(state, oldState) {
  let tr;
  const check = (node, pos) => {
    if (node.type.spec.tableRole == "table")
      tr = fixTable(state, node, pos, tr);
  };
  if (!oldState)
    state.doc.descendants(check);
  else if (oldState.doc != state.doc)
    changedDescendants(oldState.doc, state.doc, 0, check);
  return tr;
}
function fixTable(state, table, tablePos, tr) {
  const map2 = TableMap.get(table);
  if (!map2.problems)
    return tr;
  if (!tr)
    tr = state.tr;
  const mustAdd = [];
  for (let i = 0; i < map2.height; i++)
    mustAdd.push(0);
  for (let i = 0; i < map2.problems.length; i++) {
    const prob = map2.problems[i];
    if (prob.type == "collision") {
      const cell = table.nodeAt(prob.pos);
      if (!cell)
        continue;
      const attrs = cell.attrs;
      for (let j = 0; j < attrs.rowspan; j++)
        mustAdd[prob.row + j] += prob.n;
      tr.setNodeMarkup(
        tr.mapping.map(tablePos + 1 + prob.pos),
        null,
        removeColSpan(attrs, attrs.colspan - prob.n, prob.n)
      );
    } else if (prob.type == "missing") {
      mustAdd[prob.row] += prob.n;
    } else if (prob.type == "overlong_rowspan") {
      const cell = table.nodeAt(prob.pos);
      if (!cell)
        continue;
      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, {
        ...cell.attrs,
        rowspan: cell.attrs.rowspan - prob.n
      });
    } else if (prob.type == "colwidth mismatch") {
      const cell = table.nodeAt(prob.pos);
      if (!cell)
        continue;
      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, {
        ...cell.attrs,
        colwidth: prob.colwidth
      });
    }
  }
  let first, last;
  for (let i = 0; i < mustAdd.length; i++)
    if (mustAdd[i]) {
      if (first == null)
        first = i;
      last = i;
    }
  for (let i = 0, pos = tablePos + 1; i < map2.height; i++) {
    const row = table.child(i);
    const end = pos + row.nodeSize;
    const add2 = mustAdd[i];
    if (add2 > 0) {
      let role = "cell";
      if (row.firstChild) {
        role = row.firstChild.type.spec.tableRole;
      }
      const nodes3 = [];
      for (let j = 0; j < add2; j++) {
        const node = tableNodeTypes(state.schema)[role].createAndFill();
        if (node)
          nodes3.push(node);
      }
      const side = (i == 0 || first == i - 1) && last == i ? pos + 1 : end - 1;
      tr.insert(tr.mapping.map(side), nodes3);
    }
    pos = end;
  }
  return tr.setMeta(fixTablesKey, { fixTables: true });
}
function pastedCells(slice2) {
  if (!slice2.size)
    return null;
  let { content, openStart, openEnd } = slice2;
  while (content.childCount == 1 && (openStart > 0 && openEnd > 0 || content.child(0).type.spec.tableRole == "table")) {
    openStart--;
    openEnd--;
    content = content.child(0).content;
  }
  const first = content.child(0);
  const role = first.type.spec.tableRole;
  const schema = first.type.schema, rows = [];
  if (role == "row") {
    for (let i = 0; i < content.childCount; i++) {
      let cells = content.child(i).content;
      const left = i ? 0 : Math.max(0, openStart - 1);
      const right = i < content.childCount - 1 ? 0 : Math.max(0, openEnd - 1);
      if (left || right)
        cells = fitSlice(
          tableNodeTypes(schema).row,
          new Slice(cells, left, right)
        ).content;
      rows.push(cells);
    }
  } else if (role == "cell" || role == "header_cell") {
    rows.push(
      openStart || openEnd ? fitSlice(
        tableNodeTypes(schema).row,
        new Slice(content, openStart, openEnd)
      ).content : content
    );
  } else {
    return null;
  }
  return ensureRectangular(schema, rows);
}
function ensureRectangular(schema, rows) {
  const widths = [];
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    for (let j = row.childCount - 1; j >= 0; j--) {
      const { rowspan, colspan } = row.child(j).attrs;
      for (let r = i; r < i + rowspan; r++)
        widths[r] = (widths[r] || 0) + colspan;
    }
  }
  let width = 0;
  for (let r = 0; r < widths.length; r++)
    width = Math.max(width, widths[r]);
  for (let r = 0; r < widths.length; r++) {
    if (r >= rows.length)
      rows.push(Fragment.empty);
    if (widths[r] < width) {
      const empty2 = tableNodeTypes(schema).cell.createAndFill();
      const cells = [];
      for (let i = widths[r]; i < width; i++) {
        cells.push(empty2);
      }
      rows[r] = rows[r].append(Fragment.from(cells));
    }
  }
  return { height: rows.length, width, rows };
}
function fitSlice(nodeType, slice2) {
  const node = nodeType.createAndFill();
  const tr = new Transform(node).replace(0, node.content.size, slice2);
  return tr.doc;
}
function clipCells({ width, height, rows }, newWidth, newHeight) {
  if (width != newWidth) {
    const added = [];
    const newRows = [];
    for (let row = 0; row < rows.length; row++) {
      const frag = rows[row], cells = [];
      for (let col = added[row] || 0, i = 0; col < newWidth; i++) {
        let cell = frag.child(i % frag.childCount);
        if (col + cell.attrs.colspan > newWidth)
          cell = cell.type.createChecked(
            removeColSpan(
              cell.attrs,
              cell.attrs.colspan,
              col + cell.attrs.colspan - newWidth
            ),
            cell.content
          );
        cells.push(cell);
        col += cell.attrs.colspan;
        for (let j = 1; j < cell.attrs.rowspan; j++)
          added[row + j] = (added[row + j] || 0) + cell.attrs.colspan;
      }
      newRows.push(Fragment.from(cells));
    }
    rows = newRows;
    width = newWidth;
  }
  if (height != newHeight) {
    const newRows = [];
    for (let row = 0, i = 0; row < newHeight; row++, i++) {
      const cells = [], source = rows[i % height];
      for (let j = 0; j < source.childCount; j++) {
        let cell = source.child(j);
        if (row + cell.attrs.rowspan > newHeight)
          cell = cell.type.create(
            {
              ...cell.attrs,
              rowspan: Math.max(1, newHeight - cell.attrs.rowspan)
            },
            cell.content
          );
        cells.push(cell);
      }
      newRows.push(Fragment.from(cells));
    }
    rows = newRows;
    height = newHeight;
  }
  return { width, height, rows };
}
function growTable(tr, map2, table, start, width, height, mapFrom) {
  const schema = tr.doc.type.schema;
  const types = tableNodeTypes(schema);
  let empty2;
  let emptyHead;
  if (width > map2.width) {
    for (let row = 0, rowEnd = 0; row < map2.height; row++) {
      const rowNode = table.child(row);
      rowEnd += rowNode.nodeSize;
      const cells = [];
      let add2;
      if (rowNode.lastChild == null || rowNode.lastChild.type == types.cell)
        add2 = empty2 || (empty2 = types.cell.createAndFill());
      else
        add2 = emptyHead || (emptyHead = types.header_cell.createAndFill());
      for (let i = map2.width; i < width; i++)
        cells.push(add2);
      tr.insert(tr.mapping.slice(mapFrom).map(rowEnd - 1 + start), cells);
    }
  }
  if (height > map2.height) {
    const cells = [];
    for (let i = 0, start2 = (map2.height - 1) * map2.width; i < Math.max(map2.width, width); i++) {
      const header = i >= map2.width ? false : table.nodeAt(map2.map[start2 + i]).type == types.header_cell;
      cells.push(
        header ? emptyHead || (emptyHead = types.header_cell.createAndFill()) : empty2 || (empty2 = types.cell.createAndFill())
      );
    }
    const emptyRow = types.row.create(null, Fragment.from(cells)), rows = [];
    for (let i = map2.height; i < height; i++)
      rows.push(emptyRow);
    tr.insert(tr.mapping.slice(mapFrom).map(start + table.nodeSize - 2), rows);
  }
  return !!(empty2 || emptyHead);
}
function isolateHorizontal(tr, map2, table, start, left, right, top, mapFrom) {
  if (top == 0 || top == map2.height)
    return false;
  let found2 = false;
  for (let col = left; col < right; col++) {
    const index = top * map2.width + col, pos = map2.map[index];
    if (map2.map[index - map2.width] == pos) {
      found2 = true;
      const cell = table.nodeAt(pos);
      const { top: cellTop, left: cellLeft } = map2.findCell(pos);
      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + start), null, {
        ...cell.attrs,
        rowspan: top - cellTop
      });
      tr.insert(
        tr.mapping.slice(mapFrom).map(map2.positionAt(top, cellLeft, table)),
        cell.type.createAndFill({
          ...cell.attrs,
          rowspan: cellTop + cell.attrs.rowspan - top
        })
      );
      col += cell.attrs.colspan - 1;
    }
  }
  return found2;
}
function isolateVertical(tr, map2, table, start, top, bottom, left, mapFrom) {
  if (left == 0 || left == map2.width)
    return false;
  let found2 = false;
  for (let row = top; row < bottom; row++) {
    const index = row * map2.width + left, pos = map2.map[index];
    if (map2.map[index - 1] == pos) {
      found2 = true;
      const cell = table.nodeAt(pos);
      const cellLeft = map2.colCount(pos);
      const updatePos = tr.mapping.slice(mapFrom).map(pos + start);
      tr.setNodeMarkup(
        updatePos,
        null,
        removeColSpan(
          cell.attrs,
          left - cellLeft,
          cell.attrs.colspan - (left - cellLeft)
        )
      );
      tr.insert(
        updatePos + cell.nodeSize,
        cell.type.createAndFill(
          removeColSpan(cell.attrs, 0, left - cellLeft)
        )
      );
      row += cell.attrs.rowspan - 1;
    }
  }
  return found2;
}
function insertCells(state, dispatch, tableStart, rect, cells) {
  let table = tableStart ? state.doc.nodeAt(tableStart - 1) : state.doc;
  if (!table) {
    throw new Error("No table found");
  }
  let map2 = TableMap.get(table);
  const { top, left } = rect;
  const right = left + cells.width, bottom = top + cells.height;
  const tr = state.tr;
  let mapFrom = 0;
  function recomp() {
    table = tableStart ? tr.doc.nodeAt(tableStart - 1) : tr.doc;
    if (!table) {
      throw new Error("No table found");
    }
    map2 = TableMap.get(table);
    mapFrom = tr.mapping.maps.length;
  }
  if (growTable(tr, map2, table, tableStart, right, bottom, mapFrom))
    recomp();
  if (isolateHorizontal(tr, map2, table, tableStart, left, right, top, mapFrom))
    recomp();
  if (isolateHorizontal(tr, map2, table, tableStart, left, right, bottom, mapFrom))
    recomp();
  if (isolateVertical(tr, map2, table, tableStart, top, bottom, left, mapFrom))
    recomp();
  if (isolateVertical(tr, map2, table, tableStart, top, bottom, right, mapFrom))
    recomp();
  for (let row = top; row < bottom; row++) {
    const from2 = map2.positionAt(row, left, table), to = map2.positionAt(row, right, table);
    tr.replace(
      tr.mapping.slice(mapFrom).map(from2 + tableStart),
      tr.mapping.slice(mapFrom).map(to + tableStart),
      new Slice(cells.rows[row - top], 0, 0)
    );
  }
  recomp();
  tr.setSelection(
    new CellSelection(
      tr.doc.resolve(tableStart + map2.positionAt(top, left, table)),
      tr.doc.resolve(tableStart + map2.positionAt(bottom - 1, right - 1, table))
    )
  );
  dispatch(tr);
}
var handleKeyDown = keydownHandler({
  ArrowLeft: arrow("horiz", -1),
  ArrowRight: arrow("horiz", 1),
  ArrowUp: arrow("vert", -1),
  ArrowDown: arrow("vert", 1),
  "Shift-ArrowLeft": shiftArrow("horiz", -1),
  "Shift-ArrowRight": shiftArrow("horiz", 1),
  "Shift-ArrowUp": shiftArrow("vert", -1),
  "Shift-ArrowDown": shiftArrow("vert", 1),
  Backspace: deleteCellSelection,
  "Mod-Backspace": deleteCellSelection,
  Delete: deleteCellSelection,
  "Mod-Delete": deleteCellSelection
});
function maybeSetSelection(state, dispatch, selection) {
  if (selection.eq(state.selection))
    return false;
  if (dispatch)
    dispatch(state.tr.setSelection(selection).scrollIntoView());
  return true;
}
function arrow(axis, dir) {
  return (state, dispatch, view) => {
    if (!view)
      return false;
    const sel = state.selection;
    if (sel instanceof CellSelection) {
      return maybeSetSelection(
        state,
        dispatch,
        Selection.near(sel.$headCell, dir)
      );
    }
    if (axis != "horiz" && !sel.empty)
      return false;
    const end = atEndOfCell(view, axis, dir);
    if (end == null)
      return false;
    if (axis == "horiz") {
      return maybeSetSelection(
        state,
        dispatch,
        Selection.near(state.doc.resolve(sel.head + dir), dir)
      );
    } else {
      const $cell = state.doc.resolve(end);
      const $next = nextCell($cell, axis, dir);
      let newSel;
      if ($next)
        newSel = Selection.near($next, 1);
      else if (dir < 0)
        newSel = Selection.near(state.doc.resolve($cell.before(-1)), -1);
      else
        newSel = Selection.near(state.doc.resolve($cell.after(-1)), 1);
      return maybeSetSelection(state, dispatch, newSel);
    }
  };
}
function shiftArrow(axis, dir) {
  return (state, dispatch, view) => {
    if (!view)
      return false;
    const sel = state.selection;
    let cellSel;
    if (sel instanceof CellSelection) {
      cellSel = sel;
    } else {
      const end = atEndOfCell(view, axis, dir);
      if (end == null)
        return false;
      cellSel = new CellSelection(state.doc.resolve(end));
    }
    const $head = nextCell(cellSel.$headCell, axis, dir);
    if (!$head)
      return false;
    return maybeSetSelection(
      state,
      dispatch,
      new CellSelection(cellSel.$anchorCell, $head)
    );
  };
}
function deleteCellSelection(state, dispatch) {
  const sel = state.selection;
  if (!(sel instanceof CellSelection))
    return false;
  if (dispatch) {
    const tr = state.tr;
    const baseContent = tableNodeTypes(state.schema).cell.createAndFill().content;
    sel.forEachCell((cell, pos) => {
      if (!cell.content.eq(baseContent))
        tr.replace(
          tr.mapping.map(pos + 1),
          tr.mapping.map(pos + cell.nodeSize - 1),
          new Slice(baseContent, 0, 0)
        );
    });
    if (tr.docChanged)
      dispatch(tr);
  }
  return true;
}
function handleTripleClick2(view, pos) {
  const doc3 = view.state.doc, $cell = cellAround(doc3.resolve(pos));
  if (!$cell)
    return false;
  view.dispatch(view.state.tr.setSelection(new CellSelection($cell)));
  return true;
}
function handlePaste(view, _, slice2) {
  if (!isInTable(view.state))
    return false;
  let cells = pastedCells(slice2);
  const sel = view.state.selection;
  if (sel instanceof CellSelection) {
    if (!cells)
      cells = {
        width: 1,
        height: 1,
        rows: [
          Fragment.from(
            fitSlice(tableNodeTypes(view.state.schema).cell, slice2)
          )
        ]
      };
    const table = sel.$anchorCell.node(-1);
    const start = sel.$anchorCell.start(-1);
    const rect = TableMap.get(table).rectBetween(
      sel.$anchorCell.pos - start,
      sel.$headCell.pos - start
    );
    cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);
    insertCells(view.state, view.dispatch, start, rect, cells);
    return true;
  } else if (cells) {
    const $cell = selectionCell(view.state);
    const start = $cell.start(-1);
    insertCells(
      view.state,
      view.dispatch,
      start,
      TableMap.get($cell.node(-1)).findCell($cell.pos - start),
      cells
    );
    return true;
  } else {
    return false;
  }
}
function handleMouseDown(view, startEvent) {
  var _a2;
  if (startEvent.ctrlKey || startEvent.metaKey)
    return;
  const startDOMCell = domInCell(view, startEvent.target);
  let $anchor;
  if (startEvent.shiftKey && view.state.selection instanceof CellSelection) {
    setCellSelection(view.state.selection.$anchorCell, startEvent);
    startEvent.preventDefault();
  } else if (startEvent.shiftKey && startDOMCell && ($anchor = cellAround(view.state.selection.$anchor)) != null && ((_a2 = cellUnderMouse(view, startEvent)) == null ? void 0 : _a2.pos) != $anchor.pos) {
    setCellSelection($anchor, startEvent);
    startEvent.preventDefault();
  } else if (!startDOMCell) {
    return;
  }
  function setCellSelection($anchor2, event) {
    let $head = cellUnderMouse(view, event);
    const starting = tableEditingKey.getState(view.state) == null;
    if (!$head || !inSameTable($anchor2, $head)) {
      if (starting)
        $head = $anchor2;
      else
        return;
    }
    const selection = new CellSelection($anchor2, $head);
    if (starting || !view.state.selection.eq(selection)) {
      const tr = view.state.tr.setSelection(selection);
      if (starting)
        tr.setMeta(tableEditingKey, $anchor2.pos);
      view.dispatch(tr);
    }
  }
  function stop() {
    view.root.removeEventListener("mouseup", stop);
    view.root.removeEventListener("dragstart", stop);
    view.root.removeEventListener("mousemove", move);
    if (tableEditingKey.getState(view.state) != null)
      view.dispatch(view.state.tr.setMeta(tableEditingKey, -1));
  }
  function move(_event) {
    const event = _event;
    const anchor = tableEditingKey.getState(view.state);
    let $anchor2;
    if (anchor != null) {
      $anchor2 = view.state.doc.resolve(anchor);
    } else if (domInCell(view, event.target) != startDOMCell) {
      $anchor2 = cellUnderMouse(view, startEvent);
      if (!$anchor2)
        return stop();
    }
    if ($anchor2)
      setCellSelection($anchor2, event);
  }
  view.root.addEventListener("mouseup", stop);
  view.root.addEventListener("dragstart", stop);
  view.root.addEventListener("mousemove", move);
}
function atEndOfCell(view, axis, dir) {
  if (!(view.state.selection instanceof TextSelection))
    return null;
  const { $head } = view.state.selection;
  for (let d = $head.depth - 1; d >= 0; d--) {
    const parent = $head.node(d), index = dir < 0 ? $head.index(d) : $head.indexAfter(d);
    if (index != (dir < 0 ? 0 : parent.childCount))
      return null;
    if (parent.type.spec.tableRole == "cell" || parent.type.spec.tableRole == "header_cell") {
      const cellPos = $head.before(d);
      const dirStr = axis == "vert" ? dir > 0 ? "down" : "up" : dir > 0 ? "right" : "left";
      return view.endOfTextblock(dirStr) ? cellPos : null;
    }
  }
  return null;
}
function domInCell(view, dom) {
  for (; dom && dom != view.dom; dom = dom.parentNode) {
    if (dom.nodeName == "TD" || dom.nodeName == "TH") {
      return dom;
    }
  }
  return null;
}
function cellUnderMouse(view, event) {
  const mousePos = view.posAtCoords({
    left: event.clientX,
    top: event.clientY
  });
  if (!mousePos)
    return null;
  return mousePos ? cellAround(view.state.doc.resolve(mousePos.pos)) : null;
}
var TableView = class {
  constructor(node, cellMinWidth) {
    this.node = node;
    this.cellMinWidth = cellMinWidth;
    this.dom = document.createElement("div");
    this.dom.className = "tableWrapper";
    this.table = this.dom.appendChild(document.createElement("table"));
    this.colgroup = this.table.appendChild(document.createElement("colgroup"));
    updateColumnsOnResize(node, this.colgroup, this.table, cellMinWidth);
    this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(node) {
    if (node.type != this.node.type)
      return false;
    this.node = node;
    updateColumnsOnResize(node, this.colgroup, this.table, this.cellMinWidth);
    return true;
  }
  ignoreMutation(record) {
    return record.type == "attributes" && (record.target == this.table || this.colgroup.contains(record.target));
  }
};
function updateColumnsOnResize(node, colgroup, table, cellMinWidth, overrideCol, overrideValue) {
  var _a2;
  let totalWidth = 0;
  let fixedWidth = true;
  let nextDOM = colgroup.firstChild;
  const row = node.firstChild;
  if (!row)
    return;
  for (let i = 0, col = 0; i < row.childCount; i++) {
    const { colspan, colwidth } = row.child(i).attrs;
    for (let j = 0; j < colspan; j++, col++) {
      const hasWidth = overrideCol == col ? overrideValue : colwidth && colwidth[j];
      const cssWidth = hasWidth ? hasWidth + "px" : "";
      totalWidth += hasWidth || cellMinWidth;
      if (!hasWidth)
        fixedWidth = false;
      if (!nextDOM) {
        colgroup.appendChild(document.createElement("col")).style.width = cssWidth;
      } else {
        if (nextDOM.style.width != cssWidth)
          nextDOM.style.width = cssWidth;
        nextDOM = nextDOM.nextSibling;
      }
    }
  }
  while (nextDOM) {
    const after = nextDOM.nextSibling;
    (_a2 = nextDOM.parentNode) == null ? void 0 : _a2.removeChild(nextDOM);
    nextDOM = after;
  }
  if (fixedWidth) {
    table.style.width = totalWidth + "px";
    table.style.minWidth = "";
  } else {
    table.style.width = "";
    table.style.minWidth = totalWidth + "px";
  }
}
var columnResizingPluginKey = new PluginKey(
  "tableColumnResizing"
);
function columnResizing({
  handleWidth = 5,
  cellMinWidth = 25,
  View = TableView,
  lastColumnResizable = true
} = {}) {
  const plugin = new Plugin({
    key: columnResizingPluginKey,
    state: {
      init(_, state) {
        plugin.spec.props.nodeViews[tableNodeTypes(state.schema).table.name] = (node, view) => new View(node, cellMinWidth, view);
        return new ResizeState(-1, false);
      },
      apply(tr, prev) {
        return prev.apply(tr);
      }
    },
    props: {
      attributes: (state) => {
        const pluginState = columnResizingPluginKey.getState(state);
        return pluginState && pluginState.activeHandle > -1 ? { class: "resize-cursor" } : {};
      },
      handleDOMEvents: {
        mousemove: (view, event) => {
          handleMouseMove(
            view,
            event,
            handleWidth,
            cellMinWidth,
            lastColumnResizable
          );
        },
        mouseleave: (view) => {
          handleMouseLeave(view);
        },
        mousedown: (view, event) => {
          handleMouseDown2(view, event, cellMinWidth);
        }
      },
      decorations: (state) => {
        const pluginState = columnResizingPluginKey.getState(state);
        if (pluginState && pluginState.activeHandle > -1) {
          return handleDecorations(state, pluginState.activeHandle);
        }
      },
      nodeViews: {}
    }
  });
  return plugin;
}
var ResizeState = class {
  constructor(activeHandle, dragging) {
    this.activeHandle = activeHandle;
    this.dragging = dragging;
  }
  apply(tr) {
    const state = this;
    const action = tr.getMeta(columnResizingPluginKey);
    if (action && action.setHandle != null)
      return new ResizeState(action.setHandle, false);
    if (action && action.setDragging !== void 0)
      return new ResizeState(state.activeHandle, action.setDragging);
    if (state.activeHandle > -1 && tr.docChanged) {
      let handle = tr.mapping.map(state.activeHandle, -1);
      if (!pointsAtCell(tr.doc.resolve(handle))) {
        handle = -1;
      }
      return new ResizeState(handle, state.dragging);
    }
    return state;
  }
};
function handleMouseMove(view, event, handleWidth, cellMinWidth, lastColumnResizable) {
  const pluginState = columnResizingPluginKey.getState(view.state);
  if (!pluginState)
    return;
  if (!pluginState.dragging) {
    const target = domCellAround(event.target);
    let cell = -1;
    if (target) {
      const { left, right } = target.getBoundingClientRect();
      if (event.clientX - left <= handleWidth)
        cell = edgeCell(view, event, "left");
      else if (right - event.clientX <= handleWidth)
        cell = edgeCell(view, event, "right");
    }
    if (cell != pluginState.activeHandle) {
      if (!lastColumnResizable && cell !== -1) {
        const $cell = view.state.doc.resolve(cell);
        const table = $cell.node(-1);
        const map2 = TableMap.get(table);
        const tableStart = $cell.start(-1);
        const col = map2.colCount($cell.pos - tableStart) + $cell.nodeAfter.attrs.colspan - 1;
        if (col == map2.width - 1) {
          return;
        }
      }
      updateHandle(view, cell);
    }
  }
}
function handleMouseLeave(view) {
  const pluginState = columnResizingPluginKey.getState(view.state);
  if (pluginState && pluginState.activeHandle > -1 && !pluginState.dragging)
    updateHandle(view, -1);
}
function handleMouseDown2(view, event, cellMinWidth) {
  const pluginState = columnResizingPluginKey.getState(view.state);
  if (!pluginState || pluginState.activeHandle == -1 || pluginState.dragging)
    return false;
  const cell = view.state.doc.nodeAt(pluginState.activeHandle);
  const width = currentColWidth(view, pluginState.activeHandle, cell.attrs);
  view.dispatch(
    view.state.tr.setMeta(columnResizingPluginKey, {
      setDragging: { startX: event.clientX, startWidth: width }
    })
  );
  function finish(event2) {
    window.removeEventListener("mouseup", finish);
    window.removeEventListener("mousemove", move);
    const pluginState2 = columnResizingPluginKey.getState(view.state);
    if (pluginState2 == null ? void 0 : pluginState2.dragging) {
      updateColumnWidth(
        view,
        pluginState2.activeHandle,
        draggedWidth(pluginState2.dragging, event2, cellMinWidth)
      );
      view.dispatch(
        view.state.tr.setMeta(columnResizingPluginKey, { setDragging: null })
      );
    }
  }
  function move(event2) {
    if (!event2.which)
      return finish(event2);
    const pluginState2 = columnResizingPluginKey.getState(view.state);
    if (!pluginState2)
      return;
    if (pluginState2.dragging) {
      const dragged = draggedWidth(pluginState2.dragging, event2, cellMinWidth);
      displayColumnWidth(view, pluginState2.activeHandle, dragged, cellMinWidth);
    }
  }
  window.addEventListener("mouseup", finish);
  window.addEventListener("mousemove", move);
  event.preventDefault();
  return true;
}
function currentColWidth(view, cellPos, { colspan, colwidth }) {
  const width = colwidth && colwidth[colwidth.length - 1];
  if (width)
    return width;
  const dom = view.domAtPos(cellPos);
  const node = dom.node.childNodes[dom.offset];
  let domWidth = node.offsetWidth, parts = colspan;
  if (colwidth) {
    for (let i = 0; i < colspan; i++)
      if (colwidth[i]) {
        domWidth -= colwidth[i];
        parts--;
      }
  }
  return domWidth / parts;
}
function domCellAround(target) {
  while (target && target.nodeName != "TD" && target.nodeName != "TH")
    target = target.classList && target.classList.contains("ProseMirror") ? null : target.parentNode;
  return target;
}
function edgeCell(view, event, side) {
  const found2 = view.posAtCoords({ left: event.clientX, top: event.clientY });
  if (!found2)
    return -1;
  const { pos } = found2;
  const $cell = cellAround(view.state.doc.resolve(pos));
  if (!$cell)
    return -1;
  if (side == "right")
    return $cell.pos;
  const map2 = TableMap.get($cell.node(-1)), start = $cell.start(-1);
  const index = map2.map.indexOf($cell.pos - start);
  return index % map2.width == 0 ? -1 : start + map2.map[index - 1];
}
function draggedWidth(dragging, event, cellMinWidth) {
  const offset = event.clientX - dragging.startX;
  return Math.max(cellMinWidth, dragging.startWidth + offset);
}
function updateHandle(view, value2) {
  view.dispatch(
    view.state.tr.setMeta(columnResizingPluginKey, { setHandle: value2 })
  );
}
function updateColumnWidth(view, cell, width) {
  const $cell = view.state.doc.resolve(cell);
  const table = $cell.node(-1), map2 = TableMap.get(table), start = $cell.start(-1);
  const col = map2.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;
  const tr = view.state.tr;
  for (let row = 0; row < map2.height; row++) {
    const mapIndex = row * map2.width + col;
    if (row && map2.map[mapIndex] == map2.map[mapIndex - map2.width])
      continue;
    const pos = map2.map[mapIndex];
    const attrs = table.nodeAt(pos).attrs;
    const index = attrs.colspan == 1 ? 0 : col - map2.colCount(pos);
    if (attrs.colwidth && attrs.colwidth[index] == width)
      continue;
    const colwidth = attrs.colwidth ? attrs.colwidth.slice() : zeroes(attrs.colspan);
    colwidth[index] = width;
    tr.setNodeMarkup(start + pos, null, { ...attrs, colwidth });
  }
  if (tr.docChanged)
    view.dispatch(tr);
}
function displayColumnWidth(view, cell, width, cellMinWidth) {
  const $cell = view.state.doc.resolve(cell);
  const table = $cell.node(-1), start = $cell.start(-1);
  const col = TableMap.get(table).colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;
  let dom = view.domAtPos($cell.start(-1)).node;
  while (dom && dom.nodeName != "TABLE") {
    dom = dom.parentNode;
  }
  if (!dom)
    return;
  updateColumnsOnResize(
    table,
    dom.firstChild,
    dom,
    cellMinWidth,
    col,
    width
  );
}
function zeroes(n) {
  return Array(n).fill(0);
}
function handleDecorations(state, cell) {
  const decorations = [];
  const $cell = state.doc.resolve(cell);
  const table = $cell.node(-1);
  if (!table) {
    return DecorationSet.empty;
  }
  const map2 = TableMap.get(table);
  const start = $cell.start(-1);
  const col = map2.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan;
  for (let row = 0; row < map2.height; row++) {
    const index = col + row * map2.width - 1;
    if ((col == map2.width || map2.map[index] != map2.map[index + 1]) && (row == 0 || map2.map[index - 1] != map2.map[index - 1 - map2.width])) {
      const cellPos = map2.map[index];
      const pos = start + cellPos + table.nodeAt(cellPos).nodeSize - 1;
      const dom = document.createElement("div");
      dom.className = "column-resize-handle";
      decorations.push(Decoration.widget(pos, dom));
    }
  }
  return DecorationSet.create(state.doc, decorations);
}
function selectedRect(state) {
  const sel = state.selection;
  const $pos = selectionCell(state);
  const table = $pos.node(-1);
  const tableStart = $pos.start(-1);
  const map2 = TableMap.get(table);
  const rect = sel instanceof CellSelection ? map2.rectBetween(
    sel.$anchorCell.pos - tableStart,
    sel.$headCell.pos - tableStart
  ) : map2.findCell($pos.pos - tableStart);
  return { ...rect, tableStart, map: map2, table };
}
function addColumn(tr, { map: map2, tableStart, table }, col) {
  let refColumn = col > 0 ? -1 : 0;
  if (columnIsHeader(map2, table, col + refColumn)) {
    refColumn = col == 0 || col == map2.width ? null : 0;
  }
  for (let row = 0; row < map2.height; row++) {
    const index = row * map2.width + col;
    if (col > 0 && col < map2.width && map2.map[index - 1] == map2.map[index]) {
      const pos = map2.map[index];
      const cell = table.nodeAt(pos);
      tr.setNodeMarkup(
        tr.mapping.map(tableStart + pos),
        null,
        addColSpan(cell.attrs, col - map2.colCount(pos))
      );
      row += cell.attrs.rowspan - 1;
    } else {
      const type = refColumn == null ? tableNodeTypes(table.type.schema).cell : table.nodeAt(map2.map[index + refColumn]).type;
      const pos = map2.positionAt(row, col, table);
      tr.insert(tr.mapping.map(tableStart + pos), type.createAndFill());
    }
  }
  return tr;
}
function addColumnBefore(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state);
    dispatch(addColumn(state.tr, rect, rect.left));
  }
  return true;
}
function addColumnAfter(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state);
    dispatch(addColumn(state.tr, rect, rect.right));
  }
  return true;
}
function removeColumn(tr, { map: map2, table, tableStart }, col) {
  const mapStart = tr.mapping.maps.length;
  for (let row = 0; row < map2.height; ) {
    const index = row * map2.width + col;
    const pos = map2.map[index];
    const cell = table.nodeAt(pos);
    const attrs = cell.attrs;
    if (col > 0 && map2.map[index - 1] == pos || col < map2.width - 1 && map2.map[index + 1] == pos) {
      tr.setNodeMarkup(
        tr.mapping.slice(mapStart).map(tableStart + pos),
        null,
        removeColSpan(attrs, col - map2.colCount(pos))
      );
    } else {
      const start = tr.mapping.slice(mapStart).map(tableStart + pos);
      tr.delete(start, start + cell.nodeSize);
    }
    row += attrs.rowspan;
  }
}
function deleteColumn(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state);
    const tr = state.tr;
    if (rect.left == 0 && rect.right == rect.map.width)
      return false;
    for (let i = rect.right - 1; ; i--) {
      removeColumn(tr, rect, i);
      if (i == rect.left)
        break;
      const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;
      if (!table) {
        throw RangeError("No table found");
      }
      rect.table = table;
      rect.map = TableMap.get(table);
    }
    dispatch(tr);
  }
  return true;
}
function rowIsHeader(map2, table, row) {
  var _a2;
  const headerCell = tableNodeTypes(table.type.schema).header_cell;
  for (let col = 0; col < map2.width; col++)
    if (((_a2 = table.nodeAt(map2.map[col + row * map2.width])) == null ? void 0 : _a2.type) != headerCell)
      return false;
  return true;
}
function addRow(tr, { map: map2, tableStart, table }, row) {
  var _a2;
  let rowPos = tableStart;
  for (let i = 0; i < row; i++)
    rowPos += table.child(i).nodeSize;
  const cells = [];
  let refRow = row > 0 ? -1 : 0;
  if (rowIsHeader(map2, table, row + refRow))
    refRow = row == 0 || row == map2.height ? null : 0;
  for (let col = 0, index = map2.width * row; col < map2.width; col++, index++) {
    if (row > 0 && row < map2.height && map2.map[index] == map2.map[index - map2.width]) {
      const pos = map2.map[index];
      const attrs = table.nodeAt(pos).attrs;
      tr.setNodeMarkup(tableStart + pos, null, {
        ...attrs,
        rowspan: attrs.rowspan + 1
      });
      col += attrs.colspan - 1;
    } else {
      const type = refRow == null ? tableNodeTypes(table.type.schema).cell : (_a2 = table.nodeAt(map2.map[index + refRow * map2.width])) == null ? void 0 : _a2.type;
      const node = type == null ? void 0 : type.createAndFill();
      if (node)
        cells.push(node);
    }
  }
  tr.insert(rowPos, tableNodeTypes(table.type.schema).row.create(null, cells));
  return tr;
}
function addRowBefore(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state);
    dispatch(addRow(state.tr, rect, rect.top));
  }
  return true;
}
function addRowAfter(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state);
    dispatch(addRow(state.tr, rect, rect.bottom));
  }
  return true;
}
function removeRow(tr, { map: map2, table, tableStart }, row) {
  let rowPos = 0;
  for (let i = 0; i < row; i++)
    rowPos += table.child(i).nodeSize;
  const nextRow = rowPos + table.child(row).nodeSize;
  const mapFrom = tr.mapping.maps.length;
  tr.delete(rowPos + tableStart, nextRow + tableStart);
  for (let col = 0, index = row * map2.width; col < map2.width; col++, index++) {
    const pos = map2.map[index];
    if (row > 0 && pos == map2.map[index - map2.width]) {
      const attrs = table.nodeAt(pos).attrs;
      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + tableStart), null, {
        ...attrs,
        rowspan: attrs.rowspan - 1
      });
      col += attrs.colspan - 1;
    } else if (row < map2.width && pos == map2.map[index + map2.width]) {
      const cell = table.nodeAt(pos);
      const attrs = cell.attrs;
      const copy2 = cell.type.create(
        { ...attrs, rowspan: cell.attrs.rowspan - 1 },
        cell.content
      );
      const newPos = map2.positionAt(row + 1, col, table);
      tr.insert(tr.mapping.slice(mapFrom).map(tableStart + newPos), copy2);
      col += attrs.colspan - 1;
    }
  }
}
function deleteRow(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state), tr = state.tr;
    if (rect.top == 0 && rect.bottom == rect.map.height)
      return false;
    for (let i = rect.bottom - 1; ; i--) {
      removeRow(tr, rect, i);
      if (i == rect.top)
        break;
      const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;
      if (!table) {
        throw RangeError("No table found");
      }
      rect.table = table;
      rect.map = TableMap.get(rect.table);
    }
    dispatch(tr);
  }
  return true;
}
function isEmpty(cell) {
  const c = cell.content;
  return c.childCount == 1 && c.child(0).isTextblock && c.child(0).childCount == 0;
}
function cellsOverlapRectangle({ width, height, map: map2 }, rect) {
  let indexTop = rect.top * width + rect.left, indexLeft = indexTop;
  let indexBottom = (rect.bottom - 1) * width + rect.left, indexRight = indexTop + (rect.right - rect.left - 1);
  for (let i = rect.top; i < rect.bottom; i++) {
    if (rect.left > 0 && map2[indexLeft] == map2[indexLeft - 1] || rect.right < width && map2[indexRight] == map2[indexRight + 1])
      return true;
    indexLeft += width;
    indexRight += width;
  }
  for (let i = rect.left; i < rect.right; i++) {
    if (rect.top > 0 && map2[indexTop] == map2[indexTop - width] || rect.bottom < height && map2[indexBottom] == map2[indexBottom + width])
      return true;
    indexTop++;
    indexBottom++;
  }
  return false;
}
function mergeCells(state, dispatch) {
  const sel = state.selection;
  if (!(sel instanceof CellSelection) || sel.$anchorCell.pos == sel.$headCell.pos)
    return false;
  const rect = selectedRect(state), { map: map2 } = rect;
  if (cellsOverlapRectangle(map2, rect))
    return false;
  if (dispatch) {
    const tr = state.tr;
    const seen = {};
    let content = Fragment.empty;
    let mergedPos;
    let mergedCell;
    for (let row = rect.top; row < rect.bottom; row++) {
      for (let col = rect.left; col < rect.right; col++) {
        const cellPos = map2.map[row * map2.width + col];
        const cell = rect.table.nodeAt(cellPos);
        if (seen[cellPos] || !cell)
          continue;
        seen[cellPos] = true;
        if (mergedPos == null) {
          mergedPos = cellPos;
          mergedCell = cell;
        } else {
          if (!isEmpty(cell))
            content = content.append(cell.content);
          const mapped = tr.mapping.map(cellPos + rect.tableStart);
          tr.delete(mapped, mapped + cell.nodeSize);
        }
      }
    }
    if (mergedPos == null || mergedCell == null) {
      return true;
    }
    tr.setNodeMarkup(mergedPos + rect.tableStart, null, {
      ...addColSpan(
        mergedCell.attrs,
        mergedCell.attrs.colspan,
        rect.right - rect.left - mergedCell.attrs.colspan
      ),
      rowspan: rect.bottom - rect.top
    });
    if (content.size) {
      const end = mergedPos + 1 + mergedCell.content.size;
      const start = isEmpty(mergedCell) ? mergedPos + 1 : end;
      tr.replaceWith(start + rect.tableStart, end + rect.tableStart, content);
    }
    tr.setSelection(
      new CellSelection(tr.doc.resolve(mergedPos + rect.tableStart))
    );
    dispatch(tr);
  }
  return true;
}
function splitCell(state, dispatch) {
  const nodeTypes = tableNodeTypes(state.schema);
  return splitCellWithType(({ node }) => {
    return nodeTypes[node.type.spec.tableRole];
  })(state, dispatch);
}
function splitCellWithType(getCellType) {
  return (state, dispatch) => {
    var _a2;
    const sel = state.selection;
    let cellNode;
    let cellPos;
    if (!(sel instanceof CellSelection)) {
      cellNode = cellWrapping(sel.$from);
      if (!cellNode)
        return false;
      cellPos = (_a2 = cellAround(sel.$from)) == null ? void 0 : _a2.pos;
    } else {
      if (sel.$anchorCell.pos != sel.$headCell.pos)
        return false;
      cellNode = sel.$anchorCell.nodeAfter;
      cellPos = sel.$anchorCell.pos;
    }
    if (cellNode == null || cellPos == null) {
      return false;
    }
    if (cellNode.attrs.colspan == 1 && cellNode.attrs.rowspan == 1) {
      return false;
    }
    if (dispatch) {
      let baseAttrs = cellNode.attrs;
      const attrs = [];
      const colwidth = baseAttrs.colwidth;
      if (baseAttrs.rowspan > 1)
        baseAttrs = { ...baseAttrs, rowspan: 1 };
      if (baseAttrs.colspan > 1)
        baseAttrs = { ...baseAttrs, colspan: 1 };
      const rect = selectedRect(state), tr = state.tr;
      for (let i = 0; i < rect.right - rect.left; i++)
        attrs.push(
          colwidth ? {
            ...baseAttrs,
            colwidth: colwidth && colwidth[i] ? [colwidth[i]] : null
          } : baseAttrs
        );
      let lastCell;
      for (let row = rect.top; row < rect.bottom; row++) {
        let pos = rect.map.positionAt(row, rect.left, rect.table);
        if (row == rect.top)
          pos += cellNode.nodeSize;
        for (let col = rect.left, i = 0; col < rect.right; col++, i++) {
          if (col == rect.left && row == rect.top)
            continue;
          tr.insert(
            lastCell = tr.mapping.map(pos + rect.tableStart, 1),
            getCellType({ node: cellNode, row, col }).createAndFill(attrs[i])
          );
        }
      }
      tr.setNodeMarkup(
        cellPos,
        getCellType({ node: cellNode, row: rect.top, col: rect.left }),
        attrs[0]
      );
      if (sel instanceof CellSelection)
        tr.setSelection(
          new CellSelection(
            tr.doc.resolve(sel.$anchorCell.pos),
            lastCell ? tr.doc.resolve(lastCell) : void 0
          )
        );
      dispatch(tr);
    }
    return true;
  };
}
function setCellAttr(name, value2) {
  return function(state, dispatch) {
    if (!isInTable(state))
      return false;
    const $cell = selectionCell(state);
    if ($cell.nodeAfter.attrs[name] === value2)
      return false;
    if (dispatch) {
      const tr = state.tr;
      if (state.selection instanceof CellSelection)
        state.selection.forEachCell((node, pos) => {
          if (node.attrs[name] !== value2)
            tr.setNodeMarkup(pos, null, {
              ...node.attrs,
              [name]: value2
            });
        });
      else
        tr.setNodeMarkup($cell.pos, null, {
          ...$cell.nodeAfter.attrs,
          [name]: value2
        });
      dispatch(tr);
    }
    return true;
  };
}
function deprecated_toggleHeader(type) {
  return function(state, dispatch) {
    if (!isInTable(state))
      return false;
    if (dispatch) {
      const types = tableNodeTypes(state.schema);
      const rect = selectedRect(state), tr = state.tr;
      const cells = rect.map.cellsInRect(
        type == "column" ? {
          left: rect.left,
          top: 0,
          right: rect.right,
          bottom: rect.map.height
        } : type == "row" ? {
          left: 0,
          top: rect.top,
          right: rect.map.width,
          bottom: rect.bottom
        } : rect
      );
      const nodes3 = cells.map((pos) => rect.table.nodeAt(pos));
      for (let i = 0; i < cells.length; i++)
        if (nodes3[i].type == types.header_cell)
          tr.setNodeMarkup(
            rect.tableStart + cells[i],
            types.cell,
            nodes3[i].attrs
          );
      if (tr.steps.length == 0)
        for (let i = 0; i < cells.length; i++)
          tr.setNodeMarkup(
            rect.tableStart + cells[i],
            types.header_cell,
            nodes3[i].attrs
          );
      dispatch(tr);
    }
    return true;
  };
}
function isHeaderEnabledByType(type, rect, types) {
  const cellPositions = rect.map.cellsInRect({
    left: 0,
    top: 0,
    right: type == "row" ? rect.map.width : 1,
    bottom: type == "column" ? rect.map.height : 1
  });
  for (let i = 0; i < cellPositions.length; i++) {
    const cell = rect.table.nodeAt(cellPositions[i]);
    if (cell && cell.type !== types.header_cell) {
      return false;
    }
  }
  return true;
}
function toggleHeader(type, options) {
  options = options || { useDeprecatedLogic: false };
  if (options.useDeprecatedLogic)
    return deprecated_toggleHeader(type);
  return function(state, dispatch) {
    if (!isInTable(state))
      return false;
    if (dispatch) {
      const types = tableNodeTypes(state.schema);
      const rect = selectedRect(state), tr = state.tr;
      const isHeaderRowEnabled = isHeaderEnabledByType("row", rect, types);
      const isHeaderColumnEnabled = isHeaderEnabledByType(
        "column",
        rect,
        types
      );
      const isHeaderEnabled = type === "column" ? isHeaderRowEnabled : type === "row" ? isHeaderColumnEnabled : false;
      const selectionStartsAt = isHeaderEnabled ? 1 : 0;
      const cellsRect = type == "column" ? {
        left: 0,
        top: selectionStartsAt,
        right: 1,
        bottom: rect.map.height
      } : type == "row" ? {
        left: selectionStartsAt,
        top: 0,
        right: rect.map.width,
        bottom: 1
      } : rect;
      const newType = type == "column" ? isHeaderColumnEnabled ? types.cell : types.header_cell : type == "row" ? isHeaderRowEnabled ? types.cell : types.header_cell : types.cell;
      rect.map.cellsInRect(cellsRect).forEach((relativeCellPos) => {
        const cellPos = relativeCellPos + rect.tableStart;
        const cell = tr.doc.nodeAt(cellPos);
        if (cell) {
          tr.setNodeMarkup(cellPos, newType, cell.attrs);
        }
      });
      dispatch(tr);
    }
    return true;
  };
}
var toggleHeaderRow = toggleHeader("row", {
  useDeprecatedLogic: true
});
var toggleHeaderColumn = toggleHeader("column", {
  useDeprecatedLogic: true
});
var toggleHeaderCell = toggleHeader("cell", {
  useDeprecatedLogic: true
});
function findNextCell($cell, dir) {
  if (dir < 0) {
    const before = $cell.nodeBefore;
    if (before)
      return $cell.pos - before.nodeSize;
    for (let row = $cell.index(-1) - 1, rowEnd = $cell.before(); row >= 0; row--) {
      const rowNode = $cell.node(-1).child(row);
      const lastChild = rowNode.lastChild;
      if (lastChild) {
        return rowEnd - 1 - lastChild.nodeSize;
      }
      rowEnd -= rowNode.nodeSize;
    }
  } else {
    if ($cell.index() < $cell.parent.childCount - 1) {
      return $cell.pos + $cell.nodeAfter.nodeSize;
    }
    const table = $cell.node(-1);
    for (let row = $cell.indexAfter(-1), rowStart = $cell.after(); row < table.childCount; row++) {
      const rowNode = table.child(row);
      if (rowNode.childCount)
        return rowStart + 1;
      rowStart += rowNode.nodeSize;
    }
  }
  return null;
}
function goToNextCell(direction) {
  return function(state, dispatch) {
    if (!isInTable(state))
      return false;
    const cell = findNextCell(selectionCell(state), direction);
    if (cell == null)
      return false;
    if (dispatch) {
      const $cell = state.doc.resolve(cell);
      dispatch(
        state.tr.setSelection(TextSelection.between($cell, moveCellForward($cell))).scrollIntoView()
      );
    }
    return true;
  };
}
function deleteTable(state, dispatch) {
  const $pos = state.selection.$anchor;
  for (let d = $pos.depth; d > 0; d--) {
    const node = $pos.node(d);
    if (node.type.spec.tableRole == "table") {
      if (dispatch)
        dispatch(
          state.tr.delete($pos.before(d), $pos.after(d)).scrollIntoView()
        );
      return true;
    }
  }
  return false;
}
function tableEditing({
  allowTableNodeSelection = false
} = {}) {
  return new Plugin({
    key: tableEditingKey,
    state: {
      init() {
        return null;
      },
      apply(tr, cur) {
        const set = tr.getMeta(tableEditingKey);
        if (set != null)
          return set == -1 ? null : set;
        if (cur == null || !tr.docChanged)
          return cur;
        const { deleted, pos } = tr.mapping.mapResult(cur);
        return deleted ? null : pos;
      }
    },
    props: {
      decorations: drawCellSelection,
      handleDOMEvents: {
        mousedown: handleMouseDown
      },
      createSelectionBetween(view) {
        return tableEditingKey.getState(view.state) != null ? view.state.selection : null;
      },
      handleTripleClick: handleTripleClick2,
      handleKeyDown,
      handlePaste
    },
    appendTransaction(_, oldState, state) {
      return normalizeSelection(
        state,
        fixTables(state, oldState),
        allowTableNodeSelection
      );
    }
  });
}

// node_modules/@progress/kendo-editor-common/dist/es/config/schema.js
var hole = 0;
var blockquoteDOM = ["blockquote", hole];
var hrDOM = ["hr"];
var preDOM = ["pre", ["code", hole]];
var olDOM2 = ["ol", 0];
var ulDOM2 = ["ul", 0];
var liDOM2 = ["li", 0];
var domAttributes = function(dom) {
  var result = {};
  var attributes = dom.attributes, attr;
  for (var i = 0; i < attributes.length; i++) {
    attr = attributes[i];
    result[attr.name] = attr.value;
  }
  return result;
};
var defaultAttrs2 = function(attrs) {
  var nodeAttrs = {};
  attrs.forEach(function(attr) {
    nodeAttrs[attr] = { default: null };
  });
  return nodeAttrs;
};
var commonAttributes = function() {
  return defaultAttrs2(["style", "class", "id"]);
};
var hasAttrs = function(attrs, exclude) {
  for (var attr in attrs) {
    if (attr && attrs[attr] !== null && attr !== exclude) {
      return true;
    }
  }
  return false;
};
var pmAttributes = function(attrs, exclude) {
  if (exclude === void 0) {
    exclude = [];
  }
  var result = {};
  var _loop_1 = function(attr2) {
    if (attr2 && attrs[attr2] !== null && !exclude.find(function(e) {
      return e === attr2;
    })) {
      result[attr2] = attrs[attr2];
    }
  };
  for (var attr in attrs) {
    _loop_1(attr);
  }
  return result;
};
var tagMark = function(tag) {
  var _a2;
  return _a2 = {}, _a2[tag] = {
    name: tag,
    inclusive: true,
    parseDOM: [{ tag }],
    toDOM: function() {
      return [tag, hole];
    }
  }, _a2;
};
var marks = __assign4(__assign4(__assign4(__assign4(__assign4(__assign4(__assign4(__assign4(__assign4(__assign4({
  // :: MarkSpec A link. Has `href` and `title` attributes. `title`
  // defaults to the empty string. Rendered and parsed as an `<a>`
  // element.
  link: {
    attrs: __assign4(__assign4({}, commonAttributes()), { href: { default: null }, target: { default: null }, title: { default: null } }),
    inclusive: false,
    parseDOM: [{ tag: "a", getAttrs: domAttributes }],
    toDOM: function(node) {
      return ["a", pmAttributes(node.attrs), hole];
    }
  }
}, tagMark("strong")), tagMark("b")), tagMark("em")), tagMark("i")), tagMark("u")), tagMark("del")), tagMark("sub")), tagMark("sup")), tagMark("code")), { style: {
  attrs: __assign4({}, commonAttributes()),
  parseDOM: [{
    tag: "span",
    getAttrs: domAttributes
  }],
  toDOM: function(node) {
    return hasAttrs(node.attrs) ? ["span", pmAttributes(node.attrs), hole] : ["span", hole];
  }
} });
var cellAttribute = function(name) {
  var _a2;
  return _a2 = {}, _a2[name] = {
    default: null,
    getFromDOM: function(cell) {
      return cell.getAttribute(name);
    },
    setDOMAttr: function(value2, attrs) {
      attrs[name] = value2;
    }
  }, _a2;
};
var cellAttributes = __assign4(__assign4(__assign4(__assign4({}, cellAttribute("style")), cellAttribute("class")), cellAttribute("id")), cellAttribute("headers"));
var colgroupNodes = {
  doc: { content: "colgroup*" },
  col: {
    attrs: defaultAttrs2(["id", "class", "style", "span"]),
    parseDOM: [{ getAttrs: domAttributes, tag: "col" }],
    toDOM: function(node) {
      return ["col", node.attrs];
    }
  },
  colgroup: {
    attrs: defaultAttrs2(["id", "class", "style", "span"]),
    content: "col*",
    parseDOM: [{ getAttrs: domAttributes, tag: "colgroup" }],
    toDOM: function(node) {
      return ["colgroup", node.attrs, 0];
    }
  },
  text: { inline: true, group: "inline" }
};
var colgroupSchema = new Schema({ nodes: colgroupNodes, marks: {} });
var shouldSkipColgroup = function(node) {
  var shouldSkip = false;
  var row = node.child(0);
  for (var r = 0; r < row.childCount; r++) {
    var cell = row.child(r);
    if (cell.attrs.colwidth) {
      shouldSkip = true;
      break;
    }
  }
  return shouldSkip;
};
var parseStrColgroup = function(colgroup) {
  var doc3 = domToPmDoc(htmlToFragment(colgroup), colgroupSchema, { preserveWhitespace: false });
  var fragment = pmDocToFragment(doc3);
  var colgroupEl = fragment.firstChild;
  return colgroupEl;
};
var tNodes = tableNodes({ tableGroup: "block", cellContent: "block+", cellAttributes });
tNodes.table_row.attrs = __assign4(__assign4({}, tNodes.table_row.attrs), defaultAttrs2([rowTypeAttr, "style", "class", "id"]));
tNodes.table_row.toDOM = function(node) {
  return ["tr", pmAttributes(node.attrs), 0];
};
tNodes.table_row.parseDOM = [{ tag: "tr", getAttrs: domAttributes }];
tNodes.table.attrs = __assign4(__assign4({}, tNodes.table.attrs), defaultAttrs2(["style", "class", "id", colgroupAttr, resizableAttr]));
tNodes.table.toDOM = function(node) {
  var tableAttrs = hasAttrs(node.attrs) ? pmAttributes(node.attrs, [colgroupAttr, resizableAttr]) : {};
  var colgroup = null;
  if (node.attrs[colgroupAttr] && !shouldSkipColgroup(node)) {
    var colgroupEl = parseStrColgroup(node.attrs[colgroupAttr]);
    if (colgroupEl) {
      var cols = Array.from(colgroupEl.children).map(function(c) {
        return ["col", domAttributes(c)];
      });
      colgroup = [
        "colgroup",
        domAttributes(colgroupEl)
      ].concat(cols);
    }
  }
  return colgroup ? ["table", tableAttrs, colgroup, ["tbody", 0]] : ["table", tableAttrs, ["tbody", 0]];
};
tNodes.table.parseDOM = [{
  tag: "table",
  getAttrs: function(node) {
    var attrs = domAttributes(node);
    var colgroup = Array.from(node.childNodes).find(function(c) {
      return c.nodeName === "COLGROUP";
    });
    if (colgroup) {
      attrs[colgroupAttr] = colgroup.outerHTML;
    }
    return attrs;
  }
}];
var nodes = __assign4({
  // :: NodeSpec The top level document node.
  doc: {
    content: "block+"
  },
  // :: NodeSpec A plain paragraph textblock. Represented in the DOM
  // as a `<p>` element.
  paragraph: {
    content: "inline*",
    group: "block",
    attrs: __assign4({}, commonAttributes()),
    parseDOM: [{
      tag: "p",
      getAttrs: domAttributes
    }],
    toDOM: function(node) {
      return hasAttrs(node.attrs) ? ["p", pmAttributes(node.attrs), hole] : ["p", hole];
    }
  },
  div: {
    // Uncaught SyntaxError: Mixing inline and block content (in content expression '(block | inline)*')
    // content: '(block | inline)*',
    content: "block*",
    group: "block",
    attrs: __assign4({}, commonAttributes()),
    parseDOM: [{
      tag: "div",
      getAttrs: domAttributes
    }],
    toDOM: function(node) {
      return hasAttrs(node.attrs) ? ["div", pmAttributes(node.attrs), hole] : ["div", hole];
    }
  },
  // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.
  blockquote: {
    attrs: __assign4({}, commonAttributes()),
    content: "block+",
    group: "block",
    defining: true,
    parseDOM: [{
      tag: "blockquote",
      getAttrs: domAttributes
    }],
    toDOM: function(node) {
      return hasAttrs(node.attrs) ? ["blockquote", pmAttributes(node.attrs), hole] : blockquoteDOM;
    }
  },
  // :: NodeSpec A horizontal rule (`<hr>`).
  horizontal_rule: {
    group: "block",
    parseDOM: [{ tag: "hr" }],
    toDOM: function() {
      return hrDOM;
    }
  },
  // :: NodeSpec A heading textblock, with a `level` attribute that
  // has to hold the numbers from 1 to 6. Parsed and serialized as `<h1>` to
  // `<h6>` elements.
  heading: {
    attrs: __assign4(__assign4({}, commonAttributes()), { level: { default: 1 } }),
    content: "inline*",
    group: "block",
    defining: true,
    parseDOM: [
      { tag: "h1", getAttrs: function(node) {
        return __assign4(__assign4({}, domAttributes(node)), { level: 1 });
      } },
      { tag: "h2", getAttrs: function(node) {
        return __assign4(__assign4({}, domAttributes(node)), { level: 2 });
      } },
      { tag: "h3", getAttrs: function(node) {
        return __assign4(__assign4({}, domAttributes(node)), { level: 3 });
      } },
      { tag: "h4", getAttrs: function(node) {
        return __assign4(__assign4({}, domAttributes(node)), { level: 4 });
      } },
      { tag: "h5", getAttrs: function(node) {
        return __assign4(__assign4({}, domAttributes(node)), { level: 5 });
      } },
      { tag: "h6", getAttrs: function(node) {
        return __assign4(__assign4({}, domAttributes(node)), { level: 6 });
      } }
    ],
    toDOM: function(node) {
      return hasAttrs(node.attrs, "level") ? ["h" + node.attrs.level, pmAttributes(node.attrs, ["level"]), hole] : ["h" + node.attrs.level, hole];
    }
  },
  // :: NodeSpec A code listing. Disallows marks or non-text inline
  // nodes by default. Represented as a `<pre>` element with a
  // `<code>` element inside it.
  code_block: {
    content: "text*",
    marks: "",
    group: "block",
    code: true,
    defining: true,
    parseDOM: [{ tag: "pre", preserveWhitespace: "full" }],
    toDOM: function() {
      return preDOM;
    }
  },
  // :: NodeSpec The text node.
  text: {
    inline: true,
    group: "inline"
  },
  // :: NodeSpec An inline image (`<img>`) node. Supports `src`,
  // `alt`, and `href` attributes. The latter two default to an empty
  // string.
  image: {
    inline: true,
    attrs: __assign4({ src: { default: null }, alt: { default: null }, title: { default: null }, width: { default: null }, height: { default: null } }, commonAttributes()),
    group: "inline",
    draggable: true,
    parseDOM: [{ tag: "img", getAttrs: domAttributes }],
    toDOM: function(node) {
      return hasAttrs(node.attrs) ? ["img", pmAttributes(node.attrs)] : ["img"];
    }
  },
  // :: NodeSpec A hard line break represented in the DOM as a `<br>` element.
  hard_break: {
    inline: true,
    attrs: __assign4({}, commonAttributes()),
    group: "inline",
    selectable: false,
    parseDOM: [{
      tag: "br",
      getAttrs: domAttributes
    }],
    toDOM: function(node) {
      return hasAttrs(node.attrs) ? ["br", pmAttributes(node.attrs)] : ["br"];
    }
  },
  // :: NodeSpec
  // An ordered list [node spec](#model.NodeSpec). Has a single
  // attribute, `order`, which determines the number at which the list
  // starts counting, and defaults to 1. Represented as an `<ol>`
  // element.
  ordered_list: {
    content: "list_item+",
    group: "block",
    attrs: __assign4(__assign4({}, commonAttributes()), { type: { default: null }, order: { default: 1 } }),
    parseDOM: [{ tag: "ol", getAttrs: function(dom) {
      return __assign4(__assign4({}, domAttributes(dom)), { order: dom.hasAttribute("start") ? parseInt(dom.getAttribute("start") || "1", 10) : 1 });
    } }],
    toDOM: function(node) {
      return node.attrs.order === 1 ? hasAttrs(node.attrs, "order") ? ["ol", pmAttributes(node.attrs, ["order"]), hole] : olDOM2 : ["ol", __assign4(__assign4({}, pmAttributes(node.attrs, ["order"])), { start: node.attrs.order }), hole];
    }
  },
  // :: NodeSpec
  // A bullet list node specification represented in the DOM as a `<ul>` element.
  bullet_list: {
    content: "list_item+",
    group: "block",
    attrs: __assign4({}, commonAttributes()),
    parseDOM: [{ tag: "ul", getAttrs: domAttributes }],
    toDOM: function(node) {
      return hasAttrs(node.attrs) ? ["ul", pmAttributes(node.attrs), hole] : ulDOM2;
    }
  },
  // :: NodeSpec
  // A list item (`<li>`) specification.
  list_item: {
    content: "(paragraph | heading) block*",
    attrs: __assign4({}, commonAttributes()),
    parseDOM: [{ tag: "li", getAttrs: domAttributes }],
    toDOM: function(node) {
      return hasAttrs(node.attrs) ? ["li", pmAttributes(node.attrs), hole] : liDOM2;
    },
    defining: true
  }
}, tNodes);

// node_modules/rope-sequence/dist/index.js
var GOOD_LEAF_SIZE = 200;
var RopeSequence = function RopeSequence2() {
};
RopeSequence.prototype.append = function append(other) {
  if (!other.length) {
    return this;
  }
  other = RopeSequence.from(other);
  return !this.length && other || other.length < GOOD_LEAF_SIZE && this.leafAppend(other) || this.length < GOOD_LEAF_SIZE && other.leafPrepend(this) || this.appendInner(other);
};
RopeSequence.prototype.prepend = function prepend(other) {
  if (!other.length) {
    return this;
  }
  return RopeSequence.from(other).append(this);
};
RopeSequence.prototype.appendInner = function appendInner(other) {
  return new Append(this, other);
};
RopeSequence.prototype.slice = function slice(from2, to) {
  if (from2 === void 0)
    from2 = 0;
  if (to === void 0)
    to = this.length;
  if (from2 >= to) {
    return RopeSequence.empty;
  }
  return this.sliceInner(Math.max(0, from2), Math.min(this.length, to));
};
RopeSequence.prototype.get = function get(i) {
  if (i < 0 || i >= this.length) {
    return void 0;
  }
  return this.getInner(i);
};
RopeSequence.prototype.forEach = function forEach(f, from2, to) {
  if (from2 === void 0)
    from2 = 0;
  if (to === void 0)
    to = this.length;
  if (from2 <= to) {
    this.forEachInner(f, from2, to, 0);
  } else {
    this.forEachInvertedInner(f, from2, to, 0);
  }
};
RopeSequence.prototype.map = function map(f, from2, to) {
  if (from2 === void 0)
    from2 = 0;
  if (to === void 0)
    to = this.length;
  var result = [];
  this.forEach(function(elt, i) {
    return result.push(f(elt, i));
  }, from2, to);
  return result;
};
RopeSequence.from = function from(values) {
  if (values instanceof RopeSequence) {
    return values;
  }
  return values && values.length ? new Leaf(values) : RopeSequence.empty;
};
var Leaf = function(RopeSequence3) {
  function Leaf2(values) {
    RopeSequence3.call(this);
    this.values = values;
  }
  if (RopeSequence3)
    Leaf2.__proto__ = RopeSequence3;
  Leaf2.prototype = Object.create(RopeSequence3 && RopeSequence3.prototype);
  Leaf2.prototype.constructor = Leaf2;
  var prototypeAccessors = { length: { configurable: true }, depth: { configurable: true } };
  Leaf2.prototype.flatten = function flatten() {
    return this.values;
  };
  Leaf2.prototype.sliceInner = function sliceInner(from2, to) {
    if (from2 == 0 && to == this.length) {
      return this;
    }
    return new Leaf2(this.values.slice(from2, to));
  };
  Leaf2.prototype.getInner = function getInner(i) {
    return this.values[i];
  };
  Leaf2.prototype.forEachInner = function forEachInner(f, from2, to, start) {
    for (var i = from2; i < to; i++) {
      if (f(this.values[i], start + i) === false) {
        return false;
      }
    }
  };
  Leaf2.prototype.forEachInvertedInner = function forEachInvertedInner(f, from2, to, start) {
    for (var i = from2 - 1; i >= to; i--) {
      if (f(this.values[i], start + i) === false) {
        return false;
      }
    }
  };
  Leaf2.prototype.leafAppend = function leafAppend(other) {
    if (this.length + other.length <= GOOD_LEAF_SIZE) {
      return new Leaf2(this.values.concat(other.flatten()));
    }
  };
  Leaf2.prototype.leafPrepend = function leafPrepend(other) {
    if (this.length + other.length <= GOOD_LEAF_SIZE) {
      return new Leaf2(other.flatten().concat(this.values));
    }
  };
  prototypeAccessors.length.get = function() {
    return this.values.length;
  };
  prototypeAccessors.depth.get = function() {
    return 0;
  };
  Object.defineProperties(Leaf2.prototype, prototypeAccessors);
  return Leaf2;
}(RopeSequence);
RopeSequence.empty = new Leaf([]);
var Append = function(RopeSequence3) {
  function Append2(left, right) {
    RopeSequence3.call(this);
    this.left = left;
    this.right = right;
    this.length = left.length + right.length;
    this.depth = Math.max(left.depth, right.depth) + 1;
  }
  if (RopeSequence3)
    Append2.__proto__ = RopeSequence3;
  Append2.prototype = Object.create(RopeSequence3 && RopeSequence3.prototype);
  Append2.prototype.constructor = Append2;
  Append2.prototype.flatten = function flatten() {
    return this.left.flatten().concat(this.right.flatten());
  };
  Append2.prototype.getInner = function getInner(i) {
    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length);
  };
  Append2.prototype.forEachInner = function forEachInner(f, from2, to, start) {
    var leftLen = this.left.length;
    if (from2 < leftLen && this.left.forEachInner(f, from2, Math.min(to, leftLen), start) === false) {
      return false;
    }
    if (to > leftLen && this.right.forEachInner(f, Math.max(from2 - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false) {
      return false;
    }
  };
  Append2.prototype.forEachInvertedInner = function forEachInvertedInner(f, from2, to, start) {
    var leftLen = this.left.length;
    if (from2 > leftLen && this.right.forEachInvertedInner(f, from2 - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false) {
      return false;
    }
    if (to < leftLen && this.left.forEachInvertedInner(f, Math.min(from2, leftLen), to, start) === false) {
      return false;
    }
  };
  Append2.prototype.sliceInner = function sliceInner(from2, to) {
    if (from2 == 0 && to == this.length) {
      return this;
    }
    var leftLen = this.left.length;
    if (to <= leftLen) {
      return this.left.slice(from2, to);
    }
    if (from2 >= leftLen) {
      return this.right.slice(from2 - leftLen, to - leftLen);
    }
    return this.left.slice(from2, leftLen).append(this.right.slice(0, to - leftLen));
  };
  Append2.prototype.leafAppend = function leafAppend(other) {
    var inner = this.right.leafAppend(other);
    if (inner) {
      return new Append2(this.left, inner);
    }
  };
  Append2.prototype.leafPrepend = function leafPrepend(other) {
    var inner = this.left.leafPrepend(other);
    if (inner) {
      return new Append2(inner, this.right);
    }
  };
  Append2.prototype.appendInner = function appendInner2(other) {
    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1) {
      return new Append2(this.left, new Append2(this.right, other));
    }
    return new Append2(this, other);
  };
  return Append2;
}(RopeSequence);
var dist_default2 = RopeSequence;

// node_modules/prosemirror-history/dist/index.js
var max_empty_items = 500;
var Branch = class _Branch {
  constructor(items, eventCount) {
    this.items = items;
    this.eventCount = eventCount;
  }
  // Pop the latest event off the branch's history and apply it
  // to a document transform.
  popEvent(state, preserveItems) {
    if (this.eventCount == 0)
      return null;
    let end = this.items.length;
    for (; ; end--) {
      let next = this.items.get(end - 1);
      if (next.selection) {
        --end;
        break;
      }
    }
    let remap, mapFrom;
    if (preserveItems) {
      remap = this.remapping(end, this.items.length);
      mapFrom = remap.maps.length;
    }
    let transform = state.tr;
    let selection, remaining;
    let addAfter = [], addBefore = [];
    this.items.forEach((item, i) => {
      if (!item.step) {
        if (!remap) {
          remap = this.remapping(end, i + 1);
          mapFrom = remap.maps.length;
        }
        mapFrom--;
        addBefore.push(item);
        return;
      }
      if (remap) {
        addBefore.push(new Item(item.map));
        let step = item.step.map(remap.slice(mapFrom)), map2;
        if (step && transform.maybeStep(step).doc) {
          map2 = transform.mapping.maps[transform.mapping.maps.length - 1];
          addAfter.push(new Item(map2, void 0, void 0, addAfter.length + addBefore.length));
        }
        mapFrom--;
        if (map2)
          remap.appendMap(map2, mapFrom);
      } else {
        transform.maybeStep(item.step);
      }
      if (item.selection) {
        selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
        remaining = new _Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
        return false;
      }
    }, this.items.length, 0);
    return { remaining, transform, selection };
  }
  // Create a new branch with the given transform added.
  addTransform(transform, selection, histOptions, preserveItems) {
    let newItems = [], eventCount = this.eventCount;
    let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
    for (let i = 0; i < transform.steps.length; i++) {
      let step = transform.steps[i].invert(transform.docs[i]);
      let item = new Item(transform.mapping.maps[i], step, selection), merged;
      if (merged = lastItem && lastItem.merge(item)) {
        item = merged;
        if (i)
          newItems.pop();
        else
          oldItems = oldItems.slice(0, oldItems.length - 1);
      }
      newItems.push(item);
      if (selection) {
        eventCount++;
        selection = void 0;
      }
      if (!preserveItems)
        lastItem = item;
    }
    let overflow = eventCount - histOptions.depth;
    if (overflow > DEPTH_OVERFLOW) {
      oldItems = cutOffEvents(oldItems, overflow);
      eventCount -= overflow;
    }
    return new _Branch(oldItems.append(newItems), eventCount);
  }
  remapping(from2, to) {
    let maps = new Mapping();
    this.items.forEach((item, i) => {
      let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from2 ? maps.maps.length - item.mirrorOffset : void 0;
      maps.appendMap(item.map, mirrorPos);
    }, from2, to);
    return maps;
  }
  addMaps(array) {
    if (this.eventCount == 0)
      return this;
    return new _Branch(this.items.append(array.map((map2) => new Item(map2))), this.eventCount);
  }
  // When the collab module receives remote changes, the history has
  // to know about those, so that it can adjust the steps that were
  // rebased on top of the remote changes, and include the position
  // maps for the remote changes in its array of items.
  rebased(rebasedTransform, rebasedCount) {
    if (!this.eventCount)
      return this;
    let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);
    let mapping = rebasedTransform.mapping;
    let newUntil = rebasedTransform.steps.length;
    let eventCount = this.eventCount;
    this.items.forEach((item) => {
      if (item.selection)
        eventCount--;
    }, start);
    let iRebased = rebasedCount;
    this.items.forEach((item) => {
      let pos = mapping.getMirror(--iRebased);
      if (pos == null)
        return;
      newUntil = Math.min(newUntil, pos);
      let map2 = mapping.maps[pos];
      if (item.step) {
        let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
        let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
        if (selection)
          eventCount++;
        rebasedItems.push(new Item(map2, step, selection));
      } else {
        rebasedItems.push(new Item(map2));
      }
    }, start);
    let newMaps = [];
    for (let i = rebasedCount; i < newUntil; i++)
      newMaps.push(new Item(mapping.maps[i]));
    let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
    let branch = new _Branch(items, eventCount);
    if (branch.emptyItemCount() > max_empty_items)
      branch = branch.compress(this.items.length - rebasedItems.length);
    return branch;
  }
  emptyItemCount() {
    let count = 0;
    this.items.forEach((item) => {
      if (!item.step)
        count++;
    });
    return count;
  }
  // Compressing a branch means rewriting it to push the air (map-only
  // items) out. During collaboration, these naturally accumulate
  // because each remote change adds one. The `upto` argument is used
  // to ensure that only the items below a given level are compressed,
  // because `rebased` relies on a clean, untouched set of items in
  // order to associate old items with rebased steps.
  compress(upto = this.items.length) {
    let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
    let items = [], events = 0;
    this.items.forEach((item, i) => {
      if (i >= upto) {
        items.push(item);
        if (item.selection)
          events++;
      } else if (item.step) {
        let step = item.step.map(remap.slice(mapFrom)), map2 = step && step.getMap();
        mapFrom--;
        if (map2)
          remap.appendMap(map2, mapFrom);
        if (step) {
          let selection = item.selection && item.selection.map(remap.slice(mapFrom));
          if (selection)
            events++;
          let newItem = new Item(map2.invert(), step, selection), merged, last = items.length - 1;
          if (merged = items.length && items[last].merge(newItem))
            items[last] = merged;
          else
            items.push(newItem);
        }
      } else if (item.map) {
        mapFrom--;
      }
    }, this.items.length, 0);
    return new _Branch(dist_default2.from(items.reverse()), events);
  }
};
Branch.empty = new Branch(dist_default2.empty, 0);
function cutOffEvents(items, n) {
  let cutPoint;
  items.forEach((item, i) => {
    if (item.selection && n-- == 0) {
      cutPoint = i;
      return false;
    }
  });
  return items.slice(cutPoint);
}
var Item = class _Item {
  constructor(map2, step, selection, mirrorOffset) {
    this.map = map2;
    this.step = step;
    this.selection = selection;
    this.mirrorOffset = mirrorOffset;
  }
  merge(other) {
    if (this.step && other.step && !other.selection) {
      let step = other.step.merge(this.step);
      if (step)
        return new _Item(step.getMap().invert(), step, this.selection);
    }
  }
};
var HistoryState = class {
  constructor(done, undone, prevRanges, prevTime) {
    this.done = done;
    this.undone = undone;
    this.prevRanges = prevRanges;
    this.prevTime = prevTime;
  }
};
var DEPTH_OVERFLOW = 20;
function applyTransaction(history2, state, tr, options) {
  let historyTr = tr.getMeta(historyKey), rebased;
  if (historyTr)
    return historyTr.historyState;
  if (tr.getMeta(closeHistoryKey))
    history2 = new HistoryState(history2.done, history2.undone, null, 0);
  let appended = tr.getMeta("appendedTransaction");
  if (tr.steps.length == 0) {
    return history2;
  } else if (appended && appended.getMeta(historyKey)) {
    if (appended.getMeta(historyKey).redo)
      return new HistoryState(history2.done.addTransform(tr, void 0, options, mustPreserveItems(state)), history2.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history2.prevTime);
    else
      return new HistoryState(history2.done, history2.undone.addTransform(tr, void 0, options, mustPreserveItems(state)), null, history2.prevTime);
  } else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
    let newGroup = history2.prevTime == 0 || !appended && (history2.prevTime < (tr.time || 0) - options.newGroupDelay || !isAdjacentTo(tr, history2.prevRanges));
    let prevRanges = appended ? mapRanges(history2.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);
    return new HistoryState(history2.done.addTransform(tr, newGroup ? state.selection.getBookmark() : void 0, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time);
  } else if (rebased = tr.getMeta("rebased")) {
    return new HistoryState(history2.done.rebased(tr, rebased), history2.undone.rebased(tr, rebased), mapRanges(history2.prevRanges, tr.mapping), history2.prevTime);
  } else {
    return new HistoryState(history2.done.addMaps(tr.mapping.maps), history2.undone.addMaps(tr.mapping.maps), mapRanges(history2.prevRanges, tr.mapping), history2.prevTime);
  }
}
function isAdjacentTo(transform, prevRanges) {
  if (!prevRanges)
    return false;
  if (!transform.docChanged)
    return true;
  let adjacent = false;
  transform.mapping.maps[0].forEach((start, end) => {
    for (let i = 0; i < prevRanges.length; i += 2)
      if (start <= prevRanges[i + 1] && end >= prevRanges[i])
        adjacent = true;
  });
  return adjacent;
}
function rangesFor(map2) {
  let result = [];
  map2.forEach((_from, _to, from2, to) => result.push(from2, to));
  return result;
}
function mapRanges(ranges, mapping) {
  if (!ranges)
    return null;
  let result = [];
  for (let i = 0; i < ranges.length; i += 2) {
    let from2 = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);
    if (from2 <= to)
      result.push(from2, to);
  }
  return result;
}
function histTransaction(history2, state, dispatch, redo3) {
  let preserveItems = mustPreserveItems(state);
  let histOptions = historyKey.get(state).spec.config;
  let pop = (redo3 ? history2.undone : history2.done).popEvent(state, preserveItems);
  if (!pop)
    return;
  let selection = pop.selection.resolve(pop.transform.doc);
  let added = (redo3 ? history2.done : history2.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
  let newHist = new HistoryState(redo3 ? added : pop.remaining, redo3 ? pop.remaining : added, null, 0);
  dispatch(pop.transform.setSelection(selection).setMeta(historyKey, { redo: redo3, historyState: newHist }).scrollIntoView());
}
var cachedPreserveItems = false;
var cachedPreserveItemsPlugins = null;
function mustPreserveItems(state) {
  let plugins = state.plugins;
  if (cachedPreserveItemsPlugins != plugins) {
    cachedPreserveItems = false;
    cachedPreserveItemsPlugins = plugins;
    for (let i = 0; i < plugins.length; i++)
      if (plugins[i].spec.historyPreserveItems) {
        cachedPreserveItems = true;
        break;
      }
  }
  return cachedPreserveItems;
}
var historyKey = new PluginKey("history");
var closeHistoryKey = new PluginKey("closeHistory");
function history(config = {}) {
  config = {
    depth: config.depth || 100,
    newGroupDelay: config.newGroupDelay || 500
  };
  return new Plugin({
    key: historyKey,
    state: {
      init() {
        return new HistoryState(Branch.empty, Branch.empty, null, 0);
      },
      apply(tr, hist, state) {
        return applyTransaction(hist, state, tr, config);
      }
    },
    config,
    props: {
      handleDOMEvents: {
        beforeinput(view, e) {
          let inputType = e.inputType;
          let command3 = inputType == "historyUndo" ? undo : inputType == "historyRedo" ? redo : null;
          if (!command3)
            return false;
          e.preventDefault();
          return command3(view.state, view.dispatch);
        }
      }
    }
  });
}
var undo = (state, dispatch) => {
  let hist = historyKey.getState(state);
  if (!hist || hist.done.eventCount == 0)
    return false;
  if (dispatch)
    histTransaction(hist, state, dispatch, false);
  return true;
};
var redo = (state, dispatch) => {
  let hist = historyKey.getState(state);
  if (!hist || hist.undone.eventCount == 0)
    return false;
  if (dispatch)
    histTransaction(hist, state, dispatch, true);
  return true;
};
function undoDepth(state) {
  let hist = historyKey.getState(state);
  return hist ? hist.done.eventCount : 0;
}
function redoDepth(state) {
  let hist = historyKey.getState(state);
  return hist ? hist.undone.eventCount : 0;
}

// node_modules/prosemirror-inputrules/dist/index.js
var InputRule = class {
  // :: (RegExp, union<string, (state: EditorState, match: [string], start: number, end: number) → ?Transaction>)
  /**
  Create an input rule. The rule applies when the user typed
  something and the text directly in front of the cursor matches
  `match`, which should end with `$`.
  
  The `handler` can be a string, in which case the matched text, or
  the first matched group in the regexp, is replaced by that
  string.
  
  Or a it can be a function, which will be called with the match
  array produced by
  [`RegExp.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec),
  as well as the start and end of the matched range, and which can
  return a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) that describes the
  rule's effect, or null to indicate the input was not handled.
  */
  constructor(match, handler) {
    this.match = match;
    this.match = match;
    this.handler = typeof handler == "string" ? stringHandler(handler) : handler;
  }
};
function stringHandler(string) {
  return function(state, match, start, end) {
    let insert = string;
    if (match[1]) {
      let offset = match[0].lastIndexOf(match[1]);
      insert += match[0].slice(offset + match[1].length);
      start += offset;
      let cutOff = start - end;
      if (cutOff > 0) {
        insert = match[0].slice(offset - cutOff, offset) + insert;
        start = end;
      }
    }
    return state.tr.insertText(insert, start, end);
  };
}
var MAX_MATCH = 500;
function inputRules({ rules }) {
  let plugin = new Plugin({
    state: {
      init() {
        return null;
      },
      apply(tr, prev) {
        let stored = tr.getMeta(this);
        if (stored)
          return stored;
        return tr.selectionSet || tr.docChanged ? null : prev;
      }
    },
    props: {
      handleTextInput(view, from2, to, text) {
        return run(view, from2, to, text, rules, plugin);
      },
      handleDOMEvents: {
        compositionend: (view) => {
          setTimeout(() => {
            let { $cursor } = view.state.selection;
            if ($cursor)
              run(view, $cursor.pos, $cursor.pos, "", rules, plugin);
          });
        }
      }
    },
    isInputRules: true
  });
  return plugin;
}
function run(view, from2, to, text, rules, plugin) {
  if (view.composing)
    return false;
  let state = view.state, $from = state.doc.resolve(from2);
  if ($from.parent.type.spec.code)
    return false;
  let textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - MAX_MATCH), $from.parentOffset, null, "￼") + text;
  for (let i = 0; i < rules.length; i++) {
    let match = rules[i].match.exec(textBefore);
    let tr = match && rules[i].handler(state, match, from2 - (match[0].length - text.length), to);
    if (!tr)
      continue;
    view.dispatch(tr.setMeta(plugin, { transform: tr, from: from2, to, text }));
    return true;
  }
  return false;
}
var undoInputRule = (state, dispatch) => {
  let plugins = state.plugins;
  for (let i = 0; i < plugins.length; i++) {
    let plugin = plugins[i], undoable;
    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
      if (dispatch) {
        let tr = state.tr, toUndo = undoable.transform;
        for (let j = toUndo.steps.length - 1; j >= 0; j--)
          tr.step(toUndo.steps[j].invert(toUndo.docs[j]));
        if (undoable.text) {
          let marks2 = tr.doc.resolve(undoable.from).marks();
          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks2));
        } else {
          tr.delete(undoable.from, undoable.to);
        }
        dispatch(tr);
      }
      return true;
    }
  }
  return false;
};
var emDash = new InputRule(/--$/, "—");
var ellipsis = new InputRule(/\.\.\.$/, "…");
var openDoubleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/, "“");
var closeDoubleQuote = new InputRule(/"$/, "”");
var openSingleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/, "‘");
var closeSingleQuote = new InputRule(/'$/, "’");
var smartQuotes = [openDoubleQuote, closeDoubleQuote, openSingleQuote, closeSingleQuote];
function wrappingInputRule(regexp, nodeType, getAttrs2 = null, joinPredicate) {
  return new InputRule(regexp, (state, match, start, end) => {
    let attrs = getAttrs2 instanceof Function ? getAttrs2(match) : getAttrs2;
    let tr = state.tr.delete(start, end);
    let $start = tr.doc.resolve(start), range = $start.blockRange(), wrapping = range && findWrapping(range, nodeType, attrs);
    if (!wrapping)
      return null;
    tr.wrap(range, wrapping);
    let before = tr.doc.resolve(start - 1).nodeBefore;
    if (before && before.type == nodeType && canJoin(tr.doc, start - 1) && (!joinPredicate || joinPredicate(match, before)))
      tr.join(start - 1);
    return tr;
  });
}
function textblockTypeInputRule(regexp, nodeType, getAttrs2 = null) {
  return new InputRule(regexp, (state, match, start, end) => {
    let $start = state.doc.resolve(start);
    let attrs = getAttrs2 instanceof Function ? getAttrs2(match) : getAttrs2;
    if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType))
      return null;
    return state.tr.delete(start, end).setBlockType(start, start, nodeType, attrs);
  });
}

// node_modules/@progress/kendo-editor-common/dist/es/config/commands.js
var bold = {
  mark: "strong",
  altMarks: ["b"],
  altStyle: { name: "font-weight", value: /^(bold(er)?|[5-9]\d{2,})$/ }
};
var italic = {
  mark: "em",
  altMarks: ["i"],
  altStyle: { name: "font-style", value: /^italic$/i }
};
var underline = {
  mark: "u",
  altStyle: { name: "text-decoration", value: /^underline$/i }
};
var strikethrough = {
  mark: "del",
  altStyle: { name: "text-decoration", value: /^line-through$/i }
};
var subscript = {
  mark: "sub"
};
var superscript = {
  mark: "sup"
};
var link = {
  mark: "link"
};

// node_modules/@progress/kendo-editor-common/dist/es/config/keymap.js
var mac5 = typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;

// node_modules/@progress/kendo-editor-common/dist/es/listConvert.js
var msoListRegExp = /style=['"]?[^'"]*?mso-list:\s*[a-zA-Z]+(\d+)\s[a-zA-Z]+(\d+)\s(\w+)/gi;
var extractListLevels = function(html) {
  html = html.replace(msoListRegExp, function(match, list, level) {
    return 'datalist="' + list + '" datalevel="' + level + '" ' + match;
  });
  return html;
};
var isPartOfListItem = function(element) {
  return /^MsoListParagraph/.test(element.className);
};
var innerText = function(node) {
  var text = node.innerHTML;
  text = text.replace(/<!--(.|\s)*?-->/gi, "");
  text = text.replace(/<\/?[^>]+?\/?>/gm, "");
  return text;
};
var createList = function(type, styleType) {
  var list = document.createElement(type);
  list.style.listStyleType = styleType;
  return list;
};
var guessUnorderedListStyle = function(symbol) {
  if (/^[\u2022\u00b7\u00FC\u00D8\u002dv-]/.test(symbol)) {
    return null;
  } else if (/^o/.test(symbol)) {
    return "circle";
  } else {
    return "square";
  }
};
var guessOrderedListStyle = function(symbol) {
  var type = null;
  if (!/^\d/.test(symbol)) {
    type = (/^[a-z]/.test(symbol) ? "lower-" : "upper-") + (/^[ivxlcdm]/i.test(symbol) ? "roman" : "alpha");
  }
  return type;
};
var mapListsCandidates = function(nodes3, groups) {
  var group = [];
  Array.from(nodes3).forEach(function(node) {
    if (node.nodeType !== Node.ELEMENT_NODE) {
      return;
    }
    var element = node;
    if (element.getAttribute("datalist")) {
      group.push(node);
      groups.add(group);
    } else if (isPartOfListItem(element) && group.length) {
      group.push(node);
    } else {
      group = [];
      if (element.nodeName === "DIV") {
        mapListsCandidates(element.children, groups);
      } else if (element.nodeName === "TABLE") {
        Array.from(element.querySelectorAll("td,th")).forEach(function(cell) {
          mapListsCandidates(cell.children, groups);
        });
      }
    }
  });
};
var listTypes = function(p) {
  var html = p.innerHTML;
  var trimStartText = function(t) {
    return t.replace(/^(?:&nbsp;|[\u00a0\n\r\s])+/, "");
  };
  html = html.replace(/<\/?\w+[^>]*>/g, "").replace(/&nbsp;/g, " ");
  if (/^[\u2022\u00b7\u00a7\u00d8oØüvn][\u00a0 ]+/.test(html)) {
    return {
      tag: "ul",
      style: guessUnorderedListStyle(trimStartText(innerText(p)))
    };
  }
  if (/^\s*\w+[\.\)][\u00a0 ]{2,}/.test(html)) {
    return {
      tag: "ol",
      style: guessOrderedListStyle(trimStartText(innerText(p)))
    };
  }
};
var convertToLi = function(p) {
  var content, name = p.nodeName.toLowerCase();
  if (p.firstChild && p.firstChild.nodeType === Node.COMMENT_NODE) {
    p.removeChild(p.firstChild);
  }
  if (p.childNodes.length === 1) {
    content = p.firstChild.nodeType === Node.TEXT_NODE ? innerText(p) : p.firstChild.innerHTML.replace(/^\w+[\.\)](&nbsp;)+ /, "");
  } else {
    p.removeChild(p.firstChild);
    if (p.firstChild.nodeType === 3) {
      if (/^[ivxlcdm]+\.$/i.test(p.firstChild.nodeValue)) {
        p.removeChild(p.firstChild);
      }
    }
    if (/^(&nbsp;|\s)+$/i.test(p.firstChild.innerHTML)) {
      p.removeChild(p.firstChild);
    }
    if (name !== "p") {
      content = "<" + name + ">" + p.innerHTML + "</" + name + ">";
    } else {
      content = p.innerHTML;
    }
  }
  p.parentNode.removeChild(p);
  var li = document.createElement("li");
  li.appendChild(htmlToFragment(content));
  return li;
};
var toList = function(blockNodes2) {
  var lastMargin = -1, levels = {}, li, rootMargin, rootIndex, lastRootLi, isLastRootLi, rootList, items, i, p, type, margin, list, listData;
  for (i = 0; i < blockNodes2.length; i++) {
    p = blockNodes2[i];
    listData = {
      datalist: p.getAttribute("datalist"),
      datalevel: p.getAttribute("datalevel")
    };
    var listIndex = listData.datalist;
    var listType = listTypes(p);
    type = listType && listType.tag;
    if (!type) {
      if (li && (!isLastRootLi || isPartOfListItem(p))) {
        if (p.style.marginLeft) {
          p.style.marginLeft = "";
        }
        if (p.style.marginLeft) {
          p.style.margin = "";
        }
        li.appendChild(p);
      }
      continue;
    }
    margin = listData.datalevel || parseFloat(p.style.marginLeft || 0);
    if (!listData.datalevel && !p.style.marginLeft) {
      continue;
    }
    var levelType = type + listIndex;
    if (!levels[margin]) {
      levels[margin] = {};
    }
    if (!rootMargin || rootMargin < 0) {
      rootMargin = margin;
      rootIndex = listIndex;
      items = blockNodes2.filter(function(e) {
        return e.getAttribute("datalist") === String(rootIndex);
      });
      lastRootLi = items[items.length - 1];
      rootList = createList(type, listType && listType.style);
      p.parentNode.insertBefore(rootList, p);
      lastMargin = margin;
      levels[margin][levelType] = rootList;
    }
    isLastRootLi = lastRootLi === p;
    list = levels[margin][levelType];
    if (margin > lastMargin || !list) {
      list = createList(type, listType && listType.style);
      levels[margin][levelType] = list;
      li.appendChild(list);
    }
    li = convertToLi(p);
    list.appendChild(li);
    if (isLastRootLi) {
      rootMargin = lastMargin = -1;
    } else {
      lastMargin = margin;
    }
  }
};
var convertMsLists = function(html) {
  var container = htmlToFragment(extractListLevels(html));
  var groups = /* @__PURE__ */ new Set();
  mapListsCandidates(container.children, groups);
  groups.forEach(function(listsCandidates) {
    return toList(listsCandidates);
  });
  return fragmentToHtml(container);
};

// node_modules/@progress/kendo-editor-common/dist/es/paste.js
var sanitize = function(html) {
  html = html.replace(/^[\s\S]+?<!--StartFragment-->\s*([\s\S]*?)\s*<!--EndFragment-->[\s\S]+$/, "$1");
  html = html.replace(/<\/?[ovw]:[^>]*?>/gi, "");
  html = html.replace(/<\\?\??xml[^>]*>/gi, "");
  html = html.replace(/<(?:link|meta) [^>]+?>/ig, "");
  html = html.replace(/<style[^>]*?>\s*<\/style>/ig, "");
  html = html.replace(/<\/?st1:.*?>/gi, "");
  html = html.replace(/<a name="[a-zA-Z0-9_]+">/gmi, "");
  html = html.replace(/v:shapes?="[^"]+"/ig, "");
  html = html.replace(/<!\[if !supportLists\]>/ig, "");
  html = html.replace(/<!\[endif\]>/ig, "");
  return html;
};
var removeComments = function(html) {
  return html.replace(/<!--[\s\S]+?-->/g, "");
};
var removeTag = function(html, tagPattern) {
  return html.replace(new RegExp("<\\/?(" + tagPattern + ")(?:\\s[^>]*?)?>", "gi"), "");
};
var removeAttribute = function(attr) {
  if (attr.ownerElement) {
    attr.ownerElement.removeAttribute(attr.name);
  }
};
var sanitizeClassAttr = function(attr) {
  if (/^Mso/.test(attr.value)) {
    removeAttribute(attr);
  }
};
var stylesSplit = /\s*;\s*/;
var styleValueSplit = /\s*:\s*/;
var sanitizeStyleAttr = function(attr) {
  var styles = attr.value.split(stylesSplit).filter(function(st) {
    return Boolean(st);
  });
  var element = attr.ownerElement;
  var supportedStyles = element.style;
  var result = "", name, value2;
  styles.forEach(function(style2) {
    var _a2;
    _a2 = style2.split(styleValueSplit), name = _a2[0], value2 = _a2[1];
    if (supportedStyles[name] !== void 0) {
      result += name + ": " + value2 + "; ";
    }
  });
  result = result.trim();
  if (result) {
    attr.value = result;
  } else {
    removeAttribute(attr);
  }
};
var removeNode = function(node) {
  var parentNode3 = node.parentNode;
  if (parentNode3) {
    while (node.firstChild) {
      parentNode3.insertBefore(node.firstChild, node);
    }
    parentNode3.removeChild(node);
  }
};
var sanitizeNode = function(node, attributes) {
  if (node.nodeType === Node.ELEMENT_NODE) {
    for (var i = node.attributes.length - 1; i >= 0; i--) {
      var attr = node.attributes[i];
      if (attributes[attr.name]) {
        attributes[attr.name](attr);
      } else if (attributes["*"]) {
        attributes["*"](attr);
      }
    }
    if (node.nodeName === "SPAN" && node.attributes.length === 0) {
      removeNode(node);
    }
  }
};
var pasteCleanup = function(html, settings3) {
  var result = html;
  if (settings3.convertMsLists) {
    result = convertMsLists(result);
  }
  if (settings3.stripTags) {
    result = removeTag(result, settings3.stripTags);
  }
  if (settings3.attributes) {
    var fragment = htmlToFragment(result);
    Array.from(fragment.querySelectorAll("*")).forEach(function(node) {
      return sanitizeNode(node, settings3.attributes);
    });
    result = fragmentToHtml(fragment);
  }
  return result;
};
function convertHexToBase64(hex) {
  var length = hex.length;
  var data13 = new Array(length / 2);
  for (var i = 0; i < length; i += 2) {
    data13[i] = String.fromCharCode(parseInt(hex.substring(i, i + 2), 16));
  }
  return btoa(data13.join(""));
}
var reHtmlImg = /<img\s[^>]*?src=(?:'|")file:\/[^'"]+(?:'|")[^>]*>/gi;
var reRtfImgHeader = /{\\pict[\s\S]+?\\bliptag-?\d+(\\blipupi-?\d+)?({\\\*\\blipuid\s?[\da-fA-F]+)?[\s}]*?/;
var reRtfImg = new RegExp("(?:(" + reRtfImgHeader.source + "))([\\da-fA-F\\s]+)\\}", "g");
var reNonHex = /[^\da-fA-F]/g;
var reLocalFile = /file:\/[^'"]+\.(jpg|png|gif)/i;
var reExtension = /\\(png|jpeg)blip\\/;
var textRtfType = "text/rtf";
var replaceImageSourcesFromRtf = function(html, clipboardData) {
  var htmlImages = html.match(reHtmlImg);
  if (!htmlImages || clipboardData.types.indexOf(textRtfType) === -1) {
    return html;
  }
  var rtf = clipboardData.getData(textRtfType);
  var base64Sources = [];
  var rtfImages = rtf.match(reRtfImg);
  if (!rtf || !rtfImages) {
    return html;
  }
  for (var _i = 0, rtfImages_1 = rtfImages; _i < rtfImages_1.length; _i++) {
    var image = rtfImages_1[_i];
    var extension = reExtension.exec(image);
    if (extension) {
      var hex = image.replace(reRtfImgHeader, "").replace(reNonHex, "");
      base64Sources.push("data:image/" + extension[1] + ";base64," + convertHexToBase64(hex));
    }
  }
  if (htmlImages.length !== base64Sources.length) {
    return html;
  }
  return html.replace(reHtmlImg, function(img) {
    var src = base64Sources.shift() || "";
    return img.replace(reLocalFile, src);
  });
};

// node_modules/@progress/kendo-editor-common/dist/es/find-replace.js
var findAt = function(doc3, searchOptions, start, end, exit) {
  var result = [], exec, text, from2, to, childText, nextSibling;
  var nodes3 = [];
  var matchCase = searchOptions.matchCase, matchWord = searchOptions.matchWord, useRegExp = searchOptions.useRegExp;
  var searchText = searchOptions.text;
  if (useRegExp && (/^\\$/.test(searchText) || /[^\\]\\$/.test(searchText))) {
    searchText = searchText.substring(0, searchText.length - 1);
  }
  if (!searchText) {
    return result;
  }
  var flags = matchCase ? "g" : "gi";
  var regExp = useRegExp ? new RegExp(searchText, flags) : createRegExp(searchText, flags);
  doc3.nodesBetween(start, end, function(node, pos, _parent) {
    if (exit(result)) {
      return false;
    }
    if (node.inlineContent && pos + node.content.size >= start) {
      nodes3.length = 0;
      node.nodesBetween(0, node.content.size, function(child, childPos, parent, i) {
        if (exit(result)) {
          return false;
        }
        var posToDoc = 1 + pos + childPos;
        if (child.isText && posToDoc + child.nodeSize >= start) {
          childText = child.text || "";
          nextSibling = parent.childCount - 1 >= i + 1 && parent.child(i + 1);
          nodes3.push(start <= posToDoc ? { text: childText, start: posToDoc } : { text: childText.slice(start - posToDoc), start });
          if (nextSibling && nextSibling.isText) {
            return;
          }
          text = nodes3.map(function(t) {
            return t.text;
          }).join("");
          exec = regExp.exec(text);
          while (exec !== null) {
            from2 = nodes3[0].start + exec.index;
            to = from2 + exec[0].length;
            if (start <= from2 && end >= to && shouldMatchWord(exec, matchWord)) {
              result.push(TextSelection.create(doc3, from2, to));
            }
            if (exit(result)) {
              break;
            }
            exec = regExp.exec(text);
          }
        } else {
          nodes3.length = 0;
        }
      });
    }
  });
  return result;
};
var find = function(state, searchOptions) {
  var backward = searchOptions.backward, matchCyclic = searchOptions.matchCyclic, options = __rest(searchOptions, ["backward", "matchCyclic"]);
  var exit = backward ? function() {
    return false;
  } : function(r) {
    return r.length > 0;
  };
  var doc3 = state.doc, selection = state.selection;
  var result = [];
  if (backward) {
    result = findAt(doc3, options, 0, selection.from, exit);
    if (!result.length && matchCyclic) {
      result = findAt(doc3, options, selection.from, doc3.content.size, exit);
    }
  } else {
    result = findAt(doc3, options, selection.to, doc3.content.size, exit);
    if (!result.length && matchCyclic) {
      result = findAt(doc3, options, 0, selection.to, exit);
    }
  }
  return result.length ? result[result.length - 1] : null;
};
var findAll = function(doc3, searchOptions) {
  return findAt(doc3, searchOptions, 0, doc3.content.size, function() {
    return false;
  });
};
var replace2 = function(selection, text, transaction) {
  var from2 = selection.from, to = selection.to;
  transaction.insertText(text, from2, to).setSelection(TextSelection.create(transaction.doc, from2, from2 + text.length));
  return transaction;
};
var replaceAll = function(state, replaceText, searchOptions) {
  var result = findAll(state.doc, searchOptions);
  if (result.length === 0) {
    return null;
  }
  var transaction = state.tr;
  for (var i = result.length - 1; i >= 0; i--) {
    transaction.insertText(replaceText, result[i].from, result[i].to);
  }
  return transaction;
};
var notLetter = /^[\s0-9~`!@#$%\^&*\(\)_\-=+\\|\[\]{};:'"\?/.,<>]?$/;
var shouldMatchWord = function(exec, matchWord) {
  if (!matchWord) {
    return true;
  } else if (matchWord === true) {
    var text = exec.input;
    var charBefore = text.charAt(exec.index - 1);
    var charAfter = text.charAt(exec.index + exec[0].length);
    return notLetter.test(charBefore) && notLetter.test(charAfter);
  } else {
    return matchWord(exec);
  }
};
var createRegExp = function(inputString, flags) {
  var escaped = inputString.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d").replace(/\s/g, "\\s");
  return new RegExp(escaped, flags);
};

// node_modules/@progress/kendo-editor-common/dist/es/plugins/spaces-fix.js
var spaces = /\s+/g;
var align = /text-align/;
var aligned = function(node) {
  return align.test(node && node.attrs && node.attrs.style || "");
};
var spacesFix = function() {
  return new Plugin({
    key: new PluginKey("spaces-fix"),
    props: {
      decorations: function(state) {
        var decorations = [];
        var doc3 = state.doc;
        var start, match, length, i;
        doc3.nodesBetween(0, doc3.content.size, function(node, position, parent) {
          if (node.type.isText && aligned(parent)) {
            match = spaces.exec(node.text || "");
            while (match !== null) {
              start = position + match.index;
              length = match[0].length;
              if (match.index + length < match.input.length) {
                for (i = 0; i <= length - 1; i += 2) {
                  decorations.push(Decoration.inline(start + i, start + i + 1, {
                    style: "white-space: normal"
                  }));
                }
              }
              match = spaces.exec(node.text || "");
            }
          }
        });
        return DecorationSet.create(doc3, decorations);
      }
    }
  });
};

// node_modules/@progress/kendo-editor-common/dist/es/plugins/highlight.js
var textHighlightKey = new PluginKey("highlight");
function textHighlight(key) {
  if (key === void 0) {
    key = textHighlightKey;
  }
  return new Plugin({
    key,
    state: {
      init: function() {
        return null;
      },
      apply: function(tr) {
        return tr.getMeta(this.spec.key);
      }
    },
    props: {
      decorations: function(state) {
        var decorations = (this.spec.key.getState(state) || []).map(function(d) {
          return Decoration.inline(d.from, d.to, d.attrs);
        });
        return DecorationSet.create(state.doc, decorations);
      }
    }
  });
}

// node_modules/@progress/kendo-editor-common/dist/es/plugins/resize-utils.js
var directions = {
  "southeast": { x: 1, y: 1 },
  "east": { x: 1, y: 0 },
  "south": { x: 0, y: 1 },
  "north": { x: 0, y: -1 },
  "west": { x: -1, y: 0 },
  "southwest": { x: -1, y: 1 },
  "northwest": { x: -1, y: -1 },
  "northeast": { x: 1, y: -1 }
  // top right
};
var handles = Object.keys(directions);

// node_modules/@progress/kendo-editor-common/dist/es/plugins/image-resize.js
var imageResizeKey = new PluginKey("image-resize");
var setSize = function(domNode, sizeType, value2) {
  domNode.style[sizeType] = value2 + "px";
};
var reSize = /[^\-]width:|[^\-]height:/;
var reAnyValue = /^.+$/;
var ResizeState2 = (
  /** @class */
  function() {
    function ResizeState6(activeHandle, dragging, rect, nodePosition) {
      this.activeHandle = activeHandle;
      this.dragging = dragging;
      this.rect = rect;
      this.nodePosition = nodePosition;
    }
    ResizeState6.prototype.apply = function(tr) {
      var state = this, next = tr.getMeta(imageResizeKey);
      if (next) {
        return new ResizeState6(next.activeHandle, next.setDragging, next.rect, next.nodePosition);
      }
      return state;
    };
    return ResizeState6;
  }()
);
var handleMouseMove2 = function(view, event, options) {
  var state = imageResizeKey.getState(view.state);
  var rect = state.rect, dragging = state.dragging, nodePosition = state.nodePosition, activeHandle = state.activeHandle;
  if (!dragging || !rect) {
    return;
  }
  var img = view.nodeDOM(nodePosition);
  var dir = directions[activeHandle];
  var diffX = (event.clientX - dragging.startX) * dir.x;
  var diffY = (event.clientY - dragging.startY) * dir.y;
  var width = dir.x ? diffX + img.width : rect.width;
  var height = dir.y ? diffY + img.height : rect.height;
  if (options.lockRatio && dir.x && dir.y) {
    var ratio = Math.min(width / img.width, height / img.height);
    var lockWidth = img.width * ratio;
    var lockHeight = img.height * ratio;
    dragging.startX = event.clientX - (width - lockWidth) * dir.x;
    dragging.startY = event.clientY - (height - lockHeight) * dir.y;
    width = lockWidth;
    height = lockHeight;
  } else {
    dragging.startX = dir.x ? event.clientX : dragging.startX;
    dragging.startY = dir.y ? event.clientY : dragging.startY;
  }
  setSize(img, "width", width);
  setSize(img, "height", height);
  rect.top = img.offsetTop;
  rect.left = img.offsetLeft;
  rect.width = img.offsetWidth;
  rect.height = img.offsetHeight;
  var handlesWrapper = img.nextElementSibling;
  handlesWrapper.style.width = rect.width + "px";
  handlesWrapper.style.height = rect.height + "px";
  handlesWrapper.style.top = rect.top + "px";
  handlesWrapper.style.left = rect.left + "px";
};
var handleMouseUp = function(view) {
  var _a2 = imageResizeKey.getState(view.state), rect = _a2.rect, dragging = _a2.dragging, nodePosition = _a2.nodePosition;
  if (dragging && rect) {
    var selection = view.state.selection;
    if (selection instanceof NodeSelection) {
      var currAttrs = selection.node.attrs;
      var width = rect.width;
      var height = rect.height;
      var attrs = void 0;
      if (reSize.test(currAttrs.style || "")) {
        var changedWidth = changeStylesString(currAttrs.style, { style: "width", value: reAnyValue, newValue: width + "px" });
        var style2 = changeStylesString(changedWidth.style || "", { style: "height", value: reAnyValue, newValue: height + "px" }).style;
        attrs = __assign4(__assign4({}, currAttrs), { style: style2 });
      } else {
        attrs = __assign4(__assign4({}, currAttrs), { width, height });
      }
      var newImage = selection.node.type.createAndFill(attrs);
      if (newImage) {
        var tr = view.state.tr;
        tr.replaceWith(nodePosition, nodePosition + 1, newImage);
        tr.setSelection(NodeSelection.create(tr.doc, nodePosition));
        tr.setMeta("commandName", "image-resize");
        tr.setMeta("args", attrs);
        tr.setMeta(imageResizeKey, {
          setDragging: null,
          activeHandle: null,
          rect,
          nodePosition
        });
        view.dispatch(tr);
      }
    }
  }
};
var handleMouseDown3 = function(view, event, options) {
  var target = event.target;
  var activeHandle = target.getAttribute(dataResizeDirImage);
  if (!activeHandle) {
    return false;
  }
  var resizeState = imageResizeKey.getState(view.state);
  event.preventDefault();
  var transaction = view.state.tr;
  transaction.setMeta(imageResizeKey, {
    setDragging: { startX: event.clientX, startY: event.clientY },
    activeHandle,
    rect: resizeState.rect,
    nodePosition: resizeState.nodePosition
  });
  transaction.setMeta("addToHistory", false);
  view.dispatch(transaction);
  function move(e) {
    handleMouseMove2(view, e, options);
  }
  function finish(e) {
    e.view.removeEventListener("mouseup", finish);
    e.view.removeEventListener("mousemove", move);
    handleMouseUp(view);
  }
  event.view.addEventListener("mouseup", finish);
  event.view.addEventListener("mousemove", move);
  return true;
};
var imageResizing = function(options) {
  if (options === void 0) {
    options = { node: "image", lockRatio: true };
  }
  return new Plugin({
    key: imageResizeKey,
    view: function(viewObj) {
      return {
        resize: function() {
          if (imageResizeKey.getState(viewObj.state).rect) {
            viewObj.dispatch(viewObj.state.tr.setMeta("resize", true));
          }
        },
        get window() {
          return viewObj.dom.ownerDocument && viewObj.dom.ownerDocument.defaultView;
        },
        attachResize: function() {
          var win = this.window;
          if (win) {
            win.removeEventListener("resize", this.resize);
            win.addEventListener("resize", this.resize);
          }
        },
        removeResize: function() {
          var win = this.window;
          if (win) {
            win.removeEventListener("resize", this.resize);
          }
        },
        update: function(view, prevState) {
          var state = view.state;
          var selection = state.selection;
          var nodeType = state.schema.nodes[options.node];
          var pluginState = imageResizeKey.getState(state);
          var prevRect = pluginState.rect;
          if (selection instanceof NodeSelection && nodeType === selection.node.type) {
            var img = view.nodeDOM(selection.from);
            var rect = {
              top: img.offsetTop,
              left: img.offsetLeft,
              width: img.offsetWidth,
              height: img.offsetHeight
            };
            if (!prevState.selection.eq(selection) || prevRect && (prevRect.width !== rect.width || prevRect.height !== rect.height || prevRect.top !== rect.top || prevRect.left !== rect.left)) {
              var tr = state.tr;
              tr.setMeta(imageResizeKey, { rect, nodePosition: selection.from });
              view.dispatch(tr);
              this.attachResize();
            }
          } else if (prevRect) {
            pluginState.rect = null;
            pluginState.nodePosition = -1;
          }
        },
        destroy: function() {
          this.removeResize();
        }
      };
    },
    state: {
      init: function() {
        return new ResizeState2("", null, null, -1);
      },
      apply: function(tr, prev) {
        return prev.apply(tr);
      }
    },
    props: {
      handleDOMEvents: {
        mousedown: function(view, event) {
          return handleMouseDown3(view, event, options);
        }
      },
      decorations: function(state) {
        var selection = state.selection;
        var nodeType = state.schema.nodes[options.node];
        var rect = imageResizeKey.getState(state).rect;
        if (rect && selection instanceof NodeSelection && nodeType === selection.node.type) {
          var wrapper = document.createElement("div");
          wrapper.className = "k-editor-resize-handles-wrapper";
          wrapper.style.width = rect.width + "px";
          wrapper.style.height = rect.height + "px";
          wrapper.style.top = rect.top + "px";
          wrapper.style.left = rect.left + "px";
          for (var i = 0; i < handles.length; i++) {
            var dom = document.createElement("div");
            dom.className = resizeHandle + " " + handles[i];
            dom.setAttribute(dataResizeDirImage, handles[i]);
            wrapper.appendChild(dom);
          }
          return DecorationSet.create(state.doc, [Decoration.widget(state.selection.from + 1, wrapper)]);
        }
        return DecorationSet.empty;
      }
    }
  });
};

// node_modules/@progress/kendo-editor-common/dist/es/plugins/caret-color.js
var caretColorKey = new PluginKey("caret-color");

// node_modules/@progress/kendo-editor-common/dist/es/plugins/table-resize/table-view.js
var TableView2 = (
  /** @class */
  function() {
    function TableView3(node, view) {
      this.node = node;
      this.view = view;
      this.dom = document.createElement("div");
      this.dom.className = resizableWrap;
      this.table = this.dom.appendChild(document.createElement("table"));
      if (node.attrs[colgroupAttr]) {
        this.renderColgroup(node.attrs[colgroupAttr]);
      }
      var tBody = this.table.appendChild(document.createElement("tbody"));
      this.setAttributes(this.table, node.attrs);
      this.resizeHandles = handles.map(function(dir) {
        var handle = document.createElement("span");
        handle.className = resizeHandle + " " + dir;
        handle.setAttribute(dataResizeDirTable, dir);
        return handle;
      });
      this.contentDOM = tBody;
    }
    TableView3.prototype.update = function(node) {
      var _this = this;
      if (node.type !== this.node.type) {
        return false;
      }
      var prev = this.node;
      this.node = node;
      if (node.attrs[resizableAttr]) {
        this.resizeHandles.forEach(function(handle) {
          _this.dom.appendChild(handle);
        });
      } else {
        Array.from(this.dom.children).filter(function(e) {
          return e.classList.contains(resizeHandle);
        }).forEach(function(e) {
          return e.remove();
        });
      }
      this.setAttributes(this.table, node.attrs);
      if (prev.attrs[colgroupAttr] !== node.attrs[colgroupAttr]) {
        this.renderColgroup(node.attrs[colgroupAttr]);
      }
      return true;
    };
    TableView3.prototype.ignoreMutation = function(record) {
      var result = record.type === "attributes" && (record.target === this.table || record.target.firstChild === this.table || this.colgroup && this.colgroup.contains(record.target));
      return result;
    };
    TableView3.prototype.destroy = function() {
      this.node = void 0;
      this.view = void 0;
      this.table = void 0;
      this.colgroup = void 0;
      this.resizeHandles = void 0;
    };
    TableView3.prototype.renderColgroup = function(colgroupStr) {
      if (this.table && this.table.firstChild && this.table.firstChild.nodeName === "COLGROUP") {
        this.table.removeChild(this.table.firstChild);
      }
      if (colgroupStr) {
        this.colgroup = parseStrColgroup(colgroupStr);
        this.table.insertBefore(this.colgroup, this.table.firstChild);
      }
    };
    TableView3.prototype.setAttributes = function(table, attrs) {
      var skip = [colgroupAttr, resizableAttr];
      for (var attrName in attrs) {
        if (attrName && skip.indexOf(attrName) === -1) {
          var current = table.getAttribute(attrName);
          var next = attrs[attrName];
          if (next && next !== current) {
            table.setAttribute(attrName, next);
          } else if (!next) {
            table.removeAttribute(attrName);
          }
        }
      }
    };
    return TableView3;
  }()
);

// node_modules/@progress/kendo-editor-common/dist/es/plugins/table-resize/utils.js
var tableResizeKey = new PluginKey("table-resize");
var tableColumnResizeKey = new PluginKey("table-column-resizing");
var tableRowResizeKey = new PluginKey("table-row-resizing");

// node_modules/@progress/kendo-editor-common/dist/es/plugins/table-resize/column-resize.js
function pointsAtCell2($pos) {
  return Boolean($pos.parent.type.spec.tableRole === "row" && $pos.nodeAfter);
}
var ResizeState3 = (
  /** @class */
  function() {
    function ResizeState6(activeHandle, dragging) {
      this.activeHandle = activeHandle;
      this.dragging = dragging;
    }
    ResizeState6.prototype.apply = function(tr) {
      var state = this, action = tr.getMeta(tableColumnResizeKey);
      if (action && action.setHandle != null) {
        return new ResizeState6(action.setHandle, null);
      }
      if (action && action.setDragging !== void 0) {
        return new ResizeState6(state.activeHandle, action.setDragging);
      }
      if (state.activeHandle > -1 && tr.docChanged) {
        var handle = tr.mapping.map(state.activeHandle, -1);
        if (!pointsAtCell2(tr.doc.resolve(handle))) {
          handle = -1;
        }
        state = new ResizeState6(handle, state.dragging);
      }
      return state;
    };
    return ResizeState6;
  }()
);

// node_modules/@progress/kendo-editor-common/dist/es/plugins/table-resize/table-resize.js
var commonDir = {
  "southeast": true,
  "southwest": true,
  "northwest": true,
  "northeast": true
};
var horizontalDir = __assign4({ "east": true, "west": true }, commonDir);
var verticalDir = __assign4({ "south": true, "north": true }, commonDir);
var ResizeState4 = (
  /** @class */
  function() {
    function ResizeState6(activeHandle, dragging, nodePosition) {
      this.activeHandle = activeHandle;
      this.dragging = dragging;
      this.nodePosition = nodePosition;
    }
    ResizeState6.prototype.apply = function(tr) {
      var state = this, next = tr.getMeta(tableResizeKey);
      if (next) {
        var nextState = new ResizeState6(next.activeHandle, next.setDragging, next.nodePosition);
        return nextState;
      }
      return state;
    };
    return ResizeState6;
  }()
);

// node_modules/@progress/kendo-editor-common/dist/es/plugins/table-resize/row-resize.js
var TableRowView = (
  /** @class */
  function() {
    function TableRowView2() {
    }
    TableRowView2.prototype.ignoreMutation = function(record) {
      return record.type === "attributes" && record.attributeName === "style" && record.target.nodeName === "TR";
    };
    return TableRowView2;
  }()
);
function pointsAtCell3($pos) {
  return $pos.parent.type.spec.tableRole === "row" && $pos.nodeAfter;
}
var ResizeState5 = (
  /** @class */
  function() {
    function ResizeState6(activeHandle, dragging) {
      this.activeHandle = activeHandle;
      this.dragging = dragging;
    }
    ResizeState6.prototype.apply = function(tr) {
      var state = this, action = tr.getMeta(tableRowResizeKey);
      if (action && action.setHandle != null) {
        return new ResizeState6(action.setHandle, null);
      }
      if (action && action.setDragging !== void 0) {
        return new ResizeState6(state.activeHandle, action.setDragging);
      }
      if (state.activeHandle > -1) {
        var handle = tr.mapping.map(state.activeHandle, -1);
        if (!pointsAtCell3(tr.doc.resolve(handle))) {
          handle = null;
        }
        state = new ResizeState6(handle, state.dragging);
      }
      return state;
    };
    return ResizeState6;
  }()
);

// node_modules/prosemirror-dropcursor/dist/index.js
function dropCursor(options = {}) {
  return new Plugin({
    view(editorView) {
      return new DropCursorView(editorView, options);
    }
  });
}
var DropCursorView = class {
  constructor(editorView, options) {
    var _a2;
    this.editorView = editorView;
    this.cursorPos = null;
    this.element = null;
    this.timeout = -1;
    this.width = (_a2 = options.width) !== null && _a2 !== void 0 ? _a2 : 1;
    this.color = options.color === false ? void 0 : options.color || "black";
    this.class = options.class;
    this.handlers = ["dragover", "dragend", "drop", "dragleave"].map((name) => {
      let handler = (e) => {
        this[name](e);
      };
      editorView.dom.addEventListener(name, handler);
      return { name, handler };
    });
  }
  destroy() {
    this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));
  }
  update(editorView, prevState) {
    if (this.cursorPos != null && prevState.doc != editorView.state.doc) {
      if (this.cursorPos > editorView.state.doc.content.size)
        this.setCursor(null);
      else
        this.updateOverlay();
    }
  }
  setCursor(pos) {
    if (pos == this.cursorPos)
      return;
    this.cursorPos = pos;
    if (pos == null) {
      this.element.parentNode.removeChild(this.element);
      this.element = null;
    } else {
      this.updateOverlay();
    }
  }
  updateOverlay() {
    let $pos = this.editorView.state.doc.resolve(this.cursorPos);
    let isBlock = !$pos.parent.inlineContent, rect;
    if (isBlock) {
      let before = $pos.nodeBefore, after = $pos.nodeAfter;
      if (before || after) {
        let node = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0));
        if (node) {
          let nodeRect = node.getBoundingClientRect();
          let top = before ? nodeRect.bottom : nodeRect.top;
          if (before && after)
            top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;
          rect = { left: nodeRect.left, right: nodeRect.right, top: top - this.width / 2, bottom: top + this.width / 2 };
        }
      }
    }
    if (!rect) {
      let coords = this.editorView.coordsAtPos(this.cursorPos);
      rect = { left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom };
    }
    let parent = this.editorView.dom.offsetParent;
    if (!this.element) {
      this.element = parent.appendChild(document.createElement("div"));
      if (this.class)
        this.element.className = this.class;
      this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none;";
      if (this.color) {
        this.element.style.backgroundColor = this.color;
      }
    }
    this.element.classList.toggle("prosemirror-dropcursor-block", isBlock);
    this.element.classList.toggle("prosemirror-dropcursor-inline", !isBlock);
    let parentLeft, parentTop;
    if (!parent || parent == document.body && getComputedStyle(parent).position == "static") {
      parentLeft = -pageXOffset;
      parentTop = -pageYOffset;
    } else {
      let rect2 = parent.getBoundingClientRect();
      parentLeft = rect2.left - parent.scrollLeft;
      parentTop = rect2.top - parent.scrollTop;
    }
    this.element.style.left = rect.left - parentLeft + "px";
    this.element.style.top = rect.top - parentTop + "px";
    this.element.style.width = rect.right - rect.left + "px";
    this.element.style.height = rect.bottom - rect.top + "px";
  }
  scheduleRemoval(timeout) {
    clearTimeout(this.timeout);
    this.timeout = setTimeout(() => this.setCursor(null), timeout);
  }
  dragover(event) {
    if (!this.editorView.editable)
      return;
    let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });
    let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);
    let disableDropCursor = node && node.type.spec.disableDropCursor;
    let disabled = typeof disableDropCursor == "function" ? disableDropCursor(this.editorView, pos, event) : disableDropCursor;
    if (pos && !disabled) {
      let target = pos.pos;
      if (this.editorView.dragging && this.editorView.dragging.slice) {
        let point = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice);
        if (point != null)
          target = point;
      }
      this.setCursor(target);
      this.scheduleRemoval(5e3);
    }
  }
  dragend() {
    this.scheduleRemoval(20);
  }
  drop() {
    this.scheduleRemoval(20);
  }
  dragleave(event) {
    if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))
      this.setCursor(null);
  }
};

// node_modules/prosemirror-gapcursor/dist/index.js
var GapCursor = class _GapCursor extends Selection {
  /**
  Create a gap cursor.
  */
  constructor($pos) {
    super($pos, $pos);
  }
  map(doc3, mapping) {
    let $pos = doc3.resolve(mapping.map(this.head));
    return _GapCursor.valid($pos) ? new _GapCursor($pos) : Selection.near($pos);
  }
  content() {
    return Slice.empty;
  }
  eq(other) {
    return other instanceof _GapCursor && other.head == this.head;
  }
  toJSON() {
    return { type: "gapcursor", pos: this.head };
  }
  /**
  @internal
  */
  static fromJSON(doc3, json) {
    if (typeof json.pos != "number")
      throw new RangeError("Invalid input for GapCursor.fromJSON");
    return new _GapCursor(doc3.resolve(json.pos));
  }
  /**
  @internal
  */
  getBookmark() {
    return new GapBookmark(this.anchor);
  }
  /**
  @internal
  */
  static valid($pos) {
    let parent = $pos.parent;
    if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))
      return false;
    let override = parent.type.spec.allowGapCursor;
    if (override != null)
      return override;
    let deflt = parent.contentMatchAt($pos.index()).defaultType;
    return deflt && deflt.isTextblock;
  }
  /**
  @internal
  */
  static findGapCursorFrom($pos, dir, mustMove = false) {
    search:
      for (; ; ) {
        if (!mustMove && _GapCursor.valid($pos))
          return $pos;
        let pos = $pos.pos, next = null;
        for (let d = $pos.depth; ; d--) {
          let parent = $pos.node(d);
          if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {
            next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);
            break;
          } else if (d == 0) {
            return null;
          }
          pos += dir;
          let $cur = $pos.doc.resolve(pos);
          if (_GapCursor.valid($cur))
            return $cur;
        }
        for (; ; ) {
          let inside = dir > 0 ? next.firstChild : next.lastChild;
          if (!inside) {
            if (next.isAtom && !next.isText && !NodeSelection.isSelectable(next)) {
              $pos = $pos.doc.resolve(pos + next.nodeSize * dir);
              mustMove = false;
              continue search;
            }
            break;
          }
          next = inside;
          pos += dir;
          let $cur = $pos.doc.resolve(pos);
          if (_GapCursor.valid($cur))
            return $cur;
        }
        return null;
      }
  }
};
GapCursor.prototype.visible = false;
GapCursor.findFrom = GapCursor.findGapCursorFrom;
Selection.jsonID("gapcursor", GapCursor);
var GapBookmark = class _GapBookmark {
  constructor(pos) {
    this.pos = pos;
  }
  map(mapping) {
    return new _GapBookmark(mapping.map(this.pos));
  }
  resolve(doc3) {
    let $pos = doc3.resolve(this.pos);
    return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
  }
};
function closedBefore($pos) {
  for (let d = $pos.depth; d >= 0; d--) {
    let index = $pos.index(d), parent = $pos.node(d);
    if (index == 0) {
      if (parent.type.spec.isolating)
        return true;
      continue;
    }
    for (let before = parent.child(index - 1); ; before = before.lastChild) {
      if (before.childCount == 0 && !before.inlineContent || before.isAtom || before.type.spec.isolating)
        return true;
      if (before.inlineContent)
        return false;
    }
  }
  return true;
}
function closedAfter($pos) {
  for (let d = $pos.depth; d >= 0; d--) {
    let index = $pos.indexAfter(d), parent = $pos.node(d);
    if (index == parent.childCount) {
      if (parent.type.spec.isolating)
        return true;
      continue;
    }
    for (let after = parent.child(index); ; after = after.firstChild) {
      if (after.childCount == 0 && !after.inlineContent || after.isAtom || after.type.spec.isolating)
        return true;
      if (after.inlineContent)
        return false;
    }
  }
  return true;
}
function gapCursor() {
  return new Plugin({
    props: {
      decorations: drawGapCursor,
      createSelectionBetween(_view, $anchor, $head) {
        return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;
      },
      handleClick: handleClick4,
      handleKeyDown: handleKeyDown2,
      handleDOMEvents: { beforeinput }
    }
  });
}
var handleKeyDown2 = keydownHandler({
  "ArrowLeft": arrow2("horiz", -1),
  "ArrowRight": arrow2("horiz", 1),
  "ArrowUp": arrow2("vert", -1),
  "ArrowDown": arrow2("vert", 1)
});
function arrow2(axis, dir) {
  const dirStr = axis == "vert" ? dir > 0 ? "down" : "up" : dir > 0 ? "right" : "left";
  return function(state, dispatch, view) {
    let sel = state.selection;
    let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;
    if (sel instanceof TextSelection) {
      if (!view.endOfTextblock(dirStr) || $start.depth == 0)
        return false;
      mustMove = false;
      $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());
    }
    let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);
    if (!$found)
      return false;
    if (dispatch)
      dispatch(state.tr.setSelection(new GapCursor($found)));
    return true;
  };
}
function handleClick4(view, pos, event) {
  if (!view || !view.editable)
    return false;
  let $pos = view.state.doc.resolve(pos);
  if (!GapCursor.valid($pos))
    return false;
  let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });
  if (clickPos && clickPos.inside > -1 && NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))
    return false;
  view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));
  return true;
}
function beforeinput(view, event) {
  if (event.inputType != "insertCompositionText" || !(view.state.selection instanceof GapCursor))
    return false;
  let { $from } = view.state.selection;
  let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);
  if (!insert)
    return false;
  let frag = Fragment.empty;
  for (let i = insert.length - 1; i >= 0; i--)
    frag = Fragment.from(insert[i].createAndFill(null, frag));
  let tr = view.state.tr.replace($from.pos, $from.pos, new Slice(frag, 0, 0));
  tr.setSelection(TextSelection.near(tr.doc.resolve($from.pos + 1)));
  view.dispatch(tr);
  return false;
}
function drawGapCursor(state) {
  if (!(state.selection instanceof GapCursor))
    return null;
  let node = document.createElement("div");
  node.className = "ProseMirror-gapcursor";
  return DecorationSet.create(state.doc, [Decoration.widget(state.selection.head, node, { key: "gapcursor" })]);
}

// node_modules/@progress/kendo-editor-common/dist/es/table.js
var createTable = function(nodes3, rows, columns) {
  var table = nodes3.table, table_row = nodes3.table_row, table_cell = nodes3.table_cell;
  var tableRows = [];
  var cells;
  for (var r = 0; r < rows + 1; r++) {
    cells = [];
    for (var c = 0; c < columns + 1; c++) {
      cells.push(table_cell.createAndFill());
    }
    tableRows.push(table_row.createAndFill(void 0, cells));
  }
  return table.createAndFill(void 0, tableRows);
};
var reTable = /^table$/;
var reRow = /^table_row$/;
var reCell = /^table_cell|table_header$/;
var closest = function(selection, name) {
  var pos = selection.$head;
  for (var i = pos.depth; i > 0; i--) {
    var node = pos.node(i);
    if (name.test(node.type.name)) {
      return {
        pos: pos.before(i),
        node
      };
    }
  }
  return null;
};
var addRowBefore2 = function(state, dispatch) {
  var cmdDispatch = dispatch && function(tr) {
    var _a2;
    var row = closest(tr.selection, reRow);
    var table = closest(tr.selection, reTable);
    if (row && table && row.node.attrs[rowTypeAttr]) {
      var index = 0;
      for (var i = 0; i < table.node.nodeSize; i++) {
        if (table.node.child(i).eq(row.node)) {
          index = i;
          break;
        }
      }
      var next = table.node.child(index - 1);
      var from2 = row.pos - next.nodeSize;
      tr.setNodeMarkup(from2, void 0, (_a2 = {}, _a2[rowTypeAttr] = row.node.attrs[rowTypeAttr], _a2));
    }
    return dispatch(tr);
  };
  return addRowBefore(state, cmdDispatch);
};
var addRowAfter2 = function(state, dispatch) {
  var cmdDispatch = dispatch && function(tr) {
    var _a2;
    var row = closest(tr.selection, reRow);
    if (row && row.node.attrs[rowTypeAttr]) {
      var from2 = row.pos + row.node.nodeSize;
      tr.setNodeMarkup(from2, void 0, (_a2 = {}, _a2[rowTypeAttr] = row.node.attrs[rowTypeAttr], _a2));
    }
    return dispatch(tr);
  };
  return addRowAfter(state, cmdDispatch);
};
var columnIndex = function(table, selection) {
  if (!table) {
    return -1;
  }
  var map2 = TableMap.get(table.node);
  var tableCell = closest(selection, reCell);
  var idx = map2.map.indexOf(tableCell.pos - table.pos - 1);
  var colIndex = -1;
  if (idx !== -1) {
    colIndex = idx % map2.width;
  }
  return colIndex;
};
var addCol = function(tr, table, to) {
  var _a2;
  var colIndex = columnIndex(table, tr.selection);
  var colgroup = parseStrColgroup(table.node.attrs[colgroupAttr]);
  colgroup.insertBefore(colgroup.ownerDocument.createElement("col"), colgroup.children[colIndex + to]);
  tr.setNodeMarkup(table.pos, null, __assign4(__assign4({}, table.node.attrs), (_a2 = {}, _a2[colgroupAttr] = colgroup.outerHTML, _a2)));
};
var deleteCol = function(tr, table, colIndex) {
  var _a2;
  var colgroup = parseStrColgroup(table.node.attrs[colgroupAttr]);
  colgroup.removeChild(colgroup.children[colIndex]);
  tr.setNodeMarkup(table.pos, null, __assign4(__assign4({}, table.node.attrs), (_a2 = {}, _a2[colgroupAttr] = colgroup.outerHTML, _a2)));
};
var addColumnBefore2 = function(state, dispatch) {
  var cmdDispatch = dispatch && function(tr) {
    var table = closest(tr.selection, reTable);
    if (!table.node.attrs[colgroupAttr]) {
      return dispatch(tr);
    }
    addCol(tr, table, -1);
    return dispatch(tr);
  };
  return addColumnBefore(state, cmdDispatch);
};
var addColumnAfter2 = function(state, dispatch) {
  var cmdDispatch = dispatch && function(tr) {
    var table = closest(tr.selection, reTable);
    if (!table.node.attrs[colgroupAttr]) {
      return dispatch(tr);
    }
    addCol(tr, table, 1);
    return dispatch(tr);
  };
  return addColumnAfter(state, cmdDispatch);
};
var deleteColumn2 = function(state, dispatch) {
  var colIndex = columnIndex(closest(state.selection, reTable), state.selection);
  var cmdDispatch = dispatch && function(tr) {
    var table = closest(tr.selection, reTable);
    if (!table.node.attrs[colgroupAttr]) {
      return dispatch(tr);
    }
    deleteCol(tr, table, colIndex);
    return dispatch(tr);
  };
  return deleteColumn(state, cmdDispatch);
};

// node_modules/@progress/kendo-vue-editor/dist/es/config/schema.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var cellAttribute2 = function(name) {
  var _a2;
  return _a2 = {}, _a2[name] = {
    default: null,
    getFromDOM: function(cell) {
      return cell.getAttribute(name);
    },
    setDOMAttr: function(value2, attrs) {
      attrs[name] = value2;
    }
  }, _a2;
};
var getAttrs = function(node) {
  var attrs = {};
  Array.from(node.attributes).forEach(function(attr) {
    attrs[attr.nodeName] = attr.nodeValue;
  });
  return attrs;
};
var cellAttributes2 = __assign5(__assign5(__assign5({}, cellAttribute2("style")), cellAttribute2("class")), cellAttribute2("id"));
var tNodes2 = tableNodes({ tableGroup: "block", cellContent: "block+", cellAttributes: cellAttributes2 });
tNodes2.table_row.attrs = tNodes2.table_row.attrs || {};
tNodes2.table_row.attrs.style = { default: null };
tNodes2.table_row.attrs.class = { default: null };
tNodes2.table_row.attrs.id = { default: null };
tNodes2.table_row.toDOM = function(node) {
  return ["tr", node.attrs, 0];
};
tNodes2.table_row.parseDOM = [{ tag: "tr", getAttrs }];
tNodes2.table.attrs = tNodes2.table.attrs || {};
tNodes2.table.attrs.style = { default: null };
tNodes2.table.attrs.class = { default: null };
tNodes2.table.attrs.id = { default: null };
tNodes2.table.toDOM = function(node) {
  return ["table", node.attrs, ["tbody", 0]];
};
tNodes2.table.parseDOM = [{ tag: "table", getAttrs }];
var nodes2 = __assign5(__assign5({}, nodes), tNodes2);

// node_modules/@progress/kendo-vue-editor/dist/es/config/defaultStyles.js
var defaultStyle = '\nhtml, body {\n    margin: 0;\n    height: 100%;\n    padding: 0;\n}\n\nhtml {\n  min-height: 100%;\n}\n\nbody {\n  box-sizing: border-box;\n  position: relative;\n  word-wrap: break-word;\n  padding: 8px;\n}\n\nbody > .k-content {\n  outline: 0;\n  height: 100%;\n  white-space: pre-wrap;\n}\n\n.k-content > p {\n  margin: 0 0 1em;\n}\n\n.k-content table {\n  white-space: pre-wrap;\n}\n\n.k-content .k-text-selected, .k-content::selection {\n  color: HighlightText;\n  background-color: Highlight;\n}\n\n.k-content .k-text-highlighted {\n  background-color: #bbdefb;\n}\n\n.k-content .ProseMirror-selectednode {\n  outline: 2px solid #8cf;\n}\n\n.ProseMirror-hideselection *::selection { background: transparent; }\n.ProseMirror-hideselection *::-moz-selection { background: transparent; }\n.ProseMirror-hideselection { caret-color: transparent; }\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n}\n\n.ProseMirror-gapcursor:after {\n  content: "";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.k-editor-resize-handles-wrapper {\n  position: absolute;\n  visibility: hidden;\n}\n\n.k-editor-resize-handle {\n  position: absolute;\n  visibility: visible;\n  background-color: #fff;\n  border: 1px solid #000;\n  z-index: 100;\n  width: 5px;\n  height: 5px;\n}\n\n.k-editor-resize-handle.northwest {\n  top: 0;\n  left: 0;\n  transform: translate(-50%, -50%);\n  cursor: nw-resize;\n}\n\n.k-editor-resize-handle.north {\n  top: 0;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  cursor: n-resize;\n}\n\n.k-editor-resize-handle.northeast {\n  top: 0;\n  right: 0;\n  transform: translate(50%, -50%);\n  cursor: ne-resize;\n}\n\n.k-editor-resize-handle.southwest {\n  left: 0;\n  bottom: 0;\n  transform: translate(-50%, 50%);\n  cursor: sw-resize;\n}\n\n.k-editor-resize-handle.south {\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 50%);\n  cursor: s-resize;\n}\n\n.k-editor-resize-handle.southeast {\n  right: 0;\n  bottom: 0;\n  transform: translate(50%, 50%);\n  cursor: se-resize;\n}\n\n.k-editor-resize-handle.west {\n  top: 50%;\n  left: 0;\n  transform: translate(-50%, -50%);\n  cursor: w-resize;\n}\n\n.k-editor-resize-handle.east {\n  top: 50%;\n  right: 0;\n  transform: translate(50%, -50%);\n  cursor: e-resize;\n}\n';
var tablesStyles = '\n  .ProseMirror .tableWrapper {\n    overflow-x: auto;\n    margin: 1em 0;\n  }\n\n  .ProseMirror table {\n    margin: 0;\n    border-collapse: collapse;\n    table-layout: fixed;\n    width: 100%;\n    overflow: hidden;\n  }\n\n  .ProseMirror td, .ProseMirror th {\n    min-width: 1em;\n    border: 1px solid #ddd;\n    padding: 3px 5px;\n    vertical-align: top;\n    box-sizing: border-box;\n    position: relative;\n  }\n\n  .ProseMirror th {\n    font-weight: bold;\n    text-align: left;\n  }\n\n  .ProseMirror .column-resize-handle {\n    position: absolute;\n    right: -2px; top: 0; bottom: 0;\n    width: 4px;\n    z-index: 20;\n    background-color: #adf;\n    pointer-events: none;\n  }\n\n  .ProseMirror.resize-cursor {\n    cursor: ew-resize;\n    cursor: col-resize;\n  }\n\n  /* Give selected cells a blue overlay */\n  .ProseMirror .selectedCell:after {\n    z-index: 2;\n    position: absolute;\n    content: "";\n    left: 0; right: 0; top: 0; bottom: 0;\n    background: rgba(200, 200, 255, 0.4);\n    pointer-events: none;\n  }\n';
var rtlStyles = "body { direction: rtl }";

// node_modules/@progress/kendo-vue-editor/dist/es/messages/main.js
var _a;
var bold2 = "editor.bold";
var italic2 = "editor.italic";
var underline2 = "editor.underline";
var strikethrough2 = "editor.strikethrough";
var subscript2 = "editor.subscript";
var superscript2 = "editor.superscript";
var insertHyperlink = "editor.hyperlink";
var insertFile = "editor.insertFile";
var print = "editor.print";
var selectAll2 = "editor.selectAll";
var cleanFormatting2 = "editor.cleanFormatting";
var pdf = "editor.pdf";
var foregroundColor = "editor.foregroundColor";
var backgroundColor = "editor.backgroundColor";
var foregroundColorAriaLabel = "editor.foregroundColorAriaLabel";
var backgroundColorAriaLabel = "editor.backgroundColorAriaLabel";
var createTable2 = "editor.createTable";
var createTableHint = "editor.insertTableHint";
var addRowBefore3 = "editor.addRowBefore";
var addRowAfter3 = "editor.addRowAfter";
var addColumnBefore3 = "editor.addColumnBefore";
var addColumnAfter3 = "editor.addColumnAfter";
var deleteRow2 = "editor.deleteRow";
var deleteColumn3 = "editor.deleteColumn";
var deleteTable2 = "editor.deleteTable";
var mergeCells2 = "editor.mergeCells";
var splitCell2 = "editor.splitCell";
var insertHyperlinkDialogTitle = "editor.hyperlink-dialog-title";
var insertHyperlinkAddress = "editor.hyperlink-dialog-content-address";
var insertHyperlinkTitle = "editor.hyperlink-dialog-content-title";
var insertHyperlinkNewWindow = "editor.hyperlink-dialog-content-newwindow";
var insertHyperlinkCancel = "editor.hyperlink-dialog-cancel";
var insertHyperlinkInsert = "editor.hyperlink-dialog-insert";
var insertFileDialogTitle = "editor.insertfile-dialog-title";
var insertFileAddress = "editor.insertfile-dialog-content-address";
var insertFileTitle = "editor.insertfile-dialog-content-title";
var insertFileCancel = "editor.insertfile-dialog-cancel";
var insertFileInsert = "editor.insertfile-dialog-insert";
var insertImage2 = "editor.image";
var insertImageDialogTitle = "editor.image-dialog-title";
var insertImageAddress = "editor.image-address";
var insertImageTitle = "editor.image-title";
var insertImageAltText = "editor.image-altText";
var insertImageWidth = "editor.image-width";
var insertImageHeight = "editor.image-height";
var insertImageCancel = "editor.image-cancel";
var insertImageInsert = "editor.image-insert";
var viewHtml = "editor.viewHtml";
var viewHtmlDialogTitle = "editor.viewHtml-dialog-title";
var viewHtmlCancel = "editor.viewHtml-cancel";
var viewHtmlUpdate = "editor.viewHtml-update";
var unlink = "editor.unlink";
var undo2 = "editor.undo";
var redo2 = "editor.redo";
var fontSize = "editor.fontSize";
var fontName = "editor.fontName";
var format = "editor.format";
var alignLeft = "editor.alignLeft";
var alignRight = "editor.alignRight";
var alignCenter = "editor.alignCenter";
var alignJustify = "editor.alignJustify";
var indent2 = "editor.indent";
var outdent2 = "editor.outdent";
var orderedList3 = "editor.orderedList";
var bulletList3 = "editor.bulletList";
var findReplaceToolTitle = "editor.findReplace-tool-title";
var findReplaceDialogTitle = "editor.findReplace-dialog-title";
var findReplaceTabFind = "editor.findReplace-tab-find";
var findReplaceTabReplace = "editor.findReplace-tab-replace";
var findReplaceFindWhat = "editor.findReplace-findWhat";
var findReplaceReplaceWith = "editor.findReplace-replaceWith";
var findReplaceReplace = "editor.findReplace-replace";
var findReplaceReplaceAll = "editor.findReplace-replaceAll";
var findReplaceMatchCase = "editor.findReplace-matchCase";
var findReplaceMatchWord = "editor.findReplace-matchWord";
var findReplaceMatchCyclic = "editor.findReplace-matchCyclic";
var findReplaceUseRegExp = "editor.findReplace-useRegExp";
var findReplacePrevMatch = "editor.findReplace-prevMatch";
var findReplaceNextMatch = "editor.findReplace-nextMatch";
var findReplaceMatches = "editor.findReplace-matches";
var iframeTitle = "editor.iframeTitle";
var messages = (_a = {}, _a[bold2] = "Bold", _a[italic2] = "Italic", _a[underline2] = "Underline", _a[strikethrough2] = "Strikethrough", _a[subscript2] = "Subscript", _a[superscript2] = "Superscript", _a[unlink] = "Remove hyperlink", _a[undo2] = "Undo", _a[redo2] = "Redo", _a[fontSize] = "Font Size", _a[fontName] = "Font Name", _a[format] = "Format", _a[alignLeft] = "Align text left", _a[alignRight] = "Align text right", _a[alignCenter] = "Center text", _a[alignJustify] = "Justify", _a[indent2] = "Indent", _a[outdent2] = "Outdent", _a[orderedList3] = "Insert ordered list", _a[bulletList3] = "Insert unordered list", _a[print] = "Print", _a[selectAll2] = "Select All", _a[cleanFormatting2] = "Clean formatting", _a[pdf] = "Export as PDF", _a[foregroundColor] = "Color", _a[backgroundColor] = "Background color", _a[foregroundColorAriaLabel] = "Set ForeGround color", _a[backgroundColorAriaLabel] = "Set Background color", // Tables
_a[createTable2] = "Create a table", _a[createTableHint] = "Create a {0} x {1} table", _a[addRowBefore3] = "Add row above", _a[addRowAfter3] = "Add row below", _a[addColumnBefore3] = "Add column on the left", _a[addColumnAfter3] = "Add column on the right", _a[deleteRow2] = "Delete row", _a[deleteColumn3] = "Delete column", _a[deleteTable2] = "Delete table", _a[mergeCells2] = "Merge cells", _a[splitCell2] = "Split cell", // Insert Link
_a[insertHyperlink] = "Insert hyperlink", _a[insertHyperlinkDialogTitle] = "Insert hyperlink", _a[insertHyperlinkAddress] = "Web address", _a[insertHyperlinkTitle] = "Title", _a[insertHyperlinkNewWindow] = "Open link in new window", _a[insertHyperlinkCancel] = "Cancel", _a[insertHyperlinkInsert] = "Insert", // Insert File
_a[insertFile] = "Insert file", _a[insertFileDialogTitle] = "Insert file", _a[insertFileAddress] = "Web address", _a[insertFileTitle] = "Title", _a[insertFileCancel] = "Cancel", _a[insertFileInsert] = "Insert", // Insert Image
_a[insertImage2] = "Insert image", _a[insertImageDialogTitle] = "Insert image", _a[insertImageAddress] = "Web address", _a[insertImageTitle] = "Title", _a[insertImageAltText] = "Alternate text", _a[insertImageWidth] = "Width (px)", _a[insertImageHeight] = "Height (px)", _a[insertImageCancel] = "Cancel", _a[insertImageInsert] = "Insert", // View HTML
_a[viewHtml] = "View HTML", _a[viewHtmlDialogTitle] = "View HTML", _a[viewHtmlCancel] = "Cancel", _a[viewHtmlUpdate] = "Update", // Find and Replace
_a[findReplaceToolTitle] = "Find and Replace", _a[findReplaceDialogTitle] = "Find and Replace", _a[findReplaceTabFind] = "Find", _a[findReplaceTabReplace] = "Replace", _a[findReplaceFindWhat] = "Find What:", _a[findReplaceReplaceWith] = "Replace With", _a[findReplaceReplace] = "Replace", _a[findReplaceReplaceAll] = "Replace All", _a[findReplaceMatchCase] = "Match Case", _a[findReplaceMatchWord] = "Match whole word only", _a[findReplaceMatchCyclic] = "Match cyclic (Wrap around)", _a[findReplaceUseRegExp] = "Regular Expression", _a[findReplacePrevMatch] = "Prev", _a[findReplaceNextMatch] = "Next", _a[findReplaceMatches] = "{0} of {1} matches", _a[iframeTitle] = "Editable area. Press Alt + F10 for toolbar.", _a);
var keys2 = {
  bold: bold2,
  italic: italic2,
  underline: underline2,
  strikethrough: strikethrough2,
  subscript: subscript2,
  superscript: superscript2,
  unlink,
  undo: undo2,
  redo: redo2,
  fontSize,
  fontName,
  format,
  alignLeft,
  alignRight,
  alignCenter,
  alignJustify,
  indent: indent2,
  outdent: outdent2,
  orderedList: orderedList3,
  bulletList: bulletList3,
  print,
  selectAll: selectAll2,
  cleanFormatting: cleanFormatting2,
  pdf,
  foregroundColor,
  backgroundColor,
  foregroundColorAriaLabel,
  backgroundColorAriaLabel,
  createTable: createTable2,
  createTableHint,
  addRowBefore: addRowBefore3,
  addRowAfter: addRowAfter3,
  addColumnBefore: addColumnBefore3,
  addColumnAfter: addColumnAfter3,
  deleteRow: deleteRow2,
  deleteColumn: deleteColumn3,
  deleteTable: deleteTable2,
  mergeCells: mergeCells2,
  splitCell: splitCell2,
  insertHyperlink,
  insertHyperlinkDialogTitle,
  insertHyperlinkAddress,
  insertHyperlinkTitle,
  insertHyperlinkNewWindow,
  insertHyperlinkCancel,
  insertHyperlinkInsert,
  insertFile,
  insertFileDialogTitle,
  insertFileAddress,
  insertFileTitle,
  insertFileCancel,
  insertFileInsert,
  insertImage: insertImage2,
  insertImageDialogTitle,
  insertImageAddress,
  insertImageTitle,
  insertImageAltText,
  insertImageWidth,
  insertImageHeight,
  insertImageCancel,
  insertImageInsert,
  viewHtml,
  viewHtmlDialogTitle,
  viewHtmlCancel,
  viewHtmlUpdate,
  findReplaceToolTitle,
  findReplaceDialogTitle,
  findReplaceTabFind,
  findReplaceTabReplace,
  findReplaceFindWhat,
  findReplaceReplaceWith,
  findReplaceReplace,
  findReplaceReplaceAll,
  findReplaceMatchCase,
  findReplaceMatchWord,
  findReplaceMatchCyclic,
  findReplaceUseRegExp,
  findReplacePrevMatch,
  findReplaceNextMatch,
  findReplaceMatches,
  iframeTitle
};

// node_modules/@progress/kendo-vue-editor/dist/es/config/toolsSettings.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __spreadArray2 = function(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
};
var listsTypes2 = __assign6({}, indentRules.listsTypes);
var EditorToolsSettings;
(function(EditorToolsSettings2) {
  var buttonCommonProps = {
    type: "button"
  };
  EditorToolsSettings2.bold = __assign6(__assign6({}, bold), { props: __assign6({ icon: "bold", svgIcon: boldIcon }, buttonCommonProps), messages: {
    title: keys2.bold
  }, commandName: "Bold" });
  EditorToolsSettings2.italic = __assign6(__assign6({}, italic), { props: __assign6({ icon: "italic", svgIcon: italicIcon }, buttonCommonProps), messages: {
    title: keys2.italic
  }, commandName: "Italic" });
  EditorToolsSettings2.underline = __assign6(__assign6({}, underline), { props: __assign6({ icon: "underline", svgIcon: underlineIcon }, buttonCommonProps), messages: {
    title: keys2.underline
  }, commandName: "Underline" });
  EditorToolsSettings2.strikethrough = __assign6(__assign6({}, strikethrough), { props: __assign6({ icon: "strikethrough", svgIcon: strikethroughIcon }, buttonCommonProps), messages: {
    title: keys2.strikethrough
  }, commandName: "Strikethrough" });
  EditorToolsSettings2.subscript = __assign6(__assign6({}, subscript), { props: __assign6({ icon: "subscript", svgIcon: subscriptIcon }, buttonCommonProps), messages: {
    title: keys2.subscript
  }, commandName: "Subscript" });
  EditorToolsSettings2.superscript = __assign6(__assign6({}, superscript), { props: __assign6({ icon: "supscript", svgIcon: supscriptIcon }, buttonCommonProps), messages: {
    title: keys2.superscript
  }, commandName: "Superscript" });
  EditorToolsSettings2.link = __assign6(__assign6({}, link), { props: __assign6({ icon: "link", svgIcon: linkIcon }, buttonCommonProps), messages: {
    insertHyperlink: keys2.insertHyperlink,
    insertHyperlinkDialogTitle: keys2.insertHyperlinkDialogTitle,
    insertHyperlinkAddress: keys2.insertHyperlinkAddress,
    insertHyperlinkTitle: keys2.insertHyperlinkTitle,
    insertHyperlinkNewWindow: keys2.insertHyperlinkNewWindow,
    insertHyperlinkCancel: keys2.insertHyperlinkCancel,
    insertHyperlinkInsert: keys2.insertHyperlinkInsert
  }, commandName: "Link" });
  EditorToolsSettings2.insertFile = __assign6(__assign6({}, link), { props: __assign6({ icon: "file-add", svgIcon: fileAddIcon }, buttonCommonProps), messages: {
    insertHyperlink: keys2.insertFile,
    insertHyperlinkDialogTitle: keys2.insertFileDialogTitle,
    insertHyperlinkAddress: keys2.insertFileAddress,
    insertHyperlinkTitle: keys2.insertFileTitle,
    insertHyperlinkNewWindow: "",
    insertHyperlinkCancel: keys2.insertFileCancel,
    insertHyperlinkInsert: keys2.insertFileInsert
  }, commandName: "InsertFile", linkTarget: false });
  EditorToolsSettings2.insertTable = {
    props: __assign6({ icon: "table-add", svgIcon: tableAddIcon }, buttonCommonProps),
    messages: {
      createTable: keys2.createTable,
      createTableHint: keys2.createTableHint
    },
    commandName: "InsertTable"
  };
  EditorToolsSettings2.addRowBefore = {
    command: addRowBefore2,
    props: __assign6({ icon: "table-row-insert-above", svgIcon: tableRowInsertAboveIcon }, buttonCommonProps),
    messages: {
      title: keys2.addRowBefore
    },
    commandName: "AddRowBefore"
  };
  EditorToolsSettings2.addRowAfter = {
    command: addRowAfter2,
    props: __assign6({ icon: "table-row-insert-below", svgIcon: tableRowInsertBelowIcon }, buttonCommonProps),
    messages: {
      title: keys2.addRowAfter
    },
    commandName: "AddRowAfter"
  };
  EditorToolsSettings2.addColumnBefore = {
    command: addColumnBefore2,
    props: __assign6({ icon: "table-column-insert-left", svgIcon: tableColumnInsertLeftIcon }, buttonCommonProps),
    messages: {
      title: keys2.addColumnBefore
    },
    commandName: "AddColumnBefore"
  };
  EditorToolsSettings2.addColumnAfter = {
    command: addColumnAfter2,
    props: __assign6({ icon: "table-column-insert-right", svgIcon: tableColumnInsertRightIcon }, buttonCommonProps),
    messages: {
      title: keys2.addColumnAfter
    },
    commandName: "AddColumnAfter"
  };
  EditorToolsSettings2.deleteRow = {
    command: deleteRow,
    props: __assign6({ icon: "table-row-delete", svgIcon: tableRowDeleteIcon }, buttonCommonProps),
    messages: {
      title: keys2.deleteRow
    },
    commandName: "DeleteRow"
  };
  EditorToolsSettings2.deleteColumn = {
    command: deleteColumn2,
    props: __assign6({ icon: "table-column-delete", svgIcon: tableColumnDeleteIcon }, buttonCommonProps),
    messages: {
      title: keys2.deleteColumn
    },
    commandName: "DeleteColumn"
  };
  EditorToolsSettings2.deleteTable = {
    command: deleteTable,
    props: __assign6({ icon: "table-delete", svgIcon: tableDeleteIcon }, buttonCommonProps),
    messages: {
      title: keys2.deleteTable
    },
    commandName: "DeleteTable"
  };
  EditorToolsSettings2.mergeCells = {
    command: mergeCells,
    props: __assign6({ icon: "cells-merge", svgIcon: cellsMergeIcon }, buttonCommonProps),
    messages: {
      title: keys2.mergeCells
    },
    commandName: "MergeCells"
  };
  EditorToolsSettings2.splitCell = {
    command: splitCell,
    props: __assign6({ icon: "cell-split-horizontally", svgIcon: cellSplitHorizontallyIcon }, buttonCommonProps),
    messages: {
      title: keys2.splitCell
    },
    commandName: "SplitCell"
  };
  EditorToolsSettings2.print = {
    props: __assign6({ icon: "print", svgIcon: printIcon }, buttonCommonProps),
    messages: {
      title: keys2.print
    }
  };
  EditorToolsSettings2.selectAll = {
    props: __assign6({ icon: "select-all", svgIcon: selectAllIcon }, buttonCommonProps),
    messages: {
      title: keys2.selectAll
    }
  };
  EditorToolsSettings2.pdf = {
    props: __assign6({ icon: "file-pdf", svgIcon: filePdfIcon }, buttonCommonProps),
    messages: {
      title: keys2.pdf
    }
  };
  EditorToolsSettings2.savePdfOptions = {
    fileName: "editor.pdf",
    paperSize: "A4",
    margin: "1cm"
  };
  EditorToolsSettings2.cleanFormatting = {
    props: __assign6({ icon: "clear-css", svgIcon: clearCssIcon }, buttonCommonProps),
    messages: {
      title: keys2.cleanFormatting
    },
    commandName: "CleanFormatting"
  };
  EditorToolsSettings2.image = {
    node: "image",
    props: __assign6({ icon: "image", svgIcon: imageIcon }, buttonCommonProps),
    messages: {
      insertImage: keys2.insertImage,
      insertImageDialogTitle: keys2.insertImageDialogTitle,
      insertImageAddress: keys2.insertImageAddress,
      insertImageTitle: keys2.insertImageTitle,
      insertImageAltText: keys2.insertImageAltText,
      insertImageWidth: keys2.insertImageWidth,
      insertImageHeight: keys2.insertImageHeight,
      insertImageCancel: keys2.insertImageCancel,
      insertImageInsert: keys2.insertImageInsert
    },
    commandName: "InsertImage"
  };
  EditorToolsSettings2.viewHtml = {
    props: __assign6({ icon: "code", svgIcon: codeIcon }, buttonCommonProps),
    messages: {
      viewHtml: keys2.viewHtml,
      viewHtmlDialogTitle: keys2.viewHtmlDialogTitle,
      viewHtmlCancel: keys2.viewHtmlCancel,
      viewHtmlUpdate: keys2.viewHtmlUpdate
    },
    commandName: "SetContent"
  };
  EditorToolsSettings2.findAndReplace = {
    props: __assign6({ icon: "search", svgIcon: searchIcon }, buttonCommonProps),
    messages: {
      findReplaceToolTitle: keys2.findReplaceToolTitle,
      findReplaceDialogTitle: keys2.findReplaceDialogTitle,
      findReplaceTabFind: keys2.findReplaceTabFind,
      findReplaceTabReplace: keys2.findReplaceTabReplace,
      findReplaceFindWhat: keys2.findReplaceFindWhat,
      findReplaceReplaceWith: keys2.findReplaceReplaceWith,
      findReplaceReplace: keys2.findReplaceReplace,
      findReplaceReplaceAll: keys2.findReplaceReplaceAll,
      findReplaceMatchCase: keys2.findReplaceMatchCase,
      findReplaceMatchWord: keys2.findReplaceMatchWord,
      findReplaceMatchCyclic: keys2.findReplaceMatchCyclic,
      findReplaceUseRegExp: keys2.findReplaceUseRegExp,
      findReplacePrevMatch: keys2.findReplacePrevMatch,
      findReplaceNextMatch: keys2.findReplaceNextMatch,
      findReplaceMatches: keys2.findReplaceMatches
    }
  };
  EditorToolsSettings2.unlink = __assign6(__assign6({}, link), { props: __assign6({ icon: "unlink", svgIcon: unlinkIcon }, buttonCommonProps), messages: {
    title: keys2.unlink
  }, commandName: "Unlink" });
  EditorToolsSettings2.undo = {
    command: undo,
    props: __assign6({ icon: "undo", svgIcon: undoIcon }, buttonCommonProps),
    messages: {
      title: keys2.undo
    },
    commandName: "Undo"
  };
  EditorToolsSettings2.redo = {
    command: redo,
    props: __assign6({ icon: "redo", svgIcon: redoIcon }, buttonCommonProps),
    messages: {
      title: keys2.redo
    },
    commandName: "Redo"
  };
  EditorToolsSettings2.fontSize = {
    style: "font-size",
    defaultItem: { text: messages[keys2.fontSize], value: "", localizationKey: keys2.fontSize },
    items: [
      { text: "1 (8pt)", value: "xx-small" },
      { text: "2 (10pt)", value: "x-small" },
      { text: "3 (12pt)", value: "small" },
      { text: "4 (14pt)", value: "medium" },
      { text: "5 (18pt)", value: "large" },
      { text: "6 (24pt)", value: "x-large" },
      { text: "7 (36pt)", value: "xx-large" }
    ],
    commandName: "FontSize"
  };
  EditorToolsSettings2.fontName = {
    style: "font-family",
    defaultItem: { text: messages[keys2.fontName], value: "", localizationKey: keys2.fontName },
    items: [
      {
        text: "Arial",
        value: "Arial, Helvetica, sans-serif",
        style: { fontFamily: "Arial, Helvetica, sans-serif" }
      },
      {
        text: "Courier New",
        value: "'Courier New', Courier, monospace",
        style: { fontFamily: "'Courier New', Courier, monospace" }
      },
      {
        text: "Georgia",
        value: "Georgia, serif",
        style: { fontFamily: "Georgia, serif" }
      },
      {
        text: "Impact",
        value: "Impact, Charcoal, sans-serif",
        style: { fontFamily: "Impact, Charcoal, sans-serif" }
      },
      {
        text: "Lucida Console",
        value: "'Lucida Console', Monaco, monospace",
        style: { fontFamily: "'Lucida Console', Monaco, monospace" }
      },
      {
        text: "Tahoma",
        value: "Tahoma, Geneva, sans-serif",
        style: { fontFamily: "Tahoma, Geneva, sans-serif" }
      },
      {
        text: "Times New Roman",
        value: "'Times New Roman', Times,serif",
        style: { fontFamily: "'Times New Roman', Times,serif" }
      },
      {
        text: "Trebuchet MS",
        value: "'Trebuchet MS', Helvetica, sans-serif",
        style: { fontFamily: "'Trebuchet MS', Helvetica, sans-serif" }
      },
      {
        text: "Verdana",
        value: "Verdana, Geneva, sans-serif",
        style: { fontFamily: "Verdana, Geneva, sans-serif" }
      }
    ],
    commandName: "FontName"
  };
  EditorToolsSettings2.formatBlock = {
    defaultItem: { text: messages[keys2.format], value: "", localizationKey: keys2.format },
    items: [
      { text: "Paragraph", value: "p", style: { display: "block", marginLeft: 0 } },
      { text: "Heading 1", value: "h1", style: { display: "block", fontSize: "2em", marginLeft: 0, fontWeight: "bold" } },
      { text: "Heading 2", value: "h2", style: { display: "block", fontSize: "1.5em", marginLeft: 0, fontWeight: "bold" } },
      { text: "Heading 3", value: "h3", style: { display: "block", fontSize: "1.17em", marginLeft: 0, fontWeight: "bold" } },
      { text: "Heading 4", value: "h4", style: { display: "block", fontSize: "1em", marginLeft: 0, fontWeight: "bold" } },
      { text: "Heading 5", value: "h5", style: { display: "block", fontSize: "0.83em", marginLeft: 0, fontWeight: "bold" } },
      { text: "Heading 6", value: "h6", style: { display: "block", fontSize: "0.67em", marginLeft: 0, fontWeight: "bold" } }
    ],
    commandName: "FormatBlock"
  };
  EditorToolsSettings2.foreColor = {
    color: "color",
    colorPickerProps: {
      icon: "foreground-color",
      svgIcon: foregroundColorIcon,
      view: "palette",
      title: keys2.foregroundColor
    },
    commandName: "ForeColor"
  };
  EditorToolsSettings2.backColor = {
    color: "background-color",
    colorPickerProps: {
      icon: "droplet",
      svgIcon: dropletIcon,
      view: "palette",
      title: keys2.backgroundColor
    },
    commandName: "BackColor"
  };
  EditorToolsSettings2.alignLeft = {
    actions: __spreadArray2([], alignLeftRules, true),
    props: __assign6({ icon: "align-left", svgIcon: alignLeftIcon }, buttonCommonProps),
    messages: {
      title: keys2.alignLeft
    },
    commandName: "AlignLeft"
  };
  EditorToolsSettings2.alignRight = {
    actions: __spreadArray2([], alignRightRules, true),
    props: __assign6({ icon: "align-right", svgIcon: alignRightIcon }, buttonCommonProps),
    messages: {
      title: keys2.alignRight
    },
    commandName: "AlignRight"
  };
  EditorToolsSettings2.alignCenter = {
    actions: __spreadArray2([], alignCenterRules, true),
    props: __assign6({ icon: "align-center", svgIcon: alignCenterIcon }, buttonCommonProps),
    messages: {
      title: keys2.alignCenter
    },
    commandName: "AlignCenter"
  };
  EditorToolsSettings2.alignJustify = {
    actions: __spreadArray2([], alignJustifyRules, true),
    props: __assign6({ icon: "align-justify", svgIcon: alignJustifyIcon }, buttonCommonProps),
    messages: {
      title: keys2.alignJustify
    },
    commandName: "AlignJustify"
  };
  EditorToolsSettings2.alignRemove = {
    actions: __spreadArray2([], alignRemoveRules, true),
    props: __assign6({ icon: "align-remove", svgIcon: alignRemoveIcon }, buttonCommonProps),
    messages: {},
    commandName: "AlignRemove"
  };
  EditorToolsSettings2.indent = {
    actions: indentRules.nodes,
    listsTypes: listsTypes2,
    props: __assign6({ icon: "indent", svgIcon: indentIcon }, buttonCommonProps),
    messages: {
      title: keys2.indent
    },
    commandName: "Indent"
  };
  EditorToolsSettings2.outdent = {
    actions: outdentRules.nodes,
    listsTypes: listsTypes2,
    props: __assign6({ icon: "outdent", svgIcon: outdentIcon }, buttonCommonProps),
    messages: {
      title: keys2.outdent
    },
    commandName: "Outdent"
  };
  EditorToolsSettings2.orderedList = {
    listType: listsTypes2.orderedList,
    props: __assign6({ icon: "list-ordered", svgIcon: listOrderedIcon }, buttonCommonProps),
    messages: {
      title: keys2.orderedList
    },
    commandName: "OrderedList",
    types: __assign6({}, listsTypes2)
  };
  EditorToolsSettings2.bulletList = {
    listType: listsTypes2.bulletList,
    props: __assign6({ icon: "list-unordered", svgIcon: listUnorderedIcon }, buttonCommonProps),
    messages: {
      title: keys2.bulletList
    },
    commandName: "UnorderedList",
    types: __assign6({}, listsTypes2)
  };
})(EditorToolsSettings || (EditorToolsSettings = {}));

// node_modules/@progress/kendo-vue-editor/dist/es/dialogs/insertLink.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var InsertLinkDialogVue2 = {
  name: "KendoInsertLinkDialog",
  // @ts-ignore
  emits: {
    close: null
  },
  props: {
    view: Object,
    settings: Object,
    dir: String
  },
  data: function data() {
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings;
    var linkMark = view ? getMark(view.state, view.state.schema.marks[settings3.mark]) : false;
    return {
      hrefValue: linkMark && linkMark.attrs.href || void 0,
      titleValue: linkMark && linkMark.attrs.title || void 0,
      targetValue: linkMark && !!linkMark.attrs.target || void 0
    };
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  mounted: function mounted2() {
    this.href = getRef(this, "href");
    this.title = getRef(this, "title");
    this.target = getRef(this, "target");
    if (this.href) {
      this.href.focus();
    }
  },
  // @ts-ignore
  render: function render5(createElement) {
    var _this = this;
    var h = gh5 || createElement;
    var _a2 = this.$props, settings3 = _a2.settings, dir = _a2.dir;
    var localization = provideLocalizationService(this);
    var _b = settings3.messages, insertHyperlinkDialogTitle2 = _b.insertHyperlinkDialogTitle, insertHyperlinkAddress2 = _b.insertHyperlinkAddress, insertHyperlinkTitle2 = _b.insertHyperlinkTitle, insertHyperlinkNewWindow2 = _b.insertHyperlinkNewWindow, insertHyperlinkCancel2 = _b.insertHyperlinkCancel, insertHyperlinkInsert2 = _b.insertHyperlinkInsert;
    var checkboxLabel = localization.toLanguageString(insertHyperlinkNewWindow2, messages[insertHyperlinkNewWindow2]);
    var content = (
      // @ts-ignore function children
      h(Form, this.v3 ? function() {
        return [
          // @ts-ignore function children
          h(FormElement, {
            horizontal: true,
            attrs: _this.v3 ? void 0 : {
              horizontal: true
            }
          }, _this.v3 ? function() {
            return [
              // @ts-ignore function children
              h(FieldWrapper, _this.v3 ? function() {
                return [h("label", {
                  "for": "k-editor-link-url",
                  attrs: _this.v3 ? void 0 : {
                    "for": "k-editor-link-url"
                  },
                  "class": "k-form-label"
                }, [localization.toLanguageString(insertHyperlinkAddress2, messages[insertHyperlinkAddress2])]), h("div", {
                  "class": "k-form-field-wrap"
                }, [h(Input, {
                  type: "text",
                  attrs: _this.v3 ? void 0 : {
                    type: "text",
                    id: "k-editor-link-url",
                    value: _this.hrefValue
                  },
                  id: "k-editor-link-url",
                  ref: setRef(_this, "href"),
                  onInput: _this.hrefChange,
                  on: _this.v3 ? void 0 : {
                    "input": _this.hrefChange
                  },
                  value: _this.hrefValue
                })])];
              } : [h("label", {
                "for": "k-editor-link-url",
                attrs: _this.v3 ? void 0 : {
                  "for": "k-editor-link-url"
                },
                "class": "k-form-label"
              }, [localization.toLanguageString(insertHyperlinkAddress2, messages[insertHyperlinkAddress2])]), h("div", {
                "class": "k-form-field-wrap"
              }, [h(Input, {
                type: "text",
                attrs: _this.v3 ? void 0 : {
                  type: "text",
                  id: "k-editor-link-url",
                  value: _this.hrefValue
                },
                id: "k-editor-link-url",
                ref: setRef(_this, "href"),
                onInput: _this.hrefChange,
                on: _this.v3 ? void 0 : {
                  "input": _this.hrefChange
                },
                value: _this.hrefValue
              })])]),
              // @ts-ignore function children
              h(FieldWrapper, _this.v3 ? function() {
                return [h("label", {
                  "for": "k-editor-link-text",
                  attrs: _this.v3 ? void 0 : {
                    "for": "k-editor-link-text"
                  },
                  "class": "k-form-label"
                }, [localization.toLanguageString(insertHyperlinkTitle2, messages[insertHyperlinkTitle2])]), h("div", {
                  "class": "k-form-field-wrap"
                }, [h(Input, {
                  type: "text",
                  attrs: _this.v3 ? void 0 : {
                    type: "text",
                    id: "k-editor-link-text",
                    value: _this.titleValue
                  },
                  id: "k-editor-link-text",
                  ref: setRef(_this, "title"),
                  onInput: _this.titleChange,
                  on: _this.v3 ? void 0 : {
                    "input": _this.titleChange
                  },
                  value: _this.titleValue
                })])];
              } : [h("label", {
                "for": "k-editor-link-text",
                attrs: _this.v3 ? void 0 : {
                  "for": "k-editor-link-text"
                },
                "class": "k-form-label"
              }, [localization.toLanguageString(insertHyperlinkTitle2, messages[insertHyperlinkTitle2])]), h("div", {
                "class": "k-form-field-wrap"
              }, [h(Input, {
                type: "text",
                attrs: _this.v3 ? void 0 : {
                  type: "text",
                  id: "k-editor-link-text",
                  value: _this.titleValue
                },
                id: "k-editor-link-text",
                ref: setRef(_this, "title"),
                onInput: _this.titleChange,
                on: _this.v3 ? void 0 : {
                  "input": _this.titleChange
                },
                value: _this.titleValue
              })])]),
              settings3.linkTarget !== false && // @ts-ignore function children
              h(FieldWrapper, _this.v3 ? function() {
                return [h("div", {
                  "class": "k-form-label"
                }), h("div", {
                  "class": "k-form-field-wrap"
                }, [h(Checkbox, {
                  "class": "k-checkbox-wrap",
                  id: "k-editor-link-target",
                  attrs: _this.v3 ? void 0 : {
                    id: "k-editor-link-target",
                    label: checkboxLabel,
                    checked: _this.targetValue
                  },
                  ref: setRef(_this, "target"),
                  label: checkboxLabel,
                  onChange: _this.targetChange,
                  on: _this.v3 ? void 0 : {
                    "change": _this.targetChange
                  },
                  checked: _this.targetValue
                })])];
              } : [h("div", {
                "class": "k-form-label"
              }), h("div", {
                "class": "k-form-field-wrap"
              }, [h(Checkbox, {
                "class": "k-checkbox-wrap",
                id: "k-editor-link-target",
                attrs: _this.v3 ? void 0 : {
                  id: "k-editor-link-target",
                  label: checkboxLabel,
                  checked: _this.targetValue
                },
                ref: setRef(_this, "target"),
                label: checkboxLabel,
                onChange: _this.targetChange,
                on: _this.v3 ? void 0 : {
                  "change": _this.targetChange
                },
                checked: _this.targetValue
              })])])
            ];
          } : [h(FieldWrapper, _this.v3 ? function() {
            return [h("label", {
              "for": "k-editor-link-url",
              attrs: _this.v3 ? void 0 : {
                "for": "k-editor-link-url"
              },
              "class": "k-form-label"
            }, [localization.toLanguageString(insertHyperlinkAddress2, messages[insertHyperlinkAddress2])]), h("div", {
              "class": "k-form-field-wrap"
            }, [h(Input, {
              type: "text",
              attrs: _this.v3 ? void 0 : {
                type: "text",
                id: "k-editor-link-url",
                value: _this.hrefValue
              },
              id: "k-editor-link-url",
              ref: setRef(_this, "href"),
              onInput: _this.hrefChange,
              on: _this.v3 ? void 0 : {
                "input": _this.hrefChange
              },
              value: _this.hrefValue
            })])];
          } : [h("label", {
            "for": "k-editor-link-url",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-link-url"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertHyperlinkAddress2, messages[insertHyperlinkAddress2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-link-url",
              value: _this.hrefValue
            },
            id: "k-editor-link-url",
            ref: setRef(_this, "href"),
            onInput: _this.hrefChange,
            on: _this.v3 ? void 0 : {
              "input": _this.hrefChange
            },
            value: _this.hrefValue
          })])]), h(FieldWrapper, _this.v3 ? function() {
            return [h("label", {
              "for": "k-editor-link-text",
              attrs: _this.v3 ? void 0 : {
                "for": "k-editor-link-text"
              },
              "class": "k-form-label"
            }, [localization.toLanguageString(insertHyperlinkTitle2, messages[insertHyperlinkTitle2])]), h("div", {
              "class": "k-form-field-wrap"
            }, [h(Input, {
              type: "text",
              attrs: _this.v3 ? void 0 : {
                type: "text",
                id: "k-editor-link-text",
                value: _this.titleValue
              },
              id: "k-editor-link-text",
              ref: setRef(_this, "title"),
              onInput: _this.titleChange,
              on: _this.v3 ? void 0 : {
                "input": _this.titleChange
              },
              value: _this.titleValue
            })])];
          } : [h("label", {
            "for": "k-editor-link-text",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-link-text"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertHyperlinkTitle2, messages[insertHyperlinkTitle2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-link-text",
              value: _this.titleValue
            },
            id: "k-editor-link-text",
            ref: setRef(_this, "title"),
            onInput: _this.titleChange,
            on: _this.v3 ? void 0 : {
              "input": _this.titleChange
            },
            value: _this.titleValue
          })])]), settings3.linkTarget !== false && h(FieldWrapper, _this.v3 ? function() {
            return [h("div", {
              "class": "k-form-label"
            }), h("div", {
              "class": "k-form-field-wrap"
            }, [h(Checkbox, {
              "class": "k-checkbox-wrap",
              id: "k-editor-link-target",
              attrs: _this.v3 ? void 0 : {
                id: "k-editor-link-target",
                label: checkboxLabel,
                checked: _this.targetValue
              },
              ref: setRef(_this, "target"),
              label: checkboxLabel,
              onChange: _this.targetChange,
              on: _this.v3 ? void 0 : {
                "change": _this.targetChange
              },
              checked: _this.targetValue
            })])];
          } : [h("div", {
            "class": "k-form-label"
          }), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Checkbox, {
            "class": "k-checkbox-wrap",
            id: "k-editor-link-target",
            attrs: _this.v3 ? void 0 : {
              id: "k-editor-link-target",
              label: checkboxLabel,
              checked: _this.targetValue
            },
            ref: setRef(_this, "target"),
            label: checkboxLabel,
            onChange: _this.targetChange,
            on: _this.v3 ? void 0 : {
              "change": _this.targetChange
            },
            checked: _this.targetValue
          })])])])
        ];
      } : [h(FormElement, {
        horizontal: true,
        attrs: _this.v3 ? void 0 : {
          horizontal: true
        }
      }, _this.v3 ? function() {
        return [h(FieldWrapper, _this.v3 ? function() {
          return [h("label", {
            "for": "k-editor-link-url",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-link-url"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertHyperlinkAddress2, messages[insertHyperlinkAddress2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-link-url",
              value: _this.hrefValue
            },
            id: "k-editor-link-url",
            ref: setRef(_this, "href"),
            onInput: _this.hrefChange,
            on: _this.v3 ? void 0 : {
              "input": _this.hrefChange
            },
            value: _this.hrefValue
          })])];
        } : [h("label", {
          "for": "k-editor-link-url",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-link-url"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertHyperlinkAddress2, messages[insertHyperlinkAddress2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-link-url",
            value: _this.hrefValue
          },
          id: "k-editor-link-url",
          ref: setRef(_this, "href"),
          onInput: _this.hrefChange,
          on: _this.v3 ? void 0 : {
            "input": _this.hrefChange
          },
          value: _this.hrefValue
        })])]), h(FieldWrapper, _this.v3 ? function() {
          return [h("label", {
            "for": "k-editor-link-text",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-link-text"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertHyperlinkTitle2, messages[insertHyperlinkTitle2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-link-text",
              value: _this.titleValue
            },
            id: "k-editor-link-text",
            ref: setRef(_this, "title"),
            onInput: _this.titleChange,
            on: _this.v3 ? void 0 : {
              "input": _this.titleChange
            },
            value: _this.titleValue
          })])];
        } : [h("label", {
          "for": "k-editor-link-text",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-link-text"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertHyperlinkTitle2, messages[insertHyperlinkTitle2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-link-text",
            value: _this.titleValue
          },
          id: "k-editor-link-text",
          ref: setRef(_this, "title"),
          onInput: _this.titleChange,
          on: _this.v3 ? void 0 : {
            "input": _this.titleChange
          },
          value: _this.titleValue
        })])]), settings3.linkTarget !== false && h(FieldWrapper, _this.v3 ? function() {
          return [h("div", {
            "class": "k-form-label"
          }), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Checkbox, {
            "class": "k-checkbox-wrap",
            id: "k-editor-link-target",
            attrs: _this.v3 ? void 0 : {
              id: "k-editor-link-target",
              label: checkboxLabel,
              checked: _this.targetValue
            },
            ref: setRef(_this, "target"),
            label: checkboxLabel,
            onChange: _this.targetChange,
            on: _this.v3 ? void 0 : {
              "change": _this.targetChange
            },
            checked: _this.targetValue
          })])];
        } : [h("div", {
          "class": "k-form-label"
        }), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Checkbox, {
          "class": "k-checkbox-wrap",
          id: "k-editor-link-target",
          attrs: _this.v3 ? void 0 : {
            id: "k-editor-link-target",
            label: checkboxLabel,
            checked: _this.targetValue
          },
          ref: setRef(_this, "target"),
          label: checkboxLabel,
          onChange: _this.targetChange,
          on: _this.v3 ? void 0 : {
            "change": _this.targetChange
          },
          checked: _this.targetValue
        })])])];
      } : [h(FieldWrapper, _this.v3 ? function() {
        return [h("label", {
          "for": "k-editor-link-url",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-link-url"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertHyperlinkAddress2, messages[insertHyperlinkAddress2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-link-url",
            value: _this.hrefValue
          },
          id: "k-editor-link-url",
          ref: setRef(_this, "href"),
          onInput: _this.hrefChange,
          on: _this.v3 ? void 0 : {
            "input": _this.hrefChange
          },
          value: _this.hrefValue
        })])];
      } : [h("label", {
        "for": "k-editor-link-url",
        attrs: _this.v3 ? void 0 : {
          "for": "k-editor-link-url"
        },
        "class": "k-form-label"
      }, [localization.toLanguageString(insertHyperlinkAddress2, messages[insertHyperlinkAddress2])]), h("div", {
        "class": "k-form-field-wrap"
      }, [h(Input, {
        type: "text",
        attrs: _this.v3 ? void 0 : {
          type: "text",
          id: "k-editor-link-url",
          value: _this.hrefValue
        },
        id: "k-editor-link-url",
        ref: setRef(_this, "href"),
        onInput: _this.hrefChange,
        on: _this.v3 ? void 0 : {
          "input": _this.hrefChange
        },
        value: _this.hrefValue
      })])]), h(FieldWrapper, _this.v3 ? function() {
        return [h("label", {
          "for": "k-editor-link-text",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-link-text"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertHyperlinkTitle2, messages[insertHyperlinkTitle2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-link-text",
            value: _this.titleValue
          },
          id: "k-editor-link-text",
          ref: setRef(_this, "title"),
          onInput: _this.titleChange,
          on: _this.v3 ? void 0 : {
            "input": _this.titleChange
          },
          value: _this.titleValue
        })])];
      } : [h("label", {
        "for": "k-editor-link-text",
        attrs: _this.v3 ? void 0 : {
          "for": "k-editor-link-text"
        },
        "class": "k-form-label"
      }, [localization.toLanguageString(insertHyperlinkTitle2, messages[insertHyperlinkTitle2])]), h("div", {
        "class": "k-form-field-wrap"
      }, [h(Input, {
        type: "text",
        attrs: _this.v3 ? void 0 : {
          type: "text",
          id: "k-editor-link-text",
          value: _this.titleValue
        },
        id: "k-editor-link-text",
        ref: setRef(_this, "title"),
        onInput: _this.titleChange,
        on: _this.v3 ? void 0 : {
          "input": _this.titleChange
        },
        value: _this.titleValue
      })])]), settings3.linkTarget !== false && h(FieldWrapper, _this.v3 ? function() {
        return [h("div", {
          "class": "k-form-label"
        }), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Checkbox, {
          "class": "k-checkbox-wrap",
          id: "k-editor-link-target",
          attrs: _this.v3 ? void 0 : {
            id: "k-editor-link-target",
            label: checkboxLabel,
            checked: _this.targetValue
          },
          ref: setRef(_this, "target"),
          label: checkboxLabel,
          onChange: _this.targetChange,
          on: _this.v3 ? void 0 : {
            "change": _this.targetChange
          },
          checked: _this.targetValue
        })])];
      } : [h("div", {
        "class": "k-form-label"
      }), h("div", {
        "class": "k-form-field-wrap"
      }, [h(Checkbox, {
        "class": "k-checkbox-wrap",
        id: "k-editor-link-target",
        attrs: _this.v3 ? void 0 : {
          id: "k-editor-link-target",
          label: checkboxLabel,
          checked: _this.targetValue
        },
        ref: setRef(_this, "target"),
        label: checkboxLabel,
        onChange: _this.targetChange,
        on: _this.v3 ? void 0 : {
          "change": _this.targetChange
        },
        checked: _this.targetValue
      })])])])])
    );
    var dialog = (
      // @ts-ignore function children
      h(Window, {
        initialWidth: 450,
        attrs: this.v3 ? void 0 : {
          initialWidth: 450,
          initialHeight: 250,
          windowClass: "k-editor-window",
          title: localization.toLanguageString(insertHyperlinkDialogTitle2, messages[insertHyperlinkDialogTitle2]),
          dir,
          modal: true,
          minimizeButton: function minimizeButton() {
            return null;
          },
          maximizeButton: function maximizeButton() {
            return null;
          },
          resizable: false
        },
        initialHeight: 250,
        windowClass: "k-editor-window",
        title: localization.toLanguageString(insertHyperlinkDialogTitle2, messages[insertHyperlinkDialogTitle2]),
        onClose: this.onClose,
        on: this.v3 ? void 0 : {
          "close": this.onClose
        },
        dir,
        modal: true,
        minimizeButton: function minimizeButton() {
          return null;
        },
        maximizeButton: function maximizeButton() {
          return null;
        },
        resizable: false
      }, this.v3 ? function() {
        return [
          content,
          // @ts-ignore function children
          h(DialogActionsBar, _this.v3 ? function() {
            return [
              // @ts-ignore function children
              h(Button, {
                type: "button",
                attrs: _this.v3 ? void 0 : {
                  type: "button",
                  dir
                },
                onClick: _this.onClose,
                on: _this.v3 ? void 0 : {
                  "click": _this.onClose
                },
                dir,
                key: "cancel"
              }, _this.v3 ? function() {
                return [localization.toLanguageString(insertHyperlinkCancel2, messages[insertHyperlinkCancel2])];
              } : [localization.toLanguageString(insertHyperlinkCancel2, messages[insertHyperlinkCancel2])]),
              // @ts-ignore function children
              h(Button, {
                type: "button",
                attrs: _this.v3 ? void 0 : {
                  type: "button",
                  themeColor: "primary",
                  dir
                },
                onClick: _this.onInsert,
                on: _this.v3 ? void 0 : {
                  "click": _this.onInsert
                },
                themeColor: "primary",
                dir,
                key: "insert"
              }, _this.v3 ? function() {
                return [localization.toLanguageString(insertHyperlinkInsert2, messages[insertHyperlinkInsert2])];
              } : [localization.toLanguageString(insertHyperlinkInsert2, messages[insertHyperlinkInsert2])])
            ];
          } : [h(Button, {
            type: "button",
            attrs: _this.v3 ? void 0 : {
              type: "button",
              dir
            },
            onClick: _this.onClose,
            on: _this.v3 ? void 0 : {
              "click": _this.onClose
            },
            dir,
            key: "cancel"
          }, _this.v3 ? function() {
            return [localization.toLanguageString(insertHyperlinkCancel2, messages[insertHyperlinkCancel2])];
          } : [localization.toLanguageString(insertHyperlinkCancel2, messages[insertHyperlinkCancel2])]), h(Button, {
            type: "button",
            attrs: _this.v3 ? void 0 : {
              type: "button",
              themeColor: "primary",
              dir
            },
            onClick: _this.onInsert,
            on: _this.v3 ? void 0 : {
              "click": _this.onInsert
            },
            themeColor: "primary",
            dir,
            key: "insert"
          }, _this.v3 ? function() {
            return [localization.toLanguageString(insertHyperlinkInsert2, messages[insertHyperlinkInsert2])];
          } : [localization.toLanguageString(insertHyperlinkInsert2, messages[insertHyperlinkInsert2])])])
        ];
      } : [content, h(DialogActionsBar, _this.v3 ? function() {
        return [h(Button, {
          type: "button",
          attrs: _this.v3 ? void 0 : {
            type: "button",
            dir
          },
          onClick: _this.onClose,
          on: _this.v3 ? void 0 : {
            "click": _this.onClose
          },
          dir,
          key: "cancel"
        }, _this.v3 ? function() {
          return [localization.toLanguageString(insertHyperlinkCancel2, messages[insertHyperlinkCancel2])];
        } : [localization.toLanguageString(insertHyperlinkCancel2, messages[insertHyperlinkCancel2])]), h(Button, {
          type: "button",
          attrs: _this.v3 ? void 0 : {
            type: "button",
            themeColor: "primary",
            dir
          },
          onClick: _this.onInsert,
          on: _this.v3 ? void 0 : {
            "click": _this.onInsert
          },
          themeColor: "primary",
          dir,
          key: "insert"
        }, _this.v3 ? function() {
          return [localization.toLanguageString(insertHyperlinkInsert2, messages[insertHyperlinkInsert2])];
        } : [localization.toLanguageString(insertHyperlinkInsert2, messages[insertHyperlinkInsert2])])];
      } : [h(Button, {
        type: "button",
        attrs: _this.v3 ? void 0 : {
          type: "button",
          dir
        },
        onClick: _this.onClose,
        on: _this.v3 ? void 0 : {
          "click": _this.onClose
        },
        dir,
        key: "cancel"
      }, _this.v3 ? function() {
        return [localization.toLanguageString(insertHyperlinkCancel2, messages[insertHyperlinkCancel2])];
      } : [localization.toLanguageString(insertHyperlinkCancel2, messages[insertHyperlinkCancel2])]), h(Button, {
        type: "button",
        attrs: _this.v3 ? void 0 : {
          type: "button",
          themeColor: "primary",
          dir
        },
        onClick: _this.onInsert,
        on: _this.v3 ? void 0 : {
          "click": _this.onInsert
        },
        themeColor: "primary",
        dir,
        key: "insert"
      }, _this.v3 ? function() {
        return [localization.toLanguageString(insertHyperlinkInsert2, messages[insertHyperlinkInsert2])];
      } : [localization.toLanguageString(insertHyperlinkInsert2, messages[insertHyperlinkInsert2])])])])
    );
    return dialog;
  },
  methods: {
    hrefChange: function hrefChange(e) {
      this.hrefValue = e.value;
    },
    titleChange: function titleChange(e) {
      this.titleValue = e.value;
    },
    targetChange: function targetChange(e) {
      this.targetValue = e.value;
    },
    onClose: function onClose() {
      this.$props.view.focus();
      this.$emit("close");
    },
    onInsert: function onInsert() {
      var view = this.$props.view;
      var mark = this.$props.settings.mark;
      var attrs = {
        href: this.href ? this.hrefValue : void 0,
        title: this.title ? this.titleValue : void 0,
        target: this.target && this.targetValue ? "_blank" : void 0
      };
      applyLink({
        mark,
        attrs
      }, this.$props.settings.commandName)(view.state, view.dispatch);
      this.onClose();
    }
  }
};
var InsertLinkDialog = InsertLinkDialogVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/config/shortcuts.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var bold3 = EditorToolsSettings.bold;
var underline3 = EditorToolsSettings.underline;
var italic3 = EditorToolsSettings.italic;
var mac6 = typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;
var getShortcuts = function getShortcuts2(settings3) {
  var insertBr = chainCommands(exitCode, function(state, dispatch) {
    var hardBreak = settings3 && settings3.types && settings3.types.hardBreak || "hard_break";
    var br = state.schema.nodes[hardBreak];
    if (dispatch) {
      dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());
    }
    return true;
  });
  var listItem2 = settings3 && settings3.types && settings3.types.listItem || "list_item";
  var toolsSettings = settings3 && settings3.toolsSettings || {};
  var shortcutsSettings = __assign7(__assign7(__assign7(__assign7({
    "Mod-b": function ModB(state, dispatch) {
      return toggleInlineFormat(toolsSettings.bold || bold3)(state, dispatch);
    },
    "Mod-i": function ModI(state, dispatch) {
      return toggleInlineFormat(toolsSettings.italic || italic3)(state, dispatch);
    },
    "Mod-u": function ModU(state, dispatch) {
      return toggleInlineFormat(toolsSettings.underline || underline3)(state, dispatch);
    },
    "Mod-z": undo,
    "Shift-Mod-z": redo
  }, __assign7({}, !mac6 ? {
    "Mod-y": redo
  } : {})), {
    "Backspace": undoInputRule,
    "Mod-Enter": insertBr,
    "Shift-Enter": insertBr
  }), __assign7({}, mac6 ? {
    "Ctrl-Enter": insertBr
  } : {})), {
    "Enter": function Enter(state, dispatch) {
      return splitListItem(state.schema.nodes[listItem2])(state, dispatch);
    },
    "Tab": goToNextCell(1),
    "Shift-Tab": goToNextCell(-1)
  });
  return shortcutsSettings;
};

// node_modules/@progress/kendo-vue-editor/dist/es/utils/props-key.js
var editorPropsKey = new PluginKey("editor-props");

// node_modules/@progress/kendo-vue-editor/dist/es/utils/main.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var EditorUtils;
(function(EditorUtils2) {
  function alignBlocks2(view, actions, command3) {
    return Boolean(alignBlocks(actions, command3)(view.state, view.dispatch));
  }
  EditorUtils2.alignBlocks = alignBlocks2;
  function applyInlineStyle2(view, options, command3) {
    return applyInlineStyle(options, command3)(view.state, view.dispatch);
  }
  EditorUtils2.applyInlineStyle = applyInlineStyle2;
  function applyLink2(view, options, command3) {
    return applyLink(options, command3)(view.state, view.dispatch);
  }
  EditorUtils2.applyLink = applyLink2;
  function canIndentList(state, nodeType) {
    return canIndentAsListItem(state, nodeType);
  }
  EditorUtils2.canIndentList = canIndentList;
  function canInsert2(state, nodeType) {
    return canInsert(state, nodeType);
  }
  EditorUtils2.canInsert = canInsert2;
  function canOutdentList(state, listsTypes3) {
    return canOutdentAsListItem(state, { listsTypes: listsTypes3, nodes: [] });
  }
  EditorUtils2.canOutdentList = canOutdentList;
  function convertMsLists2(html) {
    return convertMsLists(html);
  }
  EditorUtils2.convertMsLists = convertMsLists2;
  function createDocument(schema, html, parseOptions) {
    return parseContent(trimWhitespace(html), schema, parseOptions !== void 0 ? parseOptions : { preserveWhitespace: "full" });
  }
  EditorUtils2.createDocument = createDocument;
  function createTable3(tableTypes, rows, columns) {
    return createTable(tableTypes, rows, columns);
  }
  EditorUtils2.createTable = createTable3;
  function formatBlockElements2(view, value2, commandName) {
    return formatBlockElements(value2, commandName)(view.state, view.dispatch);
  }
  EditorUtils2.formatBlockElements = formatBlockElements2;
  function getBlockFormats2(state) {
    return getBlockFormats(state);
  }
  EditorUtils2.getBlockFormats = getBlockFormats2;
  function getHtml2(state) {
    return getHtml(state);
  }
  EditorUtils2.getHtml = getHtml2;
  function getInlineStyles2(state, style2) {
    return getInlineStyles(state, style2);
  }
  EditorUtils2.getInlineStyles = getInlineStyles2;
  function getMark2(state, markType) {
    return getMark(state, markType);
  }
  EditorUtils2.getMark = getMark2;
  function hasMark2(state, options) {
    return hasMark(state, options);
  }
  EditorUtils2.hasMark = hasMark2;
  function hasNode2(state, nodeType) {
    return hasNode(state, nodeType);
  }
  EditorUtils2.hasNode = hasNode2;
  function indentBlocks2(view, actions, command3, dir) {
    return Boolean(indentBlocks(actions, command3, dir)(view.state, view.dispatch));
  }
  EditorUtils2.indentBlocks = indentBlocks2;
  function indentHtml2(content) {
    return indentHtml(content);
  }
  EditorUtils2.indentHtml = indentHtml2;
  function insertNode2(view, node, scrollIntoView) {
    insertNode(node, scrollIntoView)(view.state, view.dispatch);
  }
  EditorUtils2.insertNode = insertNode2;
  function isAligned2(state, actions) {
    return isAligned(state, actions);
  }
  EditorUtils2.isAligned = isAligned2;
  function isIndented2(state, actions, dir) {
    return isIndented(state, actions, dir);
  }
  EditorUtils2.isIndented = isIndented2;
  function removeComments2(html) {
    return removeComments(html);
  }
  EditorUtils2.removeComments = removeComments2;
  function removeTag2(html, tag) {
    return removeTag(html, tag);
  }
  EditorUtils2.removeTag = removeTag2;
  function pasteCleanup2(html, settings3) {
    return pasteCleanup(html, settings3);
  }
  EditorUtils2.pasteCleanup = pasteCleanup2;
  function sanitizeClassAttr2(attr) {
    sanitizeClassAttr(attr);
  }
  EditorUtils2.sanitizeClassAttr = sanitizeClassAttr2;
  function sanitizeStyleAttr2(attr) {
    sanitizeStyleAttr(attr);
  }
  EditorUtils2.sanitizeStyleAttr = sanitizeStyleAttr2;
  function removeAttribute2(attr) {
    removeAttribute(attr);
  }
  EditorUtils2.removeAttribute = removeAttribute2;
  function sanitize2(html) {
    return sanitize(html);
  }
  EditorUtils2.sanitize = sanitize2;
  function replaceImageSourcesFromRtf2(html, clipboardData) {
    return replaceImageSourcesFromRtf(html, clipboardData);
  }
  EditorUtils2.replaceImageSourcesFromRtf = replaceImageSourcesFromRtf2;
  function textHighlight2(key) {
    return textHighlight(key);
  }
  EditorUtils2.textHighlight = textHighlight2;
  function imageResizing2(options) {
    return imageResizing(options);
  }
  EditorUtils2.imageResizing = imageResizing2;
  function setHtml2(view, html, command3, parseOptions) {
    var trimmed = trimWhitespace(html);
    setHtml(trimmed, command3, parseOptions)(view.state, view.dispatch);
  }
  EditorUtils2.setHtml = setHtml2;
  function toggleInlineFormat2(view, options, transaction, markAttrs) {
    return toggleInlineFormat(options, transaction, markAttrs)(view.state, view.dispatch);
  }
  EditorUtils2.toggleInlineFormat = toggleInlineFormat2;
  function toggleList2(view, types, command3) {
    return toggleList(view.state, view.dispatch, view, types, command3);
  }
  EditorUtils2.toggleList = toggleList2;
  function getShortcuts3(settings3) {
    return getShortcuts(settings3);
  }
  EditorUtils2.getShortcuts = getShortcuts3;
  EditorUtils2.propsKey = editorPropsKey;
  EditorUtils2.imageResizeKey = imageResizeKey;
  EditorUtils2.marks = __assign8({}, marks);
  EditorUtils2.nodes = __assign8({}, nodes2);
})(EditorUtils || (EditorUtils = {}));

// node_modules/@progress/kendo-vue-editor/dist/es/utils/controlled-value.js
var setValue = function(view, value2) {
  var transaction = value2.tr || view.state.tr.setSelection(new AllSelection(view.state.doc)).replaceSelectionWith(value2.doc || EditorUtils.createDocument(view.state.schema, value2.html || "")).setMeta("commandName", "setHTML");
  view.updateState(view.state.apply(transaction));
};
var updateEditorValue = function(view, value2, prevValue, trOnChange, htmlOnChange) {
  if (typeof value2 === "string") {
    if (trOnChange && value2 === htmlOnChange) {
      setValue(view, { tr: trOnChange });
    } else if (value2 !== prevValue) {
      setValue(view, { html: value2 });
    }
  } else {
    if (trOnChange && value2.eq(trOnChange.doc)) {
      setValue(view, { tr: trOnChange });
    } else if (!view.state.doc.eq(value2)) {
      setValue(view, { doc: value2 });
    }
  }
};

// node_modules/@progress/kendo-vue-editor/dist/es/utils/browser-detection.js
var firefox = typeof window !== "undefined" && /Firefox/.test(window.navigator.userAgent);

// node_modules/@progress/kendo-vue-editor/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-editor",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1684213666,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-editor/dist/es/tools/align.js
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue7 = vue_runtime_esm_bundler_exports;
var gh6 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";
var alignRemove = EditorToolsSettings.alignRemove;
var AlignVue2 = {
  name: "KendoAlign",
  props: __assign9({
    view: Object,
    settings: {
      type: Object,
      default: function _default() {
        return {
          messages: {}
        };
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV37 ? void 0 : function() {
    var v3 = !!isV37;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render6(createElement) {
    var h = gh6 || createElement;
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings, other = __rest2(_a2, ["view", "settings"]);
    var state = view && view.state;
    var aligned2 = !!state && isAligned(state, settings3.actions);
    var localization = provideLocalizationService(this);
    var titleKey = settings3.messages.title;
    var buttonProps = __assign9(__assign9(__assign9({}, other), {
      selected: aligned2,
      togglable: true,
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign9({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick5() {
      var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings;
      var state = view && view.state;
      var aligned2 = !!state && isAligned(state, settings3.actions);
      var actions = aligned2 ? alignRemove.actions : settings3.actions;
      var commandName = aligned2 ? alignRemove.commandName : settings3.commandName;
      return view && alignBlocks(actions, commandName)(view.state, view.dispatch);
    },
    preventDefault: function preventDefault(e) {
      e.preventDefault();
    }
  }
};
var Align = AlignVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/indent.js
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
var __rest3 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue8 = vue_runtime_esm_bundler_exports;
var gh7 = allVue8.h;
var isV38 = allVue8.version && allVue8.version[0] === "3";
var IndentVue2 = {
  name: "KendoIndent",
  props: __assign10({
    view: Object,
    settings: {
      type: Object,
      default: function _default2() {
        return {
          messages: {}
        };
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV38 ? void 0 : function() {
    var v3 = !!isV38;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render7(createElement) {
    var h = gh7 || createElement;
    var _a2 = this.$props, view = _a2.view, render31 = _a2.render, settings3 = _a2.settings, other = __rest3(_a2, ["view", "render", "settings"]);
    var state = view && view.state;
    var nodes3 = state && state.schema.nodes;
    var listItem2 = nodes3 && nodes3[settings3.listsTypes.listItem];
    var actions = settings3.actions;
    var canIndented = !!state && (isIndented(state, actions, other.dir) || actions.some(function(a) {
      return nodes3[a.node] && hasNode(state, nodes3[a.node]);
    })) && !hasNode(state, listItem2);
    var canListIndent = !!state && canIndentAsListItem(state, listItem2);
    var canIndent = canIndented || canListIndent;
    var localization = provideLocalizationService(this);
    var titleKey = settings3.messages.title;
    var buttonProps = __assign10(__assign10(__assign10({}, other), {
      disabled: !canIndent,
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign10({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick6() {
      var state = this.view && this.view.state;
      var nodes3 = state && state.schema.nodes;
      var listItem2 = nodes3 && nodes3[this.settings.listsTypes.listItem];
      var actions = this.settings.actions;
      var canIndented = !!state && (isIndented(state, actions, this.dir) || actions.some(function(a) {
        return nodes3[a.node] && hasNode(state, nodes3[a.node]);
      })) && !hasNode(state, listItem2);
      var canListIndent = !!state && canIndentAsListItem(state, listItem2);
      if (this.view && canListIndent) {
        sinkListItem(listItem2)(this.view.state, this.view.dispatch);
      } else if (this.view && canIndented) {
        indentBlocks(actions, this.settings.commandName, this.dir)(this.view.state, this.view.dispatch);
      }
    },
    preventDefault: function preventDefault2(e) {
      e.preventDefault();
    }
  }
};
var Indent = IndentVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/lists.js
var __assign11 = function() {
  __assign11 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign11.apply(this, arguments);
};
var __rest4 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue9 = vue_runtime_esm_bundler_exports;
var gh8 = allVue9.h;
var isV39 = allVue9.version && allVue9.version[0] === "3";
var ListVue2 = {
  name: "KendoList",
  props: __assign11({
    view: Object,
    settings: {
      type: Object,
      default: function _default3() {
        return {
          messages: {}
        };
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV39 ? void 0 : function() {
    var v3 = !!isV39;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render8(createElement) {
    var h = gh8 || createElement;
    var _a2 = this.$props, view = _a2.view, render31 = _a2.render, settings3 = _a2.settings, other = __rest4(_a2, ["view", "render", "settings"]);
    var isActive = false;
    var localization = provideLocalizationService(this);
    var titleKey = settings3.messages.title;
    var types = settings3.types;
    var listType = settings3.listType;
    if (view) {
      var state = view.state;
      var nodes3 = state.schema.nodes;
      var hasOl = hasNode(state, nodes3[types.orderedList]), hasUl = hasNode(state, nodes3[types.bulletList]);
      if (listType === types.orderedList) {
        isActive = hasOl && !hasUl;
      } else {
        isActive = !hasOl && hasUl;
      }
    }
    var buttonProps = __assign11(__assign11(__assign11({}, other), {
      selected: isActive,
      togglable: true,
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign11({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick7() {
      var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings;
      var types = settings3.types;
      var listType = settings3.listType;
      if (this.view) {
        toggleList(view.state, view.dispatch, view, __assign11({
          listType
        }, types), settings3.commandName);
      }
    },
    preventDefault: function preventDefault3(e) {
      e.preventDefault();
    }
  }
};
var List = ListVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/outdent.js
var __assign12 = function() {
  __assign12 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign12.apply(this, arguments);
};
var __rest5 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue10 = vue_runtime_esm_bundler_exports;
var gh9 = allVue10.h;
var isV310 = allVue10.version && allVue10.version[0] === "3";
var OutdentVue2 = {
  name: "KendoOutdent",
  props: __assign12({
    view: Object,
    settings: {
      type: Object,
      default: function _default4() {
        return {
          messages: {}
        };
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV310 ? void 0 : function() {
    var v3 = !!isV310;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render9(createElement) {
    var h = gh9 || createElement;
    var _a2 = this.$props, view = _a2.view, render31 = _a2.render, settings3 = _a2.settings, other = __rest5(_a2, ["view", "render", "settings"]);
    var state = view && view.state;
    var indented = !!state && isIndented(state, settings3.actions, other.dir);
    var listItem2 = state && state.schema.nodes[settings3.listsTypes.listItem];
    var canListOutdent = !!state && canOutdentAsListItem(state, {
      nodes: settings3.actions,
      listsTypes: settings3.listsTypes
    });
    var canOutdent = indented || canListOutdent;
    var localization = provideLocalizationService(this);
    var titleKey = settings3.messages.title;
    var buttonProps = __assign12(__assign12(__assign12({}, other), {
      disabled: !canOutdent,
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign12({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick8() {
      var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings, dir = _a2.dir;
      var state = view && view.state;
      var indented = !!state && isIndented(state, settings3.actions, dir);
      var listItem2 = state && state.schema.nodes[settings3.listsTypes.listItem];
      var canListOutdent = !!state && canOutdentAsListItem(state, {
        nodes: settings3.actions,
        listsTypes: settings3.listsTypes
      });
      if (view && canListOutdent) {
        liftListItem(listItem2)(view.state, view.dispatch);
      } else if (view && indented) {
        indentBlocks(settings3.actions, settings3.commandName, dir)(view.state, view.dispatch);
      }
    },
    preventDefault: function preventDefault4(e) {
      e.preventDefault();
    }
  }
};
var Outdent = OutdentVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/inlineFormat.js
var __assign13 = function() {
  __assign13 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign13.apply(this, arguments);
};
var __rest6 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue11 = vue_runtime_esm_bundler_exports;
var gh10 = allVue11.h;
var isV311 = allVue11.version && allVue11.version[0] === "3";
var InlineFormatVue2 = {
  name: "KendoInlineFormat",
  props: __assign13({
    view: Object,
    settings: {
      type: Object,
      default: function _default5() {
        return {
          messages: {}
        };
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV311 ? void 0 : function() {
    var v3 = !!isV311;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render10(createElement) {
    var h = gh10 || createElement;
    var _a2 = this.$props, view = _a2.view, render31 = _a2.render, settings3 = _a2.settings, other = __rest6(_a2, ["view", "render", "settings"]);
    var state = view && view.state;
    var mark = settings3.mark, altMarks = settings3.altMarks, altStyle = settings3.altStyle;
    var options = {
      mark,
      altMarks,
      altStyle
    };
    var localization = provideLocalizationService(this);
    var titleKey = settings3.messages.title;
    var buttonProps = __assign13(__assign13(__assign13({}, other), {
      selected: !!state && hasMark(state, options),
      togglable: true,
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign13({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick9() {
      var state = this.view && this.view.state;
      var _a2 = this.settings, mark = _a2.mark, altMarks = _a2.altMarks, altStyle = _a2.altStyle;
      var options = {
        mark,
        altMarks,
        altStyle
      };
      return this.view && toggleInlineFormat(options, state && state.tr.setMeta("commandName", this.settings.commandName))(this.view.state, this.view.dispatch);
    },
    preventDefault: function preventDefault5(e) {
      e.preventDefault();
    }
  }
};
var InlineFormat = InlineFormatVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/utils.js
var userSelectNone = {
  userSelect: "none"
};
var formatString = function formatString2(input) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  args.forEach(function(value2, index) {
    input = input.replace("{" + index + "}", String(value2));
  });
  return input;
};

// node_modules/@progress/kendo-vue-editor/dist/es/tools/fontStyle.js
var __assign14 = function() {
  __assign14 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign14.apply(this, arguments);
};
var __rest7 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var __spreadArray3 = function(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
};
var allVue12 = vue_runtime_esm_bundler_exports;
var gh11 = allVue12.h;
var isV312 = allVue12.version && allVue12.version[0] === "3";
var FontNameVue2 = {
  name: "KendoFontName",
  props: __assign14({
    view: Object,
    settings: {
      type: Object,
      default: function _default6() {
        return {
          messages: {}
        };
      }
    }
  }, DropDownList.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV312 ? void 0 : function() {
    var v3 = !!isV312;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render11(createElement) {
    var h = gh11 || createElement;
    var _a2 = this.$props, view = _a2.view, render31 = _a2.render, dataItems = _a2.dataItems, settings3 = _a2.settings, defaultItemProps = _a2.defaultItem, other = __rest7(_a2, ["view", "render", "dataItems", "settings", "defaultItem"]);
    var style2 = settings3.style;
    var styles = view ? getInlineStyles(view.state, {
      name: style2,
      value: /^.+$/
    }) : [];
    var value2 = new Set(styles).size === 1 ? styles[0] : null;
    var items = dataItems || settings3.items;
    var defaultItem = defaultItemProps || settings3.defaultItem;
    var localization = provideLocalizationService(this);
    if (defaultItem && defaultItem.localizationKey) {
      defaultItem = __assign14({}, defaultItem);
      defaultItem.text = defaultItem.localizationKey ? localization.toLanguageString(defaultItem.localizationKey, messages[defaultItem.localizationKey]) : defaultItem.text;
    }
    var ddlProps = __assign14(__assign14(__assign14({}, other), {
      value: value2 ? items.find(function(i) {
        return i.value === value2;
      }) : value2,
      dataItems: items,
      defaultItem,
      itemRender: this.customItemRender,
      textField: "text",
      dataItemKey: "value",
      leftRightKeysNavigation: false,
      title: defaultItem.text
    }), settings3.props);
    var dropdown = h(DropDownList, __assign14({
      onChange: this.onChange,
      on: this.v3 ? void 0 : {
        "change": this.onChange
      },
      style: userSelectNone,
      attrs: this.v3 ? void 0 : ddlProps
    }, ddlProps));
    return dropdown;
  },
  methods: {
    customItemRender: function customItemRender(h, li, itemProps) {
      return itemProps.dataItem.style ? h("li", {
        class: itemProps.itemClass,
        onClick: itemProps.onClick,
        on: {
          click: itemProps.onClick
        }
      }, [h("span", {
        style: itemProps.dataItem.style
      }, __spreadArray3([], li.children, true))]) : li;
    },
    onChange: function onChange(e) {
      var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings;
      var style2 = settings3.style;
      var item = e.target.value;
      if (view) {
        applyInlineStyle({
          style: style2,
          value: item.value
        }, settings3.commandName)(view.state, view.dispatch);
        var event_1 = e.event;
        if (event_1 && event_1.type === "click") {
          view.focus();
        }
      }
    }
  }
};
var FontName = FontNameVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/formatBlock.js
var __assign15 = function() {
  __assign15 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign15.apply(this, arguments);
};
var __rest8 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var __spreadArray4 = function(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
};
var allVue13 = vue_runtime_esm_bundler_exports;
var gh12 = allVue13.h;
var isV313 = allVue13.version && allVue13.version[0] === "3";
var FormatBlockVue2 = {
  name: "KendoFormatBlock",
  props: __assign15({
    view: Object,
    settings: {
      type: Object,
      default: function _default7() {
        return {
          messages: {}
        };
      }
    }
  }, DropDownList.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV313 ? void 0 : function() {
    var v3 = !!isV313;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render12(createElement) {
    var h = gh12 || createElement;
    var _a2 = this.$props, view = _a2.view, render31 = _a2.render, dataItems = _a2.dataItems, settings3 = _a2.settings, defaultItemProps = _a2.defaultItem, other = __rest8(_a2, ["view", "render", "dataItems", "settings", "defaultItem"]);
    var items = dataItems || settings3.items;
    var state = view && view.state;
    var formats = state ? getBlockFormats(state) : [];
    var value2 = new Set(formats).size === 1 ? formats[0] : null;
    var defaultItem = defaultItemProps || settings3.defaultItem;
    var localization = provideLocalizationService(this);
    if (defaultItem && defaultItem.localizationKey) {
      defaultItem = __assign15({}, defaultItem);
      defaultItem.text = defaultItem.localizationKey ? localization.toLanguageString(defaultItem.localizationKey, messages[defaultItem.localizationKey]) : defaultItem.text;
    }
    var ddlProps = __assign15(__assign15(__assign15({}, other), {
      value: value2 ? items.find(function(i) {
        return i.value === value2;
      }) : value2,
      dataItems: items,
      defaultItem,
      itemRender: this.customItemRender,
      textField: "text",
      dataItemKey: "value",
      leftRightKeysNavigation: false,
      popupSettings: {
        width: "170px"
      },
      title: defaultItem.text
    }), settings3.props);
    var dropdown = h(DropDownList, __assign15({
      onChange: this.onChange,
      on: this.v3 ? void 0 : {
        "change": this.onChange
      },
      style: userSelectNone,
      attrs: this.v3 ? void 0 : ddlProps
    }, ddlProps));
    return dropdown;
  },
  methods: {
    customItemRender: function customItemRender2(h, li, itemProps) {
      return itemProps.dataItem.style ? h("li", {
        class: itemProps.itemClass,
        onClick: itemProps.onClick,
        on: {
          click: itemProps.onClick
        }
      }, [h("span", {
        style: itemProps.dataItem.style
      }, __spreadArray4([], li.children, true))]) : li;
    },
    onChange: function onChange2(e) {
      var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings;
      var item = e.target.value;
      if (view && formatBlockElements(item.value, settings3.commandName)(view.state, view.dispatch)) {
        var event_1 = e.event;
        if (event_1 && event_1.type === "click") {
          view.focus();
        }
      }
    }
  }
};
var FormatBlock = FormatBlockVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/proseMirrorTool.js
var __assign16 = function() {
  __assign16 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign16.apply(this, arguments);
};
var __rest9 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue14 = vue_runtime_esm_bundler_exports;
var gh13 = allVue14.h;
var isV314 = allVue14.version && allVue14.version[0] === "3";
var ProseMirrorVue2 = {
  name: "KendoProseMirror",
  props: __assign16({
    view: Object,
    settings: {
      type: Object,
      default: function _default8() {
        return {
          messages: {}
        };
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  computed: {
    command: function command() {
      return this.settings.command || noop;
    }
  },
  // @ts-ignore
  setup: !isV314 ? void 0 : function() {
    var v3 = !!isV314;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render13(createElement) {
    var h = gh13 || createElement;
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings, other = __rest9(_a2, ["view", "settings"]);
    var localization = provideLocalizationService(this);
    var titleKey = settings3.messages.title;
    var state = view && view.state;
    var disabled = state ? !this.command(state) : false;
    var buttonProps = __assign16(__assign16(__assign16({}, other), {
      disabled,
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign16({
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick10() {
      var _this = this;
      if (this.view) {
        this.command(this.view.state, function(tr) {
          return _this.view.dispatch(tr.setMeta("commandName", _this.settings.commandName));
        });
      }
    }
  }
};
var ProseMirror = ProseMirrorVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/insertLink.js
var __assign17 = function() {
  __assign17 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign17.apply(this, arguments);
};
var __rest10 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue15 = vue_runtime_esm_bundler_exports;
var gh14 = allVue15.h;
var isV315 = allVue15.version && allVue15.version[0] === "3";
var LinkToolVue2 = {
  name: "KendoLinkTool",
  props: __assign17({
    view: Object,
    settings: {
      type: Object,
      default: function _default9() {
        return {
          messages: {}
        };
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data2() {
    return {
      openedDialog: false
    };
  },
  // @ts-ignore
  setup: !isV315 ? void 0 : function() {
    var v3 = !!isV315;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render14(createElement) {
    var h = gh14 || createElement;
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings, other = __rest10(_a2, ["view", "settings"]);
    var state = view && view.state;
    var collapsed = state ? state.selection.empty : true;
    var linkMark = state && getMark(state, state.schema.marks[settings3.mark]);
    var localization = provideLocalizationService(this);
    var insertHyperlink2 = settings3.messages.insertHyperlink;
    var buttonProps = __assign17(__assign17(__assign17({}, other), {
      key: "link",
      disabled: collapsed && !linkMark,
      title: localization.toLanguageString(insertHyperlink2, messages[insertHyperlink2])
    }), settings3.props);
    var button = h(Button, __assign17({
      onClick: this.toggleDialog,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.toggleDialog,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    var rendering = [button, this.openedDialog && view && // @ts-ignore 
    h(InsertLinkDialog, {
      key: "insertLinkDialog",
      settings: settings3,
      attrs: this.v3 ? void 0 : {
        settings: settings3,
        dir: this.dir,
        view
      },
      dir: this.dir,
      view,
      onClose: this.toggleDialog,
      on: this.v3 ? void 0 : {
        "close": this.toggleDialog
      }
    }) || null];
    return h("span", [rendering]);
  },
  methods: {
    toggleDialog: function toggleDialog() {
      this.openedDialog = !this.openedDialog;
    },
    preventDefault: function preventDefault6(e) {
      e.preventDefault();
    }
  }
};
var LinkTool = LinkToolVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/unlink.js
var __assign18 = function() {
  __assign18 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign18.apply(this, arguments);
};
var __rest11 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue16 = vue_runtime_esm_bundler_exports;
var gh15 = allVue16.h;
var isV316 = allVue16.version && allVue16.version[0] === "3";
var UnlinkVue2 = {
  name: "KendoUnlink",
  props: __assign18({
    view: Object,
    settings: {
      type: Object,
      default: function _default10() {
        return {
          messages: {}
        };
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV316 ? void 0 : function() {
    var v3 = !!isV316;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render15(createElement) {
    var h = gh15 || createElement;
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings, other = __rest11(_a2, ["view", "settings"]);
    var options = {
      mark: settings3.mark
    };
    var hasLink = view ? hasMark(view.state, options) : false;
    var localization = provideLocalizationService(this);
    var titleKey = settings3.messages.title;
    var buttonProps = __assign18(__assign18(__assign18({}, other), {
      disabled: !hasLink,
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign18({
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick11() {
      var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings;
      var options = {
        mark: settings3.mark
      };
      if (view) {
        removeLink(options, view.state.tr.setMeta("commandName", settings3.commandName))(view.state, view.dispatch);
      }
    }
  }
};
var Unlink = UnlinkVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/cleanFormatting.js
var __assign19 = function() {
  __assign19 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign19.apply(this, arguments);
};
var __rest12 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue17 = vue_runtime_esm_bundler_exports;
var gh16 = allVue17.h;
var isV317 = allVue17.version && allVue17.version[0] === "3";
var cleanFormatting3 = EditorToolsSettings.cleanFormatting;
var command2 = cleanFormatting();
var CleanFormattingVue2 = {
  name: "KendoCleanFormatting",
  props: __assign19({
    view: Object,
    settings: {
      type: Object,
      default: function _default11() {
        return cleanFormatting3;
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV317 ? void 0 : function() {
    var v3 = !!isV317;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render16(createElement) {
    var h = gh16 || createElement;
    var _a2 = this.$props, view = _a2.view, render31 = _a2.render, settings3 = _a2.settings, other = __rest12(_a2, ["view", "render", "settings"]);
    var titleKey = settings3.messages.title;
    var localization = provideLocalizationService(this);
    var buttonProps = __assign19(__assign19(__assign19({}, other), {
      disabled: !view || !command2(view.state),
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign19({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick12() {
      var _this = this;
      if (this.view) {
        command2(this.view.state, function(tr) {
          tr.setMeta("commandName", _this.settings.commandName);
          _this.view.dispatch(tr);
        });
      }
    },
    preventDefault: function preventDefault7(e) {
      e.preventDefault();
    }
  }
};
var CleanFormatting = CleanFormattingVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/selectAll.js
var __assign20 = function() {
  __assign20 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign20.apply(this, arguments);
};
var __rest13 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue18 = vue_runtime_esm_bundler_exports;
var gh17 = allVue18.h;
var isV318 = allVue18.version && allVue18.version[0] === "3";
var selectAll3 = EditorToolsSettings.selectAll;
var SelectAllVue2 = {
  name: "KendoSelectAll",
  props: __assign20({
    view: Object,
    settings: Object
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV318 ? void 0 : function() {
    var v3 = !!isV318;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render17(createElement) {
    var h = gh17 || createElement;
    var _a2 = this.$props, view = _a2.view, _b = _a2.settings, settings3 = _b === void 0 ? selectAll3 : _b, other = __rest13(_a2, ["view", "settings"]);
    var titleKey = settings3.messages.title;
    var localization = provideLocalizationService(this);
    var buttonProps = __assign20(__assign20(__assign20({}, other), {
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign20({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick13() {
      if (this.view) {
        selectAll(this.view.state, this.view.dispatch);
        this.view.focus();
      }
    },
    preventDefault: function preventDefault8(e) {
      e.preventDefault();
    }
  }
};
var SelectAll = SelectAllVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/dialogs/insertImage.js
var allVue19 = vue_runtime_esm_bundler_exports;
var gh18 = allVue19.h;
var isV319 = allVue19.version && allVue19.version[0] === "3";
var InsertImageDialogVue2 = {
  name: "KendoInsertImageDialog",
  // @ts-ignore
  emits: {
    close: null
  },
  props: {
    view: Object,
    settings: Object,
    dir: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data3() {
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings;
    var state = view && view.state;
    var attrs = {};
    if (state && state.selection instanceof NodeSelection && state.selection.node.type === state.schema.nodes[settings3.node]) {
      attrs = state.selection.node.attrs;
    }
    return {
      srcValue: attrs.src,
      altValue: attrs.alt,
      titleValue: attrs.title,
      widthValue: attrs.width,
      heightValue: attrs.height
    };
  },
  mounted: function mounted3() {
    this.src = getRef(this, "src");
    this.altText = getRef(this, "altText");
    this.title = getRef(this, "title");
    this.width = getRef(this, "width");
    this.height = getRef(this, "height");
    if (this.src) {
      this.src.focus();
    }
  },
  // @ts-ignore
  setup: !isV319 ? void 0 : function() {
    var v3 = !!isV319;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render18(createElement) {
    var _this = this;
    var h = gh18 || createElement;
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings, dir = _a2.dir;
    var _b = settings3.messages, insertImageDialogTitle2 = _b.insertImageDialogTitle, insertImageAddress2 = _b.insertImageAddress, insertImageTitle2 = _b.insertImageTitle, insertImageAltText2 = _b.insertImageAltText, insertImageWidth2 = _b.insertImageWidth, insertImageHeight2 = _b.insertImageHeight, insertImageCancel2 = _b.insertImageCancel, insertImageInsert2 = _b.insertImageInsert;
    var localization = provideLocalizationService(this);
    var state = view && view.state;
    var attrs = {};
    if (state && state.selection instanceof NodeSelection && state.selection.node.type === state.schema.nodes[settings3.node]) {
      attrs = state.selection.node.attrs;
    }
    var content = (
      // @ts-ignore function children
      h(Form, this.v3 ? function() {
        return [
          // @ts-ignore function children
          h(FormElement, {
            horizontal: true,
            attrs: _this.v3 ? void 0 : {
              horizontal: true
            }
          }, _this.v3 ? function() {
            return [
              // @ts-ignore function children
              h(FieldWrapper, _this.v3 ? function() {
                return [h("label", {
                  "for": "k-editor-image-url",
                  attrs: _this.v3 ? void 0 : {
                    "for": "k-editor-image-url"
                  },
                  "class": "k-form-label"
                }, [localization.toLanguageString(insertImageAddress2, messages[insertImageAddress2])]), h("div", {
                  "class": "k-form-field-wrap"
                }, [h(Input, {
                  type: "text",
                  attrs: _this.v3 ? void 0 : {
                    type: "text",
                    id: "k-editor-image-url",
                    value: _this.srcValue
                  },
                  id: "k-editor-image-url",
                  value: _this.srcValue,
                  onInput: _this.handleSrcInput,
                  on: _this.v3 ? void 0 : {
                    "input": _this.handleSrcInput
                  },
                  ref: setRef(_this, "src")
                })])];
              } : [h("label", {
                "for": "k-editor-image-url",
                attrs: _this.v3 ? void 0 : {
                  "for": "k-editor-image-url"
                },
                "class": "k-form-label"
              }, [localization.toLanguageString(insertImageAddress2, messages[insertImageAddress2])]), h("div", {
                "class": "k-form-field-wrap"
              }, [h(Input, {
                type: "text",
                attrs: _this.v3 ? void 0 : {
                  type: "text",
                  id: "k-editor-image-url",
                  value: _this.srcValue
                },
                id: "k-editor-image-url",
                value: _this.srcValue,
                onInput: _this.handleSrcInput,
                on: _this.v3 ? void 0 : {
                  "input": _this.handleSrcInput
                },
                ref: setRef(_this, "src")
              })])]),
              // @ts-ignore function children
              h(FieldWrapper, _this.v3 ? function() {
                return [h("label", {
                  "for": "k-editor-image-url",
                  attrs: _this.v3 ? void 0 : {
                    "for": "k-editor-image-url"
                  },
                  "class": "k-form-label"
                }, [localization.toLanguageString(insertImageAltText2, messages[insertImageAltText2])]), h("div", {
                  "class": "k-form-field-wrap"
                }, [h(Input, {
                  type: "text",
                  attrs: _this.v3 ? void 0 : {
                    type: "text",
                    id: "k-editor-image-alt",
                    value: _this.altValue
                  },
                  id: "k-editor-image-alt",
                  value: _this.altValue,
                  onInput: _this.handleAltInput,
                  on: _this.v3 ? void 0 : {
                    "input": _this.handleAltInput
                  },
                  ref: setRef(_this, "altText")
                })])];
              } : [h("label", {
                "for": "k-editor-image-url",
                attrs: _this.v3 ? void 0 : {
                  "for": "k-editor-image-url"
                },
                "class": "k-form-label"
              }, [localization.toLanguageString(insertImageAltText2, messages[insertImageAltText2])]), h("div", {
                "class": "k-form-field-wrap"
              }, [h(Input, {
                type: "text",
                attrs: _this.v3 ? void 0 : {
                  type: "text",
                  id: "k-editor-image-alt",
                  value: _this.altValue
                },
                id: "k-editor-image-alt",
                value: _this.altValue,
                onInput: _this.handleAltInput,
                on: _this.v3 ? void 0 : {
                  "input": _this.handleAltInput
                },
                ref: setRef(_this, "altText")
              })])]),
              // @ts-ignore function children
              h(FieldWrapper, _this.v3 ? function() {
                return [h("label", {
                  htmlFor: "k-editor-image-title",
                  attrs: _this.v3 ? void 0 : {
                    htmlFor: "k-editor-image-title"
                  },
                  "class": "k-form-label"
                }, [localization.toLanguageString(insertImageTitle2, messages[insertImageTitle2])]), h("div", {
                  "class": "k-form-field-wrap"
                }, [h(Input, {
                  type: "text",
                  attrs: _this.v3 ? void 0 : {
                    type: "text",
                    id: "k-editor-image-title",
                    value: _this.titleValue
                  },
                  id: "k-editor-image-title",
                  value: _this.titleValue,
                  onInput: _this.handleTitleInput,
                  on: _this.v3 ? void 0 : {
                    "input": _this.handleTitleInput
                  },
                  ref: setRef(_this, "title")
                })])];
              } : [h("label", {
                htmlFor: "k-editor-image-title",
                attrs: _this.v3 ? void 0 : {
                  htmlFor: "k-editor-image-title"
                },
                "class": "k-form-label"
              }, [localization.toLanguageString(insertImageTitle2, messages[insertImageTitle2])]), h("div", {
                "class": "k-form-field-wrap"
              }, [h(Input, {
                type: "text",
                attrs: _this.v3 ? void 0 : {
                  type: "text",
                  id: "k-editor-image-title",
                  value: _this.titleValue
                },
                id: "k-editor-image-title",
                value: _this.titleValue,
                onInput: _this.handleTitleInput,
                on: _this.v3 ? void 0 : {
                  "input": _this.handleTitleInput
                },
                ref: setRef(_this, "title")
              })])]),
              // @ts-ignore function children
              h(FieldWrapper, _this.v3 ? function() {
                return [h("label", {
                  "for": "k-editor-image-width",
                  attrs: _this.v3 ? void 0 : {
                    "for": "k-editor-image-width"
                  },
                  "class": "k-form-label"
                }, [localization.toLanguageString(insertImageWidth2, messages[insertImageWidth2])]), h("div", {
                  "class": "k-form-field-wrap"
                }, [h(Input, {
                  type: "text",
                  attrs: _this.v3 ? void 0 : {
                    type: "text",
                    id: "k-editor-image-width",
                    value: _this.widthValue
                  },
                  id: "k-editor-image-width",
                  value: _this.widthValue,
                  onInput: _this.handleWidthInput,
                  on: _this.v3 ? void 0 : {
                    "input": _this.handleWidthInput
                  },
                  ref: setRef(_this, "width")
                })])];
              } : [h("label", {
                "for": "k-editor-image-width",
                attrs: _this.v3 ? void 0 : {
                  "for": "k-editor-image-width"
                },
                "class": "k-form-label"
              }, [localization.toLanguageString(insertImageWidth2, messages[insertImageWidth2])]), h("div", {
                "class": "k-form-field-wrap"
              }, [h(Input, {
                type: "text",
                attrs: _this.v3 ? void 0 : {
                  type: "text",
                  id: "k-editor-image-width",
                  value: _this.widthValue
                },
                id: "k-editor-image-width",
                value: _this.widthValue,
                onInput: _this.handleWidthInput,
                on: _this.v3 ? void 0 : {
                  "input": _this.handleWidthInput
                },
                ref: setRef(_this, "width")
              })])]),
              // @ts-ignore function children
              h(FieldWrapper, _this.v3 ? function() {
                return [h("label", {
                  htmlFor: "k-editor-image-height",
                  attrs: _this.v3 ? void 0 : {
                    htmlFor: "k-editor-image-height"
                  },
                  "class": "k-form-label"
                }, [localization.toLanguageString(insertImageHeight2, messages[insertImageHeight2])]), h("div", {
                  "class": "k-form-field-wrap"
                }, [h(Input, {
                  id: "k-editor-image-height",
                  attrs: _this.v3 ? void 0 : {
                    id: "k-editor-image-height",
                    value: _this.heightValue
                  },
                  value: _this.heightValue,
                  onInput: _this.handleHeightInput,
                  on: _this.v3 ? void 0 : {
                    "input": _this.handleHeightInput
                  },
                  ref: setRef(_this, "height")
                })])];
              } : [h("label", {
                htmlFor: "k-editor-image-height",
                attrs: _this.v3 ? void 0 : {
                  htmlFor: "k-editor-image-height"
                },
                "class": "k-form-label"
              }, [localization.toLanguageString(insertImageHeight2, messages[insertImageHeight2])]), h("div", {
                "class": "k-form-field-wrap"
              }, [h(Input, {
                id: "k-editor-image-height",
                attrs: _this.v3 ? void 0 : {
                  id: "k-editor-image-height",
                  value: _this.heightValue
                },
                value: _this.heightValue,
                onInput: _this.handleHeightInput,
                on: _this.v3 ? void 0 : {
                  "input": _this.handleHeightInput
                },
                ref: setRef(_this, "height")
              })])])
            ];
          } : [h(FieldWrapper, _this.v3 ? function() {
            return [h("label", {
              "for": "k-editor-image-url",
              attrs: _this.v3 ? void 0 : {
                "for": "k-editor-image-url"
              },
              "class": "k-form-label"
            }, [localization.toLanguageString(insertImageAddress2, messages[insertImageAddress2])]), h("div", {
              "class": "k-form-field-wrap"
            }, [h(Input, {
              type: "text",
              attrs: _this.v3 ? void 0 : {
                type: "text",
                id: "k-editor-image-url",
                value: _this.srcValue
              },
              id: "k-editor-image-url",
              value: _this.srcValue,
              onInput: _this.handleSrcInput,
              on: _this.v3 ? void 0 : {
                "input": _this.handleSrcInput
              },
              ref: setRef(_this, "src")
            })])];
          } : [h("label", {
            "for": "k-editor-image-url",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-image-url"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageAddress2, messages[insertImageAddress2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-image-url",
              value: _this.srcValue
            },
            id: "k-editor-image-url",
            value: _this.srcValue,
            onInput: _this.handleSrcInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleSrcInput
            },
            ref: setRef(_this, "src")
          })])]), h(FieldWrapper, _this.v3 ? function() {
            return [h("label", {
              "for": "k-editor-image-url",
              attrs: _this.v3 ? void 0 : {
                "for": "k-editor-image-url"
              },
              "class": "k-form-label"
            }, [localization.toLanguageString(insertImageAltText2, messages[insertImageAltText2])]), h("div", {
              "class": "k-form-field-wrap"
            }, [h(Input, {
              type: "text",
              attrs: _this.v3 ? void 0 : {
                type: "text",
                id: "k-editor-image-alt",
                value: _this.altValue
              },
              id: "k-editor-image-alt",
              value: _this.altValue,
              onInput: _this.handleAltInput,
              on: _this.v3 ? void 0 : {
                "input": _this.handleAltInput
              },
              ref: setRef(_this, "altText")
            })])];
          } : [h("label", {
            "for": "k-editor-image-url",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-image-url"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageAltText2, messages[insertImageAltText2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-image-alt",
              value: _this.altValue
            },
            id: "k-editor-image-alt",
            value: _this.altValue,
            onInput: _this.handleAltInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleAltInput
            },
            ref: setRef(_this, "altText")
          })])]), h(FieldWrapper, _this.v3 ? function() {
            return [h("label", {
              htmlFor: "k-editor-image-title",
              attrs: _this.v3 ? void 0 : {
                htmlFor: "k-editor-image-title"
              },
              "class": "k-form-label"
            }, [localization.toLanguageString(insertImageTitle2, messages[insertImageTitle2])]), h("div", {
              "class": "k-form-field-wrap"
            }, [h(Input, {
              type: "text",
              attrs: _this.v3 ? void 0 : {
                type: "text",
                id: "k-editor-image-title",
                value: _this.titleValue
              },
              id: "k-editor-image-title",
              value: _this.titleValue,
              onInput: _this.handleTitleInput,
              on: _this.v3 ? void 0 : {
                "input": _this.handleTitleInput
              },
              ref: setRef(_this, "title")
            })])];
          } : [h("label", {
            htmlFor: "k-editor-image-title",
            attrs: _this.v3 ? void 0 : {
              htmlFor: "k-editor-image-title"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageTitle2, messages[insertImageTitle2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-image-title",
              value: _this.titleValue
            },
            id: "k-editor-image-title",
            value: _this.titleValue,
            onInput: _this.handleTitleInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleTitleInput
            },
            ref: setRef(_this, "title")
          })])]), h(FieldWrapper, _this.v3 ? function() {
            return [h("label", {
              "for": "k-editor-image-width",
              attrs: _this.v3 ? void 0 : {
                "for": "k-editor-image-width"
              },
              "class": "k-form-label"
            }, [localization.toLanguageString(insertImageWidth2, messages[insertImageWidth2])]), h("div", {
              "class": "k-form-field-wrap"
            }, [h(Input, {
              type: "text",
              attrs: _this.v3 ? void 0 : {
                type: "text",
                id: "k-editor-image-width",
                value: _this.widthValue
              },
              id: "k-editor-image-width",
              value: _this.widthValue,
              onInput: _this.handleWidthInput,
              on: _this.v3 ? void 0 : {
                "input": _this.handleWidthInput
              },
              ref: setRef(_this, "width")
            })])];
          } : [h("label", {
            "for": "k-editor-image-width",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-image-width"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageWidth2, messages[insertImageWidth2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-image-width",
              value: _this.widthValue
            },
            id: "k-editor-image-width",
            value: _this.widthValue,
            onInput: _this.handleWidthInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleWidthInput
            },
            ref: setRef(_this, "width")
          })])]), h(FieldWrapper, _this.v3 ? function() {
            return [h("label", {
              htmlFor: "k-editor-image-height",
              attrs: _this.v3 ? void 0 : {
                htmlFor: "k-editor-image-height"
              },
              "class": "k-form-label"
            }, [localization.toLanguageString(insertImageHeight2, messages[insertImageHeight2])]), h("div", {
              "class": "k-form-field-wrap"
            }, [h(Input, {
              id: "k-editor-image-height",
              attrs: _this.v3 ? void 0 : {
                id: "k-editor-image-height",
                value: _this.heightValue
              },
              value: _this.heightValue,
              onInput: _this.handleHeightInput,
              on: _this.v3 ? void 0 : {
                "input": _this.handleHeightInput
              },
              ref: setRef(_this, "height")
            })])];
          } : [h("label", {
            htmlFor: "k-editor-image-height",
            attrs: _this.v3 ? void 0 : {
              htmlFor: "k-editor-image-height"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageHeight2, messages[insertImageHeight2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            id: "k-editor-image-height",
            attrs: _this.v3 ? void 0 : {
              id: "k-editor-image-height",
              value: _this.heightValue
            },
            value: _this.heightValue,
            onInput: _this.handleHeightInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleHeightInput
            },
            ref: setRef(_this, "height")
          })])])])
        ];
      } : [h(FormElement, {
        horizontal: true,
        attrs: _this.v3 ? void 0 : {
          horizontal: true
        }
      }, _this.v3 ? function() {
        return [h(FieldWrapper, _this.v3 ? function() {
          return [h("label", {
            "for": "k-editor-image-url",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-image-url"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageAddress2, messages[insertImageAddress2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-image-url",
              value: _this.srcValue
            },
            id: "k-editor-image-url",
            value: _this.srcValue,
            onInput: _this.handleSrcInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleSrcInput
            },
            ref: setRef(_this, "src")
          })])];
        } : [h("label", {
          "for": "k-editor-image-url",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-image-url"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageAddress2, messages[insertImageAddress2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-image-url",
            value: _this.srcValue
          },
          id: "k-editor-image-url",
          value: _this.srcValue,
          onInput: _this.handleSrcInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleSrcInput
          },
          ref: setRef(_this, "src")
        })])]), h(FieldWrapper, _this.v3 ? function() {
          return [h("label", {
            "for": "k-editor-image-url",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-image-url"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageAltText2, messages[insertImageAltText2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-image-alt",
              value: _this.altValue
            },
            id: "k-editor-image-alt",
            value: _this.altValue,
            onInput: _this.handleAltInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleAltInput
            },
            ref: setRef(_this, "altText")
          })])];
        } : [h("label", {
          "for": "k-editor-image-url",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-image-url"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageAltText2, messages[insertImageAltText2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-image-alt",
            value: _this.altValue
          },
          id: "k-editor-image-alt",
          value: _this.altValue,
          onInput: _this.handleAltInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleAltInput
          },
          ref: setRef(_this, "altText")
        })])]), h(FieldWrapper, _this.v3 ? function() {
          return [h("label", {
            htmlFor: "k-editor-image-title",
            attrs: _this.v3 ? void 0 : {
              htmlFor: "k-editor-image-title"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageTitle2, messages[insertImageTitle2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-image-title",
              value: _this.titleValue
            },
            id: "k-editor-image-title",
            value: _this.titleValue,
            onInput: _this.handleTitleInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleTitleInput
            },
            ref: setRef(_this, "title")
          })])];
        } : [h("label", {
          htmlFor: "k-editor-image-title",
          attrs: _this.v3 ? void 0 : {
            htmlFor: "k-editor-image-title"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageTitle2, messages[insertImageTitle2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-image-title",
            value: _this.titleValue
          },
          id: "k-editor-image-title",
          value: _this.titleValue,
          onInput: _this.handleTitleInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleTitleInput
          },
          ref: setRef(_this, "title")
        })])]), h(FieldWrapper, _this.v3 ? function() {
          return [h("label", {
            "for": "k-editor-image-width",
            attrs: _this.v3 ? void 0 : {
              "for": "k-editor-image-width"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageWidth2, messages[insertImageWidth2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            type: "text",
            attrs: _this.v3 ? void 0 : {
              type: "text",
              id: "k-editor-image-width",
              value: _this.widthValue
            },
            id: "k-editor-image-width",
            value: _this.widthValue,
            onInput: _this.handleWidthInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleWidthInput
            },
            ref: setRef(_this, "width")
          })])];
        } : [h("label", {
          "for": "k-editor-image-width",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-image-width"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageWidth2, messages[insertImageWidth2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-image-width",
            value: _this.widthValue
          },
          id: "k-editor-image-width",
          value: _this.widthValue,
          onInput: _this.handleWidthInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleWidthInput
          },
          ref: setRef(_this, "width")
        })])]), h(FieldWrapper, _this.v3 ? function() {
          return [h("label", {
            htmlFor: "k-editor-image-height",
            attrs: _this.v3 ? void 0 : {
              htmlFor: "k-editor-image-height"
            },
            "class": "k-form-label"
          }, [localization.toLanguageString(insertImageHeight2, messages[insertImageHeight2])]), h("div", {
            "class": "k-form-field-wrap"
          }, [h(Input, {
            id: "k-editor-image-height",
            attrs: _this.v3 ? void 0 : {
              id: "k-editor-image-height",
              value: _this.heightValue
            },
            value: _this.heightValue,
            onInput: _this.handleHeightInput,
            on: _this.v3 ? void 0 : {
              "input": _this.handleHeightInput
            },
            ref: setRef(_this, "height")
          })])];
        } : [h("label", {
          htmlFor: "k-editor-image-height",
          attrs: _this.v3 ? void 0 : {
            htmlFor: "k-editor-image-height"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageHeight2, messages[insertImageHeight2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          id: "k-editor-image-height",
          attrs: _this.v3 ? void 0 : {
            id: "k-editor-image-height",
            value: _this.heightValue
          },
          value: _this.heightValue,
          onInput: _this.handleHeightInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleHeightInput
          },
          ref: setRef(_this, "height")
        })])])];
      } : [h(FieldWrapper, _this.v3 ? function() {
        return [h("label", {
          "for": "k-editor-image-url",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-image-url"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageAddress2, messages[insertImageAddress2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-image-url",
            value: _this.srcValue
          },
          id: "k-editor-image-url",
          value: _this.srcValue,
          onInput: _this.handleSrcInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleSrcInput
          },
          ref: setRef(_this, "src")
        })])];
      } : [h("label", {
        "for": "k-editor-image-url",
        attrs: _this.v3 ? void 0 : {
          "for": "k-editor-image-url"
        },
        "class": "k-form-label"
      }, [localization.toLanguageString(insertImageAddress2, messages[insertImageAddress2])]), h("div", {
        "class": "k-form-field-wrap"
      }, [h(Input, {
        type: "text",
        attrs: _this.v3 ? void 0 : {
          type: "text",
          id: "k-editor-image-url",
          value: _this.srcValue
        },
        id: "k-editor-image-url",
        value: _this.srcValue,
        onInput: _this.handleSrcInput,
        on: _this.v3 ? void 0 : {
          "input": _this.handleSrcInput
        },
        ref: setRef(_this, "src")
      })])]), h(FieldWrapper, _this.v3 ? function() {
        return [h("label", {
          "for": "k-editor-image-url",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-image-url"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageAltText2, messages[insertImageAltText2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-image-alt",
            value: _this.altValue
          },
          id: "k-editor-image-alt",
          value: _this.altValue,
          onInput: _this.handleAltInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleAltInput
          },
          ref: setRef(_this, "altText")
        })])];
      } : [h("label", {
        "for": "k-editor-image-url",
        attrs: _this.v3 ? void 0 : {
          "for": "k-editor-image-url"
        },
        "class": "k-form-label"
      }, [localization.toLanguageString(insertImageAltText2, messages[insertImageAltText2])]), h("div", {
        "class": "k-form-field-wrap"
      }, [h(Input, {
        type: "text",
        attrs: _this.v3 ? void 0 : {
          type: "text",
          id: "k-editor-image-alt",
          value: _this.altValue
        },
        id: "k-editor-image-alt",
        value: _this.altValue,
        onInput: _this.handleAltInput,
        on: _this.v3 ? void 0 : {
          "input": _this.handleAltInput
        },
        ref: setRef(_this, "altText")
      })])]), h(FieldWrapper, _this.v3 ? function() {
        return [h("label", {
          htmlFor: "k-editor-image-title",
          attrs: _this.v3 ? void 0 : {
            htmlFor: "k-editor-image-title"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageTitle2, messages[insertImageTitle2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-image-title",
            value: _this.titleValue
          },
          id: "k-editor-image-title",
          value: _this.titleValue,
          onInput: _this.handleTitleInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleTitleInput
          },
          ref: setRef(_this, "title")
        })])];
      } : [h("label", {
        htmlFor: "k-editor-image-title",
        attrs: _this.v3 ? void 0 : {
          htmlFor: "k-editor-image-title"
        },
        "class": "k-form-label"
      }, [localization.toLanguageString(insertImageTitle2, messages[insertImageTitle2])]), h("div", {
        "class": "k-form-field-wrap"
      }, [h(Input, {
        type: "text",
        attrs: _this.v3 ? void 0 : {
          type: "text",
          id: "k-editor-image-title",
          value: _this.titleValue
        },
        id: "k-editor-image-title",
        value: _this.titleValue,
        onInput: _this.handleTitleInput,
        on: _this.v3 ? void 0 : {
          "input": _this.handleTitleInput
        },
        ref: setRef(_this, "title")
      })])]), h(FieldWrapper, _this.v3 ? function() {
        return [h("label", {
          "for": "k-editor-image-width",
          attrs: _this.v3 ? void 0 : {
            "for": "k-editor-image-width"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageWidth2, messages[insertImageWidth2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          type: "text",
          attrs: _this.v3 ? void 0 : {
            type: "text",
            id: "k-editor-image-width",
            value: _this.widthValue
          },
          id: "k-editor-image-width",
          value: _this.widthValue,
          onInput: _this.handleWidthInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleWidthInput
          },
          ref: setRef(_this, "width")
        })])];
      } : [h("label", {
        "for": "k-editor-image-width",
        attrs: _this.v3 ? void 0 : {
          "for": "k-editor-image-width"
        },
        "class": "k-form-label"
      }, [localization.toLanguageString(insertImageWidth2, messages[insertImageWidth2])]), h("div", {
        "class": "k-form-field-wrap"
      }, [h(Input, {
        type: "text",
        attrs: _this.v3 ? void 0 : {
          type: "text",
          id: "k-editor-image-width",
          value: _this.widthValue
        },
        id: "k-editor-image-width",
        value: _this.widthValue,
        onInput: _this.handleWidthInput,
        on: _this.v3 ? void 0 : {
          "input": _this.handleWidthInput
        },
        ref: setRef(_this, "width")
      })])]), h(FieldWrapper, _this.v3 ? function() {
        return [h("label", {
          htmlFor: "k-editor-image-height",
          attrs: _this.v3 ? void 0 : {
            htmlFor: "k-editor-image-height"
          },
          "class": "k-form-label"
        }, [localization.toLanguageString(insertImageHeight2, messages[insertImageHeight2])]), h("div", {
          "class": "k-form-field-wrap"
        }, [h(Input, {
          id: "k-editor-image-height",
          attrs: _this.v3 ? void 0 : {
            id: "k-editor-image-height",
            value: _this.heightValue
          },
          value: _this.heightValue,
          onInput: _this.handleHeightInput,
          on: _this.v3 ? void 0 : {
            "input": _this.handleHeightInput
          },
          ref: setRef(_this, "height")
        })])];
      } : [h("label", {
        htmlFor: "k-editor-image-height",
        attrs: _this.v3 ? void 0 : {
          htmlFor: "k-editor-image-height"
        },
        "class": "k-form-label"
      }, [localization.toLanguageString(insertImageHeight2, messages[insertImageHeight2])]), h("div", {
        "class": "k-form-field-wrap"
      }, [h(Input, {
        id: "k-editor-image-height",
        attrs: _this.v3 ? void 0 : {
          id: "k-editor-image-height",
          value: _this.heightValue
        },
        value: _this.heightValue,
        onInput: _this.handleHeightInput,
        on: _this.v3 ? void 0 : {
          "input": _this.handleHeightInput
        },
        ref: setRef(_this, "height")
      })])])])])
    );
    var actionButtons = [
      // @ts-ignore function children
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          dir
        },
        onClick: this.onClose,
        on: this.v3 ? void 0 : {
          "click": this.onClose
        },
        dir,
        key: "cancel"
      }, this.v3 ? function() {
        return [localization.toLanguageString(insertImageCancel2, messages[insertImageCancel2])];
      } : [localization.toLanguageString(insertImageCancel2, messages[insertImageCancel2])]),
      // @ts-ignore function children
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          disabled: !this.srcValue,
          themeColor: "primary",
          dir
        },
        disabled: !this.srcValue,
        onClick: this.onInsert,
        on: this.v3 ? void 0 : {
          "click": this.onInsert
        },
        themeColor: "primary",
        dir,
        key: "insert"
      }, this.v3 ? function() {
        return [localization.toLanguageString(insertImageInsert2, messages[insertImageInsert2])];
      } : [localization.toLanguageString(insertImageInsert2, messages[insertImageInsert2])])
    ];
    var dialog = (
      // @ts-ignore function children
      h(Window, {
        initialWidth: 500,
        attrs: this.v3 ? void 0 : {
          initialWidth: 500,
          initialHeight: 360,
          windowClass: "k-editor-window",
          title: localization.toLanguageString(insertImageDialogTitle2, messages[insertImageDialogTitle2]),
          dir,
          modal: true,
          minimizeButton: function minimizeButton() {
            return null;
          },
          maximizeButton: function maximizeButton() {
            return null;
          },
          resizable: false
        },
        initialHeight: 360,
        windowClass: "k-editor-window",
        title: localization.toLanguageString(insertImageDialogTitle2, messages[insertImageDialogTitle2]),
        onClose: this.onClose,
        on: this.v3 ? void 0 : {
          "close": this.onClose
        },
        key: "dialog",
        dir,
        style: dir === "rtl" ? {
          textAlign: "right"
        } : void 0,
        modal: true,
        minimizeButton: function minimizeButton() {
          return null;
        },
        maximizeButton: function maximizeButton() {
          return null;
        },
        resizable: false
      }, this.v3 ? function() {
        return [
          content,
          // @ts-ignore function children
          h(DialogActionsBar, _this.v3 ? function() {
            return [actionButtons];
          } : [actionButtons])
        ];
      } : [content, h(DialogActionsBar, _this.v3 ? function() {
        return [actionButtons];
      } : [actionButtons])])
    );
    return dialog;
  },
  methods: {
    handleSrcInput: function handleSrcInput(e) {
      this.srcValue = e.value;
    },
    handleAltInput: function handleAltInput(e) {
      this.altValue = e.value;
    },
    handleTitleInput: function handleTitleInput(e) {
      this.titleValue = e.value;
    },
    handleWidthInput: function handleWidthInput(e) {
      this.widthValue = e.value;
    },
    handleHeightInput: function handleHeightInput(e) {
      this.heightValue = e.value;
    },
    onClose: function onClose2() {
      this.$props.view.focus();
      this.$emit("close");
    },
    onInsert: function onInsert2() {
      var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings;
      var nodes3 = view.state.schema.nodes;
      var nodeType = nodes3[settings3.node];
      var data13 = {
        src: this.src ? this.srcValue : null,
        title: this.title ? this.titleValue : null,
        alt: this.altText ? this.altValue : null,
        width: this.width ? this.widthValue : null,
        height: this.height ? this.heightValue : null
      };
      var attrs = Object.keys(data13).filter(function(key) {
        return data13[key] !== null && data13[key] !== "";
      }).reduce(function(acc, curr) {
        var _a3;
        return Object.assign(acc, (_a3 = {}, _a3[curr] = data13[curr], _a3));
      }, {});
      var newImage = nodeType.createAndFill(attrs);
      var insertImageCmd = insertNode(newImage, true);
      insertImageCmd(view.state, function(tr) {
        return view.dispatch(tr.setMeta("commandName", settings3.commandName).setMeta("args", attrs));
      });
      this.onClose();
    }
  }
};
var InsertImageDialog = InsertImageDialogVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/insertImage.js
var __assign21 = function() {
  __assign21 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign21.apply(this, arguments);
};
var __rest14 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue20 = vue_runtime_esm_bundler_exports;
var gh19 = allVue20.h;
var isV320 = allVue20.version && allVue20.version[0] === "3";
var InsertImageVue2 = {
  name: "KendoInsertImage",
  props: __assign21({
    view: Object,
    settings: {
      type: Object,
      default: function _default12() {
        return {
          messages: {}
        };
      }
    },
    dir: String
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data4() {
    return {
      openedDialog: false
    };
  },
  // @ts-ignore
  setup: !isV320 ? void 0 : function() {
    var v3 = !!isV320;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render19(createElement) {
    var h = gh19 || createElement;
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings, other = __rest14(_a2, ["view", "settings"]);
    var state = view && view.state;
    var nodeType = state ? state.schema.nodes[settings3.node] : void 0;
    var localization = provideLocalizationService(this);
    var insertImage3 = settings3.messages.insertImage;
    var buttonProps = __assign21(__assign21(__assign21({}, other), {
      key: "insertImage",
      disabled: !nodeType || !state || !canInsert(state, nodeType),
      title: localization.toLanguageString(insertImage3, messages[insertImage3])
    }), settings3.props);
    var button = h(Button, __assign21({
      onClick: this.toggleDialog,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.toggleDialog,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    var rendering = [button, this.openedDialog && view && // @ts-ignore function children
    h(InsertImageDialog, {
      key: "insertImageDialog",
      view,
      attrs: this.v3 ? void 0 : {
        view,
        settings: settings3,
        dir: buttonProps.dir
      },
      settings: settings3,
      dir: buttonProps.dir,
      onClose: this.toggleDialog,
      on: this.v3 ? void 0 : {
        "close": this.toggleDialog
      }
    }) || null];
    return h("span", [rendering]);
  },
  methods: {
    toggleDialog: function toggleDialog2() {
      this.openedDialog = !this.openedDialog;
    },
    preventDefault: function preventDefault9(e) {
      e.preventDefault();
    }
  }
};
var InsertImage = InsertImageVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/insertTable/popupGrid.js
var allVue21 = vue_runtime_esm_bundler_exports;
var gh20 = allVue21.h;
var isV321 = allVue21.version && allVue21.version[0] === "3";
var cellClass = "k-ct-cell k-disabled";
var selectedClass = "k-selected";
var PopupGridVue2 = {
  name: "KendoPopupGrid",
  props: {
    rows: Number,
    columns: Number,
    createTableMessage: String,
    createTableHintMessage: String
  },
  data: function data5() {
    return {
      row: -1,
      col: -1
    };
  },
  // @ts-ignore
  setup: !isV321 ? void 0 : function() {
    var v3 = !!isV321;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render20(createElement) {
    var _this = this;
    var h = gh20 || createElement;
    var cells = [];
    var total = this.$props.columns * this.$props.rows;
    var _a2 = this.$data, row = _a2.row, col = _a2.col;
    var message = this.$props.createTableMessage;
    if (col > -1) {
      message = formatString(this.$props.createTableHintMessage, row + 1, col + 1);
    }
    var renderCell = function renderCell2(index, selRow, selCol) {
      var _this2 = this;
      var currentRow = Math.floor(index / this.$props.columns);
      var currentCol = index % this.$props.columns;
      var selected = currentCol <= selCol && currentRow <= selRow;
      return h("span", {
        "class": cellClass + (selected ? " ".concat(selectedClass) : ""),
        onMouseenter: function onMouseenter() {
          return _this2.cellMouseEnter({
            row: currentRow,
            col: currentCol
          });
        },
        on: this.v3 ? void 0 : {
          "mouseenter": function onMouseenter() {
            return _this2.cellMouseEnter({
              row: currentRow,
              col: currentCol
            });
          },
          "click": function click() {
            return _this2.onCellClick(currentRow, currentCol);
          }
        },
        onClick: function click() {
          return _this2.onCellClick(currentRow, currentCol);
        },
        key: index
      });
    };
    for (var i = 0; i < total; i++) {
      cells.push(renderCell.call(this, i, row, col));
    }
    var body = [h("div", {
      onMouseleave: function onMouseleave() {
        return _this.handleMouseLeave();
      },
      on: this.v3 ? void 0 : {
        "mouseleave": function onMouseleave() {
          return _this.handleMouseLeave();
        },
        "pointerdown": this.onDown,
        "mousedown": this.onDown
      },
      key: "cells",
      style: {
        borderColor: "inherit"
      },
      onPointerdown: this.onDown,
      onMousedown: this.onDown
    }, [cells]), h("div", {
      "class": "k-status",
      key: "status",
      onPointerdown: this.onDown,
      on: this.v3 ? void 0 : {
        "pointerdown": this.onDown,
        "mousedown": this.onDown
      },
      onMousedown: this.onDown
    }, [message])];
    return h("span", [body]);
  },
  methods: {
    cellMouseEnter: function cellMouseEnter(_a2) {
      var row = _a2.row, col = _a2.col;
      this.row = row;
      this.col = col;
    },
    handleMouseLeave: function handleMouseLeave2() {
      this.row = -1;
      this.col = -1;
    },
    onCellClick: function onCellClick(row, col) {
      this.$emit("cellclick", row, col);
    },
    onDown: function onDown(e) {
      this.$emit("down", e);
    }
  }
};
var PopupGrid = PopupGridVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/insertTable/popup.js
var allVue22 = vue_runtime_esm_bundler_exports;
var gh21 = allVue22.h;
var isV322 = allVue22.version && allVue22.version[0] === "3";
var InsertTablePopupVue2 = {
  name: "KendoInsertTablePopup",
  // @ts-ignore
  emits: {
    close: null
  },
  props: {
    show: {
      type: Boolean,
      required: true
    },
    createTableMessage: {
      type: String,
      required: true
    },
    createTableHintMessage: {
      type: String,
      required: true
    },
    anchor: String,
    rows: {
      type: Number,
      default: 6
    },
    columns: {
      type: Number,
      default: 8
    },
    dir: String
  },
  data: function data6() {
    return {
      pointerdown: false
    };
  },
  updated: function updated() {
  },
  mounted: function mounted4() {
    window.addEventListener("mousedown", this.onWindowDown);
    window.addEventListener("pointerdown", this.onWindowDown);
  },
  destroyed: !!isV322 ? void 0 : function() {
    window.removeEventListener("mousedown", this.onWindowDown);
    window.removeEventListener("pointerdown", this.onWindowDown);
  },
  // @ts-ignore
  unmounted: function unmounted2() {
    window.removeEventListener("mousedown", this.onWindowDown);
    window.removeEventListener("pointerdown", this.onWindowDown);
  },
  // @ts-ignore
  setup: !isV322 ? void 0 : function() {
    var v3 = !!isV322;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render21(createElement) {
    var _this = this;
    var h = gh21 || createElement;
    var _a2 = this.$props, show = _a2.show, anchor = _a2.anchor, dir = _a2.dir, rows = _a2.rows, columns = _a2.columns;
    var horizontal = dir === "rtl" ? "right" : "left";
    return (
      // @ts-ignore function children
      h(Popup, {
        anchor,
        attrs: this.v3 ? void 0 : {
          anchor,
          anchorAlign: {
            horizontal,
            vertical: "bottom"
          },
          popupAlign: {
            horizontal,
            vertical: "top"
          },
          popupClass: "k-ct-popup k-group k-reset k-border-up",
          show
        },
        anchorAlign: {
          horizontal,
          vertical: "bottom"
        },
        popupAlign: {
          horizontal,
          vertical: "top"
        },
        popupClass: "k-ct-popup k-group k-reset k-border-up",
        show,
        style: dir === "rtl" ? {
          direction: "rtl"
        } : void 0
      }, this.v3 ? function() {
        return [
          // @ts-ignore
          h(PopupGrid, {
            rows,
            attrs: _this.v3 ? void 0 : {
              rows,
              columns,
              createTableMessage: _this.$props.createTableMessage,
              createTableHintMessage: _this.$props.createTableHintMessage
            },
            columns,
            createTableMessage: _this.$props.createTableMessage,
            createTableHintMessage: _this.$props.createTableHintMessage,
            onCellclick: _this.onTableInsert,
            on: _this.v3 ? void 0 : {
              "cellclick": _this.onTableInsert,
              "down": _this.onPointerDown
            },
            onDown: _this.onPointerDown
          })
        ];
      } : [h(PopupGrid, {
        rows,
        attrs: _this.v3 ? void 0 : {
          rows,
          columns,
          createTableMessage: _this.$props.createTableMessage,
          createTableHintMessage: _this.$props.createTableHintMessage
        },
        columns,
        createTableMessage: _this.$props.createTableMessage,
        createTableHintMessage: _this.$props.createTableHintMessage,
        onCellclick: _this.onTableInsert,
        on: _this.v3 ? void 0 : {
          "cellclick": _this.onTableInsert,
          "down": _this.onPointerDown
        },
        onDown: _this.onPointerDown
      })])
    );
  },
  methods: {
    onTableInsert: function onTableInsert(row, col) {
      this.$emit("tableinsert", row, col);
    },
    onWindowDown: function onWindowDown(event) {
      var anchor = this.$props.anchor;
      if (anchor && (anchor === event.target || anchor.firstElementChild === event.target)) {
        return;
      }
      if (this.$props.show && !this.pointerdown) {
        this.$emit("close");
      }
      this.pointerdown = false;
    },
    onPointerDown: function onPointerDown() {
      this.pointerdown = true;
    }
  }
};
var InsertTablePopup = InsertTablePopupVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/insertTable/tool.js
var __assign22 = function() {
  __assign22 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign22.apply(this, arguments);
};
var __rest15 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue23 = vue_runtime_esm_bundler_exports;
var gh22 = allVue23.h;
var isV323 = allVue23.version && allVue23.version[0] === "3";
var InsertTableVue2 = {
  name: "KendoInsertTable",
  props: __assign22({
    view: Object,
    settings: {
      type: Object,
      default: function _default13() {
        return {
          messages: {}
        };
      }
    },
    dir: String
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created2() {
    this.buttonRef = guid();
  },
  data: function data7() {
    return {
      openedPopup: false
    };
  },
  // @ts-ignore
  setup: !isV323 ? void 0 : function() {
    var v3 = !!isV323;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render22(createElement) {
    var h = gh22 || createElement;
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings, other = __rest15(_a2, ["view", "settings"]);
    var state = view && view.state;
    var localization = provideLocalizationService(this);
    var _b = settings3.messages, createTableMsgKey = _b.createTable, createTableHint2 = _b.createTableHint;
    var createTableMsg = localization.toLanguageString(createTableMsgKey, messages[createTableMsgKey]);
    var createTableHintMsg = localization.toLanguageString(createTableHint2, messages[createTableHint2]);
    var buttonProps = __assign22(__assign22(__assign22({}, other), {
      disabled: !state || !canInsert(state, state.schema.nodes.table),
      key: "InsertTable",
      title: createTableMsg
    }), settings3.props);
    var button = h(Button, __assign22({
      ref: this.buttonRef,
      onClick: this.togglePopup,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.togglePopup,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    var rendering = [button, view && // @ts-ignore function children
    h(InsertTablePopup, {
      key: "insertTablePopup",
      createTableMessage: createTableMsg,
      attrs: this.v3 ? void 0 : {
        createTableMessage: createTableMsg,
        createTableHintMessage: createTableHintMsg,
        dir: this.dir,
        anchor: this.buttonRef,
        show: this.openedPopup
      },
      createTableHintMessage: createTableHintMsg,
      dir: this.dir,
      anchor: this.buttonRef,
      show: this.openedPopup,
      onClose: this.closePopup,
      on: this.v3 ? void 0 : {
        "close": this.closePopup,
        "tableinsert": this.onTableInsert
      },
      onTableinsert: this.onTableInsert
    }) || null];
    return h("span", [rendering]);
  },
  methods: {
    togglePopup: function togglePopup() {
      this.openedPopup = !this.openedPopup;
    },
    closePopup: function closePopup() {
      if (this.openedPopup) {
        this.togglePopup();
      }
    },
    onTableInsert: function onTableInsert2(row, col) {
      var view = this.$props.view;
      if (!view) {
        return;
      }
      var newTable = createTable(view.state.schema.nodes, row, col);
      if (newTable) {
        insertNode(newTable, true)(view.state, view.dispatch);
      }
      view.focus();
      this.closePopup();
    },
    preventDefault: function preventDefault10(e) {
      e.preventDefault();
    }
  }
};
var InsertTable = InsertTableVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/dialogs/viewHtml.js
var allVue24 = vue_runtime_esm_bundler_exports;
var gh23 = allVue24.h;
var isV324 = allVue24.version && allVue24.version[0] === "3";
var ViewHtmlDialogVue2 = {
  name: "KendoViewHtmlDialog",
  // @ts-ignore
  emits: {
    close: null
  },
  props: {
    view: Object,
    settings: Object,
    dir: String
  },
  created: function created3() {
    this.textAreaId = guid();
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data8() {
    var view = this.$props.view;
    return {
      textAreaValue: indentHtml(getHtml(view.state))
    };
  },
  mounted: function mounted5() {
    this.htmlArea = getRef(this, "htmlArea");
    if (this.htmlArea) {
      this.htmlArea.focus();
    }
  },
  // @ts-ignore
  setup: !isV324 ? void 0 : function() {
    var v3 = !!isV324;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render23(createElement) {
    var _this = this;
    var h = gh23 || createElement;
    var _a2 = this.$props, settings3 = _a2.settings, dir = _a2.dir;
    var localization = provideLocalizationService(this);
    var _b = settings3.messages, viewHtmlDialogTitle2 = _b.viewHtmlDialogTitle, viewHtmlCancel2 = _b.viewHtmlCancel, viewHtmlUpdate2 = _b.viewHtmlUpdate;
    var content = h("span", {
      "class": "k-input k-textarea k-input-md k-input-solid k-rounded-md k-editor-textarea"
    }, [h("textarea", {
      ref: setRef(this, "htmlArea"),
      onInput: this.textAreaChange,
      on: this.v3 ? void 0 : {
        "input": this.textAreaChange
      },
      value: this.v3 ? this.textAreaValue : null,
      domProps: this.v3 ? void 0 : {
        "value": this.textAreaValue
      },
      id: this.textAreaId,
      attrs: this.v3 ? void 0 : {
        id: this.textAreaId,
        role: "textbox",
        tabindex: "0",
        "aria-multiline": "true"
      },
      role: "textbox",
      "class": "k-input-inner !k-overflow-auto",
      tabindex: "0",
      "aria-multiline": "true",
      style: "resize: none;"
    })]);
    var actionButtons = [
      // @ts-ignore function children
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          dir
        },
        onClick: this.onClose,
        on: this.v3 ? void 0 : {
          "click": this.onClose
        },
        dir,
        key: "cancel"
      }, this.v3 ? function() {
        return [localization.toLanguageString(viewHtmlCancel2, messages[viewHtmlCancel2])];
      } : [localization.toLanguageString(viewHtmlCancel2, messages[viewHtmlCancel2])]),
      // @ts-ignore function children
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          themeColor: "primary",
          dir
        },
        onClick: this.onUpdate,
        on: this.v3 ? void 0 : {
          "click": this.onUpdate
        },
        themeColor: "primary",
        dir,
        key: "update"
      }, this.v3 ? function() {
        return [localization.toLanguageString(viewHtmlUpdate2, messages[viewHtmlUpdate2])];
      } : [localization.toLanguageString(viewHtmlUpdate2, messages[viewHtmlUpdate2])])
    ];
    var dialog = (
      // @ts-ignore function children
      h(Window, {
        initialHeight: 400,
        attrs: this.v3 ? void 0 : {
          initialHeight: 400,
          initialWidth: 500,
          windowClass: "k-editor-window",
          title: localization.toLanguageString(viewHtmlDialogTitle2, messages[viewHtmlDialogTitle2]),
          dir,
          modal: true,
          minimizeButton: function minimizeButton() {
            return null;
          },
          maximizeButton: function maximizeButton() {
            return null;
          },
          resizable: false
        },
        initialWidth: 500,
        windowClass: "k-editor-window",
        title: localization.toLanguageString(viewHtmlDialogTitle2, messages[viewHtmlDialogTitle2]),
        onClose: this.onClose,
        on: this.v3 ? void 0 : {
          "close": this.onClose
        },
        key: "dialog",
        dir,
        style: dir === "rtl" ? {
          textAlign: "right"
        } : void 0,
        modal: true,
        minimizeButton: function minimizeButton() {
          return null;
        },
        maximizeButton: function maximizeButton() {
          return null;
        },
        resizable: false
      }, this.v3 ? function() {
        return [
          content,
          // @ts-ignore function children
          h(DialogActionsBar, _this.v3 ? function() {
            return [actionButtons];
          } : [actionButtons])
        ];
      } : [content, h(DialogActionsBar, _this.v3 ? function() {
        return [actionButtons];
      } : [actionButtons])])
    );
    return dialog;
  },
  methods: {
    textAreaChange: function textAreaChange(e) {
      this.textAreaValue = e.target.value;
    },
    onUpdate: function onUpdate() {
      var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings;
      var html = trimWhitespace(this.htmlArea ? this.textAreaValue : "");
      var preserveWhitespace = editorPropsKey.getState(view.state).preserveWhitespace;
      setHtml(html, settings3.commandName, {
        preserveWhitespace
      })(view.state, view.dispatch);
      this.onClose();
    },
    onClose: function onClose3() {
      this.$props.view.focus();
      this.$emit("close");
    }
  }
};
var ViewHtmlDialog = ViewHtmlDialogVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/viewHtml.js
var __assign23 = function() {
  __assign23 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign23.apply(this, arguments);
};
var __rest16 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue25 = vue_runtime_esm_bundler_exports;
var gh24 = allVue25.h;
var isV325 = allVue25.version && allVue25.version[0] === "3";
var ViewHtmlVue2 = {
  name: "KendoViewHtml",
  props: __assign23({
    view: Object,
    settings: {
      type: Object,
      default: function _default14() {
        return {
          messages: {}
        };
      }
    }
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data9() {
    return {
      openedDialog: false
    };
  },
  // @ts-ignore
  setup: !isV325 ? void 0 : function() {
    var v3 = !!isV325;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render24(createElement) {
    var h = gh24 || createElement;
    var _a2 = this.$props, view = _a2.view, settings3 = _a2.settings, other = __rest16(_a2, ["view", "settings"]);
    var localization = provideLocalizationService(this);
    var titleKey = settings3.messages.viewHtml;
    var buttonProps = __assign23(__assign23(__assign23({}, other), {
      key: "viewHtml",
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign23({
      onClick: this.toggleDialog,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.toggleDialog,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    var rendering = [button, this.openedDialog && view && // @ts-ignore function children
    h(ViewHtmlDialog, {
      key: "viewHtmlDialog",
      view,
      attrs: this.v3 ? void 0 : {
        view,
        settings: settings3,
        dir: buttonProps.dir
      },
      settings: settings3,
      dir: buttonProps.dir,
      onClose: this.toggleDialog,
      on: this.v3 ? void 0 : {
        "close": this.toggleDialog
      }
    }) || null];
    return h("span", [rendering]);
  },
  methods: {
    toggleDialog: function toggleDialog3() {
      this.openedDialog = !this.openedDialog;
    },
    preventDefault: function preventDefault11(e) {
      e.preventDefault();
    }
  }
};
var ViewHtml = ViewHtmlVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/pdf.js
var __assign24 = function() {
  __assign24 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign24.apply(this, arguments);
};
var __rest17 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue26 = vue_runtime_esm_bundler_exports;
var gh25 = allVue26.h;
var isV326 = allVue26.version && allVue26.version[0] === "3";
var pdf2 = EditorToolsSettings.pdf;
var defaultSavePdfOptions = EditorToolsSettings.savePdfOptions;
var PdfVue2 = {
  name: "KendoPdf",
  props: __assign24({
    view: Object,
    settings: Object
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV326 ? void 0 : function() {
    var v3 = !!isV326;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render25(createElement) {
    var h = gh25 || createElement;
    var _a2 = this.$props, view = _a2.view, render31 = _a2.render, _b = _a2.settings, settings3 = _b === void 0 ? pdf2 : _b, savePdfOptions = _a2.savePdfOptions, savePdfCallback = _a2.savePdfCallback, other = __rest17(_a2, ["view", "render", "settings", "savePdfOptions", "savePdfCallback"]);
    var titleKey = settings3.messages.title;
    var localization = provideLocalizationService(this);
    var buttonProps = __assign24(__assign24(__assign24({}, other), {
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign24({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick14() {
      if (this.view) {
        savePDF(this.view.dom, __assign24(__assign24({}, defaultSavePdfOptions), this.savePdfOptions || {}), this.savePdfCallback);
      }
    },
    preventDefault: function preventDefault12(e) {
      e.preventDefault();
    }
  }
};
var Pdf = PdfVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/print.js
var __assign25 = function() {
  __assign25 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign25.apply(this, arguments);
};
var __rest18 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue27 = vue_runtime_esm_bundler_exports;
var gh26 = allVue27.h;
var isV327 = allVue27.version && allVue27.version[0] === "3";
var print2 = EditorToolsSettings.print;
var PrintVue2 = {
  name: "KendoPrint",
  props: __assign25({
    view: Object,
    settings: Object
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV327 ? void 0 : function() {
    var v3 = !!isV327;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render26(createElement) {
    var h = gh26 || createElement;
    var _a2 = this.$props, view = _a2.view, render31 = _a2.render, _b = _a2.settings, settings3 = _b === void 0 ? print2 : _b, other = __rest18(_a2, ["view", "render", "settings"]);
    var dom = view && view.dom;
    var doc3 = dom && dom.ownerDocument;
    var editorWindow = doc3 && doc3.defaultView;
    var titleKey = settings3.messages.title;
    var localization = provideLocalizationService(this);
    var buttonProps = __assign25(__assign25(__assign25({}, other), {
      disabled: !editorWindow || editorWindow === window,
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings3.props);
    var button = h(Button, __assign25({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick15() {
      var dom = this.view && this.view.dom;
      var doc3 = dom && dom.ownerDocument;
      var editorWindow = doc3 && doc3.defaultView;
      if (editorWindow) {
        editorWindow.print();
      }
    },
    preventDefault: function preventDefault13(e) {
      e.preventDefault();
    }
  }
};
var Print = PrintVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/dialogs/FindReplace.js
var allVue28 = vue_runtime_esm_bundler_exports;
var gh27 = allVue28.h;
var isV328 = allVue28.version && allVue28.version[0] === "3";
var enter = 13;
var esc = 27;
var settings = EditorToolsSettings.findAndReplace;
var FindAndReplaceDialogVue2 = {
  name: "KendoFindAndReplaceDialog",
  // @ts-ignore
  emits: {
    close: null
  },
  props: {
    view: Object,
    settings: {
      type: Object,
      default: function _default15() {
        return settings;
      }
    },
    dir: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created4() {
    this._prevMatch = void 0;
    this.nextMatch = void 0;
  },
  data: function data10() {
    return {
      selectedTab: 0,
      searchText: selectedLineTextOnly(this.$props.view.state),
      replaceText: "",
      matchCase: false,
      matchWord: false,
      matchCyclic: false,
      useRegExp: false,
      matches: [],
      hasMounted: false
    };
  },
  mounted: function mounted6() {
    if (this.$el) {
      document.body.append(this.$el);
    }
    this.setNextState();
    this.hasMounted = true;
    setTimeout(function() {
      var findInput = document.getElementById("findWhatFind");
      if (findInput) {
        findInput.focus();
      }
    }, 10);
  },
  /**
   * @hidden
   */
  updated: function updated2() {
    var matches2 = this.matches || [];
    var nextMatch = this.nextMatch;
    var view = this.$props.view;
    if (this._prevMatch !== nextMatch) {
      var state = view.state;
      var tr = state.tr;
      var highlights_1 = [];
      matches2.forEach(function(m) {
        highlights_1.push({
          from: m.from,
          to: m.to,
          attrs: {
            class: nextMatch && m.eq(nextMatch) ? "k-text-selected" : "k-text-highlighted"
          }
        });
      });
      tr.setMeta(textHighlightKey, highlights_1);
      tr.setSelection(nextMatch || TextSelection.create(state.doc, state.selection.from));
      view.dispatch(tr);
    }
  },
  destroyed: !!isV328 ? void 0 : function() {
    if (this.$el) {
      this.$el.remove();
    }
  },
  // @ts-ignore
  unmounted: function unmounted3() {
    if (this.$el) {
      this.$el.remove();
    }
  },
  // @ts-ignore
  setup: !isV328 ? void 0 : function() {
    var v3 = !!isV328;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render27(createElement) {
    var _this2 = this;
    var h = gh27 || createElement;
    var localization = provideLocalizationService(this);
    var _a2 = this.settings.messages, findReplaceDialogTitle2 = _a2.findReplaceDialogTitle, findReplaceTabFind2 = _a2.findReplaceTabFind, findReplaceTabReplace2 = _a2.findReplaceTabReplace, findReplaceFindWhat2 = _a2.findReplaceFindWhat, findReplaceReplaceWith2 = _a2.findReplaceReplaceWith, findReplaceReplace2 = _a2.findReplaceReplace, findReplaceReplaceAll2 = _a2.findReplaceReplaceAll, findReplaceMatchCase2 = _a2.findReplaceMatchCase, findReplaceMatchWord2 = _a2.findReplaceMatchWord, findReplaceMatchCyclic2 = _a2.findReplaceMatchCyclic, findReplaceUseRegExp2 = _a2.findReplaceUseRegExp, findReplacePrevMatch2 = _a2.findReplacePrevMatch, findReplaceNextMatch2 = _a2.findReplaceNextMatch, findReplaceMatches2 = _a2.findReplaceMatches;
    var _b = this, matchCase = _b.matchCase, matchWord = _b.matchWord, matchCyclic = _b.matchCyclic, useRegExp = _b.useRegExp, searchText = _b.searchText, replaceText = _b.replaceText, nextMatch = _b.nextMatch;
    var checkboxes = h("div", {
      "class": "k-search-options"
    }, [h("span", [h("input", {
      "class": "k-checkbox k-checkbox-md k-rounded-md",
      type: "checkbox",
      attrs: this.v3 ? void 0 : {
        type: "checkbox",
        id: "match-case"
      },
      id: "match-case",
      checked: this.v3 ? matchCase : null,
      domProps: this.v3 ? void 0 : {
        "checked": matchCase
      },
      onChange: this.onMatchCaseChecked,
      on: this.v3 ? void 0 : {
        "change": this.onMatchCaseChecked
      }
    }), h("label", {
      "for": "match-case",
      attrs: this.v3 ? void 0 : {
        "for": "match-case"
      },
      "class": "k-checkbox-label"
    }, [localization.toLanguageString(findReplaceMatchCase2, messages[findReplaceMatchCase2])])]), h("span", [h("input", {
      "class": "k-checkbox k-checkbox-md k-rounded-md",
      type: "checkbox",
      attrs: this.v3 ? void 0 : {
        type: "checkbox",
        id: "match-whole"
      },
      id: "match-whole",
      checked: this.v3 ? matchWord : null,
      domProps: this.v3 ? void 0 : {
        "checked": matchWord
      },
      onChange: this.onMatchWordChecked,
      on: this.v3 ? void 0 : {
        "change": this.onMatchWordChecked
      }
    }), h("label", {
      "for": "match-whole",
      attrs: this.v3 ? void 0 : {
        "for": "match-whole"
      },
      "class": "k-checkbox-label"
    }, [localization.toLanguageString(findReplaceMatchWord2, messages[findReplaceMatchWord2])])]), h("span", [h("input", {
      "class": "k-checkbox k-checkbox-md k-rounded-md",
      type: "checkbox",
      attrs: this.v3 ? void 0 : {
        type: "checkbox",
        id: "match-cyclic"
      },
      id: "match-cyclic",
      checked: this.v3 ? matchCyclic : null,
      domProps: this.v3 ? void 0 : {
        "checked": matchCyclic
      },
      onChange: this.onMatchCyclicChecked,
      on: this.v3 ? void 0 : {
        "change": this.onMatchCyclicChecked
      }
    }), h("label", {
      "for": "match-cyclic",
      attrs: this.v3 ? void 0 : {
        "for": "match-cyclic"
      },
      "class": "k-checkbox-label"
    }, [localization.toLanguageString(findReplaceMatchCyclic2, messages[findReplaceMatchCyclic2])])]), h("span", [h("input", {
      "class": "k-checkbox k-checkbox-md k-rounded-md",
      type: "checkbox",
      attrs: this.v3 ? void 0 : {
        type: "checkbox",
        id: "regular-expression"
      },
      id: "regular-expression",
      checked: this.v3 ? useRegExp : null,
      domProps: this.v3 ? void 0 : {
        "checked": useRegExp
      },
      onChange: this.onUseRegExpChecked,
      on: this.v3 ? void 0 : {
        "change": this.onUseRegExpChecked
      }
    }), h("label", {
      "for": "regular-expression",
      attrs: this.v3 ? void 0 : {
        "for": "regular-expression"
      },
      "class": "k-checkbox-label"
    }, [localization.toLanguageString(findReplaceUseRegExp2, messages[findReplaceUseRegExp2])])])]);
    var navigation = function navigation2(findWhatRef) {
      var _this = this;
      var isRtl2 = this.$props.dir === "rtl";
      var prevButton = (
        // @ts-ignore function children
        h(Button, {
          fillMode: "flat",
          attrs: this.v3 ? void 0 : {
            fillMode: "flat",
            themeColor: "primary"
          },
          themeColor: "primary",
          onClick: this.onFindPrev,
          on: this.v3 ? void 0 : {
            "click": this.onFindPrev
          }
        }, this.v3 ? function() {
          return [h(Icon, {
            name: "chevron-".concat(isRtl2 ? "right" : "left"),
            attrs: _this.v3 ? void 0 : {
              name: "chevron-".concat(isRtl2 ? "right" : "left"),
              icon: isRtl2 ? chevronRightIcon : chevronLeftIcon
            },
            icon: isRtl2 ? chevronRightIcon : chevronLeftIcon
          }), localization.toLanguageString(findReplacePrevMatch2, messages[findReplacePrevMatch2])];
        } : [h(Icon, {
          name: "chevron-".concat(isRtl2 ? "right" : "left"),
          attrs: _this.v3 ? void 0 : {
            name: "chevron-".concat(isRtl2 ? "right" : "left"),
            icon: isRtl2 ? chevronRightIcon : chevronLeftIcon
          },
          icon: isRtl2 ? chevronRightIcon : chevronLeftIcon
        }), localization.toLanguageString(findReplacePrevMatch2, messages[findReplacePrevMatch2])])
      );
      var nextButton = (
        // @ts-ignore function children
        h(Button, {
          fillMode: "flat",
          attrs: this.v3 ? void 0 : {
            fillMode: "flat",
            themeColor: "primary"
          },
          themeColor: "primary",
          onClick: this.onFindNext,
          on: this.v3 ? void 0 : {
            "click": this.onFindNext
          }
        }, this.v3 ? function() {
          return [localization.toLanguageString(findReplaceNextMatch2, messages[findReplaceNextMatch2]), h(Icon, {
            name: "chevron-".concat(isRtl2 ? "left" : "right"),
            attrs: _this.v3 ? void 0 : {
              name: "chevron-".concat(isRtl2 ? "left" : "right"),
              icon: isRtl2 ? chevronLeftIcon : chevronRightIcon
            },
            icon: isRtl2 ? chevronLeftIcon : chevronRightIcon
          })];
        } : [localization.toLanguageString(findReplaceNextMatch2, messages[findReplaceNextMatch2]), h(Icon, {
          name: "chevron-".concat(isRtl2 ? "left" : "right"),
          attrs: _this.v3 ? void 0 : {
            name: "chevron-".concat(isRtl2 ? "left" : "right"),
            icon: isRtl2 ? chevronLeftIcon : chevronRightIcon
          },
          icon: isRtl2 ? chevronLeftIcon : chevronRightIcon
        })])
      );
      return h("div", {
        "class": "k-matches-container"
      }, [prevButton, this.hasMounted && h("span", {
        ref: findWhatRef
      }, [this.matchesMessage(localization.toLanguageString(findReplaceMatches2, messages[findReplaceMatches2]))]), nextButton]);
    };
    var findWhatLabel = function findWhatLabel2(findWhatId) {
      return h("div", {
        "class": "k-edit-label"
      }, [h("label", {
        ref: findWhatId,
        "for": findWhatId,
        attrs: this.v3 ? void 0 : {
          "for": findWhatId
        }
      }, [localization.toLanguageString(findReplaceFindWhat2, messages[findReplaceFindWhat2])])]);
    };
    var findWhat = function findWhat2(findWhatId) {
      return h("div", {
        "class": "k-edit-field"
      }, [h("span", {
        "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
      }, [h("input", {
        id: findWhatId,
        attrs: this.v3 ? void 0 : {
          id: findWhatId,
          type: "text"
        },
        ref: findWhatId,
        type: "text",
        "class": "k-input-inner",
        value: this.v3 ? searchText : null,
        domProps: this.v3 ? void 0 : {
          "value": searchText
        },
        onInput: this.onSearchChange,
        on: this.v3 ? void 0 : {
          "input": this.onSearchChange,
          "focus": this.onSearchChange,
          "keydown": this.onKeyDown
        },
        onFocus: this.onSearchChange,
        onKeydown: this.onKeyDown
      })])]);
    };
    var replaceWithLabel = h("div", {
      "class": "k-edit-label"
    }, [h("label", {
      "for": "replaceWith",
      attrs: this.v3 ? void 0 : {
        "for": "replaceWith"
      }
    }, [localization.toLanguageString(findReplaceReplaceWith2, messages[findReplaceReplaceWith2])])]);
    var replaceWith = h("div", {
      "class": "k-edit-field"
    }, [h("span", {
      "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
    }, [h("input", {
      id: "replaceWith",
      attrs: this.v3 ? void 0 : {
        id: "replaceWith",
        type: "text"
      },
      "class": "k-input-inner",
      type: "text",
      value: this.v3 ? replaceText : null,
      domProps: this.v3 ? void 0 : {
        "value": replaceText
      },
      onInput: this.onReplaceChange,
      on: this.v3 ? void 0 : {
        "input": this.onReplaceChange
      }
    })])]);
    return (
      // @ts-ignore function children
      h(Window, {
        title: localization.toLanguageString(findReplaceDialogTitle2, messages[findReplaceDialogTitle2]),
        attrs: this.v3 ? void 0 : {
          title: localization.toLanguageString(findReplaceDialogTitle2, messages[findReplaceDialogTitle2]),
          windowStyle: {
            width: "auto",
            height: "auto",
            userSelect: "none"
          },
          resizable: false,
          minimizeButton: function minimizeButton() {
            return null;
          },
          maximizeButton: function maximizeButton() {
            return null;
          },
          dir: this.$props.dir
        },
        onClose: this.onClose,
        on: this.v3 ? void 0 : {
          "close": this.onClose
        },
        windowStyle: {
          width: "auto",
          height: "auto",
          userSelect: "none"
        },
        resizable: false,
        minimizeButton: function minimizeButton() {
          return null;
        },
        maximizeButton: function maximizeButton() {
          return null;
        },
        dir: this.$props.dir
      }, this.v3 ? function() {
        return [
          // @ts-ignore function children
          h(TabStrip, {
            dir: _this2.$props.dir,
            attrs: _this2.v3 ? void 0 : {
              dir: _this2.$props.dir,
              selected: _this2.selectedTab,
              animation: false
            },
            selected: _this2.selectedTab,
            "class": "k-editor-find-replace",
            onSelect: _this2.onTabSelect,
            on: _this2.v3 ? void 0 : {
              "select": _this2.onTabSelect
            },
            animation: false
          }, _this2.v3 ? function() {
            return [
              // @ts-ignore function children
              h(TabStripTab, {
                title: localization.toLanguageString(findReplaceTabFind2, messages[findReplaceTabFind2]),
                attrs: _this2.v3 ? void 0 : {
                  title: localization.toLanguageString(findReplaceTabFind2, messages[findReplaceTabFind2])
                }
              }, _this2.v3 ? function() {
                return [h("div", {
                  "class": "k-edit-form-container"
                }, [findWhatLabel.call(_this2, "findWhatFind"), findWhat.call(_this2, "findWhatFind")]), h("div", {
                  "class": "k-actions k-hstack k-justify-content-end"
                }), checkboxes, navigation.call(_this2, "findWhatFind")];
              } : [h("div", {
                "class": "k-edit-form-container"
              }, [findWhatLabel.call(_this2, "findWhatFind"), findWhat.call(_this2, "findWhatFind")]), h("div", {
                "class": "k-actions k-hstack k-justify-content-end"
              }), checkboxes, navigation.call(_this2, "findWhatFind")]),
              // @ts-ignore function children
              h(TabStripTab, {
                title: localization.toLanguageString(findReplaceTabReplace2, messages[findReplaceTabReplace2]),
                attrs: _this2.v3 ? void 0 : {
                  title: localization.toLanguageString(findReplaceTabReplace2, messages[findReplaceTabReplace2])
                }
              }, _this2.v3 ? function() {
                return [h("div", {
                  "class": "k-edit-form-container"
                }, [findWhatLabel.call(_this2, "findWhatReplace"), findWhat.call(_this2, "findWhatReplace"), replaceWithLabel, replaceWith]), h("div", {
                  "class": "k-actions k-hstack k-justify-content-end"
                }, [
                  // @ts-ignore function children
                  h(Button, {
                    disabled: !Boolean(nextMatch),
                    attrs: _this2.v3 ? void 0 : {
                      disabled: !Boolean(nextMatch)
                    },
                    onClick: _this2.onReplace,
                    on: _this2.v3 ? void 0 : {
                      "click": _this2.onReplace
                    }
                  }, _this2.v3 ? function() {
                    return [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])];
                  } : [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])]),
                  // @ts-ignore function children
                  h(Button, {
                    disabled: !Boolean(nextMatch),
                    attrs: _this2.v3 ? void 0 : {
                      disabled: !Boolean(nextMatch)
                    },
                    onClick: _this2.onReplaceAll,
                    on: _this2.v3 ? void 0 : {
                      "click": _this2.onReplaceAll
                    }
                  }, _this2.v3 ? function() {
                    return [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])];
                  } : [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])])
                ]), checkboxes, navigation.call(_this2, "findWhatReplace")];
              } : [h("div", {
                "class": "k-edit-form-container"
              }, [findWhatLabel.call(_this2, "findWhatReplace"), findWhat.call(_this2, "findWhatReplace"), replaceWithLabel, replaceWith]), h("div", {
                "class": "k-actions k-hstack k-justify-content-end"
              }, [h(Button, {
                disabled: !Boolean(nextMatch),
                attrs: _this2.v3 ? void 0 : {
                  disabled: !Boolean(nextMatch)
                },
                onClick: _this2.onReplace,
                on: _this2.v3 ? void 0 : {
                  "click": _this2.onReplace
                }
              }, _this2.v3 ? function() {
                return [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])];
              } : [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])]), h(Button, {
                disabled: !Boolean(nextMatch),
                attrs: _this2.v3 ? void 0 : {
                  disabled: !Boolean(nextMatch)
                },
                onClick: _this2.onReplaceAll,
                on: _this2.v3 ? void 0 : {
                  "click": _this2.onReplaceAll
                }
              }, _this2.v3 ? function() {
                return [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])];
              } : [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])])]), checkboxes, navigation.call(_this2, "findWhatReplace")])
            ];
          } : [h(TabStripTab, {
            title: localization.toLanguageString(findReplaceTabFind2, messages[findReplaceTabFind2]),
            attrs: _this2.v3 ? void 0 : {
              title: localization.toLanguageString(findReplaceTabFind2, messages[findReplaceTabFind2])
            }
          }, _this2.v3 ? function() {
            return [h("div", {
              "class": "k-edit-form-container"
            }, [findWhatLabel.call(_this2, "findWhatFind"), findWhat.call(_this2, "findWhatFind")]), h("div", {
              "class": "k-actions k-hstack k-justify-content-end"
            }), checkboxes, navigation.call(_this2, "findWhatFind")];
          } : [h("div", {
            "class": "k-edit-form-container"
          }, [findWhatLabel.call(_this2, "findWhatFind"), findWhat.call(_this2, "findWhatFind")]), h("div", {
            "class": "k-actions k-hstack k-justify-content-end"
          }), checkboxes, navigation.call(_this2, "findWhatFind")]), h(TabStripTab, {
            title: localization.toLanguageString(findReplaceTabReplace2, messages[findReplaceTabReplace2]),
            attrs: _this2.v3 ? void 0 : {
              title: localization.toLanguageString(findReplaceTabReplace2, messages[findReplaceTabReplace2])
            }
          }, _this2.v3 ? function() {
            return [h("div", {
              "class": "k-edit-form-container"
            }, [findWhatLabel.call(_this2, "findWhatReplace"), findWhat.call(_this2, "findWhatReplace"), replaceWithLabel, replaceWith]), h("div", {
              "class": "k-actions k-hstack k-justify-content-end"
            }, [h(Button, {
              disabled: !Boolean(nextMatch),
              attrs: _this2.v3 ? void 0 : {
                disabled: !Boolean(nextMatch)
              },
              onClick: _this2.onReplace,
              on: _this2.v3 ? void 0 : {
                "click": _this2.onReplace
              }
            }, _this2.v3 ? function() {
              return [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])];
            } : [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])]), h(Button, {
              disabled: !Boolean(nextMatch),
              attrs: _this2.v3 ? void 0 : {
                disabled: !Boolean(nextMatch)
              },
              onClick: _this2.onReplaceAll,
              on: _this2.v3 ? void 0 : {
                "click": _this2.onReplaceAll
              }
            }, _this2.v3 ? function() {
              return [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])];
            } : [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])])]), checkboxes, navigation.call(_this2, "findWhatReplace")];
          } : [h("div", {
            "class": "k-edit-form-container"
          }, [findWhatLabel.call(_this2, "findWhatReplace"), findWhat.call(_this2, "findWhatReplace"), replaceWithLabel, replaceWith]), h("div", {
            "class": "k-actions k-hstack k-justify-content-end"
          }, [h(Button, {
            disabled: !Boolean(nextMatch),
            attrs: _this2.v3 ? void 0 : {
              disabled: !Boolean(nextMatch)
            },
            onClick: _this2.onReplace,
            on: _this2.v3 ? void 0 : {
              "click": _this2.onReplace
            }
          }, _this2.v3 ? function() {
            return [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])];
          } : [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])]), h(Button, {
            disabled: !Boolean(nextMatch),
            attrs: _this2.v3 ? void 0 : {
              disabled: !Boolean(nextMatch)
            },
            onClick: _this2.onReplaceAll,
            on: _this2.v3 ? void 0 : {
              "click": _this2.onReplaceAll
            }
          }, _this2.v3 ? function() {
            return [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])];
          } : [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])])]), checkboxes, navigation.call(_this2, "findWhatReplace")])])
        ];
      } : [h(TabStrip, {
        dir: _this2.$props.dir,
        attrs: _this2.v3 ? void 0 : {
          dir: _this2.$props.dir,
          selected: _this2.selectedTab,
          animation: false
        },
        selected: _this2.selectedTab,
        "class": "k-editor-find-replace",
        onSelect: _this2.onTabSelect,
        on: _this2.v3 ? void 0 : {
          "select": _this2.onTabSelect
        },
        animation: false
      }, _this2.v3 ? function() {
        return [h(TabStripTab, {
          title: localization.toLanguageString(findReplaceTabFind2, messages[findReplaceTabFind2]),
          attrs: _this2.v3 ? void 0 : {
            title: localization.toLanguageString(findReplaceTabFind2, messages[findReplaceTabFind2])
          }
        }, _this2.v3 ? function() {
          return [h("div", {
            "class": "k-edit-form-container"
          }, [findWhatLabel.call(_this2, "findWhatFind"), findWhat.call(_this2, "findWhatFind")]), h("div", {
            "class": "k-actions k-hstack k-justify-content-end"
          }), checkboxes, navigation.call(_this2, "findWhatFind")];
        } : [h("div", {
          "class": "k-edit-form-container"
        }, [findWhatLabel.call(_this2, "findWhatFind"), findWhat.call(_this2, "findWhatFind")]), h("div", {
          "class": "k-actions k-hstack k-justify-content-end"
        }), checkboxes, navigation.call(_this2, "findWhatFind")]), h(TabStripTab, {
          title: localization.toLanguageString(findReplaceTabReplace2, messages[findReplaceTabReplace2]),
          attrs: _this2.v3 ? void 0 : {
            title: localization.toLanguageString(findReplaceTabReplace2, messages[findReplaceTabReplace2])
          }
        }, _this2.v3 ? function() {
          return [h("div", {
            "class": "k-edit-form-container"
          }, [findWhatLabel.call(_this2, "findWhatReplace"), findWhat.call(_this2, "findWhatReplace"), replaceWithLabel, replaceWith]), h("div", {
            "class": "k-actions k-hstack k-justify-content-end"
          }, [h(Button, {
            disabled: !Boolean(nextMatch),
            attrs: _this2.v3 ? void 0 : {
              disabled: !Boolean(nextMatch)
            },
            onClick: _this2.onReplace,
            on: _this2.v3 ? void 0 : {
              "click": _this2.onReplace
            }
          }, _this2.v3 ? function() {
            return [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])];
          } : [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])]), h(Button, {
            disabled: !Boolean(nextMatch),
            attrs: _this2.v3 ? void 0 : {
              disabled: !Boolean(nextMatch)
            },
            onClick: _this2.onReplaceAll,
            on: _this2.v3 ? void 0 : {
              "click": _this2.onReplaceAll
            }
          }, _this2.v3 ? function() {
            return [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])];
          } : [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])])]), checkboxes, navigation.call(_this2, "findWhatReplace")];
        } : [h("div", {
          "class": "k-edit-form-container"
        }, [findWhatLabel.call(_this2, "findWhatReplace"), findWhat.call(_this2, "findWhatReplace"), replaceWithLabel, replaceWith]), h("div", {
          "class": "k-actions k-hstack k-justify-content-end"
        }, [h(Button, {
          disabled: !Boolean(nextMatch),
          attrs: _this2.v3 ? void 0 : {
            disabled: !Boolean(nextMatch)
          },
          onClick: _this2.onReplace,
          on: _this2.v3 ? void 0 : {
            "click": _this2.onReplace
          }
        }, _this2.v3 ? function() {
          return [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])];
        } : [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])]), h(Button, {
          disabled: !Boolean(nextMatch),
          attrs: _this2.v3 ? void 0 : {
            disabled: !Boolean(nextMatch)
          },
          onClick: _this2.onReplaceAll,
          on: _this2.v3 ? void 0 : {
            "click": _this2.onReplaceAll
          }
        }, _this2.v3 ? function() {
          return [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])];
        } : [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])])]), checkboxes, navigation.call(_this2, "findWhatReplace")])];
      } : [h(TabStripTab, {
        title: localization.toLanguageString(findReplaceTabFind2, messages[findReplaceTabFind2]),
        attrs: _this2.v3 ? void 0 : {
          title: localization.toLanguageString(findReplaceTabFind2, messages[findReplaceTabFind2])
        }
      }, _this2.v3 ? function() {
        return [h("div", {
          "class": "k-edit-form-container"
        }, [findWhatLabel.call(_this2, "findWhatFind"), findWhat.call(_this2, "findWhatFind")]), h("div", {
          "class": "k-actions k-hstack k-justify-content-end"
        }), checkboxes, navigation.call(_this2, "findWhatFind")];
      } : [h("div", {
        "class": "k-edit-form-container"
      }, [findWhatLabel.call(_this2, "findWhatFind"), findWhat.call(_this2, "findWhatFind")]), h("div", {
        "class": "k-actions k-hstack k-justify-content-end"
      }), checkboxes, navigation.call(_this2, "findWhatFind")]), h(TabStripTab, {
        title: localization.toLanguageString(findReplaceTabReplace2, messages[findReplaceTabReplace2]),
        attrs: _this2.v3 ? void 0 : {
          title: localization.toLanguageString(findReplaceTabReplace2, messages[findReplaceTabReplace2])
        }
      }, _this2.v3 ? function() {
        return [h("div", {
          "class": "k-edit-form-container"
        }, [findWhatLabel.call(_this2, "findWhatReplace"), findWhat.call(_this2, "findWhatReplace"), replaceWithLabel, replaceWith]), h("div", {
          "class": "k-actions k-hstack k-justify-content-end"
        }, [h(Button, {
          disabled: !Boolean(nextMatch),
          attrs: _this2.v3 ? void 0 : {
            disabled: !Boolean(nextMatch)
          },
          onClick: _this2.onReplace,
          on: _this2.v3 ? void 0 : {
            "click": _this2.onReplace
          }
        }, _this2.v3 ? function() {
          return [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])];
        } : [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])]), h(Button, {
          disabled: !Boolean(nextMatch),
          attrs: _this2.v3 ? void 0 : {
            disabled: !Boolean(nextMatch)
          },
          onClick: _this2.onReplaceAll,
          on: _this2.v3 ? void 0 : {
            "click": _this2.onReplaceAll
          }
        }, _this2.v3 ? function() {
          return [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])];
        } : [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])])]), checkboxes, navigation.call(_this2, "findWhatReplace")];
      } : [h("div", {
        "class": "k-edit-form-container"
      }, [findWhatLabel.call(_this2, "findWhatReplace"), findWhat.call(_this2, "findWhatReplace"), replaceWithLabel, replaceWith]), h("div", {
        "class": "k-actions k-hstack k-justify-content-end"
      }, [h(Button, {
        disabled: !Boolean(nextMatch),
        attrs: _this2.v3 ? void 0 : {
          disabled: !Boolean(nextMatch)
        },
        onClick: _this2.onReplace,
        on: _this2.v3 ? void 0 : {
          "click": _this2.onReplace
        }
      }, _this2.v3 ? function() {
        return [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])];
      } : [localization.toLanguageString(findReplaceReplace2, messages[findReplaceReplace2])]), h(Button, {
        disabled: !Boolean(nextMatch),
        attrs: _this2.v3 ? void 0 : {
          disabled: !Boolean(nextMatch)
        },
        onClick: _this2.onReplaceAll,
        on: _this2.v3 ? void 0 : {
          "click": _this2.onReplaceAll
        }
      }, _this2.v3 ? function() {
        return [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])];
      } : [localization.toLanguageString(findReplaceReplaceAll2, messages[findReplaceReplaceAll2])])]), checkboxes, navigation.call(_this2, "findWhatReplace")])])])
    );
  },
  methods: {
    onTabSelect: function onTabSelect(event) {
      this.selectedTab = event.selected;
    },
    onClose: function onClose4() {
      var view = this.$props.view;
      var state = view.state;
      var transaction = state.tr.setSelection(TextSelection.create(state.doc, state.selection.from, state.selection.to));
      view.updateState(state.apply(transaction));
      view.focus();
      this.$emit("close");
    },
    matchesMessage: function matchesMessage(locMessage) {
      var matches2 = this.matches;
      var nextMatch = this.nextMatch;
      var cur = 0, all = 0;
      if (matches2 && nextMatch) {
        var current = matches2.findIndex(function(s) {
          return s.eq(nextMatch);
        });
        cur = current === -1 ? matches2.length : current + 1;
        all = matches2.length;
      }
      return formatString(locMessage, cur, all);
    },
    onFindNext: function onFindNext() {
      this.onFind();
    },
    onFindPrev: function onFindPrev() {
      this.onFind(true);
    },
    onFind: function onFind(backward) {
      if (backward === void 0) {
        backward = false;
      }
      var view = this.$props.view;
      var _a2 = this.$data, text = _a2.searchText, matchCase = _a2.matchCase, matchCyclic = _a2.matchCyclic, matchWord = _a2.matchWord, useRegExp = _a2.useRegExp;
      var searchOptions = {
        text,
        matchWord,
        matchCase,
        useRegExp,
        backward,
        matchCyclic
      };
      var selectionResult = find(view.state, searchOptions);
      if (selectionResult) {
        var transaction = view.state.tr.setSelection(selectionResult);
        transaction.scrollIntoView();
        view.updateState(view.state.apply(transaction));
        this._prevMatch = this.nextMatch;
        this.nextMatch = selectionResult;
        if (this._prevMatch !== this.nextMatch) {
          this.$forceUpdate();
        }
      }
    },
    onReplace: function onReplace() {
      var view = this.$props.view;
      var selection = view.state.selection;
      var replaceText = this.$data.replaceText;
      if (!selection.empty) {
        var start = selection.from;
        var end = start + replaceText.length;
        var transaction = replace2(selection, replaceText, view.state.tr);
        transaction.setSelection(TextSelection.create(transaction.doc, start, end));
        transaction.scrollIntoView();
        view.dispatch(transaction);
        this.setNextState({});
      }
    },
    onReplaceAll: function onReplaceAll() {
      var view = this.$props.view;
      var _a2 = this.$data, searchText = _a2.searchText, replaceText = _a2.replaceText, matchCase = _a2.matchCase, matchWord = _a2.matchWord, useRegExp = _a2.useRegExp;
      var searchOptions = {
        text: searchText,
        matchWord,
        matchCase,
        useRegExp
      };
      view.dispatch(replaceAll(view.state, replaceText, searchOptions));
      this.setNextState({});
    },
    onKeyDown: function onKeyDown(event) {
      if (event.keyCode === enter) {
        this.onFindNext();
      } else if (event.keyCode === esc) {
        this.onClose();
      }
    },
    onMatchCaseChecked: function onMatchCaseChecked(e) {
      this.matchCase = e.target.checked;
      this.setNextState();
    },
    onMatchWordChecked: function onMatchWordChecked(e) {
      this.matchWord = e.target.checked;
      this.setNextState();
    },
    onMatchCyclicChecked: function onMatchCyclicChecked(e) {
      this.matchCyclic = e.target.checked;
      this.setNextState();
    },
    onUseRegExpChecked: function onUseRegExpChecked(e) {
      this.useRegExp = e.target.checked;
      this.setNextState();
    },
    onSearchChange: function onSearchChange(e) {
      this.searchText = e.target.value;
      this.setNextState();
    },
    onReplaceChange: function onReplaceChange(e) {
      this.replaceText = e.target.value;
      this.setNextState();
    },
    setNextState: function setNextState() {
      var view = this.$props.view;
      if (this.searchText) {
        var searchOptions = {
          text: this.searchText,
          matchWord: this.matchWord,
          matchCase: this.matchCase,
          useRegExp: this.useRegExp
        };
        var selection_1 = view.state.selection;
        var matches2 = findAll(view.state.doc, searchOptions);
        var nextMatch = !this.searchText && matches2[0] || matches2.find(function(match) {
          return match.from >= selection_1.from;
        }) || this.matchCyclic && matches2[0] || void 0;
        this._prevMatch = this.nextMatch;
        this.matches = matches2;
        this.nextMatch = nextMatch;
      } else {
        this._prevMatch = this.nextMatch;
        this.matches = [];
        this.nextMatch = void 0;
      }
    }
  }
};
var FindAndReplaceDialog = FindAndReplaceDialogVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/findReplace.js
var __assign26 = function() {
  __assign26 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign26.apply(this, arguments);
};
var __rest19 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue29 = vue_runtime_esm_bundler_exports;
var gh28 = allVue29.h;
var isV329 = allVue29.version && allVue29.version[0] === "3";
var settings2 = EditorToolsSettings.findAndReplace;
var FindAndReplaceVue2 = {
  name: "KendoFindAndReplace",
  props: __assign26({
    view: Object
  }, Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data11() {
    return {
      showDialog: false
    };
  },
  // @ts-ignore
  setup: !isV329 ? void 0 : function() {
    var v3 = !!isV329;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render28(createElement) {
    var h = gh28 || createElement;
    var _a2 = this.$props, view = _a2.view, other = __rest19(_a2, ["view"]);
    var localization = provideLocalizationService(this);
    var titleKey = settings2.messages.findReplaceToolTitle;
    var buttonProps = __assign26(__assign26(__assign26({}, other), {
      key: "tool",
      disabled: !view,
      title: localization.toLanguageString(titleKey, messages[titleKey])
    }), settings2.props);
    var button = h(Button, __assign26({
      onClick: this.onOpen,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? void 0 : {
        "click": this.onOpen,
        "mousedown": this.preventDefault,
        "pointerdown": this.preventDefault
      },
      attrs: this.v3 ? void 0 : buttonProps
    }, buttonProps));
    return h("span", [button, this.showDialog && view && // @ts-ignore function children
    h(FindAndReplaceDialog, {
      view,
      attrs: this.v3 ? void 0 : {
        view,
        dir: this.$props.dir
      },
      onClose: this.onClose,
      on: this.v3 ? void 0 : {
        "close": this.onClose
      },
      dir: this.$props.dir,
      key: "dialog"
    })]);
  },
  methods: {
    onClose: function onClose5() {
      this.showDialog = false;
    },
    onOpen: function onOpen() {
      this.showDialog = true;
    },
    preventDefault: function preventDefault14(e) {
      e.preventDefault();
    }
  }
};
var FindAndReplace = FindAndReplaceVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/tools/applyColor.js
var __assign27 = function() {
  __assign27 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign27.apply(this, arguments);
};
var allVue30 = vue_runtime_esm_bundler_exports;
var gh29 = allVue30.h;
var isV330 = allVue30.version && allVue30.version[0] === "3";
var ApplyColorVue2 = {
  name: "KendoApplyColor",
  props: {
    view: Object,
    color: String,
    colorPickerProps: Object,
    commandName: String,
    dir: String,
    ariaLabel: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV330 ? void 0 : function() {
    var v3 = !!isV330;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render29(createElement) {
    var h = gh29 || createElement;
    var _a2 = this.$props, colorPickerProps = _a2.colorPickerProps, dir = _a2.dir, ariaLabel = _a2.ariaLabel;
    var titleKey = colorPickerProps.title;
    var localization = provideLocalizationService(this);
    var cpProps = __assign27(__assign27({}, colorPickerProps), {
      dir,
      showButtons: false,
      showClearButton: false,
      showPreview: false,
      title: titleKey ? localization.toLanguageString(titleKey, messages[titleKey]) : titleKey,
      ariaLabel
    });
    var cp = h(ColorPicker, __assign27({
      onChange: this.onChange,
      onActivecolorclick: this.onChange,
      on: this.v3 ? void 0 : {
        "change": this.onChange,
        "activecolorclick": this.onChange
      },
      attrs: this.v3 ? void 0 : cpProps
    }, cpProps));
    return cp;
  },
  methods: {
    onChange: function onChange3(event) {
      var _a2 = this.$props, view = _a2.view, color = _a2.color, colorPickerProps = _a2.colorPickerProps, commandName = _a2.commandName;
      if (view) {
        applyInlineStyle({
          style: color,
          value: event.value
        }, commandName)(view.state, view.dispatch);
        var _b = colorPickerProps.view, paletteView = _b === void 0 ? "palette" : _b;
        if (paletteView === "palette") {
          view.focus();
        }
      }
    }
  }
};
var ApplyColor = ApplyColorVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/Editor.js
var __assign28 = function() {
  __assign28 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign28.apply(this, arguments);
};
var __spreadArray5 = function(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
};
var allVue31 = vue_runtime_esm_bundler_exports;
var gh30 = allVue31.h;
var isV331 = allVue31.version && allVue31.version[0] === "3";
var markRaw = allVue31.markRaw;
var toRaw = allVue31.toRaw;
var link2 = EditorToolsSettings.link;
var bold4 = EditorToolsSettings.bold;
var italic4 = EditorToolsSettings.italic;
var underline4 = EditorToolsSettings.underline;
var allTools = {
  "Bold": {
    comp: InlineFormat,
    props: EditorToolsSettings.bold
  },
  "Italic": {
    comp: InlineFormat,
    props: EditorToolsSettings.italic
  },
  "Underline": {
    comp: InlineFormat,
    props: EditorToolsSettings.underline
  },
  "Strikethrough": {
    comp: InlineFormat,
    props: EditorToolsSettings.strikethrough
  },
  "Subscript": {
    comp: InlineFormat,
    props: EditorToolsSettings.subscript
  },
  "Superscript": {
    comp: InlineFormat,
    props: EditorToolsSettings.superscript
  },
  "AlignLeft": {
    comp: Align,
    props: EditorToolsSettings.alignLeft
  },
  "AlignCenter": {
    comp: Align,
    props: EditorToolsSettings.alignCenter
  },
  "AlignRight": {
    comp: Align,
    props: EditorToolsSettings.alignRight
  },
  "AlignJustify": {
    comp: Align,
    props: EditorToolsSettings.alignJustify
  },
  "Indent": {
    comp: Indent,
    props: EditorToolsSettings.indent
  },
  "Outdent": {
    comp: Outdent,
    props: EditorToolsSettings.outdent
  },
  "OrderedList": {
    comp: List,
    props: EditorToolsSettings.orderedList
  },
  "UnorderedList": {
    comp: List,
    props: EditorToolsSettings.bulletList
  },
  "FontSize": {
    comp: FontName,
    props: EditorToolsSettings.fontSize
  },
  "FontName": {
    comp: FontName,
    props: EditorToolsSettings.fontName
  },
  "FormatBlock": {
    comp: FormatBlock,
    props: EditorToolsSettings.formatBlock
  },
  "Undo": {
    comp: ProseMirror,
    props: EditorToolsSettings.undo
  },
  "Redo": {
    comp: ProseMirror,
    props: EditorToolsSettings.redo
  },
  "Link": {
    comp: LinkTool,
    props: EditorToolsSettings.link
  },
  "Unlink": {
    comp: Unlink,
    props: EditorToolsSettings.unlink
  },
  "InsertImage": {
    comp: InsertImage,
    props: EditorToolsSettings.image
  },
  "ViewHtml": {
    comp: ViewHtml,
    props: EditorToolsSettings.viewHtml
  },
  "CleanFormatting": {
    comp: CleanFormatting,
    props: EditorToolsSettings.cleanFormatting
  },
  "SelectAll": {
    comp: SelectAll,
    props: EditorToolsSettings.selectAll
  },
  "InsertTable": {
    comp: InsertTable,
    props: EditorToolsSettings.insertTable
  },
  "MergeCells": {
    comp: ProseMirror,
    props: EditorToolsSettings.mergeCells
  },
  "SplitCell": {
    comp: ProseMirror,
    props: EditorToolsSettings.splitCell
  },
  "AddRowBefore": {
    comp: ProseMirror,
    props: EditorToolsSettings.addRowBefore
  },
  "AddRowAfter": {
    comp: ProseMirror,
    props: EditorToolsSettings.addRowAfter
  },
  "AddColumnBefore": {
    comp: ProseMirror,
    props: EditorToolsSettings.addColumnBefore
  },
  "AddColumnAfter": {
    comp: ProseMirror,
    props: EditorToolsSettings.addColumnAfter
  },
  "DeleteRow": {
    comp: ProseMirror,
    props: EditorToolsSettings.deleteRow
  },
  "DeleteColumn": {
    comp: ProseMirror,
    props: EditorToolsSettings.deleteColumn
  },
  "DeleteTable": {
    comp: ProseMirror,
    props: EditorToolsSettings.deleteTable
  },
  "Print": {
    comp: Print,
    props: EditorToolsSettings.print
  },
  "Pdf": {
    comp: Pdf,
    props: EditorToolsSettings.pdf
  },
  "InsertFile": {
    comp: LinkTool,
    props: EditorToolsSettings.insertFile
  },
  "FindAndReplace": {
    comp: FindAndReplace,
    props: EditorToolsSettings.findAndReplace
  },
  "ForeColor": {
    comp: ApplyColor,
    props: EditorToolsSettings.foreColor
  },
  "BackColor": {
    comp: ApplyColor,
    props: EditorToolsSettings.backColor
  }
};
var EditorVue2 = {
  name: "KendoEditor",
  // @ts-ignore
  emits: {
    focus: null,
    blur: null,
    change: null,
    loaded: null,
    execute: null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    defaultContent: String,
    value: [Object, String],
    defaultEditMode: {
      type: String,
      default: "iframe",
      validator: function validator(value2) {
        return ["iframe", "div"].includes(value2);
      }
    },
    contentStyle: Object,
    dir: String,
    tools: Array,
    keyboardNavigation: {
      type: Boolean,
      default: true
    },
    resizable: Boolean,
    preserveWhitespace: {
      type: [String, Boolean],
      default: "full",
      validator: function validator2(value2) {
        return [true, false, "full"].includes(value2);
      }
    },
    pasteHtml: Function,
    extendView: Function,
    ariaDescribedBy: String,
    ariaLabelledBy: String,
    ariaLabel: String
  },
  data: function data12() {
    return {
      updateGuid: guid(),
      view: void 0,
      linkDialog: false
    };
  },
  created: function created5() {
    this._view = void 0;
    this.trOnChange = null;
    this.valueisUpdated = false;
    this._prevValue = this.$props.value;
    validatePackage(packageMetadata);
  },
  mounted: function mounted7() {
    this.iframe = getRef(this, "iframe");
    this.contentElement = getRef(this, "contentElement");
    if (!this.iframe || !firefox) {
      this.initialize();
    }
  },
  watch: {
    value: function value(_newNextMatch, oldMatch) {
      this.valueisUpdated = true;
      this._prevValue = oldMatch;
    }
  },
  updated: function updated3() {
    var value2 = this.$props.value;
    var view = this.getView();
    if (value2 === void 0 || !this.valueisUpdated || !view) {
      return;
    }
    updateEditorValue(view, this.computedValue(), this._prevValue, this.trOnChange, this.htmlOnChange);
    this.valueisUpdated = false;
    this.trOnChange = null;
    this.htmlOnChange = null;
  },
  destroyed: !!isV331 ? void 0 : function() {
    if (this.getView()) {
      this.getView().destroy();
    }
    this.view = void 0;
    this._view = void 0;
  },
  // @ts-ignore
  unmounted: function unmounted4() {
    if (this.getView()) {
      this.getView().destroy();
    }
    this.view = void 0;
    this._view = void 0;
  },
  // @ts-ignore
  setup: !isV331 ? void 0 : function() {
    var v3 = !!isV331;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render30(createElement) {
    var h = gh30 || createElement;
    var toolindex = 100;
    var _a2 = this.$props, _b = _a2.tools, tools = _b === void 0 ? [] : _b, _c = _a2.defaultEditMode, defaultEditMode = _c === void 0 ? "iframe" : _c, _d = _a2.preserveWhitespace, preserveWhitespace = _d === void 0 ? "full" : _d, style2 = _a2.style, value2 = _a2.value;
    var view = this.getView();
    var ls = provideLocalizationService(this);
    if (this.view) {
      var editorProps = editorPropsKey.getState(this.view.state);
      editorProps.preserveWhitespace = preserveWhitespace;
    }
    var cs = this.$props.contentStyle;
    var contentStyle = this.v3 ? cs : value2 ? cs : cs;
    if (contentStyle === void 0 && (style2 || {}).height === void 0) {
      contentStyle = {
        height: "300px"
      };
    }
    var renderDialog = function renderDialog2() {
      return this.linkDialog && // @ts-ignore function children
      h(InsertLinkDialog, {
        view,
        attrs: this.v3 ? void 0 : {
          view,
          settings: link2,
          dir: this.$props.dir
        },
        settings: link2,
        dir: this.$props.dir,
        onClose: this.handleClose,
        on: this.v3 ? void 0 : {
          "close": this.handleClose
        }
      });
    };
    var renderTool = function renderTool2(currentTool, _index) {
      var ct = allTools[currentTool] || currentTool;
      var getAriaLabel = function getAriaLabel2() {
        var ariaLabel;
        if (currentTool === "ForeColor") {
          ariaLabel = ls.toLanguageString(keys2.foregroundColorAriaLabel, messages[keys2.foregroundColorAriaLabel]);
        } else if (currentTool === "BackColor") {
          ariaLabel = ls.toLanguageString(keys2.backgroundColor, messages[keys2.backgroundColor]);
        }
        return ariaLabel;
      };
      if (allTools[currentTool]) {
        toolindex++;
        var toolProps = __assign28(__assign28({
          view,
          dir: this.$props.dir,
          key: toolindex,
          updateGuid: this.updateGuid,
          settings: allTools[currentTool].props
        }, allTools[currentTool].props), {
          ariaLabel: getAriaLabel()
        });
        return h(this.v3 ? markRaw(allTools[currentTool].comp) : allTools[currentTool].comp, this.v3 ? toolProps : {
          props: toolProps
        });
      } else if (ct === "Separator") {
        return (
          // @ts-ignore
          h(ToolbarSeparator, {
            key: toolindex
          })
        );
      } else {
        var tool = templateRendering.call(this, ct.render, getListeners.call(this));
        return getTemplate.call(this, {
          h,
          template: tool,
          defaultRendering: null,
          additionalListeners: {},
          additionalProps: {
            view,
            dir: this.$props.dir,
            updateGuid: this.updateGuid,
            key: toolindex,
            settings: ct.props
          }
        });
      }
    };
    var renderTools = function renderTools2(item, index) {
      return item.map(function(it) {
        return renderTool.call(this, it, index);
      }, this);
    };
    var buttons = tools.map(function(item, index) {
      var _this2 = this;
      return Array.isArray(item) ? (
        // @ts-ignore function children
        h(ButtonGroup, {
          key: index
        }, this.v3 ? function() {
          return [renderTools.call(_this2, item, index)];
        } : [renderTools.call(_this2, item, index)])
      ) : renderTool.call(this, item, index);
    }, this);
    return h("div", {
      "class": classNames("k-editor", {
        "k-editor-resizable": this.$props.resizable
      }),
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      }
    }, [buttons.length > 0 && // @ts-ignore function children
    h(Toolbar, {
      "class": "k-editor-toolbar",
      keyboardNavigation: this.$props.keyboardNavigation,
      attrs: this.v3 ? void 0 : {
        keyboardNavigation: this.$props.keyboardNavigation
      }
    }, this.v3 ? function() {
      return [buttons];
    } : [buttons]), defaultEditMode === "iframe" ? h("div", {
      "class": "k-editor-content"
    }, [h("iframe", {
      onLoad: this.iframeLoad,
      on: this.v3 ? void 0 : {
        "load": this.iframeLoad
      },
      ref: setRef(this, "iframe"),
      frameborder: "0",
      attrs: this.v3 ? void 0 : {
        frameborder: "0",
        title: ls.toLanguageString(keys2.iframeTitle, messages[keys2.iframeTitle])
      },
      title: ls.toLanguageString(keys2.iframeTitle, messages[keys2.iframeTitle]),
      style: contentStyle,
      "class": "k-iframe"
    })]) : h("div", {
      style: contentStyle,
      "class": "k-editor-content"
    }, [h("div", {
      ref: setRef(this, "contentElement"),
      role: "textbox",
      attrs: this.v3 ? void 0 : {
        role: "textbox",
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        "aria-label": this.$props.ariaLabel
      },
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      "aria-label": this.$props.ariaLabel
    })]), renderDialog.call(this)]);
  },
  methods: {
    getView: function getView() {
      return this.view;
    },
    getHTML: function getHTML() {
      var view = this.getView();
      if (view) {
        return EditorUtils.getHtml(view.state);
      }
      return "";
    },
    setHTML: function setHTML(value2) {
      var view = this.getView();
      if (view) {
        EditorUtils.setHtml(view, value2);
      }
    },
    focus: function focus() {
      if (this.getView()) {
        this.getView().focus();
      }
    },
    updateTools: function updateTools(view) {
      if (this.v3) {
        this.view = view;
      } else {
        this._view = view;
      }
      if (this.v3) {
        this.updateGuid = guid();
      }
    },
    iframeLoad: function iframeLoad() {
      if (firefox) {
        this.initialize();
      }
    },
    initialize: function initialize() {
      var _this = this;
      var iframeWindow = this.iframe && this.iframe.contentWindow;
      if (iframeWindow) {
        var iframeDocument_1 = iframeWindow.document;
        [defaultStyle, tablesStyles, this.$props.dir === "rtl" ? rtlStyles : void 0].forEach(function(styles) {
          if (styles) {
            var style2 = iframeDocument_1.createElement("style");
            style2.appendChild(iframeDocument_1.createTextNode(styles));
            iframeDocument_1.head.appendChild(style2);
          }
        });
        var meta = iframeDocument_1.createElement("meta");
        meta.setAttribute("charset", "utf-8");
        iframeDocument_1.head.appendChild(meta);
        this.contentElement = iframeDocument_1.createElement("div");
        iframeDocument_1.body.appendChild(this.contentElement);
        this.contentElement.classList.add("k-content");
        this.contentElement.setAttribute("role", "main");
      }
      var dom = this.contentElement;
      if (!dom) {
        return;
      }
      var _a2 = this.$props.preserveWhitespace, preserveWhitespace = _a2 === void 0 ? "full" : _a2;
      var target = this;
      var plugins = [
        // https://prosemirror.net/docs/ref/#state.PluginSpec
        new Plugin({
          view: function view2() {
            return {
              update: _this.updateTools
            };
          },
          key: new PluginKey("toolbar-tools-update-plugin")
        }),
        new Plugin({
          filterTransaction: this.filterTransaction,
          key: new PluginKey("onExecute-event-plugin")
        }),
        new Plugin({
          key: editorPropsKey,
          state: {
            init: function init() {
              return {
                preserveWhitespace
              };
            },
            apply: function apply2(_, val) {
              return val;
            }
          }
        }),
        spacesFix(),
        history(),
        dropCursor(),
        gapCursor(),
        tableEditing()
      ];
      var shortcuts = __assign28(__assign28({}, EditorUtils.getShortcuts({
        types: {
          listItem: "list_item",
          hardBreak: "hard_break"
        },
        toolsSettings: {
          bold: bold4,
          italic: italic4,
          underline: underline4
        }
      })), {
        "Mod-k": function ModK() {
          var linkDialog = _this.$data.linkDialog;
          var editorView = _this.getView();
          if (editorView) {
            var editorState = editorView.state;
            var collapsed = editorState.selection.empty;
            var linkMark = getMark(editorState, editorState.schema.marks[link2.mark]);
            var disabled = collapsed && !linkMark;
            if (!linkDialog && !disabled) {
              _this.linkDialog = true;
            }
          }
          return !linkDialog;
        }
      });
      var _b = this.$props, _c = _b.defaultContent, defaultContent = _c === void 0 ? "" : _c, value2 = _b.value;
      var doc3 = value2 && typeof value2 !== "string" ? this.v3 ? toRaw(value2) : value2 : EditorUtils.createDocument(new Schema({
        nodes: nodes2,
        marks
      }), value2 || defaultContent, {
        preserveWhitespace
      });
      var viewProps = {
        state: EditorState.create({
          plugins: __spreadArray5(__spreadArray5([], plugins, true), [keymap(shortcuts), keymap(baseKeymap)], false),
          doc: doc3
        }),
        transformPastedHTML: this.onPasteHtml,
        dispatchTransaction: this.dispatchTransaction,
        handleDOMEvents: {
          focus: this.onFocus,
          blur: this.onBlur,
          paste: this.onPaste
        }
      };
      var mountEvent = {
        plugins,
        shortcuts,
        target,
        viewProps,
        dom
      };
      this.$emit("loaded", mountEvent);
      var view = this.$props.extendView && this.$props.extendView(mountEvent) || new EditorView({
        mount: dom
      }, viewProps);
      this.view = this.v3 ? markRaw(view) : view;
    },
    filterTransaction: function filterTransaction(transaction, state) {
      var event = {
        target: this,
        transaction,
        state
      };
      this.$emit("execute", event);
      return true;
    },
    onPasteHtml: function onPasteHtml(html) {
      if (this.$props.pasteHtml && this.pasteEvent) {
        var event_1 = {
          target: this,
          pastedHtml: html,
          event: this.pasteEvent
        };
        var newHtml = this.$props.pasteHtml(event_1);
        this.pasteEvent = void 0;
        if (typeof newHtml === "string") {
          return newHtml;
        }
      }
      return html;
    },
    dispatchTransaction: function dispatchTransaction(transaction) {
      var docChanged = transaction.docChanged;
      if (docChanged) {
        this.trOnChange = transaction;
        var doc_1 = transaction.doc, schema_1 = transaction.doc.type.schema;
        var target_1 = this;
        var event_2 = {
          target: target_1,
          value: doc_1,
          get html() {
            target_1.htmlOnChange = EditorUtils.getHtml({
              doc: doc_1,
              schema: schema_1
            });
            return target_1.htmlOnChange;
          },
          transaction,
          schema: schema_1
        };
        this.$emit("change", event_2);
      }
      if (this.getView() && (this.$props.value === void 0 || !docChanged)) {
        this.getView().updateState(this.getView().state.apply(transaction));
      }
    },
    onFocus: function onFocus(_view, e) {
      var event = {
        target: this,
        event: e
      };
      this.$emit("focus", event);
      return false;
    },
    onBlur: function onBlur(_view, e) {
      var event = {
        target: this,
        event: e
      };
      this.$emit("blur", event);
      return false;
    },
    onPaste: function onPaste(_view, nativeEvent) {
      if (this.$props.pasteHtml) {
        this.pasteEvent = nativeEvent;
      }
      return false;
    },
    handleClose: function handleClose() {
      this.linkDialog = false;
    },
    computedValue: function computedValue() {
      if (this.trOnChange !== null) {
        return this.trOnChange.doc;
      } else if (this.$props.value !== void 0) {
        return this.$props.value;
      } else if (this.getView()) {
        return this.getView().state.doc;
      }
      return this.$props.defaultContent || "";
    }
  }
};
var Editor = EditorVue2;

// node_modules/@progress/kendo-vue-editor/dist/es/main.js
var ProseMirror2 = {
  // prosemirror-state
  Selection,
  SelectionRange,
  TextSelection,
  NodeSelection,
  AllSelection,
  EditorState,
  Plugin,
  PluginKey,
  Transaction,
  // prosemirror-view
  Decoration,
  DecorationSet,
  EditorView,
  // prosemirror-model
  Node: Node2,
  ResolvedPos,
  NodeRange,
  Fragment,
  Slice,
  ReplaceError,
  Mark,
  Schema,
  NodeType,
  MarkType,
  ContentMatch,
  DOMParser: DOMParser2,
  DOMSerializer,
  // prosemirror-transform
  Transform,
  Step,
  StepResult,
  joinPoint,
  canJoin,
  canSplit,
  insertPoint,
  dropPoint,
  liftTarget,
  findWrapping,
  StepMap,
  MapResult,
  Mapping,
  AddMarkStep,
  RemoveMarkStep,
  ReplaceStep,
  ReplaceAroundStep,
  replaceStep,
  // prosemirror-commands
  deleteSelection,
  joinBackward,
  selectNodeBackward,
  joinForward,
  selectNodeForward,
  joinUp,
  joinDown,
  lift: lift2,
  newlineInCode,
  exitCode,
  createParagraphNear,
  liftEmptyBlock,
  splitBlock,
  splitBlockKeepMarks,
  selectParentNode,
  selectAll,
  wrapIn,
  setBlockType: setBlockType2,
  toggleMark: toggleMark2,
  autoJoin,
  chainCommands,
  pcBaseKeymap,
  macBaseKeymap,
  baseKeymap,
  // prosemirror-history
  history,
  undo,
  redo,
  undoDepth,
  redoDepth,
  // prosemirror-inputrules
  InputRule,
  inputRules,
  undoInputRule,
  emDash,
  ellipsis,
  openDoubleQuote,
  closeDoubleQuote,
  openSingleQuote,
  closeSingleQuote,
  smartQuotes,
  wrappingInputRule,
  textblockTypeInputRule,
  // prosemirror-keymap
  keymap,
  keydownHandler,
  // prosemirror-schema-list
  orderedList,
  bulletList,
  listItem,
  addListNodes,
  wrapInList,
  splitListItem,
  liftListItem,
  sinkListItem,
  // prosemirror-dropcursor
  dropCursor,
  // prosemirror-gapcursor
  gapCursor,
  // prosemirror-tables
  tableEditing,
  fixTables,
  fixTablesKey,
  cellAround,
  isInTable,
  selectionCell,
  moveCellForward,
  inSameTable,
  findCell,
  colCount,
  nextCell,
  removeColSpan,
  addColSpan,
  columnIsHeader,
  tableNodes,
  tableNodeTypes,
  CellSelection,
  TableMap,
  tableEditingKey,
  columnResizing,
  columnResizingPluginKey,
  updateColumnsOnResize,
  selectedRect,
  addColumn,
  addColumnBefore: addColumnBefore2,
  addColumnAfter: addColumnAfter2,
  deleteColumn: deleteColumn2,
  rowIsHeader,
  addRow,
  addRowBefore: addRowBefore2,
  addRowAfter: addRowAfter2,
  deleteRow,
  mergeCells,
  splitCell,
  splitCellWithType,
  setCellAttr,
  toggleHeader,
  toggleHeaderRow,
  toggleHeaderColumn,
  toggleHeaderCell,
  goToNextCell,
  deleteTable
};
export {
  Align,
  ApplyColor,
  CleanFormatting,
  Editor,
  EditorToolsSettings,
  EditorUtils,
  FindAndReplace,
  FontName,
  FormatBlock,
  Indent,
  InlineFormat,
  InsertImage,
  InsertTable,
  LinkTool,
  List,
  Outdent,
  Pdf,
  Print,
  ProseMirror2 as ProseMirror,
  ProseMirror as ProseMirrorTool,
  SelectAll,
  Unlink,
  ViewHtml
};
//# sourceMappingURL=@progress_kendo-vue-editor.js.map
