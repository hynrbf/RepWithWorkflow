import {
  provideLocalizationService
} from "./chunk-TNWINVQ6.js";
import {
  Button
} from "./chunk-EA6IUSJI.js";
import {
  windowIcon,
  windowMinimizeIcon,
  windowRestoreIcon,
  xIcon
} from "./chunk-HKPTYRTE.js";
import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value) {
  return typeof value === "object";
};

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/keys.js
var Keys = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  delete: 46
};

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);
var Draggable = DraggableVue2;

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function hasListener(eventName) {
  if (this.v3) {
    return Object.keys(this.$attrs).map(function(name) {
      return name.toLowerCase();
    }).some(function(event) {
      return event.endsWith(eventName.toLowerCase());
    });
  } else {
    return this.$listeners[eventName];
  }
}
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
var templateDefinition = {
  type: [String, Function, Object, Boolean],
  default: function() {
    return void 0;
  }
};
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a2) {
  var h = _a2.h, template = _a2.template, defaultRendering = _a2.defaultRendering, defaultSlots = _a2.defaultSlots, additionalProps = _a2.additionalProps, additionalListeners = _a2.additionalListeners, swapDefaultSlots = _a2.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata2) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata2);
  } else {
    var message = "License activation failed for ".concat(packageMetadata2.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata2.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";

// node_modules/@progress/kendo-vue-dialogs/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation2.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation2.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation2.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-vue-dialogs/dist/es/DialogTitleBar.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var DialogTitleBarVue2 = {
  props: {
    id: String,
    closeIcon: {
      type: Boolean,
      default: true
    },
    title: String,
    titleRender: [String, Function, Object]
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  methods: {
    onCloseButtonClick: function onCloseButtonClick(e) {
      this.$emit("closebuttonclick", e);
    }
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh5 || createElement;
    var _a2 = this.$props, id = _a2.id, closeIcon = _a2.closeIcon, titleRender = _a2.titleRender, title = _a2.title;
    var titleElement;
    titleElement = getTemplate.call(this, {
      h,
      template: titleRender,
      defaultRendering: title
    });
    return h("div", {
      "class": "k-window-titlebar k-dialog-titlebar",
      id,
      attrs: this.v3 ? void 0 : {
        id
      }
    }, [h("span", {
      "class": "k-window-title k-dialog-title"
    }, [titleElement]), h("div", {
      "class": "k-window-titlebar-actions k-dialog-titlebar-actions"
    }, [closeIcon && // @ts-ignore
    h(Button, {
      type: "button",
      attrs: this.v3 ? void 0 : {
        type: "button",
        fillMode: "flat",
        "aria-label": "Close",
        icon: "x",
        svgIcon: xIcon
      },
      fillMode: "flat",
      "aria-label": "Close",
      icon: "x",
      svgIcon: xIcon,
      onClick: this.onCloseButtonClick,
      on: this.v3 ? void 0 : {
        "click": this.onCloseButtonClick
      },
      "class": "k-window-titlebar-action k-dialog-titlebar-action"
    })])]);
  }
};
var DialogTitleBar = DialogTitleBarVue2;

// node_modules/@progress/kendo-vue-dialogs/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-dialogs",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693312498,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-dialogs/dist/es/constants.js
var DEFAULT_DIALOGS_ZINDEX = 10002;

// node_modules/@progress/kendo-vue-dialogs/dist/es/Dialog.js
var allVue7 = vue_runtime_esm_bundler_exports;
var gh6 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";
var DialogVue2 = {
  name: "KendoDialog",
  // @ts-ignore
  emits: {
    close: null,
    overlayclick: null
  },
  props: {
    appendTo: String,
    title: String,
    titleRender: templateDefinition,
    id: String,
    wrapperId: String,
    dir: String,
    closeIcon: {
      type: Boolean,
      default: true
    },
    width: [String, Number],
    height: [String, Number],
    minWidth: [String, Number],
    dialogClass: String,
    themeColor: {
      type: String,
      validator: function validator(value) {
        return ["primary", "dark", "light"].includes(value);
      }
    }
  },
  provide: function provide() {
    return {
      kCurrentZIndex: DEFAULT_DIALOGS_ZINDEX
    };
  },
  created: function created2() {
    validatePackage(packageMetadata);
    this.titleId = this.generateTitleId();
    this.contentId = this.generateContentId();
  },
  // @ts-ignore
  setup: !isV37 ? void 0 : function() {
    var v3 = !!isV37;
    return {
      v3
    };
  },
  computed: {
    dialogElementClass: function dialogElementClass() {
      var _a2;
      var _b = this.$props, dialogClass = _b.dialogClass, themeColor = _b.themeColor;
      return _a2 = {
        "k-window": true,
        "k-dialog": true
      }, _a2[dialogClass] = dialogClass, _a2["k-window-".concat(themeColor)] = themeColor, _a2;
    }
  },
  mounted: function mounted2() {
    if (this.$props.appendTo) {
      var body = document.querySelector(this.$props.appendTo);
      this.windowElement = this.$refs.wrapper;
      body.append(this.windowElement);
    }
  },
  beforeDestroy: !!isV37 ? void 0 : function() {
    if (this.$props.appendTo) {
      this.windowElement.remove();
    }
  },
  // @ts-ignore
  beforeUnmount: function beforeUnmount() {
    if (this.$props.appendTo) {
      this.windowElement.remove();
    }
  },
  methods: {
    handleCloseDialog: function handleCloseDialog(event) {
      event.preventDefault();
      this.$emit("close", {
        event,
        target: this
      });
    },
    handleKeyDown: function handleKeyDown(event) {
      if (event.keyCode === Keys.esc && hasListener.call(this, "close")) {
        event.preventDefault();
        this.handleCloseDialog(event);
      }
    },
    transformDimesion: function transformDimesion(initialValue) {
      return typeof initialValue === "string" ? initialValue.endsWith("px") || initialValue.endsWith("%") ? initialValue : initialValue + "px" : initialValue + "px";
    },
    getActionBarIndex: function getActionBarIndex(children) {
      var actionBarIndex = children.findIndex(function(child) {
        return child && child.tag && child.tag.toLowerCase().indexOf("dialogactionsbar") !== -1 || child.componentOptions && child.componentOptions.tag && child.componentOptions.tag.toLowerCase().indexOf("actions-bar") !== -1 || child.type && child.type.name && child.type.name.toLowerCase().indexOf("dialogactionsbar") !== -1;
      });
      return actionBarIndex;
    },
    generateTitleId: function generateTitleId() {
      return "dialog-title" + guid();
    },
    generateContentId: function generateContentId() {
      return "dialog-content" + guid();
    },
    handleClick: function handleClick(e) {
      this.$emit("overlayclick", e);
    }
  },
  // @ts-ignore
  render: function render3(createElement) {
    var h = gh6 || createElement;
    var id = this.$props.id !== void 0 ? this.$props.id : this.titleId;
    var _a2 = this.$props, title = _a2.title, width = _a2.width, height = _a2.height, minWidth = _a2.minWidth, dir = _a2.dir, contentStyle = _a2.contentStyle, wrapperId = _a2.wrapperId;
    var titleRender = this.$props.titleRender ? templateRendering.call(this, this.$props.titleRender, getListeners.call(this)) : null;
    var defaultSlot = getDefaultSlots(this);
    var content = defaultSlot || [];
    width = this.transformDimesion(width);
    height = this.transformDimesion(height);
    minWidth = this.transformDimesion(minWidth);
    var actionBarIndex = this.getActionBarIndex(content);
    var actions;
    if (actionBarIndex !== -1) {
      actions = content[actionBarIndex];
      content.splice(actionBarIndex, 1);
    }
    var closeIcon = this.$props.closeIcon !== void 0 ? this.$props.closeIcon : true;
    var dialog = h("div", {
      ref: "wrapper",
      "class": "k-dialog-wrapper",
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown
      },
      tabindex: 0,
      attrs: this.v3 ? void 0 : {
        tabindex: 0,
        id: wrapperId,
        dir
      },
      id: wrapperId,
      dir
    }, [h("div", {
      "class": "k-overlay",
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }), h("div", {
      "aria-labelledby": title || titleRender ? id : void 0,
      attrs: this.v3 ? void 0 : {
        "aria-labelledby": title || titleRender ? id : void 0,
        "aria-describedby": this.contentId,
        "aria-modal": true,
        role: "dialog"
      },
      "aria-describedby": this.contentId,
      "aria-modal": true,
      "class": this.dialogElementClass,
      role: "dialog",
      style: {
        width,
        height,
        minWidth
      }
    }, [(title || titleRender) && // @ts-ignore
    h(DialogTitleBar, {
      closeIcon,
      attrs: this.v3 ? void 0 : {
        closeIcon,
        id,
        title,
        titleRender
      },
      onClosebuttonclick: this.handleCloseDialog,
      on: this.v3 ? void 0 : {
        "closebuttonclick": this.handleCloseDialog
      },
      id,
      title,
      titleRender
    }), h("div", {
      "class": "k-window-content k-dialog-content",
      style: contentStyle,
      id: this.contentId,
      attrs: this.v3 ? void 0 : {
        id: this.contentId
      }
    }, [content]), actions])]);
    return this.$props.appendTo ? h("div", [dialog]) : dialog;
  }
};
var Dialog = DialogVue2;

// node_modules/@progress/kendo-vue-dialogs/dist/es/DialogActionsBar.js
var allVue8 = vue_runtime_esm_bundler_exports;
var gh7 = allVue8.h;
var isV38 = allVue8.version && allVue8.version[0] === "3";
var DialogActionsBarVue2 = {
  name: "DialogActionsBar",
  props: {
    layout: {
      type: String,
      default: "stretched",
      validator: function validator2(value) {
        return ["stretched", "start", "center", "end"].includes(value);
      }
    },
    orientation: {
      type: String,
      default: "horizontal",
      validator: function validator3(value) {
        return ["horizontal", "vertical"].includes(value);
      }
    }
  },
  // @ts-ignore
  setup: !isV38 ? void 0 : function() {
    var v3 = !!isV38;
    return {
      v3
    };
  },
  computed: {
    wrapperClasses: function wrapperClasses() {
      var _a2;
      var _b = this.$props, layout = _b.layout, orientation = _b.orientation;
      return _a2 = {
        "k-actions": true,
        "k-dialog-actions": true,
        "k-window-actions": true
      }, _a2["k-actions-".concat(orientation)] = orientation, _a2["k-actions-".concat(layout)] = layout, _a2;
    }
  },
  // @ts-ignore
  render: function render4(createElement) {
    var h = gh7 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("div", {
      "class": this.wrapperClasses
    }, [defaultSlot]);
  }
};
var DialogActionsBar = DialogActionsBarVue2;

// node_modules/@progress/kendo-vue-dialogs/dist/es/StageEnum.js
var windowStage;
(function(windowStage3) {
  windowStage3["DEFAULT"] = "DEFAULT";
  windowStage3["FULLSCREEN"] = "FULLSCREEN";
  windowStage3["MINIMIZED"] = "MINIMIZED";
})(windowStage || (windowStage = {}));

// node_modules/@progress/kendo-vue-dialogs/dist/es/messages/main.js
var _a;
var dialogsWindowMaximizeButton = "dialogs.windowMaximizeButton";
var dialogsWindowMinimizeButton = "dialogs.windowMinimizeButton";
var dialogsWindowRestoreButton = "dialogs.windowRestoreButton";
var dialogsWindowCloseButton = "dialogs.windowCloseButton";
var messages = (_a = {}, _a[dialogsWindowMaximizeButton] = "maximize", _a[dialogsWindowMinimizeButton] = "minimize", _a[dialogsWindowRestoreButton] = "restore", _a[dialogsWindowCloseButton] = "close", _a);

// node_modules/@progress/kendo-vue-dialogs/dist/es/WindowTitlebar.js
var allVue9 = vue_runtime_esm_bundler_exports;
var gh8 = allVue9.h;
var isV39 = allVue9.version && allVue9.version[0] === "3";
var WindowTitleBarVue2 = {
  name: "KendoWindowTitleBar",
  props: {
    id: String,
    stage: String,
    closeButton: [String, Function, Object, Boolean],
    minimizeButton: [String, Function, Object, Boolean],
    maximizeButton: [String, Function, Object, Boolean],
    restoreButton: [String, Function, Object, Boolean],
    title: String,
    titleId: String,
    titleRender: [String, Function, Object, Boolean]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV39 ? void 0 : function() {
    var v3 = !!isV39;
    return {
      v3
    };
  },
  methods: {
    onDoubleClick: function onDoubleClick(e) {
      this.$emit("doubleclick", e);
    },
    onMinimizeClick: function onMinimizeClick(e) {
      this.$emit("minimizeclick", e);
    },
    onFullScreenClick: function onFullScreenClick(e) {
      this.$emit("fullscreenclick", e);
    },
    onRestoreClick: function onRestoreClick(e) {
      this.$emit("restoreclick", e);
    },
    onCloseClick: function onCloseClick(e) {
      this.$emit("closeclick", e);
    }
  },
  // @ts-ignore
  render: function render5(createElement) {
    var h = gh8 || createElement;
    var props = this.$props;
    var stage = props.stage, title = props.title, titleRender = props.titleRender, minimizeButton = props.minimizeButton, maximizeButton = props.maximizeButton, restoreButton = props.restoreButton, closeButton = props.closeButton;
    var ls = provideLocalizationService(this);
    var titleElement = getTemplate.call(this, {
      h,
      template: titleRender,
      defaultRendering: title
    });
    var minimizeButtonDefault = (
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          icon: "window-minimize",
          svgIcon: windowMinimizeIcon,
          fillMode: "flat",
          "aria-label": ls.toLanguageString(dialogsWindowMinimizeButton, messages[dialogsWindowMinimizeButton])
        },
        "class": "k-window-titlebar-action",
        icon: "window-minimize",
        svgIcon: windowMinimizeIcon,
        fillMode: "flat",
        onClick: this.onMinimizeClick,
        on: this.v3 ? void 0 : {
          "click": this.onMinimizeClick
        },
        "aria-label": ls.toLanguageString(dialogsWindowMinimizeButton, messages[dialogsWindowMinimizeButton])
      })
    );
    var minimizeButtonRender = getTemplate.call(this, {
      h,
      template: minimizeButton,
      defaultRendering: minimizeButtonDefault
    });
    var maximizeButtonDefault = (
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          icon: "window",
          svgIcon: windowIcon,
          fillMode: "flat",
          "aria-label": ls.toLanguageString(dialogsWindowMaximizeButton, messages[dialogsWindowMaximizeButton])
        },
        "class": "k-window-titlebar-action",
        icon: "window",
        svgIcon: windowIcon,
        fillMode: "flat",
        onClick: this.onFullScreenClick,
        on: this.v3 ? void 0 : {
          "click": this.onFullScreenClick
        },
        "aria-label": ls.toLanguageString(dialogsWindowMaximizeButton, messages[dialogsWindowMaximizeButton])
      })
    );
    var maximizeButtonRender = getTemplate.call(this, {
      h,
      template: maximizeButton,
      defaultRendering: maximizeButtonDefault
    });
    var restoreButtonDefault = (
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          icon: "window-restore",
          svgIcon: windowRestoreIcon,
          fillMode: "flat",
          "aria-label": ls.toLanguageString(dialogsWindowRestoreButton, messages[dialogsWindowRestoreButton])
        },
        "class": "k-window-titlebar-action",
        icon: "window-restore",
        svgIcon: windowRestoreIcon,
        fillMode: "flat",
        onClick: this.onRestoreClick,
        on: this.v3 ? void 0 : {
          "click": this.onRestoreClick
        },
        "aria-label": ls.toLanguageString(dialogsWindowRestoreButton, messages[dialogsWindowRestoreButton])
      })
    );
    var restoreButtonRender = getTemplate.call(this, {
      h,
      template: restoreButton,
      defaultRendering: restoreButtonDefault
    });
    var closeButtonDefault = (
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          icon: "x",
          svgIcon: xIcon,
          fillMode: "flat",
          "aria-label": ls.toLanguageString(dialogsWindowCloseButton, messages[dialogsWindowCloseButton])
        },
        "class": "k-window-titlebar-action",
        icon: "x",
        svgIcon: xIcon,
        fillMode: "flat",
        onClick: this.onCloseClick,
        on: this.v3 ? void 0 : {
          "click": this.onCloseClick
        },
        "aria-label": ls.toLanguageString(dialogsWindowCloseButton, messages[dialogsWindowCloseButton])
      })
    );
    var closeButtonRender = getTemplate.call(this, {
      h,
      template: closeButton,
      defaultRendering: closeButtonDefault
    });
    return h("div", {
      "class": "k-window-titlebar",
      style: {
        touchAction: "none"
      },
      onDblclick: this.onDoubleClick,
      on: this.v3 ? void 0 : {
        "dblclick": this.onDoubleClick
      }
    }, [h("span", {
      "class": "k-window-title",
      id: this.$props.titleId,
      attrs: this.v3 ? void 0 : {
        id: this.$props.titleId
      }
    }, [titleElement]), h("div", {
      "class": "k-window-titlebar-actions"
    }, [stage === windowStage.DEFAULT && minimizeButtonRender, stage === windowStage.DEFAULT && maximizeButtonRender, stage !== windowStage.DEFAULT && restoreButtonRender, closeButtonRender])]);
  }
};
var WindowTitleBar = WindowTitleBarVue2;

// node_modules/@progress/kendo-vue-dialogs/dist/es/WindowResizeHandlers.js
var allVue10 = vue_runtime_esm_bundler_exports;
var gh9 = allVue10.h;
var isV310 = allVue10.version && allVue10.version[0] === "3";
var keys = ["n", "e", "s", "w", "se", "sw", "ne", "nw"];
var ResizeHandlersVue2 = {
  name: "ResizeHandlers",
  // @ts-ignore
  emits: {
    "resize": null
  },
  // @ts-ignore
  setup: !isV310 ? void 0 : function() {
    var v3 = !!isV310;
    return {
      v3
    };
  },
  methods: {
    onDrag: function onDrag(event, key) {
      event.originalEvent.preventDefault();
      this.$emit("resize", event, {
        end: false,
        direction: key
      });
    },
    onRelease: function onRelease(event, key) {
      event.originalEvent.preventDefault();
      this.$emit("resize", event, {
        end: true,
        direction: key
      });
    }
  },
  // @ts-ignore
  render: function render6(createElement) {
    var h = gh9 || createElement;
    return h("div", [keys.map(function(key, index) {
      var _this = this;
      return (
        // @ts-ignore  function children
        h(Draggable, {
          key: index,
          onDrag: function onDrag3(e) {
            return _this.onDrag(e, key);
          },
          on: this.v3 ? void 0 : {
            "drag": function onDrag3(e) {
              return _this.onDrag(e, key);
            },
            "release": function release2(e) {
              return _this.onRelease(e, key);
            }
          },
          onRelease: function release2(e) {
            return _this.onRelease(e, key);
          }
        }, this.v3 ? function() {
          return [h("div", {
            "class": "k-resize-handle k-resize-" + key,
            style: {
              display: "block",
              touchAction: "none"
            }
          })];
        } : [h("div", {
          "class": "k-resize-handle k-resize-" + key,
          style: {
            display: "block",
            touchAction: "none"
          }
        })])
      );
    }, this)]);
  }
};
var ResizeHandlers = ResizeHandlersVue2;

// node_modules/@progress/kendo-vue-dialogs/dist/es/Window.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var allVue11 = vue_runtime_esm_bundler_exports;
var gh10 = allVue11.h;
var isV311 = allVue11.version && allVue11.version[0] === "3";
var DEFAULT_WIDTH = 300;
var DEFAULT_HEIGHT = 300;
var DEFAULT_MIN_WIDTH = 120;
var DEFAULT_MIN_HEIGHT = 100;
var DEFAULT_STEP = 5;
var WindowVue2 = {
  name: "KendoWindow",
  // @ts-ignore
  emits: {
    "resize": null,
    "move": null,
    "close": null,
    "stagechange": null,
    "overlayclick": null
  },
  provide: function provide2() {
    return {
      kCurrentZIndex: DEFAULT_DIALOGS_ZINDEX
    };
  },
  props: {
    id: String,
    appendTo: String,
    width: {
      type: [Number],
      default: void 0
    },
    height: {
      type: [Number],
      default: void 0
    },
    left: {
      type: [Number],
      default: void 0
    },
    windowStyle: Object,
    windowClass: String,
    top: {
      type: [Number],
      default: void 0
    },
    initialWidth: [Number],
    initialHeight: [Number],
    initialLeft: [Number],
    initialTop: [Number],
    minWidth: {
      type: [Number],
      default: DEFAULT_MIN_WIDTH
    },
    minHeight: {
      type: [Number],
      default: DEFAULT_MIN_HEIGHT
    },
    resizable: {
      type: Boolean,
      default: true
    },
    draggable: {
      type: Boolean,
      default: true
    },
    modal: {
      type: Boolean,
      default: false
    },
    doubleClickStageChange: {
      type: Boolean,
      default: true
    },
    title: String,
    titleRender: templateDefinition,
    closeButton: templateDefinition,
    minimizeButton: templateDefinition,
    maximizeButton: templateDefinition,
    restoreButton: templateDefinition,
    shouldUpdateOnDrag: Boolean,
    stage: {
      type: String,
      validator: function validator4(value) {
        return ["DEFAULT", "MINIMIZED", "FULLSCREEN"].indexOf(value) !== -1;
      }
    },
    themeColor: {
      type: String,
      validator: function validator5(value) {
        return [void 0, "primary", "dark", "light"].includes(value);
      }
    }
  },
  // @ts-ignore
  setup: !isV311 ? void 0 : function() {
    var v3 = !!isV311;
    return {
      v3
    };
  },
  created: function created3() {
    validatePackage(packageMetadata);
    this.windowCoordinatesState = {
      leftBeforeAction: this.getInitialLeft(),
      topBeforeAction: this.getInitialTop(),
      widthBeforeAction: this.getInitialWidth(),
      heightBeforeAction: this.getInitialHeight()
    };
    this.titleId = this.generateTitleId();
  },
  beforeDestroy: !!isV311 ? void 0 : function() {
    if (this.$props.appendTo) {
      this.windowWrapper.remove();
    }
  },
  beforeUnmount: function beforeUnmount2() {
    if (this.$props.appendTo) {
      this.windowWrapper.remove();
    }
  },
  data: function data() {
    return {
      currentStage: this.$props.stage || windowStage.DEFAULT,
      isDragging: false,
      currentTop: this.getInitialTop(),
      currentLeft: this.getInitialLeft(),
      currentWidth: this.getInitialWidth(),
      currentHeight: this.getInitialHeight(),
      titleId: void 0
    };
  },
  mounted: function mounted3() {
    if (window) {
      window.addEventListener("resize", this.handleBrowserWindowResize);
      if (this.$props.appendTo) {
        var body = document.querySelector(this.$props.appendTo);
        this.windowWrapper = this.$refs.wrapper;
        body.append(this.windowWrapper);
      }
    }
    if (this.$el) {
      this.windowElement = this.$refs.windowElement;
    }
  },
  destroyed: !!isV311 ? void 0 : function() {
    if (window) {
      window.removeEventListener("resize", this.handleBrowserWindowResize);
    }
  },
  // @ts-ignore
  unmounted: function unmounted2() {
    if (window) {
      window.removeEventListener("resize", this.handleBrowserWindowResize);
    }
  },
  computed: {
    wrapperClass: function wrapperClass() {
      return {
        "k-dialog-wrapper": this.$props.modal
      };
    },
    windowElementClass: function windowElementClass() {
      var _a2;
      var _b = this.$props, windowClass = _b.windowClass, themeColor = _b.themeColor;
      return _a2 = {
        "k-window": true
      }, _a2[windowClass] = windowClass, _a2["k-window-".concat(themeColor)] = themeColor, _a2["k-window-minimized"] = this.currentStage === "MINIMIZED", _a2;
    },
    computedTop: function computedTop() {
      if (this.windowStage !== windowStage.FULLSCREEN) {
        return Math.max(this.$props.top || this.currentTop, 0);
      }
      return 0;
    },
    computedLeft: function computedLeft() {
      if (this.windowStage !== windowStage.FULLSCREEN) {
        return Math.max(this.$props.left || this.currentLeft, 0);
      }
      return 0;
    },
    computedWidth: function computedWidth() {
      var width = this.$props.width || this.currentWidth;
      if (this.windowStage === windowStage.FULLSCREEN) {
        width = window.innerWidth;
      }
      return width;
    },
    computedHeight: function computedHeight() {
      var height = this.$props.height || this.currentHeight;
      if (this.windowStage === windowStage.FULLSCREEN) {
        height = window.innerHeight;
      } else if (this.windowStage === windowStage.MINIMIZED) {
        height = 0;
      }
      return height;
    },
    windowStage: function windowStage2() {
      return this.$props.stage || this.currentStage;
    }
  },
  methods: {
    onPress: function onPress(event) {
      var e = event;
      this.windowCoordinatesState.differenceLeft = e.pageX - this.computedLeft;
      this.windowCoordinatesState.differenceTop = e.pageY - this.computedTop;
    },
    onDrag: function onDrag2(event) {
      var e = event;
      e.originalEvent.preventDefault();
      if (this.windowStage !== windowStage.FULLSCREEN && this.$props.draggable) {
        this.currentTop = Math.max(e.pageY - this.windowCoordinatesState.differenceTop, 0);
        this.currentLeft = e.pageX - this.windowCoordinatesState.differenceLeft;
        this.isDragging = true;
        this.dispatchMoveEvent("move", e, true, false);
      }
    },
    onRelease: function onRelease2(event) {
      var e = event;
      if (this.windowStage !== windowStage.FULLSCREEN && this.$props.draggable) {
        this.dispatchMoveEvent("move", e, true, true);
      }
      this.isDragging = false;
    },
    handleKeyDown: function handleKeyDown2(event) {
      if (event.target !== event.currentTarget) {
        return;
      }
      var minWidth = this.$props.minWidth || DEFAULT_MIN_WIDTH;
      var minHeight = this.$props.minHeight || DEFAULT_MIN_HEIGHT;
      if (event.ctrlKey && this.$props.resizable) {
        switch (event.keyCode) {
          case Keys.up:
            event.preventDefault();
            if (minHeight <= this.computedHeight - DEFAULT_STEP) {
              this.currentHeight = this.currentHeight - DEFAULT_STEP;
            }
            break;
          case Keys.down:
            event.preventDefault();
            this.currentHeight = this.currentHeight + DEFAULT_STEP;
            break;
          case Keys.left:
            if (minWidth <= this.computedWidth - DEFAULT_STEP) {
              this.currentWidth = this.currentWidth - DEFAULT_STEP;
            }
            break;
          case Keys.right:
            this.currentWidth = this.currentWidth + DEFAULT_STEP;
            break;
          default:
            return;
        }
        this.dispatchMoveEvent("resize", event, false, void 0);
        return;
      }
      if (event.altKey) {
        switch (event.keyCode) {
          case Keys.up:
            if (this.windowStage === windowStage.MINIMIZED) {
              this.handleRestore(event);
              this.$emit("stagechange", event, this, {
                state: windowStage.DEFAULT
              });
            } else if (this.windowStage === windowStage.DEFAULT) {
              this.handleFullscreen(event);
              this.$emit("stagechange", event, this, {
                state: windowStage.FULLSCREEN
              });
            }
            break;
          case Keys.down:
            if (this.windowStage === windowStage.FULLSCREEN) {
              this.handleRestore(event);
              this.$emit("stagechange", event, this, {
                state: windowStage.DEFAULT
              });
            } else if (this.windowStage === windowStage.DEFAULT) {
              this.handleMinimize(event);
              this.$emit("stagechange", event, this, {
                state: windowStage.MINIMIZED
              });
            }
            break;
          default:
        }
        return;
      }
      if (!event.ctrlKey) {
        switch (event.keyCode) {
          case Keys.esc:
            this.handleCloseWindow(event);
            return;
          case Keys.up:
            event.preventDefault();
            this.currentTop = this.currentTop - DEFAULT_STEP;
            break;
          case Keys.down:
            event.preventDefault();
            this.currentTop = this.currentTop + DEFAULT_STEP;
            break;
          case Keys.left:
            event.preventDefault();
            this.currentLeft = this.currentLeft - DEFAULT_STEP;
            break;
          case Keys.right:
            event.preventDefault();
            this.currentLeft = this.currentLeft + DEFAULT_STEP;
            break;
          default:
            return;
        }
      }
      this.dispatchMoveEvent("move", event, false, void 0);
    },
    getInitialTop: function getInitialTop() {
      if (this.$props.top !== void 0) {
        return this.$props.top;
      }
      if (this.$props.initialTop !== void 0) {
        return this.$props.initialTop;
      }
      var height = DEFAULT_HEIGHT;
      if (this.$props.height !== void 0) {
        height = this.$props.height;
      } else if (this.$props.initialHeight !== void 0) {
        height = this.$props.initialHeight;
      }
      return window.innerHeight / 2 - height / 2;
    },
    getInitialLeft: function getInitialLeft() {
      if (this.$props.left !== void 0) {
        return this.$props.left;
      }
      if (this.$props.initialLeft !== void 0) {
        return this.$props.initialLeft;
      }
      var width = DEFAULT_WIDTH;
      if (this.$props.width !== void 0) {
        width = this.$props.width;
      } else if (this.$props.initialWidth !== void 0) {
        width = this.$props.initialWidth;
      }
      return window.innerWidth / 2 - width / 2;
    },
    getInitialWidth: function getInitialWidth() {
      var width = DEFAULT_WIDTH;
      if (this.$props.width !== void 0) {
        width = this.$props.width;
      } else if (this.$props.initialWidth !== void 0) {
        width = this.$props.initialWidth;
      }
      return width;
    },
    getInitialHeight: function getInitialHeight() {
      var height = DEFAULT_HEIGHT;
      if (this.$props.height !== void 0) {
        height = this.$props.height;
      } else if (this.$props.initialHeight !== void 0) {
        height = this.$props.initialHeight;
      }
      return height;
    },
    handleMinimize: function handleMinimize(event) {
      event.preventDefault();
      this.windowCoordinatesState.leftBeforeAction = this.computedLeft;
      this.windowCoordinatesState.topBeforeAction = this.computedTop;
      this.windowCoordinatesState.widthBeforeAction = this.computedWidth;
      this.windowCoordinatesState.heightBeforeAction = this.computedHeight;
      this.currentStage = windowStage.MINIMIZED;
      this.currentHeight = 0;
      this.$emit("stagechange", event, this, {
        state: windowStage.MINIMIZED
      });
    },
    handleFullscreen: function handleFullscreen(event) {
      event.preventDefault();
      this.windowCoordinatesState.leftBeforeAction = this.computedLeft;
      this.windowCoordinatesState.topBeforeAction = this.computedTop;
      this.windowCoordinatesState.widthBeforeAction = this.computedWidth;
      this.windowCoordinatesState.heightBeforeAction = this.computedHeight;
      this.currentLeft = 0;
      this.currentTop = 0;
      this.currentWidth = window.innerWidth;
      this.currentHeight = window.innerHeight;
      this.currentStage = windowStage.FULLSCREEN;
      this.$emit("stagechange", event, this, {
        state: windowStage.FULLSCREEN
      });
    },
    handleRestore: function handleRestore(event) {
      event.preventDefault();
      if (this.windowStage === windowStage.FULLSCREEN) {
        this.currentStage = windowStage.DEFAULT;
        this.currentLeft = this.windowCoordinatesState.leftBeforeAction;
        this.currentTop = this.windowCoordinatesState.topBeforeAction;
        this.currentWidth = this.windowCoordinatesState.widthBeforeAction;
        this.currentHeight = this.windowCoordinatesState.heightBeforeAction;
      } else if (this.windowStage === windowStage.MINIMIZED) {
        this.currentStage = windowStage.DEFAULT;
        this.currentHeight = this.windowCoordinatesState.heightBeforeAction;
      }
      this.$emit("stagechange", event, this, {
        state: windowStage.DEFAULT
      });
    },
    handleCloseWindow: function handleCloseWindow(event) {
      event.preventDefault();
      this.$emit("close", event, this, {
        state: void 0
      });
    },
    handleDoubleClick: function handleDoubleClick(e) {
      if (!this.$props.doubleClickStageChange) {
        return;
      }
      if (this.windowStage === windowStage.FULLSCREEN || this.windowStage === windowStage.MINIMIZED) {
        this.handleRestore(e);
      } else {
        this.handleFullscreen(e);
      }
    },
    handleResize: function handleResize(event, props) {
      var currentWidth = this.computedWidth;
      var currentHeight = this.computedHeight;
      var minWidth = this.$props.minWidth || DEFAULT_MIN_WIDTH;
      var minHeight = this.$props.minHeight || DEFAULT_MIN_HEIGHT;
      var heightDifference = this.computedTop - event.pageY;
      var widthDifference = this.computedLeft - event.pageX;
      var newWidth = event.pageX - this.computedLeft;
      var newHeight = event.pageY - this.computedTop;
      this.isDragging = !props.end;
      if (props.direction.indexOf("n") >= 0 && minHeight - (currentHeight + heightDifference) < 0) {
        this.currentTop = event.pageY;
        this.currentHeight = currentHeight + heightDifference;
      }
      if (props.direction.indexOf("s") >= 0 && minHeight - newHeight < 0) {
        this.currentHeight = newHeight;
      }
      if (props.direction.indexOf("w") >= 0 && minWidth - (currentWidth + widthDifference) < 0) {
        this.currentLeft = event.pageX;
        this.currentWidth = currentWidth + widthDifference;
      }
      if (props.direction.indexOf("e") >= 0 && minWidth - newWidth < 0) {
        this.currentWidth = newWidth;
      }
      this.dispatchMoveEvent("resize", event, true, props.end);
    },
    dispatchMoveEvent: function dispatchMoveEvent(eventName, event, drag2, end) {
      this.$emit(eventName, {
        event: event.event,
        drag: drag2,
        end,
        target: this,
        left: this.currentLeft,
        top: this.currentTop,
        width: this.currentWidth,
        height: this.currentHeight
      });
    },
    handleBrowserWindowResize: function handleBrowserWindowResize() {
      if (this.windowStage === windowStage.FULLSCREEN) {
        this.currentWidth = window.innerWidth;
        this.currentHeight = window.innerHeight;
      }
    },
    handleClick: function handleClick2(e) {
      this.$emit("overlayclick", e);
    },
    getActionBarIndex: function getActionBarIndex2(children) {
      var actionBarIndex = children.findIndex(function(child) {
        return child && child.tag && child.tag.toLowerCase().indexOf("dialogactionsbar") !== -1 || child.componentOptions && child.componentOptions.tag && child.componentOptions.tag.toLowerCase().indexOf("actions-bar") !== -1 || child.type && child.type.name && child.type.name.toLowerCase().indexOf("dialogactionsbar") !== -1;
      });
      return actionBarIndex;
    },
    generateTitleId: function generateTitleId2() {
      return "window-title-" + guid();
    }
  },
  // @ts-ignore
  render: function render7(createElement) {
    var _this = this;
    var h = gh10 || createElement;
    var titleRender = templateRendering.call(this, this.$props.titleRender, getListeners.call(this));
    var closeButton = templateRendering.call(this, this.$props.closeButton, getListeners.call(this));
    var minimizeButton = templateRendering.call(this, this.$props.minimizeButton, getListeners.call(this));
    var maximizeButton = templateRendering.call(this, this.$props.maximizeButton, getListeners.call(this));
    var restoreButton = templateRendering.call(this, this.$props.restoreButton, getListeners.call(this));
    var defaultSlot = getDefaultSlots(this);
    var content = defaultSlot || [];
    var actionBarIndex = this.getActionBarIndex(content);
    var actions;
    if (actionBarIndex !== -1) {
      actions = content[actionBarIndex];
      content.splice(actionBarIndex, 1);
    }
    var windowElement = h("div", {
      "class": this.wrapperClass,
      ref: "wrapper"
    }, [this.$props.modal && h("div", {
      "class": "k-overlay",
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }), h("div", {
      tabindex: 0,
      attrs: this.v3 ? void 0 : {
        tabindex: 0,
        role: "dialog",
        "aria-modal": this.$props.modal ? true : void 0,
        "aria-labelledby": this.titleId
      },
      onFocus: function onFocus(e) {
        return e.target.classList.add("k-focus");
      },
      on: this.v3 ? void 0 : {
        "focus": function onFocus(e) {
          return e.target.classList.add("k-focus");
        },
        "blur": function blur(e) {
          return e.target.classList.remove("k-focus");
        },
        "keydown": this.handleKeyDown
      },
      onBlur: function blur(e) {
        return e.target.classList.remove("k-focus");
      },
      onKeydown: this.handleKeyDown,
      ref: "windowElement",
      "class": this.windowElementClass,
      role: "dialog",
      "aria-modal": this.$props.modal ? true : void 0,
      "aria-labelledby": this.titleId,
      style: __assign2({
        top: this.computedTop + "px",
        left: this.computedLeft + "px",
        width: this.computedWidth + "px",
        height: this.computedHeight + "px" || ""
      }, this.$props.windowStyle)
    }, [
      // @ts-ignore  function children
      h(Draggable, {
        onPress: this.onPress,
        on: this.v3 ? void 0 : {
          "press": this.onPress,
          "drag": this.onDrag,
          "release": this.onRelease
        },
        onDrag: this.onDrag,
        onRelease: this.onRelease,
        ref: "draggable"
      }, this.v3 ? function() {
        return [
          // @ts-ignore  function children
          h(WindowTitleBar, {
            stage: _this.windowStage,
            attrs: _this.v3 ? void 0 : {
              stage: _this.windowStage,
              title: _this.$props.title,
              titleId: _this.titleId,
              titleRender,
              closeButton,
              minimizeButton,
              maximizeButton,
              restoreButton
            },
            title: _this.$props.title,
            titleId: _this.titleId,
            titleRender,
            onDoubleclick: _this.handleDoubleClick,
            on: _this.v3 ? void 0 : {
              "doubleclick": _this.handleDoubleClick,
              "minimizeclick": _this.handleMinimize,
              "fullscreenclick": _this.handleFullscreen,
              "restoreclick": _this.handleRestore,
              "closeclick": _this.handleCloseWindow
            },
            onMinimizeclick: _this.handleMinimize,
            onFullscreenclick: _this.handleFullscreen,
            onRestoreclick: _this.handleRestore,
            onCloseclick: _this.handleCloseWindow,
            closeButton,
            minimizeButton,
            maximizeButton,
            restoreButton
          })
        ];
      } : [h(WindowTitleBar, {
        stage: _this.windowStage,
        attrs: _this.v3 ? void 0 : {
          stage: _this.windowStage,
          title: _this.$props.title,
          titleId: _this.titleId,
          titleRender,
          closeButton,
          minimizeButton,
          maximizeButton,
          restoreButton
        },
        title: _this.$props.title,
        titleId: _this.titleId,
        titleRender,
        onDoubleclick: _this.handleDoubleClick,
        on: _this.v3 ? void 0 : {
          "doubleclick": _this.handleDoubleClick,
          "minimizeclick": _this.handleMinimize,
          "fullscreenclick": _this.handleFullscreen,
          "restoreclick": _this.handleRestore,
          "closeclick": _this.handleCloseWindow
        },
        onMinimizeclick: _this.handleMinimize,
        onFullscreenclick: _this.handleFullscreen,
        onRestoreclick: _this.handleRestore,
        onCloseclick: _this.handleCloseWindow,
        closeButton,
        minimizeButton,
        maximizeButton,
        restoreButton
      })]),
      this.windowStage !== windowStage.MINIMIZED ? [h("div", {
        "class": "k-window-content"
      }, [defaultSlot]), actions] : null,
      this.windowStage === windowStage.DEFAULT && this.$props.resizable ? h(ResizeHandlers, {
        onResize: this.handleResize,
        on: this.v3 ? void 0 : {
          "resize": this.handleResize
        }
      }) : null
    ])]);
    return this.$props.appendTo ? h("div", [windowElement]) : windowElement;
  }
};
var Window = WindowVue2;

export {
  DialogVue2,
  Dialog,
  DialogActionsBarVue2,
  DialogActionsBar,
  WindowVue2,
  Window
};
//# sourceMappingURL=chunk-WKLUZJPW.js.map
