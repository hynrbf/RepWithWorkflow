import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";
import "./chunk-HM4MQYWN.js";

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value) {
  return typeof value === "object";
};

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/classNames.js
var classNames = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.filter(function(arg) {
    return arg !== true && !!arg;
  }).map(function(arg) {
    return Array.isArray(arg) ? classNames.apply(void 0, arg) : isObject(arg) ? Object.keys(arg).map(function(key, idx) {
      return arg[idx] || arg[key] && key || null;
    }).filter(function(el) {
      return el !== null;
    }).join(" ") : arg;
  }).filter(function(arg) {
    return !!arg;
  }).join(" ");
};

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/refs.js
function getRef(comp, refName, customRef) {
  return comp.v3 ? comp["".concat(refName, "Ref")] : comp.$refs["".concat(customRef || refName)];
}
function setRef(comp, refName, customRef) {
  return comp.v3 ? function(el) {
    comp["".concat(refName, "Ref")] = el;
  } : customRef || refName;
}

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a) {
  var h = _a.h, template = _a.template, defaultRendering = _a.defaultRendering, defaultSlots = _a.defaultSlots, additionalProps = _a.additionalProps, additionalListeners = _a.additionalListeners, swapDefaultSlots = _a.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata2) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata2);
  } else {
    var message = "License activation failed for ".concat(packageMetadata2.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata2.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";

// node_modules/@progress/kendo-vue-tooltip/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation2.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation2.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation2.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-vue-tooltip/dist/es/utils.js
var arrowWidth = 10;
var arrowHeight = 10;
var getLeftPosition = function getLeftPosition2(left, elementWidth, targetElement, anchorElement, position) {
  switch (position) {
    case "bottom":
      return anchorElement === "pointer" ? left - elementWidth / 2 : targetElement.left - elementWidth / 2 + targetElement.width / 2;
    case "left":
      return anchorElement === "pointer" ? left - elementWidth - arrowWidth : targetElement.left - elementWidth - arrowWidth;
    case "right":
      return anchorElement === "pointer" ? left + arrowWidth : targetElement.right + arrowWidth;
    case "top":
      return anchorElement === "pointer" ? left - elementWidth / 2 : targetElement.left - elementWidth / 2 + targetElement.width / 2;
    default:
      if (anchorElement === "pointer") {
        return canUseDOM && left < window.screen.availWidth / 2 ? left - arrowWidth : left - elementWidth + arrowWidth;
      } else {
        return canUseDOM && left < window.screen.availWidth / 2 ? targetElement.left : targetElement.right - elementWidth;
      }
  }
};
var getTopPosition = function getTopPosition2(top, targetElement, elementHeight, anchorElement, position) {
  switch (position) {
    case "bottom":
      return anchorElement === "pointer" ? top + arrowHeight : targetElement.bottom + arrowHeight;
    case "left":
      return anchorElement === "pointer" ? top - elementHeight / 2 : targetElement.top - elementHeight / 2 + targetElement.height / 2;
    case "right":
      return anchorElement === "pointer" ? top - elementHeight / 2 : targetElement.top - elementHeight / 2 + targetElement.height / 2;
    case "top":
      return anchorElement === "pointer" ? top - elementHeight - arrowHeight : targetElement.top - elementHeight - arrowHeight;
    default:
      if (anchorElement === "pointer") {
        return canUseDOM && top < window.innerHeight / 2 ? top + arrowWidth : top - elementHeight - arrowWidth;
      } else {
        return canUseDOM && top < window.innerHeight / 2 ? targetElement.bottom + arrowHeight : targetElement.top - elementHeight - arrowHeight;
      }
  }
};
var getDomRect = function getDomRect2(currentTarget) {
  if (currentTarget !== null) {
    return currentTarget.getBoundingClientRect();
  }
  return document.body.getBoundingClientRect();
};
var toolTipSelectors = ["k-tooltip-content", "k-animation-container", "k-tooltip", "k-tooltip-title", "k-tooltip k-tooltip-closable", "k-icon k-i-x", "k-svg-icon k-svg-i-x"];
var isTooltipElement = function isTooltipElement2(element) {
  if (element === null) {
    return false;
  }
  var node = element;
  while (node) {
    if (node !== null && node.classList && node.classList.contains("k-tooltip")) {
      return true;
    }
    node.parentNode !== null ? node = node.parentNode : node = false;
  }
  return toolTipSelectors.filter(function(t) {
    return t === element.className;
  }).length > 0;
};

// node_modules/@progress/kendo-vue-tooltip/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-tooltip",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693313190,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-tooltip/dist/es/Tooltip.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var DEFAULT_TOOLTIP_ZINDEX = 100;
var ARIAIDSUFFIX = "_tb_active";
var TooltipVue2 = {
  name: "KendoTooltip",
  inheritAttrs: false,
  props: {
    showCallout: {
      type: Boolean,
      default: true
    },
    setCalloutOnPositionAuto: {
      type: String,
      default: void 0
    },
    anchorElement: {
      type: String,
      default: "pointer",
      validator: function validator(value) {
        return ["pointer", "target"].includes(value);
      }
    },
    content: [String, Object, Function],
    filter: Function,
    openDelay: {
      type: Number,
      default: 400
    },
    open: {
      type: Boolean,
      default: void 0
    },
    position: {
      type: String,
      default: "auto",
      validator: function validator2(value) {
        return ["right", "left", "top", "bottom", "auto"].includes(value);
      }
    },
    updatePosition: {
      type: Function,
      default: void 0
    },
    updateInterval: Number,
    className: String,
    wrapperStyle: Object,
    tooltipClassName: String,
    tooltipStyle: Object,
    targetElement: {
      type: void 0
    },
    parentTitle: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      top: 0,
      left: 0,
      currentTargetElement: null,
      currentOpen: false,
      title: ""
    };
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a;
      return _a = {
        "k-animation-container": true,
        "k-animation-container-fixed": true,
        "k-animation-container-shown": true
      }, _a[this.$props.className] = true, _a;
    },
    computedTarget: function computedTarget() {
      return this.targetElement !== void 0 ? this.targetElement : this.currentTargetElement;
    },
    computedOpen: function computedOpen() {
      return this.open !== void 0 ? this.open : this.currentOpen;
    }
  },
  inject: {
    kCurrentZIndex: {
      default: null
    }
  },
  created: function created2() {
    validatePackage(packageMetadata);
    this.top = 0;
    this.left = 0;
    this.willOpen = false;
  },
  mounted: function mounted2() {
    this.element = getRef(this, "element");
    if (document) {
      document.body.addEventListener("mousemove", this.handleBodyMousemove);
    }
  },
  destroyed: !!isV36 ? void 0 : function() {
    this.destroyElement();
  },
  // @ts-ignore
  unmounted: function unmounted2() {
    this.destroyElement();
  },
  updated: function updated() {
    if (this.$props.open && this.$props.targetElement) {
      this.showToolTip({
        target: this.$props.targetElement
      });
    }
    this.element = getRef(this, "element");
    if (!this.element) {
      return;
    }
    this.resetPosition();
    if (this.computedTarget) {
      var appendToElement = this.$props.appendTo ? this.$props.appendTo : this.computedTarget.ownerDocument.body;
      if (this.element.parentElement !== appendToElement) {
        this.computedTarget.ownerDocument.body.append(this.element);
      }
    }
    this.callout = this.v3 ? this.calloutRef : this.$refs.callout;
    if (!this.callout) {
      return;
    }
    this.callout.className = this.calloutClassName();
    if (this.$props.position === "auto" && canUseDOM) {
      this.left < window.screen.availWidth / 2 ? this.callout.style.left = this.$props.setCalloutOnPositionAuto || "25%" : this.callout.style.left = this.$props.setCalloutOnPositionAuto || "75%";
    }
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh5 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var currentZIndex = this.getCurrentZIndex();
    var content = this.$props.content ? templateRendering.call(this, this.$props.content, getListeners.call(this)) : void 0;
    var contentDefaultRendering = this.title;
    var ariaId = guid() + ARIAIDSUFFIX;
    if (this.computedTarget) {
      if (this.computedTarget.hasAttribute("id")) {
        ariaId = this.computedTarget.getAttribute("id") + ARIAIDSUFFIX;
      }
      this.computedTarget.setAttribute("aria-describedby", ariaId);
    }
    var contentRendering = getTemplate.call(this, {
      h,
      template: content,
      defaultRendering: contentDefaultRendering,
      additionalProps: {
        title: this.title,
        target: this.computedTarget
      }
    });
    var innerToolTip = this.computedOpen && h("div", {
      "class": classNames("k-tooltip", this.$props.tooltipClassName),
      role: "tooltip",
      attrs: this.v3 ? void 0 : {
        role: "tooltip",
        id: ariaId
      },
      id: ariaId,
      style: __assign2({
        position: "relative"
      }, this.$props.tooltipStyle)
    }, [h("div", {
      "class": "k-tooltip-content"
    }, [contentRendering]), this.$props.showCallout && h("div", {
      ref: setRef(this, "callout")
    })]);
    var tooltip = this.computedTarget && this.title && this.computedTarget.ownerDocument && h("div", {
      ref: setRef(this, "element"),
      "class": this.wrapperClass,
      style: __assign2({
        zIndex: currentZIndex
      }, this.$props.wrapperStyle),
      tabindex: 0,
      attrs: this.v3 ? void 0 : {
        tabindex: 0
      }
    }, [h("div", {
      "class": "k-child-animation-container"
    }, [innerToolTip])]);
    if (defaultSlot) {
      return h("div", {
        onMouseover: this.handleMouseOver,
        on: this.v3 ? void 0 : {
          "mouseover": this.handleMouseOver,
          "mouseout": this.handleMouseOut
        },
        onMouseout: this.handleMouseOut
      }, [tooltip, defaultSlot]);
    } else {
      return tooltip;
    }
  },
  methods: {
    destroyElement: function destroyElement() {
      clearTimeout(this.openTimeoutId);
      clearInterval(this.updateIntervalId);
      if (document) {
        document.body.removeEventListener("mousemove", this.handleBodyMousemove);
      }
      if (this.element) {
        this.element.remove();
      }
    },
    handleMouseOut: function handleMouseOut(event) {
      var currentDocument = this.computedTarget ? this.computedTarget.ownerDocument : document;
      var element = currentDocument && currentDocument.elementFromPoint(event.clientX, event.clientY);
      this.willOpen = false;
      if (isTooltipElement(element) || this.computedTarget !== event.target) {
        return;
      }
      if (this.$props.open) {
        return;
      }
      clearInterval(this.updateIntervalId);
      this.onClose(event);
    },
    handleMouseOver: function handleMouseOver(event) {
      var target = event.target;
      if (!this.isVisible(target) || isTooltipElement(target) || target === this.computedTarget) {
        return;
      }
      this.showToolTip(event);
    },
    handleBodyMousemove: function handleBodyMousemove(event) {
      this.top = event.clientY;
      this.left = event.clientX;
    },
    onClose: function onClose(event) {
      this.$emit("close", {
        event,
        component: this
      });
      this.computedTarget.removeAttribute("aria-describedby");
      this.currentTargetElement = null;
      this.currentOpen = false;
      this.title = "";
    },
    showToolTip: function showToolTip(event) {
      var _this = this;
      clearTimeout(this.openTimeoutId);
      clearInterval(this.updateIntervalId);
      if (event.target.hasChildNodes()) {
        event.target.childNodes.forEach(function(childElement) {
          if (childElement.nodeName === "title") {
            event.target.titleExpando = childElement.innerHTML;
            childElement.remove();
          }
        });
      }
      var target = this.computedTarget || event.target;
      var titleResult = this.getTitle(target);
      if (!titleResult.title) {
        if (this.computedOpen) {
          this.onClose(event);
        }
        return;
      }
      if (titleResult.element) {
        titleResult.element.titleExpando = titleResult.title;
        titleResult.element.title = "";
      }
      this.willOpen = true;
      if (!this.$props.openDelay) {
        this.currentTargetElement = target;
        this.currentOpen = true;
        this.title = titleResult.title;
        this.setUpdateInterval();
      } else {
        if (canUseDOM) {
          this.openTimeoutId = window.setTimeout(function() {
            if (_this.willOpen) {
              _this.currentTargetElement = target;
              _this.currentOpen = true;
              _this.title = titleResult.title;
              _this.setUpdateInterval();
            }
          }, this.$props.openDelay);
        }
      }
      if (this.title !== titleResult.title) {
        this.$emit("open", {
          event,
          compoponent: this
        });
      }
    },
    setUpdateInterval: function setUpdateInterval() {
      if (this.$props.updateInterval) {
        this.updateIntervalId = setInterval(this.onIntervalUpdate, this.$props.updateInterval);
      }
    },
    onIntervalUpdate: function onIntervalUpdate() {
      var target = this.computedTarget;
      if (!target) {
        return;
      }
      if (target.parentElement === null) {
        this.onClose({
          target
        });
      } else {
        this.showToolTip({
          target
        });
      }
    },
    resetPosition: function resetPosition() {
      if (this.element) {
        var position = this.setPosition(this.element);
        if (this.$props.updatePosition) {
          position = this.$props.updatePosition({
            element: this.element,
            targetElement: this.computedTarget,
            mouseTop: this.top,
            mouseLeft: this.left,
            anchorElement: this.$props.anchorElement,
            position: this.$props.position,
            target: this,
            defaultPosition: position
          });
        }
        this.element.style.left = position.left + "px";
        this.element.style.top = position.top + "px";
      }
    },
    isVisible: function isVisible(element) {
      return !this.$props.filter || this.$props.filter(element);
    },
    setPosition: function setPosition(element) {
      var target = this.parentTitle ? this.getTitle(this.computedTarget).element : this.computedTarget;
      var domRect = getDomRect(target);
      var left = getLeftPosition(this.left, element.offsetWidth, domRect, this.$props.anchorElement, this.$props.position);
      var top = getTopPosition(this.top, domRect, element.offsetHeight, this.$props.anchorElement, this.$props.position);
      return {
        left,
        top
      };
    },
    getTitle: function getTitle(element) {
      while (element) {
        if (element.getAttribute("title") !== null || element.titleExpando) {
          var title = element.getAttribute("title") || element.titleExpando;
          return {
            title,
            element
          };
        }
        element = this.$props.parentTitle && element.parentElement || null;
      }
      return {
        title: "",
        element
      };
    },
    calloutClassName: function calloutClassName() {
      switch (this.$props.position) {
        case "bottom":
          return "k-callout k-callout-n";
        case "left":
          return "k-callout k-callout-e";
        case "right":
          return "k-callout k-callout-w";
        case "top":
          return "k-callout k-callout-s";
        default:
          return canUseDOM && this.top < window.innerHeight / 2 ? "k-callout k-callout-n" : "k-callout k-callout-s";
      }
    },
    getCurrentZIndex: function getCurrentZIndex() {
      return this.kCurrentZIndex ? this.kCurrentZIndex : DEFAULT_TOOLTIP_ZINDEX;
    }
  }
};
var Tooltip = TooltipVue2;
export {
  Tooltip,
  TooltipVue2
};
//# sourceMappingURL=@progress_kendo-vue-tooltip.js.map
