import {
  provideLocalizationService
} from "./chunk-TNWINVQ6.js";
import {
  Button
} from "./chunk-EA6IUSJI.js";
import "./chunk-P43752AQ.js";
import "./chunk-GK4QQKT7.js";
import {
  caretAltDownIcon,
  caretAltLeftIcon,
  caretAltRightIcon,
  caretAltUpIcon,
  caretDoubleAltLeftIcon,
  caretDoubleAltRightIcon,
  xIcon
} from "./chunk-HKPTYRTE.js";
import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";
import "./chunk-HM4MQYWN.js";

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value) {
  return typeof value === "object";
};

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/classNames.js
var classNames = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.filter(function(arg) {
    return arg !== true && !!arg;
  }).map(function(arg) {
    return Array.isArray(arg) ? classNames.apply(void 0, arg) : isObject(arg) ? Object.keys(arg).map(function(key, idx) {
      return arg[idx] || arg[key] && key || null;
    }).filter(function(el) {
      return el !== null;
    }).join(" ") : arg;
  }).filter(function(arg) {
    return !!arg;
  }).join(" ");
};

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a2) {
  var h = _a2.h, template = _a2.template, defaultRendering = _a2.defaultRendering, defaultSlots = _a2.defaultSlots, additionalProps = _a2.additionalProps, additionalListeners = _a2.additionalListeners, swapDefaultSlots = _a2.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/isRtl.js
function isRtl(element) {
  return Boolean(canUseDOM && element && getComputedStyle(element).direction === "rtl");
}

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata2) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata2);
  } else {
    var message = "License activation failed for ".concat(packageMetadata2.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata2.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/theme.js
var kendoThemeMaps = {
  sizeMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  roundedMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  }
};

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";

// node_modules/@progress/kendo-vue-listbox/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation2.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation2.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation2.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-vue-listbox/dist/es/interfaces/Enums.js
var toolbarPosition;
(function(toolbarPosition2) {
  toolbarPosition2["TOP"] = "top";
  toolbarPosition2["BOTTOM"] = "bottom";
  toolbarPosition2["LEFT"] = "left";
  toolbarPosition2["RIGHT"] = "right";
  toolbarPosition2["NONE"] = "none";
})(toolbarPosition || (toolbarPosition = {}));

// node_modules/@progress/kendo-vue-listbox/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-listbox",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1689689643,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-listbox/dist/es/ListBox.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var ListBoxVue2 = {
  name: "KendoListBox",
  // @ts-ignore
  emits: {
    dragstart: null,
    itemclick: null,
    drop: null,
    dragover: null,
    keydown: null,
    dragleave: null
  },
  props: {
    size: {
      type: String,
      default: "medium",
      validator: function validator(value) {
        return [null, "small", "medium", "large"].includes(value);
      }
    },
    toolbarPosition: {
      type: String,
      default: toolbarPosition.RIGHT,
      validator: function validator2(value) {
        return ["none", "top", "bottom", "left", "right"].includes(value);
      }
    },
    textField: String,
    valueField: String,
    keyField: String,
    selectedField: String,
    item: [String, Object, Function],
    toolbar: [String, Object, Function],
    tabIndex: Number,
    dataItems: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    draggable: {
      type: Boolean,
      default: false
    }
  },
  created: function created2() {
    validatePackage(packageMetadata);
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a2;
      var nonePosition = this.$props.toolbarPosition === toolbarPosition.NONE || this.$props.toolbar === void 0;
      return _a2 = {
        "k-listbox": true
      }, _a2["k-listbox-actions-".concat(this.$props.toolbarPosition)] = !nonePosition, _a2;
    }
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render2(createElement) {
    var _a2;
    var h = gh5 || createElement;
    var toolbarTemplate = templateRendering.call(this, this.$props.toolbar, getListeners.call(this));
    var toolbarRender = getTemplate.call(this, {
      h,
      template: toolbarTemplate
    });
    return h("div", {
      "class": this.wrapperClass,
      unselectable: "on",
      attrs: this.v3 ? void 0 : {
        unselectable: "on"
      }
    }, [this.$props.toolbarPosition !== "bottom" && toolbarRender, h("div", {
      "class": "k-list-scroller k-selectable",
      "data-role": "selectable",
      attrs: this.v3 ? void 0 : {
        "data-role": "selectable"
      },
      onDragover: function onDragover(e) {
        return e.preventDefault();
      },
      on: this.v3 ? void 0 : {
        "dragover": function onDragover(e) {
          return e.preventDefault();
        },
        "drop": this.handleContainerDrop,
        "dragleave": this.handleOnDragLeave
      },
      onDrop: this.handleContainerDrop,
      onDragleave: this.handleOnDragLeave
    }, [h("div", {
      "class": classNames("k-list", (_a2 = {}, _a2["k-list-".concat(kendoThemeMaps.sizeMap[this.$props.size] || this.$props.size)] = this.$props.size, _a2))
    }, [h("div", {
      "class": "k-list-content"
    }, [h("ul", {
      "class": "k-list-ul",
      role: "listbox",
      attrs: this.v3 ? void 0 : {
        role: "listbox",
        "aria-label": "listbox-container",
        tabIndex: this.tabIndex
      },
      "aria-label": "listbox-container",
      tabIndex: this.tabIndex,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown
      }
    }, [this.$props.dataItems.map(function(item, index) {
      var _this = this;
      var selectedValue = this.setSelected(item);
      var itemGuid = guid();
      var defaultRendering = h("span", {
        "class": "k-list-item-text"
      }, [this.$props.textField ? item[this.$props.textField] : item.toString()]);
      var itemTemplate = templateRendering.call(this, this.$props.item, getListeners.call(this));
      var itemRender = getTemplate.call(this, {
        h,
        template: itemTemplate,
        defaultRendering,
        additionalProps: {
          dataItem: item,
          index
        }
      });
      return h("li", {
        "class": classNames("k-list-item", {
          "k-selected": selectedValue
        }, item.class),
        style: item.style,
        role: "option",
        attrs: this.v3 ? void 0 : {
          role: "option",
          "aria-selected": selectedValue,
          id: itemGuid + index,
          "data-uid": itemGuid + index,
          draggable: this.$props.draggable
        },
        "aria-selected": selectedValue,
        key: this.$props.keyField ? item[this.$props.keyField] : index,
        id: itemGuid + index,
        "data-uid": itemGuid + index,
        draggable: this.$props.draggable,
        onDragstart: function onDragstart(event) {
          return _this.dispatchEvent("dragstart", event, item);
        },
        on: this.v3 ? void 0 : {
          "dragstart": function onDragstart(event) {
            return _this.dispatchEvent("dragstart", event, item);
          },
          "dragOver": function dragOver(event) {
            event.preventDefault();
            _this.dispatchEvent("dragover", event, item);
          },
          "drop": function drop(event) {
            return _this.dispatchEvent("drop", event, item);
          },
          "click": function click(event) {
            return _this.dispatchEvent("itemclick", event, item);
          }
        },
        onDragOver: function dragOver(event) {
          event.preventDefault();
          _this.dispatchEvent("dragover", event, item);
        },
        onDrop: function drop(event) {
          return _this.dispatchEvent("drop", event, item);
        },
        onClick: function click(event) {
          return _this.dispatchEvent("itemclick", event, item);
        }
      }, [itemRender]);
    }, this)])])])]), this.$props.toolbarPosition === "bottom" && toolbarRender, h("select", {
      style: {
        display: "none"
      },
      multiple: true,
      attrs: this.v3 ? void 0 : {
        multiple: true,
        "data-role": "listbox"
      },
      "data-role": "listbox"
    }, [this.$props.dataItems.map(function(item, index) {
      var value = item[this.$props.valueField || this.$props.textField];
      return h("option", {
        key: index,
        value: this.v3 ? value : null,
        domProps: this.v3 ? void 0 : {
          "value": value
        }
      }, [value]);
    }, this)])]);
  },
  methods: {
    dispatchEvent: function dispatchEvent(eventName, event, item) {
      this.$emit(eventName, {
        event,
        component: this,
        dataItem: item
      });
    },
    setSelected: function setSelected(item) {
      if (this.$props.selectedField) {
        return item[this.$props.selectedField] ? true : false;
      }
    },
    handleKeyDown: function handleKeyDown(event) {
      this.$emit("keydown", {
        event,
        component: this
      });
    },
    handleContainerDrop: function handleContainerDrop(event) {
      var targetElement = event.target;
      var isTargetContainer = targetElement.closest(".k-list-scroller");
      var isPartOfList = targetElement.closest(".k-list-ul");
      var items = this.$props.dataItems;
      if (isTargetContainer && !isPartOfList) {
        this.$emit("drop", {
          event,
          component: this,
          dataItem: items.length > 0 ? items[items.length - 1] : null
        });
      }
    },
    handleOnDragLeave: function handleOnDragLeave(event) {
      var isTargetContainer = event.target.classList.contains("k-list-content");
      if (isTargetContainer) {
        this.$emit("dragleave", {
          event,
          component: this
        });
      }
    }
  }
};
var ListBox = ListBoxVue2;

// node_modules/@progress/kendo-vue-listbox/dist/es/messages/main.js
var _a;
var moveUp = "listbox.moveUp";
var moveDown = "listbox.moveDown";
var transferTo = "listbox.transferTo";
var transferFrom = "listbox.transferFrom";
var transferAllTo = "listbox.transferAllTo";
var transferAllFrom = "listbox.transferAllFrom";
var remove = "listbox.remove";
var messages = (_a = {}, _a[moveUp] = "Move Up", _a[moveDown] = "Move Down", _a[transferTo] = "Transfer To", _a[transferFrom] = "Transfer From", _a[transferAllTo] = "Transfer All To", _a[transferAllFrom] = "Transfer All From", _a[remove] = "Delete", _a);

// node_modules/@progress/kendo-vue-listbox/dist/es/ListBoxToolbar.js
var allVue7 = vue_runtime_esm_bundler_exports;
var gh6 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";
var tools = [{
  name: "moveUp",
  iconName: "caret-alt-up",
  svgIcon: caretAltUpIcon
}, {
  name: "moveDown",
  iconName: "caret-alt-down",
  svgIcon: caretAltDownIcon
}, {
  name: "transferTo",
  iconName: "caret-alt-right",
  svgIcon: caretAltRightIcon
}, {
  name: "transferFrom",
  iconName: "caret-alt-left",
  svgIcon: caretAltLeftIcon
}, {
  name: "transferAllTo",
  iconName: "caret-double-alt-right",
  svgIcon: caretDoubleAltRightIcon
}, {
  name: "transferAllFrom",
  iconName: "caret-double-alt-left",
  svgIcon: caretDoubleAltLeftIcon
}, {
  name: "remove",
  iconName: "x",
  svgIcon: xIcon
}];
var ListBoxToolbarVue2 = {
  name: "KendoListBoxToolbar",
  props: {
    dataItems: Array,
    dataConnected: Array,
    tools: Array,
    selectedField: {
      type: String,
      default: "selected"
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      currentRtl: false
    };
  },
  mounted: function mounted2() {
    this.currentRtl = isRtl(this.$el);
  },
  // @ts-ignore
  setup: !isV37 ? void 0 : function() {
    var v3 = !!isV37;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render3(createElement) {
    var h = gh6 || createElement;
    var localizationService = provideLocalizationService(this);
    return h("div", {
      "class": "k-listbox-actions"
    }, [this.$props.tools && this.$props.tools.map(function(tool, index) {
      var _this = this;
      var indexOfTool = tools.findIndex(function(x) {
        return x.name === tool;
      });
      var currentTool = tools[indexOfTool];
      var isDisabled = this.isItemDisabled(currentTool.name);
      var toolKey = "listbox.".concat(currentTool.name);
      var title = localizationService.toLanguageString(toolKey, messages[toolKey]);
      return h(Button, {
        key: index,
        disabled: isDisabled,
        attrs: this.v3 ? void 0 : {
          disabled: isDisabled,
          "data-command": currentTool.name,
          title,
          "aria-label": title,
          icon: this.currentRtl ? this.getRtlFontIcon(currentTool.iconName) : currentTool.iconName,
          svgIcon: this.currentRtl ? this.getRtlSvgIcon(currentTool.svgIcon) : currentTool.svgIcon
        },
        "data-command": currentTool.name,
        title,
        "aria-label": title,
        icon: this.currentRtl ? this.getRtlFontIcon(currentTool.iconName) : currentTool.iconName,
        svgIcon: this.currentRtl ? this.getRtlSvgIcon(currentTool.svgIcon) : currentTool.svgIcon,
        onClick: function onClick(e) {
          e.preventDefault();
          _this.handleToolClick(e, currentTool.name || null);
        },
        on: this.v3 ? void 0 : {
          "click": function onClick(e) {
            e.preventDefault();
            _this.handleToolClick(e, currentTool.name || null);
          }
        }
      });
    }, this)]);
  },
  methods: {
    getRtlSvgIcon: function getRtlSvgIcon(toolIcon) {
      switch (toolIcon.name) {
        case "caret-alt-right":
          return caretAltLeftIcon;
        case "caret-alt-left":
          return caretAltRightIcon;
        case "caret-double-alt-right":
          return caretDoubleAltLeftIcon;
        case "caret-double-alt-left":
          return caretDoubleAltRightIcon;
        default:
      }
      return toolIcon;
    },
    getRtlFontIcon: function getRtlFontIcon(toolIcon) {
      switch (toolIcon) {
        case "caret-alt-right":
          return "caret-alt-left";
        case "caret-alt-left":
          return "caret-alt-right";
        case "caret-double-alt-right":
          return "caret-double-alt-left";
        case "caret-double-alt-left":
          return "caret-double-alt-right";
        default:
      }
      return toolIcon;
    },
    handleToolClick: function handleToolClick(event, name) {
      this.$emit("toolclick", {
        event,
        component: this,
        toolName: name
      });
    },
    isItemDisabled: function isItemDisabled(tool) {
      var disabled = true;
      var selectedField = this.$props.selectedField || "selected";
      var dataLength = this.$props.dataItems.length;
      var dataConnectedLength = this.$props.dataConnected.length;
      var hasSelected = this.$props.dataItems.findIndex(function(item) {
        return item[selectedField] === true;
      }) >= 0;
      var hasSelectedTwo = this.$props.dataConnected.findIndex(function(item) {
        return item[selectedField] === true;
      }) >= 0;
      switch (tool) {
        case "moveUp":
          if (hasSelected) {
            disabled = this.$props.dataItems.length > 0 ? this.$props.dataItems[0].selected : true;
          } else if (hasSelectedTwo) {
            disabled = this.$props.dataConnected.length > 0 ? this.$props.dataConnected[0].selected : true;
          } else {
            disabled = true;
          }
          break;
        case "moveDown":
          if (hasSelected) {
            disabled = this.$props.dataItems[dataLength - 1] ? this.$props.dataItems[dataLength - 1].selectedField : true;
          } else if (hasSelectedTwo) {
            disabled = this.$props.dataConnected.length > 0 ? this.$props.dataConnected[dataConnectedLength - 1].selected : true;
          } else {
            disabled = true;
          }
          break;
        case "transferTo":
          disabled = !(this.$props.dataConnected && hasSelected);
          break;
        case "transferFrom":
          if (this.$props.dataConnected) {
            disabled = !(this.$props.dataConnected && hasSelectedTwo);
          } else {
            disabled = true;
          }
          break;
        case "transferAllTo":
          disabled = !(this.$props.dataConnected && this.$props.dataItems.length > 0);
          break;
        case "transferAllFrom":
          disabled = !(this.$props.dataConnected && this.$props.dataConnected.length > 0);
          break;
        case "remove":
          disabled = !(hasSelected || hasSelectedTwo);
          break;
        default:
      }
      return disabled;
    }
  }
};
var ListBoxToolbar = ListBoxToolbarVue2;

// node_modules/@progress/kendo-vue-listbox/dist/es/utils.js
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var processListBoxData = function processListBoxData2(listBoxOneData, listBoxTwoData, toolName, selectedField) {
  if (listBoxOneData === void 0) {
    listBoxOneData = [];
  }
  if (listBoxTwoData === void 0) {
    listBoxTwoData = [];
  }
  var newFirstData = [];
  var itemsForTransfer = [];
  var newSecondData = [];
  var result = {
    listBoxOneData,
    listBoxTwoData
  };
  switch (toolName) {
    case "moveUp":
      newFirstData = __spreadArray([], listBoxOneData, true);
      newFirstData.forEach(function(item, index) {
        if (item[selectedField]) {
          newFirstData = moveItem(index, index - 1, newFirstData);
        }
      });
      newSecondData = __spreadArray([], listBoxTwoData, true);
      newSecondData.forEach(function(item, index) {
        if (item[selectedField]) {
          newSecondData = moveItem(index, index - 1, newSecondData);
        }
      });
      result.listBoxOneData = newFirstData;
      result.listBoxTwoData = newSecondData;
      break;
    case "moveDown":
      newFirstData = listBoxOneData.reverse();
      newFirstData.forEach(function(item, index) {
        if (item[selectedField]) {
          newFirstData = moveItem(index, index - 1, newFirstData);
        }
      });
      newSecondData = listBoxTwoData.reverse();
      newSecondData.forEach(function(item, index) {
        if (item[selectedField]) {
          newSecondData = moveItem(index, index - 1, newSecondData);
        }
      });
      result.listBoxOneData = __spreadArray([], newFirstData, true).reverse();
      result.listBoxTwoData = __spreadArray([], newSecondData, true).reverse();
      break;
    case "transferTo":
      newFirstData = listBoxOneData.filter(function(item) {
        return !item[selectedField];
      });
      itemsForTransfer = listBoxOneData.filter(function(item) {
        return item[selectedField];
      });
      newSecondData = listBoxTwoData.concat(itemsForTransfer);
      result.listBoxOneData = newFirstData;
      result.listBoxTwoData = newSecondData;
      break;
    case "transferFrom":
      newSecondData = listBoxTwoData.filter(function(item) {
        return !item[selectedField];
      });
      itemsForTransfer = listBoxTwoData.filter(function(item) {
        return item[selectedField];
      });
      newFirstData = listBoxOneData.concat(itemsForTransfer);
      result.listBoxOneData = newFirstData;
      result.listBoxTwoData = newSecondData;
      break;
    case "transferAllTo":
      result.listBoxOneData = [];
      result.listBoxTwoData = listBoxTwoData.concat(listBoxOneData);
      break;
    case "transferAllFrom":
      result.listBoxOneData = listBoxTwoData.concat(listBoxOneData);
      result.listBoxTwoData = [];
      break;
    case "remove":
      newSecondData = listBoxTwoData.filter(function(item) {
        return !item[selectedField];
      });
      newFirstData = listBoxOneData.filter(function(item) {
        return !item[selectedField];
      });
      result.listBoxOneData = newFirstData;
      result.listBoxTwoData = newSecondData;
      break;
    default:
  }
  return result;
};
var moveItem = function moveItem2(from, to, data2) {
  var f = data2.splice(from, 1)[0];
  data2.splice(to, 0, f);
  return data2;
};
var processListBoxDragAndDrop = function processListBoxDragAndDrop2(listBoxOneData, listBoxTwoData, dragItem, dropItem, valueField) {
  if (listBoxOneData === void 0) {
    listBoxOneData = [];
  }
  if (listBoxTwoData === void 0) {
    listBoxTwoData = [];
  }
  var dragItemIndexInFirstList = listBoxOneData.findIndex(function(item) {
    return item[valueField] === dragItem[valueField];
  });
  var dragItemIndexInSecondList = listBoxTwoData.findIndex(function(item) {
    return item[valueField] === dragItem[valueField];
  });
  var dropItemIndexInFirstList = dropItem !== null ? listBoxOneData.findIndex(function(item) {
    return item[valueField] === dropItem[valueField];
  }) : -1;
  var dropItemIndexInSecondList = dropItem !== null ? listBoxTwoData.findIndex(function(item) {
    return item[valueField] === dropItem[valueField];
  }) : -1;
  var isDragItemInFirstList = dragItemIndexInFirstList >= 0 ? true : false;
  var isDragItemInSecondList = dragItemIndexInSecondList >= 0 ? true : false;
  var isDropItemInFirstList = dropItemIndexInFirstList >= 0 ? true : false;
  var isDropItemInSecondList = dropItemIndexInSecondList >= 0 ? true : false;
  var firstDataSet = __spreadArray([], listBoxOneData, true);
  var secondDataSet = __spreadArray([], listBoxTwoData, true);
  if (isDragItemInFirstList && isDropItemInFirstList) {
    return {
      listBoxOneData: moveItem(dragItemIndexInFirstList, dropItemIndexInFirstList, listBoxOneData),
      listBoxTwoData
    };
  }
  if (isDragItemInSecondList && isDropItemInSecondList) {
    return {
      listBoxOneData,
      listBoxTwoData: moveItem(dragItemIndexInSecondList, dropItemIndexInSecondList, listBoxTwoData)
    };
  }
  if (isDragItemInFirstList && (isDropItemInSecondList || dropItem === null)) {
    if (dropItem === null) {
      secondDataSet.push(listBoxOneData[dragItemIndexInFirstList]);
    } else {
      secondDataSet.splice(dropItemIndexInSecondList + 1, 0, listBoxOneData[dragItemIndexInFirstList]);
    }
    firstDataSet.splice(dragItemIndexInFirstList, 1);
    return {
      listBoxOneData: firstDataSet,
      listBoxTwoData: secondDataSet
    };
  }
  if (isDragItemInSecondList && (isDropItemInFirstList || dropItem === null)) {
    if (dropItem === null) {
      firstDataSet.push(listBoxTwoData[dragItemIndexInSecondList]);
    } else {
      firstDataSet.splice(dropItemIndexInFirstList + 1, 0, listBoxTwoData[dragItemIndexInSecondList]);
    }
    secondDataSet.splice(dragItemIndexInSecondList, 1);
    return {
      listBoxOneData: firstDataSet,
      listBoxTwoData: secondDataSet
    };
  }
  return {
    listBoxOneData,
    listBoxTwoData
  };
};
export {
  ListBox,
  ListBoxToolbar,
  moveItem,
  processListBoxData,
  processListBoxDragAndDrop
};
//# sourceMappingURL=@progress_kendo-vue-listbox.js.map
