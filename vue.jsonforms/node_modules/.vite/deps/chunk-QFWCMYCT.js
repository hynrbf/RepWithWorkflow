import {
  FloatingLabel
} from "./chunk-C5E7VHMO.js";
import {
  provideIntlService,
  provideLocalizationService
} from "./chunk-TNWINVQ6.js";
import {
  Button,
  ButtonGroup
} from "./chunk-EA6IUSJI.js";
import {
  Popup
} from "./chunk-P43752AQ.js";
import {
  arrowsSwapIcon,
  calendarIcon,
  caretAltDownIcon,
  caretAltUpIcon,
  chevronLeftIcon,
  chevronRightIcon,
  clockIcon
} from "./chunk-HKPTYRTE.js";
import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value2) {
  return typeof value2 === "object";
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/classNames.js
var classNames = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.filter(function(arg) {
    return arg !== true && !!arg;
  }).map(function(arg) {
    return Array.isArray(arg) ? classNames.apply(void 0, arg) : isObject(arg) ? Object.keys(arg).map(function(key, idx) {
      return arg[idx] || arg[key] && key || null;
    }).filter(function(el) {
      return el !== null;
    }).join(" ") : arg;
  }).filter(function(arg) {
    return !!arg;
  }).join(" ");
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/keys.js
var Keys = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  delete: 46
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/refs.js
function getRef(comp, refName, customRef) {
  return comp.v3 ? comp["".concat(refName, "Ref")] : comp.$refs["".concat(customRef || refName)];
}
function setRef(comp, refName, customRef) {
  return comp.v3 ? function(el) {
    comp["".concat(refName, "Ref")] = el;
  } : customRef || refName;
}

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(obj, key, value2) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event2) {
      if (this.element) {
        this.$emit("press", event2, this.element);
      }
    },
    drag: function drag(event2) {
      if (this.element) {
        this.$emit("drag", event2, this.element);
      }
    },
    release: function release(event2) {
      if (this.element) {
        this.$emit("release", event2, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/clone.js
var cloneDate = function(date2) {
  return date2 ? new Date(date2.getTime()) : null;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/noop.js
var noop = function() {
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a9) {
  var h = _a9.h, template = _a9.template, defaultRendering = _a9.defaultRendering, defaultSlots = _a9.defaultSlots, additionalProps = _a9.additionalProps, additionalListeners = _a9.additionalListeners, swapDefaultSlots = _a9.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/isRtl.js
function isRtl(element5) {
  return Boolean(canUseDOM && element5 && getComputedStyle(element5).direction === "rtl");
}

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata2) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata2);
  } else {
    var message = "License activation failed for ".concat(packageMetadata2.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata2.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/theme.js
var kendoThemeMaps = {
  sizeMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  roundedMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  }
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/icons/constants.js
var SIZE_CLASSES = {
  "default": "",
  "xsmall": "k-icon-xs",
  "small": "k-icon-sm",
  "medium": "k-icon-md",
  "large": "k-icon-lg",
  "xlarge": "k-icon-xl",
  "xxlarge": "k-icon-xxl",
  "xxxlarge": "k-icon-xxxl"
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";
var FontIconVue2 = {
  name: "KendoFontIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    tabIndex: Number
  },
  computed: {
    fontClassNames: function fontClassNames() {
      var _a9;
      var _b3 = this.$props, name = _b3.name, flip = _b3.flip, size = _b3.size, themeColor = _b3.themeColor;
      return _a9 = {
        "k-icon": true
      }, _a9["k-i-" + name] = name, _a9["k-color-" + themeColor] = themeColor, _a9["k-flip-h"] = flip === "horizontal" || flip === "both", _a9["k-flip-v"] = flip === "vertical" || flip === "both", _a9[SIZE_CLASSES[size]] = size, _a9;
    }
  },
  // @ts-ignore
  setup: !isV33 ? void 0 : function() {
    var v3 = !!isV33;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh2 || createElement;
    var _a9 = this.$props, id = _a9.id, title = _a9.title, tabIndex = _a9.tabIndex, ariaLabel = _a9.ariaLabel;
    return h("span", {
      "class": this.fontClassNames,
      id,
      attrs: this.v3 ? void 0 : {
        id,
        title,
        "aria-label": ariaLabel,
        tabIndex,
        role: "presentation"
      },
      title,
      "aria-label": ariaLabel,
      tabIndex,
      role: "presentation",
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    });
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit("click", e);
    }
  }
};
var FontIcon = FontIconVue2;

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";
var SvgIconVue2 = {
  name: "KendoSvgIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    icon: Object,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number,
    svgClassName: String,
    svgStyle: Object
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a9;
      var _b3 = this.$props, name = _b3.name, flip = _b3.flip, size = _b3.size, themeColor = _b3.themeColor;
      return _a9 = {
        "k-svg-icon": true
      }, _a9["k-color-" + themeColor] = themeColor, _a9["k-svg-i-" + name] = name, _a9["k-flip-h"] = flip === "horizontal" || flip === "both", _a9["k-flip-v"] = flip === "vertical" || flip === "both", _a9[SIZE_CLASSES[size]] = size, _a9;
    }
  },
  // @ts-ignore
  setup: !isV34 ? void 0 : function() {
    var v3 = !!isV34;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render3(createElement) {
    var h = gh3 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a9 = this.$props, svgClassName = _a9.svgClassName, icon = _a9.icon, id = _a9.id, tabIndex = _a9.tabIndex, svgStyle = _a9.svgStyle, viewBox = _a9.viewBox, title = _a9.title, ariaLabel = _a9.ariaLabel;
    var innerHTML = icon ? icon.content : void 0;
    var attrs = {
      id,
      title,
      "aria-hidden": true,
      tabIndex,
      ariaLabel,
      focusable: "false",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: icon ? icon.viewBox : viewBox
    };
    var svg = h("svg", __assign2(__assign2({}, attrs), {
      attrs: this.v3 ? void 0 : attrs,
      domProps: this.v3 ? void 0 : {
        innerHTML
      },
      innerHTML,
      "class": svgClassName,
      style: svgStyle
    }), icon ? [] : [defaultSlot]);
    return h("span", {
      "class": this.wrapperClass,
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }, [svg]);
  },
  methods: {
    handleClick: function handleClick2(e) {
      this.$emit("click", e);
    }
  }
};
var SvgIcon = SvgIconVue2;

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";
var IconVue2 = {
  name: "KendoIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  inject: {
    kendoIcons: {
      default: {
        type: "svg",
        icons: {}
      }
    }
  },
  props: {
    name: String,
    icon: Object,
    title: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number
  },
  // @ts-ignore
  setup: !isV35 ? void 0 : function() {
    var v3 = !!isV35;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render4(createElement) {
    var h = gh4 || createElement;
    var _a9 = this.$props, name = _a9.name, icon = _a9.icon, themeColor = _a9.themeColor, size = _a9.size, flip = _a9.flip, id = _a9.id, viewBox = _a9.viewBox, tabIndex = _a9.tabIndex, title = _a9.title, ariaLabel = _a9.ariaLabel;
    var svg = name && this.kendoIcons && this.kendoIcons.icons && this.kendoIcons.icons[name] || icon;
    var renderSVG = this.kendoIcons && this.kendoIcons.type === "svg" && svg !== void 0;
    var newSize = this.kendoIcons && this.kendoIcons.size ? this.kendoIcons.size : size;
    var newFlip = this.kendoIcons && this.kendoIcons.flip ? this.kendoIcons.flip : flip;
    var resolvedName = name || (icon && icon.name ? icon.name : void 0);
    var commonProps = {
      themeColor,
      size: newSize,
      flip: newFlip,
      id,
      tabIndex,
      title,
      ariaLabel
    };
    var fontIcon = h(FontIcon, __assign3(__assign3({}, commonProps), {
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    var svgIcon = h(SvgIcon, __assign3(__assign3({}, commonProps), {
      icon: svg,
      viewBox,
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        icon: svg,
        viewBox,
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    return renderSVG ? svgIcon : fontIcon;
  },
  methods: {
    handleClick: function handleClick3(e) {
      this.$emit("click", e);
    }
  }
};
var Icon = IconVue2;

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation2.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation2.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation2.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.focusElement = function(element5, previous) {
      if (element5) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element5.setAttribute("tabindex", String(this.tabIndex));
        }
        element5.focus({ preventScroll: true });
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/clone-date.js
var cloneDate2 = function(date2) {
  return date2 ? new Date(date2.getTime()) : null;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/adjust-dst.js
var adjustDST = function(date2, hour) {
  var newDate = cloneDate2(date2);
  if (hour === 0 && newDate.getHours() === 23) {
    newDate.setHours(newDate.getHours() + 2);
  }
  return newDate;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/add-days.js
var addDays = function(date2, offset2) {
  var newDate = cloneDate2(date2);
  newDate.setDate(newDate.getDate() + offset2);
  return adjustDST(newDate, date2.getHours());
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/create-date.js
var createDate = function(year, month, day, hours, minutes, seconds, milliseconds) {
  if (hours === void 0) {
    hours = 0;
  }
  if (minutes === void 0) {
    minutes = 0;
  }
  if (seconds === void 0) {
    seconds = 0;
  }
  if (milliseconds === void 0) {
    milliseconds = 0;
  }
  var date2 = new Date(year, month, day, hours, minutes, seconds, milliseconds);
  if (year > -1 && year < 100) {
    date2.setFullYear(date2.getFullYear() - 1900);
  }
  return adjustDST(date2, hours);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/last-day-of-month.js
var lastDayOfMonth = function(date2) {
  var newDate = createDate(date2.getFullYear(), date2.getMonth() + 1, 1, date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds());
  return addDays(newDate, -1);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/add-months.js
var MONTHS_LENGTH = 12;
var normalize = function(date2, expectedMonth) {
  return date2.getMonth() !== expectedMonth ? lastDayOfMonth(addMonths(date2, -1)) : date2;
};
var addMonths = function(date2, offset2) {
  var newDate = cloneDate2(date2);
  var diff = (newDate.getMonth() + offset2) % MONTHS_LENGTH;
  var expectedMonth = (MONTHS_LENGTH + diff) % MONTHS_LENGTH;
  newDate.setMonth(newDate.getMonth() + offset2);
  return normalize(adjustDST(newDate, date2.getHours()), expectedMonth);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/set-year.js
var setYear = function(value2, year) {
  var month = value2.getMonth();
  var candidate = createDate(year, month, value2.getDate(), value2.getHours(), value2.getMinutes(), value2.getSeconds(), value2.getMilliseconds());
  return candidate.getMonth() === month ? candidate : lastDayOfMonth(addMonths(candidate, -1));
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/add-years.js
var addYears = function(value2, offset2) {
  return adjustDST(setYear(value2, value2.getFullYear() + offset2), value2.getHours());
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/add-centuries.js
var addCenturies = function(value2, offset2) {
  return addYears(value2, 100 * offset2);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/add-decades.js
var addDecades = function(value2, offset2) {
  return addYears(value2, 10 * offset2);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/add-weeks.js
var addWeeks = function(date2, offset2) {
  return addDays(date2, offset2 * 7);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/constants.js
var MS_PER_MINUTE = 6e4;
var MS_PER_HOUR = 36e5;
var MS_PER_DAY = 864e5;

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/direction.enum.js
var Direction;
(function(Direction4) {
  Direction4[Direction4["Forward"] = 1] = "Forward";
  Direction4[Direction4["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/day-of-week.js
var dayOfWeek = function(date2, weekDay, direction) {
  if (direction === void 0) {
    direction = Direction.Forward;
  }
  var newDate = cloneDate2(date2);
  var newDay = (weekDay - newDate.getDay() + 7 * direction) % 7;
  newDate.setDate(newDate.getDate() + newDay);
  return adjustDST(newDate, date2.getHours());
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/day.enum.js
var Day;
(function(Day2) {
  Day2[Day2["Sunday"] = 0] = "Sunday";
  Day2[Day2["Monday"] = 1] = "Monday";
  Day2[Day2["Tuesday"] = 2] = "Tuesday";
  Day2[Day2["Wednesday"] = 3] = "Wednesday";
  Day2[Day2["Thursday"] = 4] = "Thursday";
  Day2[Day2["Friday"] = 5] = "Friday";
  Day2[Day2["Saturday"] = 6] = "Saturday";
})(Day || (Day = {}));

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/normalize-year.js
var normalizeYear = function(value2, year) {
  return setYear(value2, year(value2.getFullYear()));
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/first-decade-of-century.js
var firstDecadeOfCentury = function(value2) {
  return normalizeYear(value2, function(y) {
    return y - y % 100;
  });
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/duration-in-centuries.js
var durationInCenturies = function(start2, end2) {
  return (firstDecadeOfCentury(end2).getFullYear() - firstDecadeOfCentury(start2).getFullYear()) / 100;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/first-year-of-decade.js
var firstYearOfDecade = function(value2) {
  return normalizeYear(value2, function(y) {
    return y - y % 10;
  });
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/duration-in-decades.js
var durationInDecades = function(start2, end2) {
  return (firstYearOfDecade(end2).getFullYear() - firstYearOfDecade(start2).getFullYear()) / 10;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/duration-in-months.js
var durationInMonths = function(start2, end2) {
  return (end2.getFullYear() - start2.getFullYear()) * 12 + (end2.getMonth() - start2.getMonth());
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/duration-in-years.js
var durationInYears = function(start2, end2) {
  return end2.getFullYear() - start2.getFullYear();
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/first-day-of-month.js
var firstDayOfMonth = function(date2) {
  return createDate(date2.getFullYear(), date2.getMonth(), 1, date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds());
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/set-month.js
var setMonth = function(value2, month) {
  var day = value2.getDate();
  var candidate = createDate(value2.getFullYear(), month, day, value2.getHours(), value2.getMinutes(), value2.getSeconds(), value2.getMilliseconds());
  return candidate.getDate() === day ? candidate : lastDayOfMonth(addMonths(candidate, -1));
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/first-month-of-year.js
var firstMonthOfYear = function(value2) {
  return setMonth(value2, 0);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/get-date.js
var getDate = function(date2) {
  return createDate(date2.getFullYear(), date2.getMonth(), date2.getDate(), 0, 0, 0);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/is-equal.js
var isEqual = function(candidate, expected) {
  if (!candidate && !expected) {
    return true;
  }
  return candidate && expected && candidate.getTime() === expected.getTime();
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/is-equal-date.js
var isEqualDate = function(candidate, expected) {
  if (!candidate && !expected) {
    return true;
  }
  return candidate && expected && isEqual(getDate(candidate), getDate(expected));
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/last-decade-of-century.js
var lastDecadeOfCentury = function(value2) {
  return normalizeYear(value2, function(y) {
    return y - y % 100 + 90;
  });
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/last-month-of-year.js
var lastMonthOfYear = function(value2) {
  return setMonth(value2, 11);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/last-year-of-decade.js
var lastYearOfDecade = function(value2) {
  return normalizeYear(value2, function(y) {
    return y - y % 10 + 9;
  });
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/prev-day-of-week.js
var prevDayOfWeek = function(date2, weekDay) {
  return dayOfWeek(date2, weekDay, Direction.Backward);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/timezones.js
var timezones = {
  rules: {},
  titles: {},
  zones: {}
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/rule-to-date.js
var MONTHS = { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };
var DAYS = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };
var MS_PER_MINUTE2 = 6e4;
var ruleToDate = function(year, rule, zoneOffset) {
  var month = rule[3];
  var on = rule[4];
  var time2 = rule[5];
  var date2;
  var ruleOffset = time2[3] === "u" ? -zoneOffset * MS_PER_MINUTE2 : 0;
  if (!isNaN(on)) {
    date2 = new Date(Date.UTC(year, MONTHS[month], on, time2[0], time2[1], time2[2]) + ruleOffset);
  } else if (on.indexOf("last") === 0) {
    date2 = new Date(Date.UTC(year, MONTHS[month] + 1, 1, time2[0] - 24, time2[1], time2[2]) + ruleOffset);
    var targetDay = DAYS[on.substr(4, 3)];
    var ourDay = date2.getUTCDay();
    date2.setUTCDate(date2.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
  } else if (on.indexOf(">=") >= 0) {
    date2 = new Date(Date.UTC(year, MONTHS[month], on.substr(5), time2[0], time2[1], time2[2], 0) + ruleOffset);
    var targetDay = DAYS[on.substr(0, 3)];
    var ourDay = date2.getUTCDay();
    date2.setUTCDate(date2.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));
  }
  return date2;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/find-rule.js
var CURRENT_UTC_TIME = (/* @__PURE__ */ new Date()).getTime();
var findRule = function(zoneRule, utcTime, zoneOffset) {
  if (utcTime === void 0) {
    utcTime = CURRENT_UTC_TIME;
  }
  if (zoneOffset === void 0) {
    zoneOffset = 0;
  }
  var rules = timezones.rules[zoneRule];
  if (!rules) {
    var time2 = zoneRule.split(":");
    var offset2 = 0;
    if (time2.length > 1) {
      offset2 = time2[0] * 60 + Number(time2[1]);
    }
    return [-1e6, "max", "-", "Jan", 1, [0, 0, 0], offset2, "-"];
  }
  var year = new Date(utcTime).getUTCFullYear();
  rules = rules.filter(function(currentRule) {
    var from = currentRule[0];
    var to = currentRule[1];
    return from <= year && (to >= year || from === year && to === "only" || to === "max");
  });
  rules.push(utcTime);
  rules.sort(function(a, b) {
    if (typeof a !== "number") {
      a = Number(ruleToDate(year, a, zoneOffset));
    }
    if (typeof b !== "number") {
      b = Number(ruleToDate(year, b, zoneOffset));
    }
    return a - b;
  });
  var rule = rules[rules.indexOf(utcTime) - 1] || rules[rules.length - 1];
  return isNaN(rule) ? rule : null;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/errors.js
var NO_TZ_INFO = "The required {0} timezone information is not provided!";
var formatRegExp = /\{(\d+)}?\}/g;
var flatten = function(arr) {
  return arr.reduce(function(a, b) {
    return a.concat(b);
  }, []);
};
var formatMessage = function(message) {
  var values = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    values[_i - 1] = arguments[_i];
  }
  var flattenValues = flatten(values);
  return message.replace(formatRegExp, function(_, index) {
    return flattenValues[parseInt(index, 10)];
  });
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/get-zone.js
var getZoneRules = function(timezone) {
  var zones = timezones.zones;
  if (!zones) {
    throw new Error(formatMessage(NO_TZ_INFO, timezone));
  }
  var zoneRules = zones[timezone];
  var result = typeof zoneRules === "string" ? zones[zoneRules] : zoneRules;
  if (!result) {
    throw new Error(formatMessage(NO_TZ_INFO, timezone));
  }
  return result;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/find-zone.js
var findZone = function(timezone, utcTime) {
  if (utcTime === void 0) {
    utcTime = (/* @__PURE__ */ new Date()).getTime();
  }
  if (timezone === "Etc/UTC" || timezone === "Etc/GMT") {
    return [0, "-", "UTC", null];
  }
  var zoneRules = getZoneRules(timezone);
  var idx = zoneRules.length - 1;
  for (; idx >= 0; idx--) {
    var until = zoneRules[idx][3];
    if (until && utcTime > until) {
      break;
    }
  }
  var zone = zoneRules[idx + 1];
  if (!zone) {
    throw new Error(formatMessage(NO_TZ_INFO, timezone));
  }
  return zone;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/zone-and-rule.js
var zoneAndRule = function(timezone, date2) {
  var utcTime = date2.getTime();
  var zone = findZone(timezone, utcTime);
  return {
    rule: findRule(zone[1], utcTime, zone[0]),
    zone
  };
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/abbr-timezone.js
var abbrTimezone = function(timezone, date2) {
  if (date2 === void 0) {
    date2 = /* @__PURE__ */ new Date();
  }
  if (timezone === "Etc/UTC") {
    return "UTC";
  }
  if (timezone === "Etc/GMT") {
    return "GMT";
  }
  if (timezone === "") {
    return "";
  }
  var _a9 = zoneAndRule(timezone, date2), zone = _a9.zone, rule = _a9.rule;
  var base = zone[2];
  if (base.indexOf("/") >= 0) {
    return base.split("/")[rule && +rule[6] ? 1 : 0];
  } else if (base.indexOf("%s") >= 0) {
    return base.replace("%s", !rule || rule[7] === "-" ? "" : rule[7]);
  }
  return base;
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/offset.js
var offset = function(timezone, date2) {
  if (date2 === void 0) {
    date2 = /* @__PURE__ */ new Date();
  }
  if (timezone === "Etc/UTC" || timezone === "Etc/GMT") {
    return 0;
  }
  if (timezone === "") {
    return date2.getTimezoneOffset();
  }
  var _a9 = zoneAndRule(timezone, date2), rule = _a9.rule, zone = _a9.zone;
  return parseFloat(rule ? zone[0] - rule[6] : zone[0]);
};

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/to-local-date.js
function toLocalDate(date2) {
  return new Date(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate(), date2.getUTCHours(), date2.getUTCMinutes(), date2.getUTCSeconds(), date2.getUTCMilliseconds());
}

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/tz/zoned-date.js
var addMinutes = function(date2, minutes) {
  return new Date(date2.getTime() + minutes * MS_PER_MINUTE);
};
var addHours = function(date2, hours) {
  return new Date(date2.getTime() + hours * MS_PER_HOUR);
};
var dayAbbr = [
  "Sun",
  "Mon",
  "Tue",
  "Wed",
  "Thu",
  "Fri",
  "Sat"
];
var monthAbbr = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dev"
];
var datePrefix = function(utcDate) {
  return dayAbbr[utcDate.getUTCDay()] + " " + monthAbbr[utcDate.getUTCMonth()];
};
var padNumber = function(num, len) {
  if (len === void 0) {
    len = 2;
  }
  var sign = num < 0 ? "-" : "";
  return sign + new Array(len).concat([Math.abs(num)]).join("0").slice(-len);
};
function isZoneMissingHour(date2, timezone) {
  var currentOffset = offset(timezone, date2);
  var prevHour = addHours(date2, -1);
  var prevOffset = offset(timezone, prevHour);
  return currentOffset < prevOffset;
}
function shiftZoneMissingHour(utcDate, timezone) {
  var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;
  return addHours(utcDate, dstOffset);
}
function convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {
  if (fromTimezone === toTimezone) {
    return utcLocal;
  }
  var fromOffset = offset(fromTimezone, utcLocal);
  var toOffset = offset(toTimezone, utcLocal);
  var baseDiff = fromOffset - toOffset;
  var midDate = addMinutes(utcLocal, baseDiff);
  var midOffset = offset(toTimezone, midDate);
  var dstDiff = toOffset - midOffset;
  return addMinutes(utcLocal, baseDiff + dstDiff);
}
function formatOffset(tzOffset) {
  var sign = tzOffset <= 0 ? "+" : "-";
  var value2 = Math.abs(tzOffset);
  var hours = padNumber(Math.floor(value2 / 60));
  var minutes = padNumber(value2 % 60);
  return "GMT" + sign + hours + minutes;
}
var ZonedDate = (
  /** @class */
  function() {
    function ZonedDate2(utcDate, timezone) {
      this._utcDate = cloneDate2(utcDate);
      this.timezone = timezone;
      var tzOffset = offset(timezone, utcDate);
      this.timezoneOffset = tzOffset;
      var localDate = shiftZoneMissingHour(utcDate, timezone);
      this._localDate = convertTimezoneUTC(localDate, timezone, "Etc/UTC");
    }
    Object.defineProperty(ZonedDate2.prototype, "cachedLocalDate", {
      /**
       * Returns a cached local date that denotes the exact time in the set timezone.
       *
       * @return Date - A local date that denotes the exact time in the set timezone.
       *
       * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.
       *
       * > Modifying the returned instance will corrupt the `ZonedDate` state.
       */
      get: function() {
        return this._localDate;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZonedDate2.prototype, "cachedUTCDate", {
      /**
       * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.
       *
       * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.
       *
       * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.
       *
       * > Modifying the returned instance will corrupt the `ZonedDate` state.
       */
      get: function() {
        return this._utcDate;
      },
      enumerable: true,
      configurable: true
    });
    ZonedDate2.fromLocalDate = function(date2, timezone) {
      if (timezone === void 0) {
        timezone = "";
      }
      var utcDate = convertTimezoneUTC(date2, "Etc/UTC", timezone);
      var shiftZone = isZoneMissingHour(utcDate, timezone);
      var zoneOffset = offset(timezone, utcDate);
      var fixedOffset = 0;
      if (shiftZone) {
        fixedOffset = zoneOffset > 0 ? -1 : 1;
      }
      var adjDate = addHours(utcDate, fixedOffset);
      return ZonedDate2.fromUTCDate(adjDate, timezone);
    };
    ZonedDate2.fromUTCDate = function(utcDate, timezone) {
      if (timezone === void 0) {
        timezone = "";
      }
      return new ZonedDate2(utcDate, timezone);
    };
    ZonedDate2.prototype.toLocalDate = function() {
      return cloneDate2(this._localDate);
    };
    ZonedDate2.prototype.toUTCDate = function() {
      return cloneDate2(this._utcDate);
    };
    ZonedDate2.prototype.toTimezone = function(toTimezone) {
      if (this.timezone === toTimezone) {
        return this.clone();
      }
      var tzOffset = offset(this.timezone, this._utcDate);
      var date2 = addMinutes(this._utcDate, tzOffset);
      return ZonedDate2.fromLocalDate(date2, toTimezone);
    };
    ZonedDate2.prototype.clone = function() {
      return ZonedDate2.fromUTCDate(this._utcDate, this.timezone);
    };
    ZonedDate2.prototype.addDays = function(days) {
      var newDate = new Date(this._utcDate.getTime());
      newDate.setUTCDate(newDate.getUTCDate() + days);
      return ZonedDate2.fromUTCDate(newDate, this.timezone);
    };
    ZonedDate2.prototype.addTime = function(milliseconds) {
      var utcDate = new Date(this._utcDate.getTime());
      var utcMid = shiftZoneMissingHour(utcDate, this.timezone);
      utcMid.setTime(utcMid.getTime() + milliseconds);
      var utcResult = shiftZoneMissingHour(utcMid, this.timezone);
      return ZonedDate2.fromUTCDate(utcResult, this.timezone);
    };
    ZonedDate2.prototype.stripTime = function() {
      var date2 = this._utcDate;
      var ticks = Date.UTC(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate(), 0, 0, 0);
      return ZonedDate2.fromUTCDate(new Date(ticks), this.timezone);
    };
    ZonedDate2.prototype.getTime = function() {
      return this._localDate.getTime();
    };
    ZonedDate2.prototype.getTimezoneOffset = function() {
      return this.timezoneOffset;
    };
    ZonedDate2.prototype.getFullYear = function() {
      return this._utcDate.getUTCFullYear();
    };
    ZonedDate2.prototype.getMonth = function() {
      return this._utcDate.getUTCMonth();
    };
    ZonedDate2.prototype.getDate = function() {
      return this._utcDate.getUTCDate();
    };
    ZonedDate2.prototype.getDay = function() {
      return this._utcDate.getUTCDay();
    };
    ZonedDate2.prototype.getHours = function() {
      return this._utcDate.getUTCHours();
    };
    ZonedDate2.prototype.getMinutes = function() {
      return this._utcDate.getUTCMinutes();
    };
    ZonedDate2.prototype.getSeconds = function() {
      return this._utcDate.getUTCSeconds();
    };
    ZonedDate2.prototype.getMilliseconds = function() {
      return this._utcDate.getUTCMilliseconds();
    };
    ZonedDate2.prototype.getUTCDate = function() {
      return this._localDate.getUTCDate();
    };
    ZonedDate2.prototype.getUTCDay = function() {
      return this._localDate.getUTCDay();
    };
    ZonedDate2.prototype.getUTCFullYear = function() {
      return this._localDate.getUTCFullYear();
    };
    ZonedDate2.prototype.getUTCHours = function() {
      return this._localDate.getUTCHours();
    };
    ZonedDate2.prototype.getUTCMilliseconds = function() {
      return this._localDate.getUTCMilliseconds();
    };
    ZonedDate2.prototype.getUTCMinutes = function() {
      return this._localDate.getUTCMinutes();
    };
    ZonedDate2.prototype.getUTCMonth = function() {
      return this._localDate.getUTCMonth();
    };
    ZonedDate2.prototype.getUTCSeconds = function() {
      return this._localDate.getUTCSeconds();
    };
    ZonedDate2.prototype.setTime = function(time2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setMilliseconds = function(ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCMilliseconds = function(ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setSeconds = function(sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCSeconds = function(sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setMinutes = function(min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCMinutes = function(min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setHours = function(hours, min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCHours = function(hours, min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setDate = function(date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCDate = function(date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setMonth = function(month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCMonth = function(month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setFullYear = function(year, month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCFullYear = function(year, month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.toISOString = function() {
      return this._localDate.toISOString();
    };
    ZonedDate2.prototype.toJSON = function() {
      return this._localDate.toJSON();
    };
    ZonedDate2.prototype.toString = function() {
      var dateString = datePrefix(this._utcDate);
      var timeString = this.toTimeString();
      return dateString + " " + this.getDate() + " " + this.getFullYear() + " " + timeString;
    };
    ZonedDate2.prototype.toDateString = function() {
      return toLocalDate(this._utcDate).toDateString();
    };
    ZonedDate2.prototype.toTimeString = function() {
      var hours = padNumber(this.getHours());
      var minutes = padNumber(this.getMinutes());
      var seconds = padNumber(this.getSeconds());
      var time2 = hours + ":" + minutes + ":" + seconds;
      var tzOffset = formatOffset(this.timezoneOffset);
      var abbrev = abbrTimezone(this.timezone, this._utcDate);
      if (abbrev) {
        abbrev = " (" + abbrev + ")";
      }
      return time2 + " " + tzOffset + abbrev;
    };
    ZonedDate2.prototype.toLocaleString = function(locales, options) {
      return this._localDate.toLocaleString(locales, options);
    };
    ZonedDate2.prototype.toLocaleDateString = function(locales, options) {
      return this._localDate.toLocaleDateString(locales, options);
    };
    ZonedDate2.prototype.toLocaleTimeString = function(locales, options) {
      return this._localDate.toLocaleTimeString(locales, options);
    };
    ZonedDate2.prototype.toUTCString = function() {
      return this.toTimezone("Etc/UTC").toString();
    };
    ZonedDate2.prototype[Symbol.toPrimitive] = function(hint) {
      if (hint === "string" || hint === "default") {
        return this.toString();
      }
      return this._localDate.getTime();
    };
    ZonedDate2.prototype.valueOf = function() {
      return this.getTime();
    };
    ZonedDate2.prototype.getVarDate = function() {
      throw new Error("Not implemented.");
    };
    ZonedDate2.prototype.format = function(_) {
      throw new Error("Not implemented.");
    };
    ZonedDate2.prototype.formatUTC = function(_) {
      throw new Error("Not implemented.");
    };
    return ZonedDate2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/node_modules/@progress/kendo-date-math/dist/es/week-in-year.js
var moveDateToWeekStart = function(date2, weekStartDay) {
  if (weekStartDay !== Day.Monday) {
    return addDays(prevDayOfWeek(date2, weekStartDay), 4);
  }
  return addDays(date2, 4 - (date2.getDay() || 7));
};
var calcWeekInYear = function(date2, weekStartDay) {
  var firstWeekInYear = createDate(date2.getFullYear(), 0, 1, -6);
  var newDate = moveDateToWeekStart(date2, weekStartDay);
  var diffInMS = newDate.getTime() - firstWeekInYear.getTime();
  var days = Math.floor(diffInMS / MS_PER_DAY);
  return 1 + Math.floor(days / 7);
};
var weekInYear = function(date2, weekStartDay) {
  if (weekStartDay === void 0) {
    weekStartDay = Day.Monday;
  }
  var prevWeekDate = addDays(date2, -7);
  var nextWeekDate = addDays(date2, 7);
  var weekNumber = calcWeekInYear(date2, weekStartDay);
  if (weekNumber === 0) {
    return calcWeekInYear(prevWeekDate, weekStartDay) + 1;
  }
  if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {
    return 1;
  }
  return weekNumber;
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-dateinputs",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693312852,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/CalendarCell.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var CalendarCellVue2 = {
  name: "KendoCalendarCell",
  // @ts-ignore
  emits: {
    "click": null,
    "mousedown": null,
    "mouseenter": null,
    "mouseleave": null
  },
  props: {
    isDisabled: Boolean,
    view: Number,
    formattedValue: String,
    id: String,
    isWeekend: Boolean,
    isFocused: Boolean,
    isSelected: Boolean,
    isInRange: Boolean,
    isRangeStart: Boolean,
    isRangeEnd: Boolean,
    isRangeMid: Boolean,
    isRangeSplitEnd: Boolean,
    isRangeSplitStart: Boolean,
    isToday: Boolean,
    title: String,
    value: Date
  },
  // Manually checking if the component needs an update
  // due to date object being compared by instance
  // and new Date object is created
  // every time and fails the shallow compare of the Vue.
  /**
   * @hidden
   */
  updated: function updated() {
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  // tslint:disable:max-line-length
  /**
   * @return
   * Returns a `<td />` element with a `<span class="k-link" />` inside to apply the styles. The text inside is the [`formattedValue`]({% slug api_dateinputs_calendarcellprops %}#toc-formattedvalue) of the `cell`.
   */
  // @ts-ignore
  render: function render5(createElement) {
    var h = gh5 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a9 = this.$props, formattedValue = _a9.formattedValue, isWeekend = _a9.isWeekend, isFocused = _a9.isFocused, isInRange4 = _a9.isInRange, isSelected = _a9.isSelected, isRangeStart = _a9.isRangeStart, isRangeMid = _a9.isRangeMid, isRangeEnd = _a9.isRangeEnd, isRangeSplitStart = _a9.isRangeSplitStart, isRangeSplitEnd = _a9.isRangeSplitEnd, isToday = _a9.isToday, isDisabled = _a9.isDisabled, view = _a9.view, value2 = _a9.value;
    var isEndActive = this.$props.activeRangeEnd === "end" && isRangeEnd;
    var isStartActive = this.$props.activeRangeEnd === "start" && isRangeStart;
    return h("td", {
      id: this.$props.id,
      attrs: this.v3 ? void 0 : {
        id: this.$props.id,
        title: this.$props.title
      },
      title: this.$props.title,
      "class": {
        "k-calendar-td": true,
        "k-range-end": isRangeEnd,
        "k-range-mid": isRangeMid,
        "k-range-split-end": isRangeSplitEnd,
        "k-range-split-start": isRangeSplitStart,
        "k-range-start": isRangeStart,
        "k-active": isStartActive || isEndActive,
        "k-focus": isFocused,
        "k-selected": isSelected || isRangeStart || isRangeEnd,
        "k-today": isToday,
        "k-weekend": isWeekend,
        "k-disabled": isDisabled
      },
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.handleMouseDown,
        "mouseenter": this.handleMouseEnter,
        "mouseleave": this.handleMouseLeave
      },
      onMousedown: this.handleMouseDown,
      onMouseenter: this.handleMouseEnter,
      onMouseleave: this.handleMouseLeave
    }, [h("span", {
      "class": "k-link"
    }, [defaultSlot])]);
  },
  // tslint:enable:max-line-length
  methods: {
    handleClick: function handleClick4(event2) {
      var value2 = this.$props.value;
      this.$emit("click", value2, event2);
    },
    handleMouseDown: function handleMouseDown(event2) {
      var value2 = this.$props.value;
      this.$emit("mousedown", value2, event2);
    },
    handleMouseEnter: function handleMouseEnter() {
      var value2 = this.$props.value;
      this.$emit("mouseenter", value2);
    },
    handleMouseLeave: function handleMouseLeave() {
      var value2 = this.$props.value;
      this.$emit("mouseleave", value2);
    }
  }
};
var CalendarCell = CalendarCellVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/CalendarWeekCell.js
var allVue7 = vue_runtime_esm_bundler_exports;
var gh6 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";
var CalendarWeekCellVue2 = {
  props: {
    id: String,
    value: Number
  },
  // @ts-ignore
  emits: {
    "click": null
  },
  // @ts-ignore
  setup: !isV37 ? void 0 : function() {
    var v3 = !!isV37;
    return {
      v3
    };
  },
  /**
   * @return
   * Returns a `<td />` element with the [`value`]({% slug api_dateinputs_calendarweekcellprops %}#toc-value) as a child.
   */
  // @ts-ignore
  render: function render6(createElement) {
    var h = gh6 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("td", {
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      },
      id: this.$props.id,
      attrs: this.v3 ? void 0 : {
        id: this.$props.id
      }
    }, [this.$props.value !== void 0 ? this.$props.value : defaultSlot]);
  },
  methods: {
    handleClick: function handleClick5(event2) {
      var value2 = this.$props.value;
      this.$emit("click", value2, event2);
    }
  }
};
var CalendarWeekCell = CalendarWeekCellVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/models/NavigationAction.js
var Action;
(function(Action2) {
  Action2[Action2["Left"] = 0] = "Left";
  Action2[Action2["Right"] = 1] = "Right";
  Action2[Action2["Up"] = 2] = "Up";
  Action2[Action2["Down"] = 3] = "Down";
  Action2[Action2["PrevView"] = 4] = "PrevView";
  Action2[Action2["NextView"] = 5] = "NextView";
  Action2[Action2["FirstInView"] = 6] = "FirstInView";
  Action2[Action2["LastInView"] = 7] = "LastInView";
  Action2[Action2["LowerView"] = 8] = "LowerView";
  Action2[Action2["UpperView"] = 9] = "UpperView";
})(Action || (Action = {}));

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/models/CalendarViewEnum.js
var CalendarViewEnum;
(function(CalendarViewEnum2) {
  CalendarViewEnum2[CalendarViewEnum2["month"] = 0] = "month";
  CalendarViewEnum2[CalendarViewEnum2["year"] = 1] = "year";
  CalendarViewEnum2[CalendarViewEnum2["decade"] = 2] = "decade";
  CalendarViewEnum2[CalendarViewEnum2["century"] = 3] = "century";
})(CalendarViewEnum || (CalendarViewEnum = {}));

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/models/SelectionRange.js
var EMPTY_SELECTIONRANGE = { start: null, end: null };

// node_modules/@progress/kendo-vue-dateinputs/dist/es/utils.js
var viewInRange = function(candidate, min, max) {
  if (min === void 0 || max === void 0) {
    return candidate;
  }
  return min <= candidate && candidate <= max ? candidate : candidate < min ? min : max;
};
var MIDNIGHT_DATE = new Date(1980, 0, 1);
var MIN_DATE = new Date(1900, 0, 1);
var MAX_DATE = new Date(2099, 11, 31);
var MIN_TIME = new Date(1980, 0, 1);
var MAX_TIME = new Date(1980, 0, 1, 23, 59, 59);
var setTime = function(origin, candidate) {
  var date2 = cloneDate2(origin);
  date2.setHours(candidate.getHours(), candidate.getMinutes(), candidate.getSeconds(), candidate.getMilliseconds());
  return date2;
};
var getToday = function() {
  return getDate(/* @__PURE__ */ new Date());
};
var isInRange = function(candidate, min, max) {
  return !candidate || !(min && min > candidate || max && max < candidate);
};
var isInDateRange = function(candidate, min, max) {
  return candidate === null || !(min && getDate(min) > getDate(candidate) || max && getDate(max) < getDate(candidate));
};
var isInSelectionRange = function(value2, selectionRange) {
  var _a9 = selectionRange || EMPTY_SELECTIONRANGE, start2 = _a9.start, end2 = _a9.end;
  if (!start2 || !end2) {
    return false;
  }
  return start2 < value2 && value2 < end2;
};
var range = function(start2, end2, step) {
  if (step === void 0) {
    step = 1;
  }
  var result = [];
  for (var i = start2; i < end2; i = i + step) {
    result.push(i);
  }
  return result;
};
var shiftWeekNames = function(names, offset2) {
  return names.slice(offset2).concat(names.slice(0, offset2));
};
var dateInRange = function(candidate, min, max) {
  if (!candidate) {
    return candidate;
  }
  if (min && candidate < min) {
    return cloneDate2(min);
  }
  if (max && candidate > max) {
    return cloneDate2(max);
  }
  return candidate;
};
var domContainerFactory = function(type) {
  return function(children, classes, styles) {
    if (classes === void 0) {
      classes = "";
    }
    if (styles === void 0) {
      styles = {};
    }
    var container = document.createElement(type);
    container.className = classes;
    Object.keys(styles).map(function(key) {
      return container.style[key] = styles[key];
    });
    if (typeof children === "string") {
      container.innerHTML = children || "";
    } else {
      (children || []).forEach(function(child) {
        return child && container.appendChild(child);
      });
    }
    return container;
  };
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/CenturyViewService.js
var _a;
var EMPTY_DATA = [[]];
var CELLS_LENGTH = 4;
var ROWS_LENGTH = 3;
var ACTIONS = (_a = {}, _a[Action.Left] = function(date2) {
  return addDecades(date2, -1);
}, _a[Action.Up] = function(date2) {
  return addDecades(date2, -4);
}, _a[Action.Right] = function(date2) {
  return addDecades(date2, 1);
}, _a[Action.Down] = function(date2) {
  return addDecades(date2, 4);
}, _a[Action.PrevView] = function(date2) {
  return addCenturies(date2, -1);
}, _a[Action.NextView] = function(date2) {
  return addCenturies(date2, 1);
}, _a[Action.FirstInView] = function(date2) {
  return firstDecadeOfCentury(date2);
}, _a[Action.LastInView] = function(date2) {
  return lastDecadeOfCentury(date2);
}, _a);
var CenturyViewService = (
  /** @class */
  function() {
    function CenturyViewService2() {
    }
    CenturyViewService2.prototype.addToDate = function(min, skip) {
      return addCenturies(min, skip);
    };
    CenturyViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addCenturies(start2, i);
      });
    };
    CenturyViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate2 = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a9 = options.selectionRange, selectionRange = _a9 === void 0 ? EMPTY_SELECTIONRANGE : _a9, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA;
      }
      var cells = range(0, CELLS_LENGTH);
      var firstDate2 = firstDecadeOfCentury(viewDate);
      var lastDate = lastDecadeOfCentury(viewDate);
      var today2 = getToday();
      return range(0, ROWS_LENGTH).map(function(rowOffset) {
        var baseDate = addDecades(firstDate2, rowOffset * CELLS_LENGTH);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addDecades(baseDate, cellOffset), min, max);
          var changedDecade = !_this.isInSameView(cellDate, lastDate);
          if (changedDecade) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          return {
            formattedValue: _this.value(cellDate),
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate2),
            isSelected,
            isWeekend: false,
            isInRange: isInRange(cellDate, min, max),
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate2),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
        });
      });
    };
    CenturyViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    CenturyViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return firstYearOfDecade(candidate).getFullYear() === firstYearOfDecade(expected).getFullYear();
    };
    CenturyViewService2.prototype.isInArray = function(date2, dates) {
      if (!dates.length) {
        return false;
      }
      var year = date2.getFullYear();
      return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear() + 99;
    };
    CenturyViewService2.prototype.isInRange = function(candidate, min, max) {
      var year = firstYearOfDecade(candidate).getFullYear();
      var aboveMin = !min || firstYearOfDecade(min).getFullYear() <= year;
      var belowMax = !max || year <= firstYearOfDecade(max).getFullYear();
      return aboveMin && belowMax;
    };
    CenturyViewService2.prototype.isInSameView = function(candidate, value2) {
      return durationInCenturies(candidate, value2) === 0;
    };
    CenturyViewService2.prototype.isRangeStart = function(value2) {
      return value2.getFullYear() % 1e3 === 0;
    };
    CenturyViewService2.prototype.move = function(value2, action) {
      var modifier = ACTIONS[action];
      if (!modifier) {
        return value2;
      }
      return modifier(value2);
    };
    CenturyViewService2.prototype.cellTitle = function(value2) {
      return firstYearOfDecade(value2).getFullYear().toString();
    };
    CenturyViewService2.prototype.navigationTitle = function(value2) {
      return value2 ? firstDecadeOfCentury(value2).getFullYear().toString() : "";
    };
    CenturyViewService2.prototype.title = function(value2) {
      if (!value2) {
        return "";
      }
      return "".concat(firstDecadeOfCentury(value2).getFullYear(), " - ").concat(lastDecadeOfCentury(value2).getFullYear());
    };
    CenturyViewService2.prototype.rowLength = function(_) {
      return CELLS_LENGTH;
    };
    CenturyViewService2.prototype.skip = function(value2, min) {
      return durationInCenturies(min, value2);
    };
    CenturyViewService2.prototype.total = function(min, max) {
      return durationInCenturies(min, max) + 1;
    };
    CenturyViewService2.prototype.value = function(current2) {
      return current2 ? firstYearOfDecade(current2).getFullYear().toString() : "";
    };
    CenturyViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInCenturies(date2, max) < border;
      return renderTwoViews ? addCenturies(date2, -1) : date2;
    };
    CenturyViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return cloneDate2(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return cloneDate2(max);
      }
      return cellDate;
    };
    return CenturyViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/DecadeViewService.js
var _a2;
var EMPTY_DATA2 = [[]];
var CELLS_LENGTH2 = 4;
var ROWS_LENGTH2 = 3;
var ACTIONS2 = (_a2 = {}, _a2[Action.Left] = function(date2) {
  return addYears(date2, -1);
}, _a2[Action.Up] = function(date2) {
  return addYears(date2, -4);
}, _a2[Action.Right] = function(date2) {
  return addYears(date2, 1);
}, _a2[Action.Down] = function(date2) {
  return addYears(date2, 4);
}, _a2[Action.PrevView] = function(date2) {
  return addDecades(date2, -1);
}, _a2[Action.NextView] = function(date2) {
  return addDecades(date2, 1);
}, _a2[Action.FirstInView] = function(date2) {
  return firstYearOfDecade(date2);
}, _a2[Action.LastInView] = function(date2) {
  return lastYearOfDecade(date2);
}, _a2);
var DecadeViewService = (
  /** @class */
  function() {
    function DecadeViewService2() {
    }
    DecadeViewService2.prototype.addToDate = function(min, skip) {
      return addDecades(min, skip);
    };
    DecadeViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addDecades(firstYearOfDecade(start2), i);
      });
    };
    DecadeViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate2 = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a9 = options.selectionRange, selectionRange = _a9 === void 0 ? EMPTY_SELECTIONRANGE : _a9, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA2;
      }
      var cells = range(0, CELLS_LENGTH2);
      var firstDate2 = firstYearOfDecade(viewDate);
      var lastDate = lastYearOfDecade(viewDate);
      var today2 = getToday();
      return range(0, ROWS_LENGTH2).map(function(rowOffset) {
        var baseDate = addYears(firstDate2, rowOffset * CELLS_LENGTH2);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addYears(baseDate, cellOffset), min, max);
          var changedDecade = !_this.isInSameView(cellDate, lastDate);
          if (changedDecade) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          return {
            formattedValue: _this.value(cellDate),
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate2),
            isSelected,
            isWeekend: false,
            isInRange: isInRange(cellDate, min, max),
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate2),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
        });
      });
    };
    DecadeViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    DecadeViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return candidate.getFullYear() === expected.getFullYear();
    };
    DecadeViewService2.prototype.isInArray = function(date2, dates) {
      if (!dates.length) {
        return false;
      }
      var year = date2.getFullYear();
      return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear() + 9;
    };
    DecadeViewService2.prototype.isInRange = function(candidate, min, max) {
      var year = candidate.getFullYear();
      var aboveMin = !min || min.getFullYear() <= year;
      var belowMax = !max || year <= max.getFullYear();
      return aboveMin && belowMax;
    };
    DecadeViewService2.prototype.isRangeStart = function(value2) {
      return value2.getFullYear() % 100 === 0;
    };
    DecadeViewService2.prototype.isInSameView = function(candidate, value2) {
      return durationInDecades(candidate, value2) === 0;
    };
    DecadeViewService2.prototype.move = function(value2, action) {
      var modifier = ACTIONS2[action];
      if (!modifier) {
        return value2;
      }
      return modifier(value2);
    };
    DecadeViewService2.prototype.cellTitle = function(value2) {
      return value2.getFullYear().toString();
    };
    DecadeViewService2.prototype.navigationTitle = function(value2) {
      return value2 ? firstYearOfDecade(value2).getFullYear().toString() : "";
    };
    DecadeViewService2.prototype.title = function(value2) {
      if (!value2) {
        return "";
      }
      return "".concat(firstYearOfDecade(value2).getFullYear(), " - ").concat(lastYearOfDecade(value2).getFullYear());
    };
    DecadeViewService2.prototype.rowLength = function(_) {
      return CELLS_LENGTH2;
    };
    DecadeViewService2.prototype.skip = function(value2, min) {
      return durationInDecades(min, value2);
    };
    DecadeViewService2.prototype.total = function(min, max) {
      return durationInDecades(min, max) + 1;
    };
    DecadeViewService2.prototype.value = function(current2) {
      return current2 ? current2.getFullYear().toString() : "";
    };
    DecadeViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInDecades(date2, max) < border;
      return renderTwoViews ? addDecades(date2, -1) : date2;
    };
    DecadeViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return cloneDate2(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return cloneDate2(max);
      }
      return cellDate;
    };
    return DecadeViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/MonthViewService.js
var _a3;
var EMPTY_DATA3 = [[]];
var CELLS_LENGTH3 = 7;
var ROWS_LENGTH3 = 6;
var SATURDAY = 6;
var SUNDAY = 0;
var ACTIONS3 = (_a3 = {}, _a3[Action.Left] = function(date2) {
  return addDays(date2, -1);
}, _a3[Action.Up] = function(date2) {
  return addWeeks(date2, -1);
}, _a3[Action.Right] = function(date2) {
  return addDays(date2, 1);
}, _a3[Action.Down] = function(date2) {
  return addWeeks(date2, 1);
}, _a3[Action.PrevView] = function(date2) {
  return addMonths(date2, -1);
}, _a3[Action.NextView] = function(date2) {
  return addMonths(date2, 1);
}, _a3[Action.FirstInView] = function(date2) {
  return firstDayOfMonth(date2);
}, _a3[Action.LastInView] = function(date2) {
  return lastDayOfMonth(date2);
}, _a3);
var MonthViewService = (
  /** @class */
  function() {
    function MonthViewService2(intl4) {
      this.intl = intl4;
    }
    MonthViewService2.prototype.addToDate = function(min, skip) {
      return addMonths(min, skip);
    };
    MonthViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addMonths(start2, i);
      });
    };
    MonthViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate2 = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a9 = options.selectionRange, selectionRange = _a9 === void 0 ? EMPTY_SELECTIONRANGE : _a9, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA3;
      }
      var firstMonthDate = firstDayOfMonth(viewDate);
      var lastMonthDate = lastDayOfMonth(viewDate);
      var backward = -1;
      var date2 = dayOfWeek(firstMonthDate, this.intl.firstDay(), backward);
      var cells = range(0, CELLS_LENGTH3);
      var today2 = getToday();
      return range(0, ROWS_LENGTH3).map(function(rowOffset) {
        var baseDate = addDays(date2, rowOffset * CELLS_LENGTH3);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addDays(baseDate, cellOffset), min, max);
          var otherMonth = cellDate < firstMonthDate || cellDate > lastMonthDate;
          if (otherMonth) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          var cell = {
            formattedValue: _this.value(cellDate),
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate2),
            isSelected,
            isInRange: isInRange(cellDate, min, max),
            isWeekend: _this.isWeekend(cellDate),
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstMonthDate),
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastMonthDate),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
          return cell;
        });
      });
    };
    MonthViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return getDate(candidate).getTime() === getDate(expected).getTime();
    };
    MonthViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    MonthViewService2.prototype.isInArray = function(date2, dates) {
      return !!dates.length && firstDayOfMonth(dates[0]) <= date2 && date2 <= lastDayOfMonth(dates[dates.length - 1]);
    };
    MonthViewService2.prototype.isInRange = function(candidate, min, max) {
      var value2 = getDate(candidate);
      var aboveMin = !min || getDate(min) <= value2;
      var belowMax = !max || value2 <= getDate(max);
      return aboveMin && belowMax;
    };
    MonthViewService2.prototype.isInSameView = function(candidate, value2) {
      return durationInMonths(candidate, value2) === 0;
    };
    MonthViewService2.prototype.isRangeStart = function(value2) {
      return !value2.getMonth();
    };
    MonthViewService2.prototype.move = function(value2, action) {
      var modifier = ACTIONS3[action];
      if (!modifier) {
        return value2;
      }
      return modifier(value2);
    };
    MonthViewService2.prototype.cellTitle = function(value2) {
      return this.intl.formatDate(value2, "D");
    };
    MonthViewService2.prototype.navigationTitle = function(value2) {
      if (!value2) {
        return "";
      }
      return this.isRangeStart(value2) ? value2.getFullYear().toString() : this.abbrMonthNames()[value2.getMonth()];
    };
    MonthViewService2.prototype.title = function(current2) {
      return "".concat(this.wideMonthNames()[current2.getMonth()], " ").concat(current2.getFullYear());
    };
    MonthViewService2.prototype.rowLength = function(prependCell) {
      return CELLS_LENGTH3 + (prependCell ? 1 : 0);
    };
    MonthViewService2.prototype.skip = function(value2, min) {
      return durationInMonths(min, value2);
    };
    MonthViewService2.prototype.total = function(min, max) {
      return durationInMonths(min, max) + 1;
    };
    MonthViewService2.prototype.value = function(current2) {
      return current2 ? current2.getDate().toString() : "";
    };
    MonthViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInMonths(date2, max) < border;
      return renderTwoViews ? addMonths(date2, -1) : date2;
    };
    MonthViewService2.prototype.isWeekend = function(date2) {
      var day = date2.getDay();
      return day === SATURDAY || day === SUNDAY;
    };
    MonthViewService2.prototype.abbrMonthNames = function() {
      return this.intl.dateFormatNames({ nameType: "abbreviated", type: "months" });
    };
    MonthViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return getDate(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return getDate(max);
      }
      return cellDate;
    };
    MonthViewService2.prototype.wideMonthNames = function() {
      return this.intl.dateFormatNames({ nameType: "wide", type: "months", standAlone: true });
    };
    return MonthViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/YearViewService.js
var _a4;
var EMPTY_DATA4 = [[]];
var CELLS_LENGTH4 = 4;
var ROWS_LENGTH4 = 3;
var ACTIONS4 = (_a4 = {}, _a4[Action.Left] = function(date2) {
  return addMonths(date2, -1);
}, _a4[Action.Up] = function(date2) {
  return addMonths(date2, -4);
}, _a4[Action.Right] = function(date2) {
  return addMonths(date2, 1);
}, _a4[Action.Down] = function(date2) {
  return addMonths(date2, 4);
}, _a4[Action.PrevView] = function(date2) {
  return addYears(date2, -1);
}, _a4[Action.NextView] = function(date2) {
  return addYears(date2, 1);
}, _a4[Action.FirstInView] = function(date2) {
  return firstMonthOfYear(date2);
}, _a4[Action.LastInView] = function(date2) {
  return lastMonthOfYear(date2);
}, _a4);
var YearViewService = (
  /** @class */
  function() {
    function YearViewService2(intl4) {
      this._intl = intl4;
    }
    YearViewService2.prototype.addToDate = function(min, skip) {
      return addYears(min, skip);
    };
    YearViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addYears(start2, i);
      });
    };
    YearViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate2 = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a9 = options.selectionRange, selectionRange = _a9 === void 0 ? EMPTY_SELECTIONRANGE : _a9, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA4;
      }
      var months = this.abbrMonthNames();
      var firstDate2 = firstMonthOfYear(viewDate);
      var lastDate = lastMonthOfYear(viewDate);
      var currentYear = firstDate2.getFullYear();
      var cells = range(0, CELLS_LENGTH4);
      var today2 = getToday();
      return range(0, ROWS_LENGTH4).map(function(rowOffset) {
        var baseDate = addMonths(firstDate2, rowOffset * CELLS_LENGTH4);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addMonths(baseDate, cellOffset), min, max);
          if (!cellDate) {
            return null;
          }
          var changedYear = currentYear < cellDate.getFullYear();
          if (changedYear) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          return {
            formattedValue: months[cellDate.getMonth()],
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate2),
            isSelected,
            isInRange: isInRange(cellDate, min, max),
            isWeekend: false,
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate2),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
        });
      });
    };
    YearViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    YearViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return candidate.getFullYear() === expected.getFullYear() && candidate.getMonth() === expected.getMonth();
    };
    YearViewService2.prototype.isInArray = function(date2, dates) {
      if (!dates.length) {
        return false;
      }
      var year = date2.getFullYear();
      return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear();
    };
    YearViewService2.prototype.isInRange = function(candidate, min, max) {
      var candidateValue = createDate(candidate.getFullYear(), candidate.getMonth(), 1);
      var aboveMin = !min || createDate(min.getFullYear(), min.getMonth(), 1) <= candidateValue;
      var belowMax = !max || candidateValue <= createDate(max.getFullYear(), max.getMonth(), 1);
      return aboveMin && belowMax;
    };
    YearViewService2.prototype.isInSameView = function(candidate, value2) {
      return durationInYears(candidate, value2) === 0;
    };
    YearViewService2.prototype.isRangeStart = function(value2) {
      return value2.getFullYear() % 10 === 0;
    };
    YearViewService2.prototype.move = function(value2, action) {
      var modifier = ACTIONS4[action];
      if (!modifier) {
        return value2;
      }
      return modifier(value2);
    };
    YearViewService2.prototype.cellTitle = function(value2) {
      return "".concat(value2.getFullYear(), " ").concat(this.value(value2));
    };
    YearViewService2.prototype.navigationTitle = function(value2) {
      return this.title(value2);
    };
    YearViewService2.prototype.title = function(current2) {
      return current2 ? current2.getFullYear().toString() : "";
    };
    YearViewService2.prototype.rowLength = function(_) {
      return CELLS_LENGTH4;
    };
    YearViewService2.prototype.skip = function(value2, min) {
      return durationInYears(min, value2);
    };
    YearViewService2.prototype.total = function(min, max) {
      return durationInYears(min, max) + 1;
    };
    YearViewService2.prototype.value = function(current2) {
      return current2 ? this.abbrMonthNames()[current2.getMonth()] : "";
    };
    YearViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInYears(date2, max) < border;
      return renderTwoViews ? addYears(date2, -1) : date2;
    };
    YearViewService2.prototype.abbrMonthNames = function() {
      return this._intl.dateFormatNames({ nameType: "abbreviated", type: "months" });
    };
    YearViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return cloneDate(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return cloneDate(max);
      }
      return cellDate;
    };
    return YearViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/BusViewService.js
var _a5;
var services = (_a5 = {}, _a5[CalendarViewEnum.month] = MonthViewService, _a5[CalendarViewEnum.year] = YearViewService, _a5[CalendarViewEnum.decade] = DecadeViewService, _a5[CalendarViewEnum.century] = CenturyViewService, _a5);
var viewOffset = function(view, offset2) {
  var candidate = CalendarViewEnum[CalendarViewEnum[view + offset2]];
  return candidate !== void 0 ? candidate : view;
};
var BusViewService = (
  /** @class */
  function() {
    function BusViewService2(onViewChanged) {
      this.bottom = CalendarViewEnum.month;
      this.top = CalendarViewEnum.century;
      this.onViewChanged = onViewChanged;
    }
    BusViewService2.prototype.configure = function(bottom, top) {
      this.bottom = bottom;
      this.top = top;
    };
    BusViewService2.prototype.service = function(view, intl4) {
      return new services["".concat(view)](intl4);
    };
    BusViewService2.prototype.moveDown = function(view, event2) {
      this.move(view, -1, event2);
    };
    BusViewService2.prototype.moveUp = function(view, event2) {
      this.move(view, 1, event2);
    };
    BusViewService2.prototype.moveToBottom = function(activeView) {
      if (activeView === this.bottom) {
        return;
      }
      this.onViewChanged({ view: this.bottom });
    };
    BusViewService2.prototype.canMoveDown = function(view) {
      return this.bottom < view;
    };
    BusViewService2.prototype.canMoveUp = function(view) {
      return view < this.top;
    };
    BusViewService2.prototype.clamp = function(view) {
      if (view < this.bottom) {
        return this.bottom;
      }
      if (view > this.top) {
        return this.top;
      }
      return view;
    };
    BusViewService2.prototype.move = function(view, offset2, event2) {
      var candidate = this.clamp(viewOffset(view, offset2));
      if (candidate === view) {
        return;
      }
      this.onViewChanged({ view: candidate }, event2);
    };
    return BusViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/DOMService.js
var DOMService = (
  /** @class */
  function() {
    function DOMService3() {
      this.didCalculate = false;
    }
    DOMService3.prototype.ensureHeights = function() {
      if (this.calendarHeight !== void 0) {
        return;
      }
      this.calculateHeights();
    };
    DOMService3.prototype.calculateHeights = function(container) {
      var _this = this;
      if (!canUseDOM) {
        return;
      }
      var div = domContainerFactory("div");
      var ul = domContainerFactory("ul");
      var li = domContainerFactory("li");
      var td = domContainerFactory("td");
      var th = domContainerFactory("th");
      var tr = domContainerFactory("tr");
      var tbody = domContainerFactory("tbody");
      var thead = domContainerFactory("thead");
      var table = domContainerFactory("table");
      var monthHeader = function() {
        return div('\n            <span class="k-calendar-title">March 2017</span>\n            <span class="k-calendar-today">TODAY</span>\n        ', "k-calendar-header");
      };
      var monthWeekHeader = function() {
        return table([
          thead([
            tr([th("MO")])
          ])
        ], "k-calendar-weekdays");
      };
      var repeat = function(count, mapper) {
        return new Array(count).fill("1").map(mapper);
      };
      var content = function(rows, cells) {
        if (cells === void 0) {
          cells = 1;
        }
        return table([
          tbody([tr([th("1")])].concat(repeat(rows, function() {
            return tr(repeat(cells, function(c) {
              return td('<span class="k-link">'.concat(c, "</span>"));
            }));
          })))
        ]);
      };
      var scrollable = function(children) {
        return div(children, "k-content k-scrollable");
      };
      var view = function(contentElement, className, renderWeekHeader) {
        return div(renderWeekHeader ? [
          monthHeader(),
          monthWeekHeader(),
          scrollable([contentElement, contentElement])
        ] : [
          monthHeader(),
          scrollable([contentElement, contentElement])
        ], className, { left: "-10000px", position: "absolute" });
      };
      var navigationList = function() {
        var navElement;
        return function() {
          if (!canUseDOM) {
            return null;
          }
          if (!navElement) {
            navElement = div([scrollable([ul([li("<span>FEB</span>")])])], "k-calendar-navigation", { left: "0px", position: "absolute" });
          }
          return navElement;
        };
      }();
      var viewFactory = function(_a9, className, renderWeekHeader) {
        var cells = _a9.cells, rows = _a9.rows;
        var viewElement;
        return function() {
          if (!canUseDOM) {
            return null;
          }
          if (!viewElement) {
            viewElement = view(content(rows, cells), className, renderWeekHeader);
          }
          return viewElement;
        };
      };
      var getScrollable = function(element5) {
        return element5.querySelector(".k-scrollable");
      };
      var horizontal = function(element5) {
        var scrollableElement = getScrollable(element5);
        scrollableElement.className = "".concat(scrollableElement.className, " k-scrollable-horizontal");
        return element5;
      };
      var monthView = viewFactory({ cells: 7, rows: 6 }, "k-calendar-view k-calendar-monthview", true);
      var yearView = viewFactory({ cells: 5, rows: 3 }, "k-calendar-view k-calendar-yearview", false);
      var decadeView = viewFactory({ cells: 5, rows: 2 }, "k-calendar-view k-calendar-decadeview", false);
      var horzMonthView = function() {
        return horizontal(monthView());
      };
      var horzYearView = function() {
        return horizontal(yearView());
      };
      var horzDecadeView = function() {
        return horizontal(decadeView());
      };
      var height = function(element5) {
        return parseFloat(window.getComputedStyle(element5).height) || element5.offsetHeight;
      };
      var width = function(element5) {
        var styles = window.getComputedStyle(element5);
        var computed = parseFloat(styles.width) + parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight);
        return computed || element5.offsetWidth;
      };
      var getBody = function(element5) {
        return element5.querySelector("tbody");
      };
      this.didCalculate = true;
      if (container) {
        this.hostContainer = container;
      }
      this.batch(monthView(), function(contentElement) {
        var viewElement = getBody(contentElement);
        _this.calendarHeight = height(contentElement);
        _this.monthViewHeight = height(viewElement);
        _this.headerHeight = height(viewElement.children[0]);
        _this.scrollableContentHeight = height(getScrollable(contentElement));
      });
      this.batch(horzMonthView(), function(contentElement) {
        var viewElement = getBody(contentElement);
        _this.calendarWidth = width(contentElement);
        _this.monthViewWidth = width(viewElement);
        _this.scrollableContentWidth = width(getScrollable(contentElement));
      });
      this.batch(yearView(), function(contentElement) {
        _this.yearViewHeight = height(getBody(contentElement));
        _this.scrollableYearContentHeight = height(getScrollable(contentElement));
      });
      this.batch(horzYearView(), function(contentElement) {
        _this.yearViewWidth = width(getBody(contentElement));
      });
      this.batch(decadeView(), function(contentElement) {
        _this.decadeViewHeight = height(getBody(contentElement));
        _this.centuryViewHeight = _this.decadeViewHeight;
      });
      this.batch(horzDecadeView(), function(contentElement) {
        _this.decadeViewWidth = width(getBody(contentElement));
        _this.centuryViewWidth = _this.decadeViewWidth;
      });
      this.batch(navigationList(), function(contentElement) {
        _this.navigationItemHeight = height(contentElement.querySelector("li"));
      });
    };
    DOMService3.prototype.viewHeight = function(viewType) {
      return this.viewDimension(viewType, "height");
    };
    DOMService3.prototype.viewWidth = function(viewType) {
      return this.viewDimension(viewType, "width");
    };
    DOMService3.prototype.viewDimension = function(viewType, dimension) {
      var viewProp = dimension === "height" ? "ViewHeight" : "ViewWidth";
      switch (viewType) {
        case CalendarViewEnum.month:
          return this["month".concat(viewProp)];
        case CalendarViewEnum.year:
          return this["year".concat(viewProp)];
        case CalendarViewEnum.decade:
          return this["decade".concat(viewProp)];
        case CalendarViewEnum.century:
          return this["century".concat(viewProp)];
        default:
          return 1;
      }
    };
    DOMService3.prototype.batch = function(contentElement, action) {
      var hostContainer = this.hostContainer || document.body;
      var appendedContent = hostContainer.appendChild(contentElement);
      action(appendedContent);
      hostContainer.removeChild(appendedContent);
    };
    return DOMService3;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/NavigationService.js
var KEY_TO_ACTION = {
  "33": Action.PrevView,
  "34": Action.NextView,
  "35": Action.LastInView,
  "36": Action.FirstInView,
  "37": Action.Left,
  "38": Action.Up,
  "39": Action.Right,
  "40": Action.Down,
  "meta+38": Action.UpperView,
  "meta+40": Action.LowerView,
  "meta+37": Action.PrevView,
  "meta+39": Action.NextView
};
var NavigationService = (
  /** @class */
  function() {
    function NavigationService2(bus) {
      this.bus = bus;
    }
    NavigationService2.prototype.action = function(event2) {
      var action = "".concat(event2.ctrlKey || event2.metaKey ? "meta+" : "").concat(event2.keyCode);
      return KEY_TO_ACTION[action];
    };
    NavigationService2.prototype.move = function(value2, action, activeView, service, event2) {
      if (!service) {
        return value2;
      }
      if (action === Action.UpperView && this.bus.canMoveUp(activeView)) {
        this.bus.moveUp(activeView, event2);
        return value2;
      }
      if (action === Action.LowerView && this.bus.canMoveDown(activeView)) {
        this.bus.moveDown(activeView, event2);
        return value2;
      }
      return service.move(value2, action);
    };
    return NavigationService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/WeekNamesService.js
var WeekNamesService = (
  /** @class */
  function() {
    function WeekNamesService2(intl4) {
      this.intl = intl4;
    }
    WeekNamesService2.prototype.getWeekNames = function(includeWeekNumber) {
      if (includeWeekNumber === void 0) {
        includeWeekNumber = false;
      }
      var weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: "short", type: "days" }), this.intl.firstDay());
      return includeWeekNumber ? [""].concat(weekNames) : weekNames;
    };
    return WeekNamesService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/View.js
var allVue8 = vue_runtime_esm_bundler_exports;
var gh7 = allVue8.h;
var isV38 = allVue8.version && allVue8.version[0] === "3";
var inject = allVue8.inject;
var ViewVue2 = {
  name: "KendoView",
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  props: {
    activeRangeEnd: {
      type: String
    },
    activeView: {
      type: Number,
      required: true
    },
    cell: [String, Function, Object],
    cellUID: {
      type: String,
      required: true
    },
    direction: {
      type: String,
      default: "vertical"
    },
    isActive: {
      type: Boolean,
      default: void 0
    },
    focusedDate: {
      type: Date,
      required: true
    },
    max: {
      type: Date,
      required: true
    },
    min: {
      type: Date,
      required: true
    },
    selectedDate: {
      type: [Date, Array, Object],
      default: function _default() {
        return getToday();
      }
    },
    selectionRange: Object,
    showWeekNumbers: {
      type: Boolean,
      default: false
    },
    viewDate: {
      type: Date,
      required: true
    },
    weekCell: [String, Function, Object],
    bus: Object,
    service: Object
  },
  computed: {
    isHorizontal: {
      get: function get() {
        return this.$props.direction === "horizontal";
      }
    },
    isMonthView: {
      get: function get2() {
        return this.$props.activeView === CalendarViewEnum.month;
      }
    },
    weekNumber: {
      get: function get3() {
        return Boolean(this.$props.showWeekNumbers && this.$props.activeView === CalendarViewEnum.month);
      }
    }
  },
  methods: {
    getWeekNumber: function getWeekNumber(date2) {
      if (!this.weekNumber) {
        return null;
      }
      return weekInYear(date2, this._intl.firstDay());
    },
    firstDate: function firstDate(row) {
      var cell = this.firstWeekDateContext(row);
      return cell ? cell.value : null;
    },
    firstWeekDateContext: function firstWeekDateContext(rowCtx) {
      if (!this.weekNumber) {
        return null;
      }
      var idx = 0;
      var ctx = rowCtx[idx];
      while (!ctx && idx < rowCtx.length) {
        ctx = rowCtx[++idx];
      }
      return ctx;
    },
    handleClick: function handleClick6(value2, event2) {
      var args = {
        value: cloneDate2(value2),
        target: this,
        event: event2
      };
      this.$emit("change", args);
    },
    handleWeekCellClick: function handleWeekCellClick(value2, event2) {
      var args = {
        value: value2,
        event: event2
      };
      this.$emit("weekcellclick", args);
    },
    handleMouseDown: function handleMouseDown2(value2, event2) {
      var args = {
        value: cloneDate2(value2),
        target: this,
        event: event2
      };
      this.$emit("viewmousedown", args);
    },
    handleMouseEnter: function handleMouseEnter2(value2) {
      this.$emit("cellenter", cloneDate2(value2));
    },
    handleMouseLeave: function handleMouseLeave2(value2) {
      this.$emit("cellleave", cloneDate2(value2));
    }
  },
  // @ts-ignore
  setup: !isV38 ? void 0 : function() {
    var v3 = !!isV38;
    var kendoIntlService = inject("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  // @ts-ignore
  render: function render7(createElement) {
    var h = gh7 || createElement;
    this._intl = provideIntlService(this);
    this._weekService = new WeekNamesService(this._intl);
    var emptyCell = function emptyCell2(idx) {
      return h("td", {
        key: idx
      });
    };
    var time2 = getToday();
    var focusedDate2 = this.$props.isActive ? this.$props.focusedDate : null;
    var viewDate = setTime(this.$props.viewDate, time2);
    var currentData = this.$props.service.data({
      cellUID: this.$props.cellUID,
      min: this.$props.min,
      max: this.$props.max,
      focusedDate: focusedDate2,
      isActiveView: !this.$props.bus.canMoveDown(this.$props.activeView),
      selectedDate: this.$props.selectedDate,
      selectionRange: this.$props.selectionRange,
      viewDate
    });
    var buildWeekNumber = function buildWeekNumber2(row, idx) {
      var firstDayOfWeek = this.firstDate(row);
      if (!firstDayOfWeek) {
        return emptyCell("week-cell-".concat(idx));
      }
      var weekCellValue = this.getWeekNumber(this.firstDate(row));
      var uniqueID = "kendo-vue-calendar-week-cell-".concat(weekCellValue);
      var cellDefaultRendering = (
        // @ts-ignore  function children
        h(CalendarWeekCell, {
          "class": "k-calendar-td k-alt",
          value: weekCellValue,
          attrs: this.v3 ? void 0 : {
            value: weekCellValue
          },
          onClick: this.handleWeekCellClick,
          on: this.v3 ? void 0 : {
            "click": this.handleWeekCellClick
          },
          key: uniqueID
        }, this.v3 ? function() {
          return [weekCellValue];
        } : [weekCellValue])
      );
      return getTemplate.call(this, {
        h,
        template: this.$props.weekCell,
        defaultRendering: cellDefaultRendering,
        defaultSlots: weekCellValue,
        additionalListeners: {
          click: this.handleWeekCellClick
        },
        additionalProps: {
          value: weekCellValue,
          key: uniqueID
        }
      });
    };
    var buildRow = function buildRow2(row) {
      return row.map(function(cell, idx) {
        if (!cell) {
          return emptyCell(idx);
        }
        var uniqueID = "kendo-vue-calendar-cell-".concat(cell.value.getTime());
        var cellDefaultRendering = (
          // @ts-ignore  function children
          h(CalendarCell, {
            "aria-selected": cell.isSelected,
            attrs: this.v3 ? void 0 : {
              "aria-selected": cell.isSelected,
              formattedValue: cell.formattedValue,
              id: cell.id,
              isFocused: cell.isFocused,
              isSelected: cell.isSelected,
              isInRange: cell.isInRange,
              isWeekend: cell.isWeekend,
              isRangeStart: cell.isRangeStart,
              isRangeMid: cell.isRangeMid,
              isRangeEnd: cell.isRangeEnd,
              isRangeSplitStart: cell.isRangeSplitStart,
              isRangeSplitEnd: cell.isRangeSplitEnd,
              isToday: cell.isToday,
              title: cell.title,
              value: cell.value,
              isDisabled: !cell.isInRange,
              view: this.$props.activeView
            },
            formattedValue: cell.formattedValue,
            id: cell.id,
            isFocused: cell.isFocused,
            isSelected: cell.isSelected,
            isInRange: cell.isInRange,
            isWeekend: cell.isWeekend,
            isRangeStart: cell.isRangeStart,
            isRangeMid: cell.isRangeMid,
            isRangeEnd: cell.isRangeEnd,
            isRangeSplitStart: cell.isRangeSplitStart,
            isRangeSplitEnd: cell.isRangeSplitEnd,
            isToday: cell.isToday,
            title: cell.title,
            value: cell.value,
            isDisabled: !cell.isInRange,
            view: this.$props.activeView,
            onClick: this.handleClick,
            on: this.v3 ? void 0 : {
              "click": this.handleClick,
              "mousedown": this.handleMouseDown,
              "mouseenter": this.handleMouseEnter,
              "mouseleave": this.handleMouseLeave
            },
            onMousedown: this.handleMouseDown,
            onMouseenter: this.handleMouseEnter,
            onMouseleave: this.handleMouseLeave,
            key: uniqueID
          }, this.v3 ? function() {
            return [cell.formattedValue];
          } : [cell.formattedValue])
        );
        return getTemplate.call(this, {
          h,
          template: this.$props.cell,
          defaultRendering: cellDefaultRendering,
          defaultSlots: cell.formattedValue,
          additionalListeners: {
            click: this.handleClick,
            mousedown: this.handleMouseDown,
            mouseenter: this.handleMouseEnter,
            mouseleave: this.handleMouseLeave
          },
          additionalProps: {
            formattedValue: cell.formattedValue,
            id: cell.id,
            isFocused: cell.isFocused,
            isSelected: cell.isSelected,
            isInRange: cell.isInRange,
            isWeekend: cell.isWeekend,
            isRangeStart: cell.isRangeStart,
            isRangeMid: cell.isRangeMid,
            isRangeEnd: cell.isRangeEnd,
            isRangeSplitStart: cell.isRangeSplitStart,
            isRangeSplitEnd: cell.isRangeSplitEnd,
            isToday: cell.isToday,
            title: cell.title,
            value: cell.value,
            isDisabled: !cell.isInRange,
            view: this.$props.activeView,
            key: uniqueID
          }
        });
      }, this);
    };
    return h("tbody", {
      "class": "k-calendar-tbody",
      role: "rowgroup",
      attrs: this.v3 ? void 0 : {
        role: "rowgroup"
      }
    }, [currentData.map(function(row, idx) {
      return h("tr", {
        "class": "k-calendar-tr",
        role: "row",
        attrs: this.v3 ? void 0 : {
          role: "row"
        },
        key: idx
      }, [this.weekNumber && buildWeekNumber.call(this, row, idx), buildRow.call(this, row)]);
    }, this)]);
  }
};
var View = ViewVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/ViewList.js
var allVue9 = vue_runtime_esm_bundler_exports;
var gh8 = allVue9.h;
var isV39 = allVue9.version && allVue9.version[0] === "3";
var inject2 = allVue9.inject;
var DEFAULT_FETCH_MONTHS_COUNT = 1;
var VIEWS_COUNT = 5;
var ViewListVue2 = {
  name: "KendoViewList",
  inheritAttrs: false,
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  props: {
    allowReverse: Boolean,
    hasFocusedDate: Boolean,
    activeView: {
      type: Number,
      required: true
    },
    bottomOffset: {
      type: Number
    },
    cell: [String, Function, Object],
    cellUID: {
      type: String,
      required: true
    },
    dates: Array,
    focusedDate: {
      type: Date,
      required: true
    },
    isActive: {
      type: Boolean,
      default: void 0
    },
    max: {
      type: Date,
      required: true
    },
    min: {
      type: Date,
      required: true
    },
    selectionRange: Object,
    showWeekNumbers: {
      type: Boolean,
      default: false
    },
    take: {
      type: Number,
      default: VIEWS_COUNT
    },
    value: {
      type: [Date, Array, Object]
    },
    views: {
      type: Number,
      default: DEFAULT_FETCH_MONTHS_COUNT
    },
    viewHeight: Number,
    viewOffset: Number,
    bus: Object,
    dom: Object,
    weekCell: [String, Function, Object],
    service: Object
  },
  data: function data() {
    return {
      lastViewsCount: 0,
      valueHasUpdated: false
    };
  },
  computed: {
    weekNames: {
      get: function get4() {
        this._intl = provideIntlService(this);
        var weekNames = shiftWeekNames(this._intl.dateFormatNames({
          nameType: "short",
          type: "days"
        }), this._intl.firstDay());
        return this.weekNumber ? [""].concat(weekNames) : weekNames;
      }
    },
    weekNumber: {
      get: function get5() {
        return Boolean(this.$props.showWeekNumbers && this.$props.activeView === CalendarViewEnum.month);
      }
    }
  },
  created: function created2() {
    this.lastView = this.$props.activeView;
    this.lastFocus = this.$props.focusedDate;
    this.shouldScroll = false;
  },
  updated: function updated2() {
    this.shouldScroll = false;
    this.lastView = this.$props.activeView;
    this.$data.lastViewsCount = this.$props.views;
    this.indexToScroll = void 0;
  },
  methods: {
    handleFocus: function handleFocus(event2) {
      this.$emit("listfocus", event2);
    },
    handleBlur: function handleBlur(event2) {
      this.$emit("listblur", event2);
    },
    handleKeyDown: function handleKeyDown(event2) {
      this.$emit("listkeydown", event2);
    },
    handleVirtualizationMount: function handleVirtualizationMount(_virtualization) {
    },
    calculateHeights: function calculateHeights() {
      if (!this.$props.dom) {
        return;
      }
      var scrollableHeight = this.$props.activeView === CalendarViewEnum.month ? this.$props.dom.scrollableContentHeight : this.$props.dom.scrollableYearContentHeight;
      this._bottomOffset = scrollableHeight - this.$props.dom.viewHeight(this.$props.activeView);
      this._viewOffset = -1 * this.$props.dom.headerHeight;
      this._viewHeight = this.$props.dom.viewHeight(this.$props.activeView) || 1;
    },
    getTake: function getTake(skip, total) {
      return Math.min(total - skip, this.$props.take);
    },
    handleScrollAction: function handleScrollAction() {
    },
    handleTodayClick: function handleTodayClick(event2) {
      this.shouldScroll = true;
      this.handleDateChange(event2, true);
    },
    handleMouseDown: function handleMouseDown3(event2) {
      var args = {
        event: event2.event,
        value: cloneDate2(event2.value),
        target: this
      };
      this.$emit("listmousedown", args);
    },
    handleDateChange: function handleDateChange(event2, isTodayClick) {
      if (isTodayClick === void 0) {
        isTodayClick = false;
      }
      var args = {
        event: event2.event,
        value: cloneDate2(event2.value),
        target: this,
        isTodayClick
      };
      this.$emit("change", args);
    },
    handleWeekCellClick: function handleWeekCellClick2(event2) {
      this.$emit("weekcellclick", event2);
    },
    handleWeekNameClick: function handleWeekNameClick(event2, value2) {
      var args = {
        value: value2,
        event: event2
      };
      this.$emit("weeknameclick", args);
    },
    handleCellEnter: function handleCellEnter(event2) {
      this.$emit("cellenter", event2);
    },
    rotateSelectionRange: function rotateSelectionRange(selectionRange) {
      if (selectionRange.start === null || selectionRange.end === null) {
        return selectionRange;
      }
      var needRotate = selectionRange.end < selectionRange.start;
      return {
        start: needRotate ? selectionRange.end : selectionRange.start,
        end: needRotate ? selectionRange.start : selectionRange.end
      };
    }
  },
  // @ts-ignore
  setup: !isV39 ? void 0 : function() {
    var v3 = !!isV39;
    var kendoIntlService = inject2("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  mounted: function mounted2() {
    this._calendarView = this.$refs.calendarView;
  },
  // @ts-ignore
  render: function render8(createElement) {
    var h = gh8 || createElement;
    var selectionRange = this.$props.allowReverse ? this.rotateSelectionRange(this.$props.selectionRange) : this.$props.selectionRange;
    var rootClassNames = classNames("k-calendar-view", "k-hstack k-align-items-start k-justify-content-center", {
      "k-calendar-monthview": this.$props.activeView === CalendarViewEnum.month,
      "k-calendar-yearview": this.$props.activeView === CalendarViewEnum.year,
      "k-calendar-decadeview": this.$props.activeView === CalendarViewEnum.decade,
      "k-calendar-centuryview": this.$props.activeView === CalendarViewEnum.century
    });
    var tableClassNames = classNames("k-calendar-table", {
      "k-month": this.$props.activeView === CalendarViewEnum.month,
      "k-year": this.$props.activeView === CalendarViewEnum.year,
      "k-decade": this.$props.activeView === CalendarViewEnum.decade,
      "k-century": this.$props.activeView === CalendarViewEnum.century
    });
    var buildMonthView = function buildMonthView2(weekNames) {
      var that = this;
      return h("thead", {
        "class": "k-calendar-thead"
      }, [h("tr", {
        "class": "k-calendar-tr k-calendar-weekdays"
      }, [weekNames.map(function(name, idx) {
        return h("th", {
          "class": "k-calendar-caption",
          key: idx,
          onClick: function onClick(ev) {
            return that.handleWeekNameClick(ev, name);
          },
          on: this.v3 ? void 0 : {
            "click": function onClick(ev) {
              return that.handleWeekNameClick(ev, name);
            }
          }
        }, [name]);
      }, this)])]);
    };
    var buildDates = function buildDates2() {
      var cellUID = this.$props.cellUID;
      return this.$props.dates.map(function(vDate) {
        return h("table", {
          role: "grid",
          attrs: this.v3 ? void 0 : {
            role: "grid",
            "aria-label": this.$props.service.title(this.$props.focusedDate),
            "aria-live": "polite",
            "aria-activedescendant": cellUID + this.$props.focusedDate.getTime(),
            tabindex: this.$attrs.tabIndex
          },
          "aria-label": this.$props.service.title(this.$props.focusedDate),
          "aria-live": "polite",
          "aria-activedescendant": cellUID + this.$props.focusedDate.getTime(),
          tabindex: this.$attrs.tabIndex,
          "class": tableClassNames,
          onKeydown: this.handleKeyDown,
          on: this.v3 ? void 0 : {
            "keydown": this.handleKeyDown
          }
        }, [
          this.$props.activeView === CalendarViewEnum.month && buildMonthView.call(this, this.weekNames),
          // @ts-ignore function children
          h(View, {
            key: vDate.getTime(),
            activeView: this.$props.activeView,
            attrs: this.v3 ? void 0 : {
              activeView: this.$props.activeView,
              viewDate: vDate,
              min: this.$props.min,
              max: this.$props.max,
              cellUID,
              isActive: this.$props.isActive,
              focusedDate: this.$props.focusedDate,
              cell: this.$props.cell,
              selectionRange,
              selectedDate: this.$props.value,
              showWeekNumbers: this.weekNumber,
              bus: this.$props.bus,
              service: this.$props.service,
              weekCell: this.$props.weekCell
            },
            viewDate: vDate,
            min: this.$props.min,
            max: this.$props.max,
            cellUID,
            isActive: this.$props.isActive,
            focusedDate: this.$props.focusedDate,
            cell: this.$props.cell,
            selectionRange,
            selectedDate: this.$props.value,
            showWeekNumbers: this.weekNumber,
            onChange: this.handleDateChange,
            on: this.v3 ? void 0 : {
              "change": this.handleDateChange,
              "weekcellclick": this.handleWeekCellClick,
              "cellenter": this.handleCellEnter,
              "viewmousedown": this.handleMouseDown
            },
            onWeekcellclick: this.handleWeekCellClick,
            onCellenter: this.handleCellEnter,
            onViewmousedown: this.handleMouseDown,
            bus: this.$props.bus,
            service: this.$props.service,
            weekCell: this.$props.weekCell
          })
        ]);
      }, this);
    };
    return h("div", {
      style: this.$attrs.style,
      "class": rootClassNames,
      onFocusin: this.handleFocus,
      on: this.v3 ? void 0 : {
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusout: this.handleBlur
    }, [buildDates.call(this)]);
  }
};
var ViewList = ViewListVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/defaults.js
var MIDNIGHT_DATE2 = new Date(1980, 0, 1);
var MIN_DATE2 = new Date(1900, 0, 1);
var MAX_DATE2 = new Date(2099, 11, 31);
var MIN_TIME2 = new Date(1980, 0, 1);
var MAX_TIME2 = new Date(1980, 0, 1, 23, 59, 59);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/CalendarHeaderTitle.js
var allVue10 = vue_runtime_esm_bundler_exports;
var gh9 = allVue10.h;
var isV310 = allVue10.version && allVue10.version[0] === "3";
var CalendarHeaderTitleVue2 = {
  name: "KendoHeaderTitle",
  // @ts-ignore
  emits: {
    "click": null
  },
  props: {
    id: String,
    value: String,
    view: Number
  },
  methods: {
    handleClick: function handleClick7(event2) {
      this.$emit("click", event2);
    }
  },
  // @ts-ignore
  setup: !isV310 ? void 0 : function() {
    var v3 = !!isV310;
    return {
      v3
    };
  },
  /**
   * @return
   * Returns a `<button />` element with the [`value`]({% slug api_dateinputs_calendarheadertitleprops %}#toc-value) of the title as a child.
   */
  // @ts-ignore
  render: function render9(createElement) {
    var h = gh9 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return (
      // @ts-ignore  function children
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          value: this.$props.value,
          id: this.$props.id,
          fillMode: "flat",
          tabIndex: 0
        },
        value: this.$props.value,
        id: this.$props.id,
        fillMode: "flat",
        onClick: this.handleClick,
        on: this.v3 ? void 0 : {
          "click": this.handleClick
        },
        tabIndex: 0
      }, this.v3 ? function() {
        return [defaultSlot];
      } : [defaultSlot])
    );
  }
};
var CalendarHeaderTitle = CalendarHeaderTitleVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/messages/main.js
var _a6;
var prevView = "calendar.prevView";
var nextView = "calendar.nextView";
var increaseValue = "dateinput.increment";
var decreaseValue = "dateinput.decrement";
var today = "calendar.today";
var toggleCalendar = "datepicker.toggleCalendar";
var swapStartEnd = "daterangepicker.swapStartEnd";
var start = "daterangepicker.start";
var end = "daterangepicker.end";
var separator = "daterangepicker.separator";
var toggleDateTimeSelector = "datetimepicker.toggleDateTimeSelector";
var now = "timepicker.now";
var selectNow = "timepicker.selectNow";
var timePickerCancel = "timepicker.cancel";
var timePickerSet = "timepicker.set";
var toggleTimeSelector = "timepicker.toggleTimeSelector";
var toggleClock = "timepicker.toggleClock";
var date = "datetimepicker.date";
var time = "datetimepicker.time";
var dateTimePickerCancel = "datetimepicker.cancel";
var dateTimePickerSet = "datetimepicker.set";
var messages = (_a6 = {}, _a6[today] = "Today", _a6[now] = "NOW", _a6[timePickerSet] = "Set", _a6[timePickerCancel] = "Cancel", _a6[date] = "Date", _a6[time] = "Time", _a6[dateTimePickerCancel] = "Cancel", _a6[dateTimePickerSet] = "Set", _a6[start] = "Start", _a6[end] = "End", _a6[separator] = " ", _a6[selectNow] = "Select Now", _a6[toggleTimeSelector] = "Toggle TimeSelector", _a6[toggleClock] = "Toggle Clock", _a6[increaseValue] = "Increase value", _a6[decreaseValue] = "Decrease value", _a6[toggleCalendar] = "Toggle calendar", _a6[prevView] = "Navigate to previous view", _a6[nextView] = "Navigate to next view", _a6[swapStartEnd] = "Swap start and end values", _a6[toggleDateTimeSelector] = "Toggle date-time selector", _a6);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/Header.js
var allVue11 = vue_runtime_esm_bundler_exports;
var gh10 = allVue11.h;
var isV311 = allVue11.version && allVue11.version[0] === "3";
var inject3 = allVue11.inject;
var HeaderVue2 = {
  name: "KendoCalendarHeader",
  inheritAttrs: false,
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    activeView: {
      type: Number,
      required: true
    },
    currentDate: {
      type: Date,
      required: true
    },
    focusedDate: {
      type: Date,
      required: true
    },
    headerTitle: {
      type: [String, Object, Function],
      default: function _default2() {
        return void 0;
      }
    },
    max: {
      type: Date,
      default: function _default3() {
        return MAX_DATE;
      }
    },
    min: {
      type: Date,
      default: function _default4() {
        return MIN_DATE2;
      }
    },
    bus: Object,
    service: Object,
    rangeLength: {
      type: Number,
      default: 1
    },
    tabIndex: {
      type: Number,
      default: 0
    }
  },
  data: function data2() {
    return {
      currentRtl: false
    };
  },
  mounted: function mounted3() {
    this.currentRtl = isRtl(this.$el);
  },
  computed: {
    navigate: {
      get: function get6() {
        return this.$props.bus.canMoveUp(this.$props.activeView);
      }
    },
    todayIsInRange: {
      get: function get7() {
        return isInRange(getToday(), getDate(this.$props.min), getDate(this.$props.max));
      }
    }
  },
  methods: {
    getTitle: function getTitle() {
      if (!this.$props.currentDate) {
        return "";
      }
      var take = this.$props.rangeLength - 1;
      var title = this.$props.service.title(this.$props.currentDate);
      var nextDate = this.$props.service.addToDate(this.$props.currentDate, take);
      if (take < 1 || !this.$props.service.isInRange(nextDate, this.$props.min, this.$props.max)) {
        return title;
      }
      return "".concat(title, " - ").concat(this.$props.service.title(nextDate));
    },
    handleTitleClick: function handleTitleClick(event2) {
      if (!this.navigate) {
        return;
      }
      this.$props.bus.moveUp(this.$props.activeView, event2);
      this.$emit("titleclick", event2);
    },
    canNavigate: function canNavigate(action) {
      if (!this.$props.service) {
        return false;
      }
      var candidate = this.$props.service.move(this.$props.focusedDate, action);
      return this.$props.min <= candidate && candidate <= this.$props.max || this.$props.service.isInSameView(candidate, this.$props.min) || this.$props.service.isInSameView(candidate, this.$props.max);
    },
    move: function move(action) {
      return this.clampDate(this.$props.service.move(this.$props.focusedDate, action));
    },
    clampDate: function clampDate(value2) {
      return dateInRange(value2, this.$props.min, this.$props.max);
    },
    handleNextClick: function handleNextClick(event2) {
      var args = {
        event: event2,
        value: this.move(Action.NextView),
        target: this
      };
      this.$emit("nextclick", args);
    },
    handlePrevClick: function handlePrevClick(event2) {
      var args = {
        event: event2,
        value: this.move(Action.PrevView),
        target: this
      };
      this.$emit("prevclick", args);
    },
    handleTodayClick: function handleTodayClick2(event2) {
      if (!this.todayIsInRange) {
        return;
      }
      this.$props.bus.moveToBottom(this.$props.activeView);
      var args = {
        event: event2,
        value: dateInRange(getToday(), this.$props.min, this.$props.max),
        target: this
      };
      this.$emit("todayclick", args);
    },
    todayKeyDown: function todayKeyDown(event2) {
      var keyCode = event2.keyCode;
      if (keyCode === Keys.enter) {
        this.handleTodayClick(event2);
      }
    }
  },
  // @ts-ignore
  setup: !isV311 ? void 0 : function() {
    var v3 = !!isV311;
    var kendoLocalizationService = inject3("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render10(createElement) {
    var h = gh10 || createElement;
    this._localization = provideLocalizationService(this);
    var todayMessage = this._localization.toLanguageString(today, messages[today]);
    var title = this.getTitle();
    var prevViewTitle = this._localization.toLanguageString(prevView, messages[prevView]);
    var nextViewTittle = this._localization.toLanguageString(nextView, messages[nextView]);
    var isPrevDisabled = !this.canNavigate(Action.PrevView);
    var isNextDisabled = !this.canNavigate(Action.NextView);
    var titleClassNames = classNames("k-calendar-title", "k-title", {
      "k-disabled": !this.navigate
    });
    var todayClassNames = classNames("k-calendar-nav-today", {
      "k-disabled": !this.todayIsInRange
    });
    var headerTitle;
    var headerTitleDefaultRendering = (
      // @ts-ignore  function children
      h(CalendarHeaderTitle, {
        value: title,
        attrs: this.v3 ? void 0 : {
          value: title,
          view: this.$props.activeView
        },
        view: this.$props.activeView,
        "class": titleClassNames,
        onClick: this.handleTitleClick,
        on: this.v3 ? void 0 : {
          "click": this.handleTitleClick
        }
      }, this.v3 ? function() {
        return [title];
      } : [title])
    );
    headerTitle = getTemplate.call(this, {
      h,
      template: this.$props.headerTitle,
      defaultRendering: headerTitleDefaultRendering
    });
    return h("div", {
      "class": "k-calendar-header k-hstack",
      style: this.$attrs.style
    }, [headerTitle, h("span", {
      "class": "k-spacer"
    }), h("span", {
      "class": "k-calendar-nav k-hstack"
    }, [
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          icon: this.currentRtl ? "chevron-right" : "chevron-left",
          svgIcon: this.currentRtl ? chevronRightIcon : chevronLeftIcon,
          size: this.$props.size,
          fillMode: "flat",
          desabled: isPrevDisabled,
          "aria-label": prevViewTitle,
          title: prevViewTitle
        },
        icon: this.currentRtl ? "chevron-right" : "chevron-left",
        svgIcon: this.currentRtl ? chevronRightIcon : chevronLeftIcon,
        size: this.$props.size,
        fillMode: "flat",
        "class": "k-calendar-nav-pre",
        desabled: isPrevDisabled,
        "aria-label": prevViewTitle,
        title: prevViewTitle,
        onClick: this.handlePrevClick,
        on: this.v3 ? void 0 : {
          "click": this.handlePrevClick
        }
      }),
      h("span", {
        "class": todayClassNames,
        tabindex: this.$props.tabIndex,
        attrs: this.v3 ? void 0 : {
          tabindex: this.$props.tabIndex
        },
        onKeydown: this.todayKeyDown,
        on: this.v3 ? void 0 : {
          "keydown": this.todayKeyDown,
          "click": this.handleTodayClick
        },
        onClick: this.handleTodayClick
      }, [todayMessage]),
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          icon: this.currentRtl ? "chevron-left" : "chevron-right",
          svgIcon: this.currentRtl ? chevronLeftIcon : chevronRightIcon,
          size: this.$props.size,
          fillMode: "flat",
          desabled: isNextDisabled,
          "aria-label": nextViewTittle,
          title: nextViewTittle
        },
        icon: this.currentRtl ? "chevron-left" : "chevron-right",
        svgIcon: this.currentRtl ? chevronLeftIcon : chevronRightIcon,
        size: this.$props.size,
        fillMode: "flat",
        "class": "k-calendar-nav-next",
        desabled: isNextDisabled,
        "aria-label": nextViewTittle,
        title: nextViewTittle,
        onClick: this.handleNextClick,
        on: this.v3 ? void 0 : {
          "click": this.handleNextClick
        }
      })
    ])]);
  }
};
var Header = HeaderVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/utils/main.js
var calculateValue = function(min, max, stateValue, propValue) {
  return propValue !== void 0 ? propValue !== null && isInRange(propValue, min, max) ? propValue : null : stateValue !== null && isInRange(stateValue, min, max) ? stateValue : null;
};
var extractDateFromValue = function(min, max, value2) {
  return value2 instanceof Date && !Array.isArray(value2) && isInRange(getDate(value2), min, max) ? getDate(value2) : null;
};
var extractMultipleFromValue = function(min, max, value2) {
  return Array.isArray(value2) ? value2.filter(function(date2) {
    return isInRange(date2, min, max);
  }).map(function(date2) {
    return getDate(date2);
  }) : null;
};
var extractRangeFromValue = function(value2) {
  return isObject(value2) && !(value2 instanceof Date) && value2 !== null && !Array.isArray(value2) ? value2 : EMPTY_SELECTIONRANGE;
};
var extractFocusedDate = function(single, multiple, range3) {
  return single || multiple && multiple[0] || range3 && range3.start;
};
var extractActiveRange = function(range3, single) {
  return range3.start === null && single === null ? "start" : range3.end === null ? "end" : "start";
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/Calendar.js
var allVue12 = vue_runtime_esm_bundler_exports;
var gh11 = allVue12.h;
var isV312 = allVue12.version && allVue12.version[0] === "3";
var inject4 = allVue12.inject;
var CalendarVue2 = {
  name: "KendoCalendar",
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  model: {
    event: "changemodel"
  },
  props: {
    activeRangeEnd: {
      type: String,
      default: void 0
    },
    allowReverse: {
      type: Boolean,
      default: false
    },
    cell: [String, Function, Object],
    className: String,
    defaultActiveView: {
      type: String,
      default: "month"
    },
    modelValue: {
      type: [Date, Array, Object],
      default: void 0
    },
    defaultValue: {
      type: [Date, Array, Object],
      default: null
    },
    disabled: {
      type: Boolean,
      default: false
    },
    focusedDate: Date,
    id: {
      type: String,
      default: function _default5() {
        return guid();
      }
    },
    headerTitle: [String, Function, Object],
    max: {
      type: Date,
      default: function _default6() {
        return MAX_DATE2;
      }
    },
    min: {
      type: Date,
      default: function _default7() {
        return MIN_DATE2;
      }
    },
    mode: String,
    navigation: {
      type: Boolean,
      default: true
    },
    tabIndex: Number,
    value: [Date, Array, Object],
    views: {
      type: Number,
      default: 1
    },
    weekNumber: Boolean,
    weekCell: [String, Function, Object],
    topView: {
      type: String,
      default: "century"
    },
    bottomView: {
      type: String,
      default: "month"
    }
  },
  data: function data3() {
    return {
      valueDuringOnChange: void 0,
      currentFocusedDate: null,
      currentActiveView: null,
      currentValue: null,
      cellUID: guid(),
      isActive: false,
      oldValue: null,
      didNavigationChange: false,
      currentActiveRangeEnd: void 0
    };
  },
  created: function created3() {
    validatePackage(packageMetadata);
    var value2 = calculateValue(this.currentMin, this.currentMax, this.$props.defaultValue, this.$props.value || this.$props.modelValue);
    var selectedDate = extractDateFromValue(this.currentMin, this.currentMax, value2);
    var selectedMultiple = extractMultipleFromValue(this.currentMin, this.currentMax, value2);
    var selectedRange = extractRangeFromValue(value2);
    var calculatedFocus = extractFocusedDate(selectedDate, selectedMultiple, selectedRange);
    this._hasMounted = false;
    this.$data.currentFocusedDate = dateInRange(this.$props.focusedDate || calculatedFocus || getToday(), this.currentMin, this.currentMax);
    this.$data.currentValue = value2;
    this.$data.currentActiveView = viewInRange(CalendarViewEnum[this.$props.defaultActiveView], CalendarViewEnum[this.$props.bottomView], CalendarViewEnum[this.$props.topView]);
    this.$data.currentActiveRangeEnd = extractActiveRange(selectedRange, selectedDate);
    this._dates = [];
    this._calculateFocusFromValue = false;
    this._lastView = this.$props.activeView || this.$data.currentActiveView;
    this._lastViewsCount = this.$props.views;
    this._dom = new DOMService();
    this._bus = new BusViewService(this.handleViewChange);
    this._navigation = new NavigationService(this._bus);
    this._oldValue = value2;
  },
  watch: {
    value: function value(newValue, _oldValue) {
      this.$data.currentFocusedDate = newValue;
    },
    focusedDate: function focusedDate(newValue, _oldValue) {
      this.$data.currentFocusedDate = newValue;
    }
  },
  // @ts-ignore
  setup: !isV312 ? void 0 : function() {
    var v3 = !!isV312;
    var kendoIntlService = inject4("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  mounted: function mounted4() {
    this.calendarViewList = this.v3 ? this.calendarViewListRef : this.$refs.calendarViewList;
    this._calculateFocusFromValue = true;
  },
  updated: function updated3() {
    var stateValue = extractDateFromValue(this.currentMin, this.currentMax, this.computedValue());
    this._calculateFocusFromValue = Boolean(this._selectedDate && stateValue && this._selectedDate.getTime() && stateValue.getTime());
    this._lastView = this.$props.activeView || this.$data.currentActiveView;
    this._lastViewsCount = this.$props.views;
    this._oldValue = this.computedValue();
    if (!this.calendarViewList) {
      this.calendarViewList = this.v3 ? this.calendarViewListRef : this.$refs.calendarViewList;
    }
  },
  computed: {
    activeRange: {
      get: function get8() {
        return this.$props.activeRangeEnd !== void 0 ? this.$props.activeRangeEnd : this.$data.currentActiveRangeEnd;
      }
    },
    currentMin: function currentMin() {
      return getDate(this.$props.min);
    },
    currentMax: function currentMax() {
      return getDate(this.$props.max);
    }
  },
  methods: {
    element: function element() {
      return this.$el;
    },
    computedValue: function computedValue() {
      return this.$data.valueDuringOnChange !== void 0 ? this.$data.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentValue;
    },
    focus: function focus() {
      if (this.calendarViewList) {
        this.calendarViewList.$el.firstElementChild.focus();
      }
    },
    handleBlur: function handleBlur2() {
      this.$data.isActive = false;
    },
    handleFocus: function handleFocus2() {
      this.$data.isActive = true;
    },
    emitBlur: function emitBlur(event2) {
      this.$emit("blur", event2);
    },
    emitFocus: function emitFocus(event2) {
      this.$emit("focus", event2);
    },
    handleTodayClick: function handleTodayClick3(event2) {
      if (this.$props.disabled) {
        return;
      }
      this.$data.didNavigationChange = true;
      var focusedDate2 = cloneDate2(event2.value);
      this.$data.currentFocusedDate = focusedDate2;
      this.$data.currentValue = focusedDate2;
      this.triggerChange(focusedDate2, event2);
    },
    handleViewChange: function handleViewChange(_a9) {
      var view = _a9.view;
      this.$data.currentActiveView = view;
    },
    handlePrevClick: function handlePrevClick2(event2) {
      var focusedDate2 = cloneDate2(event2.value);
      this.focus();
      if (this.$props.disabled) {
        return;
      }
      this.$data.currentFocusedDate = focusedDate2;
    },
    handleTitleClick: function handleTitleClick2() {
      this.focus();
    },
    handleNextClick: function handleNextClick2(event2) {
      var focusedDate2 = cloneDate2(event2.value);
      this.focus();
      if (this.$props.disabled) {
        return;
      }
      this.$data.currentFocusedDate = focusedDate2;
    },
    handleCellEnter: function handleCellEnter2(value2) {
      if (this.$props.mode === "range") {
        this.$data.currentFocusedDate = value2;
      }
    },
    generateRange: function generateRange(candidate, value2) {
      var end2 = value2.end, start2 = value2.start;
      var shouldSwap = value2.start !== null && candidate.getTime() <= value2.start.getTime();
      if (!this.$props.allowReverse && shouldSwap) {
        return {
          start: candidate,
          end: this._selectedRange.start
        };
      }
      return this.activeRange !== "end" ? {
        start: candidate,
        end: end2
      } : {
        start: start2 || this._selectedDate,
        end: candidate
      };
    },
    clampRange: function clampRange(value2) {
      return {
        start: value2,
        end: null
      };
    },
    handleWeekCellClick: function handleWeekCellClick3(event2) {
      this.$emit("weekcellclick", event2);
    },
    handleWeekNameClick: function handleWeekNameClick2(event2) {
      this.$emit("weeknameclick", event2);
    },
    handleDateChange: function handleDateChange2(event2) {
      var focusedDate2 = cloneDate2(event2.value);
      var canNavigateDown = this._bus.canMoveDown(this.$data.currentActiveView);
      if (this.$props.disabled) {
        return;
      }
      if (canNavigateDown) {
        if (event2.isTodayClick) {
          this._bus.moveToBottom(this.$data.currentActiveView);
        } else {
          this._bus.moveDown(this.$data.currentActiveView, event2.event);
          this.$data.currentFocusedDate = focusedDate2;
          return;
        }
      }
      var value2;
      switch (this.$props.mode) {
        case "single":
          value2 = cloneDate2(event2.value);
          break;
        case "multiple":
          if (Array.isArray(this._selectedMultiple)) {
            var result = this._selectedMultiple.slice();
            var index_1 = -1;
            result.forEach(function(date2, idx) {
              if (isEqualDate(date2, event2.value)) {
                index_1 = idx;
              }
            });
            index_1 !== -1 ? result.splice(index_1, 1) : result.push(cloneDate2(event2.value));
            value2 = result.slice();
          } else {
            if (this._selectedDate) {
              value2 = [cloneDate2(this._selectedDate), cloneDate2(event2.value)];
            } else {
              value2 = [cloneDate2(event2.value)];
            }
          }
          break;
        case "range":
          var hasSelection = this._selectedRange.start !== null && this._selectedRange.end !== null && this.activeRange === "start";
          value2 = hasSelection ? this.clampRange(event2.value) : this.generateRange(event2.value, this._selectedRange);
          this.$data.currentActiveRangeEnd = this.activeRange !== "end" ? "end" : "start";
          break;
        default:
          value2 = cloneDate2(event2.value);
          break;
      }
      this.$data.currentValue = value2;
      this.triggerChange(value2, event2);
    },
    triggerChange: function triggerChange(value2, event2) {
      this.$data.valueDuringOnChange = value2;
      var args = {
        event: event2.event,
        value: value2,
        component: this,
        target: {
          name: this.$props.name,
          value: value2,
          valueAsDate: value2
        }
      };
      this.$emit("changemodel", value2);
      this.$emit("update:modelValue", value2);
      this.$emit("change", args);
      this.$data.valueDuringOnChange = void 0;
    },
    handleMouseDown: function handleMouseDown4(event2) {
      var focusedDate2 = cloneDate2(event2.value);
      if (this.$props.disabled || this.$data.currentActiveView !== 0) {
        return;
      }
      this.$data.currentFocusedDate = focusedDate2;
    },
    tableKeyDown: function tableKeyDown(event2) {
      var keyCode = event2.keyCode;
      this.$emit("keydown", event2);
      if (keyCode === Keys.enter) {
        var args = {
          event: event2,
          value: this._focusedDate,
          component: this,
          target: {
            name: this.$props.name,
            value: this._focusedDate,
            valueAsDate: this._focusedDate
          }
        };
        this.handleDateChange(args);
      } else {
        var candidate = dateInRange(this._navigation.move(this._focusedDate, this._navigation.action(event2), this.$data.currentActiveView, this._service, event2), this.currentMin, this.currentMax);
        if (isEqualDate(this._focusedDate, candidate)) {
          return;
        }
        this._calculateFocusFromValue = false;
        this.$data.currentFocusedDate = candidate;
      }
      event2.preventDefault();
    },
    isValueEqual: function isValueEqual(newValue, oldValue) {
      if (newValue instanceof Date && oldValue instanceof Date) {
        return isEqualDate(newValue, oldValue);
      } else if (newValue instanceof Object && oldValue instanceof Object) {
        if (newValue && oldValue && // @ts-ignore
        isEqualDate(newValue.start, oldValue.start) && isEqualDate(newValue.end, oldValue.end)) {
          return true;
        } else {
          return false;
        }
      } else if (newValue instanceof Array && oldValue instanceof Array) {
        if (newValue && oldValue && // @ts-ignore
        newValue.length === oldValue.length) {
          return true;
        } else {
          return false;
        }
      }
      return false;
    },
    rangeWithFocused: function rangeWithFocused(range3, focusedDate2) {
      return {
        start: range3.start,
        end: range3.end === null && range3.start !== null && this.$data.isActive ? focusedDate2.end : range3.end
      };
    }
  },
  // @ts-ignore
  render: function render11(createElement) {
    var _this = this;
    var h = gh11 || createElement;
    var views = this.$props.views;
    var currentValue = this.computedValue();
    var currentFocusedDate = this.$data.currentFocusedDate;
    var didValueChange = currentValue !== null && this._oldValue !== null ? !this.isValueEqual(currentValue, this._oldValue) : currentValue !== this._oldValue;
    this._selectedDate = extractDateFromValue(this.currentMin, this.currentMax, currentValue);
    this._selectedMultiple = extractMultipleFromValue(this.currentMin, this.currentMax, currentValue);
    var cell = templateRendering.call(this, this.$props.cell, getListeners.call(this));
    var weekCell = templateRendering.call(this, this.$props.weekCell, getListeners.call(this));
    var headerTitle = templateRendering.call(this, this.$props.headerTitle, getListeners.call(this));
    var activeView = viewInRange(this.$data.currentActiveView, CalendarViewEnum[this.$props.bottomView], CalendarViewEnum[this.$props.topView]);
    this._selectedDate = extractDateFromValue(this.currentMin, this.currentMax, currentValue);
    this._selectedMultiple = extractMultipleFromValue(this.currentMin, this.currentMax, currentValue);
    this._selectedRange = extractRangeFromValue(currentValue);
    var calculatedFocus = extractFocusedDate(this._selectedDate, this._selectedMultiple, this._selectedRange);
    var currentDateInRange = dateInRange(didValueChange && calculatedFocus !== null ? calculatedFocus : currentFocusedDate, this.currentMin, this.currentMax);
    if (currentDateInRange instanceof Date) {
      this._focusedDate = getDate(currentDateInRange);
    } else if (calculatedFocus) {
      this._focusedDate = calculatedFocus;
    }
    var visualizedRange = this.rangeWithFocused(this._selectedRange, currentFocusedDate);
    this._intl = provideIntlService(this);
    this._bus.configure(CalendarViewEnum[this.$props.bottomView], CalendarViewEnum[this.$props.topView]);
    this._service = this._bus.service(activeView, this._intl);
    var rootClassNames = classNames("k-widget k-calendar", "k-calendar-range", {
      "k-disabled": this.$props.disabled,
      "k-week-number": this.$props.weekNumber
    }, this.$props.className);
    var didViewChange = this._lastView !== this.$data.currentActiveView;
    var isDateInList = this._dates && this._service.isInArray(this._focusedDate, this._dates);
    var didViewsCountChange = this._lastViewsCount !== this.$props.views;
    if (!isDateInList || didViewChange || didViewsCountChange) {
      this._dates = this._service.datesList(this._focusedDate, views);
    }
    var activeDate = cloneDate2(this._dates && this._dates[0] ? this._dates[0] : void 0);
    var calendarBody = [
      this.$props.navigation && // @ts-ignore  function children
      h(Header, {
        tabIndex: !this.$props.disabled ? this.$props.tabIndex || 0 : void 0,
        attrs: this.v3 ? void 0 : {
          tabIndex: !this.$props.disabled ? this.$props.tabIndex || 0 : void 0,
          activeView: this.$data.currentActiveView,
          currentDate: activeDate,
          focusedDate: this._focusedDate,
          min: this.currentMin,
          max: this.currentMax,
          rangeLength: this.$props.views,
          bus: this._bus,
          service: this._service,
          headerTitle
        },
        activeView: this.$data.currentActiveView,
        currentDate: activeDate,
        focusedDate: this._focusedDate,
        min: this.currentMin,
        max: this.currentMax,
        rangeLength: this.$props.views,
        onTodayclick: this.handleTodayClick,
        on: this.v3 ? void 0 : {
          "todayclick": this.handleTodayClick,
          "nextclick": this.handleNextClick,
          "prevclick": this.handlePrevClick,
          "titleclick": this.handleTitleClick
        },
        onNextclick: this.handleNextClick,
        onPrevclick: this.handlePrevClick,
        onTitleclick: this.handleTitleClick,
        bus: this._bus,
        service: this._service,
        headerTitle
      }),
      // @ts-ignore function children
      h(
        ViewList,
        {
          allowReverse: this.$props.allowReverse,
          attrs: this.v3 ? void 0 : {
            allowReverse: this.$props.allowReverse,
            isActive: this.$data.isActive,
            tabIndex: !this.$props.disabled ? this.$props.tabIndex || 0 : void 0,
            activeView: this.$data.currentActiveView,
            focusedDate: this._focusedDate,
            min: this.currentMin,
            max: this.currentMax,
            bus: this._bus,
            dates: this._dates,
            shouldScroll: this.$data.didNavigationChange,
            service: this._service,
            cell,
            weekCell,
            dom: this._dom,
            views: this.$props.views,
            selectionRange: visualizedRange,
            showWeekNumbers: this.$props.weekNumber,
            value: this._selectedMultiple || this._selectedDate,
            cellUID: this.$data.cellUID
          },
          isActive: this.$data.isActive,
          tabIndex: !this.$props.disabled ? this.$props.tabIndex || 0 : void 0,
          ref: this.v3 ? function(el) {
            _this.calendarViewListRef = el;
          } : "calendarViewList",
          activeView: this.$data.currentActiveView,
          focusedDate: this._focusedDate,
          min: this.currentMin,
          max: this.currentMax,
          bus: this._bus,
          dates: this._dates,
          shouldScroll: this.$data.didNavigationChange,
          service: this._service,
          cell,
          weekCell,
          dom: this._dom,
          views: this.$props.views,
          selectionRange: visualizedRange,
          showWeekNumbers: this.$props.weekNumber,
          onChange: this.handleDateChange,
          on: this.v3 ? void 0 : {
            "change": this.handleDateChange,
            "weekcellclick": this.handleWeekCellClick,
            "weeknameclick": this.handleWeekNameClick,
            "listmousedown": this.handleMouseDown,
            "cellenter": this.handleCellEnter,
            "listkeydown": this.tableKeyDown,
            "listfocus": this.handleFocus,
            "listblur": this.handleBlur
          },
          onWeekcellclick: this.handleWeekCellClick,
          onWeeknameclick: this.handleWeekNameClick,
          onListmousedown: this.handleMouseDown,
          onCellenter: this.handleCellEnter,
          onListkeydown: this.tableKeyDown,
          onListfocus: this.handleFocus,
          onListblur: this.handleBlur,
          value: this._selectedMultiple || this._selectedDate,
          cellUID: this.$data.cellUID
        }
      )
    ];
    return h("div", {
      "aria-disabled": this.$props.disabled,
      attrs: this.v3 ? void 0 : {
        "aria-disabled": this.$props.disabled,
        id: this.$props.id
      },
      "class": rootClassNames,
      id: this.$props.id,
      onFocusout: this.emitBlur,
      on: this.v3 ? void 0 : {
        "focusout": this.emitBlur,
        "focusin": this.emitFocus
      },
      onFocusin: this.emitFocus
    }, [calendarBody]);
  }
};
var Calendar = CalendarVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/dateinput/models/mask.js
var Mask = (
  /** @class */
  function() {
    function Mask2() {
      this.symbols = "";
    }
    return Mask2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/dateinput/utils.js
var defaultFormat = "d";
var defaultFormatPlaceholder = "wide";
var approximateStringMatching = function(oldTextOrigin, oldFormat, newTextOrigin, selectionStart) {
  var oldTextSeparator = oldTextOrigin[selectionStart + oldTextOrigin.length - newTextOrigin.length];
  var oldText = oldTextOrigin.substring(0, selectionStart + oldTextOrigin.length - newTextOrigin.length);
  var newText = newTextOrigin.substring(0, selectionStart);
  var diff = [];
  if (oldText === newText && selectionStart > 0) {
    diff.push([oldFormat[selectionStart - 1], newText[selectionStart - 1]]);
    return diff;
  }
  if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {
    var deletedSymbol = "";
    if (newText.length === 1) {
      diff.push([oldFormat[0], newText[0]]);
    }
    for (var i = newText.length; i < oldText.length; i++) {
      if (oldFormat[i] !== deletedSymbol && oldFormat[i] !== "_") {
        deletedSymbol = oldFormat[i];
        diff.push([deletedSymbol, ""]);
      }
    }
    return diff;
  }
  if (newText.indexOf(oldText) === 0 || oldFormat[selectionStart - 1] === "_") {
    var symbol = oldFormat[0];
    for (var i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {
      if (oldFormat[i] !== "_") {
        symbol = oldFormat[i];
        break;
      }
    }
    return [[symbol, newText[selectionStart - 1]]];
  }
  if (newText[newText.length - 1] === " " || newText[newText.length - 1] === oldTextSeparator) {
    return [[oldFormat[selectionStart - 1], "_"]];
  }
  return [[oldFormat[selectionStart - 1], newText[selectionStart - 1]]];
};
var dateSymbolMap = function(map, part) {
  map[part.pattern[0]] = part.type;
  return map;
};
var isInRange2 = function(candidate, min, max) {
  return candidate === null || !(min && min > candidate || max && max < candidate);
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/dateinput/models/kendo-date.js
var KendoDate = (
  /** @class */
  function() {
    function KendoDate2(intlProvider, formatPlaceholder, format) {
      this.year = true;
      this.month = true;
      this.date = true;
      this.hours = true;
      this.minutes = true;
      this.seconds = true;
      this.milliseconds = true;
      this.leadingZero = null;
      this.typedMonthPart = "";
      this.knownParts = "adHhmMsEy";
      this.symbols = {
        "E": "E",
        "H": "H",
        "M": "M",
        "a": "a",
        "d": "d",
        "h": "h",
        "m": "m",
        "s": "s",
        "y": "y"
      };
      this._value = getDate(/* @__PURE__ */ new Date());
      this.intlProvider = intlProvider;
      this.formatPlaceholder = formatPlaceholder;
      this.format = format;
      this.monthNames = this.allFormatedMonths();
    }
    Object.defineProperty(KendoDate2.prototype, "intl", {
      get: function() {
        return this.intlProvider();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(KendoDate2.prototype, "value", {
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    KendoDate2.prototype.setValue = function(value2) {
      if (!value2) {
        this._value = getDate(/* @__PURE__ */ new Date());
        this.modifyExisting(false);
      } else if (!isEqual(value2, this._value)) {
        this._value = cloneDate2(value2);
        this.modifyExisting(true);
      }
    };
    KendoDate2.prototype.hasValue = function() {
      var _this = this;
      var pred = function(a, p) {
        return a || p.type !== "literal" && p.type !== "dayperiod" && _this.getExisting(p.pattern[0]);
      };
      return this.intl.splitDateFormat(this.format).reduce(pred, false);
    };
    KendoDate2.prototype.getDateObject = function() {
      for (var i = 0; i < this.knownParts.length; i++) {
        if (!this.getExisting(this.knownParts[i])) {
          return null;
        }
      }
      return cloneDate2(this.value);
    };
    KendoDate2.prototype.getTextAndFormat = function() {
      return this.merge(this.intl.formatDate(this.value, this.format), this.dateFormatString(this.value, this.format));
    };
    KendoDate2.prototype.modifyExisting = function(value2) {
      var sampleFormat = this.dateFormatString(this.value, this.format).symbols;
      for (var i = 0; i < sampleFormat.length; i++) {
        this.setExisting(sampleFormat[i], value2);
      }
    };
    KendoDate2.prototype.getExisting = function(symbol) {
      switch (symbol) {
        case "y":
          return this.year;
        case "M":
        case "L":
          return this.month;
        case "d":
          return this.date;
        case "E":
          return this.date && this.month && this.year;
        case "h":
        case "H":
          return this.hours;
        case "m":
          return this.minutes;
        case "s":
          return this.seconds;
        default:
          return true;
      }
    };
    KendoDate2.prototype.setExisting = function(symbol, value2) {
      switch (symbol) {
        case "y":
          this.year = value2;
          if (value2 === false) {
            this._value.setFullYear(2e3);
          }
          break;
        case "M":
          this.month = value2;
          if (value2 === false) {
            this._value.setMonth(0);
          }
          break;
        case "d":
          this.date = value2;
          break;
        case "h":
        case "H":
          this.hours = value2;
          break;
        case "m":
          this.minutes = value2;
          break;
        case "s":
          this.seconds = value2;
          break;
        default:
          return;
      }
    };
    KendoDate2.prototype.modifyPart = function(symbol, offset2) {
      var newValue = cloneDate2(this.value);
      switch (symbol) {
        case "y":
          newValue.setFullYear(newValue.getFullYear() + offset2);
          break;
        case "M":
          newValue = addMonths(this.value, offset2);
          break;
        case "d":
        case "E":
          newValue.setDate(newValue.getDate() + offset2);
          break;
        case "h":
        case "H":
          newValue.setHours(newValue.getHours() + offset2);
          break;
        case "m":
          newValue.setMinutes(newValue.getMinutes() + offset2);
          break;
        case "s":
          newValue.setSeconds(newValue.getSeconds() + offset2);
          break;
        case "a":
          newValue.setHours(newValue.getHours() + 12 * offset2);
          break;
        default:
          break;
      }
      this.setExisting(symbol, true);
      this._value = newValue;
    };
    KendoDate2.prototype.parsePart = function(symbol, currentChar) {
      var _a9;
      this.resetLeadingZero();
      if (!currentChar) {
        this.setExisting(symbol, false);
        return { value: null };
      }
      var baseDate = this.intl.formatDate(this.value, this.format);
      var dateParts = this.dateFormatString(this.value, this.format);
      var baseFormat = dateParts.symbols;
      var replaced = false;
      var prefix = "";
      var current2 = "";
      var suffix = "";
      for (var i = 0; i < baseDate.length; i++) {
        if (baseFormat[i] === symbol) {
          current2 += this.getExisting(symbol) ? baseDate[i] : "0";
          replaced = true;
        } else if (!replaced) {
          prefix += baseDate[i];
        } else {
          suffix += baseDate[i];
        }
      }
      var parsedDate = null;
      var month = this.matchMonth(currentChar);
      while (current2.length > 0 && current2.charAt(0) === "0") {
        current2 = current2.slice(1);
      }
      if (current2.length >= 4) {
        current2 = "";
      }
      for (var i = 0; i < 2; i++) {
        var middle = current2 + currentChar;
        var middleNumber = parseInt(middle, 10);
        parsedDate = this.intl.parseDate(prefix + middle + suffix, this.format);
        if (!parsedDate && !isNaN(middleNumber) && !isNaN(parseInt(currentChar, 10))) {
          if (symbol === "M" && !month) {
            var monthNumber = middleNumber - 1;
            if (monthNumber > -1 && monthNumber < 12) {
              parsedDate = cloneDate2(this.value);
              parsedDate.setMonth(monthNumber);
              if (parsedDate.getMonth() !== monthNumber) {
                parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));
              }
            }
          }
          if (symbol === "y") {
            parsedDate = createDate(parseInt(middle, 10), this.month ? this.value.getMonth() : 0, this.date ? this.value.getDate() : 1, this.hours ? this.value.getHours() : 0, this.minutes ? this.value.getMinutes() : 0, this.seconds ? this.value.getSeconds() : 0, this.milliseconds ? this.value.getMilliseconds() : 0);
            if (this.date && parsedDate.getDate() !== this.value.getDate()) {
              parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));
            }
          }
        }
        if (parsedDate) {
          this._value = parsedDate;
          this.setExisting(symbol, true);
          return { value: this.value };
        }
        current2 = "";
      }
      if (month) {
        parsedDate = this.intl.parseDate(prefix + month + suffix, this.format);
        if (parsedDate) {
          this._value = parsedDate;
          this.setExisting(symbol, true);
          return { value: this.value };
        }
      }
      if (currentChar === "0") {
        this.leadingZero = !this.isAbbrMonth(dateParts.partMap, symbol) ? (_a9 = {}, _a9[symbol] = true, _a9) : null;
        this.setExisting(symbol, false);
      }
      return { value: null };
    };
    KendoDate2.prototype.symbolMap = function(symbol) {
      return this.intl.splitDateFormat(this.format).reduce(dateSymbolMap, {})[symbol];
    };
    KendoDate2.prototype.resetLeadingZero = function() {
      var hasLeadingZero = this.leadingZero !== null;
      this.leadingZero = null;
      return hasLeadingZero;
    };
    KendoDate2.prototype.isAbbrMonth = function(parts, symbol) {
      var pattern = this.partPattern(parts, symbol);
      return pattern.type === "month" && pattern.names;
    };
    KendoDate2.prototype.partPattern = function(parts, symbol) {
      return parts.filter(function(part) {
        return part.pattern.indexOf(symbol) !== -1;
      })[0];
    };
    KendoDate2.prototype.matchMonth = function(typedChar) {
      this.typedMonthPart += typedChar.toLowerCase();
      if (this.monthNames.length === 0) {
        return "";
      }
      while (this.typedMonthPart.length > 0) {
        for (var i = 0; i < this.monthNames.length; i++) {
          if (this.monthNames[i].toLowerCase().indexOf(this.typedMonthPart) === 0) {
            return this.monthNames[i];
          }
        }
        var monthAsNum = parseInt(this.typedMonthPart, 10);
        if (monthAsNum >= 1 && monthAsNum <= 12 && monthAsNum.toString() === this.typedMonthPart) {
          return this.monthNames[monthAsNum - 1];
        }
        this.typedMonthPart = this.typedMonthPart.substring(1, this.typedMonthPart.length);
      }
      return "";
    };
    KendoDate2.prototype.allFormatedMonths = function() {
      var dateFormatParts = this.intl.splitDateFormat(this.format);
      for (var i = 0; i < dateFormatParts.length; i++) {
        if (dateFormatParts[i].type === "month" && dateFormatParts[i].names) {
          return this.intl.dateFormatNames(dateFormatParts[i].names);
        }
      }
      return [];
    };
    KendoDate2.prototype.dateFormatString = function(date2, format) {
      var dateFormatParts = this.intl.splitDateFormat(format);
      var parts = [];
      var partMap = [];
      for (var i = 0; i < dateFormatParts.length; i++) {
        var partLength = this.intl.formatDate(date2, { pattern: dateFormatParts[i].pattern }).length;
        while (partLength > 0) {
          parts.push(this.symbols[dateFormatParts[i].pattern[0]] || "_");
          partMap.push(dateFormatParts[i]);
          partLength--;
        }
      }
      var returnValue = new Mask();
      returnValue.symbols = parts.join("");
      returnValue.partMap = partMap;
      return returnValue;
    };
    KendoDate2.prototype.merge = function(text, mask) {
      var resultText = "";
      var resultFormat = "";
      var format = mask.symbols;
      for (var r = format.length - 1; r >= 0; r--) {
        if (this.knownParts.indexOf(format[r]) === -1 || this.getExisting(format[r])) {
          resultText = text[r] + resultText;
          resultFormat = format[r] + resultFormat;
        } else {
          var currentSymbol = format[r];
          while (r >= 0 && currentSymbol === format[r]) {
            r--;
          }
          r++;
          if (this.leadingZero && this.leadingZero[currentSymbol]) {
            resultText = "0" + resultText;
          } else {
            resultText = this.dateFieldName(mask.partMap[r]) + resultText;
          }
          while (resultFormat.length < resultText.length) {
            resultFormat = format[r] + resultFormat;
          }
        }
      }
      return { text: resultText, format: resultFormat };
    };
    KendoDate2.prototype.dateFieldName = function(part) {
      var formatPlaceholder = this.formatPlaceholder || "wide";
      if (formatPlaceholder[part.type]) {
        return formatPlaceholder[part.type];
      }
      if (formatPlaceholder === "formatPattern") {
        return part.pattern;
      }
      return this.intl.dateFieldName(Object.assign(part, { nameType: formatPlaceholder }));
    };
    return KendoDate2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/models/TimePart.js
var TIME_PART = {
  dayperiod: "dayperiod",
  hour: "hour",
  millisecond: "millisecond",
  minute: "minute",
  second: "second"
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/utils.js
var setter2 = function(method) {
  return function(date2, value2) {
    var clone2 = cloneDate2(date2);
    clone2[method](value2);
    return clone2;
  };
};
var defaultGetters = [
  { type: TIME_PART.hour, getter: function(value2) {
    return value2.getHours();
  } },
  { type: TIME_PART.minute, getter: function(value2) {
    return value2.getMinutes();
  } },
  { type: TIME_PART.second, getter: function(value2) {
    return value2.getSeconds();
  } },
  { type: TIME_PART.millisecond, getter: function(value2) {
    return value2.getMilliseconds();
  } }
];
var left = function(getter2) {
  return function(origin, _) {
    return getter2(origin);
  };
};
var right = function(getter2) {
  return function(_, candidate) {
    return getter2(candidate);
  };
};
var convertToObject = function(parts) {
  return parts.reduce(function(obj, p) {
    obj[p.type] = p.type;
    return obj;
  }, {});
};
var getterByPart = function(parts) {
  return function(g) {
    return parts[g.type] ? right(g.getter) : left(g.getter);
  };
};
var gettersFactory = function(getters2) {
  return function(parts) {
    return getters2.map(getterByPart(convertToObject(parts)));
  };
};
var snapValue = function(getter2, step, min, type) {
  return function(date2) {
    var value2 = getter2(date2);
    var minValue = getter2(min);
    if (type === "hour") {
      return value2 - (value2 - minValue) % step;
    }
    if (date2.getTime() <= min.getTime() && value2 !== 0 && value2 <= minValue) {
      return Math.ceil(value2 / step) * step;
    }
    return value2 - value2 % step;
  };
};
var snappersFactory = function(getters2) {
  return function(steps, min) {
    return getters2.map(function(g) {
      var step = Math.floor(steps[g.type]);
      return step ? snapValue(g.getter, step, min, g.type) : g.getter;
    });
  };
};
var generateGetters = gettersFactory(defaultGetters);
var generateSnappers = snappersFactory(defaultGetters);
var valueMerger = function(getters2) {
  return function(origin, candidate) {
    origin.setHours.apply(origin, getters2.map(function(g) {
      return g(origin, candidate);
    }));
    return origin;
  };
};
var snapTime = function(snappers) {
  return function(candidate) {
    var date2 = cloneDate2(candidate);
    date2.setHours.apply(date2, snappers.map(function(s) {
      return s(date2);
    }));
    return date2;
  };
};
var setHours = setter2("setHours");
var setMinutes = setter2("setMinutes");
var setSeconds = setter2("setSeconds");
var getNow = function() {
  return /* @__PURE__ */ new Date();
};
var range2 = function(start2, end2, step) {
  if (step === void 0) {
    step = 1;
  }
  var result = [];
  for (var i = start2; i < end2; i = i + step) {
    result.push(i);
  }
  return result;
};
var normalizeTimes = function(candidate, min, max) {
  return {
    candidateValue: setTime(MIDNIGHT_DATE, candidate),
    maxValue: addDays(setTime(MIDNIGHT_DATE, max), min.getHours() < max.getHours() ? 0 : 1),
    minValue: setTime(MIDNIGHT_DATE, min)
  };
};
var timeInRange = function(candidate, min, max) {
  if (!candidate || !min || !max) {
    return candidate;
  }
  var _a9 = normalizeTimes(candidate, min, max), candidateValue = _a9.candidateValue, minValue = _a9.minValue, maxValue = _a9.maxValue;
  if (candidateValue < minValue) {
    return setTime(candidate, min);
  }
  if (candidateValue > maxValue) {
    return setTime(candidate, max);
  }
  return candidate;
};
var isInTimeRange = function(candidate, min, max) {
  if (!candidate || !min || !max) {
    return true;
  }
  var _a9 = normalizeTimes(candidate, min, max), candidateValue = _a9.candidateValue, minValue = _a9.minValue, maxValue = _a9.maxValue;
  return minValue <= candidateValue && candidateValue <= maxValue;
};
var isInRange3 = function(candidate, min, max) {
  if (candidate === null) {
    return true;
  }
  var _a9 = normalizeTimes(candidate, min, max), candidateValue = _a9.candidateValue, minValue = _a9.minValue, maxValue = _a9.maxValue;
  return minValue <= candidateValue && candidateValue <= maxValue;
};
var isSmallerThanMin = function(val, min) {
  if (val === null || min === null) {
    return false;
  }
  var normalizedValue = setTime(MIDNIGHT_DATE, val);
  var normalizedMin = setTime(MIDNIGHT_DATE, min);
  return normalizedValue.getTime() < normalizedMin.getHours();
};
var isBiggerThanMax = function(val, max) {
  if (val === null || max === null) {
    return false;
  }
  var normalizedValue = setTime(MIDNIGHT_DATE, val);
  var normalizedMax = setTime(MIDNIGHT_DATE, max);
  return normalizedMax.getTime() < normalizedValue.getHours();
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/dateinput/DateInput.js
var allVue13 = vue_runtime_esm_bundler_exports;
var gh12 = allVue13.h;
var isV313 = allVue13.version && allVue13.version[0] === "3";
var ref = allVue13.ref;
var inject5 = allVue13.inject;
var VALIDATION_MESSAGE = "Please enter a valid value!";
var DateInputVue2 = {
  name: "DateInput",
  model: {
    event: "changemodel"
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  emits: {
    "change": null,
    "changemodel": null,
    "update:modelValue": null,
    "focus": null,
    "blur": null
  },
  props: {
    modelValue: Date,
    value: Date,
    defaultValue: Date,
    format: {
      type: [String, Object],
      default: function _default8() {
        return defaultFormat;
      }
    },
    formatPlaceholder: {
      type: [String, Object],
      default: function _default9() {
        return defaultFormatPlaceholder;
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator2(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator3(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    tabIndex: Number,
    title: String,
    steps: Object,
    placeholder: String,
    max: {
      type: Date,
      default: function _default10() {
        return cloneDate2(MAX_DATE);
      }
    },
    min: {
      type: Date,
      default: function _default11() {
        return cloneDate2(MIN_DATE);
      }
    },
    maxTime: {
      type: Date,
      default: function _default12() {
        return cloneDate2(MAX_TIME2);
      }
    },
    minTime: {
      type: Date,
      default: function _default13() {
        return cloneDate2(MIN_TIME2);
      }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    spinners: {
      type: Boolean,
      default: false
    },
    name: String,
    dir: String,
    label: String,
    id: String,
    validationMessage: {
      type: String,
      default: VALIDATION_MESSAGE
    },
    required: {
      type: Boolean,
      default: false
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    validate: Boolean,
    valid: {
      type: Boolean,
      default: void 0
    },
    ariaRole: {
      type: String,
      default: "textbox"
    },
    ariaControls: String,
    ariaLabel: String,
    ariaExpanded: {
      type: Boolean,
      default: void 0
    },
    ariaHasPopup: {
      type: String,
      default: void 0
    }
  },
  data: function data4() {
    return {
      kendoDate: null,
      currentFormat: void 0,
      valueDuringOnChange: void 0,
      hasMounted: false,
      isEmpty: void 0,
      lastSelectedSymbol: void 0,
      isFocused: false
    };
  },
  created: function created4() {
    validatePackage(packageMetadata);
    var _a9 = this.$props, formatPlaceholder = _a9.formatPlaceholder, format = _a9.format, value2 = _a9.value, defaultValue = _a9.defaultValue;
    this.kendoDate = new KendoDate(this.intl, formatPlaceholder, format);
    this.kendoDate.setValue(null);
    this._emptyText = this.kendoDate.getTextAndFormat().text;
    this.kendoDate.setValue(value2 || defaultValue || null);
    this._element = null;
    this._inputId = guid();
  },
  computed: {
    computedValue: {
      get: function get9() {
        if (this.$data.valueDuringOnChange !== void 0) {
          return this.$data.valueDuringOnChange;
        }
        return this.kendoDate && this.kendoDate.getDateObject();
      }
    },
    wrapperClassNames: {
      get: function get10() {
        var _a9;
        var isValid = !this.$data.hasMounted || !this.$props.validityStyles || this.validity().valid;
        var disabled = this.$props.disabled;
        var _b3 = this.$props, size = _b3.size, fillMode = _b3.fillMode, rounded = _b3.rounded;
        return _a9 = {
          "k-dateinput": true,
          "k-input": true
        }, _a9["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a9["k-input-".concat(fillMode)] = fillMode, _a9["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a9["k-disabled"] = disabled, _a9["k-invalid"] = !isValid && isValid !== void 0, _a9["k-focus"] = this.isFocused, _a9["k-rtl"] = this.$props.dir === "rtl", _a9;
      }
    }
  },
  methods: {
    selection: function selection() {
      var returnValue = {
        start: 0,
        end: 0
      };
      var element5 = this.element();
      if (element5 !== null && element5.selectionStart !== void 0) {
        returnValue = {
          start: element5.selectionStart,
          end: element5.selectionEnd
        };
      }
      return returnValue;
    },
    element: function element2() {
      return this._element;
    },
    focus: function focus2(e) {
      if (this._element) {
        this._element.focus(e);
      }
    },
    handleFocus: function handleFocus3(e) {
      this.$data.isFocused = true;
      this.$emit("focus", e);
    },
    handleBlur: function handleBlur3(e) {
      this.$data.isFocused = false;
      this.$emit("blur", e);
    },
    intl: function intl() {
      return provideIntlService(this);
    },
    setValidity: function setValidity() {
      var element5 = this.element();
      if (element5 && element5.setCustomValidity) {
        element5.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage);
      }
    },
    spinnersMouseDown: function spinnersMouseDown(event2) {
      var element5 = this.element();
      event2.preventDefault();
      if (element5 && canUseDOM && document.activeElement !== element5) {
        element5.focus({
          preventScroll: true
        });
      }
    },
    elementChange: function elementChange(event2) {
      var element5 = this.element();
      if (!element5 || !this.kendoDate) {
        return;
      }
      var _a9 = this.kendoDate.getTextAndFormat(), text = _a9.text, currentFormat = _a9.format;
      this.$data.currentFormat = currentFormat;
      var dateBeforeChange = this.computedValue;
      var diff = approximateStringMatching(text, this.$data.currentFormat, element5.value, this.selection().start);
      var navigationOnly = diff.length === 1 && diff[0][1] === "_";
      if (!navigationOnly) {
        for (var i = 0; i < diff.length; i++) {
          this.kendoDate.parsePart(diff[i][0], diff[i][1]);
        }
      }
      if (diff.length && diff[0][0] !== "_") {
        this.setSelection(this.selectionBySymbol(diff[0][0]));
      }
      if (navigationOnly) {
        this.switchDateSegment(1);
      }
      this.triggerChange(event2, dateBeforeChange);
    },
    elementClick: function elementClick(_) {
      this.setSelection(this.selectionByIndex(this.selection().start));
    },
    wheel: function wheel(event2) {
      var element5 = this.element();
      if (canUseDOM && document.activeElement !== element5) {
        return;
      }
      if (event2.deltaY < 0) {
        event2.preventDefault();
        this.increasePart(event2);
      }
      if (event2.deltaY > 0) {
        event2.preventDefault();
        this.decreasePart(event2);
      }
    },
    increasePart: function increasePart(event2) {
      event2.preventDefault();
      this.modifyDateSegmentValue(1, event2);
    },
    decreasePart: function decreasePart(event2) {
      event2.preventDefault();
      this.modifyDateSegmentValue(-1, event2);
    },
    elementKeyDown: function elementKeyDown(event2) {
      if (event2.altKey) {
        return;
      }
      switch (event2.keyCode) {
        case 37:
          this.switchDateSegment(-1);
          break;
        case 38:
          this.modifyDateSegmentValue(1, event2);
          break;
        case 39:
          this.switchDateSegment(1);
          break;
        case 40:
          this.modifyDateSegmentValue(-1, event2);
          break;
        default:
          return;
      }
      event2.preventDefault();
    },
    setSelection: function setSelection(selection2) {
      var element5 = this.element();
      this.$data.lastSelectedSymbol = this.$data.currentFormat[selection2.start];
      if (canUseDOM) {
        window.requestAnimationFrame(function() {
          if (element5 && canUseDOM && document.activeElement === element5) {
            element5.setSelectionRange(selection2.start, selection2.end);
          }
        });
      }
    },
    triggerChange: function triggerChange2(event2, oldValue) {
      this.$data.valueDuringOnChange = this.computedValue;
      if (!isEqual(oldValue, this.computedValue)) {
        this.$emit("changemodel", this.computedValue);
        this.$emit("update:modelValue", this.computedValue);
        this.$emit("change", {
          event: event2,
          value: this.computedValue,
          component: this,
          target: {
            name: this.$props.name,
            value: this.$data.valueDuringOnChange,
            valueAsDate: this.$data.valueDuringOnChange
          },
          validity: this.validity()
        });
      }
      this.$data.valueDuringOnChange = void 0;
    },
    selectionBySymbol: function selectionBySymbol(symbol) {
      var start2 = -1;
      var end2 = 0;
      for (var i = 0; i < this.$data.currentFormat.length; i++) {
        if (this.$data.currentFormat[i] === symbol) {
          end2 = i + 1;
          if (start2 === -1) {
            start2 = i;
          }
        }
      }
      if (start2 < 0) {
        start2 = 0;
      }
      return {
        start: start2,
        end: end2
      };
    },
    selectionByIndex: function selectionByIndex(index) {
      var selection2 = {
        start: index,
        end: index
      };
      for (var i = index, j = index - 1; i < this.$data.currentFormat.length || j >= 0; i++, j--) {
        if (i < this.$data.currentFormat.length && this.$data.currentFormat[i] !== "_") {
          selection2 = this.selectionBySymbol(this.$data.currentFormat[i]);
          break;
        }
        if (j >= 0 && this.$data.currentFormat[j] !== "_") {
          selection2 = this.selectionBySymbol(this.$data.currentFormat[j]);
          break;
        }
      }
      return selection2;
    },
    switchDateSegment: function switchDateSegment(offset2) {
      var _a9 = this.selection(), selectionStart = _a9.start, selectionEnd = _a9.end;
      if (selectionStart < selectionEnd && this.$data.currentFormat[selectionStart] !== this.$data.currentFormat[selectionEnd - 1]) {
        this.setSelection(this.selectionByIndex(offset2 > 0 ? selectionStart : selectionEnd - 1));
        return;
      }
      var previousFormatSymbol = this.$data.currentFormat[selectionStart];
      var a = selectionStart + offset2;
      while (a > 0 && a < this.$data.currentFormat.length) {
        if (this.$data.currentFormat[a] !== previousFormatSymbol && this.$data.currentFormat[a] !== "_") {
          break;
        }
        a += offset2;
      }
      if (this.$data.currentFormat[a] === "_") {
        return;
      }
      var b = a;
      while (b >= 0 && b < this.$data.currentFormat.length) {
        if (this.$data.currentFormat[b] !== this.$data.currentFormat[a]) {
          break;
        }
        b += offset2;
      }
      if (a > b && (b + 1 !== selectionStart || a + 1 !== selectionEnd)) {
        this.setSelection({
          start: b + 1,
          end: a + 1
        });
      } else if (a < b && (a !== selectionStart || b !== selectionEnd)) {
        this.setSelection({
          start: a,
          end: b
        });
      }
    },
    modifyDateSegmentValue: function modifyDateSegmentValue(offset2, event2) {
      if (!this.kendoDate) {
        return;
      }
      var oldValue = this.computedValue;
      var symbol = this.$data.currentFormat[this.selection().start];
      var currentStepSymbol = this.kendoDate.symbolMap(symbol);
      var step = ((this.$props.steps || {})[currentStepSymbol] || 1) * offset2;
      this.kendoDate.modifyPart(symbol, step);
      this.setSelection(this.selectionBySymbol(symbol));
      this.triggerChange(event2, oldValue);
    },
    validity: function validity() {
      var inRange2 = isInRange2(this.computedValue, this.$props.min, this.$props.max) && isInTimeRange(this.computedValue, this.$props.minTime, this.$props.maxTime);
      var customError = this.$props.validationMessage !== void 0;
      var isValid = (!this.$props.required || this.computedValue !== null) && inRange2;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        rangeOverflow: this.computedValue && this.$props.max.getTime() < this.computedValue.getTime() || false,
        rangeUnderflow: this.computedValue && this.computedValue.getTime() < this.$props.min.getTime() || false,
        valid,
        valueMissing: this.computedValue === null
      };
    }
  },
  mounted: function mounted5() {
    this._element = getRef(this, "input");
    this.setValidity();
    this.$data.hasMounted = true;
  },
  updated: function updated4() {
    if (this.$data.lastSelectedSymbol) {
      this.setSelection(this.selectionBySymbol(this.$data.lastSelectedSymbol));
    }
    this.setValidity();
  },
  // @ts-ignore
  setup: !isV313 ? void 0 : function() {
    var v3 = !!isV313;
    var inputRef = ref(null);
    var kendoIntlService = inject5("kendoIntlService", {});
    var kendoLocalizationService = inject5("kendoLocalizationService", {});
    return {
      v3,
      inputRef,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render12(createElement) {
    var h = gh12 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var localizationService = provideLocalizationService(this);
    var _a9 = this.$props, formatPlaceholder = _a9.formatPlaceholder, format = _a9.format, value2 = _a9.value, modelValue = _a9.modelValue, name = _a9.name, label = _a9.label, id = _a9.id, ariaLabel = _a9.ariaLabel, ariaExpanded = _a9.ariaExpanded, ariaHasPopup = _a9.ariaHasPopup, ariaRole = _a9.ariaRole, ariaControls = _a9.ariaControls;
    this.kendoDate.format = format;
    this.kendoDate.formatPlaceholder = formatPlaceholder;
    var currentValue = value2 !== void 0 ? value2 : modelValue;
    if (currentValue !== void 0 && this.computedValue !== currentValue) {
      this.kendoDate.setValue(currentValue);
    }
    var _b3 = this.kendoDate.getTextAndFormat(), currentText = _b3.text, currentFormat = _b3.format;
    this.$data.currentFormat = currentFormat;
    this.$data.isEmpty = currentText === this._emptyText;
    var showPlaceHolder = this.$props.placeholder !== void 0 && this.$data.isEmpty && !this.$data.isFocused;
    var textToDisplay = !showPlaceHolder ? currentText : null;
    var inputId = id || this._inputId;
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var dateinput = h("span", {
      "class": this.wrapperClassNames,
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      }
    }, [h("input", {
      role: ariaRole,
      attrs: this.v3 ? void 0 : {
        role: ariaRole,
        tabindex: this.$props.tabIndex,
        disabled: this.$props.disabled,
        title: this.$props.title !== void 0 ? this.$props.title : currentText,
        type: "text",
        spellcheck: false,
        autocomplete: "off",
        autocorrect: "off",
        id: inputId,
        placeholder: this.$props.placeholder,
        name,
        "aria-label": ariaLabel,
        "aria-expanded": ariaExpanded,
        "aria-haspopup": ariaHasPopup,
        "aria-controls": ariaControls,
        "aria-disabled": this.$props.disabled
      },
      tabindex: this.$props.tabIndex,
      disabled: this.$props.disabled,
      title: this.$props.title !== void 0 ? this.$props.title : currentText,
      type: "text",
      spellcheck: false,
      autocomplete: "off",
      autocorrect: "off",
      "class": "k-input-inner",
      id: inputId,
      placeholder: this.$props.placeholder,
      onWheel: this.wheel,
      on: this.v3 ? void 0 : {
        "wheel": this.wheel,
        "click": this.elementClick,
        "input": this.elementChange,
        "keydown": this.elementKeyDown,
        "change": noop,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onClick: this.elementClick,
      onInput: this.elementChange,
      onKeydown: this.elementKeyDown,
      onChange: noop,
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur,
      value: this.v3 ? textToDisplay : null,
      domProps: this.v3 ? void 0 : {
        "value": textToDisplay
      },
      name,
      "aria-label": ariaLabel,
      "aria-expanded": ariaExpanded,
      "aria-haspopup": ariaHasPopup,
      "aria-controls": ariaControls,
      "aria-disabled": this.$props.disabled,
      ref: setRef(this, "input")
    }), defaultSlot, this.$props.spinners && h("span", {
      "class": "k-input-spinner k-spin-button",
      onMousedown: this.spinnersMouseDown,
      on: this.v3 ? void 0 : {
        "mousedown": this.spinnersMouseDown
      }
    }, [
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "caret-alt-up",
          svgIcon: caretAltUpIcon,
          size: this.$props.size,
          fillMode: this.$props.fillMode,
          "aria-label": localizationService.toLanguageString(increaseValue, messages[increaseValue]),
          title: localizationService.toLanguageString(increaseValue, messages[increaseValue])
        },
        tabIndex: -1,
        icon: "caret-alt-up",
        svgIcon: caretAltUpIcon,
        size: this.$props.size,
        fillMode: this.$props.fillMode,
        "class": "k-spinner-increase",
        "aria-label": localizationService.toLanguageString(increaseValue, messages[increaseValue]),
        title: localizationService.toLanguageString(increaseValue, messages[increaseValue]),
        onClick: this.increasePart,
        on: this.v3 ? void 0 : {
          "click": this.increasePart
        }
      }),
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "caret-alt-down",
          svgIcon: caretAltDownIcon,
          size: this.$props.size,
          fillMode: this.$props.fillMode,
          "aria-label": localizationService.toLanguageString(decreaseValue, messages[decreaseValue]),
          title: localizationService.toLanguageString(decreaseValue, messages[decreaseValue])
        },
        tabIndex: -1,
        "class": "k-spinner-decrease",
        icon: "caret-alt-down",
        svgIcon: caretAltDownIcon,
        size: this.$props.size,
        fillMode: this.$props.fillMode,
        "aria-label": localizationService.toLanguageString(decreaseValue, messages[decreaseValue]),
        title: localizationService.toLanguageString(decreaseValue, messages[decreaseValue]),
        onClick: this.decreasePart,
        on: this.v3 ? void 0 : {
          "click": this.decreasePart
        }
      })
    ])]);
    return label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label,
        attrs: this.v3 ? void 0 : {
          label,
          editorId: inputId,
          editorValue: textToDisplay,
          editorPlaceholder: this.$props.placeholder,
          editorValid: isValid,
          editorDisabled: this.$props.disabled
        },
        editorId: inputId,
        editorValue: textToDisplay,
        editorPlaceholder: this.$props.placeholder,
        editorValid: isValid,
        editorDisabled: this.$props.disabled
      }, this.v3 ? function() {
        return [dateinput];
      } : [dateinput])
    ) : dateinput;
  }
};
var DateInput = DateInputVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/datepicker/ToggleButton.js
var ToggleButtonVue2 = Button;
var ToggleButton = ToggleButtonVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/datepicker/DatePicker.js
var allVue14 = vue_runtime_esm_bundler_exports;
var gh13 = allVue14.h;
var isV314 = allVue14.version && allVue14.version[0] === "3";
var ref2 = allVue14.ref;
var inject6 = allVue14.inject;
var DatePickerVue2 = {
  name: "DatePicker",
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "change": null,
    "changemodel": null,
    "update:modelValue": null,
    "iconclick": null,
    "focus": null,
    "blur": null,
    "keydown": null,
    "open": null,
    "close": null
  },
  props: {
    defaultShow: {
      type: Boolean,
      default: false
    },
    modelValue: {
      type: Date,
      default: void 0
    },
    defaultValue: {
      type: Date,
      default: void 0
    },
    disabled: {
      type: Boolean,
      default: false
    },
    dateInput: {
      type: [String, Object, Function],
      default: function _default14() {
        return void 0;
      }
    },
    calendar: {
      type: [String, Object, Function],
      default: function _default15() {
        return void 0;
      }
    },
    toggleButton: {
      type: [String, Object, Function],
      default: function _default16() {
        return void 0;
      }
    },
    label: String,
    placeholder: String,
    popup: {
      type: [String, Object, Function],
      default: function _default17() {
        return void 0;
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator4(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator5(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator6(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    focusedDate: Date,
    format: {
      type: [Object, String],
      default: function _default18() {
        return "d";
      }
    },
    formatPlaceholder: [Object, String],
    id: String,
    max: {
      type: Date,
      default: function _default19() {
        return cloneDate2(MAX_DATE);
      }
    },
    min: {
      type: Date,
      default: function _default20() {
        return cloneDate2(MIN_DATE);
      }
    },
    name: String,
    popupSettings: {
      type: Object,
      default: function _default21() {
        return {};
      }
    },
    show: {
      type: Boolean,
      default: void 0
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    title: {
      type: String,
      default: function _default22() {
        return "";
      }
    },
    value: Date,
    weekNumber: Boolean,
    width: [Number, String],
    validityStyles: {
      type: Boolean,
      default: true
    },
    validationMessage: String,
    required: Boolean,
    validate: Boolean,
    valid: {
      type: Boolean,
      default: void 0
    },
    ariaLabel: String
  },
  data: function data5() {
    return {
      isFocused: false,
      currentValue: void 0,
      currentShow: void 0,
      valueDuringOnChange: void 0,
      showDuringOnChange: void 0,
      shouldFocusDateInput: false
    };
  },
  created: function created5() {
    validatePackage(packageMetadata);
    this._popupId = guid();
    this._anchor = guid();
    this._dateInput = null;
    this._calendar = null;
    this.$data.currentValue = this.$props.defaultValue;
    this.$data.currentShow = this.$props.defaultShow;
  },
  mounted: function mounted6() {
    this._dateInput = getRef(this, "dateInput");
    if (this.$refs.calendar || this.calendarRef) {
      this._calendar = getRef(this, "calendar");
    }
    if (this.computedShow) {
      this.$forceUpdate();
    }
  },
  updated: function updated5() {
    if (this.$refs.calendar || this.calendarRef) {
      this._calendar = getRef(this, "calendar");
    }
    if (this.computedShow) {
      if (this._calendar && this._calendar.$el && !this._oldShow) {
        this._calendar.focus({
          preventScroll: true
        });
      }
    } else {
      if (this._dateInput && this._dateInput.$el && this.$data.shouldFocusDateInput) {
        this._dateInput.focus({
          preventScroll: true
        });
      }
    }
    this.$data.shouldFocusDateInput = false;
  },
  watch: {
    show: function show(_newShow, oldShow) {
      this._oldShow = oldShow;
    },
    currentShow: function currentShow(_newShow, oldShow) {
      this._oldShow = oldShow;
    }
  },
  computed: {
    computedValue: {
      get: function get11() {
        var value2 = this.$data.valueDuringOnChange !== void 0 ? this.$data.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentValue;
        return value2 !== null ? cloneDate2(value2) : null;
      }
    },
    computedShow: {
      get: function get12() {
        return this.$data.showDuringOnChange !== void 0 ? this.$data.showDuringOnChange : this.$props.show !== void 0 ? this.$props.show : this.$data.currentShow;
      }
    }
  },
  methods: {
    focus: function focus3() {
      if (this._dateInput) {
        this._dateInput.focus();
      }
    },
    handleFocus: function handleFocus4(event2) {
      this._oldShow = this.computedShow;
      this.$data.isFocused = true;
      this.$emit("focus", event2);
    },
    handleBlur: function handleBlur4(event2) {
      this.$data.isFocused = false;
      this.createBlurTimeout();
      this.$emit("blur", event2);
    },
    calendarBlur: function calendarBlur() {
      this.$emit("blur", event);
      clearTimeout(this._blurTimeout);
      this.createBlurTimeout();
    },
    calendarFocus: function calendarFocus() {
      this.$emit("focus", event);
      clearTimeout(this._blurTimeout);
    },
    createBlurTimeout: function createBlurTimeout() {
      var _this = this;
      this._blurTimeout = setTimeout(function() {
        if (_this._dateInput && canUseDOM && document.activeElement !== _this._dateInput._element) {
          _this.setShow(false);
        }
      }, 200);
    },
    validity: function validity2() {
      var value2 = this.computedValue;
      var inRange2 = isInDateRange(value2, this.$props.min, this.$props.max);
      var customError = this.$props.validationMessage !== void 0;
      var isValid = (!this.$props.required || value2 !== null) && inRange2;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        rangeOverflow: value2 && this.$props.max.getTime() < value2.getTime() || false,
        rangeUnderflow: value2 && value2.getTime() < this.$props.min.getTime() || false,
        valid,
        valueMissing: value2 === null
      };
    },
    nextValue: function nextValue(nextProps, nextState) {
      return nextProps.value !== void 0 ? nextProps.value : nextState.value;
    },
    nextShow: function nextShow(nextProps, nextState) {
      return nextProps.show !== void 0 ? nextProps.show : nextState.show;
    },
    setShow: function setShow(show4) {
      if (this.computedShow === show4) {
        return;
      }
      this.$data.currentShow = show4;
      this.$emit(show4 ? "open" : "close", {
        component: this
      });
    },
    mergeTime: function mergeTime(value2) {
      return this.computedValue && value2 ? setTime(value2, this.computedValue) : value2;
    },
    handleInputValueChange: function handleInputValueChange(event2) {
      this.handleValueChange(event2.value, event2);
    },
    handleCalendarValueChange: function handleCalendarValueChange(event2) {
      var value2 = this.mergeTime(event2.value);
      this.handleValueChange(value2, event2);
    },
    getDateInputText: function getDateInputText() {
      return this.computedValue ? true : this._dateInput ? this._dateInput._element.value : "";
    },
    handleValueChange: function handleValueChange(value2, event2) {
      this.$data.currentValue = cloneDate2(value2 || void 0);
      this.$data.valueDuringOnChange = value2;
      this.$data.showDuringOnChange = false;
      this.$data.shouldFocusDateInput = true;
      this.$emit("changemodel", this.computedValue);
      this.$emit("update:modelValue", this.computedValue);
      this.$emit("change", {
        event: event2.event,
        value: this.computedValue,
        show: this.computedShow,
        component: this,
        target: {
          name: this.$props.name,
          value: this.computedValue,
          valueAsDate: this.computedValue
        },
        validity: this.validity()
      });
      this.$data.valueDuringOnChange = void 0;
      this.$data.showDuringOnChange = void 0;
      this.setShow(false);
    },
    handleIconClick: function handleIconClick(event2) {
      event2.stopPropagation();
      event2.preventDefault();
      if (this.$props.disabled) {
        return;
      }
      this.$data.shouldFocusDateInput = true;
      this.$emit("iconclick", event2);
      this.setShow(!this.computedShow);
    },
    handleIconMouseDown: function handleIconMouseDown(event2) {
      event2.stopPropagation();
      event2.preventDefault();
    },
    handleKeyDown: function handleKeyDown2(event2) {
      var altKey = event2.altKey, keyCode = event2.keyCode;
      if (keyCode === Keys.tab && this._dateInput && event2.target !== this._dateInput._element) {
        event2.preventDefault();
        this.$data.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }
      if (keyCode === Keys.esc) {
        this.$data.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }
      if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
        event2.preventDefault();
        event2.stopPropagation();
        this.$data.shouldFocusDateInput = keyCode === Keys.up;
        this.setShow(keyCode === Keys.down);
      }
      this.$emit("keydown", event2);
    }
  },
  // @ts-ignore
  setup: !isV314 ? void 0 : function() {
    var v3 = !!isV314;
    var listRef = ref2(null);
    var kendoAnchorRef = ref2(null);
    var kendoLocalizationService = inject6("kendoLocalizationService", {});
    return {
      v3,
      listRef,
      kendoAnchorRef,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render13(createElement) {
    var _a9;
    var h = gh13 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _b3 = this.$props, disabled = _b3.disabled, tabIndex = _b3.tabIndex, title = _b3.title, id = _b3.id, format = _b3.format, formatPlaceholder = _b3.formatPlaceholder, min = _b3.min, max = _b3.max, weekNumber = _b3.weekNumber, focusedDate2 = _b3.focusedDate, width = _b3.width, name = _b3.name, validationMessage = _b3.validationMessage, required = _b3.required, validityStyles = _b3.validityStyles, size = _b3.size, fillMode = _b3.fillMode, rounded = _b3.rounded, ariaLabel = _b3.ariaLabel;
    var _c2 = this.$props.popupSettings, popupClass = _c2.popupClass, animate2 = _c2.animate, appendTo = _c2.appendTo;
    var show4 = this.computedShow;
    var value2 = this.computedValue;
    var sanitizedValue = value2 && getDate(value2);
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var popupClassNames = classNames("k-calendar-container k-group k-reset", popupClass);
    var toggleButton = this.$props.toggleButton ? templateRendering.call(this, this.$props.toggleButton, getListeners.call(this)) : void 0;
    var toggleButtonDefaultRendering = (
      // @ts-ignore
      h(ToggleButton, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "calendar",
          svgIcon: calendarIcon,
          title: provideLocalizationService(this).toLanguageString(toggleCalendar, messages[toggleCalendar]),
          "aria-label": provideLocalizationService(this).toLanguageString(toggleCalendar, messages[toggleCalendar]),
          rounded: null
        },
        tabIndex: -1,
        icon: "calendar",
        svgIcon: calendarIcon,
        onMousedown: this.handleIconMouseDown,
        on: this.v3 ? void 0 : {
          "mousedown": this.handleIconMouseDown,
          "click": this.handleIconClick
        },
        onClick: this.handleIconClick,
        title: provideLocalizationService(this).toLanguageString(toggleCalendar, messages[toggleCalendar]),
        "aria-label": provideLocalizationService(this).toLanguageString(toggleCalendar, messages[toggleCalendar]),
        rounded: null,
        "class": "k-input-button"
      })
    );
    var toggleButtonRendering = getTemplate.call(this, {
      h,
      template: toggleButton,
      defaultRendering: toggleButtonDefaultRendering,
      defaultSlots: h(Icon, {
        name: "calendar",
        attrs: this.v3 ? void 0 : {
          name: "calendar",
          icon: calendarIcon
        },
        icon: calendarIcon
      }),
      additionalListeners: {
        click: this.handleIconClick
      }
    });
    var dateInput = this.$props.dateInput ? templateRendering.call(this, this.$props.dateInput, getListeners.call(this)) : void 0;
    var dateInputDefaultRendering = (
      // @ts-ignore
      h(DateInput, {
        ref: setRef(this, "dateInput"),
        placeholder: this.$props.placeholder,
        attrs: this.v3 ? void 0 : {
          placeholder: this.$props.placeholder,
          disabled,
          format,
          formatPlaceholder,
          id,
          max,
          min,
          name,
          size: null,
          rounded: null,
          fillMode: null,
          required,
          tabIndex: !show4 ? tabIndex : -1,
          title,
          valid: this.validity().valid,
          validationMessage,
          validityStyles,
          value: value2,
          ariaHasPopup: "grid",
          ariaExpanded: show4,
          ariaRole: "combobox",
          ariaControls: this._popupId,
          ariaLabel
        },
        disabled,
        format,
        formatPlaceholder,
        id,
        max,
        min,
        name,
        size: null,
        rounded: null,
        fillMode: null,
        onChange: this.handleInputValueChange,
        on: this.v3 ? void 0 : {
          "change": this.handleInputValueChange
        },
        required,
        tabIndex: !show4 ? tabIndex : -1,
        title,
        valid: this.validity().valid,
        validationMessage,
        validityStyles,
        value: value2,
        ariaHasPopup: "grid",
        ariaExpanded: show4,
        ariaRole: "combobox",
        ariaControls: this._popupId,
        ariaLabel
      })
    );
    var dateInputRendering = getTemplate.call(this, {
      h,
      template: dateInput,
      defaultRendering: dateInputDefaultRendering
    });
    var calendar = this.$props.calendar ? templateRendering.call(this, this.$props.calendar, getListeners.call(this)) : void 0;
    var calendarDefaultRendering = (
      // @ts-ignore
      h(Calendar, {
        ref: setRef(this, "calendar"),
        onKeydown: this.handleKeyDown,
        on: this.v3 ? void 0 : {
          "keydown": this.handleKeyDown,
          "focus": this.calendarFocus,
          "blur": this.calendarBlur,
          "change": this.handleCalendarValueChange
        },
        onFocus: this.calendarFocus,
        onBlur: this.calendarBlur,
        disabled,
        attrs: this.v3 ? void 0 : {
          disabled,
          value: sanitizedValue,
          min,
          max,
          weekNumber,
          focusedDate: focusedDate2
        },
        value: sanitizedValue,
        min,
        max,
        weekNumber,
        focusedDate: focusedDate2,
        onChange: this.handleCalendarValueChange
      })
    );
    var calendarRendering = getTemplate.call(this, {
      h,
      template: calendar,
      defaultRendering: calendarDefaultRendering
    });
    var popup = this.$props.popup ? templateRendering.call(this, this.$props.popup, getListeners.call(this)) : void 0;
    var popupDefaultRendering = (
      // @ts-ignore function children
      h(Popup, {
        show: show4,
        attrs: this.v3 ? void 0 : {
          show: show4,
          anchor: this._anchor,
          id: this._popupId,
          anchorAlign: {
            horizontal: "left",
            vertical: "bottom"
          },
          popupAlign: {
            horizontal: "left",
            vertical: "top"
          },
          animate: animate2,
          appendTo
        },
        anchor: this._anchor,
        "class": popupClassNames,
        id: this._popupId,
        anchorAlign: {
          horizontal: "left",
          vertical: "bottom"
        },
        popupAlign: {
          horizontal: "left",
          vertical: "top"
        },
        animate: animate2,
        appendTo
      }, this.v3 ? function() {
        return [calendarRendering];
      } : [calendarRendering])
    );
    var popupRendering = getTemplate.call(this, {
      h,
      template: popup,
      defaultRendering: popupDefaultRendering,
      defaultSlots: calendarRendering
    });
    var datepicker = h("span", {
      ref: setRef(this, "kendoAnchor", this._anchor),
      role: "group",
      attrs: this.v3 ? void 0 : {
        role: "group"
      },
      "class": classNames("k-input", "k-datepicker", (_a9 = {}, _a9["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a9["k-input-".concat(fillMode)] = fillMode, _a9["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a9["k-invalid"] = !isValid, _a9["k-required"] = this.required, _a9["k-disabled"] = this.$props.disabled, _a9["k-focus"] = this.$data.isFocused, _a9)),
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur
    }, [dateInputRendering, toggleButtonRendering, popupRendering]);
    return this.$props.label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label: this.$props.label,
        attrs: this.v3 ? void 0 : {
          label: this.$props.label,
          editorId: id,
          editorValid: isValid,
          editorValue: this.getDateInputText(),
          editorPlaceholder: this.$props.placeholder,
          editorDisabled: this.$props.disabled
        },
        editorId: id,
        editorValid: isValid,
        editorValue: this.getDateInputText(),
        editorPlaceholder: this.$props.placeholder,
        editorDisabled: this.$props.disabled,
        style: {
          width
        }
      }, this.v3 ? function() {
        return [datepicker];
      } : [datepicker])
    ) : datepicker;
  }
};
var DatePicker = DatePickerVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/virtualization/services/RowHeightService.js
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var update = function(arr, idx, value2) {
  return __spreadArray(__spreadArray([], arr.slice(0, idx + 1), true), arr.slice(idx + 1).map(function(x) {
    return x + value2;
  }), true);
};
var RowHeightService = (
  /** @class */
  function() {
    function RowHeightService2(total, rowHeight, detailRowHeight) {
      if (total === void 0) {
        total = 0;
      }
      this.total = total;
      this.rowHeight = rowHeight;
      this.detailRowHeight = detailRowHeight;
      this.offsets = [];
      this.heights = [];
      var agg = 0;
      for (var idx = 0; idx < total; idx++) {
        this.offsets.push(agg);
        agg += rowHeight;
        this.heights.push(rowHeight);
      }
    }
    RowHeightService2.prototype.height = function(rowIndex) {
      return this.heights[rowIndex];
    };
    RowHeightService2.prototype.expandDetail = function(rowIndex) {
      if (this.height(rowIndex) === this.rowHeight) {
        this.updateRowHeight(rowIndex, this.detailRowHeight);
      }
    };
    RowHeightService2.prototype.collapseDetail = function(rowIndex) {
      if (this.height(rowIndex) > this.rowHeight) {
        this.updateRowHeight(rowIndex, this.detailRowHeight * -1);
      }
    };
    RowHeightService2.prototype.index = function(position) {
      for (var i = 0; i < this.offsets.length; i++) {
        if (position === this.offsets[i]) {
          return i;
        }
        if (position < this.offsets[i]) {
          return i - 1;
        }
      }
      return this.total - 1;
    };
    RowHeightService2.prototype.offset = function(rowIndex) {
      return this.offsets[rowIndex];
    };
    RowHeightService2.prototype.totalHeight = function() {
      return this.heights.reduce(function(prev, curr) {
        return prev + curr;
      }, 0);
    };
    RowHeightService2.prototype.updateRowHeight = function(rowIndex, value2) {
      this.heights[rowIndex] += value2;
      this.offsets = update(this.offsets, rowIndex, value2);
    };
    return RowHeightService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/virtualization/services/ScrollerService.js
var normalize2 = function(x) {
  return Math.max(x, 0);
};
var ScrollAction = (
  /** @class */
  function() {
    function ScrollAction2(offset2) {
      this.offset = offset2;
    }
    return ScrollAction2;
  }()
);
var PageAction = (
  /** @class */
  function() {
    function PageAction2(skip) {
      this.skip = skip;
    }
    return PageAction2;
  }()
);
var ScrollerService = (
  /** @class */
  function() {
    function ScrollerService2(onScrollAction, onPageAction) {
      this.onScrollAction = onScrollAction;
      this.onPageAction = onPageAction;
      this.firstLoaded = 0;
      this.bottomOffset = 0;
      this.topOffset = 0;
    }
    ScrollerService2.prototype.create = function(rowHeightService, skip, take, total, topOffset, bottomOffset, direction) {
      if (topOffset === void 0) {
        topOffset = 0;
      }
      if (bottomOffset === void 0) {
        bottomOffset = 0;
      }
      if (direction === void 0) {
        direction = "vertical";
      }
      this.rowHeightService = rowHeightService;
      this.firstLoaded = skip;
      this.lastLoaded = skip + take;
      this.take = take;
      this.total = total;
      this.lastScrollTop = 0;
      this.topOffset = topOffset;
      this.bottomOffset = bottomOffset;
      this.direction = direction;
      var offsetBufferRows = this.rowsForHeight(topOffset);
      var skipWithOffset = normalize2(skip - offsetBufferRows);
      this.onScrollAction(new ScrollAction(this.rowOffset(skipWithOffset)));
      this.onPageAction(new PageAction(skipWithOffset));
    };
    ScrollerService2.prototype.onScroll = function(_a9) {
      var scrollLeft = _a9.scrollLeft, scrollTop = _a9.scrollTop, offsetHeight = _a9.offsetHeight, offsetWidth = _a9.offsetWidth;
      var scrollPosition = this.direction === "vertical" ? scrollTop : scrollLeft;
      var offsetSize = this.direction === "vertical" ? offsetHeight : offsetWidth;
      if (this.lastScrollTop === scrollPosition) {
        return;
      }
      var up = this.lastScrollTop >= scrollPosition;
      this.lastScrollTop = scrollPosition;
      var firstItemIndex = this.rowHeightService.index(normalize2(scrollPosition - this.topOffset));
      var lastItemIndex = this.rowHeightService.index(normalize2(scrollPosition + offsetSize - this.bottomOffset));
      if (!up && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {
        this.firstLoaded = firstItemIndex;
        this.onScrollAction(new ScrollAction(this.rowOffset(firstItemIndex)));
        this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);
        this.onPageAction(new PageAction(this.firstLoaded));
      }
      if (up && firstItemIndex <= this.firstLoaded) {
        var nonVisibleBuffer = Math.floor(this.take * 0.3);
        this.firstLoaded = normalize2(firstItemIndex - nonVisibleBuffer);
        this.onScrollAction(new ScrollAction(this.rowOffset(this.firstLoaded)));
        this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);
        this.onPageAction(new PageAction(this.firstLoaded));
      }
    };
    ScrollerService2.prototype.rowOffset = function(index) {
      return this.rowHeightService.offset(index) + this.topOffset;
    };
    ScrollerService2.prototype.rowsForHeight = function(height) {
      return Math.ceil(height / this.rowHeightService.height(0));
    };
    return ScrollerService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/virtualization/Virtualization.js
var _a7;
var _b;
var _c;
var allVue15 = vue_runtime_esm_bundler_exports;
var gh14 = allVue15.h;
var isV315 = allVue15.version && allVue15.version[0] === "3";
var ScrollDirection;
(function(ScrollDirection2) {
  ScrollDirection2[ScrollDirection2["Backward"] = 0] = "Backward";
  ScrollDirection2[ScrollDirection2["Forward"] = 1] = "Forward";
})(ScrollDirection || (ScrollDirection = {}));
var differenceToScroll = function differenceToScroll2(scrollTop, staticOffset, maxScrollDifference) {
  return Math.min(Math.abs(staticOffset - scrollTop), maxScrollDifference);
};
var FRAME_DURATION = 17;
var scrollModifiers = (_a7 = {}, _a7[ScrollDirection.Forward] = function(step) {
  return function(value2) {
    return value2 + step;
  };
}, _a7[ScrollDirection.Backward] = function(step) {
  return function(value2) {
    return value2 - step;
  };
}, _a7);
var scrollNormalizers = (_b = {}, _b[ScrollDirection.Forward] = function(end2) {
  return function(value2) {
    return Math.min(value2, end2);
  };
}, _b[ScrollDirection.Backward] = function(end2) {
  return function(value2) {
    return Math.max(value2, end2);
  };
}, _b);
var scrollValidators = (_c = {}, _c[ScrollDirection.Forward] = function(end2) {
  return function(start2) {
    return start2 < end2;
  };
}, _c[ScrollDirection.Backward] = function(end2) {
  return function(start2) {
    return start2 > end2;
  };
}, _c);
var VirtualizationVue2 = {
  name: "Virtualization",
  // @ts-ignore
  emits: {
    scroll: null,
    scrollaction: null
  },
  props: {
    bottomOffset: {
      type: Number,
      required: true
    },
    direction: {
      type: String,
      default: function _default23() {
        return "vertical";
      }
    },
    forceScroll: {
      type: Boolean,
      default: false
    },
    itemHeight: Number,
    itemWidth: Number,
    maxScrollDifference: {
      type: Number,
      default: 100
    },
    scrollDuration: {
      type: Number,
      default: 100
    },
    scrollOffsetSize: {
      type: Number,
      default: 0
    },
    skip: {
      type: Number,
      required: true
    },
    tabIndex: Number,
    take: {
      type: Number,
      required: true
    },
    topOffset: {
      type: Number,
      required: true
    },
    total: {
      type: Number,
      required: true
    },
    role: String
  },
  created: function created6() {
    this.animationInProgress = false;
    this.lastTotal = void 0;
    this.scrollerService = new ScrollerService(this.handleScrollAction, this.handlePageAction);
  },
  mounted: function mounted7() {
    this.scrollContainer = this.$refs.scrollContainer;
  },
  computed: {
    element: function element3() {
      return this.scrollContainer;
    }
  },
  methods: {
    containerOffsetSize: function containerOffsetSize() {
      return this.getContainerProperty(this.$props.direction === "vertical" ? "offsetHeight" : "offsetWidth");
    },
    containerScrollSize: function containerScrollSize() {
      return this.getContainerProperty(this.$props.direction === "vertical" ? "scrollHeight" : "scrollWidth");
    },
    containerScrollPosition: function containerScrollPosition() {
      return this.getContainerProperty(this.$props.direction === "vertical" ? "scrollTop" : "scrollLeft");
    },
    activeIndex: function activeIndex() {
      return this.itemIndex(Math.ceil(this.containerScrollPosition()));
    },
    itemIndex: function itemIndex(offset2) {
      if (!this.rowHeightService) {
        return 0;
      }
      return this.rowHeightService.index(offset2);
    },
    itemOffset: function itemOffset(index) {
      if (!this.rowHeightService) {
        return 0;
      }
      return this.rowHeightService.offset(index);
    },
    isIndexVisible: function isIndexVisible(index) {
      if (!this.rowHeightService) {
        return false;
      }
      var containerTop = this.containerScrollPosition();
      var containerBottom = containerTop + this.containerOffsetSize();
      var top = this.rowHeightService.offset(index);
      var bottom = top + this.rowHeightService.height(index);
      return top >= containerTop && bottom <= containerBottom;
    },
    isListScrolled: function isListScrolled(index) {
      if (!this.rowHeightService) {
        return false;
      }
      return this.containerScrollPosition() !== this.rowHeightService.offset(index);
    },
    scrollTo: function scrollTo(value2) {
      var scrollProperty = this.$props.direction === "vertical" ? "scrollTop" : "scrollLeft";
      if (!this.scrollContainer) {
        return;
      }
      this.scrollContainer[scrollProperty] = value2;
    },
    scrollToIndex: function scrollToIndex(index) {
      if (!this.rowHeightService) {
        return;
      }
      this.animationInProgress = false;
      this.scrollTo(this.rowHeightService.offset(index));
    },
    animateToIndex: function animateToIndex(index) {
      var _this = this;
      if (!this.rowHeightService || !window) {
        return;
      }
      window.cancelAnimationFrame(this.cancelAnimation);
      var indexOffset = this.rowHeightService.offset(index);
      var direction = this.getContainerScrollDirection(indexOffset);
      var _a9 = this.scrollRange(indexOffset, direction), start2 = _a9.start, end2 = _a9.end;
      if (start2 === end2) {
        return;
      }
      var step = this.scrollStep(start2, end2);
      var modifyScroll = scrollModifiers[direction](step);
      var normalizeScroll = scrollNormalizers[direction](end2);
      var isScrollValid = scrollValidators[direction](modifyScroll(end2));
      var animate2 = function animate3(progress) {
        _this.animationInProgress = true;
        var next = modifyScroll(progress);
        _this.scrollTo(normalizeScroll(next));
        isScrollValid(next) ? _this.cancelAnimation = window.requestAnimationFrame(function() {
          animate3(next);
        }) : _this.animationInProgress = false;
      };
      this.cancelAnimation = window.requestAnimationFrame(function() {
        animate2(start2);
      });
    },
    scrollToBottom: function scrollToBottom() {
      if (!this.rowHeightService) {
        return;
      }
      this.scrollTo(this.rowHeightService.totalHeight() + this.$props.bottomOffset);
    },
    scrollStep: function scrollStep(start2, end2) {
      var duration = this.$props.scrollDuration;
      return Math.abs(end2 - start2) / (duration / FRAME_DURATION);
    },
    scrollRange: function scrollRange(indexOffset, direction) {
      var containerScroll = this.containerScrollPosition();
      if (parseInt("".concat(indexOffset), 10) === parseInt("".concat(containerScroll), 10)) {
        return {
          start: indexOffset,
          end: indexOffset
        };
      }
      var maxScroll = this.containerMaxScroll();
      var sign = direction === ScrollDirection.Backward ? 1 : -1;
      var difference = differenceToScroll(containerScroll, indexOffset, this.$props.maxScrollDifference);
      var end2 = Math.min(indexOffset, maxScroll);
      var start2 = Math.min(Math.max(end2 + sign * difference, 0), maxScroll);
      return {
        start: start2,
        end: end2
      };
    },
    containerMaxScroll: function containerMaxScroll() {
      return this.containerScrollSize() - this.containerOffsetSize();
    },
    getContainerScrollDirection: function getContainerScrollDirection(indexOffset) {
      return indexOffset < this.containerScrollPosition() ? ScrollDirection.Backward : ScrollDirection.Forward;
    },
    initServices: function initServices(newProps) {
      var props = newProps || this.$props;
      var dimension = props.direction === "vertical" ? props.itemHeight : props.itemWidth;
      if (dimension === void 0) {
        return;
      }
      this.rowHeightService = new RowHeightService(props.total, dimension, 0);
      this.scrollerService.create(this.rowHeightService, props.skip, props.take, props.total, props.topOffset, this.$props.scrollOffsetSize, this.$props.direction);
    },
    getContainerProperty: function getContainerProperty(propertyName) {
      if (!this.scrollContainer) {
        return 0;
      }
      return this.scrollContainer[propertyName];
    },
    handleScroll: function handleScroll(event2) {
      if (!this.scrollContainer || !this.rowHeightService) {
        return;
      }
      var target = event2.target;
      this.scrollerService.onScroll({
        scrollLeft: target.scrollLeft,
        scrollTop: target.scrollTop,
        offsetHeight: target.offsetHeight,
        offsetWidth: target.offsetWidth
      });
      var index = this.rowHeightService.index(this.containerScrollPosition() - this.$props.topOffset);
      var args = {
        index,
        target,
        scrollAction: this.scrollAction,
        pageAction: this.pageAction,
        animationInProgress: this.animationInProgress
      };
      this.$emit("scrollaction", args);
      this.scrollAction = void 0;
      this.pageAction = void 0;
    },
    handleScrollAction: function handleScrollAction2(action) {
      this.scrollAction = action;
    },
    handlePageAction: function handlePageAction(action) {
      this.pageAction = action;
    }
  },
  // @ts-ignore
  setup: !isV315 ? void 0 : function() {
    var v3 = !!isV315;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render14(createElement) {
    var h = gh14 || createElement;
    var defaultSlot = getDefaultSlots(this);
    if (this.lastTotal !== this.$props.total || this.lastDirection !== this.$props.direction || this.lastTake !== this.$props.take) {
      this.initServices();
      this.lastTotal = this.$props.total;
      this.lastDirection = this.$props.direction;
      this.lastTake = this.$props.take;
    }
    var vertexLength = "".concat((this.rowHeightService ? this.rowHeightService.totalHeight() : 0) + this.$props.bottomOffset);
    var placeholderStyle = this.$props.direction === "vertical" ? {
      height: "".concat(vertexLength, "px")
    } : {
      width: "".concat(vertexLength, "px")
    };
    var rootClassNames = classNames("k-content k-scrollable", {
      "k-scrollable-horizontal": this.$props.direction === "horizontal"
    });
    var scrollableClassNames = classNames("k-scrollable-placeholder", {
      "k-scrollable-horizontal-placeholder": this.$props.direction === "horizontal"
    });
    return h("div", {
      ref: "scrollContainer",
      onScroll: this.handleScroll,
      on: this.v3 ? void 0 : {
        "scroll": this.handleScroll
      },
      "class": rootClassNames,
      tabindex: this.$props.tabIndex,
      attrs: this.v3 ? void 0 : {
        tabindex: this.$props.tabIndex,
        role: this.$props.role
      },
      role: this.$props.role
    }, [defaultSlot, h("div", {
      style: placeholderStyle,
      "class": scrollableClassNames
    })]);
  }
};
var Virtualization = VirtualizationVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/DayPeriodService.js
var setHours2 = function(date2, hours) {
  var clone2 = cloneDate2(date2);
  clone2.setHours(hours);
  return clone2;
};
var isAM = function(value2) {
  return value2 !== null && value2 < 12;
};
var isPM = function(value2) {
  return value2 !== null && (!value2 || value2 > 11);
};
var inRange = function(value2, min, max) {
  return !min && !max || value2 >= min && value2 <= max;
};
var inReverseRange = function(value2, min, max) {
  return !min && !max || value2 >= min || value2 <= max;
};
var DayPeriodService = (
  /** @class */
  function() {
    function DayPeriodService2(intl4) {
      this.intl = intl4;
    }
    DayPeriodService2.prototype.apply = function(value2, candidate) {
      var hour = value2.getHours();
      var hourAM = isAM(hour);
      var candidateAM = isAM(candidate.getHours());
      if (hourAM && candidateAM || !hourAM && !candidateAM) {
        return value2;
      }
      var _a9 = this.normalizedRange(), min = _a9[0], _b3 = _a9[1], max = _b3 === void 0 ? 24 : _b3;
      var result = hour + (candidateAM ? -12 : 12);
      return setHours2(value2, Math.min(Math.max(min, result), max || 24));
    };
    DayPeriodService2.prototype.configure = function(settings) {
      var _a9 = settings.min, min = _a9 === void 0 ? this.min : _a9, _b3 = settings.max, max = _b3 === void 0 ? this.max : _b3, _c2 = settings.part, part = _c2 === void 0 ? this.part : _c2;
      this.min = min;
      this.max = max;
      this.part = part;
    };
    DayPeriodService2.prototype.data = function(_) {
      var names = this.part.names;
      if (!names) {
        return [];
      }
      var data13 = [];
      var _a9 = this.normalizedRange(), min = _a9[0], max = _a9[1];
      var dayPeriod = this.intl.dateFormatNames(names);
      if (isAM(min)) {
        data13.push({ text: dayPeriod.am, value: setHours2(this.min, min) });
      }
      if (isPM(max)) {
        data13.push({ text: dayPeriod.pm, value: setHours2(this.min, Math.max(12, max)) });
      }
      return this.min.getHours() !== min ? data13.reverse() : data13;
    };
    DayPeriodService2.prototype.isRangeChanged = function(_, __) {
      return false;
    };
    DayPeriodService2.prototype.limitRange = function(min, max, _) {
      return [min, max];
    };
    DayPeriodService2.prototype.total = function() {
      var _a9 = this.normalizedRange(), min = _a9[0], max = _a9[1];
      if (!min && !max) {
        return 2;
      }
      if (min > 11 || max < 12) {
        return 1;
      }
      return 2;
    };
    DayPeriodService2.prototype.selectedIndex = function(value2) {
      if (!this.valueInList(value2)) {
        return -1;
      }
      var index = Math.floor(value2.getHours() / 12);
      return this.min.getHours() === this.normalizedRange()[0] ? index : index === 0 ? 1 : 0;
    };
    DayPeriodService2.prototype.valueInList = function(value2) {
      var reverse = this.min.getHours() !== this.normalizedRange()[0];
      var isInRange4 = reverse ? inReverseRange : inRange;
      return isInRange4(value2.getHours(), this.min.getHours(), this.max.getHours());
    };
    DayPeriodService2.prototype.normalizedRange = function() {
      var minHour = this.min.getHours();
      var maxHour = this.max.getHours();
      return [
        Math.min(minHour, maxHour),
        Math.max(minHour, maxHour)
      ];
    };
    return DayPeriodService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/DOMService.js
var DOMService2 = (
  /** @class */
  function() {
    function DOMService3() {
      this.didCalculate = false;
    }
    DOMService3.prototype.ensureHeights = function() {
      if (this.timeListHeight !== void 0) {
        return;
      }
      this.calculateHeights();
    };
    DOMService3.prototype.calculateHeights = function(container) {
      if (!canUseDOM) {
        return;
      }
      var div = domContainerFactory("div");
      var ul = domContainerFactory("ul");
      var li = domContainerFactory("li");
      var listItem = function() {
        return li("<span>02</span>", "k-item");
      };
      var list = function() {
        return ul([listItem()], "k-reset");
      };
      var scrollable = function() {
        return div([list()], "k-time-container k-content k-scrollable");
      };
      var timeListWrapper = function() {
        return div([div([scrollable()], "k-time-list")], "k-time-list-wrapper", { left: "-10000px", position: "absolute" });
      };
      var timeWrapper = timeListWrapper();
      var listContainer = container && container.querySelector(".k-time-container");
      var hostContainer = listContainer || document.body;
      var wrapper = hostContainer.appendChild(timeWrapper);
      this.timeListHeight = listContainer.offsetHeight;
      this.itemHeight = wrapper.querySelector("li").offsetHeight;
      hostContainer.removeChild(wrapper);
      this.didCalculate = true;
    };
    return DOMService3;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/HoursService.js
var HOURS_IN_DAY = 24;
var clampToRange = function(rangeValue) {
  return function(value2) {
    return value2 % rangeValue;
  };
};
var clamp = clampToRange(HOURS_IN_DAY);
var stepper = function(start2, step) {
  return function(idx) {
    return clamp(start2 + idx * step);
  };
};
var distanceFromMin = function(value2, min) {
  return clamp(HOURS_IN_DAY + value2 - min);
};
var limit = function(borderValue) {
  return function(barrier, value2) {
    var useBarrier = !value2 || getDate(barrier).getTime() === getDate(value2).getTime();
    return useBarrier ? barrier : setHours(barrier, borderValue);
  };
};
var limitDown = limit(0);
var limitUp = limit(HOURS_IN_DAY - 1);
var HoursService = (
  /** @class */
  function() {
    function HoursService2(intl4) {
      this.intl = intl4;
      this.boundRange = false;
      this.insertUndividedMax = false;
    }
    HoursService2.prototype.apply = function(value2, candidate) {
      return setHours(value2, candidate.getHours());
    };
    HoursService2.prototype.configure = function(settings) {
      var _this = this;
      var _a9 = settings.boundRange, boundRange = _a9 === void 0 ? this.boundRange : _a9, _b3 = settings.insertUndividedMax, insertUndividedMax = _b3 === void 0 ? this.insertUndividedMax : _b3, _c2 = settings.min, min = _c2 === void 0 ? this.min : _c2, _d = settings.max, max = _d === void 0 ? this.max : _d, part = settings.part, _e = settings.step, step = _e === void 0 ? this.step : _e;
      this.boundRange = boundRange;
      this.insertUndividedMax = insertUndividedMax;
      this.toListItem = function(hour) {
        var date2 = setHours(MIDNIGHT_DATE, hour);
        return {
          text: _this.intl.formatDate(date2, part.pattern),
          value: date2
        };
      };
      this.min = min;
      this.max = max;
      this.step = step;
    };
    HoursService2.prototype.data = function(selectedValue) {
      var _this = this;
      var min = this.range(selectedValue)[0];
      var getHour = stepper(min, this.step);
      var convertToItem = function(idx) {
        return _this.toListItem(getHour(idx));
      };
      var data13 = range2(0, this.countFromMin(selectedValue)).map(convertToItem);
      this.addLast(data13);
      if (selectedValue) {
        this.addMissing(data13, selectedValue);
      }
      return data13;
    };
    HoursService2.prototype.isRangeChanged = function(min, max) {
      return !isEqual(this.min, min) || !isEqual(this.max, max);
    };
    HoursService2.prototype.limitRange = function(min, max, value2) {
      return this.boundRange ? [limitDown(min, value2), limitUp(max, value2)] : [min, max];
    };
    HoursService2.prototype.total = function(value2) {
      var last = this.insertUndividedMax && this.isLastMissing(value2) ? 1 : 0;
      var missing = this.isMissing(value2) ? 1 : 0;
      return this.countFromMin(value2) + missing + last;
    };
    HoursService2.prototype.selectedIndex = function(value2) {
      return Math.ceil(this.divideByStep(value2));
    };
    HoursService2.prototype.valueInList = function(value2) {
      if (!value2) {
        return true;
      }
      var matchMax = this.insertUndividedMax && this.lastHour(value2) === value2.getHours();
      return matchMax || !this.isMissing(value2);
    };
    HoursService2.prototype.addLast = function(data13, value2) {
      if (this.insertUndividedMax && this.isLastMissing(value2)) {
        data13.push(this.toListItem(this.lastHour(value2)));
      }
      return data13;
    };
    HoursService2.prototype.addMissing = function(data13, value2) {
      if (this.valueInList(value2)) {
        return data13;
      }
      var missingItem = this.toListItem(value2.getHours());
      data13.splice(this.selectedIndex(value2), 0, missingItem);
      return data13;
    };
    HoursService2.prototype.countFromMin = function(value2) {
      var _a9 = this.range(value2), min = _a9[0], max = _a9[1];
      return Math.floor(distanceFromMin(max, min) / this.step) + 1;
    };
    HoursService2.prototype.isMissing = function(value2) {
      if (!value2) {
        return false;
      }
      return this.selectedIndex(value2) !== this.divideByStep(value2);
    };
    HoursService2.prototype.isLastMissing = function(value2) {
      return this.isMissing(setHours(this.max, this.lastHour(value2)));
    };
    HoursService2.prototype.divideByStep = function(value2) {
      return distanceFromMin(value2.getHours(), this.min.getHours()) / this.step;
    };
    HoursService2.prototype.lastHour = function(value2) {
      return this.range(value2)[1];
    };
    HoursService2.prototype.range = function(value2) {
      var _a9 = this.limitRange(this.min, this.max, value2), min = _a9[0], max = _a9[1];
      return [min.getHours(), max.getHours()];
    };
    return HoursService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/MinutesService.js
var MINUTES_IN_HOUR = 60;
var clampToRange2 = function(rangeValue) {
  return function(value2) {
    return value2 % rangeValue;
  };
};
var clamp2 = clampToRange2(MINUTES_IN_HOUR);
var stepper2 = function(start2, step) {
  return function(idx) {
    return clamp2(start2 + idx * step);
  };
};
var distanceFromMin2 = function(value2, min) {
  return clamp2(MINUTES_IN_HOUR + value2 - min);
};
var limit2 = function(borderValue) {
  return function(barrier, value2) {
    var useBarrier = !value2 || barrier.getHours() === value2.getHours();
    return useBarrier ? barrier : setMinutes(barrier, borderValue);
  };
};
var limitDown2 = limit2(0);
var limitUp2 = limit2(MINUTES_IN_HOUR - 1);
var MinutesService = (
  /** @class */
  function() {
    function MinutesService2(intl4) {
      this.intl = intl4;
      this.insertUndividedMax = false;
    }
    MinutesService2.prototype.apply = function(value2, candidate) {
      return setMinutes(value2, candidate.getMinutes());
    };
    MinutesService2.prototype.configure = function(settings) {
      var _this = this;
      var _a9 = settings.insertUndividedMax, insertUndividedMax = _a9 === void 0 ? this.insertUndividedMax : _a9, _b3 = settings.min, min = _b3 === void 0 ? this.min : _b3, _c2 = settings.max, max = _c2 === void 0 ? this.max : _c2, part = settings.part, _d = settings.step, step = _d === void 0 ? this.step : _d;
      this.insertUndividedMax = insertUndividedMax;
      this.toListItem = function(minute) {
        var date2 = setMinutes(MIDNIGHT_DATE, minute);
        return {
          text: _this.intl.formatDate(date2, part.pattern),
          value: date2
        };
      };
      this.min = min;
      this.max = max;
      this.step = step;
    };
    MinutesService2.prototype.data = function(selectedValue) {
      var _this = this;
      var min = this.range(selectedValue)[0];
      var getMinute = stepper2(min, this.step);
      var convertToItem = function(idx) {
        return _this.toListItem(getMinute(idx));
      };
      var data13 = range2(0, this.countFromMin(selectedValue)).map(convertToItem);
      this.addLast(data13);
      if (selectedValue) {
        this.addMissing(data13, selectedValue);
      }
      return data13;
    };
    MinutesService2.prototype.isRangeChanged = function(min, max) {
      return !isEqual(this.min, min) || !isEqual(this.max, max);
    };
    MinutesService2.prototype.limitRange = function(min, max, value2) {
      return [limitDown2(min, value2), limitUp2(max, value2)];
    };
    MinutesService2.prototype.total = function(value2) {
      var last = this.insertUndividedMax && this.isLastMissing(value2) ? 1 : 0;
      var missing = this.isMissing(value2) ? 1 : 0;
      return this.countFromMin(value2) + missing + last;
    };
    MinutesService2.prototype.selectedIndex = function(value2) {
      return Math.ceil(this.divideByStep(value2));
    };
    MinutesService2.prototype.valueInList = function(value2) {
      if (!value2) {
        return true;
      }
      var matchMax = this.insertUndividedMax && this.lastMinute(value2) === value2.getMinutes();
      return matchMax || !this.isMissing(value2);
    };
    MinutesService2.prototype.addLast = function(data13, value2) {
      if (this.insertUndividedMax && this.isLastMissing(value2)) {
        data13.push(this.toListItem(this.lastMinute(value2)));
      }
      return data13;
    };
    MinutesService2.prototype.addMissing = function(data13, value2) {
      if (this.valueInList(value2)) {
        return data13;
      }
      var missingItem = this.toListItem(value2.getMinutes());
      data13.splice(this.selectedIndex(value2), 0, missingItem);
      return data13;
    };
    MinutesService2.prototype.countFromMin = function(value2) {
      var _a9 = this.range(value2), min = _a9[0], max = _a9[1];
      return Math.floor(distanceFromMin2(max, min) / this.step) + 1;
    };
    MinutesService2.prototype.isMissing = function(value2) {
      if (!value2) {
        return false;
      }
      return this.selectedIndex(value2) !== this.divideByStep(value2);
    };
    MinutesService2.prototype.isLastMissing = function(value2) {
      return this.isMissing(setMinutes(this.max, this.lastMinute(value2)));
    };
    MinutesService2.prototype.divideByStep = function(value2) {
      return distanceFromMin2(value2.getMinutes(), this.min.getMinutes()) / this.step;
    };
    MinutesService2.prototype.lastMinute = function(value2) {
      return this.range(value2)[1];
    };
    MinutesService2.prototype.range = function(value2) {
      var _a9 = this.limitRange(this.min, this.max, value2), min = _a9[0], max = _a9[1];
      return [min.getMinutes(), max.getMinutes()];
    };
    return MinutesService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/SecondsService.js
var SECONDS_IN_HOUR = 60;
var clampToRange3 = function(rangeValue) {
  return function(value2) {
    return value2 % rangeValue;
  };
};
var clamp3 = clampToRange3(SECONDS_IN_HOUR);
var stepper3 = function(start2, step) {
  return function(idx) {
    return clamp3(start2 + idx * step);
  };
};
var distanceFromMin3 = function(value2, min) {
  return clamp3(SECONDS_IN_HOUR + value2 - min);
};
var limit3 = function(borderValue) {
  return function(barrier, value2) {
    var useBarrier = !value2 || barrier.getMinutes() === value2.getMinutes() && barrier.getHours() === value2.getHours();
    return useBarrier ? barrier : setSeconds(barrier, borderValue);
  };
};
var limitDown3 = limit3(0);
var limitUp3 = limit3(SECONDS_IN_HOUR - 1);
var SecondsService = (
  /** @class */
  function() {
    function SecondsService2(intl4) {
      this.intl = intl4;
      this.insertUndividedMax = false;
    }
    SecondsService2.prototype.apply = function(value2, candidate) {
      return setSeconds(value2, candidate.getSeconds());
    };
    SecondsService2.prototype.configure = function(settings) {
      var _this = this;
      var _a9 = settings.insertUndividedMax, insertUndividedMax = _a9 === void 0 ? this.insertUndividedMax : _a9, _b3 = settings.min, min = _b3 === void 0 ? this.min : _b3, _c2 = settings.max, max = _c2 === void 0 ? this.max : _c2, part = settings.part, _d = settings.step, step = _d === void 0 ? this.step : _d;
      this.insertUndividedMax = insertUndividedMax;
      this.toListItem = function(minute) {
        var date2 = setSeconds(MIDNIGHT_DATE, minute);
        return {
          text: _this.intl.formatDate(date2, part.pattern),
          value: date2
        };
      };
      this.min = min;
      this.max = max;
      this.step = step;
    };
    SecondsService2.prototype.data = function(selectedValue) {
      var _this = this;
      var min = this.range(selectedValue)[0];
      var getSecond = stepper3(min, this.step);
      var convertToItem = function(idx) {
        return _this.toListItem(getSecond(idx));
      };
      var data13 = range2(0, this.countFromMin(selectedValue)).map(convertToItem);
      this.addLast(data13);
      if (selectedValue) {
        this.addMissing(data13, selectedValue);
      }
      return data13;
    };
    SecondsService2.prototype.isRangeChanged = function(min, max) {
      return !isEqual(this.min, min) || !isEqual(this.max, max);
    };
    SecondsService2.prototype.limitRange = function(min, max, value2) {
      return [limitDown3(min, value2), limitUp3(max, value2)];
    };
    SecondsService2.prototype.total = function(value2) {
      var last = this.insertUndividedMax && this.isLastMissing(value2) ? 1 : 0;
      var missing = this.isMissing(value2) ? 1 : 0;
      return this.countFromMin(value2) + missing + last;
    };
    SecondsService2.prototype.selectedIndex = function(value2) {
      return Math.ceil(this.divideByStep(value2));
    };
    SecondsService2.prototype.valueInList = function(value2) {
      if (!value2) {
        return true;
      }
      var matchMax = this.insertUndividedMax && this.lastSecond(value2) === value2.getSeconds();
      return matchMax || !this.isMissing(value2);
    };
    SecondsService2.prototype.divideByStep = function(value2) {
      return distanceFromMin3(value2.getSeconds(), this.min.getSeconds()) / this.step;
    };
    SecondsService2.prototype.addLast = function(data13, value2) {
      if (this.insertUndividedMax && this.isLastMissing(value2)) {
        data13.push(this.toListItem(this.lastSecond(value2)));
      }
      return data13;
    };
    SecondsService2.prototype.addMissing = function(data13, value2) {
      if (this.valueInList(value2)) {
        return data13;
      }
      var missingItem = this.toListItem(value2.getSeconds());
      data13.splice(this.selectedIndex(value2), 0, missingItem);
      return data13;
    };
    SecondsService2.prototype.countFromMin = function(value2) {
      var _a9 = this.range(value2), min = _a9[0], max = _a9[1];
      return Math.floor(distanceFromMin3(max, min) / this.step) + 1;
    };
    SecondsService2.prototype.isMissing = function(value2) {
      if (!value2) {
        return false;
      }
      return this.selectedIndex(value2) !== this.divideByStep(value2);
    };
    SecondsService2.prototype.isLastMissing = function(value2) {
      return this.isMissing(setSeconds(this.max, this.lastSecond(value2)));
    };
    SecondsService2.prototype.lastSecond = function(value2) {
      return this.range(value2)[1];
    };
    SecondsService2.prototype.range = function(value2) {
      var _a9 = this.limitRange(this.min, this.max, value2), min = _a9[0], max = _a9[1];
      return [min.getSeconds(), max.getSeconds()];
    };
    return SecondsService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/TimeList.js
var _a8;
var _b2;
var allVue16 = vue_runtime_esm_bundler_exports;
var gh15 = allVue16.h;
var isV316 = allVue16.version && allVue16.version[0] === "3";
var inject7 = allVue16.inject;
var SCROLL_THRESHOLD = 2;
var SNAP_THRESHOLD = 0.05;
var SKIP = 0;
var getters = (_a8 = {}, _a8[Keys.end] = function(data13, _) {
  return data13[data13.length - 1];
}, _a8[Keys.home] = function(data13, _) {
  return data13[0];
}, _a8[Keys.up] = function(data13, index) {
  return data13[index - 1];
}, _a8[Keys.down] = function(data13, index) {
  return data13[index + 1];
}, _a8);
var services2 = (_b2 = {}, _b2[TIME_PART.dayperiod] = DayPeriodService, _b2[TIME_PART.hour] = HoursService, _b2[TIME_PART.minute] = MinutesService, _b2[TIME_PART.second] = SecondsService, _b2);
var TimeListVue2 = {
  name: "KendoTimeList",
  // @ts-ignore
  emits: {
    "change": null,
    "focus": null,
    "blur": null
  },
  props: {
    id: Number,
    boundRange: {
      type: Boolean,
      default: false
    },
    max: {
      type: Date,
      default: function _default24() {
        return MAX_TIME;
      }
    },
    min: {
      type: Date,
      default: function _default25() {
        return MIDNIGHT_DATE;
      }
    },
    part: Object,
    step: {
      type: Number,
      default: 1
    },
    value: Date,
    smoothScroll: {
      type: Boolean,
      default: true
    }
  },
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  data: function data6() {
    return {
      animateToIndex: false
    };
  },
  created: function created7() {
    this.topOffset = void 0;
    this.dom = new DOMService2();
  },
  computed: {
    animate: function animate() {
      return Boolean(this.$props.smoothScroll && this.animateToIndex);
    }
  },
  mounted: function mounted8() {
    var _this = this;
    this.virtualization = this.$refs.virtualization;
    Promise.resolve().then(function() {
      if (!_this.$el) {
        return;
      }
      _this.dom.calculateHeights(_this.$el);
      _this.$forceUpdate();
    });
  },
  updated: function updated6() {
    if (!this.$refs.virtualization) {
      return;
    }
    this.virtualization = this.$refs.virtualization;
    var index = this.service.selectedIndex(this.$props.value);
    this.virtualization[this.animate ? "animateToIndex" : "scrollToIndex"](index);
    this.animateToIndex = true;
  },
  // @ts-ignore
  setup: !isV316 ? void 0 : function() {
    var v3 = !!isV316;
    var kendoIntlService = inject7("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  // @ts-ignore
  render: function render15(createElement) {
    var _this2 = this;
    var h = gh15 || createElement;
    if (!this.$props.part.type || !services2[this.$props.part.type]) {
      return;
    }
    this.calculateHeights();
    this.intl = provideIntlService(this);
    this.service = new services2[this.$props.part.type](this.intl);
    this.configureServices();
    var data13 = this.service.data(this.$props.value);
    var transform = "translateY(" + this.topOffset + "px)";
    var total = this.service.total(this.$props.value);
    var list = function list2() {
      return h("ul", {
        style: {
          transform,
          msTransform: transform
        },
        "class": "k-reset"
      }, [data13.map(function(item, idx) {
        var _this = this;
        return h("li", {
          key: idx,
          "class": "k-item",
          onClick: function onClick() {
            _this.handleChange(item);
          },
          on: this.v3 ? void 0 : {
            "click": function onClick() {
              _this.handleChange(item);
            }
          }
        }, [h("span", [item.text])]);
      }, this)]);
    };
    return h("div", {
      "class": "k-time-list",
      id: String(this.$props.id || ""),
      attrs: this.v3 ? void 0 : {
        id: String(this.$props.id || ""),
        tabindex: this.$props.disabled ? -1 : 0
      },
      tabindex: this.$props.disabled ? -1 : 0,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur,
        "mouseover": this.handleMouseOver
      },
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur,
      onMouseover: this.handleMouseOver
    }, [this.dom.didCalculate ? (
      // @ts-ignore  function children
      h(Virtualization, {
        bottomOffset: this.bottomOffset,
        attrs: this.v3 ? void 0 : {
          bottomOffset: this.bottomOffset,
          itemHeight: this.itemHeight,
          maxScrollDifference: this.listHeight,
          role: "presentation",
          skip: SKIP,
          tabIndex: -1,
          take: total,
          topOffset: this.topOffset,
          total
        },
        "class": "k-time-container",
        itemHeight: this.itemHeight,
        maxScrollDifference: this.listHeight,
        onScrollaction: this.handleScrollAction,
        on: this.v3 ? void 0 : {
          "scrollaction": this.handleScrollAction
        },
        ref: "virtualization",
        role: "presentation",
        skip: SKIP,
        tabIndex: -1,
        take: total,
        topOffset: this.topOffset,
        total
      }, this.v3 ? function() {
        return [list.call(_this2)];
      } : [list.call(_this2)])
    ) : h("div", {
      "class": "k-time-container"
    }, [list.call(this)])]);
  },
  methods: {
    focus: function focus4(args) {
      var _this = this;
      Promise.resolve().then(function() {
        if (!_this.$el) {
          return;
        }
        _this.$el.focus(args);
      });
    },
    itemOffset: function itemOffset2(scrollTop) {
      if (!this.virtualization) {
        return -1;
      }
      var valueIndex = this.service.selectedIndex(this.$props.value);
      var activeIndex2 = this.virtualization.activeIndex();
      var offset2 = this.virtualization.itemOffset(activeIndex2);
      var distance = Math.abs(Math.ceil(scrollTop) - offset2);
      if (valueIndex === activeIndex2 && distance < SCROLL_THRESHOLD) {
        return offset2;
      }
      var scrollUp = valueIndex > activeIndex2;
      var moveToNext = scrollUp && distance >= this.bottomThreshold || !scrollUp && distance > this.topThreshold;
      return moveToNext ? this.virtualization.itemOffset(activeIndex2 + 1) : offset2;
    },
    calculateHeights: function calculateHeights2() {
      if (!this.dom.didCalculate) {
        return;
      }
      this.itemHeight = this.dom.itemHeight;
      this.listHeight = this.dom.timeListHeight;
      this.topOffset = (this.listHeight - this.itemHeight) / 2;
      this.bottomOffset = this.listHeight - this.itemHeight;
      this.topThreshold = this.itemHeight * SNAP_THRESHOLD;
      this.bottomThreshold = this.itemHeight * (1 - SNAP_THRESHOLD);
    },
    configureServices: function configureServices(props) {
      var _a9 = props || this.$props, min = _a9.min, max = _a9.max, value2 = _a9.value;
      var _b3 = this.service.limitRange(min || this.$props.min, max || this.$props.max, value2 || this.$props.value), newMin = _b3[0], newMax = _b3[1];
      this.service.configure(this.serviceSettings({
        min: newMin,
        max: newMax
      }));
    },
    serviceSettings: function serviceSettings(settings) {
      var defaults = {
        boundRange: this.$props.boundRange,
        insertUndividedMax: false,
        min: cloneDate2(this.$props.min),
        max: cloneDate2(this.$props.max),
        part: this.$props.part,
        step: this.$props.step
      };
      var result = Object.assign({}, defaults, settings);
      result.boundRange = result.part.type !== "hour" || this.$props.boundRange;
      return result;
    },
    handleScrollAction: function handleScrollAction3(_a9) {
      var target = _a9.target, animationInProgress = _a9.animationInProgress;
      if (!this.virtualization) {
        return;
      }
      if (target && !animationInProgress) {
        this.animateToIndex = false;
        var index = this.virtualization.itemIndex(this.itemOffset(target.scrollTop));
        var dataItem = this.service.data(this.$props.value)[index];
        this.handleChange(dataItem);
      }
    },
    handleFocus: function handleFocus5(event2) {
      this.$emit("focus", event2);
    },
    handleBlur: function handleBlur5(event2) {
      this.$emit("blur", event2);
    },
    handleMouseOver: function handleMouseOver() {
      if (!this.$el) {
        return;
      }
      if (canUseDOM && document.activeElement !== this.$el) {
        this.$el.focus({
          preventScroll: true
        });
      }
    },
    handleKeyDown: function handleKeyDown3(event2) {
      var keyCode = event2.keyCode;
      if (keyCode === Keys.down || keyCode === Keys.up || keyCode === Keys.end || keyCode === Keys.home) {
        event2.preventDefault();
      }
      var getter2 = getters[event2.keyCode] || noop;
      var dataItem = getter2(this.service.data(this.$props.value), this.service.selectedIndex(this.$props.value));
      if (dataItem) {
        this.handleChange(dataItem);
      }
    },
    handleChange: function handleChange(dataItem) {
      var candidate = this.service.apply(this.$props.value, dataItem.value);
      if (this.$props.value.getTime() === candidate.getTime()) {
        return;
      }
      this.currentValue = candidate;
      this.$emit("change", candidate);
    }
  }
};
var TimeList = TimeListVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/TimePart.js
var allVue17 = vue_runtime_esm_bundler_exports;
var gh16 = allVue17.h;
var isV317 = allVue17.version && allVue17.version[0] === "3";
var inject8 = allVue17.inject;
var formatRegExp2 = new RegExp("".concat(TIME_PART.hour, "|").concat(TIME_PART.minute, "|").concat(TIME_PART.second, "|").concat(TIME_PART.dayperiod, "|literal"));
var Direction2;
(function(Direction4) {
  Direction4[Direction4["Left"] = 0] = "Left";
  Direction4[Direction4["Right"] = 1] = "Right";
})(Direction2 || (Direction2 = {}));
var TimePartVue2 = {
  name: "KendoTimePart",
  props: {
    cancelButton: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    format: {
      type: String,
      default: function _default26() {
        return "hh:mm a";
      }
    },
    max: {
      type: Date,
      default: function _default27() {
        return MAX_TIME;
      }
    },
    min: {
      type: Date,
      default: function _default28() {
        return MIN_TIME;
      }
    },
    nowButton: {
      type: Boolean,
      default: true
    },
    steps: {
      type: Object,
      default: function _default29() {
        return {};
      }
    },
    smoothScroll: {
      type: Boolean,
      default: true
    },
    tabIndex: Number,
    value: {
      type: Date,
      default: function _default30() {
        return null;
      }
    }
  },
  // @ts-ignore
  emits: {
    "change": null,
    "focus": null,
    "blur": null,
    "nowclick": null
  },
  created: function created8() {
    this.timeLists = [];
    this.snapTime = snapTime(generateSnappers(this.$props.steps, this.$props.min));
    this.activeListIndex = -1;
    this.hasActiveButton = this.hasActiveButton.bind(this);
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data7() {
    return {
      activeListIndex: null
    };
  },
  computed: {
    element: function element4() {
      return this._element;
    },
    computedValue: function computedValue2() {
      return timeInRange(this.snapTime(cloneDate2(this.$props.value || MIDNIGHT_DATE)), this.computedMin, this.computedMax);
    },
    intl: function intl2() {
      return provideIntlService(this);
    },
    computedMin: function computedMin() {
      return this.snapTime(this.$props.min);
    },
    computedMax: function computedMax() {
      return this.snapTime(this.$props.max);
    }
  },
  mounted: function mounted9() {
    var _this = this;
    this._nowButton = this.$refs.nowButton;
    this.dateFormatParts.forEach(function(item, idx) {
      if (item.type !== "literal") {
        _this.timeLists.push(_this.$refs["timeList" + idx]);
      }
    });
  },
  // @ts-ignore
  setup: !isV317 ? void 0 : function() {
    var v3 = !!isV317;
    var kendoIntlService = inject8("kendoIntlService", {});
    var kendoLocalizationService = inject8("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render16(createElement) {
    var h = gh16 || createElement;
    var _a9 = this.$props, format = _a9.format, smoothScroll = _a9.smoothScroll, disabled = _a9.disabled;
    this.snapTime = snapTime(generateSnappers(this.$props.steps, this.computedMin));
    this.dateFormatParts = this.intl.splitDateFormat(format).filter(this.timeFormatFilter);
    var rootClassName2 = classNames({
      "k-disabled": disabled
    }, "k-time-part");
    var localizationService = provideLocalizationService(this);
    var selectNowMessage = localizationService.toLanguageString(selectNow, messages[selectNow]);
    return h("div", {
      "class": rootClassName2
    }, [h("div", {
      "class": "k-time-header"
    }, [h("span", {
      "class": "k-title"
    }, [this.intl.formatDate(this.computedValue, this.dateFormatParts.reduce(this.timeFormatReducer, ""))]), this.showNowButton() && // @ts-ignore  function children
    h(Button, {
      type: "button",
      attrs: this.v3 ? void 0 : {
        type: "button",
        fillMode: "flat",
        title: selectNowMessage,
        "aria-label": selectNowMessage,
        tabIndex: disabled ? -1 : 0
      },
      ref: "nowButton",
      fillMode: "flat",
      "class": "k-time-now",
      title: selectNowMessage,
      "aria-label": selectNowMessage,
      onClick: this.onNowClick,
      on: this.v3 ? void 0 : {
        "click": this.onNowClick
      },
      tabIndex: disabled ? -1 : 0
    }, this.v3 ? function() {
      return [localizationService.toLanguageString(now, messages[now])];
    } : [localizationService.toLanguageString(now, messages[now])])]), h("div", {
      "class": "k-time-list-container",
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown
      }
    }, [h("span", {
      "class": "k-time-highlight"
    }), this.dateFormatParts.map(function(part, idx) {
      var _this = this;
      return part.type !== "literal" ? h("div", {
        key: idx,
        "class": classNames("k-time-list-wrapper", {
          "k-focus": idx === this.activeListIndex
        }),
        role: "presentation",
        attrs: this.v3 ? void 0 : {
          role: "presentation",
          tabindex: -1
        },
        tabindex: -1
      }, [
        h("span", {
          "class": "k-title",
          onMousedown: function onMousedown(e) {
            e.preventDefault();
          },
          on: this.v3 ? void 0 : {
            "mousedown": function onMousedown(e) {
              e.preventDefault();
            }
          }
        }, [this.intl.dateFieldName(part)]),
        // @ts-ignore  function children
        h(TimeList, {
          min: this.computedMin,
          attrs: this.v3 ? void 0 : {
            min: this.computedMin,
            max: this.computedMax,
            boundRange: this.$props.boundRange,
            part,
            step: part.type ? this.$props.steps[part.type] : 1,
            smoothScroll,
            id: idx,
            value: this.computedValue,
            disabled
          },
          max: this.computedMax,
          boundRange: this.$props.boundRange,
          part,
          step: part.type ? this.$props.steps[part.type] : 1,
          smoothScroll,
          ref: "timeList" + idx,
          id: idx,
          onFocus: function onFocus(event2) {
            _this.handleListFocus(event2, idx);
          },
          on: this.v3 ? void 0 : {
            "focus": function onFocus(event2) {
              _this.handleListFocus(event2, idx);
            },
            "blur": this.handleListBlur,
            "change": this.handleChange
          },
          onBlur: this.handleListBlur,
          onChange: this.handleChange,
          value: this.computedValue,
          disabled
        })
      ]) : h("div", {
        key: idx,
        "class": "k-time-separator"
      }, [part.pattern]);
    }, this)])]);
  },
  methods: {
    onNowClick: function onNowClick(event2) {
      this.$emit("nowclick", event2);
    },
    focus: function focus5(args) {
      var _this = this;
      this.$nextTick(function() {
        var timeList = _this.timeLists[0];
        if (!_this.hasActiveButton() && timeList && timeList.$el) {
          timeList.focus(args);
        }
      });
    },
    timeFormatReducer: function timeFormatReducer(acc, current2) {
      return acc + current2.pattern;
    },
    timeFormatFilter: function timeFormatFilter(part, index, all) {
      var prevItem = index >= 1 && all[index - 1];
      if (!prevItem) {
        return formatRegExp2.test(part.type || "");
      }
      if (prevItem && part.type === "literal") {
        return formatRegExp2.test(prevItem.type || "");
      }
      return formatRegExp2.test(part.type || "");
    },
    hasActiveButton: function hasActiveButton() {
      return canUseDOM && this._nowButton && document.activeElement === this._nowButton.$el;
    },
    focusList: function focusList(dir) {
      if (!this.timeLists.length) {
        return;
      }
      this.timeLists.reduce(this.listReducer, []).map(function(state) {
        return dir === Direction2.Right ? state.next : state.prev;
      }).map(function(list) {
        return list && list.$el && list.$el.focus({
          preventScroll: true
        });
      });
    },
    listReducer: function listReducer(state, list, idx, all) {
      if (state.length || list.$props.id !== this.activeListIndex) {
        return state;
      }
      return [{
        next: all[idx + 1] || list,
        prev: all[idx - 1] || list
      }];
    },
    showNowButton: function showNowButton() {
      return !this.hasSteps() && this.$props.nowButton && isInTimeRange(getNow(), this.computedMin, this.computedMax);
    },
    hasSteps: function hasSteps() {
      var _this = this;
      var keys = Object.keys(this.$props.steps);
      return keys.length !== keys.reduce(function(acc, k) {
        return acc + _this.$props.steps[k];
      }, 0);
    },
    handleKeyDown: function handleKeyDown4(event2) {
      var keyCode = event2.keyCode;
      switch (keyCode) {
        case Keys.left:
          event2.preventDefault();
          this.focusList(Direction2.Left);
          return;
        case Keys.right:
          event2.preventDefault();
          this.focusList(Direction2.Right);
          return;
        default:
          return;
      }
    },
    handleListBlur: function handleListBlur(event2) {
      this.$emit("blur", event2);
    },
    handleListFocus: function handleListFocus(event2, idx) {
      this.$emit("focus", event2);
      this.activeListIndex = idx;
    },
    handleChange: function handleChange2(candidate) {
      this.$emit("change", candidate);
    }
  }
};
var TimePart = TimePartVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/TimeSelector.js
var allVue18 = vue_runtime_esm_bundler_exports;
var gh17 = allVue18.h;
var isV318 = allVue18.version && allVue18.version[0] === "3";
var inject9 = allVue18.inject;
var Direction3;
(function(Direction4) {
  Direction4[Direction4["Left"] = 0] = "Left";
  Direction4[Direction4["Right"] = 1] = "Right";
})(Direction3 || (Direction3 = {}));
var TimeSelectorVue2 = {
  name: "KendoTimeSelector",
  // @ts-ignore
  emits: {
    "change": null,
    "focus": null,
    "blur": null
  },
  props: {
    cancelButton: {
      type: Boolean,
      default: true
    },
    boundRange: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    format: {
      type: String,
      default: function _default31() {
        return "t";
      }
    },
    max: {
      type: Date,
      default: function _default32() {
        return MAX_TIME;
      }
    },
    min: {
      type: Date,
      default: function _default33() {
        return MIN_TIME;
      }
    },
    nowButton: Boolean,
    steps: {
      type: Object,
      default: function _default34() {
        return {};
      }
    },
    smoothScroll: {
      type: Boolean,
      default: true
    },
    tabIndex: Number,
    value: {
      type: Date,
      default: function _default35() {
        return null;
      }
    }
  },
  created: function created9() {
    this.dateFormatParts = this.intl.splitDateFormat(this.$props.format);
    this.mergeValue = valueMerger(generateGetters(this.dateFormatParts));
    this.hasActiveButton = this.hasActiveButton.bind(this);
    this.currentState = this.$props.value || MIDNIGHT_DATE;
    this.currentValue = this.$props.value;
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data8() {
    return {
      currentState: null,
      currentValue: null,
      valueDuringOnChange: void 0
    };
  },
  computed: {
    computedValue: function computedValue3() {
      var value2 = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.$props.value !== null ? this.$props.value : this.currentValue;
      return value2 !== null ? cloneDate2(value2) : null;
    },
    intl: function intl3() {
      return provideIntlService(this);
    },
    current: function current() {
      return this.currentState !== null ? cloneDate2(this.currentState) : null;
    }
  },
  mounted: function mounted10() {
    this.timePart = this.$refs.timePart;
    this._acceptButton = this.$refs.acceptButton;
    this._cancelButton = this.$refs.cancelButton;
  },
  // @ts-ignore
  setup: !isV318 ? void 0 : function() {
    var v3 = !!isV318;
    var kendoIntlService = inject9("kendoIntlService", {});
    var kendoLocalizationService = inject9("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render17(createElement) {
    var h = gh17 || createElement;
    var _a9 = this.$props, format = _a9.format, cancelButton = _a9.cancelButton, disabled = _a9.disabled, tabIndex = _a9.tabIndex, smoothScroll = _a9.smoothScroll, min = _a9.min, max = _a9.max, boundRange = _a9.boundRange, nowButton = _a9.nowButton, steps = _a9.steps;
    var localizationService = provideLocalizationService(this);
    var cancelMessage = localizationService.toLanguageString(timePickerCancel, messages[timePickerCancel]);
    var setMessage = localizationService.toLanguageString(timePickerSet, messages[timePickerSet]);
    return h("div", {
      tabindex: !disabled ? tabIndex || 0 : void 0,
      attrs: this.v3 ? void 0 : {
        tabindex: !disabled ? tabIndex || 0 : void 0
      },
      "class": classNames("k-timeselector", {
        "k-disabled": disabled
      }),
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown
      }
    }, [
      // @ts-ignore  function children
      h(TimePart, {
        ref: "timePart",
        value: this.current,
        attrs: this.v3 ? void 0 : {
          value: this.current,
          format,
          smoothScroll,
          min,
          max,
          boundRange,
          disabled,
          nowButton,
          steps
        },
        onChange: this.handleChange,
        on: this.v3 ? void 0 : {
          "change": this.handleChange,
          "nowclick": this.handleNowClick,
          "focus": this.handleFocus,
          "blur": this.handleBlur
        },
        onNowclick: this.handleNowClick,
        format,
        smoothScroll,
        min,
        max,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        boundRange,
        disabled,
        nowButton,
        steps
      }),
      h("div", {
        "class": "k-time-footer k-actions k-actions-stretched"
      }, [
        cancelButton && // @ts-ignore  function children
        h(Button, {
          type: "button",
          attrs: this.v3 ? void 0 : {
            type: "button",
            title: cancelMessage,
            "aria-label": cancelMessage
          },
          ref: "cancelButton",
          "class": "k-time-cancel",
          onClick: this.handleReject,
          on: this.v3 ? void 0 : {
            "click": this.handleReject
          },
          title: cancelMessage,
          "aria-label": cancelMessage
        }, this.v3 ? function() {
          return [cancelMessage];
        } : [cancelMessage]),
        // @ts-ignore  function children
        h(Button, {
          type: "button",
          attrs: this.v3 ? void 0 : {
            type: "button",
            themeColor: "primary",
            title: setMessage,
            "aria-label": setMessage
          },
          ref: "acceptButton",
          themeColor: "primary",
          "class": "k-time-accept",
          onClick: this.handleAccept,
          on: this.v3 ? void 0 : {
            "click": this.handleAccept
          },
          title: setMessage,
          "aria-label": setMessage
        }, this.v3 ? function() {
          return [setMessage];
        } : [setMessage])
      ])
    ]);
  },
  methods: {
    handleBlur: function handleBlur6(event2) {
      this.$emit("blur", event2);
    },
    handleFocus: function handleFocus6(event2) {
      this.$emit("focus", event2);
    },
    focusActiveList: function focusActiveList() {
      if (!this.timePart) {
        return;
      }
      this.timePart.focus({
        preventScroll: true
      });
    },
    hasActiveButton: function hasActiveButton2() {
      if (!this._acceptButton) {
        return false;
      }
      return canUseDOM && (document.activeElement === this._acceptButton.$el || document.activeElement === this._cancelButton.$el);
    },
    handleKeyDown: function handleKeyDown5(event2) {
      var keyCode = event2.keyCode;
      this.$emit("keydown", event2);
      switch (keyCode) {
        case Keys.enter:
          if (!this.hasActiveButton()) {
            this.handleAccept(event2);
          }
          return;
        default:
          return;
      }
    },
    handleAccept: function handleAccept(event2) {
      var value2 = this.mergeValue(cloneDate2(this.computedValue || getNow()), this.timePart ? this.timePart.computedValue : this.current);
      this.currentValue = value2;
      this.valueDuringOnChange = value2;
      this.$emit("change", {
        event: event2,
        value: this.computedValue,
        target: this
      });
      this.valueDuringOnChange = void 0;
    },
    handleReject: function handleReject(event2) {
      this.currentState = this.computedValue;
      this.$emit("reject", event2);
    },
    handleNowClick: function handleNowClick(event2) {
      var now2 = this.mergeValue(cloneDate2(this.computedValue || getNow()), getNow());
      this.currentState = now2;
      this.currentValue = now2;
      this.valueDuringOnChange = now2;
      this.$emit("change", {
        event: event2,
        value: this.computedValue,
        target: this
      });
      this.valueDuringOnChange = void 0;
    },
    handleChange: function handleChange3(candidate) {
      this.currentState = candidate;
    }
  }
};
var TimeSelector = TimeSelectorVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/TimePicker.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var allVue19 = vue_runtime_esm_bundler_exports;
var gh18 = allVue19.h;
var isV319 = allVue19.version && allVue19.version[0] === "3";
var ref3 = allVue19.ref;
var inject10 = allVue19.inject;
var TimePickerVue2 = {
  name: "KendoTimePicker",
  // @ts-ignore
  emits: {
    "changemodel": null,
    "update:modelValue": null,
    "iconclick": null,
    "change": null,
    "focus": null,
    "blur": null,
    "keydown": null,
    "open": null,
    "close": null
  },
  model: {
    event: "changemodel"
  },
  props: {
    cancelButton: {
      type: Boolean,
      default: true
    },
    nowButton: {
      type: Boolean,
      default: void 0
    },
    defaultShow: {
      type: Boolean,
      default: false
    },
    modelValue: {
      type: Date,
      default: void 0
    },
    defaultValue: {
      type: Date,
      default: function _default36() {
        return null;
      }
    },
    dateInput: {
      type: [String, Object, Function],
      default: function _default37() {
        return void 0;
      }
    },
    popup: {
      type: [String, Object, Function],
      default: function _default38() {
        return void 0;
      }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    format: {
      type: [String, Object],
      default: function _default39() {
        return "t";
      }
    },
    formatPlaceholder: {
      type: [String, Object],
      default: function _default40() {
        return defaultFormatPlaceholder;
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator7(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator8(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator9(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    min: {
      type: Date,
      default: function _default41() {
        return MIN_TIME;
      }
    },
    max: {
      type: Date,
      default: function _default42() {
        return MAX_TIME;
      }
    },
    name: String,
    label: String,
    placeholder: String,
    popupSettings: {
      type: Object,
      default: function _default43() {
        return {};
      }
    },
    show: {
      type: Boolean,
      default: void 0
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    steps: {
      type: Object,
      default: function _default44() {
        return {};
      }
    },
    smoothScroll: {
      type: Boolean,
      default: true
    },
    title: {
      type: String,
      default: function _default45() {
        return "";
      }
    },
    value: {
      type: Date,
      default: function _default46() {
        return void 0;
      }
    },
    width: [Number, String],
    validationMessage: String,
    required: {
      type: Boolean,
      default: false
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    validate: Boolean,
    valid: {
      type: Boolean,
      default: void 0
    }
  },
  created: function created10() {
    this._anchor = guid();
    this._popupId = "popup" + guid();
    this._element = null;
    this._wrapper = null;
    this._dateInput = null;
    this._timeSelector = null;
    this.shouldFocusDateInput = false;
    this.currentValue = this.$props.defaultValue;
    this.currentShow = this.$props.defaultShow;
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data9() {
    return {
      currentValue: null,
      currentShow: false,
      valueDuringOnChange: void 0,
      showDuringOnChange: void 0,
      isFocused: false
    };
  },
  computed: {
    timeSelector: function timeSelector() {
      return this._timeSelector;
    },
    computedValue: function computedValue4() {
      var value2 = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentValue;
      return value2 !== null ? cloneDate2(value2) : null;
    },
    computedShow: function computedShow() {
      return this.showDuringOnChange !== void 0 ? this.showDuringOnChange : this.$props.show !== void 0 ? this.$props.show : this.currentShow;
    }
  },
  watch: {
    show: function show2(_newShow, oldShow) {
      this._oldShow = oldShow;
    },
    currentShow: function currentShow2(_newShow, oldShow) {
      this._oldShow = oldShow;
    }
  },
  mounted: function mounted11() {
    if (this.computedShow) {
      this.$forceUpdate();
    }
    this._dateInput = this.v3 ? this.dateInputRef : this.$refs.dateInput;
    this._timeSelector = this.$refs.timeSelector;
    this._wrapper = this.v3 ? this.kendoAnchorRef : this.$refs[this._anchor];
    if (this._dateInput && this._dateInput.element()) {
      this._dateInput.element().setAttribute("aria-haspopup", "true");
    }
  },
  updated: function updated7() {
    this._dateInput = this.v3 ? this.dateInputRef : this.$refs.dateInput;
    this._timeSelector = this.$refs.timeSelector;
    this._wrapper = this.v3 ? this.kendoAnchorRef : this.$refs[this._anchor];
    if (this._timeSelector && this.computedShow && !this._oldShow) {
      this._timeSelector.focusActiveList();
    } else if (this._dateInput && this._dateInput.element() && !this.computedShow && this.shouldFocusDateInput) {
      this._dateInput.element().focus({
        preventScroll: true
      });
    }
    this.shouldFocusDateInput = false;
  },
  // @ts-ignore
  setup: !isV319 ? void 0 : function() {
    var v3 = !!isV319;
    var kendoAnchorRef = ref3(null);
    var kendoLocalizationService = inject10("kendoLocalizationService", {});
    return {
      v3,
      kendoAnchorRef,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render18(createElement) {
    var _a9;
    var _this = this;
    var h = gh18 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _b3 = this.$props, disabled = _b3.disabled, tabIndex = _b3.tabIndex, title = _b3.title, id = _b3.id, placeholder = _b3.placeholder, format = _b3.format, formatPlaceholder = _b3.formatPlaceholder, smoothScroll = _b3.smoothScroll, width = _b3.width, name = _b3.name, steps = _b3.steps, cancelButton = _b3.cancelButton, nowButton = _b3.nowButton, validationMessage = _b3.validationMessage, required = _b3.required, validityStyles = _b3.validityStyles, ariaLabelledBy = _b3.ariaLabelledBy, ariaDescribedBy = _b3.ariaDescribedBy, size = _b3.size, rounded = _b3.rounded, fillMode = _b3.fillMode;
    var _c2 = this.$props.popupSettings, popupClass = _c2.popupClass, appendTo = _c2.appendTo, animate2 = _c2.animate;
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var wrapperClassNames = classNames("k-picker-wrap", {
      "k-invalid": !isValid,
      "k-disabled": disabled,
      "k-focus": this.isFocused
    });
    var popupClassNames = classNames("k-group k-reset", popupClass);
    var localizationService = provideLocalizationService(this);
    var toggleClockMessage = localizationService.toLanguageString(toggleClock, messages[toggleClock]);
    var toggleTimeMessage = localizationService.toLanguageString(toggleTimeSelector, messages[toggleTimeSelector]);
    var dateInput = this.$props.dateInput ? templateRendering.call(this, this.$props.dateInput, getListeners.call(this)) : void 0;
    var dateInputDefaultRendering = (
      // @ts-ignore  function children
      h(DateInput, {
        ref: this.v3 ? function(el) {
          _this.dateInputRef = el;
        } : "dateInput",
        placeholder,
        attrs: this.v3 ? void 0 : {
          placeholder,
          disabled,
          format,
          formatPlaceholder,
          id,
          size: null,
          rounded: null,
          fillMode: null,
          ariaLabelledBy,
          ariaDescribedBy,
          max: this.normalizeTime(this.$props.max),
          min: this.normalizeTime(this.$props.min),
          name,
          required,
          steps,
          tabIndex: !this.computedShow ? tabIndex : -1,
          title,
          valid: this.validity().valid,
          validationMessage,
          validityStyles,
          value: this.computedValue && this.normalizeTime(this.computedValue),
          ariaHasPopup: "grid",
          ariaExpanded: this.computedShow,
          ariaRole: "combobox",
          ariaControls: this._popupId
        },
        disabled,
        format,
        formatPlaceholder,
        id,
        size: null,
        rounded: null,
        fillMode: null,
        ariaLabelledBy,
        ariaDescribedBy,
        max: this.normalizeTime(this.$props.max),
        min: this.normalizeTime(this.$props.min),
        name,
        onChange: this.handleInputValueChange,
        on: this.v3 ? void 0 : {
          "change": this.handleInputValueChange
        },
        required,
        steps,
        tabIndex: !this.computedShow ? tabIndex : -1,
        title,
        valid: this.validity().valid,
        validationMessage,
        validityStyles,
        value: this.computedValue && this.normalizeTime(this.computedValue),
        ariaHasPopup: "grid",
        ariaExpanded: this.computedShow,
        ariaRole: "combobox",
        ariaControls: this._popupId
      }, this.v3 ? function() {
        return [defaultSlot];
      } : [defaultSlot])
    );
    var timeSelector2 = (
      // @ts-ignore  function children
      h(TimeSelector, {
        ref: "timeSelector",
        cancelButton,
        attrs: this.v3 ? void 0 : {
          cancelButton,
          disabled,
          nowButton,
          format,
          min: this.$props.min,
          max: this.$props.max,
          steps,
          smoothScroll,
          value: this.computedValue
        },
        disabled,
        nowButton,
        format,
        min: this.$props.min,
        max: this.$props.max,
        steps,
        smoothScroll,
        value: this.computedValue,
        onChange: this.handleValueChange,
        on: this.v3 ? void 0 : {
          "change": this.handleValueChange,
          "reject": this.handleValueReject,
          "focus": this.timeFocus,
          "blur": this.timeBlur,
          "keydown": this.handleKeyDown
        },
        onReject: this.handleValueReject,
        onFocus: this.timeFocus,
        onBlur: this.timeBlur,
        onKeydown: this.handleKeyDown
      })
    );
    var dateInputRendering = getTemplate.call(this, {
      h,
      template: dateInput,
      defaultRendering: dateInputDefaultRendering,
      additionalListeners: {
        change: this.handleInputValueChange
      }
    });
    var popup = this.$props.popup ? templateRendering.call(this, this.$props.popup, getListeners.call(this)) : void 0;
    var popupDefaultRendering = (
      // @ts-ignore function children
      h(Popup, {
        show: this.computedShow,
        attrs: this.v3 ? void 0 : {
          show: this.computedShow,
          anchor: this._anchor,
          id: this._popupId,
          anchorAlign: {
            horizontal: "left",
            vertical: "bottom"
          },
          popupAlign: {
            horizontal: "left",
            vertical: "top"
          },
          appendTo,
          animate: animate2
        },
        anchor: this._anchor,
        "class": popupClassNames,
        id: this._popupId,
        anchorAlign: {
          horizontal: "left",
          vertical: "bottom"
        },
        popupAlign: {
          horizontal: "left",
          vertical: "top"
        },
        appendTo,
        animate: animate2
      }, this.v3 ? function() {
        return [timeSelector2];
      } : [timeSelector2])
    );
    var popupRendering = getTemplate.call(this, {
      h,
      template: popup,
      defaultRendering: popupDefaultRendering,
      defaultSlots: timeSelector2
    });
    var timePicker = h("div", {
      "class": classNames("k-input", "k-timepicker", (_a9 = {}, _a9["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a9["k-input-".concat(fillMode)] = fillMode, _a9["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a9["k-invalid"] = !isValid, _a9["k-required"] = this.required, _a9["k-disabled"] = this.$props.disabled, _a9["k-focus"] = this.isFocused, _a9)),
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      style: {
        width
      },
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur,
      ref: this.v3 ? function(el) {
        _this.kendoAnchorRef = el;
      } : this._anchor
    }, [
      dateInputRendering,
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "clock",
          svgIcon: clockIcon,
          title: toggleTimeMessage,
          rounded: null,
          "aria-controls": this._popupId,
          "aria-label": toggleClockMessage
        },
        tabIndex: -1,
        icon: "clock",
        svgIcon: clockIcon,
        onMousedown: this.handleIconMouseDown,
        on: this.v3 ? void 0 : {
          "mousedown": this.handleIconMouseDown,
          "click": this.handleIconClick
        },
        onClick: this.handleIconClick,
        title: toggleTimeMessage,
        rounded: null,
        "class": "k-input-button",
        "aria-controls": this._popupId,
        "aria-label": toggleClockMessage
      }),
      popupRendering
    ]);
    return this.$props.label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label: this.$props.label,
        attrs: this.v3 ? void 0 : {
          label: this.$props.label,
          editorId: id,
          editorValid: isValid,
          editorValue: this.getDateInputText(),
          editorPlaceholder: this.$props.placeholder,
          editorDisabled: this.$props.disabled
        },
        editorId: id,
        editorValid: isValid,
        editorValue: this.getDateInputText(),
        editorPlaceholder: this.$props.placeholder,
        editorDisabled: this.$props.disabled,
        style: {
          width
        }
      }, this.v3 ? function() {
        return [timePicker];
      } : [timePicker])
    ) : timePicker;
  },
  methods: {
    validity: function validity3() {
      var value2 = this.computedValue && this.normalizeTime(this.computedValue);
      var min = this.normalizeTime(this.$props.min);
      var max = this.normalizeTime(this.$props.max);
      var inRange2 = isInRange3(value2, min, max);
      var customError = this.$props.validationMessage !== void 0;
      var isValid = (!this.$props.required || this.computedValue !== null) && inRange2;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        rangeOverflow: isBiggerThanMax(value2, max),
        rangeUnderflow: isSmallerThanMin(value2, min),
        valid,
        valueMissing: this.computedValue === null
      };
    },
    getDateInputText: function getDateInputText2() {
      return this.computedValue ? true : this._dateInput ? this._dateInput._element.value : "";
    },
    focus: function focus6() {
      if (this._dateInput) {
        this._dateInput.focus();
      }
    },
    normalizeTime: function normalizeTime(date2) {
      return setTime(MIDNIGHT_DATE, date2);
    },
    setShow: function setShow2(show4) {
      if (this.computedShow === show4) {
        return;
      }
      this.currentShow = show4;
      this.$emit(show4 ? "open" : "close", {
        component: this
      });
    },
    mergeTime: function mergeTime2(value2) {
      return this.computedValue && value2 ? setTime(this.computedValue, value2) : value2;
    },
    handleInputValueChange: function handleInputValueChange2(event2) {
      var value2 = this.mergeTime(event2.value);
      this.handleValueChange(__assign4(__assign4({}, event2), {
        value: value2
      }));
    },
    handleValueChange: function handleValueChange2(event2) {
      this.currentValue = cloneDate2(event2.value);
      this.valueDuringOnChange = event2.value;
      this.showDuringOnChange = false;
      this.shouldFocusDateInput = true;
      this.$emit("changemodel", this.computedValue);
      this.$emit("update:modelValue", this.computedValue);
      this.$emit("change", {
        event: event2.event,
        value: this.computedValue,
        show: this.computedShow,
        component: this,
        target: {
          name: this.$props.name,
          value: this.computedValue,
          valueAsDate: this.computedValue
        }
      });
      this.valueDuringOnChange = void 0;
      this.showDuringOnChange = void 0;
      this.setShow(false);
    },
    handleFocus: function handleFocus7(event2) {
      this._oldShow = this.computedShow;
      this.isFocused = true;
      this.$emit("focus", event2);
    },
    handleBlur: function handleBlur7(event2) {
      this.createBlurTimeout();
      this.$emit("blur", event2);
    },
    timeBlur: function timeBlur(event2) {
      this.$emit("blur", event2);
      clearTimeout(this._blurTimeout);
      this.createBlurTimeout();
    },
    timeFocus: function timeFocus() {
      clearTimeout(this._blurTimeout);
    },
    createBlurTimeout: function createBlurTimeout2() {
      var _this = this;
      var that = this;
      this._blurTimeout = setTimeout(function() {
        _this.isFocused = false;
        var isInPopup = document.activeElement && document.activeElement.closest("#".concat(that._popupId));
        var isElementActive = that._dateInput && canUseDOM && document.activeElement !== that._dateInput.element();
        if (isElementActive && !isInPopup) {
          that.setShow(false);
        }
      }, 200);
    },
    handleValueReject: function handleValueReject(_) {
      this.setShow(false);
    },
    handleIconClick: function handleIconClick2(event2) {
      if (this.$props.disabled) {
        return;
      }
      this.shouldFocusDateInput = true;
      this.setShow(!this.computedShow);
      this.$emit("iconclick", event2);
    },
    handleIconMouseDown: function handleIconMouseDown2(event2) {
      event2.preventDefault();
    },
    handleKeyDown: function handleKeyDown6(event2) {
      var altKey = event2.altKey, keyCode = event2.keyCode;
      if (keyCode === Keys.tab && this._dateInput && event2.target !== this._dateInput._element) {
        event2.preventDefault();
        this.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }
      if (keyCode === Keys.esc) {
        this.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }
      if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
        event2.preventDefault();
        event2.stopPropagation();
        this.shouldFocusDateInput = keyCode === Keys.up;
        this.setShow(keyCode === Keys.down);
      }
      this.$emit("keydown", event2);
    }
  }
};
var TimePicker = TimePickerVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/daterangepicker/DateRangePicker.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var allVue20 = vue_runtime_esm_bundler_exports;
var gh19 = allVue20.h;
var isV320 = allVue20.version && allVue20.version[0] === "3";
var ref4 = allVue20.ref;
var inject11 = allVue20.inject;
var DateRangePickerVue2 = {
  name: "KendoDateRangePicker",
  // @ts-ignore
  emits: {
    blur: null,
    change: null,
    "changemodel": null,
    "update:modelValue": null,
    focus: null,
    keydown: null,
    "open": null,
    "close": null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  model: {
    event: "changemodel"
  },
  props: {
    allowReverse: {
      type: Boolean,
      default: false
    },
    calendarSettings: Object,
    defaultShow: {
      type: Boolean,
      default: false
    },
    defaultValue: {
      type: Object,
      default: function _default47() {
        return EMPTY_SELECTIONRANGE;
      }
    },
    modelValue: {
      type: Object,
      default: void 0
    },
    disabled: {
      type: Boolean,
      default: false
    },
    popup: [String, Object, Function],
    calendar: [String, Object, Function],
    startDateInput: [String, Object, Function],
    endDateInput: [String, Object, Function],
    endDateInputSettings: Object,
    focusedDate: Date,
    format: {
      type: [String, Object],
      default: function _default48() {
        return "d";
      }
    },
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    max: {
      type: Date,
      default: function _default49() {
        return MAX_DATE2;
      }
    },
    min: {
      type: Date,
      default: function _default50() {
        return MIN_DATE2;
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator10(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator11(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator12(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    popupSettings: {
      type: Object,
      default: function _default51() {
        return {};
      }
    },
    show: {
      type: Boolean,
      default: void 0
    },
    startDateInputSettings: Object,
    swapButton: {
      type: Boolean,
      default: false
    },
    tabIndex: Number,
    value: {
      type: Object,
      default: function _default52() {
        return void 0;
      }
    }
  },
  created: function created11() {
    this._element = null;
    this._wrapper = null;
    this._calendar = null;
    this._startDateInput = null;
    this._endDateInput = null;
    this._popupId = guid();
    this._anchor = guid();
    this._startInputId = guid();
    this._endInputId = guid();
    this._calendarId = guid();
    validatePackage(packageMetadata);
    this.currentShow = this.$props.show || this.$props.defaultShow;
    this.currentValue = this.$props.value || this.$props.defaultValue;
    this.initialAnimation = this.currentShow;
  },
  mounted: function mounted12() {
    this._calendar = this.v3 ? this.calendarRef : this.$refs.calendar;
    this._startDateInput = this.v3 ? this.startDateInputRef : this.$refs.startDateInput;
    this._endDateInput = this.v3 ? this.endDateInputRef : this.$refs.endDateInput;
    if (this.computedShow) {
      this.$forceUpdate();
      this.$nextTick(function() {
        this.initialAnimation = false;
      });
    }
  },
  updated: function updated8() {
    this._calendar = this.v3 ? this.calendarRef : this.$refs.calendar;
    this._startDateInput = this.v3 ? this.startDateInputRef : this.$refs.startDateInput;
    this._endDateInput = this.v3 ? this.endDateInputRef : this.$refs.endDateInput;
    if (this.shouldFocusCalendar) {
      this.focusCalendarElement();
    }
    if (this.shouldFocusDateInput) {
      this.focusDateInputElement();
    }
    this.shouldFocusCalendar = false;
    this.shouldFocusDateInput = false;
  },
  data: function data10() {
    return {
      currentShow: false,
      currentValue: null,
      valueDuringOnChange: void 0,
      shouldFocusDateInput: false,
      shouldFocusCalendar: false
    };
  },
  computed: {
    rootClassName: function rootClassName() {
      var _a9;
      return _a9 = {
        "k-daterangepicker": true
      }, _a9["k-disabled"] = this.$props.disabled, _a9;
    },
    computedValue: function computedValue5() {
      var value2 = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.currentValue;
      return value2 || EMPTY_SELECTIONRANGE;
    },
    computedShow: function computedShow2() {
      return this.$props.show !== void 0 ? this.$props.show : this.currentShow;
    },
    swapButtonClass: function swapButtonClass() {
      var _a9;
      var _b3 = this.$props, size = _b3.size, rounded = _b3.rounded;
      return _a9 = {
        "k-button": true
      }, _a9["k-button-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a9["k-button-flat"] = true, _a9["k-button-flat-base"] = true, _a9["k-icon-button"] = true, _a9["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a9;
    }
  },
  // @ts-ignore
  setup: !isV320 ? void 0 : function() {
    var v3 = !!isV320;
    var kendoAnchorRef = ref4(null);
    var kendoLocalizationService = inject11("kendoLocalizationService", {});
    return {
      v3,
      kendoAnchorRef,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render19(createElement) {
    var _this = this;
    var h = gh19 || createElement;
    var value2 = this.computedValue || EMPTY_SELECTIONRANGE;
    var _a9 = this.$props, size = _a9.size, fillMode = _a9.fillMode, rounded = _a9.rounded;
    var startDateInputId = (this.$props.startDateInputSettings || {}).id || this._startInputId;
    var endDateInputId = (this.$props.endDateInputSettings || {}).id || this._endInputId;
    var localizationService = provideLocalizationService(this);
    var startMessage = localizationService.toLanguageString(start, messages[start]);
    var endMessage = localizationService.toLanguageString(end, messages[end]);
    var separatorMessage = localizationService.toLanguageString(separator, messages[separator]);
    var startDateInputRender = this.$props.startDateInput ? templateRendering.call(this, this.$props.startDateInput, getListeners.call(this)) : void 0;
    var startSettings = __assign5({
      label: startMessage,
      format: this.$props.format,
      min: this.min,
      max: this.max,
      id: this._startInputId,
      disabled: this.$props.disabled,
      valid: this.$props.valid,
      size,
      fillMode,
      rounded,
      ariaHasPopup: "grid",
      ariaExpanded: this.computedShow,
      value: value2.start,
      ariaRole: "combobox",
      ariaControls: this._popupId
    }, this.$props.startDateInputSettings);
    var startDateInputDefaultRendering = h(DateInput, __assign5(__assign5({
      ref: this.v3 ? function(el) {
        _this.startDateInputRef = el;
      } : "startDateInput",
      attrs: this.v3 ? void 0 : startSettings
    }, startSettings), {
      onChange: this.handleEndChange,
      on: this.v3 ? void 0 : {
        "change": this.handleEndChange
      }
    }));
    var startDateInputRendering = getTemplate.call(this, {
      h,
      template: startDateInputRender,
      defaultRendering: startDateInputDefaultRendering,
      additionalListeners: {
        change: this.handleStartChange
      }
    });
    var endDateInputRender = this.$props.endDateInput ? templateRendering.call(this, this.$props.endDateInput, getListeners.call(this)) : void 0;
    var endSettings = __assign5({
      label: endMessage,
      format: this.$props.format,
      min: this.min,
      max: this.max,
      id: this._endInputId,
      size,
      fillMode,
      rounded,
      disabled: this.$props.disabled,
      valid: this.$props.valid,
      ariaHasPopup: "grid",
      ariaExpanded: this.computedShow,
      value: value2.end,
      ariaRole: "combobox",
      ariaControls: this._popupId
    }, this.$props.endDateInputSettings);
    var endDateInputDefaultRendering = h(DateInput, __assign5(__assign5({
      ref: this.v3 ? function(el) {
        _this.endDateInputRef = el;
      } : "endDateInput",
      attrs: this.v3 ? void 0 : endSettings
    }, endSettings), {
      onChange: this.handleEndChange,
      on: this.v3 ? void 0 : {
        "change": this.handleEndChange
      }
    }));
    var endDateInputRendering = getTemplate.call(this, {
      h,
      template: endDateInputRender,
      defaultRendering: endDateInputDefaultRendering,
      additionalListeners: {
        change: this.handleEndChange
      }
    });
    var calendarRender = this.$props.calendar ? templateRendering.call(this, this.$props.calendar, getListeners.call(this)) : void 0;
    var calendarSettings = __assign5({
      id: this._calendarId,
      min: this.min,
      max: this.max,
      views: 2,
      allowReverse: this.$props.allowReverse,
      mode: "range",
      focusedDate: this.$props.focusedDate,
      disabled: this.$props.disabled,
      value: value2
    }, this.$props.calendarSettings);
    var calendarDefaultRendering = h(Calendar, __assign5({
      ref: this.v3 ? function(el) {
        _this.calendarRef = el;
      } : "calendar",
      attrs: this.v3 ? void 0 : calendarSettings,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown,
        "focus": this.calendarFocus,
        "blur": this.calendarBlur,
        "change": this.handleCalendarChange
      },
      onFocus: this.calendarFocus,
      onBlur: this.calendarBlur,
      onChange: this.handleCalendarChange
    }, calendarSettings));
    var calendarRendering = getTemplate.call(this, {
      h,
      template: calendarRender,
      defaultRendering: calendarDefaultRendering,
      additionalListeners: {
        change: this.handleCalendarChange,
        keydown: this.handleKeyDown,
        focus: this.calendarFocus,
        blur: this.calendarBlur
      }
    });
    var _b3 = this.$props.popupSettings, popupClass = _b3.popupClass, animate2 = _b3.animate;
    var popupRender = this.$props.popup ? templateRendering.call(this, this.$props.popup, getListeners.call(this)) : void 0;
    var popupSettings = __assign5({
      show: this.computedShow,
      anchor: this._anchor,
      id: this._popupId,
      anchorAlign: {
        horizontal: "left",
        vertical: "bottom"
      },
      popupAlign: {
        horizontal: "left",
        vertical: "top"
      },
      animate: this.initialAnimation ? false : animate2
    }, this.$props.popupSettings);
    var popupDefaultRendering = h(Popup, __assign5({
      attrs: this.v3 ? void 0 : popupSettings,
      "class": popupClass
    }, popupSettings), this.v3 ? function() {
      return [calendarRendering];
    } : [calendarRendering]);
    var popupRendering = getTemplate.call(this, {
      h,
      template: popupRender,
      defaultRendering: popupDefaultRendering,
      defaultSlots: calendarRendering
    });
    var reverseButton = h("button", {
      "class": this.swapButtonClass,
      role: "button",
      attrs: this.v3 ? void 0 : {
        role: "button",
        title: provideLocalizationService(this).toLanguageString(swapStartEnd, messages[swapStartEnd]),
        "aria-controls": startDateInputId + " " + endDateInputId,
        "aria-label": provideLocalizationService(this).toLanguageString(swapStartEnd, messages[swapStartEnd])
      },
      title: provideLocalizationService(this).toLanguageString(swapStartEnd, messages[swapStartEnd]),
      onMousedown: this.handleReverseMouseDown,
      on: this.v3 ? void 0 : {
        "mousedown": this.handleReverseMouseDown,
        "click": this.handleReverseClick
      },
      onClick: this.handleReverseClick,
      "aria-controls": startDateInputId + " " + endDateInputId,
      "aria-label": provideLocalizationService(this).toLanguageString(swapStartEnd, messages[swapStartEnd])
    }, [h(Icon, {
      name: "arrows-swap",
      attrs: this.v3 ? void 0 : {
        name: "arrows-swap",
        icon: arrowsSwapIcon
      },
      icon: arrowsSwapIcon,
      style: {
        transform: "rotate(90deg)"
      },
      "class": "k-button-icon"
    })]);
    return h("span", {
      "class": this.rootClassName,
      style: this.$attrs.style,
      id: this.$props.id,
      attrs: this.v3 ? void 0 : {
        id: this.$props.id,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        tabindex: this.$props.tabIndex
      },
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      tabindex: this.$props.tabIndex,
      onFocusin: this.handleFocus,
      on: this.v3 ? void 0 : {
        "focusin": this.handleFocus,
        "focusout": this.handleBlur,
        "keydown": this.handleKeyDown
      },
      onFocusout: this.handleBlur,
      onKeydown: this.handleKeyDown,
      ref: this.v3 ? function(el) {
        _this.kendoAnchorRef = el;
      } : this._anchor
    }, [startDateInputRendering, (this.$props.allowReverse || this.$props.calendarSettings && this.$props.calendarSettings.allowReverse) && this.$props.swapButton ? reverseButton : separatorMessage, endDateInputRendering, popupRendering]);
  },
  methods: {
    focus: function focus7() {
      var startInput = this.getStartInput();
      if (startInput) {
        startInput.focus();
      }
    },
    focusCalendarElement: function focusCalendarElement() {
      var calendar = this.getCalendar();
      if (calendar) {
        calendar.focus({
          preventScroll: true
        });
      }
    },
    focusDateInputElement: function focusDateInputElement() {
      var startInput = this.getStartInput();
      var endInput = this.getEndInput();
      if (!document || !startInput || !endInput) {
        return;
      }
      if ((this.computedValue.start === null || this.computedValue.end !== null) && document.activeElement !== endInput) {
        startInput.focus({
          preventScroll: true
        });
      } else if (document.activeElement !== startInput) {
        endInput.focus({
          preventScroll: true
        });
      }
    },
    calculateValue: function calculateValue2(props, state) {
      var value2 = props.value !== void 0 ? props.value : state.currentValue;
      return value2 || EMPTY_SELECTIONRANGE;
    },
    calculateShow: function calculateShow(nextProps, nextState) {
      return nextProps.show !== void 0 ? nextProps.show : nextState.currentShow;
    },
    setShow: function setShow3(show4) {
      if (this.currentShow === show4) {
        return;
      }
      this.currentShow = show4;
      this.$emit(show4 ? "open" : "close", {
        component: this
      });
    },
    handleReverseClick: function handleReverseClick(event2) {
      var value2 = {
        start: this.computedValue.end,
        end: this.computedValue.start
      };
      var args = {
        event: event2.event
      };
      this.handleChange(value2, args);
    },
    handleReverseMouseDown: function handleReverseMouseDown(event2) {
      event2.preventDefault();
    },
    handleFocus: function handleFocus8(event2) {
      if (!this.shouldFocusDateInput) {
        this.setShow(true);
      }
      this.$emit("focus", event2);
    },
    calendarBlur: function calendarBlur2() {
      clearTimeout(this._blurTimeout);
      this.createBlurTimeout();
    },
    calendarFocus: function calendarFocus2() {
      clearTimeout(this._blurTimeout);
    },
    createBlurTimeout: function createBlurTimeout3() {
      var _this = this;
      this._blurTimeout = setTimeout(function() {
        var startInput = _this.getStartInput();
        var endInput = _this.getEndInput();
        if (startInput && endInput && canUseDOM && startInput && document.activeElement !== endInput) {
          _this.setShow(false);
        }
      }, 200);
    },
    getStartInput: function getStartInput() {
      return this._startDateInput && this._startDateInput.element ? this._startDateInput.element() : document.getElementById(this._startInputId);
    },
    getEndInput: function getEndInput() {
      return this._endDateInput && this._endDateInput.element ? this._endDateInput.element() : document.getElementById(this._endInputId);
    },
    getCalendar: function getCalendar() {
      return this._calendar && this._calendar.element ? this._calendar : document.getElementById(this._calendarId);
    },
    handleBlur: function handleBlur8(event2) {
      this.createBlurTimeout();
      this.$emit("blur", event2);
    },
    handleEndChange: function handleEndChange(event2) {
      var value2 = {
        start: this.computedValue.start,
        end: cloneDate2(event2.value || void 0)
      };
      this.handleChange(value2, event2);
    },
    handleStartChange: function handleStartChange(event2) {
      var value2 = {
        start: cloneDate2(event2.value || void 0),
        end: this.computedValue.end
      };
      this.handleChange(value2, event2);
    },
    extractRangeFromValue: function extractRangeFromValue2(event2) {
      if (!Array.isArray(event2.value) && !(event2.value instanceof Date)) {
        return event2.value || EMPTY_SELECTIONRANGE;
      }
      var candidate = Array.isArray(event2.value) ? event2.value[0] : event2.value;
      return {
        start: this.computedValue.end !== null ? candidate : this.computedValue.start,
        end: this.computedValue.start !== null ? candidate : this.computedValue.end
      };
    },
    handleCalendarChange: function handleCalendarChange(event2) {
      var value2 = this.extractRangeFromValue(event2);
      this.handleChange(value2, event2);
    },
    handleKeyDown: function handleKeyDown7(event2) {
      var keyCode = event2.keyCode, altKey = event2.altKey;
      var endInput = this.getEndInput();
      var calendar = this.getCalendar();
      if (keyCode === Keys.esc) {
        event2.preventDefault();
        this.shouldFocusDateInput = true;
        this.setShow(false);
      } else if (altKey && keyCode === Keys.down) {
        event2.preventDefault();
        this.shouldFocusCalendar = true;
        this.setShow(true);
      } else if (keyCode === Keys.tab && this.computedShow && calendar && endInput && document && document.activeElement === endInput) {
        event2.preventDefault();
        this.focusCalendarElement();
      }
      this.$emit("keydown", event2);
    },
    handleChange: function handleChange4(value2, event2) {
      this.currentValue = value2;
      this.valueDuringOnChange = value2;
      var args = {
        event: event2.event,
        value: this.computedValue,
        show: this.computedShow,
        component: this,
        target: {
          name: this.$props.name,
          value: this.computedValue,
          show: this.computedShow
        }
      };
      this.$emit("changemodel", this.computedValue);
      this.$emit("update:modelValue", this.computedValue);
      this.$emit("change", args);
      this.valueDuringOnChange = void 0;
    }
  }
};
var DateRangePicker = DateRangePickerVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/datetimepicker/DateTimeSelector.js
var allVue21 = vue_runtime_esm_bundler_exports;
var gh20 = allVue21.h;
var isV321 = allVue21.version && allVue21.version[0] === "3";
var ref5 = allVue21.ref;
var inject12 = allVue21.inject;
var DateTimeSelectorVue2 = {
  name: "KendoDateTimeSelector",
  props: {
    value: Date,
    disabled: {
      type: Boolean,
      default: false
    },
    cancelButton: {
      type: Boolean,
      default: true
    },
    min: {
      type: Date,
      default: MIN_DATE
    },
    max: {
      type: Date,
      default: MAX_DATE
    },
    maxTime: {
      type: Date,
      default: function _default53() {
        return cloneDate(MAX_TIME);
      }
    },
    minTime: {
      type: Date,
      default: function _default54() {
        return cloneDate(MIN_TIME);
      }
    },
    weekNumber: {
      type: Boolean,
      default: false
    },
    steps: {
      type: Object,
      default: function _default55() {
        return {};
      }
    },
    focusedDate: Date,
    format: String,
    calendar: Object
  },
  created: function created12() {
    this._calendarWrap = null;
    this.currentTab = "date";
    this.dateValue = this.$props.value;
    this.timeValue = this.$props.value || MIDNIGHT_DATE2;
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data11() {
    return {
      currentTab: null,
      dateValue: null,
      timeValue: Date
    };
  },
  computed: {
    hasDateValue: function hasDateValue() {
      return this.dateValue !== null;
    },
    computedMinTime: function computedMinTime() {
      return this.$props.minTime !== void 0 ? this.$props.minTime : this.normalizeRange(this.$props.min, this.dateValue);
    },
    computedMaxTime: function computedMaxTime() {
      return this.$props.maxTime !== void 0 ? this.$props.maxTime : this.normalizeRange(this.$props.max, this.dateValue);
    }
  },
  mounted: function mounted13() {
    this._acceptButton = this.$refs.acceptButton;
    this._calendar = this.$refs.calendar;
    this._calendarWrap = this.$refs.calendarWrap;
    this._cancelButton = this.$refs.cancelButton;
    this._timePart = this.$refs.timePart;
    this.focus({
      preventScroll: true
    });
  },
  updated: function updated9() {
    if (this.shouldFocusPart) {
      this.focus({
        preventScroll: true
      });
    }
    this.shouldFocusPart = false;
  },
  // @ts-ignore
  setup: !isV321 ? void 0 : function() {
    var v3 = !!isV321;
    var kendoAnchorRef = ref5(null);
    var kendoLocalizationService = inject12("kendoLocalizationService", {});
    return {
      v3,
      kendoAnchorRef,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render20(createElement) {
    var _this2 = this;
    var h = gh20 || createElement;
    var _a9 = this.$props, disabled = _a9.disabled, cancelButton = _a9.cancelButton, min = _a9.min, max = _a9.max, weekNumber = _a9.weekNumber, focusedDate2 = _a9.focusedDate, format = _a9.format, steps = _a9.steps;
    var rootClassName2 = classNames({
      "k-date-tab": this.currentTab === "date",
      "k-time-tab": this.currentTab === "time",
      "k-disabled": disabled
    }, "k-datetime-wrap");
    var localizationService = provideLocalizationService(this);
    var dateMessage = localizationService.toLanguageString(date, messages[date]);
    var timeMessage = localizationService.toLanguageString(time, messages[time]);
    var cancelMessage = localizationService.toLanguageString(dateTimePickerCancel, messages[dateTimePickerCancel]);
    var setMessage = localizationService.toLanguageString(dateTimePickerSet, messages[dateTimePickerSet]);
    var calendarDefaultRendering = (
      // @ts-ignore  function children
      h(Calendar, {
        ref: "calendar",
        min,
        attrs: this.v3 ? void 0 : {
          min,
          max,
          weekNumber,
          focusedDate: focusedDate2,
          disabled: disabled || this.currentTab !== "date",
          value: this.dateValue
        },
        max,
        weekNumber,
        focusedDate: focusedDate2,
        disabled: disabled || this.currentTab !== "date",
        value: this.dateValue,
        onChange: this.handleCalendarValueChange,
        on: this.v3 ? void 0 : {
          "change": this.handleCalendarValueChange,
          "focus": this.handleFocus,
          "blur": this.handleBlur
        },
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      })
    );
    var calendar = getTemplate.call(this, {
      h,
      template: this.$props.calendar,
      defaultRendering: calendarDefaultRendering
    });
    return h("div", {
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown
      },
      "class": rootClassName2,
      tabindex: -1,
      attrs: this.v3 ? void 0 : {
        tabindex: -1
      }
    }, [h("div", {
      "class": "k-datetime-buttongroup"
    }, [
      // @ts-ignore  function children
      h(ButtonGroup, {
        width: "100%",
        attrs: this.v3 ? void 0 : {
          width: "100%"
        }
      }, this.v3 ? function() {
        return [
          // @ts-ignore  function children
          h(Button, {
            type: "button",
            attrs: _this2.v3 ? void 0 : {
              type: "button",
              selected: _this2.currentTab === "date",
              togglable: true
            },
            selected: _this2.currentTab === "date",
            togglable: true,
            onClick: _this2.handleDateClick,
            on: _this2.v3 ? void 0 : {
              "click": _this2.handleDateClick
            }
          }, _this2.v3 ? function() {
            return [dateMessage];
          } : [dateMessage]),
          // @ts-ignore  function children
          h(Button, {
            type: "button",
            attrs: _this2.v3 ? void 0 : {
              type: "button",
              selected: _this2.currentTab === "time",
              togglable: true
            },
            selected: _this2.currentTab === "time",
            togglable: true,
            onClick: _this2.handleTimeClick,
            on: _this2.v3 ? void 0 : {
              "click": _this2.handleTimeClick
            }
          }, _this2.v3 ? function() {
            return [timeMessage];
          } : [timeMessage])
        ];
      } : [h(Button, {
        type: "button",
        attrs: _this2.v3 ? void 0 : {
          type: "button",
          selected: _this2.currentTab === "date",
          togglable: true
        },
        selected: _this2.currentTab === "date",
        togglable: true,
        onClick: _this2.handleDateClick,
        on: _this2.v3 ? void 0 : {
          "click": _this2.handleDateClick
        }
      }, _this2.v3 ? function() {
        return [dateMessage];
      } : [dateMessage]), h(Button, {
        type: "button",
        attrs: _this2.v3 ? void 0 : {
          type: "button",
          selected: _this2.currentTab === "time",
          togglable: true
        },
        selected: _this2.currentTab === "time",
        togglable: true,
        onClick: _this2.handleTimeClick,
        on: _this2.v3 ? void 0 : {
          "click": _this2.handleTimeClick
        }
      }, _this2.v3 ? function() {
        return [timeMessage];
      } : [timeMessage])])
    ]), h("div", {
      "class": "k-datetime-selector"
    }, [h("div", {
      "class": "k-datetime-calendar-wrap",
      ref: "calendarWrap"
    }, [calendar]), h("div", {
      "class": "k-datetime-time-wrap"
    }, [
      // @ts-ignore  function children
      h(TimePart, {
        key: 1,
        onNowclick: this.handleNowClick,
        on: this.v3 ? void 0 : {
          "nowclick": this.handleNowClick,
          "change": this.handleTimeListContainerChange,
          "mount": this.handleTimePartMount,
          "focus": this.handleFocus,
          "blur": this.handleBlur
        },
        disabled: disabled || this.currentTab !== "time",
        attrs: this.v3 ? void 0 : {
          disabled: disabled || this.currentTab !== "time",
          min: this.computedMinTime || MIN_TIME,
          max: this.computedMaxTime || MAX_TIME,
          value: this.timeValue,
          format,
          steps
        },
        ref: "timePart",
        min: this.computedMinTime || MIN_TIME,
        max: this.computedMaxTime || MAX_TIME,
        value: this.timeValue,
        format,
        steps,
        onChange: this.handleTimeListContainerChange,
        onMount: this.handleTimePartMount,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      })
    ])]), h("div", {
      "class": "k-datetime-footer k-actions k-actions-stretched"
    }, [
      cancelButton && // @ts-ignore  function children
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          title: cancelMessage,
          "aria-label": cancelMessage
        },
        ref: "cancelButton",
        "class": "k-time-cancel",
        onClick: this.handleReject,
        on: this.v3 ? void 0 : {
          "click": this.handleReject
        },
        title: cancelMessage,
        "aria-label": cancelMessage
      }, this.v3 ? function() {
        return [cancelMessage];
      } : [cancelMessage]),
      // @ts-ignore  function children
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          disabled: !this.hasDateValue,
          themeColor: "primary",
          title: setMessage,
          "aria-label": setMessage
        },
        ref: "acceptButton",
        disabled: !this.hasDateValue,
        themeColor: "primary",
        "class": "k-time-accept",
        onClick: this.handleAccept,
        on: this.v3 ? void 0 : {
          "click": this.handleAccept
        },
        title: setMessage,
        "aria-label": setMessage
      }, this.v3 ? function() {
        return [setMessage];
      } : [setMessage])
    ])]);
  },
  methods: {
    handleBlur: function handleBlur9(event2) {
      this.$emit("blur", event2);
    },
    handleFocus: function handleFocus9(event2) {
      this.$emit("focus", event2);
    },
    focus: function focus8(args) {
      var _this = this;
      this.$nextTick(function() {
        if (_this.currentTab === "time" && _this._timePart) {
          _this._timePart.focus(args);
        }
        var calendarElement2 = _this.calendarElement();
        if (_this.currentTab === "date" && calendarElement2) {
          calendarElement2.focus(args);
        }
      });
    },
    calendarElement: function calendarElement() {
      return this._calendar && this._calendar.$el ? this._calendar : null;
    },
    normalizeRange: function normalizeRange(candidate, value2) {
      return isEqualDate(candidate, value2 || getToday()) ? candidate : null;
    },
    hasActiveButton: function hasActiveButton3() {
      if (!this._acceptButton) {
        return false;
      }
      return canUseDOM && (document.activeElement === this._acceptButton.$el || document.activeElement === this._cancelButton.$el);
    },
    mergeTime: function mergeTime3(current2, candidate) {
      return current2 && candidate ? setTime(candidate, current2) : candidate;
    },
    mergeDate: function mergeDate(candidate, value2) {
      return candidate ? setTime(candidate || getToday(), value2) : value2;
    },
    move: function move2(direction) {
      if (direction === "right" && this.currentTab === "time") {
        return;
      }
      if (direction === "left" && this.currentTab === "date") {
        return;
      }
      var nextPart = direction === "left" ? "date" : "time";
      this.shouldFocusPart = true;
      this.currentTab = nextPart;
    },
    handleReject: function handleReject2(event2) {
      this.dateValue = this.$props.value;
      this.timeValue = this.$props.value || MIDNIGHT_DATE2;
      var value2 = this.mergeDate(this.$props.value, this.$props.value || MIDNIGHT_DATE2);
      var args = {
        event: event2,
        target: this,
        value: value2
      };
      this.$emit("reject", args);
    },
    handleAccept: function handleAccept2(event2, timeOverride) {
      if (!this.dateValue || !this.timeValue || !this.hasDateValue) {
        return;
      }
      var value2 = this.mergeDate(this.dateValue, timeOverride || this.timeValue);
      this.$emit("change", {
        event: event2,
        value: value2,
        target: this
      });
    },
    handleNowClick: function handleNowClick2(event2) {
      this.timeValue = getNow();
      this.handleAccept(event2, getNow());
    },
    handleCalendarValueChange: function handleCalendarValueChange2(event2) {
      event2.event.stopPropagation();
      this.dateValue = event2.value;
      this.currentTab = "time";
      this.shouldFocusPart = true;
    },
    handleTimeListContainerChange: function handleTimeListContainerChange(candidate) {
      this.timeValue = candidate;
    },
    handleDateClick: function handleDateClick(event2) {
      event2.stopPropagation();
      this.move("left");
    },
    handleTimeClick: function handleTimeClick(event2) {
      event2.stopPropagation();
      this.move("right");
    },
    handleKeyDown: function handleKeyDown8(event2) {
      var keyCode = event2.keyCode, altKey = event2.altKey;
      this.$emit("keydown", event2);
      switch (keyCode) {
        case Keys.enter:
          if (!this.hasActiveButton() && this.hasDateValue) {
            this.handleAccept(event2);
          }
          return;
        case Keys.left:
          if (!altKey) {
            return;
          }
          this.move("left");
          return;
        case Keys.right:
          if (!altKey) {
            return;
          }
          this.move("right");
          return;
        default:
          return;
      }
    },
    handleTimePartMount: function handleTimePartMount(value2) {
      this.timeValue = value2;
    }
  }
};
var DateTimeSelector = DateTimeSelectorVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/datetimepicker/DateTimePicker.js
var allVue22 = vue_runtime_esm_bundler_exports;
var gh21 = allVue22.h;
var isV322 = allVue22.version && allVue22.version[0] === "3";
var ref6 = allVue22.ref;
var inject13 = allVue22.inject;
var DateTimePickerVue2 = {
  name: "KendoDateTimePicker",
  // @ts-ignore
  emits: {
    "changemodel": null,
    "update:modelValue": null,
    "iconclick": null,
    "change": null,
    "focus": null,
    "blur": null,
    "keydown": null,
    "open": null,
    "close": null
  },
  props: {
    modelValue: {
      type: Date,
      default: void 0
    },
    defaultShow: {
      type: Boolean,
      default: false
    },
    defaultValue: {
      type: Date,
      default: null
    },
    disabled: {
      type: Boolean,
      default: false
    },
    dateInput: {
      type: [String, Object, Function],
      default: function _default56() {
        return void 0;
      }
    },
    popup: {
      type: [String, Object, Function],
      default: function _default57() {
        return void 0;
      }
    },
    calendar: {
      type: [String, Object, Function],
      default: function _default58() {
        return void 0;
      }
    },
    focusedDate: Date,
    format: {
      type: [String, Object],
      default: function _default59() {
        return "g";
      }
    },
    formatPlaceholder: {
      type: [String, Object],
      default: function _default60() {
        return defaultFormatPlaceholder;
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator13(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator14(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator15(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    min: {
      type: Date,
      default: function _default61() {
        return MIN_DATE;
      }
    },
    max: {
      type: Date,
      default: function _default62() {
        return MAX_DATE;
      }
    },
    maxTime: {
      type: Date,
      default: function _default63() {
        return cloneDate2(MAX_TIME);
      }
    },
    minTime: {
      type: Date,
      default: function _default64() {
        return cloneDate2(MIN_TIME2);
      }
    },
    name: String,
    label: String,
    placeholder: String,
    popupSettings: {
      type: Object,
      default: function _default65() {
        return {};
      }
    },
    show: {
      type: Boolean,
      default: void 0
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    title: {
      type: String,
      default: function _default66() {
        return "";
      }
    },
    steps: {
      type: Object,
      default: function _default67() {
        return {};
      }
    },
    value: Date,
    weekNumber: {
      type: Boolean,
      default: false
    },
    width: String,
    validationMessage: String,
    required: {
      type: Boolean,
      default: false
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    validate: Boolean,
    valid: {
      type: Boolean,
      default: void 0
    },
    cancelButton: {
      type: Boolean,
      default: true
    }
  },
  model: {
    event: "changemodel"
  },
  created: function created13() {
    this._anchor = guid();
    this._popupId = "popup" + guid();
    this._wrapper = null;
    this._dateInput = null;
    this._dateTimeSelector = null;
    validatePackage(packageMetadata);
    this.currentValue = this.$props.defaultValue;
    this.currentShow = this.$props.defaultShow;
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data12() {
    return {
      currentValue: null,
      currentShow: false,
      valueDuringOnChange: void 0,
      showDuringOnChange: void 0,
      shouldFocusDateInput: false,
      isFocused: false
    };
  },
  computed: {
    computedValue: function computedValue6() {
      var value2 = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentValue;
      return value2 !== null ? cloneDate2(value2) : null;
    },
    computedShow: function computedShow3() {
      return this.showDuringOnChange !== void 0 ? this.showDuringOnChange : this.$props.show !== void 0 ? this.$props.show : this.currentShow;
    }
  },
  watch: {
    show: function show3(_newShow, oldShow) {
      this._oldShow = oldShow;
    },
    currentShow: function currentShow3(_newShow, oldShow) {
      this._oldShow = oldShow;
    }
  },
  mounted: function mounted14() {
    if (this.computedShow) {
      this.$forceUpdate();
    }
    var dateInputElement2 = this.dateInputElement();
    this._dateTimeSelector = this.$refs.dateTimeSelector;
    this._wrapper = this.v3 ? this.kendoAnchorRef : this.$refs[this._anchor];
    this._dateInput = this.v3 ? this.dateInputRef : this.$refs.dateInput;
    if (dateInputElement2) {
      dateInputElement2.setAttribute("aria-haspopup", "true");
    }
  },
  updated: function updated10() {
    var dateInputElement2 = this.dateInputElement();
    this._dateTimeSelector = this.$refs.dateTimeSelector;
    this._wrapper = this.v3 ? this.kendoAnchorRef : this.$refs[this._anchor];
    if (this._dateTimeSelector && this.computedShow && !this._oldShow) {
      this._dateTimeSelector.focus({
        preventScroll: true
      });
    }
    if (dateInputElement2 && !this.computedShow && this.shouldFocusDateInput) {
      this._dateInput.focus({
        preventScroll: true
      });
    }
    this.shouldFocusDateInput = false;
  },
  // @ts-ignore
  setup: !isV322 ? void 0 : function() {
    var v3 = !!isV322;
    var kendoAnchorRef = ref6(null);
    var kendoLocalizationService = inject13("kendoLocalizationService", {});
    return {
      v3,
      kendoAnchorRef,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render21(createElement) {
    var _a9;
    var _this = this;
    var h = gh21 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _b3 = this.$props, disabled = _b3.disabled, tabIndex = _b3.tabIndex, title = _b3.title, id = _b3.id, format = _b3.format, formatPlaceholder = _b3.formatPlaceholder, min = _b3.min, max = _b3.max, weekNumber = _b3.weekNumber, focusedDate2 = _b3.focusedDate, width = _b3.width, name = _b3.name, steps = _b3.steps, placeholder = _b3.placeholder, validationMessage = _b3.validationMessage, required = _b3.required, validityStyles = _b3.validityStyles, cancelButton = _b3.cancelButton, minTime = _b3.minTime, maxTime = _b3.maxTime, ariaLabelledBy = _b3.ariaLabelledBy, ariaDescribedBy = _b3.ariaDescribedBy, size = _b3.size, fillMode = _b3.fillMode, rounded = _b3.rounded;
    var _c2 = this.$props.popupSettings, popupClass = _c2.popupClass, appendTo = _c2.appendTo, animate2 = _c2.animate;
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var dateInput = this.$props.dateInput ? templateRendering.call(this, this.$props.dateInput, getListeners.call(this)) : void 0;
    var dateInputDefaultRendering = (
      // @ts-ignore  function children
      h(DateInput, {
        ref: this.v3 ? function(el) {
          _this.dateInputRef = el;
        } : "dateInput",
        placeholder,
        attrs: this.v3 ? void 0 : {
          placeholder,
          disabled,
          format,
          formatPlaceholder,
          id,
          ariaLabelledBy,
          ariaDescribedBy,
          max,
          min,
          minTime,
          maxTime,
          name,
          size: null,
          rounded: null,
          fillMode: null,
          required,
          steps,
          tabIndex: !this.computedShow ? tabIndex : -1,
          title,
          valid: this.validity().valid,
          validationMessage,
          validityStyles,
          value: this.computedValue,
          ariaHasPopup: "dialog",
          ariaExpanded: this.computedShow,
          ariaRole: "combobox",
          ariaControls: this._popupId
        },
        disabled,
        format,
        formatPlaceholder,
        id,
        ariaLabelledBy,
        ariaDescribedBy,
        max,
        min,
        minTime,
        maxTime,
        name,
        size: null,
        rounded: null,
        fillMode: null,
        onChange: this.handleValueChange,
        on: this.v3 ? void 0 : {
          "change": this.handleValueChange
        },
        required,
        steps,
        tabIndex: !this.computedShow ? tabIndex : -1,
        title,
        valid: this.validity().valid,
        validationMessage,
        validityStyles,
        value: this.computedValue,
        ariaHasPopup: "dialog",
        ariaExpanded: this.computedShow,
        ariaRole: "combobox",
        ariaControls: this._popupId
      }, this.v3 ? function() {
        return [defaultSlot];
      } : [defaultSlot])
    );
    var dateInputRendering = getTemplate.call(this, {
      h,
      template: dateInput,
      defaultRendering: dateInputDefaultRendering
    });
    var calendar = this.$props.calendar ? templateRendering.call(this, this.$props.calendar, getListeners.call(this)) : void 0;
    var dataTimeSelector = (
      // @ts-ignore  function children
      h(DateTimeSelector, {
        ref: "dateTimeSelector",
        cancelButton,
        attrs: this.v3 ? void 0 : {
          cancelButton,
          value: this.computedValue,
          disabled,
          weekNumber,
          min: this.$props.min,
          max: this.$props.max,
          minTime,
          maxTime,
          focusedDate: focusedDate2,
          format,
          calendar,
          steps
        },
        value: this.computedValue,
        onChange: this.handleValueChange,
        on: this.v3 ? void 0 : {
          "change": this.handleValueChange,
          "reject": this.handleReject,
          "focus": this.timeSelectorFocus,
          "blur": this.timeSelectorBlur,
          "keydown": this.handleKeyDown
        },
        onReject: this.handleReject,
        disabled,
        weekNumber,
        min: this.$props.min,
        max: this.$props.max,
        minTime,
        maxTime,
        focusedDate: focusedDate2,
        format,
        calendar,
        steps,
        onFocus: this.timeSelectorFocus,
        onBlur: this.timeSelectorBlur,
        onKeydown: this.handleKeyDown
      })
    );
    var popupClassNames = classNames("k-datetime-container k-reset", popupClass);
    var popup = this.$props.popup ? templateRendering.call(this, this.$props.popup, getListeners.call(this)) : void 0;
    var popupDefaultRendering = (
      // @ts-ignore function children
      h(Popup, {
        show: this.computedShow,
        attrs: this.v3 ? void 0 : {
          show: this.computedShow,
          anchor: this._anchor,
          popupClass: popupClassNames,
          id: this._popupId,
          anchorAlign: {
            horizontal: "left",
            vertical: "bottom"
          },
          popupAlign: {
            horizontal: "left",
            vertical: "top"
          },
          appendTo,
          animate: animate2
        },
        anchor: this._anchor,
        popupClass: popupClassNames,
        id: this._popupId,
        anchorAlign: {
          horizontal: "left",
          vertical: "bottom"
        },
        popupAlign: {
          horizontal: "left",
          vertical: "top"
        },
        appendTo,
        animate: animate2
      }, this.v3 ? function() {
        return [dataTimeSelector];
      } : [dataTimeSelector])
    );
    var popupRendering = getTemplate.call(this, {
      h,
      template: popup,
      defaultRendering: popupDefaultRendering,
      defaultSlots: dataTimeSelector
    });
    var dateTimePicker = h("div", {
      "class": classNames("k-input", "k-datetimepicker", (_a9 = {}, _a9["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a9["k-input-".concat(fillMode)] = fillMode, _a9["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a9["k-invalid"] = !isValid, _a9["k-required"] = this.required, _a9["k-disabled"] = this.$props.disabled, _a9)),
      ref: this.v3 ? function(el) {
        _this.kendoAnchorRef = el;
      } : this._anchor,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      style: {
        width
      },
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur
    }, [
      dateInputRendering,
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "calendar",
          svgIcon: calendarIcon,
          title: provideLocalizationService(this).toLanguageString(toggleDateTimeSelector, messages[toggleDateTimeSelector]),
          rounded: null,
          "aria-controls": this._popupId,
          "aria-label": provideLocalizationService(this).toLanguageString(toggleDateTimeSelector, messages[toggleDateTimeSelector])
        },
        tabIndex: -1,
        icon: "calendar",
        svgIcon: calendarIcon,
        onMousedown: this.handleIconMouseDown,
        on: this.v3 ? void 0 : {
          "mousedown": this.handleIconMouseDown,
          "click": this.handleDateIconClick
        },
        onClick: this.handleDateIconClick,
        title: provideLocalizationService(this).toLanguageString(toggleDateTimeSelector, messages[toggleDateTimeSelector]),
        rounded: null,
        "class": "k-input-button",
        "aria-controls": this._popupId,
        "aria-label": provideLocalizationService(this).toLanguageString(toggleDateTimeSelector, messages[toggleDateTimeSelector])
      }),
      popupRendering
    ]);
    return this.$props.label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label: this.$props.label,
        attrs: this.v3 ? void 0 : {
          label: this.$props.label,
          editorId: id,
          editorValid: isValid,
          editorValue: this.getDateInputText(),
          editorPlaceholder: this.$props.placeholder,
          editorDisabled: this.$props.disabled
        },
        editorId: id,
        editorValid: isValid,
        editorValue: this.getDateInputText(),
        editorPlaceholder: this.$props.placeholder,
        editorDisabled: this.$props.disabled,
        style: {
          width
        }
      }, this.v3 ? function() {
        return [dateTimePicker];
      } : [dateTimePicker])
    ) : dateTimePicker;
  },
  methods: {
    validity: function validity4() {
      var inRange2 = isInDateRange(this.computedValue, this.$props.min, this.$props.max) && isInTimeRange(this.computedValue, this.$props.minTime || MIN_TIME2, this.$props.maxTime || MAX_TIME);
      var customError = this.$props.validationMessage !== void 0;
      var isValid = (!this.$props.required || this.computedValue !== null) && inRange2;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        rangeOverflow: this.computedValue && this.$props.max.getTime() < this.computedValue.getTime() || false,
        rangeUnderflow: this.computedValue && this.computedValue.getTime() < this.$props.min.getTime() || false,
        valid,
        valueMissing: this.computedValue === null
      };
    },
    getDateInputText: function getDateInputText3() {
      return this.computedValue ? true : this._dateInput ? this._dateInput._element.value : "";
    },
    focus: function focus9() {
      var dateInputElement2 = this.dateInputElement();
      if (dateInputElement2) {
        dateInputElement2.focus();
      }
    },
    setShow: function setShow4(show4) {
      if (this.computedShow === show4) {
        return;
      }
      this.currentShow = show4;
      this.$emit(show4 ? "open" : "close", {
        component: this
      });
    },
    handleReject: function handleReject3() {
      this.setShow(false);
    },
    handleValueChange: function handleValueChange3(event2) {
      this.currentValue = cloneDate2(event2.value || void 0);
      this.valueDuringOnChange = event2.value;
      this.showDuringOnChange = false;
      this.shouldFocusDateInput = true;
      this.$emit("changemodel", this.computedValue);
      this.$emit("update:modelValue", this.computedValue);
      this.$emit("change", {
        event: event2.event,
        value: this.computedValue,
        show: this.computedShow,
        component: this,
        target: {
          name: this.$props.name,
          value: this.computedValue,
          valueAsDate: this.computedValue
        }
      });
      this.valueDuringOnChange = void 0;
      this.showDuringOnChange = void 0;
      this.setShow(false);
    },
    handleFocus: function handleFocus10(event2) {
      this.isFocused = true;
      this.$emit("focus", event2);
    },
    handleBlur: function handleBlur10(event2) {
      this.createBlurTimeout();
      this.$emit("blur", event2);
    },
    timeSelectorBlur: function timeSelectorBlur(event2) {
      this.$emit("blur", event2);
      clearTimeout(this._blurTimeout);
      this.createBlurTimeout();
    },
    timeSelectorFocus: function timeSelectorFocus() {
      clearTimeout(this._blurTimeout);
    },
    createBlurTimeout: function createBlurTimeout4() {
      var _this = this;
      var that = this;
      this._blurTimeout = setTimeout(function() {
        _this.isFocused = false;
        var isInPopup = document.activeElement && document.activeElement.closest("#".concat(that._popupId));
        var isElementActive = that._dateInput && canUseDOM && document.activeElement !== that._dateInput.element();
        if (isElementActive && !isInPopup) {
          that.setShow(false);
        }
      }, 200);
    },
    handleDateIconClick: function handleDateIconClick(event2) {
      if (this.$props.disabled) {
        return;
      }
      this.shouldFocusDateInput = true;
      this.setShow(!this.computedShow);
      this.$emit("iconclick", event2);
    },
    handleIconMouseDown: function handleIconMouseDown3(event2) {
      event2.preventDefault();
    },
    handleKeyDown: function handleKeyDown9(event2) {
      var altKey = event2.altKey, keyCode = event2.keyCode;
      if (keyCode === Keys.tab && this._dateInput && event2.target !== this._dateInput._element) {
        event2.preventDefault();
        this.$data.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }
      if (keyCode === Keys.esc) {
        this.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }
      if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
        event2.preventDefault();
        event2.stopPropagation();
        this.shouldFocusDateInput = keyCode === Keys.up;
        this.setShow(keyCode === Keys.down);
      }
      this.$emit("keydown", event2);
    },
    dateInputElement: function dateInputElement() {
      return this._dateInput && this._dateInput.$el || this._wrapper && this._wrapper.querySelector(".k-dateinput-wrap > input.k-input");
    }
  }
};
var DateTimePicker = DateTimePickerVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/common/PickerWrap.js
var allVue23 = vue_runtime_esm_bundler_exports;
var gh22 = allVue23.h;
var isV323 = allVue23.version && allVue23.version[0] === "3";
var PickerWrapVue2 = {
  props: {
    id: String
  },
  // @ts-ignore
  setup: !isV323 ? void 0 : function() {
    var v3 = !!isV323;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render22(createElement) {
    var h = gh22 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("span", {
      id: this.$props.id,
      attrs: this.v3 ? void 0 : {
        id: this.$props.id
      },
      "class": "k-picker-wrap"
    }, [defaultSlot]);
  }
};
var PickerWrap = PickerWrapVue2;

export {
  CalendarCellVue2,
  CalendarCell,
  CalendarWeekCellVue2,
  CalendarWeekCell,
  CalendarViewEnum,
  CalendarHeaderTitleVue2,
  CalendarHeaderTitle,
  CalendarVue2,
  Calendar,
  DateInputVue2,
  DateInput,
  ToggleButtonVue2,
  ToggleButton,
  DatePickerVue2,
  DatePicker,
  TimePickerVue2,
  TimePicker,
  DateRangePicker,
  DateTimePickerVue2,
  DateTimePicker,
  PickerWrapVue2,
  PickerWrap
};
//# sourceMappingURL=chunk-QFWCMYCT.js.map
