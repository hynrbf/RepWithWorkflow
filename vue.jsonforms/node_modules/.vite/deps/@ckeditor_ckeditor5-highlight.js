import "./chunk-VQXVBVB4.js";
import {
  ButtonView,
  SplitButtonView,
  ToolbarSeparatorView,
  addToolbarToDropdown,
  createDropdown
} from "./chunk-SGTDNT4V.js";
import "./chunk-6LVMAMLV.js";
import {
  Command,
  Plugin,
  icons
} from "./chunk-JI2V5GJZ.js";
import "./chunk-6DXDGCMU.js";
import "./chunk-HM4MQYWN.js";

// node_modules/@ckeditor/ckeditor5-highlight/src/highlightcommand.js
var HighlightCommand = class extends Command {
  /**
   * @inheritDoc
   */
  refresh() {
    const model = this.editor.model;
    const doc = model.document;
    this.value = doc.selection.getAttribute("highlight");
    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, "highlight");
  }
  /**
   * Executes the command.
   *
   * @param options Options for the executed command.
   * @param options.value The value to apply.
   *
   * @fires execute
   */
  execute(options = {}) {
    const model = this.editor.model;
    const document = model.document;
    const selection = document.selection;
    const highlighter = options.value;
    model.change((writer) => {
      if (selection.isCollapsed) {
        const position = selection.getFirstPosition();
        if (selection.hasAttribute("highlight")) {
          const isSameHighlight = (value) => {
            return value.item.hasAttribute("highlight") && value.item.getAttribute("highlight") === this.value;
          };
          const highlightStart = position.getLastMatchingPosition(isSameHighlight, { direction: "backward" });
          const highlightEnd = position.getLastMatchingPosition(isSameHighlight);
          const highlightRange = writer.createRange(highlightStart, highlightEnd);
          if (!highlighter || this.value === highlighter) {
            if (!position.isEqual(highlightEnd)) {
              writer.removeAttribute("highlight", highlightRange);
            }
            writer.removeSelectionAttribute("highlight");
          } else {
            if (!position.isEqual(highlightEnd)) {
              writer.setAttribute("highlight", highlighter, highlightRange);
            }
            writer.setSelectionAttribute("highlight", highlighter);
          }
        } else if (highlighter) {
          writer.setSelectionAttribute("highlight", highlighter);
        }
      } else {
        const ranges = model.schema.getValidRanges(selection.getRanges(), "highlight");
        for (const range of ranges) {
          if (highlighter) {
            writer.setAttribute("highlight", highlighter, range);
          } else {
            writer.removeAttribute("highlight", range);
          }
        }
      }
    });
  }
};

// node_modules/@ckeditor/ckeditor5-highlight/src/highlightediting.js
var HighlightEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "HighlightEditing";
  }
  /**
   * @inheritDoc
   */
  constructor(editor) {
    super(editor);
    editor.config.define("highlight", {
      options: [
        {
          model: "yellowMarker",
          class: "marker-yellow",
          title: "Yellow marker",
          color: "var(--ck-highlight-marker-yellow)",
          type: "marker"
        },
        {
          model: "greenMarker",
          class: "marker-green",
          title: "Green marker",
          color: "var(--ck-highlight-marker-green)",
          type: "marker"
        },
        {
          model: "pinkMarker",
          class: "marker-pink",
          title: "Pink marker",
          color: "var(--ck-highlight-marker-pink)",
          type: "marker"
        },
        {
          model: "blueMarker",
          class: "marker-blue",
          title: "Blue marker",
          color: "var(--ck-highlight-marker-blue)",
          type: "marker"
        },
        {
          model: "redPen",
          class: "pen-red",
          title: "Red pen",
          color: "var(--ck-highlight-pen-red)",
          type: "pen"
        },
        {
          model: "greenPen",
          class: "pen-green",
          title: "Green pen",
          color: "var(--ck-highlight-pen-green)",
          type: "pen"
        }
      ]
    });
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.model.schema.extend("$text", { allowAttributes: "highlight" });
    const options = editor.config.get("highlight.options");
    editor.conversion.attributeToElement(_buildDefinition(options));
    editor.commands.add("highlight", new HighlightCommand(editor));
  }
};
function _buildDefinition(options) {
  const definition = {
    model: {
      key: "highlight",
      values: []
    },
    view: {}
  };
  for (const option of options) {
    definition.model.values.push(option.model);
    definition.view[option.model] = {
      name: "mark",
      classes: option.class
    };
  }
  return definition;
}

// node_modules/@ckeditor/ckeditor5-highlight/src/highlightui.js
import markerIcon from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-highlight/theme/icons/marker.svg";
import penIcon from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-highlight/theme/icons/pen.svg";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-highlight/theme/highlight.css";
var HighlightUI = class extends Plugin {
  /**
   * Returns the localized option titles provided by the plugin.
   *
   * The following localized titles corresponding with default
   * {@link module:highlight/highlightconfig~HighlightConfig#options} are available:
   *
   * * `'Yellow marker'`,
   * * `'Green marker'`,
   * * `'Pink marker'`,
   * * `'Blue marker'`,
   * * `'Red pen'`,
   * * `'Green pen'`.
   */
  get localizedOptionTitles() {
    const t = this.editor.t;
    return {
      "Yellow marker": t("Yellow marker"),
      "Green marker": t("Green marker"),
      "Pink marker": t("Pink marker"),
      "Blue marker": t("Blue marker"),
      "Red pen": t("Red pen"),
      "Green pen": t("Green pen")
    };
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "HighlightUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const options = this.editor.config.get("highlight.options");
    for (const option of options) {
      this._addHighlighterButton(option);
    }
    this._addRemoveHighlightButton();
    this._addDropdown(options);
  }
  /**
   * Creates the "Remove highlight" button.
   */
  _addRemoveHighlightButton() {
    const t = this.editor.t;
    const command = this.editor.commands.get("highlight");
    this._addButton("removeHighlight", t("Remove highlight"), icons.eraser, null, (button) => {
      button.bind("isEnabled").to(command, "isEnabled");
    });
  }
  /**
   * Creates a toolbar button from the provided highlight option.
   */
  _addHighlighterButton(option) {
    const command = this.editor.commands.get("highlight");
    this._addButton("highlight:" + option.model, option.title, getIconForType(option.type), option.model, decorateHighlightButton);
    function decorateHighlightButton(button) {
      button.bind("isEnabled").to(command, "isEnabled");
      button.bind("isOn").to(command, "value", (value) => value === option.model);
      button.iconView.fillColor = option.color;
      button.isToggleable = true;
    }
  }
  /**
   * Internal method for creating highlight buttons.
   *
   * @param name The name of the button.
   * @param label The label for the button.
   * @param icon The button icon.
   * @param value The `value` property passed to the executed command.
   * @param decorateButton A callback getting ButtonView instance so that it can be further customized.
   */
  _addButton(name, label, icon, value, decorateButton) {
    const editor = this.editor;
    editor.ui.componentFactory.add(name, (locale) => {
      const buttonView = new ButtonView(locale);
      const localized = this.localizedOptionTitles[label] ? this.localizedOptionTitles[label] : label;
      buttonView.set({
        label: localized,
        icon,
        tooltip: true
      });
      buttonView.on("execute", () => {
        editor.execute("highlight", { value });
        editor.editing.view.focus();
      });
      decorateButton(buttonView);
      return buttonView;
    });
  }
  /**
   * Creates the split button dropdown UI from the provided highlight options.
   */
  _addDropdown(options) {
    const editor = this.editor;
    const t = editor.t;
    const componentFactory = editor.ui.componentFactory;
    const startingHighlighter = options[0];
    const optionsMap = options.reduce((retVal, option) => {
      retVal[option.model] = option;
      return retVal;
    }, {});
    componentFactory.add("highlight", (locale) => {
      const command = editor.commands.get("highlight");
      const dropdownView = createDropdown(locale, SplitButtonView);
      const splitButtonView = dropdownView.buttonView;
      splitButtonView.set({
        label: t("Highlight"),
        tooltip: true,
        // Holds last executed highlighter.
        lastExecuted: startingHighlighter.model,
        // Holds current highlighter to execute (might be different then last used).
        commandValue: startingHighlighter.model,
        isToggleable: true
      });
      splitButtonView.bind("icon").to(command, "value", (value) => getIconForType(getActiveOption(value, "type")));
      splitButtonView.bind("color").to(command, "value", (value) => getActiveOption(value, "color"));
      splitButtonView.bind("commandValue").to(command, "value", (value) => getActiveOption(value, "model"));
      splitButtonView.bind("isOn").to(command, "value", (value) => !!value);
      splitButtonView.delegate("execute").to(dropdownView);
      const buttonsCreator = () => {
        const buttons = options.map((option) => {
          const buttonView = componentFactory.create("highlight:" + option.model);
          this.listenTo(buttonView, "execute", () => {
            dropdownView.buttonView.set({ lastExecuted: option.model });
          });
          return buttonView;
        });
        buttons.push(new ToolbarSeparatorView());
        buttons.push(componentFactory.create("removeHighlight"));
        return buttons;
      };
      dropdownView.bind("isEnabled").to(command, "isEnabled");
      addToolbarToDropdown(dropdownView, buttonsCreator, {
        enableActiveItemFocusOnDropdownOpen: true,
        ariaLabel: t("Text highlight toolbar")
      });
      bindToolbarIconStyleToActiveColor(dropdownView);
      splitButtonView.on("execute", () => {
        editor.execute("highlight", { value: splitButtonView.commandValue });
      });
      this.listenTo(dropdownView, "execute", () => {
        editor.editing.view.focus();
      });
      function getActiveOption(current, key) {
        const whichHighlighter = !current || current === splitButtonView.lastExecuted ? splitButtonView.lastExecuted : current;
        return optionsMap[whichHighlighter][key];
      }
      return dropdownView;
    });
  }
};
function bindToolbarIconStyleToActiveColor(dropdownView) {
  const actionView = dropdownView.buttonView.actionView;
  actionView.iconView.bind("fillColor").to(dropdownView.buttonView, "color");
}
function getIconForType(type) {
  return type === "marker" ? markerIcon : penIcon;
}

// node_modules/@ckeditor/ckeditor5-highlight/src/highlight.js
var Highlight = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [HighlightEditing, HighlightUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Highlight";
  }
};
export {
  Highlight,
  HighlightEditing,
  HighlightUI
};
/*! Bundled license information:

@ckeditor/ckeditor5-highlight/src/highlightcommand.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-highlight/src/highlightediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-highlight/src/highlightui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-highlight/src/highlight.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-highlight/src/augmentation.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-highlight/src/index.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)
*/
//# sourceMappingURL=@ckeditor_ckeditor5-highlight.js.map
