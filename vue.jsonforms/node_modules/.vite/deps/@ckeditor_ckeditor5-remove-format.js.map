{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-remove-format/src/removeformatui.js", "../../@ckeditor/ckeditor5-remove-format/src/removeformatcommand.js", "../../@ckeditor/ckeditor5-remove-format/src/removeformatediting.js", "../../@ckeditor/ckeditor5-remove-format/src/removeformat.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module remove-format/removeformatui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport removeFormatIcon from '../theme/icons/remove-format.svg';\nconst REMOVE_FORMAT = 'removeFormat';\n/**\n * The remove format UI plugin. It registers the `'removeFormat'` button which can be\n * used in the toolbar.\n */\nexport default class RemoveFormatUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'RemoveFormatUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add(REMOVE_FORMAT, locale => {\n            const command = editor.commands.get(REMOVE_FORMAT);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Remove Format'),\n                icon: removeFormatIcon,\n                tooltip: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute the command.\n            this.listenTo(view, 'execute', () => {\n                editor.execute(REMOVE_FORMAT);\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n/**\n * The remove format command.\n *\n * It is used by the {@link module:remove-format/removeformat~RemoveFormat remove format feature}\n * to clear the formatting in the selection.\n *\n * ```ts\n * editor.execute( 'removeFormat' );\n * ```\n */\nexport default class RemoveFormatCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        this.isEnabled = !!first(this._getFormattingItems(model.document.selection, model.schema));\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        model.change(writer => {\n            for (const item of this._getFormattingItems(model.document.selection, schema)) {\n                if (item.is('selection')) {\n                    for (const attributeName of this._getFormattingAttributes(item, schema)) {\n                        writer.removeSelectionAttribute(attributeName);\n                    }\n                }\n                else {\n                    // Workaround for items with multiple removable attributes. See\n                    // https://github.com/ckeditor/ckeditor5-remove-format/pull/1#pullrequestreview-220515609\n                    const itemRange = writer.createRangeOn(item);\n                    for (const attributeName of this._getFormattingAttributes(item, schema)) {\n                        writer.removeAttribute(attributeName, itemRange);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Returns an iterable of items in a selection (including the selection itself) that have formatting model\n     * attributes to be removed by the feature.\n     *\n     * @param schema The schema describing the item.\n     */\n    *_getFormattingItems(selection, schema) {\n        const itemHasRemovableFormatting = (item) => {\n            return !!first(this._getFormattingAttributes(item, schema));\n        };\n        // Check formatting on selected items that are not blocks.\n        for (const curRange of selection.getRanges()) {\n            for (const item of curRange.getItems()) {\n                if (!schema.isBlock(item) && itemHasRemovableFormatting(item)) {\n                    yield item;\n                }\n            }\n        }\n        // Check formatting from selected blocks.\n        for (const block of selection.getSelectedBlocks()) {\n            if (itemHasRemovableFormatting(block)) {\n                yield block;\n            }\n        }\n        // Finally the selection might be formatted as well, so make sure to check it.\n        if (itemHasRemovableFormatting(selection)) {\n            yield selection;\n        }\n    }\n    /**\n     * Returns an iterable of formatting attributes of a given model item.\n     *\n     * **Note:** Formatting items have the `isFormatting` property set to `true`.\n     *\n     * @param schema The schema describing the item.\n     * @returns The names of formatting attributes found in a given item.\n     */\n    *_getFormattingAttributes(item, schema) {\n        for (const [attributeName] of item.getAttributes()) {\n            const attributeProperties = schema.getAttributeProperties(attributeName);\n            if (attributeProperties && attributeProperties.isFormatting) {\n                yield attributeName;\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module remove-format/removeformatediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport RemoveFormatCommand from './removeformatcommand';\n/**\n * The remove format editing plugin.\n *\n * It registers the {@link module:remove-format/removeformatcommand~RemoveFormatCommand removeFormat} command.\n */\nexport default class RemoveFormatEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'RemoveFormatEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        editor.commands.add('removeFormat', new RemoveFormatCommand(editor));\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module remove-format/removeformat\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport RemoveFormatUI from './removeformatui';\nimport RemoveFormatEditing from './removeformatediting';\n/**\n * The remove format plugin.\n *\n * This is a \"glue\" plugin which loads the {@link module:remove-format/removeformatediting~RemoveFormatEditing}\n * and {@link module:remove-format/removeformatui~RemoveFormatUI} plugins.\n *\n * For a detailed overview, check out the {@glink features/remove-format remove format} feature documentation.\n */\nexport default class RemoveFormat extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [RemoveFormatEditing, RemoveFormatUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'RemoveFormat';\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AASA,OAAO,sBAAsB;AAC7B,IAAM,gBAAgB;AAKtB,IAAqB,iBAArB,cAA4C,OAAO;AAAA;AAAA;AAAA;AAAA,EAI/C,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AACpB,UAAM,IAAI,OAAO;AACjB,WAAO,GAAG,iBAAiB,IAAI,eAAe,YAAU;AACpD,YAAM,UAAU,OAAO,SAAS,IAAI,aAAa;AACjD,YAAM,OAAO,IAAI,WAAW,MAAM;AAClC,WAAK,IAAI;AAAA,QACL,OAAO,EAAE,eAAe;AAAA,QACxB,MAAM;AAAA,QACN,SAAS;AAAA,MACb,CAAC;AACD,WAAK,KAAK,QAAQ,WAAW,EAAE,GAAG,SAAS,SAAS,WAAW;AAE/D,WAAK,SAAS,MAAM,WAAW,MAAM;AACjC,eAAO,QAAQ,aAAa;AAC5B,eAAO,QAAQ,KAAK,MAAM;AAAA,MAC9B,CAAC;AACD,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;;;AC7BA,IAAqB,sBAArB,cAAiD,QAAQ;AAAA;AAAA;AAAA;AAAA,EAIrD,UAAU;AACN,UAAM,QAAQ,KAAK,OAAO;AAC1B,SAAK,YAAY,CAAC,CAAC,MAAM,KAAK,oBAAoB,MAAM,SAAS,WAAW,MAAM,MAAM,CAAC;AAAA,EAC7F;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACN,UAAM,QAAQ,KAAK,OAAO;AAC1B,UAAM,SAAS,MAAM;AACrB,UAAM,OAAO,YAAU;AACnB,iBAAW,QAAQ,KAAK,oBAAoB,MAAM,SAAS,WAAW,MAAM,GAAG;AAC3E,YAAI,KAAK,GAAG,WAAW,GAAG;AACtB,qBAAW,iBAAiB,KAAK,yBAAyB,MAAM,MAAM,GAAG;AACrE,mBAAO,yBAAyB,aAAa;AAAA,UACjD;AAAA,QACJ,OACK;AAGD,gBAAM,YAAY,OAAO,cAAc,IAAI;AAC3C,qBAAW,iBAAiB,KAAK,yBAAyB,MAAM,MAAM,GAAG;AACrE,mBAAO,gBAAgB,eAAe,SAAS;AAAA,UACnD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,CAAC,oBAAoB,WAAW,QAAQ;AACpC,UAAM,6BAA6B,CAAC,SAAS;AACzC,aAAO,CAAC,CAAC,MAAM,KAAK,yBAAyB,MAAM,MAAM,CAAC;AAAA,IAC9D;AAEA,eAAW,YAAY,UAAU,UAAU,GAAG;AAC1C,iBAAW,QAAQ,SAAS,SAAS,GAAG;AACpC,YAAI,CAAC,OAAO,QAAQ,IAAI,KAAK,2BAA2B,IAAI,GAAG;AAC3D,gBAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAEA,eAAW,SAAS,UAAU,kBAAkB,GAAG;AAC/C,UAAI,2BAA2B,KAAK,GAAG;AACnC,cAAM;AAAA,MACV;AAAA,IACJ;AAEA,QAAI,2BAA2B,SAAS,GAAG;AACvC,YAAM;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,CAAC,yBAAyB,MAAM,QAAQ;AACpC,eAAW,CAAC,aAAa,KAAK,KAAK,cAAc,GAAG;AAChD,YAAM,sBAAsB,OAAO,uBAAuB,aAAa;AACvE,UAAI,uBAAuB,oBAAoB,cAAc;AACzD,cAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC/EA,IAAqB,sBAArB,cAAiD,OAAO;AAAA;AAAA;AAAA;AAAA,EAIpD,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AACpB,WAAO,SAAS,IAAI,gBAAgB,IAAI,oBAAoB,MAAM,CAAC;AAAA,EACvE;AACJ;;;ACVA,IAAqB,eAArB,cAA0C,OAAO;AAAA;AAAA;AAAA;AAAA,EAI7C,WAAW,WAAW;AAClB,WAAO,CAAC,qBAAqB,cAAc;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
