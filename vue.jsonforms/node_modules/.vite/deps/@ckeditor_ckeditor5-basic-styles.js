import "./chunk-VQXVBVB4.js";
import {
  ButtonView
} from "./chunk-SGTDNT4V.js";
import "./chunk-W3CRWNYM.js";
import {
  TwoStepCaretMovement,
  inlineHighlight
} from "./chunk-4MFML76R.js";
import "./chunk-6LVMAMLV.js";
import {
  Command,
  Plugin,
  icons
} from "./chunk-JI2V5GJZ.js";
import "./chunk-6DXDGCMU.js";
import "./chunk-HM4MQYWN.js";

// node_modules/@ckeditor/ckeditor5-basic-styles/src/attributecommand.js
var AttributeCommand = class extends Command {
  /**
   * @param attributeKey Attribute that will be set by the command.
   */
  constructor(editor, attributeKey) {
    super(editor);
    this.attributeKey = attributeKey;
  }
  /**
   * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.
   */
  refresh() {
    const model = this.editor.model;
    const doc = model.document;
    this.value = this._getValueFromFirstAllowedNode();
    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);
  }
  /**
   * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.
   *
   * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.
   *
   * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:
   *
   * * If the selection is on a range, the command applies the attribute to all nodes in that range
   * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).
   * * If the selection is collapsed in a non-empty node, the command applies the attribute to the
   * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).
   * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note
   * that the selection inherits all attributes from a node if it is in an empty node).
   *
   * @fires execute
   * @param options Command options.
   * @param options.forceValue If set, it will force the command behavior. If `true`,
   * the command will apply the attribute, otherwise the command will remove the attribute.
   * If not set, the command will look for its current value to decide what it should do.
   */
  execute(options = {}) {
    const model = this.editor.model;
    const doc = model.document;
    const selection = doc.selection;
    const value = options.forceValue === void 0 ? !this.value : options.forceValue;
    model.change((writer) => {
      if (selection.isCollapsed) {
        if (value) {
          writer.setSelectionAttribute(this.attributeKey, true);
        } else {
          writer.removeSelectionAttribute(this.attributeKey);
        }
      } else {
        const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);
        for (const range of ranges) {
          if (value) {
            writer.setAttribute(this.attributeKey, value, range);
          } else {
            writer.removeAttribute(this.attributeKey, range);
          }
        }
      }
    });
  }
  /**
   * Checks the attribute value of the first node in the selection that allows the attribute.
   * For the collapsed selection returns the selection attribute.
   *
   * @returns The attribute value.
   */
  _getValueFromFirstAllowedNode() {
    const model = this.editor.model;
    const schema = model.schema;
    const selection = model.document.selection;
    if (selection.isCollapsed) {
      return selection.hasAttribute(this.attributeKey);
    }
    for (const range of selection.getRanges()) {
      for (const item of range.getItems()) {
        if (schema.checkAttribute(item, this.attributeKey)) {
          return item.hasAttribute(this.attributeKey);
        }
      }
    }
    return false;
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldediting.js
var BOLD = "bold";
var BoldEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "BoldEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.model.schema.extend("$text", { allowAttributes: BOLD });
    editor.model.schema.setAttributeProperties(BOLD, {
      isFormatting: true,
      copyOnEnter: true
    });
    editor.conversion.attributeToElement({
      model: BOLD,
      view: "strong",
      upcastAlso: [
        "b",
        (viewElement) => {
          const fontWeight = viewElement.getStyle("font-weight");
          if (!fontWeight) {
            return null;
          }
          if (fontWeight == "bold" || Number(fontWeight) >= 600) {
            return {
              name: true,
              styles: ["font-weight"]
            };
          }
          return null;
        }
      ]
    });
    editor.commands.add(BOLD, new AttributeCommand(editor, BOLD));
    editor.keystrokes.set("CTRL+B", BOLD);
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldui.js
var BOLD2 = "bold";
var BoldUI = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "BoldUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const t = editor.t;
    editor.ui.componentFactory.add(BOLD2, (locale) => {
      const command = editor.commands.get(BOLD2);
      const view = new ButtonView(locale);
      view.set({
        label: t("Bold"),
        icon: icons.bold,
        keystroke: "CTRL+B",
        tooltip: true,
        isToggleable: true
      });
      view.bind("isOn", "isEnabled").to(command, "value", "isEnabled");
      this.listenTo(view, "execute", () => {
        editor.execute(BOLD2);
        editor.editing.view.focus();
      });
      return view;
    });
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/bold.js
var Bold = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [BoldEditing, BoldUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Bold";
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/code/codeediting.js
var CODE = "code";
var HIGHLIGHT_CLASS = "ck-code_selected";
var CodeEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "CodeEditing";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [TwoStepCaretMovement];
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.model.schema.extend("$text", { allowAttributes: CODE });
    editor.model.schema.setAttributeProperties(CODE, {
      isFormatting: true,
      copyOnEnter: false
    });
    editor.conversion.attributeToElement({
      model: CODE,
      view: "code",
      upcastAlso: {
        styles: {
          "word-wrap": "break-word"
        }
      }
    });
    editor.commands.add(CODE, new AttributeCommand(editor, CODE));
    editor.plugins.get(TwoStepCaretMovement).registerAttribute(CODE);
    inlineHighlight(editor, CODE, "code", HIGHLIGHT_CLASS);
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/code/codeui.js
import codeIcon from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/code.svg";
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-basic-styles/theme/code.css";
var CODE2 = "code";
var CodeUI = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "CodeUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const t = editor.t;
    editor.ui.componentFactory.add(CODE2, (locale) => {
      const command = editor.commands.get(CODE2);
      const view = new ButtonView(locale);
      view.set({
        label: t("Code"),
        icon: codeIcon,
        tooltip: true,
        isToggleable: true
      });
      view.bind("isOn", "isEnabled").to(command, "value", "isEnabled");
      this.listenTo(view, "execute", () => {
        editor.execute(CODE2);
        editor.editing.view.focus();
      });
      return view;
    });
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/code.js
import "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-basic-styles/theme/code.css";
var Code = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [CodeEditing, CodeUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Code";
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicediting.js
var ITALIC = "italic";
var ItalicEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ItalicEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.model.schema.extend("$text", { allowAttributes: ITALIC });
    editor.model.schema.setAttributeProperties(ITALIC, {
      isFormatting: true,
      copyOnEnter: true
    });
    editor.conversion.attributeToElement({
      model: ITALIC,
      view: "i",
      upcastAlso: [
        "em",
        {
          styles: {
            "font-style": "italic"
          }
        }
      ]
    });
    editor.commands.add(ITALIC, new AttributeCommand(editor, ITALIC));
    editor.keystrokes.set("CTRL+I", ITALIC);
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicui.js
import italicIcon from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/italic.svg";
var ITALIC2 = "italic";
var ItalicUI = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ItalicUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const t = editor.t;
    editor.ui.componentFactory.add(ITALIC2, (locale) => {
      const command = editor.commands.get(ITALIC2);
      const view = new ButtonView(locale);
      view.set({
        label: t("Italic"),
        icon: italicIcon,
        keystroke: "CTRL+I",
        tooltip: true,
        isToggleable: true
      });
      view.bind("isOn", "isEnabled").to(command, "value", "isEnabled");
      this.listenTo(view, "execute", () => {
        editor.execute(ITALIC2);
        editor.editing.view.focus();
      });
      return view;
    });
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/italic.js
var Italic = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ItalicEditing, ItalicUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Italic";
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/strikethrough/strikethroughediting.js
var STRIKETHROUGH = "strikethrough";
var StrikethroughEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "StrikethroughEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.model.schema.extend("$text", { allowAttributes: STRIKETHROUGH });
    editor.model.schema.setAttributeProperties(STRIKETHROUGH, {
      isFormatting: true,
      copyOnEnter: true
    });
    editor.conversion.attributeToElement({
      model: STRIKETHROUGH,
      view: "s",
      upcastAlso: [
        "del",
        "strike",
        {
          styles: {
            "text-decoration": "line-through"
          }
        }
      ]
    });
    editor.commands.add(STRIKETHROUGH, new AttributeCommand(editor, STRIKETHROUGH));
    editor.keystrokes.set("CTRL+SHIFT+X", "strikethrough");
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/strikethrough/strikethroughui.js
import strikethroughIcon from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/strikethrough.svg";
var STRIKETHROUGH2 = "strikethrough";
var StrikethroughUI = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "StrikethroughUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const t = editor.t;
    editor.ui.componentFactory.add(STRIKETHROUGH2, (locale) => {
      const command = editor.commands.get(STRIKETHROUGH2);
      const view = new ButtonView(locale);
      view.set({
        label: t("Strikethrough"),
        icon: strikethroughIcon,
        keystroke: "CTRL+SHIFT+X",
        tooltip: true,
        isToggleable: true
      });
      view.bind("isOn", "isEnabled").to(command, "value", "isEnabled");
      this.listenTo(view, "execute", () => {
        editor.execute(STRIKETHROUGH2);
        editor.editing.view.focus();
      });
      return view;
    });
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/strikethrough.js
var Strikethrough = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [StrikethroughEditing, StrikethroughUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Strikethrough";
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/subscript/subscriptediting.js
var SUBSCRIPT = "subscript";
var SubscriptEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "SubscriptEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.model.schema.extend("$text", { allowAttributes: SUBSCRIPT });
    editor.model.schema.setAttributeProperties(SUBSCRIPT, {
      isFormatting: true,
      copyOnEnter: true
    });
    editor.conversion.attributeToElement({
      model: SUBSCRIPT,
      view: "sub",
      upcastAlso: [
        {
          styles: {
            "vertical-align": "sub"
          }
        }
      ]
    });
    editor.commands.add(SUBSCRIPT, new AttributeCommand(editor, SUBSCRIPT));
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/subscript/subscriptui.js
import subscriptIcon from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/subscript.svg";
var SUBSCRIPT2 = "subscript";
var SubscriptUI = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "SubscriptUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const t = editor.t;
    editor.ui.componentFactory.add(SUBSCRIPT2, (locale) => {
      const command = editor.commands.get(SUBSCRIPT2);
      const view = new ButtonView(locale);
      view.set({
        label: t("Subscript"),
        icon: subscriptIcon,
        tooltip: true,
        isToggleable: true
      });
      view.bind("isOn", "isEnabled").to(command, "value", "isEnabled");
      this.listenTo(view, "execute", () => {
        editor.execute(SUBSCRIPT2);
        editor.editing.view.focus();
      });
      return view;
    });
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/subscript.js
var Subscript = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [SubscriptEditing, SubscriptUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Subscript";
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/superscript/superscriptediting.js
var SUPERSCRIPT = "superscript";
var SuperscriptEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "SuperscriptEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.model.schema.extend("$text", { allowAttributes: SUPERSCRIPT });
    editor.model.schema.setAttributeProperties(SUPERSCRIPT, {
      isFormatting: true,
      copyOnEnter: true
    });
    editor.conversion.attributeToElement({
      model: SUPERSCRIPT,
      view: "sup",
      upcastAlso: [
        {
          styles: {
            "vertical-align": "super"
          }
        }
      ]
    });
    editor.commands.add(SUPERSCRIPT, new AttributeCommand(editor, SUPERSCRIPT));
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/superscript/superscriptui.js
import superscriptIcon from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/superscript.svg";
var SUPERSCRIPT2 = "superscript";
var SuperscriptUI = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "SuperscriptUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const t = editor.t;
    editor.ui.componentFactory.add(SUPERSCRIPT2, (locale) => {
      const command = editor.commands.get(SUPERSCRIPT2);
      const view = new ButtonView(locale);
      view.set({
        label: t("Superscript"),
        icon: superscriptIcon,
        tooltip: true,
        isToggleable: true
      });
      view.bind("isOn", "isEnabled").to(command, "value", "isEnabled");
      this.listenTo(view, "execute", () => {
        editor.execute(SUPERSCRIPT2);
        editor.editing.view.focus();
      });
      return view;
    });
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/superscript.js
var Superscript = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [SuperscriptEditing, SuperscriptUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Superscript";
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/underline/underlineediting.js
var UNDERLINE = "underline";
var UnderlineEditing = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "UnderlineEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    editor.model.schema.extend("$text", { allowAttributes: UNDERLINE });
    editor.model.schema.setAttributeProperties(UNDERLINE, {
      isFormatting: true,
      copyOnEnter: true
    });
    editor.conversion.attributeToElement({
      model: UNDERLINE,
      view: "u",
      upcastAlso: {
        styles: {
          "text-decoration": "underline"
        }
      }
    });
    editor.commands.add(UNDERLINE, new AttributeCommand(editor, UNDERLINE));
    editor.keystrokes.set("CTRL+U", "underline");
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/underline/underlineui.js
import underlineIcon from "C:/complydex/Source/vue.jsonforms/node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/underline.svg";
var UNDERLINE2 = "underline";
var UnderlineUI = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "UnderlineUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const editor = this.editor;
    const t = editor.t;
    editor.ui.componentFactory.add(UNDERLINE2, (locale) => {
      const command = editor.commands.get(UNDERLINE2);
      const view = new ButtonView(locale);
      view.set({
        label: t("Underline"),
        icon: underlineIcon,
        keystroke: "CTRL+U",
        tooltip: true,
        isToggleable: true
      });
      view.bind("isOn", "isEnabled").to(command, "value", "isEnabled");
      this.listenTo(view, "execute", () => {
        editor.execute(UNDERLINE2);
        editor.editing.view.focus();
      });
      return view;
    });
  }
};

// node_modules/@ckeditor/ckeditor5-basic-styles/src/underline.js
var Underline = class extends Plugin {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [UnderlineEditing, UnderlineUI];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Underline";
  }
};
export {
  Bold,
  BoldEditing,
  BoldUI,
  Code,
  CodeEditing,
  CodeUI,
  Italic,
  ItalicEditing,
  ItalicUI,
  Strikethrough,
  StrikethroughEditing,
  StrikethroughUI,
  Subscript,
  SubscriptEditing,
  SubscriptUI,
  Superscript,
  SuperscriptEditing,
  SuperscriptUI,
  Underline,
  UnderlineEditing,
  UnderlineUI
};
/*! Bundled license information:

@ckeditor/ckeditor5-basic-styles/src/attributecommand.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/bold/boldediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/bold/boldui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/bold.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/code/codeediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/code/codeui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/code.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/italic/italicediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/italic/italicui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/italic.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/strikethrough/strikethroughediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/strikethrough/strikethroughui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/strikethrough.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/subscript/subscriptediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/subscript/subscriptui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/subscript.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/superscript/superscriptediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/superscript/superscriptui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/superscript.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/underline/underlineediting.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/underline/underlineui.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/underline.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/augmentation.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)

@ckeditor/ckeditor5-basic-styles/src/index.js:
  (**
   * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
   * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
   *)
*/
//# sourceMappingURL=@ckeditor_ckeditor5-basic-styles.js.map
