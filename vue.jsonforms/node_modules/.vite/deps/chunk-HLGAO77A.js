import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value) {
  return typeof value === "object";
};

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/clone.js
var cloneDate = function(date) {
  return date ? new Date(date.getTime()) : null;
};
function clone(obj) {
  var result = {};
  cloneObject(obj, result);
  return result;
}
function cloneObject(obj, result) {
  for (var field in obj) {
    if (obj.hasOwnProperty(field)) {
      var value = obj[field];
      result[field] = cloneValue(value, result[field]);
    }
  }
}
function cloneValue(value, nextValue) {
  if (Array.isArray(value)) {
    return cloneArray(value);
  } else if (value instanceof Date) {
    return cloneDate(value);
  } else if (value && isObject(value)) {
    var newNextValue = nextValue || {};
    cloneObject(value, newNextValue);
    return newNextValue;
  } else {
    return value;
  }
}
function cloneArray(array) {
  return array.map(function(value) {
    return cloneValue(value, void 0);
  });
}

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a) {
  var h = _a.h, template = _a.template, defaultRendering = _a.defaultRendering, defaultSlots = _a.defaultSlots, additionalProps = _a.additionalProps, additionalListeners = _a.additionalListeners, swapDefaultSlots = _a.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata2) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata2);
  } else {
    var message = "License activation failed for ".concat(packageMetadata2.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata2.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/theme.js
var kendoThemeMaps = {
  sizeMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  roundedMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  }
};

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";

// node_modules/@progress/kendo-vue-form/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation2.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation2.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation2.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-vue-form/dist/es/Field.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var FieldVue2 = {
  name: "KendoField",
  props: {
    component: [String, Number, Boolean, Object],
    validator: [Function, Array],
    name: String,
    changeOnInput: {
      type: Boolean,
      default: true
    }
  },
  created: function created2() {
    if (!this.kendoForm) {
      return;
    }
    var unregisterField = this.kendoForm.registerField(this.$props.name, this.$props.validator);
    return unregisterField;
  },
  inject: {
    kendoForm: {
      default: null
    }
  },
  methods: {
    handleOnChange: function handleOnChange(event) {
      var newValue = event ? event.value !== void 0 ? event.value : event.target ? event.target.value : event.target : event;
      this.kendoForm.onChange(this.$props.name, {
        value: newValue
      });
      this.$emit("change", event);
    },
    handleOnInput: function handleOnInput(event) {
      var newValue = event ? event.value !== void 0 ? event.value : event.target ? event.target.value : event.target : event;
      if (this.changeOnInput) {
        this.kendoForm.onChange(this.$props.name, {
          value: newValue
        });
      }
      this.$emit("input", event);
    },
    onNativeComponentChange: function onNativeComponentChange(event) {
      this.kendoForm.onChange(this.$props.name, {
        value: event.target.value
      });
    },
    handleOnBlur: function handleOnBlur() {
      this.kendoForm.onBlur(this.$props.name);
    },
    handleOnFocus: function handleOnFocus() {
      this.kendoForm.onFocus(this.$props.name);
    }
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  render: function render2(createElement) {
    var h = gh5 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a = this.$props, name = _a.name, component = _a.component, validator2 = _a.validator, id = _a.id, others = __rest(_a, ["name", "component", "validator", "id"]);
    if (!this.kendoForm) {
      return null;
    }
    var value = this.kendoForm.values[name];
    if (typeof component === "string" && component === "input") {
      return h(component, __assign2(__assign2({
        attrs: this.$attrs
      }, this.$attrs), {
        onChange: this.onNativeComponentChange,
        onBlur: this.handleOnBlur,
        onFocus: this.handleOnFocus,
        on: this.v3 ? void 0 : {
          change: this.handleOnChange,
          blur: this.handleOnBlur,
          focus: this.handleOnFocus
        },
        domProps: this.v3 ? void 0 : {
          value: value ? value : ""
        },
        name,
        value: value ? value : ""
      }));
    }
    if (component) {
      var renderTemplate = templateRendering.call(this, component, getListeners.call(this));
      return getTemplate.call(this, {
        h,
        template: renderTemplate,
        additionalProps: __assign2({
          value,
          // meta
          validationMessage: this.kendoForm.errors[name],
          touched: this.kendoForm.touchedByField[name],
          modified: this.kendoForm.modifiedByField[name],
          visited: this.kendoForm.visitedByField[name],
          // Our `valid` implementation requires double submit to show html5 validation errors,
          // however it's NOT recommended to show html5 validation errors at all as:
          // - There is no standard way to change validation look and feel with CSS.
          // - Look different in each browser / OS
          // - You can have a page in one language but an error message
          // displayed in another language (not localizable)
          valid: !(Boolean(this.kendoForm.errors[name]) && this.kendoForm.touchedByField[name]),
          name,
          id
        }, this.$attrs),
        additionalListeners: {
          change: this.handleOnChange,
          input: this.handleOnInput,
          blur: this.handleOnBlur,
          focus: this.handleOnFocus
        },
        defaultSlots: defaultSlot
      });
    }
  }
};
var Field = FieldVue2;

// node_modules/@progress/kendo-vue-form/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-form",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693312653,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-form/dist/es/Form.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue7 = vue_runtime_esm_bundler_exports;
var gh6 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";
var FORCEUPDATE_ACCUMULATOR_TIMEOUT = 0;
var FormVue2 = {
  name: "KendoForm",
  inheritAttrs: false,
  props: {
    renderForm: [Object, Function],
    initialValues: Object,
    validator: Function,
    ignoreModified: Boolean
  },
  // @ts-ignore
  emits: {
    submitclick: null,
    submit: null
  },
  created: function created3() {
    this._accumulatorTimeout = void 0;
    validatePackage(packageMetadata);
    this.form.values = clone(this.$props.initialValues);
  },
  mounted: function mounted2() {
    this.form.errors = this.getErrors();
    this.form.allowSubmit = this.allowSubmit();
    this.form.valid = this.isValid();
  },
  destroyed: !!isV37 ? void 0 : function() {
    this.onDestroy();
  },
  // @ts-ignore
  unmounted: function unmounted2() {
    this.onDestroy();
  },
  data: function data() {
    return {
      validatorsByField: {},
      fields: [],
      unmounted: false,
      form: {
        id: this.id,
        errors: {},
        values: {},
        modifiedByField: {},
        touchedByField: {},
        visitedByField: {},
        valid: false,
        modified: false,
        touched: false,
        visited: false,
        submitted: false,
        valueGetter: this.valueGetter,
        allowSubmit: false,
        validate: this.validate,
        onChange: this.onChange,
        onSubmit: this.onSubmit,
        onFormReset: this.resetForm,
        registerField: this.onFieldRegister,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onUnshift: this.onUnshift,
        onPush: this.onPush,
        onInsert: this.onInsert,
        onPop: this.onPop,
        onRemove: this.onRemove,
        onReplace: this.onReplace,
        onMove: this.onMove
      }
    };
  },
  provide: function provide() {
    return {
      kendoForm: this.$data.form
    };
  },
  watch: {
    "form.values": function formValues() {
      this.form.errors = this.getErrors();
      this.form.allowSubmit = this.allowSubmit();
      this.form.valid = this.isValid();
    },
    "form.touchedByField": function formTouchedByField(newValue) {
      this.form.touched = this.isFormTouched(newValue, this.fields);
      this.form.allowSubmit = this.allowSubmit();
    },
    "form.modifiedByField": function formModifiedByField(newValue) {
      this.form.modified = this.isFormModified(newValue, this.fields);
      this.form.allowSubmit = this.allowSubmit();
    },
    "form.visitedByField": function formVisitedByField(newValue) {
      this.form.visited = this.isFormVisited(newValue, this.fields);
    }
  },
  methods: {
    isValid: function isValid() {
      return this.isFormValid(this.form.errors);
    },
    formErrors: function formErrors() {
      if (this.$props.validator) {
        return this.$props.validator(this.form.values, this.valueGetter);
      }
    },
    getErrors: function getErrors() {
      var _this = this;
      var errors = {};
      var validatorsByField = this.validatorsByField;
      Object.keys(this.fields).forEach(function(fieldName) {
        errors[fieldName] = "";
        if (validatorsByField[fieldName]) {
          var validators_1 = [];
          validatorsByField[fieldName].forEach(function(validator2) {
            if (Array.isArray(validator2)) {
              validators_1.push.apply(validators_1, validator2);
            } else {
              validators_1.push(validator2);
            }
          });
          validators_1.find(function(validator2) {
            if (validator2) {
              var result = validator2(_this.valueGetter(fieldName), _this.valueGetter, {
                name: fieldName
              });
              if (result) {
                errors[fieldName] = result;
                return true;
              }
            }
            return false;
          });
        }
      });
      var formErrors2 = this.formErrors();
      if (formErrors2) {
        cloneObject(this.formErrors(), errors);
      }
      return errors;
    },
    /**
     * @hidden
     */
    accumulatedForceUpdate: function accumulatedForceUpdate() {
      var _this = this;
      if (this._accumulatorTimeout) {
        clearTimeout(this._accumulatorTimeout);
      }
      if (canUseDOM) {
        this._accumulatorTimeout = window.setTimeout(function() {
          _this._accumulatorTimeout = void 0;
        }, FORCEUPDATE_ACCUMULATOR_TIMEOUT);
      }
    },
    /**
     * @hidden
     */
    resetForm: function resetForm() {
      this.form.values = clone(this.$props.initialValues);
      this.id = guid();
      this.form.touchedByField = {};
      this.form.visitedByField = {};
      this.form.modifiedByField = {};
      this.form.submitted = false;
    },
    /**
     * Method for resetting the form state outside the form component.
     *
     * > Use `onReset` only if you cannot achieve the desired behavior
     *  through the Field component or by FormRenderProps.
     */
    onReset: function onReset() {
      this.resetForm();
    },
    addField: function addField(field) {
      this.fields[field] = true;
    },
    validate: function validate(fields) {
      var touchedVisited = {};
      var fieldsToValidate = fields || this.fields;
      Object.keys(fieldsToValidate).forEach(function(fieldName) {
        touchedVisited[fieldName] = true;
      });
      this.form.touchedByField = __assign3({}, touchedVisited);
    },
    onSubmit: function onSubmit(event) {
      var touchedVisited = {};
      var fields = this.fields;
      if (event) {
        if (typeof event.preventDefault === "function") {
          event.preventDefault();
        }
        if (typeof event.stopPropagation === "function") {
          event.stopPropagation();
        }
      }
      Object.keys(fields).forEach(function(fieldName) {
        touchedVisited[fieldName] = true;
      });
      this.form.visitedByField = __assign3({}, touchedVisited);
      this.form.touchedByField = __assign3({}, touchedVisited);
      var values = this.form.values;
      var isValid2 = this.isValid();
      var isModified = this.isFormModified(this.form.modifiedByField, fields);
      this.$emit("submitclick", {
        values,
        isValid: isValid2,
        isModified,
        event
      });
      if (isValid2 && (this.$props.ignoreModified || isModified)) {
        this.form.submitted = true;
        this.$emit("submit", values, event);
      }
    },
    /**
     * Method for emitting changes to a specific field outside the form component.
     *
     * > Use `onChange` only if you cannot achieve the desired behavior
     *  through the Field component by FormRenderProps.
     */
    onChange: function onChange(name, options) {
      var _a;
      var value = options.value;
      this.addField(name);
      if (!this.form.modifiedByField[name]) {
        this.form.modifiedByField = __assign3(__assign3({}, this.form.modifiedByField), (_a = {}, _a[name] = true, _a));
      }
      this.valueSetter(name, value);
    },
    onFocus: function onFocus(name) {
      var _a;
      if (this.form.visitedByField[name]) {
        return;
      }
      this.form.visitedByField = __assign3(__assign3({}, this.form.visitedByField), (_a = {}, _a[name] = true, _a));
    },
    onBlur: function onBlur(name) {
      var _a;
      if (this.form.touchedByField[name]) {
        return;
      }
      this.onFocus(name);
      this.form.touchedByField = __assign3(__assign3({}, this.form.touchedByField), (_a = {}, _a[name] = true, _a));
    },
    onFieldRegister: function onFieldRegister(name, validator2) {
      var _a;
      var _this = this;
      this.addField(name);
      var oldValidators = this.validatorsByField[name] || [];
      var nextIndex = oldValidators.length;
      this.validatorsByField = __assign3(__assign3({}, this.validatorsByField), (_a = {}, _a[name] = __spreadArray(__spreadArray([], oldValidators, true), [validator2], false), _a));
      this.accumulatedForceUpdate();
      return function() {
        var _a2;
        if (_this._unmounted) {
          return;
        }
        var newValidators = __spreadArray([], _this.validatorsByField[name] || [], true);
        var validatorIsUnregistered = Boolean(newValidators[nextIndex]);
        newValidators[nextIndex] = void 0;
        _this.validatorsByField = __assign3(__assign3({}, _this.validatorsByField), (_a2 = {}, _a2[name] = newValidators, _a2));
        if (validatorIsUnregistered) {
          _this.accumulatedForceUpdate();
        }
      };
    },
    isFormValid: function isFormValid(errors) {
      return !Object.keys(errors).some(function(fieldName) {
        return Boolean(errors[fieldName]);
      });
    },
    isFormModified: function isFormModified(modified, fields) {
      return Object.keys(fields).some(function(fieldName) {
        return modified[fieldName];
      });
    },
    isFormHasNotTouched: function isFormHasNotTouched(touched, fields) {
      return Object.keys(fields).some(function(fieldName) {
        return !touched[fieldName];
      });
    },
    isFormTouched: function isFormTouched(touched, fields) {
      return Object.keys(fields).some(function(fieldName) {
        return touched[fieldName];
      });
    },
    isFormVisited: function isFormVisited(visited, fields) {
      return Object.keys(fields).some(function(fieldName) {
        return visited[fieldName];
      });
    },
    formHasNotTouched: function formHasNotTouched() {
      return this.isFormHasNotTouched(this.form.touchedByField, this.fields);
    },
    // 1. The form is not touched, but has errors - allow submit to force validation.
    // 2. The form is valid and modified - if not modified, disable submit.
    allowSubmit: function allowSubmit() {
      return this.formHasNotTouched() && !this.isValid() || this.isValid() && (this.$props.ignoreModified || this.isFormModified(this.form.modifiedByField, this.fields));
    },
    valueGetter: function valueGetter(fieldName) {
      return this.form.values[fieldName];
    },
    valueSetter: function valueSetter(fieldName, value) {
      var _a;
      this.form.values = __assign3(__assign3({}, this.form.values), (_a = {}, _a[fieldName] = value, _a));
    },
    onArrayAction: function onArrayAction(name) {
      var _a;
      this.addField(name);
      if (!this.form.modifiedByField[name]) {
        this.form.modifiedByField = __assign3(__assign3({}, this.form.modifiedByField), (_a = {}, _a[name] = true, _a));
      }
      this.onBlur(name, true);
    },
    onInsert: function onInsert(name, options) {
      this.onArrayAction(name);
      var newArray = __spreadArray([], this.valueGetter(name) || [], true);
      newArray.splice(options.index, 0, options.value);
      this.valueSetter(name, newArray);
    },
    onUnshift: function onUnshift(name, options) {
      this.onInsert(name, {
        value: options.value,
        index: 0
      });
    },
    onPush: function onPush(name, options) {
      this.onArrayAction(name);
      var newArray = __spreadArray(__spreadArray([], this.valueGetter(name) || [], true), [options.value], false);
      this.valueSetter(name, newArray);
    },
    onPop: function onPop(name) {
      this.onArrayAction(name);
      var newArray = __spreadArray([], this.valueGetter(name) || [], true);
      var value = newArray.pop();
      this.valueSetter(name, newArray);
      return value;
    },
    onRemove: function onRemove(name, options) {
      this.onArrayAction(name);
      var newArray = __spreadArray([], this.valueGetter(name) || [], true);
      var value = newArray.splice(options.index, 1);
      this.valueSetter(name, newArray);
      return value;
    },
    onReplace: function onReplace(name, options) {
      this.onArrayAction(name);
      var newArray = __spreadArray([], this.valueGetter(name) || [], true);
      newArray.splice(options.index, 1, options.value);
      this.valueSetter(name, newArray);
    },
    onMove: function onMove(name, options) {
      this.onArrayAction(name);
      var newArray = __spreadArray([], this.valueGetter(name) || [], true);
      var value = newArray[options.prevIndex];
      newArray.splice(options.prevIndex, 1);
      newArray.splice(options.nextIndex, 0, value);
      this.valueSetter(name, newArray);
    },
    onDestroy: function onDestroy() {
      this.unmounted = true;
      if (this._accumulatorTimeout) {
        clearTimeout(this._accumulatorTimeout);
      }
    }
  },
  // @ts-ignore
  setup: !isV37 ? void 0 : function() {
    var v3 = !!isV37;
    return {
      v3
    };
  },
  render: function render3(createElement) {
    var h = gh6 || createElement;
    var defaultSlots = getDefaultSlots(this);
    return defaultSlots;
  }
};
var Form = FormVue2;

// node_modules/@progress/kendo-vue-form/dist/es/FieldArray.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var allVue8 = vue_runtime_esm_bundler_exports;
var gh7 = allVue8.h;
var isV38 = allVue8.version && allVue8.version[0] === "3";
var FieldArrayVue2 = {
  name: "KendoFieldArray",
  props: {
    value: [String, Number, Boolean, Object, Array],
    component: [String, Number, Boolean, Object],
    validationMessage: String,
    touched: Boolean,
    modified: Boolean,
    validator: [Function, Array],
    visited: Boolean,
    valid: Boolean,
    name: String,
    id: String
  },
  created: function created4() {
    if (!this.kendoForm) {
      return;
    }
    var unregisterField = this.kendoForm.registerField(this.$props.name, this.$props.validator);
    return unregisterField;
  },
  methods: {
    onUnshift: function onUnshift2(event) {
      this.kendoForm.onUnshift(this.$props.name, event);
    },
    onPush: function onPush2(event) {
      this.kendoForm.onPush(this.$props.name, event);
    },
    onInsert: function onInsert2(event) {
      this.kendoForm.onInsert(this.$props.name, event);
    },
    onPop: function onPop2() {
      this.kendoForm.onPop(this.$props.name);
    },
    onRemove: function onRemove2(event) {
      this.kendoForm.onRemove(this.$props.name, event);
    },
    onReplace: function onReplace2(event) {
      this.kendoForm.onReplace(this.$props.name, event);
    },
    onMove: function onMove2(event) {
      this.kendoForm.onMove(this.$props.name, event);
    }
  },
  // @ts-ignore
  setup: !isV38 ? void 0 : function() {
    var v3 = !!isV38;
    return {
      v3
    };
  },
  inject: {
    kendoForm: {
      default: null
    }
  },
  render: function render4(createElement) {
    var h = gh7 || createElement;
    var _a = this.$props, name = _a.name, component = _a.component, id = _a.id;
    if (!this.kendoForm) {
      return null;
    }
    var value = this.kendoForm.values[name];
    if (component) {
      var renderTemplate = component ? templateRendering.call(this, component, getListeners.call(this)) : null;
      return getTemplate.call(this, {
        h,
        template: renderTemplate,
        additionalProps: __assign4({
          value,
          // meta
          validationMessage: this.kendoForm.errors[name],
          touched: this.kendoForm.touchedByField[name],
          modified: this.kendoForm.modifiedByField[name],
          visited: this.kendoForm.visitedByField[name],
          // Our `valid` implementation requires double submit to show html5 validation errors,
          // however it's NOT recommended to show html5 validation errors at all as:
          // - There is no standard way to change validation look and feel with CSS.
          // - Look different in each browser / OS
          // - You can have a page in one language but an error message
          // displayed in another language (not localizable)
          valid: !(Boolean(this.kendoForm.errors[name]) && this.kendoForm.touchedByField[name]),
          name,
          id
        }, this.$attrs),
        additionalListeners: {
          unshift: this.onUnshift,
          push: this.onPush,
          insert: this.onInsert,
          pop: this.onPop,
          remove: this.onRemove,
          replace: this.onReplace,
          move: this.onMove
        }
      });
    }
  }
};
var FieldArray = FieldArrayVue2;

// node_modules/@progress/kendo-vue-form/dist/es/FieldWrapper.js
var allVue9 = vue_runtime_esm_bundler_exports;
var gh8 = allVue9.h;
var isV39 = allVue9.version && allVue9.version[0] === "3";
var FieldWrapperVue2 = {
  name: "KendoFieldWrapper",
  props: {
    dir: String
  },
  created: function created5() {
    validatePackage(packageMetadata);
  },
  computed: {
    fieldClassName: function fieldClassName() {
      return {
        "k-form-field": true,
        "k-rtl": this.$props.dir === "rtl"
      };
    }
  },
  // @ts-ignore
  setup: !isV39 ? void 0 : function() {
    var v3 = !!isV39;
    return {
      v3
    };
  },
  render: function render5(createElement) {
    var h = gh8 || createElement;
    var defaultSlots = getDefaultSlots(this);
    return h("div", {
      "class": this.fieldClassName
    }, [defaultSlots]);
  }
};
var FieldWrapper = FieldWrapperVue2;

// node_modules/@progress/kendo-vue-form/dist/es/FormElement.js
var allVue10 = vue_runtime_esm_bundler_exports;
var gh9 = allVue10.h;
var isV310 = allVue10.version && allVue10.version[0] === "3";
var FormElementVue2 = {
  name: "KendoFormElement",
  props: {
    horizontal: Boolean,
    size: {
      type: String,
      default: "medium",
      validator: function validator(value) {
        return [null, "small", "medium", "large"].includes(value);
      }
    }
  },
  created: function created6() {
    validatePackage(packageMetadata);
  },
  inject: {
    kendoForm: {
      default: null
    }
  },
  computed: {
    formElementClassName: function formElementClassName() {
      var _a;
      var size = this.$props.size;
      return _a = {
        "k-form": true
      }, _a["k-form-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a["k-form-horizontal"] = this.$props.horizontal === true, _a;
    }
  },
  methods: {
    handleSubmit: function handleSubmit(e) {
      if (this.kendoForm) {
        this.kendoForm.onSubmit(e);
      }
    }
  },
  // @ts-ignore
  setup: !isV310 ? void 0 : function() {
    var v3 = !!isV310;
    return {
      v3
    };
  },
  render: function render6(createElement) {
    var h = gh9 || createElement;
    var defaultSlots = getDefaultSlots(this);
    return h("form", {
      "class": this.formElementClassName,
      onSubmit: this.handleSubmit,
      on: this.v3 ? void 0 : {
        "submit": this.handleSubmit
      }
    }, [defaultSlots]);
  }
};
var FormElement = FormElementVue2;

export {
  FieldVue2,
  Field,
  FormVue2,
  Form,
  FieldArrayVue2,
  FieldArray,
  FieldWrapperVue2,
  FieldWrapper,
  FormElementVue2,
  FormElement
};
//# sourceMappingURL=chunk-HLGAO77A.js.map
