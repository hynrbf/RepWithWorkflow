import {
  FloatingLabel,
  Label
} from "./chunk-C5E7VHMO.js";
import {
  MultiPath,
  Path,
  color_default,
  drawing_exports,
  exportImage,
  geometry_exports,
  group_default,
  image_default,
  parseColor,
  surface_default
} from "./chunk-PPZBNG6G.js";
import {
  Dialog
} from "./chunk-WKLUZJPW.js";
import {
  provideIntlService,
  provideLocalizationService
} from "./chunk-TNWINVQ6.js";
import {
  Button,
  ButtonGroup
} from "./chunk-EA6IUSJI.js";
import {
  Popup
} from "./chunk-P43752AQ.js";
import {
  caretAltDownIcon,
  caretAltExpandIcon,
  caretAltLeftIcon,
  caretAltRightIcon,
  caretAltUpIcon,
  checkIcon,
  dropletSlashIcon,
  dropletSliderIcon,
  exclamationCircleIcon,
  hyperlinkOpenIcon,
  paletteIcon,
  xIcon
} from "./chunk-HKPTYRTE.js";
import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value2) {
  return typeof value2 === "object";
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/classNames.js
var classNames = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.filter(function(arg) {
    return arg !== true && !!arg;
  }).map(function(arg) {
    return Array.isArray(arg) ? classNames.apply(void 0, arg) : isObject(arg) ? Object.keys(arg).map(function(key, idx) {
      return arg[idx] || arg[key] && key || null;
    }).filter(function(el) {
      return el !== null;
    }).join(" ") : arg;
  }).filter(function(arg) {
    return !!arg;
  }).join(" ");
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/keys.js
var Keys = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  delete: 46
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/refs.js
function getRef(comp, refName, customRef) {
  return comp.v3 ? comp["".concat(refName, "Ref")] : comp.$refs["".concat(customRef || refName)];
}
function setRef(comp, refName, customRef) {
  return comp.v3 ? function(el) {
    comp["".concat(refName, "Ref")] = el;
  } : customRef || refName;
}

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/focus.js
var FOCUSABLE_SELECTOR = 'input, [tabindex]:not([tabindex="-1"])';
var firstFocusableChild = function(element2) {
  if (element2) {
    var elements = element2.querySelectorAll(FOCUSABLE_SELECTOR);
    if (elements.length && elements[0].focus) {
      return elements[0];
    }
  }
  return void 0;
};
var lastFocusableChild = function(element2) {
  if (element2) {
    var elements = element2.querySelectorAll(FOCUSABLE_SELECTOR);
    if (elements.length && elements[elements.length - 1].focus) {
      return elements[elements.length - 1];
    }
  }
  return void 0;
};
var focusFirstFocusableChild = function(element2) {
  if (element2) {
    var elements = element2.querySelectorAll(FOCUSABLE_SELECTOR);
    if (elements.length && elements[0].focus) {
      elements[0].focus();
    }
  }
};
var focusContainer = function(e, containerElement) {
  var focusState = true;
  if (e.keyCode !== Keys.enter && e.target === containerElement) {
    return false;
  }
  if (e.keyCode === Keys.enter && e.target === containerElement) {
    focusState = true;
    setTimeout(function() {
      focusFirstFocusableChild(containerElement);
    }, 1);
  } else if (e.keyCode === Keys.esc) {
    focusState = false;
    containerElement.focus();
  } else if (e.keyCode === Keys.tab) {
    var firstChild = firstFocusableChild(containerElement);
    var lastChild = lastFocusableChild(containerElement);
    if (lastChild && !e.shiftKey && e.target === lastChild) {
      e.preventDefault();
      firstChild.focus();
    }
    if (firstChild && e.shiftKey && e.target === firstChild) {
      e.preventDefault();
      lastChild.focus();
    }
  }
  return focusState;
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(obj, key, value2) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);
var Draggable = DraggableVue2;

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/noop.js
var noop = function() {
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
var templateDefinition = {
  type: [String, Function, Object, Boolean],
  default: function() {
    return void 0;
  }
};
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a3) {
  var h = _a3.h, template = _a3.template, defaultRendering = _a3.defaultRendering, defaultSlots = _a3.defaultSlots, additionalProps = _a3.additionalProps, additionalListeners = _a3.additionalListeners, swapDefaultSlots = _a3.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/getTabIndex.js
var DISABLED_TABINDEX = -1;
var DEFAULT_TABINDEX = 0;
var getTabIndex = function(tabIndex, disabled, useDefaultTabIndexWhenDisabled) {
  var parsedTabIndex = typeof tabIndex === "string" ? parseInt(tabIndex, void 0) : tabIndex;
  if (parsedTabIndex === NaN) {
    return void 0;
  }
  return parsedTabIndex !== void 0 ? parsedTabIndex : disabled ? useDefaultTabIndexWhenDisabled ? void 0 : DISABLED_TABINDEX : DEFAULT_TABINDEX;
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/isRtl.js
function isRtl(element2) {
  return Boolean(canUseDOM && element2 && getComputedStyle(element2).direction === "rtl");
}

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata2) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata2);
  } else {
    var message = "License activation failed for ".concat(packageMetadata2.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata2.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/theme.js
var kendoThemeMaps = {
  sizeMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  roundedMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  }
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/icons/constants.js
var SIZE_CLASSES = {
  "default": "",
  "xsmall": "k-icon-xs",
  "small": "k-icon-sm",
  "medium": "k-icon-md",
  "large": "k-icon-lg",
  "xlarge": "k-icon-xl",
  "xxlarge": "k-icon-xxl",
  "xxxlarge": "k-icon-xxxl"
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";
var FontIconVue2 = {
  name: "KendoFontIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    tabIndex: Number
  },
  computed: {
    fontClassNames: function fontClassNames() {
      var _a3;
      var _b = this.$props, name3 = _b.name, flip = _b.flip, size2 = _b.size, themeColor = _b.themeColor;
      return _a3 = {
        "k-icon": true
      }, _a3["k-i-" + name3] = name3, _a3["k-color-" + themeColor] = themeColor, _a3["k-flip-h"] = flip === "horizontal" || flip === "both", _a3["k-flip-v"] = flip === "vertical" || flip === "both", _a3[SIZE_CLASSES[size2]] = size2, _a3;
    }
  },
  // @ts-ignore
  setup: !isV33 ? void 0 : function() {
    var v3 = !!isV33;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh2 || createElement;
    var _a3 = this.$props, id = _a3.id, title = _a3.title, tabIndex = _a3.tabIndex, ariaLabel = _a3.ariaLabel;
    return h("span", {
      "class": this.fontClassNames,
      id,
      attrs: this.v3 ? void 0 : {
        id,
        title,
        "aria-label": ariaLabel,
        tabIndex,
        role: "presentation"
      },
      title,
      "aria-label": ariaLabel,
      tabIndex,
      role: "presentation",
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    });
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit("click", e);
    }
  }
};
var FontIcon = FontIconVue2;

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";
var SvgIconVue2 = {
  name: "KendoSvgIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    icon: Object,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number,
    svgClassName: String,
    svgStyle: Object
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a3;
      var _b = this.$props, name3 = _b.name, flip = _b.flip, size2 = _b.size, themeColor = _b.themeColor;
      return _a3 = {
        "k-svg-icon": true
      }, _a3["k-color-" + themeColor] = themeColor, _a3["k-svg-i-" + name3] = name3, _a3["k-flip-h"] = flip === "horizontal" || flip === "both", _a3["k-flip-v"] = flip === "vertical" || flip === "both", _a3[SIZE_CLASSES[size2]] = size2, _a3;
    }
  },
  // @ts-ignore
  setup: !isV34 ? void 0 : function() {
    var v3 = !!isV34;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render3(createElement) {
    var h = gh3 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a3 = this.$props, svgClassName = _a3.svgClassName, icon = _a3.icon, id = _a3.id, tabIndex = _a3.tabIndex, svgStyle = _a3.svgStyle, viewBox = _a3.viewBox, title = _a3.title, ariaLabel = _a3.ariaLabel;
    var innerHTML = icon ? icon.content : void 0;
    var attrs = {
      id,
      title,
      "aria-hidden": true,
      tabIndex,
      ariaLabel,
      focusable: "false",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: icon ? icon.viewBox : viewBox
    };
    var svg = h("svg", __assign2(__assign2({}, attrs), {
      attrs: this.v3 ? void 0 : attrs,
      domProps: this.v3 ? void 0 : {
        innerHTML
      },
      innerHTML,
      "class": svgClassName,
      style: svgStyle
    }), icon ? [] : [defaultSlot]);
    return h("span", {
      "class": this.wrapperClass,
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }, [svg]);
  },
  methods: {
    handleClick: function handleClick2(e) {
      this.$emit("click", e);
    }
  }
};
var SvgIcon = SvgIconVue2;

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";
var IconVue2 = {
  name: "KendoIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  inject: {
    kendoIcons: {
      default: {
        type: "svg",
        icons: {}
      }
    }
  },
  props: {
    name: String,
    icon: Object,
    title: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number
  },
  // @ts-ignore
  setup: !isV35 ? void 0 : function() {
    var v3 = !!isV35;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render4(createElement) {
    var h = gh4 || createElement;
    var _a3 = this.$props, name3 = _a3.name, icon = _a3.icon, themeColor = _a3.themeColor, size2 = _a3.size, flip = _a3.flip, id = _a3.id, viewBox = _a3.viewBox, tabIndex = _a3.tabIndex, title = _a3.title, ariaLabel = _a3.ariaLabel;
    var svg = name3 && this.kendoIcons && this.kendoIcons.icons && this.kendoIcons.icons[name3] || icon;
    var renderSVG = this.kendoIcons && this.kendoIcons.type === "svg" && svg !== void 0;
    var newSize = this.kendoIcons && this.kendoIcons.size ? this.kendoIcons.size : size2;
    var newFlip = this.kendoIcons && this.kendoIcons.flip ? this.kendoIcons.flip : flip;
    var resolvedName = name3 || (icon && icon.name ? icon.name : void 0);
    var commonProps = {
      themeColor,
      size: newSize,
      flip: newFlip,
      id,
      tabIndex,
      title,
      ariaLabel
    };
    var fontIcon = h(FontIcon, __assign3(__assign3({}, commonProps), {
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    var svgIcon = h(SvgIcon, __assign3(__assign3({}, commonProps), {
      icon: svg,
      viewBox,
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        icon: svg,
        viewBox,
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    return renderSVG ? svgIcon : fontIcon;
  },
  methods: {
    handleClick: function handleClick3(e) {
      this.$emit("click", e);
    }
  }
};
var Icon = IconVue2;

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/icons/getIconName.js
var getIconName = function(iconName) {
  return iconName && iconName.indexOf("k-i-") !== -1 ? iconName.split("k-i-")[1] : iconName;
};

// node_modules/@progress/kendo-vue-inputs/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation2.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation2.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation2.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.focusElement = function(element2, previous) {
      if (element2) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element2.setAttribute("tabindex", String(this.tabIndex));
        }
        element2.focus({ preventScroll: true });
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-vue-inputs/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-inputs",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693312537,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/utils/misc.js
var isPresent = function(value2) {
  return value2 !== null && value2 !== void 0;
};
var fitIntoBounds = function(contender, min, max) {
  if (!isPresent(contender) || isNaN(contender)) {
    return min;
  }
  return contender <= min ? min : contender >= max ? max : contender;
};

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/utils/color-parser.js
var parseColor2 = function(value2, format, opacityEnabled, safe) {
  if (opacityEnabled === void 0) {
    opacityEnabled = false;
  }
  if (safe === void 0) {
    safe = true;
  }
  var allowedFormats = ["hex", "rgba"];
  if (allowedFormats.indexOf(format) === -1) {
    throw new Error("Unsupported color output format '".concat(format, "'. The available options are 'hex' or 'rgba'."));
  }
  if (!isPresent(value2)) {
    return;
  }
  var parsedColor = parseColor(value2.trim(), safe);
  if (!isPresent(parsedColor)) {
    return;
  }
  return format === "hex" ? getHexValue(parsedColor, opacityEnabled) : parsedColor.toCssRgba();
};
var getHexValue = function(color, opacity) {
  return opacity && color.a < 1 ? color.toCss({ alpha: true }) : color.toCss();
};
var getHSV = function(value2, safe) {
  if (safe === void 0) {
    safe = true;
  }
  var parsed = parseColor(value2, safe);
  if (!isPresent(parsed)) {
    return {};
  }
  return parsed.toHSV();
};
var getRGBA = function(value2, safe) {
  if (safe === void 0) {
    safe = true;
  }
  var parsed = parseColor(value2, safe);
  if (!isPresent(parsed)) {
    return {};
  }
  return parsed.toBytes();
};
var getColorFromHSV = function(hsva2) {
  var hue = fitIntoBounds(hsva2.h, 0, 359.9);
  var saturation = fitIntoBounds(hsva2.s, 0, 1);
  var value2 = fitIntoBounds(hsva2.v, 0, 1);
  var alpha = fitIntoBounds(hsva2.a, 0, 1);
  return color_default.fromHSV(hue, saturation, value2, alpha).toCssRgba();
};
var getColorFromHue = function(hue) {
  return getColorFromHSV({ h: hue, s: 1, v: 1, a: 1 });
};
var getColorFromRGBA = function(rgba2) {
  var red = fitIntoBounds(rgba2.r, 0, 255);
  var green = fitIntoBounds(rgba2.g, 0, 255);
  var blue = fitIntoBounds(rgba2.b, 0, 255);
  var alpha = fitIntoBounds(rgba2.a, 0, 1);
  return color_default.fromBytes(red, green, blue, alpha).toCssRgba();
};
var getRGBFromRGBA = function(foregroundColor, backgroundColor) {
  var r1 = fitIntoBounds(foregroundColor.r, 0, 255);
  var g1 = fitIntoBounds(foregroundColor.g, 0, 255);
  var b1 = fitIntoBounds(foregroundColor.b, 0, 255);
  var a1 = fitIntoBounds(foregroundColor.a, 0, 1);
  var r2 = fitIntoBounds(backgroundColor.r, 0, 255);
  var g2 = fitIntoBounds(backgroundColor.g, 0, 255);
  var b2 = fitIntoBounds(backgroundColor.b, 0, 255);
  return {
    r: Math.round((1 - a1) * r2 + a1 * r1),
    g: Math.round((1 - a1) * g2 + a1 * g1),
    b: Math.round((1 - a1) * b2 + a1 * b1)
  };
};
var getLuminance = function(rgb) {
  var a = [rgb.r, rgb.g, rgb.b].map(function(v) {
    v /= 255;
    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
  });
  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
};
var getContrast = function(luminance1, luminance2) {
  var brightest = Math.max(luminance1, luminance2);
  var darkest = Math.min(luminance1, luminance2);
  return (brightest + 0.05) / (darkest + 0.05);
};
var getContrastFromTwoRGBAs = function(a, b) {
  return getContrast(getLuminance(getRGBFromRGBA(a, b)), getLuminance(getRGBFromRGBA(b, { r: 0, g: 0, b: 0, a: 1 })));
};

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/utils/color-palette.service.js
var ColorPaletteService = (
  /** @class */
  function() {
    function ColorPaletteService2() {
      this.colorRows = [];
    }
    ColorPaletteService2.prototype.setColorMatrix = function(palette, columns) {
      this.colorRows = [];
      if (!(isPresent(palette) && palette.length)) {
        return;
      }
      columns = columns || palette.length;
      for (var start = 0; start < palette.length; start += columns) {
        var row = palette.slice(start, columns + start);
        this.colorRows.push(row);
      }
    };
    ColorPaletteService2.prototype.isInColors = function(colors, current) {
      return colors.some(function(c) {
        return c === current;
      });
    };
    ColorPaletteService2.prototype.getCellCoordsFor = function(color) {
      if (!isPresent(color)) {
        return;
      }
      var parsedColor = color ? parseColor(color, true) : color;
      var colors = [color];
      if (isPresent(parsedColor)) {
        colors.push(parsedColor.toCss(), parsedColor.toCssRgba());
      }
      for (var row = 0; row < this.colorRows.length; row++) {
        for (var col = 0; col < this.colorRows[row].length; col++) {
          if (this.isInColors(colors, this.colorRows[row][col])) {
            return { row, col };
          }
        }
      }
    };
    ColorPaletteService2.prototype.getColorAt = function(cellCoords) {
      if (!(isPresent(cellCoords) && isPresent(this.colorRows[cellCoords.row]))) {
        return;
      }
      return this.colorRows[cellCoords.row][cellCoords.col];
    };
    ColorPaletteService2.prototype.getNextCell = function(current, horizontalStep, verticalStep) {
      if (!(isPresent(current) && isPresent(current.row) && isPresent(current.col))) {
        return { row: 0, col: 0 };
      }
      var row = this.clampIndex(current.row + verticalStep, this.colorRows.length - 1);
      var col = this.clampIndex(current.col + horizontalStep, this.colorRows[row].length - 1);
      return { row, col };
    };
    ColorPaletteService2.prototype.clampIndex = function(index, max) {
      var minArrayIndex = 0;
      if (index < minArrayIndex) {
        return minArrayIndex;
      }
      if (index > max) {
        return max;
      }
      return index;
    };
    return ColorPaletteService2;
  }()
);

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/models/palette-presets.js
var PALETTEPRESETS = {
  basic: {
    colors: ["#000000", "#7f7f7f", "#880015", "#ed1c24", "#ff7f27", "#fff200", "#22b14c", "#00a2e8", "#3f48cc", "#a349a4", " ffffff", "#c3c3c3", "#b97a57", "#ffaec9", "#ffc90e", "#efe4b0", "#b5e61d", "#99d9ea", "#7092be", "#c8bfe7"],
    columns: 10
  },
  office: {
    colors: ["#ffffff", "#000000", "#e6e6e6", "#435569", "#4371c4", "#ed7e32", "#a5a4a5", "#febf04", "#5a9bd5", "#71ae48", "#f2f2f3", "#7f7f7f", "#d1cece", "#d5dde3", "#dae1f4", "#fce5d4", "#deeded", "#fff2cc", "#deeaf6", "#e1efd9", "#d7d8d8", "#585959", "#aeabab", "#adbaca", "#b4c5e7", "#f6caac", "#dbdbdb", "#ffe498", "#bcd6ee", "#c5e0b2", "#bfbfc0", "#3f3f3f", "#767070", "#8595b1", "#8fabdb", "#f5b183", "#c9c8c9", "#fed965", "#9bc4e5", "#a8d08d", "#a5a5a6", "#262625", "#393939", "#334050", "#2e5496", "#c45a11", "#7b7b7a", "#bf9000", "#2f75b5", "#548235", "#7f7f7f", "#0b0c0c", "#161616", "#222a34", "#203764", "#843d0b", "#525252", "#7f6000", "#1d4d79", "#375623"],
    columns: 10
  },
  apex: {
    colors: ["#ffffff", "#000000", "#c9c2d1", "#69676d", "#ceb966", "#9cb084", "#6bb1c9", "#6585cf", "#7e6bc9", "#a379bb", "#f2f2f2", "#7f7f7f", "#f4f2f5", "#e0e0e2", "#f5f1e0", "#ebefe6", "#e1eff4", "#e0e6f5", "#e5e1f4", "#ece4f1", "#d8d8d8", "#595959", "#e9e6ec", "#c2c1c5", "#ebe3c1", "#d7dfcd", "#c3dfe9", "#c1ceeb", "#cbc3e9", "#dac9e3", "#bfbfbf", "#3f3f3f", "#dedae3", "#a4a3a8", "#e1d5a3", "#c3cfb5", "#a6d0de", "#a2b5e2", "#b1a6de", "#c7aed6", "#a5a5a5", "#262626", "#9688a5", "#4e4d51", "#ae9638", "#758c5a", "#3d8da9", "#365bb0", "#533da9", "#7d4d99", "#7f7f7f", "#0c0c0c", "#635672", "#343336", "#746425", "#4e5d3c", "#295e70", "#243c75", "#372970", "#533366"],
    columns: 10
  },
  austin: {
    colors: ["#ffffff", "#000000", "#caf278", "#3e3d2d", "#94c600", "#71685a", "#ff6700", "#909465", "#956b43", "#fea022", "#f2f2f2", "#7f7f7f", "#f4fce4", "#dddcd0", "#efffc0", "#e3e1dc", "#ffe0cb", "#e8e9df", "#ece1d6", "#feecd2", "#d8d8d8", "#595959", "#e9f9c9", "#bbb9a1", "#dfff82", "#c8c3ba", "#ffc299", "#d2d4c0", "#dac3ad", "#fed9a6", "#bfbfbf", "#3f3f3f", "#dff7ae", "#ada598", "#cfff43", "#ada598", "#ffa365", "#bcbfa1", "#c8a585", "#fec67a", "#a5a5a5", "#262626", "#a9ea25", "#2e2d21", "#6f9400", "#544e43", "#bf4d00", "#6c6f4b", "#6f5032", "#d77b00", "#7f7f7f", "#0c0c0c", "#74a50f", "#1f1e16", "#4a6300", "#38342d", "#7f3300", "#484a32", "#4a3521", "#8f5200"],
    columns: 10
  },
  clarity: {
    colors: ["#ffffff", "#292934", "#f3f2dc", "#d2533c", "#93a299", "#ad8f67", "#726056", "#4c5a6a", "#808da0", "#79463d", "#f2f2f2", "#e7e7ec", "#e7e5b9", "#f6dcd8", "#e9ecea", "#eee8e0", "#e4dedb", "#d8dde3", "#e5e8ec", "#e9d6d3", "#d8d8d8", "#c4c4d1", "#d5d185", "#edbab1", "#d3d9d6", "#ded2c2", "#c9beb8", "#b2bcc8", "#ccd1d9", "#d3aea7", "#bfbfbf", "#8a8aa3", "#aca73b", "#e4978a", "#bec7c1", "#cdbba3", "#af9e94", "#8c9bac", "#b2bac6", "#bd857c", "#a5a5a5", "#56566e", "#56531d", "#a43925", "#6b7c72", "#866b48", "#554840", "#39434f", "#5c697b", "#5a342d", "#7f7f7f", "#3b3b4b", "#22210b", "#6d2619", "#47534c", "#594730", "#39302b", "#262d35", "#3d4652", "#3c231e"],
    columns: 10
  },
  slipstream: {
    colors: ["#ffffff", "#000000", "#b4dcfa", "#212745", "#4e67c8", "#5eccf3", "#a7ea52", "#5dceaf", "#ff8021", "#f14124", "#f2f2f2", "#7f7f7f", "#8bc9f7", "#c7cce4", "#dbe0f4", "#def4fc", "#edfadc", "#def5ef", "#ffe5d2", "#fcd9d3", "#d8d8d8", "#595959", "#4facf3", "#909aca", "#b8c2e9", "#beeafa", "#dbf6b9", "#beebdf", "#ffcca6", "#f9b3a7", "#bfbfbf", "#3f3f3f", "#0d78c9", "#5967af", "#94a3de", "#9ee0f7", "#caf297", "#9de1cf", "#ffb279", "#f68d7b", "#a5a5a5", "#262626", "#063c64", "#181d33", "#31479f", "#11b2eb", "#81d319", "#34ac8b", "#d85c00", "#c3260c", "#7f7f7f", "#0c0c0c", "#021828", "#101322", "#202f6a", "#0b769c", "#568c11", "#22725c", "#903d00", "#821908"],
    columns: 10
  },
  metro: {
    colors: ["#ffffff", "#000000", "#d6ecff", "#4e5b6f", "#7fd13b", "#ea157a", "#feb80a", "#00addc", "#738ac8", "#1ab39f", "#f2f2f2", "#7f7f7f", "#a7d6ff", "#d9dde4", "#e5f5d7", "#fad0e4", "#fef0cd", "#c5f2ff", "#e2e7f4", "#c9f7f1", "#d8d8d8", "#595959", "#60b5ff", "#b3bcca", "#cbecb0", "#f6a1c9", "#fee29c", "#8be6ff", "#c7d0e9", "#94efe3", "#bfbfbf", "#3f3f3f", "#007dea", "#8d9baf", "#b2e389", "#f272af", "#fed46b", "#51d9ff", "#aab8de", "#5fe7d5", "#a5a5a5", "#262626", "#003e75", "#3a4453", "#5ea226", "#af0f5b", "#c58c00", "#0081a5", "#425ea9", "#138677", "#7f7f7f", "#0c0c0c", "#00192e", "#272d37", "#3f6c19", "#750a3d", "#835d00", "#00566e", "#2c3f71", "#0c594f"],
    columns: 10
  },
  flow: {
    colors: ["#ffffff", "#000000", "#dbf5f9", "#04617b", "#0f6fc6", "#009dd9", "#0bd0d9", "#10cf9b", "#7cca62", "#a5c249", "#f2f2f2", "#7f7f7f", "#b2e9f2", "#b4ecfc", "#c7e2fa", "#c4eeff", "#c9fafc", "#c9faed", "#e4f4df", "#edf2da", "#d8d8d8", "#595959", "#76d9e8", "#6adafa", "#90c6f6", "#89deff", "#93f5f9", "#94f6db", "#cae9c0", "#dbe6b6", "#bfbfbf", "#3f3f3f", "#21b2c8", "#20c8f7", "#59a9f2", "#4fceff", "#5df0f6", "#5ff2ca", "#b0dfa0", "#c9da91", "#a5a5a5", "#262626", "#105964", "#02485c", "#0b5394", "#0075a2", "#089ca2", "#0b9b74", "#54a838", "#7e9532", "#7f7f7f", "#0c0c0c", "#062328", "#01303d", "#073763", "#004e6c", "#05686c", "#07674d", "#387025", "#546321"],
    columns: 10
  },
  hardcover: {
    colors: ["#ffffff", "#000000", "#ece9c6", "#895d1d", "#873624", "#d6862d", "#d0be40", "#877f6c", "#972109", "#aeb795", "#f2f2f2", "#7f7f7f", "#e1dca5", "#f2e0c6", "#f0d0c9", "#f6e6d5", "#f5f2d8", "#e7e5e1", "#fbc7bc", "#eef0e9", "#d8d8d8", "#595959", "#d0c974", "#e6c28d", "#e2a293", "#eeceaa", "#ece5b2", "#cfccc3", "#f78f7a", "#dee2d4", "#bfbfbf", "#3f3f3f", "#a29a36", "#daa454", "#d4735e", "#e6b681", "#e2d88c", "#b7b2a5", "#f35838", "#ced3bf", "#a5a5a5", "#262626", "#514d1b", "#664515", "#65281a", "#a2641f", "#a39428", "#655f50", "#711806", "#879464", "#7f7f7f", "#0c0c0c", "#201e0a", "#442e0e", "#431b11", "#6c4315", "#6d621a", "#433f35", "#4b1004", "#5a6243"],
    columns: 10
  },
  trek: {
    colors: ["#ffffff", "#000000", "#fbeec9", "#4e3b30", "#f0a22e", "#a5644e", "#b58b80", "#c3986d", "#a19574", "#c17529", "#f2f2f2", "#7f7f7f", "#f7e09e", "#e1d6cf", "#fcecd5", "#eddfda", "#f0e7e5", "#f3eae1", "#ece9e3", "#f5e3d1", "#d8d8d8", "#595959", "#f3cc5f", "#c4ad9f", "#f9d9ab", "#dcc0b6", "#e1d0cc", "#e7d5c4", "#d9d4c7", "#ebc7a3", "#bfbfbf", "#3f3f3f", "#d29f0f", "#a78470", "#f6c781", "#cba092", "#d2b9b2", "#dbc1a7", "#c6bfab", "#e1ac76", "#a5a5a5", "#262626", "#694f07", "#3a2c24", "#c87d0e", "#7b4b3a", "#926255", "#a17242", "#7b7153", "#90571e", "#7f7f7f", "#0c0c0c", "#2a1f03", "#271d18", "#855309", "#523226", "#614138", "#6b4c2c", "#524b37", "#603a14"],
    columns: 10
  },
  verve: {
    colors: ["#ffffff", "#000000", "#d2d2d2", "#666666", "#ff388c", "#e40059", "#9c007f", "#68007f", "#005bd3", "#00349e", "#f2f2f2", "#7f7f7f", "#bdbdbd", "#e0e0e0", "#ffd7e8", "#ffc6dc", "#ffb8f1", "#f1b2ff", "#c3dcff", "#b8cfff", "#d8d8d8", "#595959", "#9d9d9d", "#c1c1c1", "#ffafd1", "#ff8eba", "#ff71e4", "#e365ff", "#87baff", "#72a0ff", "#bfbfbf", "#3f3f3f", "#696969", "#a3a3a3", "#ff87ba", "#ff5597", "#ff2ad7", "#d519ff", "#4b98ff", "#2b71ff", "#a5a5a5", "#262626", "#343434", "#4c4c4c", "#e90062", "#ab0042", "#75005f", "#4e005f", "#00449e", "#002676", "#7f7f7f", "#0c0c0c", "#151515", "#333333", "#9b0041", "#72002c", "#4e003f", "#34003f", "#002d69", "#00194f"],
    columns: 10
  },
  monochrome: {
    colors: ["#000000", "#1a1a1a", "#333333", "#4d4d4d", "#666666", "#808080", "#999999", "#b3b3b3", "#cccccc", "#e6e6e6", "#f2f2f2", "#ffffff"],
    columns: 12
  }
};

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/ColorPalette.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var DEFAULT_TILE_SIZE = 24;
var DEFAULT_COLUMNS_COUNT = 10;
var DEFAULT_PRESET = "office";
var ColorPaletteVue2 = {
  name: "KendoColorPalette",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "keydown": null,
    "focus": null,
    "blur": null,
    "changemodel": null,
    "update:modelValue": null,
    "update:modelRgbaValue": null,
    "change": null
  },
  props: {
    palette: {
      type: [String, Array],
      default: DEFAULT_PRESET
    },
    columns: Number,
    tileSize: {
      type: [Number, Object],
      default: DEFAULT_TILE_SIZE
    },
    modelValue: String,
    modelRgbaValue: String,
    defaultValue: String,
    value: String,
    disabled: Boolean,
    tabIndex: Number,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  created: function created2() {
    validatePackage(packageMetadata);
    this.guid = guid();
  },
  mounted: function mounted2() {
    this.wrapper = getRef(this, "wrapper");
  },
  updated: function updated() {
    this.wrapper = getRef(this, "wrapper");
  },
  computed: {
    focusedColorCooridanates: function focusedColorCooridanates() {
      return this.focusedColor ? this.paletteService.getCellCoordsFor(this.focusedColor) : void 0;
    },
    isUncontrolled: function isUncontrolled() {
      return this.$props.value === void 0;
    },
    selectedColor: function selectedColor() {
      return this.$props.value !== void 0 ? this.$props.value : this.modelValue !== void 0 ? this.modelValue : this.modelRgbaValue !== void 0 ? this.modelRgbaValue : this.currentValue !== void 0 ? this.currentValue : this.$props.defaultValue;
    }
  },
  data: function data() {
    return {
      focusedColor: this.$props.value,
      currentValue: void 0
    };
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render5(createElement) {
    var h = gh5 || createElement;
    var paletteInfo = this.getPaletteInfo();
    var svc = this.paletteService = new ColorPaletteService();
    svc.setColorMatrix(paletteInfo.colors, paletteInfo.columns);
    var selectedCellCoords = svc.getCellCoordsFor(this.selectedColor);
    var focusedCellCoords = svc.getCellCoordsFor(this.focusedColor);
    var className = classNames("k-colorpalette", {
      "k-disabled": this.$props.disabled
    });
    var renderColumns = function renderColumns2(columns, rowIndex, cSelectedCellCoords, cFocusedCellCoords) {
      var rowIsSelected = cSelectedCellCoords !== void 0 && cSelectedCellCoords.row === rowIndex;
      var selectedColumn = cSelectedCellCoords && cSelectedCellCoords.col;
      var rowIsFocused = cFocusedCellCoords !== void 0 && cFocusedCellCoords.row === rowIndex;
      var focusedColumn = cFocusedCellCoords && cFocusedCellCoords.col;
      var tileSize = typeof this.$props.tileSize !== "number" ? this.$props.tileSize : {
        width: this.$props.tileSize,
        height: this.$props.tileSize
      };
      var width = tileSize.width + "px";
      var height = tileSize.height + "px";
      return columns.map(function(color, i) {
        var _this = this;
        var isSelected = rowIsSelected && selectedColumn === i;
        var tdClassName = classNames("k-colorpalette-tile", {
          "k-selected": isSelected,
          "k-focus": rowIsFocused && focusedColumn === i
        });
        return h("td", {
          "class": tdClassName,
          "aria-label": color,
          attrs: this.v3 ? void 0 : {
            "aria-label": color,
            "aria-selected": isSelected ? true : this.$props.disabled ? void 0 : false,
            id: this.createCellId({
              row: rowIndex,
              col: i
            }),
            role: "gridcell"
          },
          "aria-selected": isSelected ? true : this.$props.disabled ? void 0 : false,
          style: {
            backgroundColor: color,
            width,
            height,
            minWidth: width
          },
          onClick: function onClick2(event) {
            return _this.onColorClick(color, event);
          },
          on: this.v3 ? void 0 : {
            "click": function onClick2(event) {
              return _this.onColorClick(color, event);
            }
          },
          id: this.createCellId({
            row: rowIndex,
            col: i
          }),
          key: i,
          role: "gridcell"
        });
      }, this);
    };
    var renderRows = function renderRows2(rows, rSelectedCellCoords, rFocusedCellCoords) {
      return rows.map(function(row, i) {
        return h("tr", {
          role: "row",
          attrs: this.v3 ? void 0 : {
            role: "row"
          },
          key: i
        }, [renderColumns.call(this, row, i, rSelectedCellCoords, rFocusedCellCoords)]);
      }, this);
    };
    if (paletteInfo.colors.length) {
      return h("div", {
        id: this.$props.id,
        attrs: this.v3 ? void 0 : {
          id: this.$props.id,
          "aria-disabled": this.$props.disabled ? "true" : void 0,
          "aria-activedescendant": focusedCellCoords && this.createCellId(focusedCellCoords),
          "aria-labelledby": this.$props.ariaLabelledBy,
          "aria-describedby": this.$props.ariaDescribedBy,
          role: "grid",
          tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled)
        },
        "class": className,
        onFocusin: this.onFocus,
        on: this.v3 ? void 0 : {
          "focusin": this.onFocus,
          "focusout": this.onBlur,
          "keydown": this.onKeyDown
        },
        onFocusout: this.onBlur,
        onKeydown: this.onKeyDown,
        "aria-disabled": this.$props.disabled ? "true" : void 0,
        "aria-activedescendant": focusedCellCoords && this.createCellId(focusedCellCoords),
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        role: "grid",
        tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled),
        ref: setRef(this, "wrapper")
      }, [h("table", {
        "class": "k-colorpalette-table k-palette",
        role: "presentation",
        attrs: this.v3 ? void 0 : {
          role: "presentation"
        }
      }, [h("tbody", [renderRows.call(this, svc.colorRows, selectedCellCoords, focusedCellCoords)])])]);
    } else {
      return "";
    }
  },
  methods: {
    focus: function focus() {
      if (this.wrapper) {
        this.wrapper.focus();
      }
    },
    onKeyDown: function onKeyDown(event) {
      switch (event.keyCode) {
        case Keys.down:
          this.handleCellNavigation(event, 0, 1);
          break;
        case Keys.up:
          this.handleCellNavigation(event, 0, -1);
          break;
        case Keys.right:
          this.handleCellNavigation(event, 1, 0);
          break;
        case Keys.left:
          this.handleCellNavigation(event, -1, 0);
          break;
        case Keys.enter:
          this.handleEnter(event);
          break;
        default:
          this.$emit("keydown", event);
          return;
      }
      this.$emit("keydown", event);
    },
    onColorClick: function onColorClick(color, event) {
      if (this.isUncontrolled) {
        this.currentValue = color;
        this.focusedColor = color;
      } else {
        this.focusedColor = color;
      }
      this.dispatchChangeEvent(color, event);
    },
    onFocus: function onFocus(event) {
      this.focusedColor = this.selectedColor || this.paletteService.colorRows[0][0];
      this.$emit("focus", {
        event,
        target: this
      });
    },
    onBlur: function onBlur(event) {
      this.focusedColor = void 0;
      this.$emit("blur", {
        event,
        target: this
      });
    },
    handleCellNavigation: function handleCellNavigation(event, horizontalStep, verticalStep) {
      event.preventDefault();
      if (this.focusedColorCooridanates) {
        var newCoords = this.paletteService.getNextCell(this.focusedColorCooridanates, horizontalStep, verticalStep);
        this.focusedColor = this.paletteService.getColorAt(newCoords);
      } else {
        this.focusedColor = this.paletteService.colorRows[0][0];
      }
    },
    handleEnter: function handleEnter(event) {
      if (this.isUncontrolled) {
        this.currentValue = this.focusedColor;
      }
      this.dispatchChangeEvent(this.focusedColor, event);
    },
    dispatchChangeEvent: function dispatchChangeEvent(value2, event) {
      var rgbaValue = parseColor2(value2, "rgba");
      this.$emit("changemodel", value2);
      this.$emit("update:modelValue", value2);
      this.$emit("update:modelRgbaValue", rgbaValue);
      this.$emit("change", {
        event,
        component: this,
        value: value2,
        rgbaValue
      });
    },
    getPaletteInfo: function getPaletteInfo() {
      if (typeof this.$props.palette === "string") {
        var preset = PALETTEPRESETS[this.$props.palette];
        if (isPresent(preset)) {
          return {
            colors: preset.colors,
            columns: this.$props.columns || preset.columns || DEFAULT_COLUMNS_COUNT
          };
        } else {
          return {
            colors: [],
            columns: 0
          };
        }
      } else {
        return {
          colors: this.$props.palette || [],
          columns: this.$props.columns || DEFAULT_COLUMNS_COUNT
        };
      }
    },
    createCellId: function createCellId(cellCoords) {
      return "".concat(this.guid, "_").concat(cellCoords.row, "_").concat(cellCoords.col);
    }
  }
};
var ColorPalette = ColorPaletteVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/utils/color-cache.js
var cache = {};
var DEFAULT_GRADIENT_SETTINGS = {
  opacity: true
};
var DEFAULT_PALETTE_SETTINGS = {
  palette: DEFAULT_PRESET,
  tileSize: DEFAULT_TILE_SIZE
};
function removeCachedColor(componentGuid) {
  delete cache[componentGuid];
}

// node_modules/@progress/kendo-vue-inputs/dist/es/input/Input.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var allVue7 = vue_runtime_esm_bundler_exports;
var gh6 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";
var ref = allVue7.ref;
var InputVue2 = {
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "input": null,
    "change": null,
    "changemodel": null,
    "update:modelValue": null,
    "focus": null,
    "blur": null,
    "keyup": null,
    "keydown": null,
    "keypress": null
  },
  props: {
    modelValue: {
      type: [String, Number],
      default: void 0
    },
    disabled: {
      type: Boolean,
      default: void 0
    },
    defaultValue: {
      type: [String, Number],
      default: ""
    },
    value: {
      type: [String, Number]
    },
    label: {
      type: String
    },
    placeholder: {
      type: String
    },
    required: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator2(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator3(value2) {
        return [null, "solid", "flat", "outline"].includes(value2);
      }
    },
    dir: {
      type: String
    },
    id: String,
    valid: {
      type: Boolean,
      default: void 0
    },
    validate: {
      type: Boolean
    },
    validationMessage: {
      type: String
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    iconName: String,
    inputPrefix: templateDefinition,
    inputSuffix: templateDefinition,
    showValidationIcon: Boolean,
    showLoadingIcon: Boolean,
    showClearButton: Boolean,
    inputClass: String,
    wrapperClass: String,
    tabIndex: Number,
    ariaLabel: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  data: function data2() {
    return {
      hasMounted: false,
      autofill: false,
      currentValue: "",
      valueDuringOnChange: "",
      focused: false
    };
  },
  created: function created3() {
    validatePackage(packageMetadata);
    this._input = void 0;
    this._inputId = guid();
    this.$data.valueDuringOnChange = void 0;
    this.$data.currentValue = this.$props.defaultValue;
  },
  mounted: function mounted3() {
    this._input = this.v3 ? this.inputRef : this.$refs.input;
    this.wrapper = this.v3 ? this.wrapperRef : this.$refs.wrapper;
    this.$data.hasMounted = true;
    this.setValidity();
  },
  updated: function updated2() {
    this.setValidity();
    this.updateValidClass();
  },
  // @ts-ignore
  setup: !isV37 ? void 0 : function() {
    var v3 = !!isV37;
    var inputRef = ref(null);
    return {
      v3,
      inputRef
    };
  },
  render: function render6(createElement) {
    var _this = this;
    var h = gh6 || createElement;
    var isValid3 = !this.$props.validityStyles || this.validity().valid;
    var _a3 = this.$props, label = _a3.label, id = _a3.id, required = _a3.required, iconName = _a3.iconName, showValidationIcon = _a3.showValidationIcon, showLoadingIcon = _a3.showLoadingIcon, showClearButton = _a3.showClearButton, tabIndex = _a3.tabIndex, ariaLabel = _a3.ariaLabel, ariaLabelledBy = _a3.ariaLabelledBy, ariaDescribedBy = _a3.ariaDescribedBy;
    var inputId = id || this._inputId;
    var textbox = h("input", __assign4(__assign4({
      domProps: this.v3 ? null : __assign4(__assign4({}, this.$attrs), {
        placeholder: this.$props.placeholder,
        id: inputId,
        required,
        disabled: this.$props.disabled,
        value: this.computedValue
      }),
      attrs: this.v3 ? void 0 : __assign4(__assign4({}, this.$attrs), {
        tabindex: tabIndex
      })
    }, this.$attrs), {
      placeholder: this.$props.placeholder,
      id: inputId,
      tabindex: tabIndex,
      required,
      ariaLabel,
      ariaLabelledby: ariaLabelledBy,
      ariaDescribedby: ariaDescribedBy,
      ariaDisabled: this.$props.disabled,
      disabled: this.$props.disabled,
      value: this.computedValue,
      class: this.inputInnerClass,
      ref: this.v3 ? function(el) {
        _this.inputRef = el;
      } : "input",
      on: this.v3 ? null : {
        change: this.handleChange,
        focus: this.emitFocus,
        blur: this.emitBlur,
        keydown: this.handleKeydown,
        keyup: this.handleKeyup,
        keypress: this.handleKeypress,
        input: this.handleInput,
        animationstart: this.handleAutoFill,
        animationend: this.handleAutoFillEnd
      },
      onKeydown: this.handleKeydown,
      onKeyup: this.handleKeyup,
      onKeypress: this.handleKeypress,
      onChange: this.handleChange,
      onFocus: this.emitFocus,
      onBlur: this.emitBlur,
      onInput: this.handleInput,
      onAnimationstart: this.handleAutoFill,
      onAnimationend: this.handleAutoFillEnd
    }));
    var inputPrefixTemplate = templateRendering.call(this, this.$props.inputPrefix, getListeners.call(this));
    var inputSuffixTemplate = templateRendering.call(this, this.$props.inputSuffix, getListeners.call(this));
    var inputPrefix = getTemplate.call(this, {
      h,
      template: inputPrefixTemplate,
      additionalProps: {
        value: this.computedValue,
        valid: isValid3
      }
    });
    var inputSuffix = getTemplate.call(this, {
      h,
      template: inputSuffixTemplate,
      additionalProps: {
        value: this.computedValue,
        valid: isValid3
      }
    });
    var inputWrapper = h("span", {
      "class": this.inputWrapperClass(),
      ref: this.v3 ? function(el) {
        _this.wrapperRef = el;
      } : "wrapper"
    }, [iconName && h(Icon, {
      name: iconName,
      attrs: this.v3 ? void 0 : {
        name: iconName
      },
      "class": "k-input-icon"
    }), this.$props.inputPrefix && h("span", {
      "class": "k-input-prefix"
    }, [inputPrefix]), textbox, this.$props.inputSuffix && h("span", {
      "class": "k-input-suffix"
    }, [inputSuffix]), showValidationIcon && isValid3 && h(Icon, {
      name: "check",
      attrs: this.v3 ? void 0 : {
        name: "check",
        icon: checkIcon
      },
      icon: checkIcon,
      "class": "k-input-validation-icon"
    }), showValidationIcon && !isValid3 && h(Icon, {
      name: "exclamation-circle",
      attrs: this.v3 ? void 0 : {
        name: "exclamation-circle",
        icon: exclamationCircleIcon
      },
      icon: exclamationCircleIcon,
      "class": "k-input-validation-icon"
    }), showLoadingIcon && h(Icon, {
      name: "loading",
      attrs: this.v3 ? void 0 : {
        name: "loading"
      },
      "class": "k-input-loading-icon"
    }), showClearButton && this.computedValue && h("span", {
      onClick: this.clearClick,
      on: this.v3 ? void 0 : {
        "click": this.clearClick
      },
      "class": "k-clear-value"
    }, [h(Icon, {
      name: "x",
      attrs: this.v3 ? void 0 : {
        name: "x",
        icon: xIcon
      },
      icon: xIcon
    })])]);
    return label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label,
        attrs: this.v3 ? void 0 : {
          label,
          editorId: inputId,
          editorValue: this.computedValue,
          editorValid: isValid3,
          editorDisabled: this.$props.disabled,
          editorPlaceholder: this.$data.focused ? this.$props.placeholder : "",
          dir: this.$props.dir
        },
        editorId: inputId,
        editorValue: this.computedValue,
        editorValid: isValid3,
        editorDisabled: this.$props.disabled,
        editorPlaceholder: this.$data.focused ? this.$props.placeholder : "",
        dir: this.$props.dir
      }, this.v3 ? function() {
        return [inputWrapper];
      } : [inputWrapper])
    ) : inputWrapper;
  },
  methods: {
    updateValidClass: function updateValidClass() {
      this.wrapper.classList.toggle("k-invalid", !this.validity().valid);
    },
    emitFocus: function emitFocus(e) {
      this.$emit("focus", e);
      this.$data.focused = true;
    },
    emitBlur: function emitBlur(e) {
      this.$emit("blur", e);
      this.$data.focused = false;
    },
    handleKeydown: function handleKeydown(e) {
      this.$emit("keydown", e);
    },
    handleKeyup: function handleKeyup(e) {
      this.$emit("keyup", e);
    },
    handleKeypress: function handleKeypress(e) {
      this.$emit("keypress", e);
    },
    clearClick: function clearClick(event) {
      this.emitUpdate(event, "change", "");
    },
    focus: function focus2() {
      if (this._input) {
        this._input.focus();
      }
    },
    validity: function validity() {
      var result = {
        badInput: this._input ? this._input.validity.badInput : false,
        patternMismatch: this._input ? this._input.validity.patternMismatch : false,
        rangeOverflow: this._input ? this._input.validity.rangeOverflow : false,
        rangeUnderflow: this._input ? this._input.validity.rangeUnderflow : false,
        stepMismatch: this._input ? this._input.validity.stepMismatch : false,
        tooLong: this._input ? this._input.validity.tooLong : false,
        tooShort: this._input ? this._input.validity.tooShort : false,
        typeMismatch: this._input ? this._input.validity.typeMismatch : false,
        valueMissing: this._input ? this._input.validity.valueMissing : false
      };
      return __assign4(__assign4({}, result), {
        customError: this.$props.validationMessage !== void 0,
        valid: this.$props.valid !== void 0 ? this.$props.valid : this._input ? !this.isInvalid(result) : true
      });
    },
    isInvalid: function isInvalid(state) {
      var result = false;
      for (var prop in state) {
        if (state.hasOwnProperty(prop)) {
          result = result || state[prop];
        }
      }
      return result;
    },
    setValidity: function setValidity() {
      if (this._input && this._input.setCustomValidity) {
        this._input.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage || "");
      }
    },
    handleInput: function handleInput(event) {
      this.emitUpdate(event, "input", event.target.value);
    },
    handleChange: function handleChange(event) {
      this.emitUpdate(event, "change", event.target.value);
    },
    emitUpdate: function emitUpdate(event, eventName, value2) {
      var that = this;
      if (this.disabled) {
        return;
      }
      this.$data.currentValue = value2;
      this.$data.valueDuringOnChange = value2;
      this.$nextTick(function() {
        that.$emit("changemodel", value2);
        that.$emit("update:modelValue", value2);
        that.$emit(eventName, {
          event,
          value: value2,
          component: that,
          target: event.target,
          validity: that.validity()
        });
        that.$data.valueDuringOnChange = void 0;
      });
    },
    handleAutoFill: function handleAutoFill(e) {
      if (e.animationName === "autoFillStart") {
        var parent_1 = e.target.parentNode;
        if (parent_1 && parent_1.classList.contains("k-empty")) {
          this.$data.autofill = true;
          parent_1.classList.remove("k-empty");
        }
      }
    },
    handleAutoFillEnd: function handleAutoFillEnd(e) {
      if (e.animationName === "autoFillEnd") {
        var parent_2 = e.target.parentNode;
        if (parent_2) {
          this.$data.autofill = false;
        }
      }
    },
    name: function name() {
      return this.$props.name;
    },
    inputWrapperClass: function inputWrapperClass() {
      var _a3;
      var _b = this.$props, size2 = _b.size, fillMode = _b.fillMode, rounded = _b.rounded;
      var isValid3 = !this.$data.hasMounted || !this.$props.validityStyles || this.validity().valid;
      return _a3 = {
        "k-textbox": true,
        "k-input": true
      }, _a3["k-input-".concat(kendoThemeMaps.sizeMap[size2] || size2)] = size2, _a3["k-input-".concat(fillMode)] = fillMode, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a3["k-invalid"] = !isValid3, _a3["k-required"] = this.required, _a3["k-disabled"] = this.$props.disabled, _a3[this.wrapperClass] = this.wrapperClass, _a3;
    }
  },
  computed: {
    spanClassNames: {
      get: function get() {
        var isValid3 = !this.$data.hasMounted || !this.$props.validityStyles || this.validity().valid;
        return {
          "k-floating-label-container": true,
          "k-focus": this.$data.focused,
          "k-empty": !((this.computedValue === 0 ? true : this.computedValue) || this.$props.placeholder || this.$data.autofill),
          "k-autofill": this.$data.autofill,
          "k-invalid": !isValid3 && isValid3 !== void 0,
          "k-rtl": this.$props.dir === "rtl"
        };
      }
    },
    inputInnerClass: function inputInnerClass() {
      var _a3;
      return _a3 = {
        "k-input-inner": true
      }, _a3[this.inputClass] = this.inputClass, _a3;
    },
    computedValue: {
      get: function get2() {
        return this.$data.valueDuringOnChange !== void 0 ? this.$data.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentValue;
      }
    }
  }
};
var Input = InputVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/HexInput.js
var allVue8 = vue_runtime_esm_bundler_exports;
var gh7 = allVue8.h;
var isV38 = allVue8.version && allVue8.version[0] === "3";
var HexInputVue2 = {
  name: "KendoHexInput",
  // @ts-ignore
  emits: {
    "hexchange": null,
    "blur": null,
    "focus": null
  },
  props: {
    tabIndex: Number,
    hex: String,
    disabled: Boolean
  },
  computed: {
    isHexValid: function isHexValid() {
      return !!parseColor2(this.currentHex, "rgba");
    }
  },
  data: function data3() {
    return {
      currentHex: this.$props.hex,
      originalHex: this.$props.hex
    };
  },
  mounted: function mounted4() {
    this._input = this.$refs.input._input;
  },
  // @ts-ignore
  setup: !isV38 ? void 0 : function() {
    var v3 = !!isV38;
    return {
      v3
    };
  },
  watch: {
    hex: function hex(newValue) {
      this.currentHex = newValue;
    }
  },
  // @ts-ignore
  render: function render7(createElement) {
    var h = gh7 || createElement;
    return h(Input, {
      value: this.currentHex,
      attrs: this.v3 ? void 0 : {
        value: this.currentHex,
        valid: this.isHexValid,
        disabled: this.$props.disabled,
        tabIndex: this.tabIndex
      },
      onInput: this.onChange,
      on: this.v3 ? void 0 : {
        "input": this.onChange,
        "change": this.onChange,
        "focus": this.onFocus,
        "blur": this.onBlur
      },
      onChange: this.onChange,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      valid: this.isHexValid,
      disabled: this.$props.disabled,
      tabIndex: this.tabIndex,
      ref: "input"
    });
  },
  methods: {
    onChange: function onChange(event) {
      var hex3 = event.target.value;
      var value2 = parseColor2(hex3, "rgba");
      this.currentHex = hex3;
      if (isPresent(value2)) {
        this.$emit("hexchange", {
          hex: hex3,
          value: value2,
          event
        });
      }
    },
    onBlur: function onBlur2(event) {
      if (!isPresent(parseColor2(this.hex, "rgba"))) {
        this.currentHex = this.originalHex;
      }
      this.$emit("blur", event);
    },
    onFocus: function onFocus2(event) {
      this.$emit("focus", event);
    }
  }
};
var HexInput = HexInputVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/messages/main.js
var _a;
var numericIncreaseValue = "numerictextbox.increment";
var numericDecreaseValue = "numerictextbox.decrement";
var sliderIncreaseValue = "slider.increment";
var sliderDecreaseValue = "slider.decrement";
var sliderDragTitle = "slider.dragTitle";
var colorGradientDragHandle = "colorGradient.dragHandle";
var colorGradientR = "colorGradient.r";
var colorGradientG = "colorGradient.g";
var colorGradientB = "colorGradient.b";
var colorGradientA = "colorGradient.a";
var colorGradientHex = "colorGradient.hex";
var colorGradientHexLabel = "colorGradient.hexLabel";
var colorGradientInputColorButton = "colorGradient.inputColorButton";
var colorGradientRLabel = "colorGradient.rLabel";
var colorGradientGLabel = "colorGradient.gLabel";
var colorGradientBLabel = "colorGradient.bLabel";
var colorGradientALabel = "colorGradient.aLabel";
var colorGradientContrastRatio = "colorGradient.contrastRatio";
var colorGradientAALevel = "colorGradient.colorGradientAALevel";
var colorGradientAAALevel = "colorGradient.colorGradientAAALevel";
var colorGradientPass = "colorGradient.colorGradientPass";
var colorGradientFail = "colorGradient.colorGradientFail";
var colorGradientHueSliderLabel = "colorGradient.hueSliderLabel";
var colorGradientAlphaSliderLabel = "colorGradient.alphaSliderLabel";
var flatColorPickerCancelBtn = "flatColorPicker.cancelBtn";
var flatColorPickerApplyBtn = "flatColorPicker.applyBtn";
var flatColorPickerGradientBtn = "flatColorPicker.gradientBtn";
var flatColorPickerPaletteBtn = "flatColorPicker.paletterBtn";
var flatColorPickerClearBtn = "flatColorPicker.clearBtn";
var checkboxValidation = "checkbox.validation";
var checkboxOptionalText = "checkbox.optionalText";
var radioButtonValidation = "radioButton.validation";
var switchValidation = "switch.validation";
var colorPickerDropdownButtonAriaLabel = "colorPicker.dropdownButtonAriaLabel";
var colorGradientToggleInputsButton = "colorGradient.toggleInputsButton";
var ratingAriaLabel = "rating.ariaLabel";
var signatureClear = "signature.clear";
var signatureMaximize = "signature.maximize";
var signatureMinimize = "signature.minimize";
var messages = (_a = {}, _a[numericIncreaseValue] = "Increase value", _a[numericDecreaseValue] = "Decrease value", _a[sliderIncreaseValue] = "Increase", _a[sliderDecreaseValue] = "Decrease", _a[sliderDragTitle] = "Drag", _a[colorGradientDragHandle] = "Color well with two-dimensional slider for selecting\n     saturation and lightness. Selected color is", _a[colorGradientInputColorButton] = "Change the color input", _a[colorGradientR] = "r", _a[colorGradientG] = "g", _a[colorGradientB] = "b", _a[colorGradientA] = "a", _a[colorGradientRLabel] = "red chanel", _a[colorGradientGLabel] = "green chanel", _a[colorGradientBLabel] = "blue chanel", _a[colorGradientALabel] = "alpha chanel", _a[colorGradientHex] = "hex", _a[colorGradientHexLabel] = "HEX", _a[colorGradientContrastRatio] = "Contrast ratio", _a[colorGradientAALevel] = "AA", _a[colorGradientAAALevel] = "AAA", _a[colorGradientPass] = "Pass", _a[colorGradientFail] = "Fail", _a[colorGradientHueSliderLabel] = "Hue slider", _a[colorGradientAlphaSliderLabel] = "Alpha slider", _a[colorGradientToggleInputsButton] = "Toggle colorgradient inputs", _a[flatColorPickerCancelBtn] = "Cancel", _a[flatColorPickerApplyBtn] = "Apply", _a[flatColorPickerGradientBtn] = "Gradient", _a[flatColorPickerPaletteBtn] = "Palette", _a[flatColorPickerClearBtn] = "Clear", _a[checkboxValidation] = "Please check this box if you want to proceed!", _a[checkboxOptionalText] = "(Optional)", _a[radioButtonValidation] = "Please select option if you want to proceed!", _a[switchValidation] = "Please turn on if you want to proceed!", _a[colorPickerDropdownButtonAriaLabel] = "Select", _a[ratingAriaLabel] = "Rating", _a[signatureClear] = "Clear", _a[signatureMaximize] = "Maximize", _a[signatureMinimize] = "Minimize", _a);

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/ColorInput.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var allVue9 = vue_runtime_esm_bundler_exports;
var gh8 = allVue9.h;
var isV39 = allVue9.version && allVue9.version[0] === "3";
var modes = ["rgba", "rgb", "hex"];
var ColorInputVue2 = {
  name: "KendoColorInput",
  // @ts-ignore
  emits: {
    "hexchange": null,
    "rgbachange": null
  },
  props: {
    tabIndex: Number,
    rgba: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    hex: String,
    opacity: Boolean,
    disabled: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created4() {
    this.hexInputId = guid();
  },
  data: function data4() {
    return {
      inputMode: modes[1]
    };
  },
  mounted: function mounted5() {
    this.lastFocusable = this.$refs.hexinput || this.$refs.numerica || this.$refs.numericb;
  },
  updated: function updated3() {
    this.lastFocusable = this.$refs.hexinput || this.$refs.numerica || this.$refs.numericb;
  },
  // @ts-ignore
  setup: !isV39 ? void 0 : function() {
    var v3 = !!isV39;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render8(createElement) {
    var h = gh8 || createElement;
    var localizationService = provideLocalizationService(this);
    var hexMessage = localizationService.toLanguageString(colorGradientHex, messages[colorGradientHex]);
    var buttonMessage = localizationService.toLanguageString(colorGradientInputColorButton, messages[colorGradientInputColorButton]);
    var rMessage = localizationService.toLanguageString(colorGradientR, messages[colorGradientR]);
    var gMessage = localizationService.toLanguageString(colorGradientG, messages[colorGradientG]);
    var bMessage = localizationService.toLanguageString(colorGradientB, messages[colorGradientB]);
    var aMessage = localizationService.toLanguageString(colorGradientA, messages[colorGradientA]);
    var rLabelMessage = localizationService.toLanguageString(colorGradientRLabel, messages[colorGradientRLabel]);
    var gLabelMessage = localizationService.toLanguageString(colorGradientGLabel, messages[colorGradientGLabel]);
    var bLabelMessage = localizationService.toLanguageString(colorGradientBLabel, messages[colorGradientBLabel]);
    var aLabelMessage = localizationService.toLanguageString(colorGradientALabel, messages[colorGradientALabel]);
    return h("div", {
      "class": "k-colorgradient-inputs k-hstack"
    }, [h("div", {
      "class": "k-vstack"
    }, [h(Button, {
      ariaLabel: buttonMessage,
      attrs: this.v3 ? void 0 : {
        ariaLabel: buttonMessage,
        tabIndex: this.tabIndex,
        type: "button",
        fillMode: "flat",
        icon: "caret-alt-expand",
        svgIcon: caretAltExpandIcon
      },
      tabIndex: this.tabIndex,
      type: "button",
      fillMode: "flat",
      icon: "caret-alt-expand",
      svgIcon: caretAltExpandIcon,
      "class": "k-colorgradient-toggle-mode k-icon-button",
      onClick: this.onToggleModeChange,
      on: this.v3 ? void 0 : {
        "click": this.onToggleModeChange,
        "keydown": this.onKeyDown
      },
      onKeydown: this.onKeyDown
    })]), this.inputMode === "hex" && h("div", {
      "class": "k-vstack k-flex-1"
    }, [
      h("span", {
        "class": "k-hex-value"
      }, [h(HexInput, {
        id: this.hexInputId,
        attrs: this.v3 ? void 0 : {
          id: this.hexInputId,
          tabIndex: this.tabIndex,
          hex: this.$props.hex,
          disabled: this.$props.disabled
        },
        tabIndex: this.tabIndex,
        hex: this.$props.hex,
        onHexchange: this.onHexChange,
        on: this.v3 ? void 0 : {
          "hexchange": this.onHexChange
        },
        disabled: this.$props.disabled,
        ref: "hexinput"
      })]),
      // @ts-ignore  function children
      h(Label, {
        "class": "k-colorgradient-input-label",
        "for": this.hexInputId,
        attrs: this.v3 ? void 0 : {
          "for": this.hexInputId
        }
      }, this.v3 ? function() {
        return [hexMessage];
      } : [hexMessage])
    ]), (this.inputMode === "rgb" || this.inputMode === "rgba") && [h("div", {
      "class": "k-vstack"
    }, [
      h(NumericTextBox, {
        inputType: "number",
        attrs: this.v3 ? void 0 : {
          inputType: "number",
          tabIndex: this.tabIndex,
          value: this.$props.rgba.r,
          min: 0,
          max: 255,
          spinners: false,
          format: "n",
          ariaLabel: rLabelMessage,
          disabled: this.$props.disabled
        },
        tabIndex: this.tabIndex,
        value: this.$props.rgba.r,
        min: 0,
        max: 255,
        spinners: false,
        format: "n",
        ariaLabel: rLabelMessage,
        onChange: this.onRgbaRChange,
        on: this.v3 ? void 0 : {
          "change": this.onRgbaRChange
        },
        disabled: this.$props.disabled
      }),
      // @ts-ignore  function children
      h(Label, {
        "class": "k-colorgradient-input-label"
      }, this.v3 ? function() {
        return [rMessage];
      } : [rMessage])
    ]), h("div", {
      "class": "k-vstack"
    }, [
      h(NumericTextBox, {
        inputType: "number",
        attrs: this.v3 ? void 0 : {
          inputType: "number",
          tabIndex: this.tabIndex,
          value: this.$props.rgba.g,
          min: 0,
          max: 255,
          spinners: false,
          format: "n",
          ariaLabel: gLabelMessage,
          disabled: this.$props.disabled
        },
        tabIndex: this.tabIndex,
        value: this.$props.rgba.g,
        min: 0,
        max: 255,
        spinners: false,
        format: "n",
        ariaLabel: gLabelMessage,
        onChange: this.onRgbaGChange,
        on: this.v3 ? void 0 : {
          "change": this.onRgbaGChange
        },
        disabled: this.$props.disabled
      }),
      // @ts-ignore  function children
      h(Label, {
        "class": "k-colorgradient-input-label"
      }, this.v3 ? function() {
        return [gMessage];
      } : [gMessage])
    ]), h("div", {
      "class": "k-vstack"
    }, [
      h(NumericTextBox, {
        inputType: "number",
        attrs: this.v3 ? void 0 : {
          inputType: "number",
          tabIndex: this.tabIndex,
          value: this.$props.rgba.b,
          min: 0,
          max: 255,
          spinners: false,
          format: "n",
          ariaLabel: bLabelMessage,
          disabled: this.$props.disabled
        },
        tabIndex: this.tabIndex,
        value: this.$props.rgba.b,
        min: 0,
        max: 255,
        spinners: false,
        format: "n",
        ariaLabel: bLabelMessage,
        onChange: this.onRgbaBChange,
        on: this.v3 ? void 0 : {
          "change": this.onRgbaBChange
        },
        disabled: this.$props.disabled,
        ref: "numericb"
      }),
      // @ts-ignore  function children
      h(Label, {
        "class": "k-colorgradient-input-label"
      }, this.v3 ? function() {
        return [bMessage];
      } : [bMessage])
    ])], this.inputMode === "rgba" && h("div", {
      "class": "k-vstack"
    }, [this.$props.opacity && h(NumericTextBox, {
      inputType: "number",
      attrs: this.v3 ? void 0 : {
        inputType: "number",
        tabIndex: this.tabIndex,
        value: this.$props.rgba.a,
        min: 0,
        max: 1,
        step: 0.01,
        spinners: false,
        format: "n2",
        ariaLabel: aLabelMessage,
        disabled: this.$props.disabled
      },
      tabIndex: this.tabIndex,
      value: this.$props.rgba.a,
      min: 0,
      max: 1,
      step: 0.01,
      spinners: false,
      format: "n2",
      ariaLabel: aLabelMessage,
      onChange: this.onRgbaAChange,
      on: this.v3 ? void 0 : {
        "change": this.onRgbaAChange
      },
      disabled: this.$props.disabled,
      ref: "numerica"
    }), this.$props.opacity && // @ts-ignore  function children
    h(Label, {
      "class": "k-colorgradient-input-label"
    }, this.v3 ? function() {
      return [aMessage];
    } : [aMessage])])]);
  },
  methods: {
    onHexChange: function onHexChange(event) {
      this.$emit("hexchange", event.hex, event.value, event);
    },
    onRgbaRChange: function onRgbaRChange(event) {
      this.dispatchRgbaChange({
        r: event.value
      }, event);
    },
    onRgbaGChange: function onRgbaGChange(event) {
      this.dispatchRgbaChange({
        g: event.value
      }, event);
    },
    onRgbaBChange: function onRgbaBChange(event) {
      this.dispatchRgbaChange({
        b: event.value
      }, event);
    },
    onRgbaAChange: function onRgbaAChange(event) {
      this.dispatchRgbaChange({
        a: event.value
      }, event);
    },
    dispatchRgbaChange: function dispatchRgbaChange(newValue, event) {
      var rgba2 = __assign5({}, this.$props.rgba);
      if (newValue.r !== void 0) {
        rgba2.r = newValue.r;
      }
      if (newValue.g !== void 0) {
        rgba2.g = newValue.g;
      }
      if (newValue.b !== void 0) {
        rgba2.b = newValue.b;
      }
      if (newValue.a !== void 0) {
        rgba2.a = newValue.a;
      }
      this.$emit("rgbachange", rgba2, event);
    },
    onToggleModeChange: function onToggleModeChange() {
      var index = modes.length - 1 === modes.indexOf(this.inputMode) ? 0 : modes.indexOf(this.inputMode) + 1;
      if (!this.$props.opacity) {
        var nextIndex = modes[index] === "rgba" ? index + 1 : index;
        this.inputMode = modes[nextIndex];
      } else {
        this.inputMode = modes[index];
      }
    },
    onKeyDown: function onKeyDown2(e) {
      if (e.keyCode === Keys.enter) {
        e.stopPropagation();
      }
    }
  }
};
var ColorInput = ColorInputVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/ColorContrastLabels.js
var allVue10 = vue_runtime_esm_bundler_exports;
var gh9 = allVue10.h;
var isV310 = allVue10.version && allVue10.version[0] === "3";
var ColorContrastLabelsVue2 = {
  name: "KendoColorContrastLabels",
  props: {
    bgColor: Object,
    rgba: Object
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV310 ? void 0 : function() {
    var v3 = !!isV310;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render9(createElement) {
    var h = gh9 || createElement;
    var ls = provideLocalizationService(this);
    var contrastRatioMessage = ls.toLanguageString(colorGradientContrastRatio, messages[colorGradientContrastRatio]);
    var AALevelMessage = ls.toLanguageString(colorGradientAALevel, messages[colorGradientAALevel]);
    var AAALevelMessage = ls.toLanguageString(colorGradientAAALevel, messages[colorGradientAAALevel]);
    var passMessage = ls.toLanguageString(colorGradientPass, messages[colorGradientPass]);
    var failMessage = ls.toLanguageString(colorGradientFail, messages[colorGradientFail]);
    var contrast = getContrastFromTwoRGBAs(this.$props.rgba, this.$props.bgColor);
    var requiredAAContrast = 4.5.toFixed(1);
    var requiredAAAContrast = 7 .toFixed(1);
    var contrastText = "".concat(contrastRatioMessage, ": ").concat(contrast.toFixed(2));
    var aaText = "".concat(AALevelMessage, ": ").concat(requiredAAContrast);
    var aaaText = "".concat(AAALevelMessage, ": ").concat(requiredAAAContrast);
    var aaPass = contrast >= 4.5;
    var aaaPass = contrast >= 7;
    var success = h("span", {
      key: 1,
      "class": "k-contrast-validation k-text-success"
    }, [passMessage, " ", h(Icon, {
      name: "check",
      attrs: this.v3 ? void 0 : {
        name: "check",
        icon: checkIcon
      },
      icon: checkIcon
    })]);
    var error = h("span", {
      key: 2,
      "class": "k-contrast-validation k-text-error"
    }, [failMessage, " ", h(Icon, {
      name: "x",
      attrs: this.v3 ? void 0 : {
        name: "x",
        icon: xIcon
      },
      icon: xIcon
    })]);
    return h("div", {
      "class": "k-vbox k-colorgradient-color-contrast"
    }, [h("div", {
      "class": "k-contrast-ratio"
    }, [h("span", {
      "class": "k-contrast-ratio-text"
    }, [contrastText]), aaPass ? h("span", {
      "class": "k-contrast-validation k-text-success"
    }, [h(Icon, {
      name: "check",
      attrs: this.v3 ? void 0 : {
        name: "check",
        icon: checkIcon
      },
      icon: checkIcon
    }), aaaPass && h(Icon, {
      name: "check",
      attrs: this.v3 ? void 0 : {
        name: "check",
        icon: checkIcon
      },
      icon: checkIcon
    })]) : h("span", {
      "class": "k-contrast-validation k-text-error"
    }, [h(Icon, {
      name: "x",
      attrs: this.v3 ? void 0 : {
        name: "x",
        icon: xIcon
      },
      icon: xIcon
    })])]), h("div", [h("span", [aaText]), aaPass ? success : error]), h("div", [h("span", [aaaText]), aaaPass ? success : error])]);
  }
};
var ColorContrastLabels = ColorContrastLabelsVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/utils/svg-calc.js
var line = function(pointA, pointB) {
  var lengthX = pointB[0] - pointA[0];
  var lengthY = pointB[1] - pointA[1];
  return {
    length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),
    angle: Math.atan2(lengthY, lengthX)
  };
};
var controlPoint = function(lineCalc) {
  return function(current, previous, next, reverse) {
    var p = previous || current;
    var n = next || current;
    var smooth = 0.1;
    var l = lineCalc(p, n);
    var angle = l.angle + (reverse ? Math.PI : 0);
    var length = l.length * smooth;
    var x = current[0] + Math.cos(angle) * length;
    var y = current[1] + Math.sin(angle) * length;
    return [x, y];
  };
};
var bezierCommand = function(controlPointCalc) {
  return function(point, i, a) {
    var _a3 = controlPointCalc(a[i - 1], a[i - 2], point), cpsX = _a3[0], cpsY = _a3[1];
    var _b = controlPointCalc(point, a[i - 1], a[i + 1], true), cpeX = _b[0], cpeY = _b[1];
    return "C ".concat(cpsX, ",").concat(cpsY, " ").concat(cpeX, ",").concat(cpeY, " ").concat(point[0], ",").concat(point[1]);
  };
};

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/ColorContrastSvg.js
var allVue11 = vue_runtime_esm_bundler_exports;
var gh10 = allVue11.h;
var isV311 = allVue11.version && allVue11.version[0] === "3";
var AA_CONTRAST = 4.5;
var AAA_CONTRAST = 7;
var STEP_COUNT = 16;
var ColorContrastSvgVue2 = {
  name: "KendoColorContrastSvg",
  props: {
    metrics: Object,
    backgroundColor: String,
    hsva: Object
  },
  // @ts-ignore
  setup: !isV311 ? void 0 : function() {
    var v3 = !!isV311;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render10(createElement) {
    var _this = this;
    var h = gh10 || createElement;
    var svgPath = function svgPath2(points, command) {
      if (points.length === 0) {
        return "";
      }
      var d = points.reduce(function(acc, point, i, a) {
        return i === 0 ? (
          // if first point
          "M ".concat(point[0], ",").concat(point[1])
        ) : (
          // else
          "".concat(acc, " ").concat(command(point, i, a))
        );
      }, "");
      return h("path", {
        d,
        attrs: this.v3 ? void 0 : {
          d,
          fill: "none",
          stroke: "white",
          "stroke-width": "1"
        },
        fill: "none",
        stroke: "white",
        "stroke-width": "1"
      });
    };
    var gradientRectMetrics = this.$props.metrics;
    var findValue = function findValue2(contrast, saturation, low, high, comparer) {
      var mid = (low + high) / 2;
      var hsva2 = Object.assign({}, _this.$props.hsva, {
        s: saturation / gradientRectMetrics.width,
        v: 1 - mid / gradientRectMetrics.height
      });
      var currentContrast = getContrastFromTwoRGBAs(getRGBA(getColorFromHSV(hsva2)), getRGBA(_this.$props.backgroundColor || ""));
      if (low + 0.5 > high) {
        if (currentContrast < contrast + 1 && currentContrast > contrast - 1) {
          return mid;
        } else {
          return null;
        }
      }
      if (comparer(currentContrast, contrast)) {
        return findValue2(contrast, saturation, low, high - (high - low) / 2, comparer);
      }
      return findValue2(contrast, saturation, low + (high - low) / 2, high, comparer);
    };
    var getPaths = function getPaths2(contrast, stepCount, reversed) {
      if (reversed === void 0) {
        reversed = false;
      }
      var points = [];
      for (var i = 0; i <= gradientRectMetrics.width; i += gradientRectMetrics.width / stepCount) {
        var value2 = findValue(contrast, i, 0, gradientRectMetrics.height, reversed ? function(a, b) {
          return a < b;
        } : function(a, b) {
          return a > b;
        });
        if (value2 !== null) {
          points.push([i, value2]);
        }
      }
      return points;
    };
    var bezierCommandCalc = bezierCommand(controlPoint(line));
    return h("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      attrs: this.v3 ? void 0 : {
        xmlns: "http://www.w3.org/2000/svg"
      },
      "class": "k-color-contrast-svg",
      style: {
        position: "absolute",
        overflow: "visible",
        pointerEvents: "none",
        left: 0,
        top: 0,
        zIndex: 3
      }
    }, [svgPath.call(this, getPaths(AA_CONTRAST, STEP_COUNT), bezierCommandCalc), svgPath.call(this, getPaths(AA_CONTRAST, STEP_COUNT, true), bezierCommandCalc), svgPath.call(this, getPaths(AAA_CONTRAST, STEP_COUNT), bezierCommandCalc), svgPath.call(this, getPaths(AAA_CONTRAST, STEP_COUNT, true), bezierCommandCalc)]);
  }
};
var ColorContrastSvg = ColorContrastSvgVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/ColorGradient.js
var allVue12 = vue_runtime_esm_bundler_exports;
var gh11 = allVue12.h;
var isV312 = allVue12.version && allVue12.version[0] === "3";
var FORMAT = "rgba";
var DEFAULT_SELECTED_COLOR = "rgba(255, 255, 255, 1)";
var ColorGradientVue2 = {
  name: "KendoColorGradient",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "change": null,
    "focus": null,
    "blur": null,
    "changemodel": null,
    "update:modelValue": null,
    "update:modelRgbaValue": null,
    "keydown": null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    modelValue: String,
    modelRgbaValue: String,
    defaultValue: String,
    value: String,
    opacity: {
      type: Boolean,
      default: true
    },
    backgroundColor: String,
    disabled: Boolean,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    tabIndex: Number,
    innerTabIndex: {
      type: Number,
      default: void 0
    }
  },
  created: function created5() {
    validatePackage(packageMetadata);
    this.guid = guid();
  },
  computed: {
    valueSet: function valueSet() {
      return this.value || this.modelValue || this.modelRgbaValue;
    },
    computedValue: function computedValue() {
      var value2 = this.valueSet || this.currentValue || this.defaultValue || parseColor2(DEFAULT_SELECTED_COLOR, FORMAT);
      if (!isPresent(parseColor2(value2, "hex", this.opacity))) {
        value2 = DEFAULT_SELECTED_COLOR;
      }
      return value2;
    },
    hsva: function hsva() {
      return this.valueSet ? getHSV(this.computedValue) : this.currentHsva || getHSV(this.computedValue);
    },
    rgba: function rgba() {
      return this.valueSet ? getRGBA(this.computedValue) : this.currentRgba;
    },
    hex: function hex2() {
      return this.valueSet ? parseColor2(this.computedValue, "hex", this.opacity) : this.currentHex;
    },
    computedBgColor: function computedBgColor() {
      return this.currentBgColor || getColorFromHue(this.hsva.h);
    },
    computedTabIndex: function computedTabIndex() {
      return this.innerTabIndex !== void 0 ? this.innerTabIndex : this.focused ? 0 : -1;
    }
  },
  data: function data5() {
    return {
      currentValue: void 0,
      currentBgColor: void 0,
      isFirstRender: true,
      currentHsva: void 0,
      currentRgba: void 0,
      currentHex: void 0,
      focused: false
    };
  },
  mounted: function mounted6() {
    this.setAlphaSliderBackground(this.computedBgColor);
    if (this.$el) {
      this.draggable = this.$refs.draggable;
      this.gradientWrapper = this.draggable && this.draggable.element;
    }
    this.alphaSlider = this.v3 ? this.alphaSliderRef : this.$refs.alphaSlider;
    if (this.isFirstRender) {
      this.isFirstRender = false;
    }
  },
  destroyed: function destroyed() {
    removeCachedColor(this.guid);
  },
  updated: function updated4() {
    this.setAlphaSliderBackground(this.computedBgColor);
  },
  // @ts-ignore
  setup: !isV312 ? void 0 : function() {
    var v3 = !!isV312;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render11(createElement) {
    var _this2 = this;
    var _this = this;
    var h = gh11 || createElement;
    var className = classNames("k-colorgradient", {
      "k-disabled": this.$props.disabled
    });
    var localizationService = provideLocalizationService(this);
    var colorGradientHueSliderLabelMessage = localizationService.toLanguageString(colorGradientHueSliderLabel, messages[colorGradientHueSliderLabel]);
    var colorGradientAlphaSliderLabelMessage = localizationService.toLanguageString(colorGradientAlphaSliderLabel, messages[colorGradientAlphaSliderLabel]);
    var dragHandle = localizationService.toLanguageString(colorGradientDragHandle, messages[colorGradientDragHandle]);
    var renderRectangleDragHandle = function renderRectangleDragHandle2() {
      var style = {};
      if (!this.isFirstRender) {
        var gradientRectMetrics = this.getGradientRectMetrics();
        var top_1 = (1 - this.hsva.v) * gradientRectMetrics.height;
        var left = this.hsva.s * gradientRectMetrics.width;
        style.top = "".concat(top_1, "px");
        style.left = "".concat(left, "px");
      }
      return h("div", {
        "class": "k-hsv-draghandle k-draghandle",
        role: "slider",
        attrs: this.v3 ? void 0 : {
          role: "slider",
          "aria-orientation": "undefined",
          "aria-label": dragHandle + "".concat(this.value || "none"),
          "aria-valuenow": Math.round(this.hsva.s * 100),
          "aria-valuetext": "\n                    saturation: ".concat(Math.round(this.hsva.s * 100), "%,\n                    value: ").concat(Math.round(this.hsva.v * 100), "%"),
          tabindex: this.computedTabIndex
        },
        "aria-orientation": "undefined",
        "aria-label": dragHandle + "".concat(this.value || "none"),
        "aria-valuenow": Math.round(this.hsva.s * 100),
        "aria-valuetext": "\n                    saturation: ".concat(Math.round(this.hsva.s * 100), "%,\n                    value: ").concat(Math.round(this.hsva.v * 100), "%"),
        tabindex: this.computedTabIndex,
        onKeydown: this.dragKeyDown,
        on: this.v3 ? void 0 : {
          "keydown": this.dragKeyDown
        },
        style,
        ref: setRef(this, "draghandle")
      });
    };
    return h("div", {
      id: this.$props.id,
      attrs: this.v3 ? void 0 : {
        id: this.$props.id,
        role: this.$props.tabIndex !== -1 ? "textbox" : void 0,
        "aria-disabled": this.$props.disabled,
        tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled),
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy
      },
      "class": className,
      role: this.$props.tabIndex !== -1 ? "textbox" : void 0,
      "aria-disabled": this.$props.disabled,
      tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled),
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      onFocus: this.onFocus,
      on: this.v3 ? void 0 : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "keydown": this.onKeyDownHandler
      },
      onBlur: this.onBlur,
      onKeydown: this.onKeyDownHandler
    }, [h("div", {
      "class": "k-colorgradient-canvas k-hstack"
    }, [h("div", {
      "class": "k-hsv-rectangle",
      style: {
        background: this.computedBgColor
      }
    }, [
      // @ts-ignore  function children
      h(Draggable, {
        onDrag: this.onDrag,
        on: this.v3 ? void 0 : {
          "drag": this.onDrag,
          "release": this.onRelease
        },
        onRelease: this.onRelease,
        ref: "draggable"
      }, this.v3 ? function() {
        return [h("div", {
          "class": "k-hsv-gradient",
          style: {
            touchAction: "none"
          },
          tabindex: -1,
          attrs: _this2.v3 ? void 0 : {
            tabindex: -1
          },
          onClick: _this2.onGradientWrapperClick,
          on: _this2.v3 ? void 0 : {
            "click": _this2.onGradientWrapperClick
          }
        }, [renderRectangleDragHandle.call(_this2)])];
      } : [h("div", {
        "class": "k-hsv-gradient",
        style: {
          touchAction: "none"
        },
        tabindex: -1,
        attrs: _this2.v3 ? void 0 : {
          tabindex: -1
        },
        onClick: _this2.onGradientWrapperClick,
        on: _this2.v3 ? void 0 : {
          "click": _this2.onGradientWrapperClick
        }
      }, [renderRectangleDragHandle.call(_this2)])]),
      this.backgroundColor && !this.isFirstRender && h(ColorContrastSvg, {
        metrics: this.gradientWrapper ? this.getGradientRectMetrics() : void 0,
        attrs: this.v3 ? void 0 : {
          metrics: this.gradientWrapper ? this.getGradientRectMetrics() : void 0,
          hsva: this.hsva,
          backgroundColor: this.backgroundColor
        },
        hsva: this.hsva,
        backgroundColor: this.backgroundColor
      })
    ]), h("div", {
      "class": "k-hsv-controls k-hstack"
    }, [h(Slider, {
      tabIndex: this.computedTabIndex,
      attrs: this.v3 ? void 0 : {
        tabIndex: this.computedTabIndex,
        value: this.hsva.h,
        buttons: false,
        vertical: true,
        min: 0,
        max: 360,
        step: 5,
        disabled: this.$props.disabled,
        ariaLabel: colorGradientHueSliderLabelMessage
      },
      value: this.hsva.h,
      buttons: false,
      vertical: true,
      min: 0,
      max: 360,
      step: 5,
      onChange: this.onHueSliderChange,
      on: this.v3 ? void 0 : {
        "change": this.onHueSliderChange
      },
      "class": "k-hue-slider k-colorgradient-slider",
      disabled: this.$props.disabled,
      ariaLabel: colorGradientHueSliderLabelMessage
    }), this.$props.opacity && h(Slider, {
      tabIndex: this.computedTabIndex,
      attrs: this.v3 ? void 0 : {
        tabIndex: this.computedTabIndex,
        value: isPresent(this.hsva.a) ? this.hsva.a * 100 : 100,
        buttons: false,
        vertical: true,
        min: 0,
        max: 100,
        step: 1,
        disabled: this.$props.disabled,
        ariaLabel: colorGradientAlphaSliderLabelMessage
      },
      value: isPresent(this.hsva.a) ? this.hsva.a * 100 : 100,
      buttons: false,
      vertical: true,
      min: 0,
      max: 100,
      step: 1,
      onChange: this.onAlphaSliderChange,
      on: this.v3 ? void 0 : {
        "change": this.onAlphaSliderChange
      },
      "class": "k-alpha-slider k-colorgradient-slider",
      disabled: this.$props.disabled,
      ariaLabel: colorGradientAlphaSliderLabelMessage,
      ref: this.v3 ? function(el) {
        _this.alphaSliderRef = el;
      } : "alphaSlider"
    })])]), h(ColorInput, {
      tabIndex: this.computedTabIndex,
      attrs: this.v3 ? void 0 : {
        tabIndex: this.computedTabIndex,
        rgba: this.rgba,
        hex: this.hex,
        opacity: this.$props.opacity,
        disabled: this.$props.disabled
      },
      rgba: this.rgba,
      onRgbachange: this.onRgbaChange,
      on: this.v3 ? void 0 : {
        "rgbachange": this.onRgbaChange,
        "hexchange": this.onHexChange
      },
      hex: this.hex,
      onHexchange: this.onHexChange,
      opacity: this.$props.opacity,
      disabled: this.$props.disabled,
      ref: "colorInput"
    }), this.backgroundColor && h(ColorContrastLabels, {
      bgColor: getRGBA(this.backgroundColor),
      attrs: this.v3 ? void 0 : {
        bgColor: getRGBA(this.backgroundColor),
        rgba: this.rgba
      },
      rgba: this.rgba
    })]);
  },
  methods: {
    onKeyDownHandler: function onKeyDownHandler(e) {
      var element2 = this.$el;
      if (this.innerTabIndex === void 0) {
        this.focused = focusContainer(e, element2);
      }
      this.$emit("keydown", e);
    },
    onHexChange: function onHexChange2(hex3, value2, event) {
      var rgba2 = getRGBA(value2);
      var hsva2 = getHSV(value2);
      this.currentHsva = hsva2;
      this.currentBgColor = getColorFromHue(hsva2.h);
      this.currentRgba = rgba2;
      this.currentHex = hex3;
      this.dispatchChangeEvent(value2, event.event, hex3, value2);
    },
    onRgbaChange: function onRgbaChange(rgba2, event) {
      var value2 = getColorFromRGBA(rgba2);
      var hex3 = parseColor2(value2, "hex", this.opacity);
      var hsva2 = getHSV(value2);
      this.currentHsva = hsva2;
      this.currentBgColor = getColorFromHue(hsva2.h);
      this.currentRgba = rgba2;
      this.currentHex = hex3;
      this.dispatchChangeEvent(value2, event.event, hex3, value2);
    },
    onAlphaSliderChange: function onAlphaSliderChange(event) {
      this.handleHsvaChange(Object.assign({}, this.hsva, {
        a: event.value / 100
      }), event.event);
    },
    onHueSliderChange: function onHueSliderChange(event) {
      this.handleHsvaChange(Object.assign({}, this.hsva, {
        h: event.value
      }), event.event);
    },
    onDrag: function onDrag(e) {
      this.gradientWrapper.classList.add("k-dragging");
      this.changePosition(e);
    },
    onRelease: function onRelease() {
      this.gradientWrapper.classList.remove("k-dragging");
    },
    onGradientWrapperClick: function onGradientWrapperClick(event) {
      this.firstFocusable = getRef(this, "draghandle");
      if (this.firstFocusable) {
        this.firstFocusable.focus();
      }
      this.changePosition(event);
    },
    move: function move(e, prop, d) {
      var c = this.hsva;
      c[prop] += d * (e.shiftKey ? 0.01 : 0.05);
      if (c[prop] < 0) {
        c[prop] = 0;
      }
      if (c[prop] > 1) {
        c[prop] = 1;
      }
      e.preventDefault();
      this.handleHsvaChange(c, e);
    },
    dragKeyDown: function dragKeyDown(e) {
      switch (e.keyCode) {
        case Keys.left:
          this.move(e, "s", -1);
          break;
        case Keys.right:
          this.move(e, "s", 1);
          break;
        case Keys.up:
          this.move(e, "v", 1);
          break;
        case Keys.down:
          this.move(e, "v", -1);
          break;
        case Keys.enter:
          break;
        case Keys.esc:
          break;
        default:
          break;
      }
    },
    changePosition: function changePosition(event) {
      var gradientRectMetrics = this.getGradientRectMetrics();
      var deltaX = event.clientX - gradientRectMetrics.left;
      var deltaY = event.clientY - gradientRectMetrics.top;
      var left = fitIntoBounds(deltaX, 0, gradientRectMetrics.width);
      var top = fitIntoBounds(deltaY, 0, gradientRectMetrics.height);
      var hsva2 = Object.assign({}, this.hsva, {
        s: left / gradientRectMetrics.width,
        v: 1 - top / gradientRectMetrics.height
      });
      this.handleHsvaChange(hsva2, event, event.event);
    },
    handleHsvaChange: function handleHsvaChange(hsva2, event) {
      var value2 = getColorFromHSV(hsva2);
      var hex3 = parseColor2(value2, "hex", this.opacity);
      var rgba2 = parseColor2(value2, "rgba");
      this.currentHsva = hsva2;
      this.currentBgColor = getColorFromHue(hsva2.h);
      this.currentRgba = getRGBA(value2);
      this.currentHex = hex3;
      this.dispatchChangeEvent(value2, event, hex3, rgba2);
    },
    dispatchChangeEvent: function dispatchChangeEvent2(value2, event, hex3, rgbaValue) {
      this.currentValue = value2;
      this.$emit("changemodel", hex3);
      this.$emit("update:modelRgbaValue", rgbaValue);
      this.$emit("update:modelValue", hex3);
      this.$emit("change", {
        event,
        target: this,
        value: hex3,
        rgbaValue
      });
    },
    onFocus: function onFocus3(event) {
      this.$emit("focus", {
        event,
        target: this
      });
    },
    onBlur: function onBlur3(event) {
      this.$emit("blur", {
        event,
        target: this
      });
    },
    setAlphaSliderBackground: function setAlphaSliderBackground(backgroundColor) {
      if (this.$props.opacity && this.alphaSlider && this.alphaSlider.sliderTrack) {
        this.alphaSlider.sliderTrack.style.background = "linear-gradient(to top, transparent, ".concat(backgroundColor, ")");
      }
    },
    getGradientRectMetrics: function getGradientRectMetrics() {
      var rect = this.gradientWrapper.getBoundingClientRect();
      return {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.width,
        height: rect.height,
        x: rect.x,
        y: rect.y
      };
    },
    focus: function focus3() {
      var _this = this;
      this.focused = true;
      setTimeout(function() {
        focusFirstFocusableChild(_this.$el);
      }, 1);
    }
  }
};
var ColorGradient = ColorGradientVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/Picker.js
var allVue13 = vue_runtime_esm_bundler_exports;
var gh12 = allVue13.h;
var isV313 = allVue13.version && allVue13.version[0] === "3";
var ANCHOR_VERTICAL_ALIGN = "bottom";
var POPUP_VERTICAL_ALIGN = "top";
var PickerVue2 = {
  name: "KendoPicker",
  props: {
    popupSettings: Object,
    dir: String,
    open: Boolean,
    popupAnchor: String,
    id: String
  },
  computed: {
    horizontalAlign: function horizontalAlign() {
      return this.$props.dir === "rtl" ? "right" : "left";
    },
    anchorAlign: function anchorAlign() {
      return {
        horizontal: this.horizontalAlign,
        vertical: ANCHOR_VERTICAL_ALIGN
      };
    },
    popupAlign: function popupAlign() {
      return {
        horizontal: this.horizontalAlign,
        vertical: POPUP_VERTICAL_ALIGN
      };
    }
  },
  // @ts-ignore
  setup: !isV313 ? void 0 : function() {
    var v3 = !!isV313;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render12(createElement) {
    var h = gh12 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a3 = this.$props.popupSettings, popupClass = _a3.popupClass, appendTo = _a3.appendTo, animate = _a3.animate, className = _a3.className;
    return (
      // @ts-ignore function children
      h(Popup, {
        id: this.id,
        attrs: this.v3 ? void 0 : {
          id: this.id,
          anchor: this.$props.popupAnchor,
          anchorAlign: this.anchorAlign,
          popupAlign: this.popupAlign,
          show: this.$props.open,
          appendTo,
          animate,
          popupClass
        },
        anchor: this.$props.popupAnchor,
        anchorAlign: this.anchorAlign,
        popupAlign: this.popupAlign,
        show: this.$props.open,
        onOpen: this.onOpen,
        on: this.v3 ? void 0 : {
          "open": this.onOpen,
          "close": this.onClose
        },
        onClose: this.onClose,
        appendTo,
        animate,
        popupClass,
        "class": classNames("k-reset", className)
      }, this.v3 ? function() {
        return [defaultSlot];
      } : [defaultSlot])
    );
  },
  methods: {
    onOpen: function onOpen() {
      this.$emit("open");
    },
    onClose: function onClose() {
      this.$emit("close");
    }
  }
};
var Picker = PickerVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/FlatColorPicker.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var allVue14 = vue_runtime_esm_bundler_exports;
var gh13 = allVue14.h;
var isV314 = allVue14.version && allVue14.version[0] === "3";
var FlatColorPickerVue2 = {
  name: "KendoFlatColorPicker",
  // @ts-ignore
  emits: {
    "viewchange": null,
    "changemodel": null,
    "update:modelValue": null,
    "update:modelRgbaValue": null,
    "focus": null,
    "blur": null,
    "focusout": null,
    "keydown": null,
    "change": null
  },
  props: {
    modelValue: String,
    modelRgbaValue: String,
    value: String,
    prevValue: String,
    tabIndex: Number,
    disabled: Boolean,
    view: {
      type: String,
      default: "combo",
      validator: function validator4(value2) {
        return ["gradient", "palette", "combo"].includes(value2);
      }
    },
    selectedView: {
      type: Number,
      default: void 0
    },
    header: [String, Function, Object],
    footer: [String, Function, Object],
    showClearButton: {
      type: Boolean,
      default: true
    },
    showPreview: {
      type: Boolean,
      default: true
    },
    showButtons: {
      type: Boolean,
      default: true
    },
    gradientSettings: {
      type: Object,
      default: function _default2() {
        return DEFAULT_GRADIENT_SETTINGS;
      }
    },
    paletteSettings: {
      type: Object,
      default: function _default3() {
        return DEFAULT_PALETTE_SETTINGS;
      }
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created6() {
    validatePackage(packageMetadata);
  },
  computed: {
    isColorGradient: function isColorGradient() {
      return this.view !== "combo" ? this.view === "gradient" : this.selectedView !== void 0 ? this.selectedView === 0 : this.currentView === "gradient";
    },
    computedColor: function computedColor() {
      return this.value !== void 0 ? this.value : this.modelValue !== void 0 ? this.modelValue : this.modelRgbaValue !== void 0 ? this.modelRgbaValue : this.colorValue;
    },
    computedPrevColor: function computedPrevColor() {
      return this.prevValue !== void 0 ? this.prevValue : this.currentPrevColor;
    },
    previewClass: function previewClass() {
      return {
        "k-coloreditor-preview-color": true,
        "k-color-preview": true,
        "k-no-color": !this.colorValue
      };
    },
    currentClass: function currentClass() {
      return {
        "k-coloreditor-current-color": true,
        "k-color-preview": true,
        "k-no-color": !this.computedPrevColor
      };
    },
    computedTabIndex: function computedTabIndex2() {
      return this.focused ? 0 : -1;
    }
  },
  data: function data6() {
    var initialValue = this.value || this.defaultValue || this.modelValue || this.modelRgbaValue;
    return {
      currentView: "gradient",
      colorValue: initialValue,
      currentPrevColor: initialValue,
      focused: false
    };
  },
  // @ts-ignore
  setup: !isV314 ? void 0 : function() {
    var v3 = !!isV314;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render13(createElement) {
    var _this2 = this;
    var _this = this;
    var h = gh13 || createElement;
    var localizationService = provideLocalizationService(this);
    var gradientMessage = localizationService.toLanguageString(flatColorPickerGradientBtn, messages[flatColorPickerGradientBtn]);
    var paletteMessage = localizationService.toLanguageString(flatColorPickerPaletteBtn, messages[flatColorPickerPaletteBtn]);
    var clearMessage = localizationService.toLanguageString(flatColorPickerClearBtn, messages[flatColorPickerClearBtn]);
    var cancelMessage = localizationService.toLanguageString(flatColorPickerCancelBtn, messages[flatColorPickerCancelBtn]);
    var applyMessage = localizationService.toLanguageString(flatColorPickerApplyBtn, messages[flatColorPickerApplyBtn]);
    var headerTemplate = templateRendering.call(this, this.$props.header, getListeners.call(this));
    var footerTemplate = templateRendering.call(this, this.$props.footer, getListeners.call(this));
    var header = getTemplate.call(this, {
      h,
      template: headerTemplate
    });
    var footer = getTemplate.call(this, {
      h,
      template: footerTemplate
    });
    var renderGradiente = function renderGradiente2() {
      return h(ColorGradient, __assign6({
        attrs: this.v3 ? void 0 : __assign6({
          tabIndex: -1,
          value: this.colorValue,
          innerTabIndex: this.computedTabIndex
        }, this.gradientSettings),
        ref: setRef(this, "gradient"),
        tabIndex: -1,
        value: this.colorValue,
        innerTabIndex: this.computedTabIndex,
        onChange: this.handleColorChange,
        onKeydown: this.innerKeyDown,
        on: this.v3 ? void 0 : {
          "change": this.handleColorChange,
          "keydown": this.innerKeyDown
        }
      }, this.gradientSettings));
    };
    var renderPalette = function renderPalette2() {
      return h(ColorPalette, __assign6({
        on: this.v3 ? void 0 : {
          "change": this.handlePaletteColorChange,
          "keydown": this.gradientKeyDown
        },
        ref: setRef(this, "palette"),
        tabIndex: this.computedTabIndex,
        value: this.colorValue,
        attrs: this.v3 ? void 0 : __assign6({
          tabIndex: this.computedTabIndex,
          value: this.colorValue
        }, this.paletteSettings),
        onChange: this.handlePaletteColorChange,
        onKeydown: this.gradientKeyDown
      }, this.paletteSettings));
    };
    return h("div", {
      tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled),
      attrs: this.v3 ? void 0 : {
        tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled),
        "aria-disabled": this.$props.disabled
      },
      onFocus: this.onFocus,
      on: this.v3 ? void 0 : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "focusout": this.onFocusout,
        "keydown": this.onKeyDownHandler
      },
      onBlur: this.onBlur,
      onFocusout: this.onFocusout,
      onKeydown: this.onKeyDownHandler,
      "class": classNames("k-flatcolorpicker k-coloreditor", {
        "k-disabled": this.$props.disabled
      }),
      "aria-disabled": this.$props.disabled
    }, [header, this.$props.showClearButton && this.$props.showPreview && h("div", {
      "class": "k-coloreditor-header k-hstack"
    }, [this.$props.view === "combo" && h("div", {
      "class": "k-coloreditor-header-actions k-hstack"
    }, [
      // @ts-ignore  function children
      h(ButtonGroup, {
        "class": "k-button-group-flat"
      }, this.v3 ? function() {
        return [
          // @ts-ignore  function children
          h(Button, {
            tabIndex: _this2.computedTabIndex,
            attrs: _this2.v3 ? void 0 : {
              tabIndex: _this2.computedTabIndex,
              type: "button",
              togglable: true,
              fillMode: "flat",
              selected: _this2.isColorGradient,
              ariaLabel: gradientMessage
            },
            type: "button",
            togglable: true,
            fillMode: "flat",
            selected: _this2.isColorGradient,
            onKeydown: _this2.handleButtonKeydown,
            on: _this2.v3 ? void 0 : {
              "keydown": _this2.handleButtonKeydown,
              "click": function click(e) {
                return _this.handleViewChange(e, "gradient");
              }
            },
            ariaLabel: gradientMessage,
            onClick: function click(e) {
              return _this.handleViewChange(e, "gradient");
            }
          }, _this2.v3 ? function() {
            return [h(Icon, {
              name: "droplet-slider",
              attrs: _this2.v3 ? void 0 : {
                name: "droplet-slider",
                icon: dropletSliderIcon
              },
              icon: dropletSliderIcon
            })];
          } : [h(Icon, {
            name: "droplet-slider",
            attrs: _this2.v3 ? void 0 : {
              name: "droplet-slider",
              icon: dropletSliderIcon
            },
            icon: dropletSliderIcon
          })]),
          // @ts-ignore  function children
          h(Button, {
            tabIndex: _this2.computedTabIndex,
            attrs: _this2.v3 ? void 0 : {
              tabIndex: _this2.computedTabIndex,
              type: "button",
              togglable: true,
              fillMode: "flat",
              selected: !_this2.isColorGradient,
              ariaLabel: paletteMessage
            },
            type: "button",
            togglable: true,
            fillMode: "flat",
            selected: !_this2.isColorGradient,
            onKeydown: _this2.handleButtonKeydown,
            on: _this2.v3 ? void 0 : {
              "keydown": _this2.handleButtonKeydown,
              "click": function click(e) {
                return _this.handleViewChange(e, "palette");
              }
            },
            ariaLabel: paletteMessage,
            onClick: function click(e) {
              return _this.handleViewChange(e, "palette");
            }
          }, _this2.v3 ? function() {
            return [h(Icon, {
              name: "palette",
              attrs: _this2.v3 ? void 0 : {
                name: "palette",
                icon: paletteIcon
              },
              icon: paletteIcon
            })];
          } : [h(Icon, {
            name: "palette",
            attrs: _this2.v3 ? void 0 : {
              name: "palette",
              icon: paletteIcon
            },
            icon: paletteIcon
          })])
        ];
      } : [h(Button, {
        tabIndex: _this2.computedTabIndex,
        attrs: _this2.v3 ? void 0 : {
          tabIndex: _this2.computedTabIndex,
          type: "button",
          togglable: true,
          fillMode: "flat",
          selected: _this2.isColorGradient,
          ariaLabel: gradientMessage
        },
        type: "button",
        togglable: true,
        fillMode: "flat",
        selected: _this2.isColorGradient,
        onKeydown: _this2.handleButtonKeydown,
        on: _this2.v3 ? void 0 : {
          "keydown": _this2.handleButtonKeydown,
          "click": function click(e) {
            return _this.handleViewChange(e, "gradient");
          }
        },
        ariaLabel: gradientMessage,
        onClick: function click(e) {
          return _this.handleViewChange(e, "gradient");
        }
      }, _this2.v3 ? function() {
        return [h(Icon, {
          name: "droplet-slider",
          attrs: _this2.v3 ? void 0 : {
            name: "droplet-slider",
            icon: dropletSliderIcon
          },
          icon: dropletSliderIcon
        })];
      } : [h(Icon, {
        name: "droplet-slider",
        attrs: _this2.v3 ? void 0 : {
          name: "droplet-slider",
          icon: dropletSliderIcon
        },
        icon: dropletSliderIcon
      })]), h(Button, {
        tabIndex: _this2.computedTabIndex,
        attrs: _this2.v3 ? void 0 : {
          tabIndex: _this2.computedTabIndex,
          type: "button",
          togglable: true,
          fillMode: "flat",
          selected: !_this2.isColorGradient,
          ariaLabel: paletteMessage
        },
        type: "button",
        togglable: true,
        fillMode: "flat",
        selected: !_this2.isColorGradient,
        onKeydown: _this2.handleButtonKeydown,
        on: _this2.v3 ? void 0 : {
          "keydown": _this2.handleButtonKeydown,
          "click": function click(e) {
            return _this.handleViewChange(e, "palette");
          }
        },
        ariaLabel: paletteMessage,
        onClick: function click(e) {
          return _this.handleViewChange(e, "palette");
        }
      }, _this2.v3 ? function() {
        return [h(Icon, {
          name: "palette",
          attrs: _this2.v3 ? void 0 : {
            name: "palette",
            icon: paletteIcon
          },
          icon: paletteIcon
        })];
      } : [h(Icon, {
        name: "palette",
        attrs: _this2.v3 ? void 0 : {
          name: "palette",
          icon: paletteIcon
        },
        icon: paletteIcon
      })])])
    ]), h("div", {
      "class": "k-spacer"
    }), h("div", {
      "class": "k-coloreditor-header-actions k-hstack"
    }, [this.$props.showClearButton && // @ts-ignore  function children
    h(Button, {
      tabIndex: this.computedTabIndex,
      attrs: this.v3 ? void 0 : {
        tabIndex: this.computedTabIndex,
        type: "button",
        fillMode: "flat",
        ariaLabel: clearMessage
      },
      type: "button",
      fillMode: "flat",
      ariaLabel: clearMessage,
      onKeydown: this.handleButtonKeydown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleButtonKeydown,
        "click": this.handleResetColor
      },
      onClick: this.handleResetColor
    }, this.v3 ? function() {
      return [h(Icon, {
        name: "droplet-slash",
        attrs: _this2.v3 ? void 0 : {
          name: "droplet-slash",
          icon: dropletSlashIcon
        },
        icon: dropletSlashIcon
      })];
    } : [h(Icon, {
      name: "droplet-slash",
      attrs: _this2.v3 ? void 0 : {
        name: "droplet-slash",
        icon: dropletSlashIcon
      },
      icon: dropletSlashIcon
    })]), this.$props.showPreview && h("div", {
      "class": "k-coloreditor-preview k-vstack"
    }, [h("span", {
      "class": this.previewClass,
      style: {
        background: this.colorValue
      }
    }, [!this.colorValue && h("span", {
      "class": "k-color-preview-mask"
    })]), h("span", {
      "class": this.currentClass,
      style: {
        background: this.computedPrevColor
      },
      onClick: this.handlePrevColorClick,
      on: this.v3 ? void 0 : {
        "click": this.handlePrevColorClick
      }
    }, [!this.computedPrevColor && h("span", {
      "class": "k-color-preview-mask"
    })])])])]), h("div", {
      "class": "k-coloreditor-views k-vstack"
    }, [this.isColorGradient ? renderGradiente.call(this) : renderPalette.call(this)]), this.$props.showButtons && h("div", {
      "class": "k-coloreditor-footer k-actions k-actions-end"
    }, [
      // @ts-ignore  function children
      h(Button, {
        tabIndex: this.computedTabIndex,
        attrs: this.v3 ? void 0 : {
          tabIndex: this.computedTabIndex,
          type: "button"
        },
        type: "button",
        "class": "k-coloreditor-cancel",
        onKeydown: this.handleButtonKeydown,
        on: this.v3 ? void 0 : {
          "keydown": this.handleButtonKeydown,
          "click": this.handleCancelBtnClick
        },
        onClick: this.handleCancelBtnClick
      }, this.v3 ? function() {
        return [cancelMessage];
      } : [cancelMessage]),
      // @ts-ignore  function children
      h(Button, {
        tabIndex: this.computedTabIndex,
        attrs: this.v3 ? void 0 : {
          tabIndex: this.computedTabIndex,
          type: "button"
        },
        type: "button",
        "class": "k-coloreditor-apply k-primary",
        onKeydown: this.handleButtonKeydown,
        on: this.v3 ? void 0 : {
          "keydown": this.handleButtonKeydown,
          "click": this.triggerChange
        },
        onClick: this.triggerChange
      }, this.v3 ? function() {
        return [applyMessage];
      } : [applyMessage])
    ]), footer]);
  },
  methods: {
    focus: function focus4() {
      var _this = this;
      this.focused = true;
      setTimeout(function() {
        focusFirstFocusableChild(_this.$el);
      }, 1);
    },
    onKeyDownHandler: function onKeyDownHandler2(e) {
      var element2 = this.$el;
      this.focused = focusContainer(e, element2);
      this.$emit("keydown", e);
    },
    handleViewChange: function handleViewChange(event, viewType) {
      this.currentView = viewType;
      this.$emit("viewchange", {
        event,
        viewType
      });
    },
    handleResetColor: function handleResetColor() {
      this.colorValue = null;
      if (!this.showButtons) {
        this.triggerChange();
      }
    },
    handleColorChange: function handleColorChange(event) {
      this.colorValue = event.value;
      if (!this.showButtons) {
        this.triggerChange(event);
      }
    },
    handlePaletteColorChange: function handlePaletteColorChange(event) {
      this.colorValue = event.value;
      if (!this.showButtons) {
        this.triggerChange(event);
      }
    },
    triggerChange: function triggerChange(event) {
      var rgbaValue = parseColor2(this.colorValue, "rgba");
      this.currentPrevColor = this.colorValue;
      this.$emit("changemodel", this.colorValue);
      this.$emit("update:modelValue", this.colorValue);
      this.$emit("update:modelRgbaValue", rgbaValue);
      this.$emit("change", {
        event,
        value: this.colorValue,
        rgbaValue
      });
    },
    innerKeyDown: function innerKeyDown(event) {
      if (event.keyCode === Keys.enter) {
        this.triggerChange(event);
      }
    },
    gradientKeyDown: function gradientKeyDown(event) {
      event.stopPropagation();
      if (!this.showButtons && event.keyCode === Keys.enter) {
        this.triggerChange(event);
      }
    },
    handleButtonKeydown: function handleButtonKeydown(e) {
      if (e.keyCode === Keys.enter) {
        e.stopPropagation();
      }
    },
    handleCancelBtnClick: function handleCancelBtnClick() {
      this.colorValue = this.computedPrevColor;
    },
    handlePrevColorClick: function handlePrevColorClick() {
      this.colorValue = this.computedPrevColor;
    },
    onFocus: function onFocus4(event) {
      this.$emit("focus", {
        event,
        target: this
      });
    },
    onBlur: function onBlur4(event) {
      this.$emit("blur", {
        event,
        target: this
      });
    },
    onFocusout: function onFocusout(event) {
      this.$emit("focusout", {
        event,
        target: this
      });
    }
  }
};
var FlatColorPicker = FlatColorPickerVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/colors/ColorPicker.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var allVue15 = vue_runtime_esm_bundler_exports;
var gh14 = allVue15.h;
var isV315 = allVue15.version && allVue15.version[0] === "3";
var ColorPickerVue2 = {
  name: "KendoColorPicker",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "open": null,
    "close": null,
    "changemodel": null,
    "update:modelValue": null,
    "update:modelRgbaValue": null,
    "activecolorclick": null,
    "focus": null,
    "blur": null,
    "change": null,
    "viewchange": null
  },
  props: {
    modelValue: String,
    modelRgbaValue: String,
    value: {
      type: String,
      default: void 0
    },
    defaultValue: String,
    disabled: Boolean,
    dir: String,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    showClearButton: {
      type: Boolean,
      default: true
    },
    showPreview: {
      type: Boolean,
      default: true
    },
    showButtons: {
      type: Boolean,
      default: true
    },
    paletteSettings: {
      type: Object,
      default: function _default4() {
        return DEFAULT_PALETTE_SETTINGS;
      }
    },
    valid: {
      type: Boolean,
      default: true
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    title: String,
    icon: String,
    svgIcon: Object,
    iconClassName: String,
    popupSettings: {
      type: Object,
      default: function _default5() {
        return {};
      }
    },
    gradientSettings: {
      type: Object,
      default: function _default6() {
        return DEFAULT_GRADIENT_SETTINGS;
      }
    },
    flatColorPickerSettings: {
      type: Object,
      default: function _default7() {
        return {};
      }
    },
    open: {
      type: Boolean,
      default: void 0
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator5(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator6(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator7(value2) {
        return [null, "solid", "flat", "outline"].includes(value2);
      }
    },
    view: {
      type: String,
      default: "combo",
      validator: function validator8(value2) {
        return ["gradient", "palette", "combo"].includes(value2);
      }
    },
    selectedView: {
      type: Number,
      default: void 0
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data7() {
    return {
      focused: false,
      currentValue: this.$props.defaultValue,
      currentOpen: false
    };
  },
  computed: {
    isValueControlled: function isValueControlled() {
      return this.$props.value !== void 0;
    },
    isOpenControlled: function isOpenControlled() {
      return this.$props.open !== void 0;
    },
    computedValue: function computedValue2() {
      return this.isValueControlled ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$props.modelRgbaValue !== void 0 ? this.$props.modelRgbaValue : this.currentValue !== void 0 ? this.currentValue : this.defaultValue;
    },
    computedOpen: function computedOpen() {
      return this.isOpenControlled ? this.$props.open : this.currentOpen;
    },
    wrapperClassName: function wrapperClassName() {
      var _a3;
      var _b = this.$props, size2 = _b.size, fillMode = _b.fillMode, rounded = _b.rounded;
      return _a3 = {
        "k-picker": true,
        "k-colorpicker": true,
        "k-icon-picker": true
      }, _a3["k-picker-".concat(kendoThemeMaps.sizeMap[size2] || size2)] = size2, _a3["k-picker-".concat(fillMode)] = fillMode, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a3["k-invalid"] = !this.valid, _a3["k-disabled"] = this.disabled, _a3["k-focus"] = this.focused, _a3;
    }
  },
  created: function created7() {
    validatePackage(packageMetadata);
    this._popupId = "popup" + guid();
    this.focusableElementGuid = guid();
  },
  mounted: function mounted7() {
    this.button = getRef(this, "button");
  },
  updated: function updated5() {
  },
  // @ts-ignore
  setup: !isV315 ? void 0 : function() {
    var v3 = !!isV315;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render14(createElement) {
    var _this2 = this;
    var _this = this;
    var localizationService = provideLocalizationService(this);
    var colorPickerLabelMessage = localizationService.toLanguageString(colorPickerDropdownButtonAriaLabel, messages[colorPickerDropdownButtonAriaLabel]);
    var h = gh14 || createElement;
    var _a3 = this.$props, disabled = _a3.disabled, tabIndex = _a3.tabIndex, dir = _a3.dir, view = _a3.view, selectedView = _a3.selectedView, showClearButton = _a3.showClearButton, showPreview = _a3.showPreview, showButtons = _a3.showButtons, popupSettings = _a3.popupSettings;
    var renderFlatColorPicker = function renderFlatColorPicker2() {
      return h(FlatColorPicker, __assign7({
        onKeydown: this.onKeyDownHandler,
        on: this.v3 ? void 0 : {
          "keydown": this.onKeyDownHandler,
          "change": this.onFlatChangeHandler,
          "focusout": this.onBlurHandler,
          "viewchange": this.onViewChange
        },
        ref: setRef(this, "flatcolorpicker"),
        view,
        selectedView,
        showClearButton,
        showPreview,
        showButtons,
        value: this.computedValue || void 0,
        attrs: this.v3 ? void 0 : __assign7({
          view,
          selectedView,
          showClearButton,
          showPreview,
          showButtons,
          value: this.computedValue || void 0,
          paletteSettings: this.paletteSettings,
          gradientSettings: this.gradientSettings
        }, this.flatColorPickerSettings),
        onChange: this.onFlatChangeHandler,
        onFocusout: this.onBlurHandler,
        onViewchange: this.onViewChange,
        paletteSettings: this.paletteSettings,
        gradientSettings: this.gradientSettings
      }, this.flatColorPickerSettings));
    };
    return h("span", {
      "class": this.wrapperClassName,
      role: "combobox",
      attrs: this.v3 ? void 0 : {
        role: "combobox",
        dir,
        id: this.$props.id,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        "aria-disabled": this.$props.disabled,
        "aria-haspopup": "dialog",
        "aria-expanded": this.computedOpen,
        tabindex: getTabIndex(tabIndex, disabled),
        title: this.$props.title
      },
      dir,
      id: this.$props.id,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      "aria-disabled": this.$props.disabled,
      "aria-haspopup": "dialog",
      "aria-expanded": this.computedOpen,
      ref: this.focusableElementGuid,
      tabindex: getTabIndex(tabIndex, disabled),
      title: this.$props.title,
      onKeydown: this.onButtonKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onButtonKeyDown,
        "focusin": this.onFocusHandler,
        "focusout": this.onButtonBlur
      },
      onFocusin: this.onFocusHandler,
      onFocusout: this.onButtonBlur
    }, [
      h("span", {
        onClick: this.onActiveColorClickHandler,
        on: this.v3 ? void 0 : {
          "click": this.onActiveColorClickHandler
        },
        "class": "k-input-inner"
      }, [h("span", {
        "class": classNames("k-value-icon", "k-color-preview", {
          "k-no-color": !this.computedValue,
          "k-icon-color-preview": this.icon || this.iconClassName
        })
      }, [(this.iconClassName || this.icon || this.svgIcon) && h(Icon, {
        "class": classNames("k-color-preview-icon", this.iconClassName),
        name: getIconName(this.icon),
        attrs: this.v3 ? void 0 : {
          name: getIconName(this.icon),
          icon: this.svgIcon
        },
        icon: this.svgIcon
      }), h("span", {
        "class": "k-color-preview-mask",
        style: {
          backgroundColor: this.computedValue
        }
      })])]),
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabindex: -1,
          rounded: null,
          icon: "caret-alt-down",
          svgIcon: caretAltDownIcon,
          "aria-label": colorPickerLabelMessage
        },
        tabindex: -1,
        ref: this.v3 ? function(el) {
          _this.buttonRef = el;
        } : "button",
        onClick: this.onClickHandler,
        on: this.v3 ? void 0 : {
          "click": this.onClickHandler
        },
        rounded: null,
        "class": "k-input-button",
        icon: "caret-alt-down",
        svgIcon: caretAltDownIcon,
        "aria-label": colorPickerLabelMessage
      }),
      // @ts-ignore function children
      h(Picker, {
        dir,
        attrs: this.v3 ? void 0 : {
          dir,
          id: this._popupId,
          open: this.computedOpen,
          popupAnchor: this.focusableElementGuid,
          popupSettings: __assign7({}, popupSettings)
        },
        id: this._popupId,
        open: this.computedOpen,
        onOpen: this.onOpenHandler,
        on: this.v3 ? void 0 : {
          "open": this.onOpenHandler
        },
        popupAnchor: this.focusableElementGuid,
        popupSettings: __assign7({}, popupSettings)
      }, this.v3 ? function() {
        return [renderFlatColorPicker.call(_this2)];
      } : [renderFlatColorPicker.call(_this2)])
    ]);
  },
  methods: {
    focusElement: function focusElement() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    setOpen: function setOpen(nextOpen, isBlur) {
      if (!nextOpen && !isBlur && this.$el) {
        this.$el.focus();
      }
      this.currentOpen = nextOpen;
      this.$emit(nextOpen ? "open" : "close");
    },
    onButtonKeyDown: function onButtonKeyDown(event) {
      var altKey = event.altKey, keyCode = event.keyCode;
      if (keyCode === Keys.esc) {
        event.preventDefault();
        event.stopPropagation();
        this.setOpen(false);
        return;
      }
      if (keyCode === Keys.enter) {
        event.preventDefault();
        event.stopPropagation();
        this.setOpen(!this.computedOpen);
        return;
      }
      if (altKey && keyCode === Keys.down) {
        event.preventDefault();
        event.stopPropagation();
        this.setOpen(true);
      }
    },
    onKeyDownHandler: function onKeyDownHandler3(event) {
      var altKey = event.altKey, keyCode = event.keyCode;
      if (keyCode === Keys.esc) {
        event.preventDefault();
        event.stopPropagation();
        this.setOpen(false);
        return;
      }
      if (keyCode === Keys.enter) {
        event.preventDefault();
        event.stopPropagation();
        this.focusElement();
        return;
      }
      if (altKey && keyCode === Keys.up) {
        event.preventDefault();
        event.stopPropagation();
        this.setOpen(false);
        this.focusElement();
      }
    },
    onOpenHandler: function onOpenHandler() {
      var flatcolorpicker = getRef(this, "flatcolorpicker");
      if (flatcolorpicker) {
        flatcolorpicker.focus();
      }
    },
    onClickHandler: function onClickHandler() {
      this.setOpen(!this.computedOpen, true);
    },
    onActiveColorClickHandler: function onActiveColorClickHandler(event) {
      this.$emit("activecolorclick", {
        event,
        value: this.computedValue
      });
    },
    isViewFocused: function isViewFocused() {
      return !!(document.activeElement && document.activeElement.closest("#".concat(this._popupId)));
    },
    onButtonBlur: function onButtonBlur(event) {
      this.focused = this.isViewFocused();
      this.$emit("blur", {
        event
      });
    },
    onFocusHandler: function onFocusHandler(event) {
      if (this.blurTimeoutRef) {
        clearTimeout(this.blurTimeoutRef);
        this.blurTimeoutRef = void 0;
        if (event.target === this.$el) {
          this.setOpen(false);
        }
      } else {
        this.focused = true;
      }
      this.$emit("focus", {
        event
      });
    },
    onBlurTimeout: function onBlurTimeout() {
      var viewIsFocused = this.isViewFocused();
      if (!viewIsFocused) {
        this.setOpen(false, true);
      }
      this.focused = viewIsFocused;
      this.blurTimeoutRef = void 0;
    },
    onBlurHandler: function onBlurHandler() {
      clearTimeout(this.blurTimeoutRef);
      this.palette = getRef(this, "palette");
      this.gradient = getRef(this, "gradient");
      this.blurTimeoutRef = setTimeout(this.onBlurTimeout, 200);
    },
    onViewChange: function onViewChange(event) {
      this.$emit("viewchange", event);
    },
    onChangeHandler: function onChangeHandler(event, isPalette) {
      var currentValue = event.value;
      if (!this.isValueControlled) {
        this.currentValue = currentValue;
      }
      if (isPalette) {
        this.setOpen(false);
      }
      this.$emit("changemodel", currentValue);
      this.$emit("update:modelRgbaValue", event.rgbaValue);
      this.$emit("update:modelValue", currentValue);
      this.$emit("change", {
        value: currentValue,
        rgbaValue: event.rgbaValue,
        event
      });
    },
    onFlatChangeHandler: function onFlatChangeHandler(event) {
      this.onChangeHandler(event, true);
    }
  }
};
var ColorPicker = ColorPickerVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/switch/Switch.js
var allVue16 = vue_runtime_esm_bundler_exports;
var gh15 = allVue16.h;
var isV316 = allVue16.version && allVue16.version[0] === "3";
var SwitchVue2 = {
  name: "KendoSwitch",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "change": null,
    "changemodel": null,
    "update:modelValue": null,
    "focus": null,
    "blur": null
  },
  props: {
    name: String,
    accessKey: String,
    checked: {
      type: Boolean,
      default: void 0
    },
    className: String,
    disabled: {
      type: Boolean,
      default: false
    },
    defaultChecked: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator9(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    trackRounded: {
      type: String,
      default: "full",
      validator: function validator10(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    thumbRounded: {
      type: String,
      default: "full",
      validator: function validator11(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    dir: String,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    offLabel: {
      type: String,
      default: "OFF"
    },
    onLabel: {
      type: String,
      default: "ON"
    },
    required: {
      type: Boolean,
      default: false
    },
    tabIndex: Number,
    valid: Boolean,
    validityStyles: {
      type: Boolean,
      default: false
    },
    validationMessage: String,
    value: {
      type: [String, Number, Boolean],
      default: void 0
    },
    modelValue: {
      type: Boolean,
      default: void 0
    }
  },
  created: function created8() {
    validatePackage(packageMetadata);
    this._id = guid();
    this.defaultValidationMessage = provideLocalizationService(this);
  },
  data: function data8() {
    return {
      currentChecked: this.$props.defaultChecked,
      valueDuringOnChange: void 0,
      focused: false,
      currentDir: void 0
    };
  },
  computed: {
    computedValue: function computedValue3() {
      return this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.$props.checked !== void 0 ? this.$props.checked : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.currentChecked;
    },
    switchClassName: function switchClassName() {
      var _a3;
      var isValid3 = !this.validityStyles || this.validity().valid;
      var rounded = this.$props.trackRounded;
      return _a3 = {
        "k-switch": true
      }, _a3["k-switch-".concat(kendoThemeMaps.sizeMap[this.$props.size])] = this.$props.size, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a3["k-switch-on"] = this.computedValue, _a3["k-switch-off"] = !this.computedValue, _a3["k-focus"] = this.focused, _a3["k-disabled"] = this.$props.disabled, _a3["k-invalid"] = !isValid3, _a3;
    },
    switchTrackClass: function switchTrackClass() {
      var _a3;
      var rounded = this.$props.trackRounded;
      return _a3 = {
        "k-switch-track": true
      }, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a3;
    },
    switchThumbClass: function switchThumbClass() {
      var _a3;
      var rounded = this.$props.thumbRounded;
      return _a3 = {
        "k-switch-thumb": true
      }, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a3;
    }
  },
  mounted: function mounted8() {
    this._element = getRef(this, "element");
    this.input = getRef(this, "input");
    this.currentDir = this.$props.dir !== void 0 ? this.$props.dir : isRtl(this.$el) ? "rtl" : "ltr";
    this.setValidity();
  },
  updated: function updated6() {
    this.setValidity();
  },
  // @ts-ignore
  setup: !isV316 ? void 0 : function() {
    var v3 = !!isV316;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render15(createElement) {
    var h = gh15 || createElement;
    var _a3 = this.$props, disabled = _a3.disabled, id = _a3.id, offLabel = _a3.offLabel, onLabel = _a3.onLabel, tabIndex = _a3.tabIndex, required = _a3.required;
    return h("span", {
      "class": this.switchClassName,
      role: "switch",
      attrs: this.v3 ? void 0 : {
        role: "switch",
        "aria-checked": this.computedValue,
        "aria-disabled": disabled || void 0,
        dir: this.currentDir
      },
      "aria-checked": this.computedValue,
      "aria-disabled": disabled || void 0,
      dir: this.currentDir,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown,
        "click": this.handleClick,
        "focusout": this.handleWrapperBlur,
        "focusin": this.handleWrapperFocus
      },
      onClick: this.handleClick,
      onFocusout: this.handleWrapperBlur,
      onFocusin: this.handleWrapperFocus
    }, [h("span", {
      "class": this.switchTrackClass,
      id: id || this._id,
      attrs: this.v3 ? void 0 : {
        id: id || this._id,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        tabindex: getTabIndex(tabIndex, disabled, void 0),
        accesskey: this.$props.accessKey
      },
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      ref: setRef(this, "element"),
      tabindex: getTabIndex(tabIndex, disabled, void 0),
      accesskey: this.$props.accessKey
    }, [h("input", {
      type: "checkbox",
      attrs: this.v3 ? void 0 : {
        type: "checkbox",
        tabindex: -1,
        name: this.$props.name,
        required: required !== void 0 ? required : false,
        "aria-hidden": true
      },
      checked: this.v3 ? this.$props.checked : null,
      domProps: this.v3 ? void 0 : {
        "checked": this.$props.checked,
        "value": this.computedValue
      },
      ref: setRef(this, "input"),
      tabindex: -1,
      name: this.$props.name,
      required: required !== void 0 ? required : false,
      "aria-hidden": true,
      value: this.v3 ? this.computedValue : null,
      style: {
        opacity: 0,
        width: 1,
        border: 0,
        zIndex: -1,
        position: "absolute",
        left: "50%"
      },
      onChange: noop,
      on: this.v3 ? void 0 : {
        "change": noop
      }
    }), h("span", {
      "class": "k-switch-label-on"
    }, [onLabel]), h("span", {
      "class": "k-switch-label-off"
    }, [offLabel])]), h("span", {
      "class": "k-switch-thumb-wrap"
    }, [h("span", {
      "class": this.switchThumbClass
    })])]);
  },
  methods: {
    focus: function focus5() {
      if (this._element) {
        this._element.focus();
      }
    },
    element: function element() {
      return this._element;
    },
    validity: function validity2() {
      var customError = this.$props.validationMessage !== void 0;
      var isValid3 = this.$props.valid !== void 0 ? this.$props.valid : !this.$props.required ? true : this.computedValue ? true : false;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid3;
      return {
        customError,
        valid,
        valueMissing: this.computedValue === null
      };
    },
    setValidity: function setValidity2() {
      if (this.input && this.input.setCustomValidity) {
        this.input.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage || this.defaultValidationMessage.toLanguageString(switchValidation, messages[switchValidation]));
      }
    },
    limit: function limit(offset, drag3, wrapper) {
      var wrapperWidth = wrapper.offsetWidth;
      var margin = drag3.offsetWidth;
      if (offset < 0) {
        return 0;
      } else if (offset > wrapperWidth - margin) {
        return wrapperWidth - margin;
      }
      return offset;
    },
    toggle: function toggle(value2, event) {
      this.currentChecked = value2;
      this.valueDuringOnChange = value2;
      this.$emit("changemodel", value2);
      this.$emit("update:modelValue", value2);
      this.$emit("change", {
        event,
        component: this,
        target: {
          value: value2
        },
        name: this.$props.name,
        value: value2,
        validity: this.validity()
      });
      this.valueDuringOnChange = void 0;
    },
    handleClick: function handleClick4(event) {
      if (this.eventTimeStamp === event.timeStamp) {
        return;
      }
      this.eventTimeStamp = event.timeStamp;
      this.toggle(!this.computedValue, event);
    },
    handleKeyDown: function handleKeyDown(event) {
      if (this.$props.disabled) {
        return;
      }
      var keyCode = event.keyCode;
      if (keyCode === Keys.space || keyCode === Keys.enter) {
        this.toggle(!this.computedValue, event);
      }
    },
    handleWrapperFocus: function handleWrapperFocus(event) {
      if (this.$props.disabled) {
        return;
      }
      this.focused = true;
      this.$emit("focus", event);
    },
    handleWrapperBlur: function handleWrapperBlur(event) {
      if (this.$props.disabled) {
        return;
      }
      this.focused = false;
      this.$emit("blur", event);
    }
  }
};
var Switch = SwitchVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/input-separator/InputSeparator.js
var allVue17 = vue_runtime_esm_bundler_exports;
var gh16 = allVue17.h;
var isV317 = allVue17.version && allVue17.version[0] === "3";
var InputSeparatorVue2 = {
  created: function created9() {
    validatePackage(packageMetadata);
  },
  // @ts-ignore
  setup: !isV317 ? void 0 : function() {
    var v3 = !!isV317;
    return {
      v3
    };
  },
  render: function render16(createElement) {
    var h = gh16 || createElement;
    return h("span", {
      "class": "k-input-separator"
    });
  }
};
var InputSeparator = InputSeparatorVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/textbox/TextBox.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var allVue18 = vue_runtime_esm_bundler_exports;
var gh17 = allVue18.h;
var isV318 = allVue18.version && allVue18.version[0] === "3";
var ref2 = allVue18.ref;
var TextBoxVue2 = {
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "input": null,
    "change": null,
    "changemodel": null,
    "update:modelValue": null,
    "focus": null,
    "blur": null,
    "keyup": null,
    "keydown": null,
    "keypress": null
  },
  props: {
    modelValue: {
      type: [String, Number],
      default: void 0
    },
    disabled: {
      type: Boolean,
      default: void 0
    },
    defaultValue: {
      type: [String, Number],
      default: ""
    },
    value: {
      type: [String, Number]
    },
    label: {
      type: String
    },
    placeholder: {
      type: String
    },
    required: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator12(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator13(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator14(value2) {
        return [null, "solid", "flat", "outline"].includes(value2);
      }
    },
    dir: {
      type: String
    },
    id: String,
    valid: {
      type: Boolean,
      default: void 0
    },
    validate: {
      type: Boolean
    },
    validationMessage: {
      type: String
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    iconName: String,
    inputPrefix: templateDefinition,
    inputSuffix: templateDefinition,
    showValidationIcon: Boolean,
    showLoadingIcon: Boolean,
    showClearButton: Boolean,
    inputClass: String,
    wrapperClass: String,
    tabIndex: Number,
    ariaLabel: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  data: function data9() {
    return {
      hasMounted: false,
      autofill: false,
      currentValue: "",
      valueDuringOnChange: "",
      focused: false
    };
  },
  created: function created10() {
    validatePackage(packageMetadata);
    this._input = void 0;
    this._inputId = guid();
    this.$data.valueDuringOnChange = void 0;
    this.$data.currentValue = this.$props.defaultValue;
  },
  mounted: function mounted9() {
    this._input = this.v3 ? this.inputRef : this.$refs.input;
    this.wrapper = this.v3 ? this.wrapperRef : this.$refs.wrapper;
    this.$data.hasMounted = true;
    this.setValidity();
  },
  updated: function updated7() {
    this.setValidity();
    this.updateValidClass();
  },
  // @ts-ignore
  setup: !isV318 ? void 0 : function() {
    var v3 = !!isV318;
    var inputRef = ref2(null);
    return {
      v3,
      inputRef
    };
  },
  render: function render17(createElement) {
    var _this = this;
    var h = gh17 || createElement;
    var isValid3 = !this.$props.validityStyles || this.validity().valid;
    var _a3 = this.$props, label = _a3.label, id = _a3.id, required = _a3.required, iconName = _a3.iconName, showValidationIcon = _a3.showValidationIcon, showLoadingIcon = _a3.showLoadingIcon, showClearButton = _a3.showClearButton, tabIndex = _a3.tabIndex, ariaLabel = _a3.ariaLabel, ariaLabelledBy = _a3.ariaLabelledBy, ariaDescribedBy = _a3.ariaDescribedBy;
    var inputId = id || this._inputId;
    var textbox = h("input", __assign8(__assign8({
      domProps: this.v3 ? null : __assign8(__assign8({}, this.$attrs), {
        placeholder: this.$props.placeholder,
        id: inputId,
        required,
        disabled: this.$props.disabled,
        value: this.computedValue
      }),
      attrs: this.v3 ? void 0 : __assign8(__assign8({}, this.$attrs), {
        tabindex: tabIndex
      })
    }, this.$attrs), {
      placeholder: this.$props.placeholder,
      id: inputId,
      tabindex: tabIndex,
      required,
      ariaLabel,
      ariaLabelledby: ariaLabelledBy,
      ariaDescribedby: ariaDescribedBy,
      ariaDisabled: this.$props.disabled,
      disabled: this.$props.disabled,
      value: this.computedValue,
      class: this.inputInnerClass,
      ref: this.v3 ? function(el) {
        _this.inputRef = el;
      } : "input",
      on: this.v3 ? null : {
        change: this.handleChange,
        focus: this.emitFocus,
        blur: this.emitBlur,
        keydown: this.handleKeydown,
        keyup: this.handleKeyup,
        keypress: this.handleKeypress,
        input: this.handleInput,
        animationstart: this.handleAutoFill,
        animationend: this.handleAutoFillEnd
      },
      onKeydown: this.handleKeydown,
      onKeyup: this.handleKeyup,
      onKeypress: this.handleKeypress,
      onChange: this.handleChange,
      onFocus: this.emitFocus,
      onBlur: this.emitBlur,
      onInput: this.handleInput,
      onAnimationstart: this.handleAutoFill,
      onAnimationend: this.handleAutoFillEnd
    }));
    var inputPrefixTemplate = templateRendering.call(this, this.$props.inputPrefix, getListeners.call(this));
    var inputSuffixTemplate = templateRendering.call(this, this.$props.inputSuffix, getListeners.call(this));
    var inputPrefix = getTemplate.call(this, {
      h,
      template: inputPrefixTemplate,
      additionalProps: {
        value: this.computedValue,
        valid: isValid3
      }
    });
    var inputSuffix = getTemplate.call(this, {
      h,
      template: inputSuffixTemplate,
      additionalProps: {
        value: this.computedValue,
        valid: isValid3
      }
    });
    var inputWrapper = h("span", {
      "class": this.inputWrapperClass(),
      ref: this.v3 ? function(el) {
        _this.wrapperRef = el;
      } : "wrapper"
    }, [iconName && h(Icon, {
      name: iconName,
      attrs: this.v3 ? void 0 : {
        name: iconName
      },
      "class": "k-input-icon"
    }), this.$props.inputPrefix && h("span", {
      "class": "k-input-prefix"
    }, [inputPrefix]), textbox, this.$props.inputSuffix && h("span", {
      "class": "k-input-suffix"
    }, [inputSuffix]), showValidationIcon && isValid3 && h(Icon, {
      name: "check",
      attrs: this.v3 ? void 0 : {
        name: "check",
        icon: checkIcon
      },
      icon: checkIcon,
      "class": "k-input-validation-icon"
    }), showValidationIcon && !isValid3 && h(Icon, {
      name: "exclamation-circle",
      attrs: this.v3 ? void 0 : {
        name: "exclamation-circle",
        icon: exclamationCircleIcon
      },
      icon: exclamationCircleIcon,
      "class": "k-input-validation-icon"
    }), showLoadingIcon && h(Icon, {
      name: "loading",
      attrs: this.v3 ? void 0 : {
        name: "loading"
      },
      "class": "k-input-loading-icon"
    }), showClearButton && this.computedValue && h("span", {
      onClick: this.clearClick,
      on: this.v3 ? void 0 : {
        "click": this.clearClick
      },
      "class": "k-clear-value"
    }, [h(Icon, {
      name: "x",
      attrs: this.v3 ? void 0 : {
        name: "x",
        icon: xIcon
      },
      icon: xIcon
    })])]);
    return label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label,
        attrs: this.v3 ? void 0 : {
          label,
          editorId: inputId,
          editorValue: this.computedValue,
          editorValid: isValid3,
          editorDisabled: this.$props.disabled,
          editorPlaceholder: this.$data.focused ? this.$props.placeholder : "",
          dir: this.$props.dir
        },
        editorId: inputId,
        editorValue: this.computedValue,
        editorValid: isValid3,
        editorDisabled: this.$props.disabled,
        editorPlaceholder: this.$data.focused ? this.$props.placeholder : "",
        dir: this.$props.dir
      }, this.v3 ? function() {
        return [inputWrapper];
      } : [inputWrapper])
    ) : inputWrapper;
  },
  methods: {
    updateValidClass: function updateValidClass2() {
      this.wrapper.classList.toggle("k-invalid", !this.validity().valid);
    },
    emitFocus: function emitFocus2(e) {
      this.$emit("focus", e);
      this.$data.focused = true;
    },
    emitBlur: function emitBlur2(e) {
      this.$emit("blur", e);
      this.$data.focused = false;
    },
    handleKeydown: function handleKeydown2(e) {
      this.$emit("keydown", e);
    },
    handleKeyup: function handleKeyup2(e) {
      this.$emit("keyup", e);
    },
    handleKeypress: function handleKeypress2(e) {
      this.$emit("keypress", e);
    },
    clearClick: function clearClick2(event) {
      this.emitUpdate(event, "change", "");
    },
    focus: function focus6() {
      if (this._input) {
        this._input.focus();
      }
    },
    validity: function validity3() {
      var result = {
        badTextBox: this._input ? this._input.validity.badTextBox : false,
        patternMismatch: this._input ? this._input.validity.patternMismatch : false,
        rangeOverflow: this._input ? this._input.validity.rangeOverflow : false,
        rangeUnderflow: this._input ? this._input.validity.rangeUnderflow : false,
        stepMismatch: this._input ? this._input.validity.stepMismatch : false,
        tooLong: this._input ? this._input.validity.tooLong : false,
        tooShort: this._input ? this._input.validity.tooShort : false,
        typeMismatch: this._input ? this._input.validity.typeMismatch : false,
        valueMissing: this._input ? this._input.validity.valueMissing : false
      };
      return __assign8(__assign8({}, result), {
        customError: this.$props.validationMessage !== void 0,
        valid: this.$props.valid !== void 0 ? this.$props.valid : this._input ? !this.isInvalid(result) : true
      });
    },
    isInvalid: function isInvalid2(state) {
      var result = false;
      for (var prop in state) {
        if (state.hasOwnProperty(prop)) {
          result = result || state[prop];
        }
      }
      return result;
    },
    setValidity: function setValidity3() {
      if (this._input && this._input.setCustomValidity) {
        this._input.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage || "");
      }
    },
    handleInput: function handleInput2(event) {
      this.emitUpdate(event, "input", event.target.value);
    },
    handleChange: function handleChange2(event) {
      this.emitUpdate(event, "change", event.target.value);
    },
    emitUpdate: function emitUpdate2(event, eventName, value2) {
      var that = this;
      if (this.disabled) {
        return;
      }
      this.$data.currentValue = value2;
      this.$data.valueDuringOnChange = value2;
      this.$nextTick(function() {
        that.$emit("changemodel", value2);
        that.$emit("update:modelValue", value2);
        that.$emit(eventName, {
          event,
          value: value2,
          component: that,
          target: event.target,
          validity: that.validity()
        });
        that.$data.valueDuringOnChange = void 0;
      });
    },
    handleAutoFill: function handleAutoFill2(e) {
      if (e.animationName === "autoFillStart") {
        var parent_1 = e.target.parentNode;
        if (parent_1 && parent_1.classList.contains("k-empty")) {
          this.$data.autofill = true;
          parent_1.classList.remove("k-empty");
        }
      }
    },
    handleAutoFillEnd: function handleAutoFillEnd2(e) {
      if (e.animationName === "autoFillEnd") {
        var parent_2 = e.target.parentNode;
        if (parent_2) {
          this.$data.autofill = false;
        }
      }
    },
    name: function name2() {
      return this.$props.name;
    },
    inputWrapperClass: function inputWrapperClass2() {
      var _a3;
      var _b = this.$props, size2 = _b.size, fillMode = _b.fillMode, rounded = _b.rounded;
      var isValid3 = !this.$data.hasMounted || !this.$props.validityStyles || this.validity().valid;
      return _a3 = {
        "k-textbox": true,
        "k-input": true
      }, _a3["k-input-".concat(kendoThemeMaps.sizeMap[size2] || size2)] = size2, _a3["k-input-".concat(fillMode)] = fillMode, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a3["k-invalid"] = !isValid3, _a3["k-required"] = this.required, _a3["k-disabled"] = this.$props.disabled, _a3[this.wrapperClass] = this.wrapperClass, _a3;
    }
  },
  computed: {
    spanClassNames: {
      get: function get3() {
        var isValid3 = !this.$data.hasMounted || !this.$props.validityStyles || this.validity().valid;
        return {
          "k-floating-label-container": true,
          "k-focus": this.$data.focused,
          "k-empty": !((this.computedValue === 0 ? true : this.computedValue) || this.$props.placeholder || this.$data.autofill),
          "k-autofill": this.$data.autofill,
          "k-invalid": !isValid3 && isValid3 !== void 0,
          "k-rtl": this.$props.dir === "rtl"
        };
      }
    },
    inputInnerClass: function inputInnerClass2() {
      var _a3;
      return _a3 = {
        "k-input-inner": true
      }, _a3[this.inputClass] = this.inputClass, _a3;
    },
    computedValue: {
      get: function get4() {
        return this.$data.valueDuringOnChange !== void 0 ? this.$data.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentValue;
      }
    }
  }
};
var TextBox = TextBoxVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/numerictextbox/utils/main.js
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var DEFAULT_NUMBER = 11111111111111e-7;
var MAX_DECIMAL = 0.31111111111111117;
var MIN_DECIMAL = 1;
var ONE_NUMBER = 1;
var ZERO_NUMBER = 0;
var DIGITS_REGEX = /\d/;
var MAX_PRECISION = 15;
var getStateOrPropsValue = function getStateOrPropsValue2(value2, stateValue) {
  return value2 !== void 0 ? value2 : stateValue;
};
var formatValue = function formatValue2(value2, format, intlService) {
  if (value2 === null && value2 === void 0) {
    return "";
  }
  if (typeof value2 === "string") {
    return value2;
  }
  return intlService.formatNumber(value2, format);
};
var fractionLength = function fractionLength2(value2) {
  return (String(value2).split(".")[1] || "").length;
};
var maxFractionLength = function maxFractionLength2(value1, value2) {
  return Math.max(fractionLength(value1), fractionLength(value2));
};
var limitPrecision = function limitPrecision2(precision) {
  return Math.min(precision, MAX_PRECISION);
};
var toFixedPrecision = function toFixedPrecision2(value2, precision) {
  var maxPrecision = limitPrecision(precision);
  return parseFloat(value2.toFixed(maxPrecision));
};
var increaseValue = function increaseValue2(value2, newState, step, min, max, format, intlService) {
  var maxPrecision = maxFractionLength(value2 || 0, step || 0);
  var increasedValue = rangeValue(toFixedPrecision((value2 || 0) + (step || 0), maxPrecision), min, max);
  newState.eventValue = increasedValue;
  newState.currentLooseValue = formatValue(increasedValue, format, intlService);
  newState.selectionStart = newState.selectionEnd = getLastNumberIndex(newState.currentLooseValue, DIGITS_REGEX);
};
var decreaseValue = function decreaseValue2(value2, newState, step, min, max, format, intlService) {
  var maxPrecision = maxFractionLength(value2 || 0, step || 0);
  var decreasedValue = rangeValue(toFixedPrecision((value2 || 0) - (step || 0), maxPrecision), min, max);
  newState.eventValue = decreasedValue;
  newState.currentLooseValue = formatValue(decreasedValue, format, intlService);
  newState.selectionStart = newState.selectionEnd = getLastNumberIndex(newState.currentLooseValue, DIGITS_REGEX);
};
var rangeValue = function rangeValue2(value2, min, max) {
  if (value2 == null) {
    return value2;
  }
  if (!(value2 > 1 || value2 < 1 || value2 === 1)) {
    return null;
  }
  if (max !== void 0 && min !== void 0 && max < min) {
    return null;
  }
  if (max !== void 0 && value2 > max) {
    value2 = max;
  }
  if (min !== void 0 && value2 < min) {
    value2 = min;
  }
  return value2;
};
var getMaxCursorPosition = function getMaxCursorPosition2(nextValue, formatInfo) {
  var formatSuffixIndex = formatInfo.findIndex(function(_a3) {
    var _ = _a3[0], currSuffix = _a3[1];
    return Boolean(currSuffix) && nextValue.indexOf(currSuffix) === nextValue.length - currSuffix.length;
  });
  if (formatSuffixIndex === -1) {
    return -1;
  }
  var suffix = formatInfo[formatSuffixIndex][1];
  return nextValue.length - suffix.length;
};
var getMinCursorPosition = function getMinCursorPosition2(nextValue, formatInfo) {
  var formatPrefixIndex = formatInfo.findIndex(function(_a3) {
    var currPrefix = _a3[0], _ = _a3[1];
    return Boolean(currPrefix) && nextValue.indexOf(currPrefix) === 0;
  });
  if (formatPrefixIndex === -1) {
    return -1;
  }
  var prefix = formatInfo[formatPrefixIndex][0];
  return prefix.length;
};
var rangeSelection = function rangeSelection2(nextLooseValue, formatInfo, newState) {
  var maxPosition = getMaxCursorPosition(nextLooseValue, formatInfo);
  if (maxPosition !== -1 && newState.selectionStart > maxPosition) {
    newState.selectionStart = newState.selectionEnd = maxPosition;
    return;
  }
  if (newState.selectionStart > nextLooseValue.length) {
    newState.selectionStart = newState.selectionEnd = nextLooseValue.length;
  }
  var minPosition = getMinCursorPosition(nextLooseValue, formatInfo);
  if (minPosition !== -1 && newState.selectionStart < minPosition) {
    newState.selectionStart = newState.selectionEnd = minPosition;
  }
  if (newState.selectionStart === -1) {
    newState.selectionStart = newState.selectionEnd = 0;
  }
};
var setSelection = function setSelection2(newState, newIndex, nextLooseValue, formatInfo) {
  newState.selectionStart = newState.selectionEnd = newIndex;
  rangeSelection(nextLooseValue, formatInfo, newState);
};
var setInvalid = function setInvalid2(newState, format, formatInfo, intlService) {
  newState.eventValue = intlService.parseNumber(newState.prevLooseValue, format);
  newState.currentLooseValue = newState.prevLooseValue;
  newState.valueIsCorrected = true;
  setSelection(newState, newState.selectionStart, newState.currentLooseValue, formatInfo);
};
var isMinusSymbolAdded = function isMinusSymbolAdded2(newState, symbols) {
  var newText = String(newState.currentLooseValue);
  var oldText = String(newState.prevLooseValue);
  return newText.split(symbols.minusSign).length !== oldText.split(symbols.minusSign).length && newText.length === oldText.length + symbols.minusSign.length;
};
var isMinusSymbolRemoved = function isMinusSymbolRemoved2(newState, symbols) {
  var newText = String(newState.currentLooseValue);
  var oldText = String(newState.prevLooseValue);
  return newText.indexOf(symbols.minusSign) === -1 && oldText.indexOf(symbols.minusSign) !== -1;
};
var isDecimalDuplicated = function isDecimalDuplicated2(newState, symbols) {
  var newText = String(newState.currentLooseValue);
  return newText.split(symbols.decimal).length > 2;
};
var getFormatPrefixSufix = function getFormatPrefixSufix2(format, intlService) {
  var positiveResult = intlService.formatNumber(DEFAULT_NUMBER, format);
  var negativeResult = intlService.formatNumber(-DEFAULT_NUMBER, format);
  var zeroResult = intlService.formatNumber(ZERO_NUMBER, format);
  var oneResult = intlService.formatNumber(ONE_NUMBER, format);
  var positivePrefix = getPrefix(positiveResult);
  var negativePrefix = getPrefix(negativeResult);
  var zeroPrefix = getPrefix(zeroResult);
  var onePrefix = getPrefix(oneResult);
  var positiveSuffix = getSuffix(positiveResult);
  var negativeSuffix = getSuffix(negativeResult);
  var zeroSuffix = getSuffix(zeroResult);
  var oneSuffix = getSuffix(oneResult);
  return {
    positiveInfo: [positivePrefix, positiveSuffix],
    negativeInfo: [negativePrefix, negativeSuffix],
    zeroInfo: [zeroPrefix, zeroSuffix],
    oneInfo: [onePrefix, oneSuffix]
  };
};
var getFormatSymbols = function getFormatSymbols2(format, intlService) {
  var positiveResult = intlService.formatNumber(DEFAULT_NUMBER, format);
  var negativeResult = intlService.formatNumber(-DEFAULT_NUMBER, format);
  var zeroResult = intlService.formatNumber(ZERO_NUMBER, format);
  var oneResult = intlService.formatNumber(ONE_NUMBER, format);
  var symbols = intlService.numberSymbols();
  var sanitizeRegex = new RegExp("[\\d\\".concat(symbols.decimal).concat(symbols.group, "]"), "g");
  var resultWithDuplicates = [positiveResult, negativeResult, zeroResult, oneResult].map(function(result) {
    return result.replace(sanitizeRegex, "");
  }).join("");
  return resultWithDuplicates.split("").filter(function(x, n, s) {
    return s.indexOf(x) === n;
  }).join("");
};
var getInitialPosition = function getInitialPosition2(nextLooseValue, symbols) {
  var decimalIdex = nextLooseValue.indexOf(symbols.decimal);
  if (decimalIdex > -1) {
    return decimalIdex;
  }
  return getLastNumberIndex(nextLooseValue, DIGITS_REGEX);
};
var reverseString = function reverseString2(str) {
  return str.split("").reverse().join("");
};
var getLastNumberIndex = function getLastNumberIndex2(currentLooseValue, inputRegex) {
  return currentLooseValue.length - reverseString(currentLooseValue).search(inputRegex);
};
var getPrefix = function getPrefix2(str) {
  return str.split(str[str.search(DIGITS_REGEX)])[0];
};
var getSuffix = function getSuffix2(str) {
  var reversedString = reverseString(str);
  return reverseString(reversedString.split(reversedString[reversedString.search(DIGITS_REGEX)])[0]);
};
var getFirstNumberIndex = function getFirstNumberIndex2(prevLooseValue, inputRegex) {
  return prevLooseValue.search(inputRegex);
};
var getDecimalCount = function getDecimalCount2(value2, decimal) {
  var currentDecimalPlace = value2.indexOf(decimal);
  return currentDecimalPlace > -1 ? value2.length - currentDecimalPlace - 1 : 0;
};
var changeBasedSelection = function changeBasedSelection2(currentValue, nextValue, selectionPosition, isDelete, sanitizeRegex) {
  var isCurrentLeadingZero = currentValue.replace(sanitizeRegex, "")[0] === "0";
  var isNextLeadingZero = nextValue.replace(sanitizeRegex, "")[0] === "0";
  if (isCurrentLeadingZero && !isNextLeadingZero) {
    return selectionPosition - 1;
  }
  if (isNextLeadingZero && isDelete) {
    return selectionPosition + 1;
  }
  var numberCounter = 0;
  for (var idx = 0; idx < selectionPosition; idx++) {
    if (DIGITS_REGEX.test(currentValue.charAt(idx))) {
      numberCounter++;
    }
  }
  var newSelection = 0;
  while (numberCounter > 0 && nextValue.length > newSelection) {
    if (DIGITS_REGEX.test(nextValue.charAt(newSelection))) {
      numberCounter--;
    }
    newSelection++;
  }
  return newSelection;
};
var sanitizeNumber = function sanitizeNumber2(state, format, intlService) {
  var newState = __assign9({}, state);
  var prevLooseValue = newState.prevLooseValue;
  var symbols = intlService.numberSymbols();
  var restrictedSymbols = getFormatSymbols(format, intlService);
  var currentLooseValueAsString = String(newState.currentLooseValue);
  var prevLooseValueAsString = String(prevLooseValue);
  var sanitizeRegex = new RegExp("[^\\d\\".concat(symbols.decimal, "]"), "g");
  var sanitizeGroupRegex = new RegExp("[^\\d\\".concat(symbols.decimal, "\\").concat(symbols.group, "]"), "g");
  var allSymbolsRegex = new RegExp("[\\d\\".concat(symbols.decimal, "\\").concat(symbols.group, "]"));
  var sanitizedString = currentLooseValueAsString.replace(sanitizeRegex, "");
  var numberStart = getFirstNumberIndex(currentLooseValueAsString, DIGITS_REGEX);
  var numberEnd = numberStart === -1 ? -1 : getLastNumberIndex(currentLooseValueAsString, DIGITS_REGEX);
  var decimalIndex = currentLooseValueAsString.indexOf(symbols.decimal);
  var sanitizedFormattedString = (currentLooseValueAsString.substring(0, numberStart) + currentLooseValueAsString.substring(numberStart, numberEnd).replace(sanitizeGroupRegex, "") + currentLooseValueAsString.substring(numberEnd, currentLooseValueAsString.length)).split("").filter(function(s) {
    return restrictedSymbols.indexOf(s) !== -1 || s.search(allSymbolsRegex) !== -1;
  }).join("");
  var formattedMax = intlService.formatNumber(MAX_DECIMAL, format).replace(sanitizeRegex, "");
  var maxDecimalIndex = formattedMax.indexOf(symbols.decimal);
  var maxDecimalCount = maxDecimalIndex > -1 ? formattedMax.length - maxDecimalIndex - 1 : 0;
  var formattedMin = intlService.formatNumber(MIN_DECIMAL, format).replace(sanitizeRegex, "");
  var minDecimalIndex = formattedMin.indexOf(symbols.decimal);
  var minDecimalCount = minDecimalIndex > -1 ? formattedMin.length - minDecimalIndex - 1 : 0;
  var _a3 = getFormatPrefixSufix(format, intlService), positiveInfo = _a3.positiveInfo, negativeInfo = _a3.negativeInfo, zeroInfo = _a3.zeroInfo, oneInfo = _a3.oneInfo;
  var formatInfo = [positiveInfo, negativeInfo, zeroInfo, oneInfo];
  var isFormatContainPrefixSuffix = formatInfo.findIndex(function(info) {
    return info.findIndex(function(nestedInfo) {
      return Boolean(nestedInfo);
    }) !== -1;
  }) !== 1;
  var isDelete = currentLooseValueAsString.length > 0 && currentLooseValueAsString.length < prevLooseValueAsString.length;
  var isPercentFormat = format && format[0] === "p" && currentLooseValueAsString && currentLooseValueAsString.indexOf(symbols.percentSign) === -1;
  if (!newState.isPaste) {
    if (currentLooseValueAsString === "") {
      newState.eventValue = null;
      newState.currentLooseValue = "";
      return newState;
    }
    if (newState.currentLooseValue === symbols.minusSign && intlService.formatNumber(-0, format) !== prevLooseValueAsString) {
      newState.eventValue = -0;
      newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);
      setSelection(newState, getInitialPosition(newState.currentLooseValue, symbols), newState.currentLooseValue, formatInfo);
      return newState;
    }
    if (isMinusSymbolAdded(newState, symbols)) {
      var nextValue = intlService.parseNumber(prevLooseValue, format);
      newState.eventValue = -(nextValue !== null ? nextValue : 0);
      newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);
      var currentNumberStart = getFirstNumberIndex(newState.currentLooseValue, DIGITS_REGEX);
      var oldNumberStart = getFirstNumberIndex(prevLooseValueAsString, DIGITS_REGEX);
      setSelection(newState, newState.selectionEnd - 1 + (currentNumberStart - oldNumberStart), newState.currentLooseValue, formatInfo);
      return newState;
    }
    if (isMinusSymbolRemoved(newState, symbols)) {
      newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);
      setSelection(newState, newState.selectionStart, newState.currentLooseValue, formatInfo);
      return newState;
    }
    if (newState.currentLooseValue === symbols.decimal) {
      newState.eventValue = 0;
      var valueCandidate = formatValue(newState.eventValue, format, intlService);
      if (minDecimalCount === 0 && maxDecimalCount > 0) {
        var currentLastNumberIndex = getLastNumberIndex(valueCandidate, DIGITS_REGEX);
        newState.currentLooseValue = valueCandidate.substring(0, currentLastNumberIndex) + symbols.decimal + valueCandidate.substring(currentLastNumberIndex);
      } else {
        newState.currentLooseValue = valueCandidate;
      }
      setSelection(newState, getInitialPosition(newState.currentLooseValue, symbols) + 1, newState.currentLooseValue, formatInfo);
      return newState;
    }
    if (isDecimalDuplicated(newState, symbols)) {
      setInvalid(newState, format, formatInfo, intlService);
      return newState;
    }
    if (isPercentFormat) {
      newState.eventValue = intlService.parseNumber(currentLooseValueAsString, format) / 100;
      newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);
      return newState;
    }
    var numericSymbols = String(newState.currentLooseValue).replace(/[^\d]/g, "");
    if (numericSymbols.length > MAX_PRECISION) {
      setInvalid(newState, format, formatInfo, intlService);
      return newState;
    }
    if (sanitizedString !== currentLooseValueAsString && currentLooseValueAsString && isFormatContainPrefixSuffix) {
      var formatInfoIndex = formatInfo.findIndex(function(_a4) {
        var prefix = _a4[0], suffix = _a4[1];
        var prefixIndex = currentLooseValueAsString.indexOf(prefix);
        var suffixIndex = currentLooseValueAsString.indexOf(suffix);
        var prefixFound = prefixIndex === 0;
        var suffixFound = suffixIndex === currentLooseValueAsString.length - suffix.length;
        var prefixGap = prefixIndex + prefix.length !== numberStart && numberStart !== -1 && currentLooseValueAsString[prefixIndex + prefix.length] !== symbols.decimal;
        var suffixGap = suffixIndex !== numberEnd && numberEnd !== -1 && currentLooseValueAsString[suffixIndex - 1] !== symbols.decimal;
        if (prefix && suffix) {
          if (prefixGap || suffixGap) {
            return false;
          }
          return prefixFound && suffixFound;
        }
        if (prefix) {
          if (prefixGap) {
            return false;
          }
          return prefixFound;
        }
        if (suffix) {
          if (suffixGap) {
            return false;
          }
          return suffixFound;
        }
        return false;
      });
      if (formatInfoIndex === -1) {
        setInvalid(newState, format, formatInfo, intlService);
        return newState;
      }
    }
    if (sanitizedString[sanitizedString.length - 1] === symbols.decimal && maxDecimalCount > 0) {
      newState.eventValue = intlService.parseNumber(currentLooseValueAsString, format);
      newState.currentLooseValue = sanitizedFormattedString;
      return newState;
    }
    if (newState.currentLooseValue && prevLooseValue) {
      var isSpecialSymbolDeleted = (restrictedSymbols + symbols.decimal + symbols.group).split("").findIndex(function(s) {
        if (currentLooseValueAsString.split("").filter(function(x) {
          return x === s;
        }).length < prevLooseValueAsString.split("").filter(function(x) {
          return x === s;
        }).length && currentLooseValueAsString.length + 1 === prevLooseValueAsString.length) {
          if (s === symbols.decimal && getDecimalCount(prevLooseValueAsString.replace(sanitizeRegex, ""), symbols.decimal) === 0) {
            return false;
          }
          return true;
        }
        return false;
      }) > -1;
      if (isSpecialSymbolDeleted) {
        newState.eventValue = intlService.parseNumber(state.prevLooseValue, format);
        newState.currentLooseValue = state.prevLooseValue;
        return newState;
      }
    }
    var currentDecimalCount = getDecimalCount(sanitizedString, symbols.decimal);
    var endsOnDecimal = sanitizedString[sanitizedString.length - 1] === "0";
    if (isDelete && endsOnDecimal && currentDecimalCount < minDecimalCount) {
      newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);
      newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);
      return newState;
    }
    if (currentDecimalCount > 0) {
      var valueUntillDecimal = currentLooseValueAsString.substring(0, decimalIndex);
      if (endsOnDecimal && (!valueUntillDecimal || prevLooseValueAsString.indexOf(valueUntillDecimal) !== 0)) {
        newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);
        var nextLooseValue = formatValue(newState.eventValue, format, intlService);
        setSelection(newState, changeBasedSelection(currentLooseValueAsString, nextLooseValue, newState.selectionEnd, isDelete, sanitizeRegex), nextLooseValue, formatInfo);
        newState.currentLooseValue = nextLooseValue;
        return newState;
      }
      if (currentDecimalCount > maxDecimalCount) {
        var looseDecimalPlace = currentLooseValueAsString.indexOf(symbols.decimal);
        var result = currentLooseValueAsString.substring(0, looseDecimalPlace) + currentLooseValueAsString.substring(looseDecimalPlace, looseDecimalPlace + 1 + maxDecimalCount) + currentLooseValueAsString.substring(numberEnd, String(newState.currentLooseValue).length);
        newState.eventValue = intlService.parseNumber(result, format);
        newState.currentLooseValue = result;
        setSelection(newState, newState.selectionStart, result, formatInfo);
        return newState;
      }
      if (minDecimalCount !== maxDecimalCount && currentDecimalCount <= maxDecimalCount && endsOnDecimal) {
        newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);
        newState.currentLooseValue = sanitizedFormattedString;
        return newState;
      }
      if (currentDecimalCount < minDecimalCount) {
        newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);
        newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);
        return newState;
      }
    }
  }
  newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);
  if (isPercentFormat) {
    newState.eventValue = newState.eventValue / 100;
  }
  if (typeof newState.eventValue === "number") {
    var nextLooseValue = formatValue(newState.eventValue, format, intlService);
    if (currentLooseValueAsString.length === 1) {
      setSelection(newState, getInitialPosition(nextLooseValue, symbols), nextLooseValue, formatInfo);
    } else {
      setSelection(newState, changeBasedSelection(currentLooseValueAsString, nextLooseValue, newState.selectionEnd, isDelete, sanitizeRegex), nextLooseValue, formatInfo);
    }
    newState.currentLooseValue = nextLooseValue;
  } else {
    newState.currentLooseValue = formatValue(intlService.parseNumber(sanitizedString), format, intlService);
  }
  return newState;
};

// node_modules/@progress/kendo-vue-inputs/dist/es/numerictextbox/NumericTextBox.js
var allVue19 = vue_runtime_esm_bundler_exports;
var gh18 = allVue19.h;
var isV319 = allVue19.version && allVue19.version[0] === "3";
var ref3 = allVue19.ref;
var inject = allVue19.inject;
var VALIDATION_MESSAGE = "Please enter a valid value!";
var NumericTextBoxVue2 = {
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "change": null,
    "changemodel": null,
    "update:modelValue": null,
    "focus": null,
    "blur": null
  },
  props: {
    modelValue: Number,
    value: Number,
    defaultValue: Number,
    step: {
      type: Number,
      default: 1
    },
    format: [String, Object],
    tabIndex: Number,
    accessKey: String,
    title: String,
    placeholder: String,
    min: Number,
    max: Number,
    spinners: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    dir: String,
    name: String,
    label: String,
    validationMessage: String,
    validityStyles: {
      type: Boolean,
      default: true
    },
    valid: {
      type: Boolean,
      default: void 0
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator15(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator16(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator17(value2) {
        return [null, "solid", "flat", "outline"].includes(value2);
      }
    },
    required: {
      type: Boolean,
      default: false
    },
    id: String,
    ariaLabel: String,
    iconName: String,
    inputPrefix: templateDefinition,
    inputSuffix: templateDefinition,
    showValidationIcon: Boolean,
    showLoadingIcon: Boolean,
    showClearButton: Boolean,
    inputClass: String,
    inputType: {
      type: String,
      default: "tel"
    },
    wrapperClass: String
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data10() {
    return {
      hasMounted: false,
      isInvalid: false,
      isEmpty: false,
      currentValue: 0,
      valueDuringOnChange: 0,
      currentLooseValue: "",
      selectionStart: 0,
      selectionEnd: 0,
      decimalSelect: false,
      focused: false,
      forceUpdate: false
    };
  },
  created: function created11() {
    validatePackage(packageMetadata);
    this._textBeforeInput = "";
    this._inputId = guid();
    this.$data.currentLooseValue = null;
    this.$data.valueDuringOnChange = void 0;
    this._intl = provideIntlService(this);
    this._symbols = this._intl.numberSymbols();
    if (this.$props.value !== void 0) {
      this.$data.currentValue = this.$props.value;
    } else if (this.$props.modelValue !== void 0) {
      this.$data.currentValue = this.$props.modelValue;
    } else if (this.$props.defaultValue !== void 0) {
      this.$data.currentValue = this.$props.defaultValue;
    } else {
      this.$data.currentValue = null;
    }
  },
  mounted: function mounted10() {
    this._input = getRef(this, "input");
    this._elementWrapper = this.v3 ? this.elementWrapperRef : this.$refs.elementWrapper;
    this.$data.hasMounted = true;
    if (this._input) {
      this._textBeforeInput = this._input.value;
    }
    this.setValidity();
  },
  updated: function updated8() {
    if (!(canUseDOM && document.activeElement !== this._input || !this._input) && this.$data.currentLooseValue !== null) {
      if (this.$data.forceUpdate) {
        this._input.selectionStart = this.$data.selectionStart;
        this._input.selectionEnd = this.$data.selectionEnd;
        this.$data.forceUpdate = false;
      }
    }
    if (this._input) {
      this._textBeforeInput = this._input.value;
    }
    this.setValidity();
  },
  computed: {
    computedValue: {
      get: function get5() {
        if (this.$data.valueDuringOnChange !== void 0) {
          return this.$data.valueDuringOnChange;
        } else {
          return this.$data.currentValue;
        }
      }
    },
    looseValue: {
      get: function get6() {
        return formatValue(this.$data.focused ? this.$data.currentLooseValue : getStateOrPropsValue(this.$props.value, this.$data.currentValue), this.$props.format, this._intl);
      }
    },
    spanClassNames: {
      get: function get7() {
        var _a3;
        var isValid3 = !this.$data.hasMounted || !this.$props.validityStyles || this.validity().valid;
        var compValue = this.computedValue;
        return _a3 = {
          "k-floating-label-container": true,
          "k-focus": this.$data.focused,
          "k-empty": !(compValue === 0 ? true : compValue || this.$props.placeholder),
          "k-invalid": !isValid3 && isValid3 !== void 0,
          "k-rtl": this.$props.dir === "rtl"
        }, _a3[this.inputClass] = this.inputClass, _a3;
      }
    },
    wrapperClassNames: function wrapperClassNames() {
      var _a3;
      var _b = this.$props, size2 = _b.size, fillMode = _b.fillMode, rounded = _b.rounded, required = _b.required, disabled = _b.disabled;
      var isValid3 = !this.$props.validityStyles || this.validity().valid;
      return _a3 = {
        "k-input": true,
        "k-numerictextbox": true
      }, _a3["k-input-".concat(kendoThemeMaps.sizeMap[size2] || size2)] = size2, _a3["k-input-".concat(fillMode)] = fillMode, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a3["k-invalid"] = !isValid3, _a3["k-required"] = required, _a3["k-disabled"] = disabled, _a3["k-loading"] = this.showLoadingIcon, _a3[this.wrapperClass] = this.wrapperClass, _a3;
    },
    inputInnerClass: function inputInnerClass3() {
      var _a3;
      return _a3 = {
        "k-input-inner": true
      }, _a3[this.inputClass] = this.inputClass, _a3;
    }
  },
  methods: {
    validity: function validity4() {
      var customError = this.$props.validationMessage !== void 0;
      var isValid3 = !this.$data.valueIsOutOfRange && (!this.$props.required || this.computedValue !== null);
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid3;
      return {
        customError,
        valid,
        valueMissing: this.computedValue === null
      };
    },
    clearClick: function clearClick3(event) {
      if (this.$props.value !== void 0) {
        this.$data.currentValue = this.$props.value;
      } else if (this.$props.modelValue !== void 0) {
        this.$data.currentValue = this.$props.modelValue;
      } else {
        this.$data.currentValue = null;
      }
      this.$emit("changemodel", null);
      this.$emit("update:modelValue", null);
      this.$emit("change", {
        event,
        value: null,
        component: this,
        target: {
          name: this.$props.name,
          value: null
        },
        validity: this.validity()
      });
    },
    focus: function focus7() {
      if (this._input) {
        this._input.focus();
      }
    },
    emitFocus: function emitFocus3(e) {
      this.$data.currentLooseValue = this._prevLooseValue;
      this.$data.focused = true;
      this.$emit("focus", e);
      this.$data.forceUpdate = true;
    },
    emitBlur: function emitBlur3(e) {
      this.$data.eventValue = null;
      this.$data.prevLooseValue = "";
      this.$data.currentLooseValue = "";
      this.$data.focused = false;
      this.$data.selectionStart = void 0;
      this.$data.selectionEnd = void 0;
      this.$data.decimalSelect = false;
      this.$data.valueIsCorrected = false;
      this.$data.valueIsOutOfRange = false;
      this.$emit("blur", e);
      this.$data.forceUpdate = true;
    },
    handleFocus: function handleFocus(_) {
      this.$data.focused = true;
    },
    handleBlur: function handleBlur(_) {
      this.$data.focused = false;
    },
    setValidity: function setValidity4() {
      if (this._input && this._input.setCustomValidity) {
        this._input.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage || VALIDATION_MESSAGE);
      }
    },
    getCurrentState: function getCurrentState() {
      return {
        eventValue: getStateOrPropsValue(this.$props.value, this.$data.currentValue),
        prevLooseValue: this._prevLooseValue,
        currentLooseValue: this._input.value,
        selectionStart: this._input.selectionStart,
        selectionEnd: this._input.selectionEnd,
        decimalSelect: false,
        valueIsCorrected: false,
        valueIsOutOfRange: false,
        isPaste: this._isPaste,
        focused: this.$data.focused
      };
    },
    parseNumber: function parseNumber(text) {
      return this._intl.parseNumber(text, this.$props.format);
    },
    elementChange: function elementChange(event) {
      var newState = this.getCurrentState();
      this._isPaste = false;
      this.triggerChange(event, sanitizeNumber(newState, this.$props.format, this._intl));
    },
    triggerChange: function triggerChange2(event, newState) {
      var _this = this;
      if (this.$props.disabled) {
        return;
      }
      this.$data.valueDuringOnChange = newState.eventValue;
      this.$data.currentValue = newState.eventValue;
      var formattedValue = formatValue(rangeValue(newState.eventValue, this.$props.min, this.$props.max), this.$props.format, this._intl);
      var rangedValue = rangeValue(this.parseNumber(formattedValue), this.$props.min, this.$props.max);
      if (rangedValue !== newState.eventValue) {
        newState.valueIsOutOfRange = true;
        newState.eventValue = rangedValue;
        this.$data.valueDuringOnChange = rangedValue;
        this.$data.currentValue = rangedValue;
      }
      if (newState.valueIsCorrected) {
        var wrapper = this._elementWrapper;
        if (wrapper && wrapper.className.indexOf("k-invalid") === -1) {
          this.$data.isInvalid = true;
          setTimeout(function() {
            _this.$data.isInvalid = false;
          }, 50);
        }
      }
      var shouldFireEvent = this.$props.value !== newState.eventValue;
      if (this.$props.value !== void 0) {
        this.$data.currentValue = this.$props.value;
      } else if (this.$props.modelValue !== void 0) {
        this.$data.currentValue = this.$props.modelValue;
      } else {
        this.$data.currentValue = this.$data.valueDuringOnChange;
      }
      this.$data.prevLooseValue = newState.prevLooseValue;
      this.$data.currentLooseValue = newState.currentLooseValue;
      this.$data.selectionStart = newState.selectionStart;
      this.$data.selectionEnd = newState.selectionEnd;
      this.$data.decimalSelect = newState.decimalSelect;
      this.$data.valueIsCorrected = newState.valueIsCorrected;
      this.$data.valueIsOutOfRange = newState.valueIsOutOfRange;
      this.$data.focused = newState.focused;
      this.$data.isPaste = newState.isPaste;
      this.$data.forceUpdate = !this.$data.forceUpdate;
      if (shouldFireEvent) {
        this.$emit("changemodel", this.$data.valueDuringOnChange);
        this.$emit("update:modelValue", this.$data.valueDuringOnChange);
        this.$emit("change", {
          event,
          value: this.$data.valueDuringOnChange,
          component: this,
          target: {
            name: this.$props.name,
            value: this.$data.valueDuringOnChange
          },
          validity: this.validity()
        });
      }
      this.$data.valueDuringOnChange = void 0;
    },
    onPasteHandler: function onPasteHandler(_event) {
      this._isPaste = true;
    },
    increase: function increase(event) {
      var newState = this.getCurrentState();
      increaseValue(this.parseNumber(String(newState.currentLooseValue)), newState, this.$props.step, this.$props.min, this.$props.max, this.$props.format, this._intl);
      this.triggerChange(event, newState);
    },
    decrease: function decrease(event) {
      var newState = this.getCurrentState();
      decreaseValue(this.parseNumber(String(newState.currentLooseValue)), newState, this.$props.step, this.$props.min, this.$props.max, this.$props.format, this._intl);
      this.triggerChange(event, newState);
    },
    wheel: function wheel(event) {
      if (!canUseDOM || document.activeElement !== this._input || !this._input) {
        return;
      }
      if (event.deltaY < 0) {
        event.preventDefault();
        this.increase(event);
      }
      if (event.deltaY > 0) {
        event.preventDefault();
        this.decrease(event);
      }
    },
    keyDown: function keyDown(event) {
      var newState = this.getCurrentState();
      var currentValue = this.parseNumber(String(newState.currentLooseValue));
      if (newState.selectionEnd > newState.selectionStart && newState.selectionEnd - newState.selectionStart === String(newState.currentLooseValue).length) {
        return;
      }
      switch (event.keyCode) {
        case 38:
          increaseValue(currentValue, newState, this.$props.step, this.$props.min, this.$props.max, this.$props.format, this._intl);
          break;
        case 40:
          decreaseValue(currentValue, newState, this.$props.step, this.$props.min, this.$props.max, this.$props.format, this._intl);
          break;
        case 13:
          var formattedValue = formatValue(rangeValue(currentValue, this.$props.min, this.$props.max), this.$props.format, this._intl);
          var rangedValue = rangeValue(this.parseNumber(formattedValue), this.$props.min, this.$props.max);
          newState.eventValue = rangedValue;
          newState.currentLooseValue = formatValue(rangedValue, this.$props.format, this._intl);
          newState.selectionStart = newState.selectionEnd = newState.currentLooseValue.length;
          break;
        case 110:
          var element2 = this._input;
          var symbols = this._intl.numberSymbols();
          if (element2) {
            newState.currentLooseValue = newState.currentLooseValue.slice(0, newState.selectionStart) + symbols.decimal + newState.currentLooseValue.slice(newState.selectionEnd);
            newState.selectionStart = newState.selectionEnd = newState.selectionStart + 1;
            newState = sanitizeNumber(newState, this.$props.format, this._intl);
          }
          break;
        default:
          return;
      }
      event.preventDefault();
      this.triggerChange(event, newState);
    },
    spinnersWrapperMouseDown: function spinnersWrapperMouseDown(e) {
      if (canUseDOM && this._input) {
        e.preventDefault();
        if (document.activeElement !== this._input) {
          this._input.focus();
        }
      }
    }
  },
  // @ts-ignore
  setup: !isV319 ? void 0 : function() {
    var v3 = !!isV319;
    var inputRef = ref3(null);
    var elementWrapperRef = ref3(null);
    var kendoLocalizationService = inject("kendoLocalizationService", {});
    var kendoIntlService = inject("kendoIntlService", {});
    return {
      v3,
      inputRef,
      elementWrapperRef,
      kendoLocalizationService,
      kendoIntlService
    };
  },
  // @ts-ignore
  render: function render18(createElement) {
    var h = gh18 || createElement;
    var _a3 = this.$props, iconName = _a3.iconName, showValidationIcon = _a3.showValidationIcon, showLoadingIcon = _a3.showLoadingIcon, showClearButton = _a3.showClearButton;
    var inputId = this.$props.id || this._inputId;
    var defaultSlot = getDefaultSlots(this);
    var localizationService = provideLocalizationService(this);
    var isValid3 = this.validity().valid;
    if (this.$props.value !== void 0 && this.$props.value !== this.$data.currentValue) {
      this.$data.currentValue = this.$props.value;
    } else if (this.$props.modelValue !== void 0 && this.$props.modelValue !== this.$data.currentValue) {
      this.$data.currentValue = this.$props.modelValue;
    }
    this._prevLooseValue = this.looseValue;
    var inputPrefixTemplate = templateRendering.call(this, this.$props.inputPrefix, getListeners.call(this));
    var inputSuffixTemplate = templateRendering.call(this, this.$props.inputSuffix, getListeners.call(this));
    var inputPrefix = getTemplate.call(this, {
      h,
      template: inputPrefixTemplate,
      additionalProps: {
        value: this.computedValue,
        valid: isValid3
      }
    });
    var inputSuffix = getTemplate.call(this, {
      h,
      template: inputSuffixTemplate,
      additionalProps: {
        value: this.computedValue,
        valid: isValid3
      }
    });
    var numerictextbox = h("span", {
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      },
      "class": this.wrapperClassNames,
      style: this.$attrs.style
    }, [iconName && h(Icon, {
      name: iconName,
      attrs: this.v3 ? void 0 : {
        name: iconName
      },
      "class": "k-input-icon"
    }), this.$props.inputPrefix && h("span", {
      "class": "k-input-prefix"
    }, [inputPrefix]), h("input", {
      tabindex: this.$props.tabIndex,
      attrs: this.v3 ? void 0 : {
        tabindex: this.$props.tabIndex,
        accesskey: this.$props.accessKey,
        disabled: this.$props.disabled,
        title: this.$props.title,
        "aria-label": this.$props.ariaLabel,
        "aria-valuemin": this.$props.min,
        "aria-valuemax": this.$props.max,
        "aria-disabled": this.$props.disabled ? "true" : void 0,
        placeholder: this.$props.placeholder,
        type: this.$props.inputType,
        spellcheck: false,
        autocomplete: "off",
        autocorrect: "off",
        id: inputId,
        role: "spinbutton",
        name: this.$props.name
      },
      accesskey: this.$props.accessKey,
      disabled: this.$props.disabled,
      title: this.$props.title,
      "aria-label": this.$props.ariaLabel,
      "aria-valuemin": this.$props.min,
      "aria-valuemax": this.$props.max,
      "aria-disabled": this.$props.disabled ? "true" : void 0,
      placeholder: this.$props.placeholder,
      type: this.$props.inputType,
      spellcheck: false,
      autocomplete: "off",
      autocorrect: "off",
      "class": this.inputInnerClass,
      id: inputId,
      role: "spinbutton",
      value: this.v3 ? this.looseValue : null,
      domProps: this.v3 ? void 0 : {
        "value": this.looseValue
      },
      name: this.$props.name,
      onWheel: this.wheel,
      on: this.v3 ? void 0 : {
        "wheel": this.wheel,
        "keydown": this.keyDown,
        "input": this.elementChange,
        "focus": this.emitFocus,
        "blur": this.emitBlur,
        "paste": this.onPasteHandler
      },
      onKeydown: this.keyDown,
      onInput: this.elementChange,
      onFocus: this.emitFocus,
      onBlur: this.emitBlur,
      onPaste: this.onPasteHandler,
      ref: setRef(this, "input")
    }), this.$props.inputSuffix && h("span", {
      "class": "k-input-suffix"
    }, [inputSuffix]), showValidationIcon && isValid3 && h(Icon, {
      name: "check",
      attrs: this.v3 ? void 0 : {
        name: "check",
        icon: checkIcon
      },
      icon: checkIcon,
      "class": "k-input-validation-icon"
    }), showValidationIcon && !isValid3 && h(Icon, {
      name: "exclamation-circle",
      attrs: this.v3 ? void 0 : {
        name: "exclamation-circle",
        icon: exclamationCircleIcon
      },
      icon: exclamationCircleIcon,
      "class": "k-input-validation-icon"
    }), showLoadingIcon && h(Icon, {
      name: "loading",
      attrs: this.v3 ? void 0 : {
        name: "loading"
      },
      "class": "k-input-loading-icon"
    }), showClearButton && this.computedValue !== void 0 && this.computedValue !== null && h("span", {
      onClick: this.clearClick,
      on: this.v3 ? void 0 : {
        "click": this.clearClick
      },
      "class": "k-clear-value"
    }, [h(Icon, {
      name: "x",
      attrs: this.v3 ? void 0 : {
        name: "x",
        icon: xIcon
      },
      icon: xIcon
    })]), defaultSlot, this.$props.spinners && h("span", {
      "class": "k-input-spinner k-spin-button",
      onMousedown: this.spinnersWrapperMouseDown,
      on: this.v3 ? void 0 : {
        "mousedown": this.spinnersWrapperMouseDown
      }
    }, [
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "caret-alt-up",
          svgIcon: caretAltUpIcon,
          rounded: null,
          "aria-label": localizationService.toLanguageString(numericIncreaseValue, messages[numericIncreaseValue]),
          title: localizationService.toLanguageString(numericIncreaseValue, messages[numericIncreaseValue])
        },
        tabIndex: -1,
        icon: "caret-alt-up",
        svgIcon: caretAltUpIcon,
        "class": "k-spinner-increase",
        rounded: null,
        "aria-label": localizationService.toLanguageString(numericIncreaseValue, messages[numericIncreaseValue]),
        title: localizationService.toLanguageString(numericIncreaseValue, messages[numericIncreaseValue]),
        onClick: this.increase,
        on: this.v3 ? void 0 : {
          "click": this.increase
        }
      }),
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "caret-alt-down",
          svgIcon: caretAltDownIcon,
          rounded: null,
          "aria-label": localizationService.toLanguageString(numericDecreaseValue, messages[numericDecreaseValue]),
          title: localizationService.toLanguageString(numericDecreaseValue, messages[numericDecreaseValue])
        },
        tabIndex: -1,
        "class": "k-spinner-decrease",
        icon: "caret-alt-down",
        svgIcon: caretAltDownIcon,
        rounded: null,
        "aria-label": localizationService.toLanguageString(numericDecreaseValue, messages[numericDecreaseValue]),
        title: localizationService.toLanguageString(numericDecreaseValue, messages[numericDecreaseValue]),
        onClick: this.decrease,
        on: this.v3 ? void 0 : {
          "click": this.decrease
        }
      })
    ])]);
    return this.$props.label ? h("span", {
      "class": this.spanClassNames,
      onFocusin: this.handleFocus,
      on: this.v3 ? void 0 : {
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusout: this.handleBlur,
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      }
    }, [numerictextbox, this.$props.label ? inputId ? h("label", {
      "for": inputId,
      attrs: this.v3 ? void 0 : {
        "for": inputId
      },
      "class": "k-label"
    }, [this.$props.label]) : h("span", {
      "class": "k-label"
    }, [this.$props.label]) : null]) : numerictextbox;
  }
};
var NumericTextBox = NumericTextBoxVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/maskedtextbox/parsing/result.js
var ResultType;
(function(ResultType3) {
  ResultType3[ResultType3["Literal"] = 0] = "Literal";
  ResultType3[ResultType3["Mask"] = 1] = "Mask";
  ResultType3[ResultType3["Undefined"] = 2] = "Undefined";
})(ResultType || (ResultType = {}));
var Result = (
  /** @class */
  function() {
    function Result3(value2, rest, type) {
      if (type === void 0) {
        type = ResultType.Undefined;
      }
      this.value = value2;
      this.rest = rest;
      this.type = type;
    }
    Result3.prototype.map = function(fn) {
      return new Result3(fn(this.value), this.rest);
    };
    Result3.prototype.chain = function(fn) {
      return fn(this.value, this.rest);
    };
    Result3.prototype.fold = function(s, _) {
      return s(this.value, this.rest);
    };
    Result3.prototype.concat = function(r) {
      return this.map(function(vs, _) {
        return r.chain(function(v, __) {
          return vs.concat([v]);
        });
      });
    };
    Result3.prototype.toString = function() {
      return "Result({ value: '".concat(this.value, "', rest: ").concat(this.rest, " })");
    };
    return Result3;
  }()
);

// node_modules/@progress/kendo-vue-inputs/dist/es/maskedtextbox/parsing/stream.js
var Stream = (
  /** @class */
  function() {
    function Stream3(input, control) {
      if (input === void 0) {
        input = [];
      }
      if (control === void 0) {
        control = [];
      }
      this.input = input;
      this.control = control;
      this.inputCursor = 0;
      this.controlCursor = 0;
    }
    Stream3.prototype.eof = function() {
      return this.inputCursor >= this.input.length;
    };
    Stream3.prototype.next = function() {
      return {
        char: this.input[this.inputCursor++],
        control: this.control[this.controlCursor++]
      };
    };
    Stream3.prototype.peek = function() {
      return {
        char: this.input[this.inputCursor],
        control: this.control[this.controlCursor]
      };
    };
    Stream3.prototype.eat_input = function() {
      this.inputCursor++;
    };
    Stream3.prototype.eat_control = function() {
      this.controlCursor++;
    };
    Stream3.prototype.eat = function() {
      this.inputCursor++;
      this.controlCursor++;
    };
    return Stream3;
  }()
);

// node_modules/@progress/kendo-vue-inputs/dist/es/maskedtextbox/parsing/parsers.js
var toArray = function(value2) {
  return (value2 || "").split("");
};
var ESCAPE_CHARACTER = "\\";
var Parser = (
  /** @class */
  function() {
    function Parser3(parse) {
      this.parse = parse;
    }
    Parser3.prototype.run = function(input, control) {
      if (control === void 0) {
        control = "";
      }
      if (input instanceof Stream) {
        return this.parse(input);
      } else {
        return this.parse(new Stream(toArray(input), toArray(control)));
      }
    };
    Parser3.prototype.map = function(f) {
      var _this = this;
      return new Parser3(function(stream) {
        return _this.parse(stream).map(f);
      });
    };
    Parser3.prototype.chain = function(f) {
      var _this = this;
      return new Parser3(function(stream) {
        return _this.parse(stream).chain(function(v, s) {
          return f(v).run(s);
        });
      });
    };
    Parser3.prototype.isLiteral = function(c) {
      return this.run(c).type === ResultType.Literal;
    };
    return Parser3;
  }()
);
var mask = function(_a3) {
  var prompt2 = _a3.prompt, promptPlaceholder2 = _a3.promptPlaceholder;
  return function(rule) {
    return new Parser(function(stream) {
      while (!stream.eof()) {
        var _a4 = stream.peek(), char = _a4.char, control = _a4.control;
        if (char === control && control === prompt2) {
          stream.eat();
          return new Result(prompt2, stream, ResultType.Mask);
        }
        if (rule.test(char)) {
          stream.eat();
          return new Result(char, stream, ResultType.Mask);
        }
        if (char === promptPlaceholder2) {
          stream.eat();
          return new Result(prompt2, stream, ResultType.Mask);
        }
        stream.eat_input();
      }
      stream.eat();
      return new Result(prompt2, stream, ResultType.Mask);
    });
  };
};
var literal = function(_token) {
  return new Parser(function(stream) {
    var char = stream.peek().char;
    if (char === _token) {
      stream.eat();
      return new Result(_token, stream, ResultType.Literal);
    }
    return new Result(_token, stream, ResultType.Literal);
  });
};
var unmask = function(prompt2) {
  return function(rule) {
    return new Parser(function(stream) {
      while (!stream.eof()) {
        var _a3 = stream.peek(), char = _a3.char, control = _a3.control;
        if (char === prompt2 && control === prompt2) {
          stream.eat();
          return new Result(char, stream);
        }
        if (rule.test(char)) {
          stream.eat();
          return new Result(char, stream);
        }
        stream.eat_input();
      }
      stream.eat();
      return new Result("", stream);
    });
  };
};
var unliteral = function(_token) {
  return new Parser(function(stream) {
    if (stream.eof()) {
      return new Result("", stream);
    }
    var char = stream.peek().char;
    if (char === _token) {
      stream.eat();
    }
    return new Result(_token, stream);
  });
};
var token = function(rules2, creator) {
  return new Parser(function(stream) {
    var char = stream.next().char;
    var rule = rules2[char];
    if (char === ESCAPE_CHARACTER) {
      char = stream.next().char;
      return new Result(creator.literal(char), stream);
    }
    if (!rule) {
      return new Result(creator.literal(char), stream);
    }
    return new Result(creator.mask(rule), stream);
  });
};
var rawMask = function(_a3) {
  var prompt2 = _a3.prompt, promptPlaceholder2 = _a3.promptPlaceholder;
  return new Parser(function(stream) {
    var char = stream.next().char;
    if (char === prompt2) {
      return new Result(promptPlaceholder2, stream);
    }
    return new Result(char, stream);
  });
};
var rawLiteral = function(includeLiterals2) {
  return new Parser(function(stream) {
    var char = stream.next().char;
    if (includeLiterals2) {
      return new Result(char, stream);
    }
    return new Result("", stream);
  });
};

// node_modules/@progress/kendo-vue-inputs/dist/es/maskedtextbox/parsing/combinators.js
var always = function(value2) {
  return new Parser(function(stream) {
    return new Result(value2, stream);
  });
};
var append = function(p1, p2) {
  return p1.chain(function(vs) {
    return p2.map(function(v) {
      return vs.concat([v]);
    });
  });
};
var sequence = function(list) {
  return list.reduce(function(acc, parser) {
    return append(acc, parser);
  }, always([]));
};
var greedy = function(parser) {
  return new Parser(function(stream) {
    var result = new Result([], stream);
    while (!stream.eof()) {
      result = result.concat(parser.run(stream));
    }
    return result;
  });
};

// node_modules/@progress/kendo-vue-inputs/dist/es/maskedtextbox/masking.service.js
var MaskingService = (
  /** @class */
  function() {
    function MaskingService3() {
      this.rules = {};
      this.prompt = "_";
      this.mask = "";
      this.promptPlaceholder = " ";
      this.includeLiterals = false;
      this.maskTokens = [];
      this.unmaskTokens = [];
      this.rawTokens = [];
      this.validationTokens = [];
    }
    MaskingService3.prototype.update = function(_a3) {
      var _b = _a3.mask, mask4 = _b === void 0 ? "" : _b, _c = _a3.prompt, prompt2 = _c === void 0 ? "" : _c, _d = _a3.promptPlaceholder, promptPlaceholder2 = _d === void 0 ? " " : _d, _e = _a3.rules, rules2 = _e === void 0 ? {} : _e, _f = _a3.includeLiterals, includeLiterals2 = _f === void 0 ? false : _f;
      this.mask = mask4;
      this.prompt = prompt2;
      this.promptPlaceholder = promptPlaceholder2;
      this.rules = rules2;
      this.includeLiterals = includeLiterals2;
      this.tokenize();
    };
    MaskingService3.prototype.validationValue = function(maskedValue) {
      if (maskedValue === void 0) {
        maskedValue = "";
      }
      var value2 = maskedValue;
      sequence(this.validationTokens).run(maskedValue).fold(function(unmasked) {
        value2 = unmasked.join("");
      });
      return value2;
    };
    MaskingService3.prototype.rawValue = function(maskedValue) {
      if (maskedValue === void 0) {
        maskedValue = "";
      }
      var value2 = maskedValue;
      if (!this.rawTokens.length) {
        return value2;
      }
      sequence(this.rawTokens).run(maskedValue).fold(function(unmasked) {
        value2 = unmasked.join("");
      });
      return value2;
    };
    MaskingService3.prototype.maskRaw = function(rawValue2) {
      if (rawValue2 === void 0) {
        rawValue2 = "";
      }
      var value2 = rawValue2;
      if (!this.maskTokens.length) {
        return value2;
      }
      sequence(this.maskTokens).run(rawValue2).fold(function(masked) {
        value2 = masked.join("");
      });
      return value2;
    };
    MaskingService3.prototype.maskInput = function(input, control, splitPoint) {
      if (input.length < control.length) {
        return this.maskRemoved(input, control, splitPoint);
      }
      return this.maskInserted(input, control, splitPoint);
    };
    MaskingService3.prototype.maskInRange = function(pasted, oldValue, start, end) {
      var value2 = "";
      var selection2 = end;
      var beforeChange = oldValue.split("").slice(0, start);
      var afterChange = oldValue.split("").slice(end);
      sequence(this.maskTokens.slice(start, end)).run(pasted).fold(function(masked) {
        value2 = beforeChange.concat(masked).concat(afterChange).join("");
      });
      return {
        selection: selection2,
        value: value2
      };
    };
    MaskingService3.prototype.maskRemoved = function(input, control, splitPoint) {
      var _this = this;
      var value2 = "";
      var selection2 = splitPoint;
      var unchanged = input.split("").slice(splitPoint);
      var changed = input.split("").slice(0, splitPoint).join("");
      var take = this.maskTokens.length - (input.length - splitPoint);
      sequence(this.maskTokens.slice(0, take)).run(changed, control).fold(function(masked) {
        selection2 = _this.adjustPosition(masked, selection2);
        value2 = masked.concat(unchanged).join("");
      });
      return {
        selection: selection2,
        value: value2
      };
    };
    MaskingService3.prototype.adjustPosition = function(input, selection2) {
      var caretChar = input[selection2];
      var isLiteral = this.maskTokens[selection2].isLiteral(caretChar);
      if (!isLiteral && caretChar !== this.prompt) {
        return selection2 + 1;
      }
      return selection2;
    };
    MaskingService3.prototype.maskInserted = function(input, control, splitPoint) {
      var _this = this;
      var value2 = "";
      var selection2 = splitPoint;
      var changed = input.slice(0, splitPoint);
      sequence(this.unmaskTokens).run(changed, control).chain(function(unmasked) {
        selection2 = unmasked.join("").length;
        var unchanged = control.slice(selection2);
        return sequence(_this.maskTokens).run(unmasked.join("") + unchanged, control);
      }).fold(function(masked) {
        value2 = masked.join("");
      });
      return {
        selection: selection2,
        value: value2
      };
    };
    Object.defineProperty(MaskingService3.prototype, "maskTokenCreator", {
      get: function() {
        var _a3 = this, prompt2 = _a3.prompt, promptPlaceholder2 = _a3.promptPlaceholder;
        return {
          literal: function(rule) {
            return literal(rule);
          },
          mask: function(rule) {
            return mask({ prompt: prompt2, promptPlaceholder: promptPlaceholder2 })(rule);
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MaskingService3.prototype, "unmaskTokenCreator", {
      get: function() {
        var _this = this;
        return {
          literal: function(rule) {
            return unliteral(rule);
          },
          mask: function(rule) {
            return unmask(_this.prompt)(rule);
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MaskingService3.prototype, "rawTokenCreator", {
      get: function() {
        var _a3 = this, prompt2 = _a3.prompt, promptPlaceholder2 = _a3.promptPlaceholder, includeLiterals2 = _a3.includeLiterals;
        return {
          literal: function(_) {
            return rawLiteral(includeLiterals2);
          },
          mask: function(_) {
            return rawMask({ prompt: prompt2, promptPlaceholder: promptPlaceholder2 });
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MaskingService3.prototype, "validationTokenCreator", {
      get: function() {
        var prompt2 = this.prompt;
        return {
          literal: function(_) {
            return rawLiteral(false);
          },
          mask: function(_) {
            return rawMask({ prompt: prompt2, promptPlaceholder: "" });
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MaskingService3.prototype.tokenize = function() {
      var _this = this;
      greedy(token(this.rules, this.maskTokenCreator)).run(this.mask).fold(function(tokens, _) {
        _this.maskTokens = tokens;
      });
      greedy(token(this.rules, this.unmaskTokenCreator)).run(this.mask).fold(function(tokens, _) {
        _this.unmaskTokens = tokens;
      });
      greedy(token(this.rules, this.rawTokenCreator)).run(this.mask).fold(function(tokens, _) {
        _this.rawTokens = tokens;
      });
      greedy(token(this.rules, this.validationTokenCreator)).run(this.mask).fold(function(tokens, _) {
        _this.validationTokens = tokens;
      });
    };
    return MaskingService3;
  }()
);

// node_modules/@progress/kendo-vue-inputs/dist/es/maskedtextbox/utils.js
var defaultRules = {
  "#": /[\d\s\+\-]/,
  "&": /[\S]/,
  "0": /[\d]/,
  "9": /[\d\s]/,
  "?": /[a-zA-Z\s]/,
  "A": /[a-zA-Z0-9]/,
  "C": /./,
  "L": /[a-zA-Z]/,
  "a": /[a-zA-Z0-9\s]/
};
var returnFalse = function() {
  return false;
};
var maskingChanged = function(prev, next) {
  return prev.includeLiterals !== next.includeLiterals || prev.mask !== next.mask || prev.prompt !== next.prompt || prev.promptPlaceholder !== next.promptPlaceholder || !sameRules(prev.rules, next.rules);
};
var sameRules = function(rules1, rules2) {
  if (!!rules1 !== !!rules2) {
    return false;
  }
  if (rules1 === rules2 || (!rules1 || !rules2)) {
    return true;
  }
  var same = true;
  for (var key in rules1) {
    if (rules1[key] !== rules2[key]) {
      same = false;
      break;
    }
  }
  if (same) {
    for (var key in rules2) {
      if (!rules1.hasOwnProperty(key)) {
        same = false;
        break;
      }
    }
  }
  return same;
};

// node_modules/@progress/kendo-vue-inputs/dist/es/maskedtextbox/MaskedTextBox.js
var allVue20 = vue_runtime_esm_bundler_exports;
var gh19 = allVue20.h;
var isV320 = allVue20.version && allVue20.version[0] === "3";
var ref4 = allVue20.ref;
var MaskedTextBoxVue2 = {
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: ["change", "focus", "blur", "update:modelValue", "update:modelRawValue", "changemodel"],
  props: {
    type: {
      type: String,
      default: "text"
    },
    modelValue: String,
    modelRawValue: String,
    value: String,
    defaultValue: String,
    placeholder: String,
    title: String,
    dir: String,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    tabIndex: Number,
    accessKey: String,
    disabled: Boolean,
    readonly: Boolean,
    size: {
      type: String,
      default: "medium",
      validator: function validator18(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator19(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator20(value2) {
        return [null, "solid", "flat", "outline"].includes(value2);
      }
    },
    prompt: {
      type: String,
      default: "_"
    },
    promptPlaceholder: {
      type: String,
      default: " "
    },
    includeLiterals: {
      type: Boolean,
      default: false
    },
    maskValidation: {
      type: Boolean,
      default: true
    },
    mask: String,
    rules: {
      type: Object,
      default: function _default8() {
        return defaultRules;
      }
    },
    selection: Object,
    name: String,
    label: String,
    validationMessage: String,
    required: {
      type: Boolean,
      default: false
    },
    valid: {
      type: Boolean,
      default: void 0
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    iconName: String,
    inputPrefix: templateDefinition,
    inputSuffix: templateDefinition,
    showValidationIcon: Boolean,
    showLoadingIcon: Boolean,
    showClearButton: Boolean,
    inputClass: String,
    wrapperClass: String
  },
  data: function data11() {
    return {
      currentValue: void 0,
      currentFocused: false,
      inputValue: void 0,
      currentSelection: [null, null]
    };
  },
  created: function created12() {
    validatePackage(packageMetadata);
    this.hasMounted = false;
    this.valueDuringOnChange = void 0;
    this.inputId = "k-".concat(guid());
    this.service = new MaskingService();
    this.isPasted = false;
  },
  // @ts-ignore
  setup: !isV320 ? void 0 : function() {
    var v3 = !!isV320;
    var inputRef = ref4(null);
    return {
      v3,
      inputRef
    };
  },
  mounted: function mounted11() {
    this.hasMounted = true;
    this.element = this.input = this.v3 ? this.inputRef : this.$refs.input;
    this.updateService();
    this.setValidity();
  },
  watch: {
    currentFocused: function currentFocused(_, oldValue) {
      this.prevCurrentFocused = oldValue;
    },
    selection: function selection(_, oldValue) {
      this.prevSelection = oldValue;
    },
    includeLiterals: function includeLiterals(_, oldValue) {
      this.prevIncludeLiterals = oldValue;
    },
    mask: function mask2(_, oldValue) {
      this.prevMask = oldValue;
    },
    prompt: function prompt(_, oldValue) {
      this.prevPrompt = oldValue;
    },
    promptPlaceholder: function promptPlaceholder(_, oldValue) {
      this.prevPromptPlaceholder = oldValue;
    },
    rules: function rules(_, oldValue) {
      this.prevRules = oldValue;
    }
  },
  updated: function updated9() {
    if (this.element && this.currentFocused) {
      var _a3 = this.currentSelection, start = _a3[0], end = _a3[1];
      var prevSelection = this.prevSelection;
      var nextSelection = this.$props.selection;
      if (!prevSelection && nextSelection || prevSelection && nextSelection && (prevSelection.start !== nextSelection.start || prevSelection.end !== nextSelection.end)) {
        start = nextSelection.start;
        end = nextSelection.end;
      }
      if (start !== null && end !== null) {
        this.element.setSelectionRange(start, end);
      }
    }
    var prevProps = {
      includeLiterals: this.prevIncludeLiterals,
      mask: this.prevMask,
      prompt: this.prevPrompt,
      promptPlaceholder: this.prevPromptPlaceholder,
      rules: this.prevRules
    };
    if (maskingChanged(prevProps, this.$props)) {
      this.updateService();
    }
    this.setValidity();
  },
  computed: {
    computedRules: {
      get: function get8() {
        return Object.assign({}, defaultRules, this.$props.rules);
      }
    },
    spanClassNames: {
      get: function get9() {
        var _a3;
        var isValid3 = !this.hasMounted || !this.$props.validityStyles || this.validity().valid;
        return _a3 = {
          "k-floating-label-container": true,
          "k-focus": this.currentFocused,
          "k-empty": !this.computedValue(),
          "k-invalid": !isValid3 && isValid3 !== void 0,
          "k-rtl": this.$props.dir === "rtl",
          "k-loading": this.showLoadingIcon
        }, _a3[this.wrapperClass] = this.wrapperClass, _a3;
      }
    },
    wrapperSpanClass: function wrapperSpanClass() {
      var _a3;
      var _b = this.$props, size2 = _b.size, fillMode = _b.fillMode, rounded = _b.rounded;
      var isValid3 = !this.$props.validityStyles || this.validity().valid;
      return _a3 = {
        "k-maskedtextbox": true,
        "k-input": true
      }, _a3["k-input-".concat(kendoThemeMaps.sizeMap[size2] || size2)] = size2, _a3["k-input-".concat(fillMode)] = fillMode, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a3["k-invalid"] = !isValid3, _a3["k-required"] = this.required, _a3["k-disabled"] = this.$props.disabled, _a3["k-loading"] = this.showLoadingIcon, _a3[this.wrapperClass] = this.wrapperClass, _a3;
    },
    inputInnerClass: function inputInnerClass4() {
      var _a3;
      return _a3 = {
        "k-input-inner": true
      }, _a3[this.inputClass] = this.inputClass, _a3;
    }
  },
  methods: {
    focus: function focus8() {
      if (this.input) {
        this.input.focus();
      }
    },
    computedValue: function computedValue4() {
      var value2;
      if (this.valueDuringOnChange !== void 0) {
        value2 = this.valueDuringOnChange;
      } else if (this.$props.value !== void 0) {
        value2 = this.$props.value;
      } else if (this.$props.modelValue !== void 0) {
        value2 = this.$props.modelValue;
      } else if (this.currentValue !== void 0) {
        value2 = this.currentValue;
      } else if (this.$props.defaultValue !== void 0) {
        value2 = this.$props.defaultValue;
      }
      return value2 || "";
    },
    rawValue: function rawValue() {
      return this.service.rawValue(this.computedValue());
    },
    validity: function validity5() {
      var maskedValue = this.computedValue();
      var value2 = this.service.validationValue(maskedValue);
      var customError = this.$props.validationMessage !== void 0;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : (!this.$props.required || !!value2) && (!this.$props.maskValidation || !this.$props.prompt || maskedValue.indexOf(this.$props.prompt) === -1);
      return {
        customError,
        valid,
        valueMissing: !value2
      };
    },
    pasteHandler: function pasteHandler(event) {
      var _a3 = event.target, selectionStart = _a3.selectionStart, selectionEnd = _a3.selectionEnd;
      if (selectionEnd === selectionStart) {
        return;
      }
      this.isPasted = true;
      this.currentSelection = [selectionStart || 0, selectionEnd || 0];
    },
    clearClick: function clearClick4(event) {
      this.triggerOnChange("", event);
    },
    onChangeHandler: function onChangeHandler2(event) {
      var input = event.currentTarget;
      var value2 = this.inputValue = input.value;
      var start = this.currentSelection[0] || 0;
      var end = this.currentSelection[1] || 0;
      if (!this.$props.mask) {
        this.isPasted = false;
        this.currentSelection = [null, null];
        this.triggerOnChange(value2, event);
        return;
      }
      var maskedValue = this.computedValue();
      var result;
      if (this.isPasted) {
        this.isPasted = false;
        var rightPart = maskedValue.length - end;
        var to = value2.length - rightPart;
        result = this.service.maskInRange(value2.slice(start, to), maskedValue, start, end);
      } else {
        result = this.service.maskInput(value2, maskedValue, input.selectionStart || 0);
      }
      this.currentSelection = [result.selection, result.selection];
      this.triggerOnChange(result.value, event);
      this.inputValue = void 0;
    },
    focusHandler: function focusHandler(event) {
      if (!this.currentFocused) {
        this.currentFocused = true;
        this.$emit("focus", {
          target: this,
          event
        });
      }
    },
    blurHandler: function blurHandler(event) {
      if (this.currentFocused) {
        this.currentFocused = false;
        this.$emit("blur", {
          target: this,
          event
        });
      }
    },
    triggerOnChange: function triggerOnChange(maskedValue, event) {
      this.currentValue = maskedValue;
      this.valueDuringOnChange = maskedValue;
      this.$emit("change", {
        event,
        selectionStart: this.currentSelection[0],
        selectionEnd: this.currentSelection[1],
        value: this.computedValue(),
        component: this,
        target: {
          name: this.$props.name,
          value: this.computedValue(),
          rawValue: this.rawValue()
        },
        validity: this.validity()
      });
      this.$emit("update:modelValue", this.computedValue());
      this.$emit("update:modelRawValue", this.rawValue());
      this.$emit("changemodel", this.computedValue());
      this.valueDuringOnChange = void 0;
    },
    updateService: function updateService(extra) {
      var config = Object.assign({
        includeLiterals: this.$props.includeLiterals,
        mask: this.$props.mask,
        prompt: this.$props.prompt,
        promptPlaceholder: this.$props.promptPlaceholder,
        rules: this.$props.rules
      }, extra);
      this.service.update(config);
    },
    setValidity: function setValidity5() {
      if (this.element) {
        this.element.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage || "");
      }
    }
  },
  // @ts-ignore
  render: function render19(createElement) {
    var h = gh19 || createElement;
    var inputId = this.$props.id || this.inputId;
    var _a3 = this.$props, iconName = _a3.iconName, showValidationIcon = _a3.showValidationIcon, showLoadingIcon = _a3.showLoadingIcon, showClearButton = _a3.showClearButton;
    var isValid3 = !this.$props.validityStyles || this.validity().valid;
    var newValue = this.computedValue();
    var inputValue = this.inputValue;
    var inputPrefixTemplate = templateRendering.call(this, this.$props.inputPrefix, getListeners.call(this));
    var inputSuffixTemplate = templateRendering.call(this, this.$props.inputSuffix, getListeners.call(this));
    var inputPrefix = getTemplate.call(this, {
      h,
      template: inputPrefixTemplate,
      additionalProps: {
        value: newValue,
        valid: isValid3
      }
    });
    var inputSuffix = getTemplate.call(this, {
      h,
      template: inputSuffixTemplate,
      additionalProps: {
        value: newValue,
        valid: isValid3
      }
    });
    var wrapper = h("span", {
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      },
      "class": this.wrapperSpanClass,
      style: !this.$props.label ? {
        width: this.$props.width
      } : void 0
    }, [iconName && h(Icon, {
      name: iconName,
      attrs: this.v3 ? void 0 : {
        name: iconName
      },
      "class": "k-input-icon"
    }), this.$props.inputPrefix && h("span", {
      "class": "k-input-prefix"
    }, [inputPrefix]), h("input", {
      type: this.$props.type,
      attrs: this.v3 ? void 0 : {
        type: this.$props.type,
        autocomplete: "off",
        autocorrect: "off",
        autocapitalize: "off",
        spellcheck: false,
        id: inputId,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        "aria-disabled": this.$props.disabled,
        name: this.$props.name,
        tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled, true),
        accesskey: this.$props.accessKey,
        title: this.$props.title,
        disabled: this.$props.disabled || void 0,
        readonly: this.$props.readonly || void 0,
        placeholder: this.$props.placeholder,
        "aria-placeholder": this.$props.placeholder,
        required: this.$props.required
      },
      autocomplete: "off",
      autocorrect: "off",
      autocapitalize: "off",
      spellcheck: false,
      "class": this.inputInnerClass,
      value: this.v3 ? newValue : null,
      domProps: this.v3 ? void 0 : {
        "value": newValue
      },
      id: inputId,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      "aria-disabled": this.$props.disabled,
      name: this.$props.name,
      tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled, true),
      accesskey: this.$props.accessKey,
      title: this.$props.title,
      disabled: this.$props.disabled || void 0,
      readonly: this.$props.readonly || void 0,
      placeholder: this.$props.placeholder,
      "aria-placeholder": this.$props.placeholder,
      required: this.$props.required,
      ref: setRef(this, "input"),
      onInput: this.onChangeHandler,
      on: this.v3 ? void 0 : {
        "input": this.onChangeHandler,
        "paste": this.pasteHandler,
        "focus": this.focusHandler,
        "blur": this.blurHandler,
        "dragstart": returnFalse,
        "drop": returnFalse
      },
      onPaste: this.pasteHandler,
      onFocus: this.focusHandler,
      onBlur: this.blurHandler,
      onDragstart: returnFalse,
      onDrop: returnFalse
    }), this.$props.inputSuffix && h("span", {
      "class": "k-input-suffix"
    }, [inputSuffix]), showValidationIcon && isValid3 && h(Icon, {
      name: "check",
      attrs: this.v3 ? void 0 : {
        name: "check",
        icon: checkIcon
      },
      icon: checkIcon,
      "class": "k-input-validation-icon"
    }), showValidationIcon && !isValid3 && h(Icon, {
      name: "exclamation-circle",
      attrs: this.v3 ? void 0 : {
        name: "exclamation-circle",
        icon: exclamationCircleIcon
      },
      icon: exclamationCircleIcon,
      "class": "k-input-validation-icon"
    }), showLoadingIcon && h(Icon, {
      name: "loading",
      attrs: this.v3 ? void 0 : {
        name: "loading"
      },
      "class": "k-input-loading-icon"
    }), showClearButton && newValue && h("span", {
      onClick: this.clearClick,
      on: this.v3 ? void 0 : {
        "click": this.clearClick
      },
      "class": "k-clear-value"
    }, [h(Icon, {
      name: "x",
      attrs: this.v3 ? void 0 : {
        name: "x",
        icon: xIcon
      },
      icon: xIcon
    })])]);
    return this.$props.label ? h("span", {
      "class": this.spanClassNames,
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      }
    }, [wrapper, this.$props.label ? inputId ? h("label", {
      "for": inputId,
      attrs: this.v3 ? void 0 : {
        "for": inputId
      },
      "class": "k-label"
    }, [this.$props.label]) : h("span", {
      "class": "k-label"
    }, [this.$props.label]) : null]) : wrapper;
  }
};
var MaskedTextBox = MaskedTextBoxVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/slider/SliderLabel.js
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
var allVue21 = vue_runtime_esm_bundler_exports;
var gh20 = allVue21.h;
var isV321 = allVue21.version && allVue21.version[0] === "3";
var ref5 = allVue21.ref;
var SLIDER_LABEL_ATTRIBUTE = "data-slider-label";
var SliderLabelVue2 = {
  name: "KendoSliderLabel",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    position: Number,
    title: String,
    vertical: Boolean
  },
  data: function data12() {
    return {
      currentDir: "ltr"
    };
  },
  inject: ["kendoMax", "kendoMin", "kendoVertical"],
  mounted: function mounted12() {
    this.sliderLabelRef = this.$refs.sliderLabelRef;
    if (!this.currentDir && window && this.$el) {
      var direction = window.getComputedStyle(this.$el).direction;
      if (direction) {
        this.currentDir = direction;
      }
    }
  },
  // @ts-ignore
  setup: !isV321 ? void 0 : function() {
    var v3 = !!isV321;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render20(createElement) {
    var _a3;
    var h = gh20 || createElement;
    var dir = this.currentDir;
    var defaultSlot = getDefaultSlots(this);
    var position = 100 * (this.$props.position - this.kendoMin) / (this.kendoMax - this.kendoMin);
    var vertical = this.kendoVertical;
    var style = vertical ? {
      bottom: "".concat(position, "%"),
      height: "1px",
      width: "100%"
    } : (_a3 = {}, _a3[dir === "rtl" ? "right" : "left"] = "".concat(position, "%"), _a3.width = "1px", _a3.height = "100%", _a3);
    return h("li", {
      ref: "sliderLabelRef",
      "class": "k-tick k-tick-large",
      title: this.$props.title,
      attrs: this.v3 ? void 0 : {
        title: this.$props.title
      },
      style: __assign10({
        zIndex: 1,
        position: "absolute"
      }, style)
    }, [h("span", {
      "data-slider-label": true,
      attrs: this.v3 ? void 0 : {
        "data-slider-label": true
      },
      "class": "k-label",
      onClick: this.onClick,
      on: this.v3 ? void 0 : {
        "click": this.onClick
      }
    }, [defaultSlot])]);
  },
  methods: {
    onClick: function onClick(event) {
      this.$emit("click", event);
    }
  }
};
var SliderLabel = SliderLabelVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/slider/Slider.js
var allVue22 = vue_runtime_esm_bundler_exports;
var gh21 = allVue22.h;
var isV322 = allVue22.version && allVue22.version[0] === "3";
var ref6 = allVue22.ref;
var inject2 = allVue22.inject;
var SliderVue2 = {
  name: "KendoSlider",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "changemodel": null,
    "update:modelValue": null,
    "change": null,
    "blur": null,
    "focus": null
  },
  props: {
    modelValue: {
      type: Number,
      default: void 0
    },
    defaultValue: {
      type: Number,
      default: void 0
    },
    name: String,
    buttons: Boolean,
    tabIndex: Number,
    disabled: Boolean,
    dir: String,
    step: Number,
    min: {
      type: Number,
      required: true
    },
    max: {
      type: Number,
      required: true
    },
    value: Number,
    vertical: Boolean,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  provide: function provide() {
    return {
      kendoMin: this.$props.min,
      kendoMax: this.$props.max,
      kendoVertical: this.$props.vertical
    };
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data13() {
    return {
      currentValue: void 0,
      currentFocused: false,
      currentDir: "ltr"
    };
  },
  computed: {
    computedValue: function computedValue5() {
      var value2 = this.$props.value !== void 0 ? this.$props.value : this.currentValue;
      var _a3 = this.$props, min = _a3.min, max = _a3.max;
      return value2 === void 0 ? value2 : Math.min(Math.max(value2, min), max);
    },
    sliderTrack: function sliderTrack() {
      return this._sliderTrack;
    }
  },
  created: function created13() {
    validatePackage(packageMetadata);
    if (this.$props.value !== void 0) {
      this.$data.currentValue = this.$props.value;
    } else if (this.$props.modelValue !== void 0) {
      this.$data.currentValue = this.$props.modelValue;
    } else if (this.$props.defaultValue !== void 0) {
      this.$data.currentValue = this.$props.defaultValue;
    } else {
      this.$data.currentValue = this.$props.min;
    }
    this.currentFocused = false;
    this.currentDir = this.$props.dir;
  },
  mounted: function mounted13() {
    this._sliderTrack = this.$refs.sliderTrack;
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
    if (!this.currentDir && window && this.$el) {
      var direction = window.getComputedStyle(this.$el).direction;
      if (direction) {
        this.currentDir = direction;
      }
    }
  },
  updated: function updated10() {
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
  },
  // @ts-ignore
  setup: !isV322 ? void 0 : function() {
    var v3 = !!isV322;
    var inputRef = ref6(null);
    var kendoLocalizationService = inject2("kendoLocalizationService", {});
    return {
      v3,
      inputRef,
      kendoLocalizationService
    };
  },
  render: function render21(createElement) {
    var _this = this;
    var _a3;
    var h = gh21 || createElement;
    var lS = provideLocalizationService(this);
    var percentValue = (this.computedValue - this.$props.min) / (this.$props.max - this.$props.min) * 100;
    var defaultSlot = getDefaultSlots(this);
    var vertical = this.$props.vertical;
    var increaseSvgArrow = this.currentDir === "rtl" ? vertical ? caretAltUpIcon : caretAltLeftIcon : vertical ? caretAltUpIcon : caretAltRightIcon;
    var decreaseSvgArrow = this.currentDir === "rtl" ? vertical ? caretAltDownIcon : caretAltRightIcon : vertical ? caretAltDownIcon : caretAltLeftIcon;
    var increaseFontArrow = this.currentDir === "rtl" ? vertical ? "caret-alt-up" : "caret-alt-left" : vertical ? "caret-alt-up" : "caret-alt-right";
    var decreaseFontArrow = this.currentDir === "rtl" ? vertical ? "caret-alt-down" : "caret-alt-right" : vertical ? "caret-alt-down" : "caret-alt-left";
    return h("div", {
      dir: this.currentDir,
      attrs: this.v3 ? void 0 : {
        dir: this.currentDir,
        id: this.$props.id
      },
      id: this.$props.id,
      style: this.$props.style,
      onFocus: this.onFocus,
      on: this.v3 ? void 0 : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "keydown": this.onKeyDown
      },
      onBlur: this.onBlur,
      onKeydown: this.onKeyDown,
      "class": classNames("k-slider", {
        "k-focus": this.currentFocused,
        "k-disabled": this.$props.disabled,
        "k-slider-horizontal": !this.$props.vertical,
        "k-slider-vertical": this.$props.vertical
      }, this.$props.className)
    }, [h("div", {
      "class": classNames("k-slider-wrap")
    }, [
      this.$props.buttons && // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabindex: -1,
          icon: decreaseFontArrow,
          svgIcon: decreaseSvgArrow,
          rounded: "full",
          title: lS.toLanguageString(sliderDecreaseValue, messages[sliderDecreaseValue])
        },
        tabindex: -1,
        icon: decreaseFontArrow,
        svgIcon: decreaseSvgArrow,
        style: {
          position: "relative"
        },
        rounded: "full",
        "class": "k-button-decrease",
        title: lS.toLanguageString(sliderDecreaseValue, messages[sliderDecreaseValue]),
        onClick: this.decrement,
        on: this.v3 ? void 0 : {
          "click": this.decrement
        }
      }),
      // @ts-ignore  function children
      h(Draggable, {
        onDrag: this.dragOver,
        on: this.v3 ? void 0 : {
          "drag": this.dragOver,
          "press": this.dragStart
        },
        onPress: this.dragStart,
        ref: "draggable"
      }, this.v3 ? function() {
        return [h("div", {
          "class": "k-slider-track-wrap",
          style: {
            touchAction: "none"
          }
        }, [defaultSlot && h("ul", {
          "class": "k-reset k-slider-items"
        }, [defaultSlot]), h("div", {
          "class": "k-slider-track",
          ref: "sliderTrack"
        }, [h("div", {
          "class": "k-slider-selection",
          style: _this.$props.vertical ? {
            height: percentValue + "%"
          } : {
            width: percentValue + "%"
          }
        }), h("a", {
          "class": "k-draghandle",
          role: "slider",
          attrs: _this.v3 ? void 0 : {
            role: "slider",
            tabIndex: "0",
            "aria-valuenow": _this.computedValue,
            "aria-valuemin": _this.$props.min,
            "aria-valuemax": _this.$props.max,
            "aria-valuetext": _this.computedValue.toString(),
            "aria-disabled": _this.$props.disabled ? "true" : void 0,
            title: lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle])
          },
          tabIndex: "0",
          "aria-valuenow": _this.computedValue,
          "aria-valuemin": _this.$props.min,
          "aria-valuemax": _this.$props.max,
          "aria-valuetext": _this.computedValue.toString(),
          "aria-disabled": _this.$props.disabled ? "true" : void 0,
          title: lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle]),
          style: _this.$props.vertical ? {
            bottom: percentValue + "%",
            zIndex: 1
          } : (_a3 = {}, _a3[_this.currentDir === "rtl" ? "right" : "left"] = percentValue + "%", _a3.zIndex = 1, _a3)
        })])])];
      } : [h("div", {
        "class": "k-slider-track-wrap",
        style: {
          touchAction: "none"
        }
      }, [defaultSlot && h("ul", {
        "class": "k-reset k-slider-items"
      }, [defaultSlot]), h("div", {
        "class": "k-slider-track",
        ref: "sliderTrack"
      }, [h("div", {
        "class": "k-slider-selection",
        style: _this.$props.vertical ? {
          height: percentValue + "%"
        } : {
          width: percentValue + "%"
        }
      }), h("a", {
        "class": "k-draghandle",
        role: "slider",
        attrs: _this.v3 ? void 0 : {
          role: "slider",
          tabIndex: "0",
          "aria-valuenow": _this.computedValue,
          "aria-valuemin": _this.$props.min,
          "aria-valuemax": _this.$props.max,
          "aria-valuetext": _this.computedValue.toString(),
          "aria-disabled": _this.$props.disabled ? "true" : void 0,
          title: lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle])
        },
        tabIndex: "0",
        "aria-valuenow": _this.computedValue,
        "aria-valuemin": _this.$props.min,
        "aria-valuemax": _this.$props.max,
        "aria-valuetext": _this.computedValue.toString(),
        "aria-disabled": _this.$props.disabled ? "true" : void 0,
        title: lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle]),
        style: _this.$props.vertical ? {
          bottom: percentValue + "%",
          zIndex: 1
        } : (_a3 = {}, _a3[_this.currentDir === "rtl" ? "right" : "left"] = percentValue + "%", _a3.zIndex = 1, _a3)
      })])])]),
      this.$props.buttons && // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabindex: -1,
          icon: increaseFontArrow,
          svgIcon: increaseSvgArrow,
          rounded: "full",
          title: lS.toLanguageString(sliderIncreaseValue, messages[sliderIncreaseValue])
        },
        tabindex: -1,
        icon: increaseFontArrow,
        svgIcon: increaseSvgArrow,
        rounded: "full",
        style: {
          position: "relative"
        },
        "class": "k-button-increase",
        title: lS.toLanguageString(sliderIncreaseValue, messages[sliderIncreaseValue]),
        onClick: this.increment,
        on: this.v3 ? void 0 : {
          "click": this.increment
        }
      })
    ])]);
  },
  methods: {
    focus: function focus9() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    isLabel: function isLabel(target) {
      var currentTarget = target;
      while (currentTarget) {
        if (Boolean(currentTarget.getAttribute(SLIDER_LABEL_ATTRIBUTE))) {
          return true;
        }
        currentTarget = currentTarget.parentElement;
      }
      return false;
    },
    onFocus: function onFocus5(event) {
      this.currentFocused = true;
      this.$emit("focus", event);
    },
    onBlur: function onBlur5(event) {
      this.currentFocused = false;
      this.$emit("blur", event);
    },
    onKeyDown: function onKeyDown3(e) {
      var newValue = void 0;
      if (e.keyCode === Keys.left || e.keyCode === Keys.down) {
        newValue = this.currentValue - (this.$props.step || 0);
      } else if (e.keyCode === Keys.right || e.keyCode === Keys.up) {
        newValue = this.currentValue + (this.$props.step || 0);
      } else if (e.keyCode === Keys.home) {
        newValue = this.$props.min;
      } else if (e.keyCode === Keys.end) {
        newValue = this.$props.max;
      }
      if (newValue !== void 0) {
        e.preventDefault();
        this.change(e, newValue);
      }
    },
    decrement: function decrement(e) {
      e.preventDefault();
      this.change(e, this.currentValue - (this.$props.step || 0));
    },
    increment: function increment(e) {
      e.preventDefault();
      this.change(e, this.currentValue + (this.$props.step || 0));
    },
    dragStart: function dragStart(e) {
      if (!this.isLabel(e.originalEvent.target)) {
        if (e.isTouch) {
          e.originalEvent.preventDefault();
        }
        this.drag(e);
      }
    },
    dragOver: function dragOver(e) {
      e.originalEvent.preventDefault();
      this.drag(e);
    },
    drag: function drag2(e) {
      var computed = this.draggable.element.getBoundingClientRect();
      var distance = this.$props.vertical ? computed.bottom - e.clientY : this.currentDir === "rtl" ? computed.right - e.clientX : e.clientX - computed.left;
      var size2 = this.$props.vertical ? computed.height : computed.width;
      var percentage = distance / size2;
      this.change(e, this.$props.min + percentage * (this.$props.max - this.$props.min));
    },
    change: function change(e, value2) {
      value2 = Math.min(Math.max(value2, this.$props.min), this.$props.max);
      this.currentValue = value2;
      this.$emit("changemodel", value2);
      this.$emit("update:modelValue", value2);
      this.$emit("change", {
        event: e,
        value: value2,
        component: this,
        target: {
          name: this.$props.name,
          value: value2
        }
      });
    }
  }
};
var Slider = SliderVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/range-slider/range-raducer.js
var __assign11 = function() {
  __assign11 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign11.apply(this, arguments);
};
var RANGE_ACTION;
(function(RANGE_ACTION2) {
  RANGE_ACTION2["start"] = "start";
  RANGE_ACTION2["end"] = "end";
  RANGE_ACTION2["min"] = "min";
  RANGE_ACTION2["max"] = "max";
  RANGE_ACTION2["increase"] = "increase";
  RANGE_ACTION2["decrease"] = "decrease";
})(RANGE_ACTION || (RANGE_ACTION = {}));
var rangeReducer = function rangeReducer2(state, action) {
  var newState;
  var newValue;
  switch (action.type) {
    case RANGE_ACTION.start:
      if (action.payload === void 0) {
        return state;
      }
      newState = {
        start: action.payload > state.end ? state.end : Math.max(action.payload, action.min),
        end: state.end
      };
      break;
    case RANGE_ACTION.end:
      if (action.payload === void 0) {
        return state;
      }
      newState = {
        start: state.start,
        end: action.payload < state.start ? state.start : Math.min(action.payload, action.max)
      };
      break;
    case RANGE_ACTION.min:
      if (action.key === "start") {
        newState = __assign11(__assign11({}, state), {
          start: action.min
        });
      } else {
        newState = __assign11(__assign11({}, state), {
          end: Math.max(action.min, state.start)
        });
      }
      break;
    case RANGE_ACTION.max:
      if (action.key === "start") {
        newState = __assign11(__assign11({}, state), {
          start: Math.min(action.max, state.end)
        });
      } else {
        newState = __assign11(__assign11({}, state), {
          end: action.max
        });
      }
      break;
    case RANGE_ACTION.increase:
      if (action.step === void 0 || action.key === void 0) {
        return state;
      }
      newValue = state[action.key] + action.step;
      if (action.key === "start") {
        if (newValue < action.min) {
          newState = __assign11(__assign11({}, state), {
            start: action.min
          });
        } else {
          newState = __assign11(__assign11({}, state), {
            start: Math.min(newValue, state.end)
          });
        }
      } else {
        if (newValue > action.max) {
          newState = __assign11(__assign11({}, state), {
            end: action.max
          });
        } else {
          newState = __assign11(__assign11({}, state), {
            end: Math.max(newValue, state.start)
          });
        }
      }
      break;
    case RANGE_ACTION.decrease:
      if (action.step === void 0 || action.key === void 0) {
        return state;
      }
      newValue = state[action.key] - action.step;
      if (action.key === "start") {
        if (newValue < action.min) {
          newState = __assign11(__assign11({}, state), {
            start: action.min
          });
        } else {
          newState = __assign11(__assign11({}, state), {
            start: Math.min(newValue, state.end)
          });
        }
      } else {
        if (newValue > action.max) {
          newState = __assign11(__assign11({}, state), {
            end: action.max
          });
        } else {
          newState = __assign11(__assign11({}, state), {
            end: Math.max(newValue, state.start)
          });
        }
      }
      break;
    default:
      newState = state;
      break;
  }
  return newState;
};

// node_modules/@progress/kendo-vue-inputs/dist/es/range-slider/RangeSlider.js
var __assign12 = function() {
  __assign12 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign12.apply(this, arguments);
};
var allVue23 = vue_runtime_esm_bundler_exports;
var gh22 = allVue23.h;
var isV323 = allVue23.version && allVue23.version[0] === "3";
var ref7 = allVue23.ref;
var inject3 = allVue23.inject;
var RangeSliderVue2 = {
  name: "KendoRangeSlider",
  model: {
    event: "changemodel"
  },
  props: {
    id: String,
    value: {
      type: Object,
      validator: function validator21(value2) {
        return value2.start <= value2.end;
      }
    },
    defaultValue: {
      type: Object,
      default: function _default9() {
        return {
          start: 0,
          end: 0
        };
      },
      validator: function validator22(value2) {
        return value2.start <= value2.end;
      }
    },
    step: {
      type: Number,
      default: 1
    },
    min: {
      type: Number,
      required: true
    },
    max: {
      type: Number,
      required: true
    },
    vertical: Boolean,
    disabled: Boolean,
    dir: {
      type: String,
      default: "ltr",
      validator: function validator23(value2) {
        return [null, "ltr", "rtl"].includes(value2);
      }
    },
    startTabIndex: Number,
    endTabIndex: Number
  },
  provide: function provide2() {
    return {
      kendoMin: this.$props.min,
      kendoMax: this.$props.max,
      kendoVertical: this.$props.vertical
    };
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created14() {
    validatePackage(packageMetadata);
  },
  data: function data14() {
    return {
      currentValue: this.defaultValue,
      currentDrag: "",
      currentDir: "ltr"
    };
  },
  computed: {
    computedValue: function computedValue6() {
      return this.$props.value !== void 0 ? this.$props.value : this.currentValue;
    },
    percentStart: function percentStart() {
      return (this.computedValue.start - this.min) / (this.max - this.min) * 100;
    },
    percentEnd: function percentEnd() {
      return (this.computedValue.end - this.min) / (this.max - this.min) * 100;
    },
    sliderItemsStyle: function sliderItemsStyle() {
      return this.vertical ? {
        paddingTop: 0,
        height: "100%"
      } : {};
    },
    trackStyles: function trackStyles() {
      return this.vertical ? {
        marginTop: "0.5rem",
        marginBottom: "0.5rem"
      } : {
        marginLeft: "0.5rem",
        marginRight: "0.5rem"
      };
    }
  },
  mounted: function mounted14() {
    this.sliderRef = this.$refs.sliderRef;
    this.sliderSelectionRef = this.$refs.sliderSelectionRef;
    this.startHandle = this.$refs.startHandle;
    this.endHandle = this.$refs.endHandle;
    this.sliderTrackRef = this.$refs.sliderTrackRef;
    this.sliderTrackWrapRef = this.$refs.sliderTrackWrapRef;
    if (!this.currentDir && window && this.$el) {
      var direction = window.getComputedStyle(this.$el).direction;
      if (direction) {
        this.currentDir = direction;
      }
    }
  },
  // @ts-ignore
  setup: !isV323 ? void 0 : function() {
    var v3 = !!isV323;
    var inputRef = ref7(null);
    var kendoLocalizationService = inject3("kendoLocalizationService", {});
    return {
      v3,
      inputRef,
      kendoLocalizationService
    };
  },
  render: function render22(createElement) {
    var _this = this;
    var _a3, _b;
    var h = gh22 || createElement;
    var localization = provideLocalizationService(this);
    var defaultSlot = getDefaultSlots(this);
    var _c = this.$props, id = _c.id, dir = _c.dir;
    return h("div", {
      id,
      attrs: this.v3 ? void 0 : {
        id,
        dir: this.currentDir,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy
      },
      dir: this.currentDir,
      "class": classNames("k-slider", {
        "k-rtl": this.currentDir === "rtl",
        "k-disabled": this.$props.disabled,
        "k-slider-vertical": this.$props.vertical,
        "k-slider-horizontal": !this.$props.vertical
      }, this.$props.class),
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy
    }, [
      // @ts-ignore  function children
      h(Draggable, {
        onDrag: this.handleTrackDrag,
        on: this.v3 ? void 0 : {
          "drag": this.handleTrackDrag,
          "press": this.handleTrackPress,
          "release": this.handleTrackRelease
        },
        onPress: this.handleTrackPress,
        onRelease: this.handleTrackRelease,
        ref: "draggable"
      }, this.v3 ? function() {
        return [h("div", {
          ref: "sliderTrackWrapRef",
          "class": "k-slider-track-wrap",
          style: __assign12({
            flexGrow: 1,
            position: "relative",
            touchAction: "none"
          }, _this.trackStyles)
        }, [defaultSlot && h("ul", {
          "class": "k-reset k-slider-items",
          style: __assign12({}, _this.sliderItemsStyle)
        }, [defaultSlot]), h("div", {
          ref: "sliderTrackRef",
          "class": "k-slider-track",
          style: _this.$props.vertical ? {
            bottom: 0,
            height: "100%"
          } : (_a3 = {}, _a3[_this.currentDir === "rtl" ? "right" : "left"] = 0, _a3.width = "100%", _a3)
        }, [_this.percentStart !== null && _this.percentEnd !== null && h("div", {
          "data-selection": true,
          attrs: _this.v3 ? void 0 : {
            "data-selection": true,
            title: "".concat(_this.computedValue.start, " - ").concat(_this.computedValue.end)
          },
          ref: "sliderSelectionRef",
          title: "".concat(_this.computedValue.start, " - ").concat(_this.computedValue.end),
          "class": "k-slider-selection",
          style: _this.vertical ? {
            height: _this.percentEnd - _this.percentStart + "%",
            bottom: _this.percentStart + "%"
          } : (_b = {}, _b[_this.currentDir === "rtl" ? "right" : "left"] = _this.percentStart + "%", _b.width = _this.percentEnd - _this.percentStart + "%", _b)
        }), h("a", {
          ref: "startHandle",
          role: "slider",
          attrs: _this.v3 ? void 0 : {
            role: "slider",
            tabindex: getTabIndex(_this.startTabIndex, _this.$props.disabled, void 0),
            "aria-valuemin": _this.min,
            "aria-valuemax": Math.max(_this.max, _this.computedValue.end),
            "aria-valuenow": _this.computedValue.start,
            "aria-disabled": _this.disabled ? "true" : void 0,
            "aria-valuetext": _this.computedValue.start,
            title: localization.toLanguageString(sliderDragTitle, messages[sliderDragTitle])
          },
          tabindex: getTabIndex(_this.startTabIndex, _this.$props.disabled, void 0),
          "aria-valuemin": _this.min,
          "aria-valuemax": Math.max(_this.max, _this.computedValue.end),
          "aria-valuenow": _this.computedValue.start,
          "aria-disabled": _this.disabled ? "true" : void 0,
          "aria-valuetext": _this.computedValue.start,
          "class": "k-draghandle",
          title: localization.toLanguageString(sliderDragTitle, messages[sliderDragTitle]),
          style: _this.vertical ? {
            bottom: "calc(" + _this.percentStart + "%)",
            zIndex: 1
          } : _this.currentDir === "rtl" ? {
            right: "calc(" + _this.percentStart + "% - 13px)",
            zIndex: 1
          } : {
            left: "calc(" + _this.percentStart + "%)",
            zIndex: 1
          },
          onKeydown: _this.handleStartKeyDown,
          on: _this.v3 ? void 0 : {
            "keydown": _this.handleStartKeyDown
          }
        }), h("a", {
          ref: "endHandle",
          role: "slider",
          attrs: _this.v3 ? void 0 : {
            role: "slider",
            tabindex: getTabIndex(_this.endTabIndex, _this.$props.disabled, void 0),
            "aria-valuemin": Math.min(_this.min, _this.computedValue.start),
            "aria-valuemax": _this.max,
            "aria-valuenow": _this.computedValue.end,
            "aria-disabled": _this.disabled ? "true" : void 0,
            "aria-valuetext": _this.computedValue.end,
            title: localization.toLanguageString(sliderDragTitle, messages[sliderDragTitle])
          },
          tabindex: getTabIndex(_this.endTabIndex, _this.$props.disabled, void 0),
          "aria-valuemin": Math.min(_this.min, _this.computedValue.start),
          "aria-valuemax": _this.max,
          "aria-valuenow": _this.computedValue.end,
          "aria-disabled": _this.disabled ? "true" : void 0,
          "aria-valuetext": _this.computedValue.end,
          "class": "k-draghandle",
          title: localization.toLanguageString(sliderDragTitle, messages[sliderDragTitle]),
          style: _this.vertical ? {
            bottom: "calc(" + _this.percentEnd + "%)",
            zIndex: 1
          } : _this.currentDir === "rtl" ? {
            right: "calc(" + _this.percentEnd + "% - 13px)",
            zIndex: 1
          } : {
            left: "calc(" + _this.percentEnd + "%)",
            zIndex: 1
          },
          onKeydown: _this.handleEndKeyDown,
          on: _this.v3 ? void 0 : {
            "keydown": _this.handleEndKeyDown
          }
        })])])];
      } : [h("div", {
        ref: "sliderTrackWrapRef",
        "class": "k-slider-track-wrap",
        style: __assign12({
          flexGrow: 1,
          position: "relative",
          touchAction: "none"
        }, _this.trackStyles)
      }, [defaultSlot && h("ul", {
        "class": "k-reset k-slider-items",
        style: __assign12({}, _this.sliderItemsStyle)
      }, [defaultSlot]), h("div", {
        ref: "sliderTrackRef",
        "class": "k-slider-track",
        style: _this.$props.vertical ? {
          bottom: 0,
          height: "100%"
        } : (_a3 = {}, _a3[_this.currentDir === "rtl" ? "right" : "left"] = 0, _a3.width = "100%", _a3)
      }, [_this.percentStart !== null && _this.percentEnd !== null && h("div", {
        "data-selection": true,
        attrs: _this.v3 ? void 0 : {
          "data-selection": true,
          title: "".concat(_this.computedValue.start, " - ").concat(_this.computedValue.end)
        },
        ref: "sliderSelectionRef",
        title: "".concat(_this.computedValue.start, " - ").concat(_this.computedValue.end),
        "class": "k-slider-selection",
        style: _this.vertical ? {
          height: _this.percentEnd - _this.percentStart + "%",
          bottom: _this.percentStart + "%"
        } : (_b = {}, _b[_this.currentDir === "rtl" ? "right" : "left"] = _this.percentStart + "%", _b.width = _this.percentEnd - _this.percentStart + "%", _b)
      }), h("a", {
        ref: "startHandle",
        role: "slider",
        attrs: _this.v3 ? void 0 : {
          role: "slider",
          tabindex: getTabIndex(_this.startTabIndex, _this.$props.disabled, void 0),
          "aria-valuemin": _this.min,
          "aria-valuemax": Math.max(_this.max, _this.computedValue.end),
          "aria-valuenow": _this.computedValue.start,
          "aria-disabled": _this.disabled ? "true" : void 0,
          "aria-valuetext": _this.computedValue.start,
          title: localization.toLanguageString(sliderDragTitle, messages[sliderDragTitle])
        },
        tabindex: getTabIndex(_this.startTabIndex, _this.$props.disabled, void 0),
        "aria-valuemin": _this.min,
        "aria-valuemax": Math.max(_this.max, _this.computedValue.end),
        "aria-valuenow": _this.computedValue.start,
        "aria-disabled": _this.disabled ? "true" : void 0,
        "aria-valuetext": _this.computedValue.start,
        "class": "k-draghandle",
        title: localization.toLanguageString(sliderDragTitle, messages[sliderDragTitle]),
        style: _this.vertical ? {
          bottom: "calc(" + _this.percentStart + "%)",
          zIndex: 1
        } : _this.currentDir === "rtl" ? {
          right: "calc(" + _this.percentStart + "% - 13px)",
          zIndex: 1
        } : {
          left: "calc(" + _this.percentStart + "%)",
          zIndex: 1
        },
        onKeydown: _this.handleStartKeyDown,
        on: _this.v3 ? void 0 : {
          "keydown": _this.handleStartKeyDown
        }
      }), h("a", {
        ref: "endHandle",
        role: "slider",
        attrs: _this.v3 ? void 0 : {
          role: "slider",
          tabindex: getTabIndex(_this.endTabIndex, _this.$props.disabled, void 0),
          "aria-valuemin": Math.min(_this.min, _this.computedValue.start),
          "aria-valuemax": _this.max,
          "aria-valuenow": _this.computedValue.end,
          "aria-disabled": _this.disabled ? "true" : void 0,
          "aria-valuetext": _this.computedValue.end,
          title: localization.toLanguageString(sliderDragTitle, messages[sliderDragTitle])
        },
        tabindex: getTabIndex(_this.endTabIndex, _this.$props.disabled, void 0),
        "aria-valuemin": Math.min(_this.min, _this.computedValue.start),
        "aria-valuemax": _this.max,
        "aria-valuenow": _this.computedValue.end,
        "aria-disabled": _this.disabled ? "true" : void 0,
        "aria-valuetext": _this.computedValue.end,
        "class": "k-draghandle",
        title: localization.toLanguageString(sliderDragTitle, messages[sliderDragTitle]),
        style: _this.vertical ? {
          bottom: "calc(" + _this.percentEnd + "%)",
          zIndex: 1
        } : _this.currentDir === "rtl" ? {
          right: "calc(" + _this.percentEnd + "% - 13px)",
          zIndex: 1
        } : {
          left: "calc(" + _this.percentEnd + "%)",
          zIndex: 1
        },
        onKeydown: _this.handleEndKeyDown,
        on: _this.v3 ? void 0 : {
          "keydown": _this.handleEndKeyDown
        }
      })])])])
    ]);
  },
  methods: {
    dispatchStateValue: function dispatchStateValue(args) {
      var newState = rangeReducer({
        start: this.computedValue.start,
        end: this.computedValue.end
      }, __assign12(__assign12({}, args), {
        min: this.min,
        max: this.max,
        step: this.step
      }));
      this.currentValue.start = newState.start;
      this.currentValue.end = newState.end;
      this.$emit("change", {
        min: this.min,
        max: this.max,
        step: this.step,
        value: {
          start: newState.start,
          end: newState.end
        }
      });
    },
    focus: function focus10() {
      if (this.startHandle) {
        this.startHandle.focus();
      }
    },
    handleChange: function handleChange3(newValue, event) {
      this.$emit("change", {
        value: newValue,
        //    target: target.current,
        event
      });
    },
    calcNewDistance: function calcNewDistance(event) {
      if (!this.sliderTrackWrapRef) {
        return;
      }
      event.originalEvent.preventDefault();
      var computed = this.sliderTrackWrapRef.getBoundingClientRect();
      var distance = this.$props.vertical ? computed.bottom - event.clientY : this.currentDir === "rtl" ? computed.right - event.clientX : event.clientX - computed.left;
      var size2 = this.$props.vertical ? computed.height : computed.width;
      var percentage = distance / size2;
      var payload = this.min + percentage * (this.max - this.min);
      return payload;
    },
    calcKey: function calcKey(payload) {
      if (payload <= this.computedValue.start) {
        return "start";
      }
      if (payload >= this.computedValue.end) {
        return "end";
      }
      return 2 * payload < this.computedValue.end + this.computedValue.start ? "start" : "end";
    },
    handleStartKeyDown: function handleStartKeyDown(event) {
      switch (event.keyCode) {
        case Keys.right:
          event.preventDefault();
          this.dispatchStateValue({
            type: this.currentDir === "rtl" ? RANGE_ACTION.decrease : RANGE_ACTION.increase,
            key: "start",
            event
          });
          break;
        case Keys.up:
          event.preventDefault();
          this.dispatchStateValue({
            type: RANGE_ACTION.increase,
            key: "start",
            event
          });
          break;
        case Keys.left:
          event.preventDefault();
          this.dispatchStateValue({
            type: this.currentDir === "rtl" ? RANGE_ACTION.increase : RANGE_ACTION.decrease,
            key: "start",
            event
          });
          break;
        case Keys.down:
          event.preventDefault();
          this.dispatchStateValue({
            type: RANGE_ACTION.decrease,
            key: "start",
            event
          });
          break;
        case Keys.home:
          event.preventDefault();
          this.dispatchStateValue({
            type: RANGE_ACTION.min,
            key: "start",
            event
          });
          break;
        case Keys.end:
          event.preventDefault();
          this.dispatchStateValue({
            type: RANGE_ACTION.max,
            key: "start",
            event
          });
          break;
        default:
          break;
      }
    },
    handleEndKeyDown: function handleEndKeyDown(event) {
      switch (event.keyCode) {
        case Keys.right:
          event.preventDefault();
          this.dispatchStateValue({
            type: this.currentDir === "rtl" ? RANGE_ACTION.decrease : RANGE_ACTION.increase,
            key: "end",
            event
          });
          break;
        case Keys.up:
          event.preventDefault();
          this.dispatchStateValue({
            type: RANGE_ACTION.increase,
            key: "end",
            event
          });
          break;
        case Keys.left:
          event.preventDefault();
          this.dispatchStateValue({
            type: this.currentDir === "rtl" ? RANGE_ACTION.increase : RANGE_ACTION.decrease,
            key: "end",
            event
          });
          break;
        case Keys.down:
          event.preventDefault();
          this.dispatchStateValue({
            type: RANGE_ACTION.decrease,
            key: "end",
            event
          });
          break;
        case Keys.home:
          event.preventDefault();
          this.dispatchStateValue({
            type: RANGE_ACTION.min,
            key: "end",
            event
          });
          break;
        case Keys.end:
          event.preventDefault();
          this.dispatchStateValue({
            type: RANGE_ACTION.max,
            key: "end",
            event
          });
          break;
        default:
          break;
      }
    },
    handleTrackPress: function handleTrackPress(event) {
      var payload = this.calcNewDistance(event);
      var key = this.calcKey(payload);
      this.currentDrag = key;
      key === "end" ? this.endHandle.focus() : this.startHandle.focus();
      var action = key === "end" ? RANGE_ACTION.end : RANGE_ACTION.start;
      this.dispatchStateValue({
        type: action,
        payload,
        event
      });
    },
    handleTrackDrag: function handleTrackDrag(event) {
      var payload = this.calcNewDistance(event);
      var action = this.currentDrag === "end" ? RANGE_ACTION.end : RANGE_ACTION.start;
      this.dispatchStateValue({
        type: action,
        payload,
        event
      });
    },
    handleTrackRelease: function handleTrackRelease(event) {
      var payload = this.calcNewDistance(event);
      var action = this.currentDrag === "end" ? RANGE_ACTION.end : RANGE_ACTION.start;
      this.dispatchStateValue({
        type: action,
        payload,
        event
      });
      this.currentDrag = "";
    }
  }
};
var RangeSlider = RangeSliderVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/checkbox/Checkbox.js
var allVue24 = vue_runtime_esm_bundler_exports;
var gh23 = allVue24.h;
var isV324 = allVue24.version && allVue24.version[0] === "3";
var ref8 = allVue24.ref;
var inject4 = allVue24.inject;
var CheckboxVue2 = {
  name: "KendoCheckbox",
  // @ts-ignore
  emits: {
    "changemodel": null,
    "update:modelValue": null,
    change: null,
    focus: null,
    blur: null
  },
  model: {
    event: "changemodel"
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    checked: {
      type: Boolean,
      default: void 0
    },
    defaultChecked: {
      type: Boolean,
      default: void 0
    },
    defaultValue: {
      type: [String, Boolean],
      default: void 0
    },
    modelValue: {
      type: [String, Boolean],
      default: void 0
    },
    dir: String,
    disabled: Boolean,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    label: String,
    labelRender: [String, Number, Boolean, Object],
    labelPlacement: String,
    labelOptional: Boolean,
    labelClass: String,
    name: String,
    size: {
      type: String,
      default: "medium",
      validator: function validator24(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator25(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    tabIndex: Number,
    value: {
      type: [String, Boolean],
      default: void 0
    },
    validationMessage: String,
    required: Boolean,
    valid: {
      type: Boolean,
      default: void 0
    },
    validityStyles: {
      type: Boolean,
      default: true
    }
  },
  data: function data15() {
    return {
      valueDuringOnChange: void 0,
      currentDir: "ltr",
      currentChecked: void 0,
      currentValue: void 0
    };
  },
  created: function created15() {
    validatePackage(packageMetadata);
    this.calculatedId = guid();
    if (this.$props.defaultChecked !== void 0) {
      this.currentChecked = this.$props.defaultChecked;
    }
    if (this.$props.defaultValue !== void 0) {
      this.currentValue = this.$props.defaultValue;
    }
    this.currentDir = this.$props.dir;
  },
  computed: {
    valueIsBooleanOrNull: function valueIsBooleanOrNull() {
      var value2 = this.$props.value;
      return typeof value2 === "boolean" || value2 === null;
    },
    isCheckedControlled: function isCheckedControlled() {
      return this.$props.checked !== void 0;
    },
    isValueControlled: function isValueControlled2() {
      return this.$props.value !== void 0 && this.valueIsBooleanOrNull;
    },
    computedValue: function computedValue7() {
      return this.$data.valueDuringOnChange !== void 0 ? this.$data.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentValue;
    },
    computedChecked: function computedChecked() {
      return this.$data.valueDuringOnChange !== void 0 ? this.$data.valueDuringOnChange : this.$props.checked !== void 0 ? this.$props.checked : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentChecked;
    },
    useValueAsChecked: function useValueAsChecked() {
      return this.computedChecked === void 0 && this.computedValue;
    },
    checkedProp: function checkedProp() {
      return this.useValueAsChecked ? this.computedValue : this.computedChecked;
    },
    valueProp: function valueProp() {
      var value2 = this.$props.value;
      return this.useValueAsChecked || this.isValueControlled ? value2 === null ? value2 : void 0 : value2 || this.computedValue;
    },
    indeterminateProp: function indeterminateProp() {
      return this.checkedProp === null || this.valueProp === null;
    },
    isValid: function isValid() {
      var valid = this.$props.valid;
      return valid !== void 0 ? valid : !this.$props.required ? true : this.computedChecked ? true : false;
    },
    labelComputedClass: function labelComputedClass() {
      var _a3;
      return _a3 = {
        "k-checkbox-label": true
      }, _a3[this.$props.labelClass] = this.$props.labelClass, _a3;
    }
  },
  mounted: function mounted15() {
    this.input = getRef(this, "input");
    if (!this.currentDir && window && this.$el) {
      var direction = window.getComputedStyle(this.$el).direction;
      if (direction) {
        this.currentDir = direction;
      }
    }
    this.setValidity();
  },
  updated: function updated11() {
    if (!this.input) {
      this.input = getRef(this, "input");
    }
    this.setValidity();
  },
  // @ts-ignore
  setup: !isV324 ? void 0 : function() {
    var v3 = !!isV324;
    var inputRef = ref8(null);
    var kendoLocalizationService = inject4("kendoLocalizationService", {});
    return {
      v3,
      inputRef,
      kendoLocalizationService
    };
  },
  render: function render23(createElement) {
    var _a3;
    var h = gh23 || createElement;
    var _b = this.$props, ariaDescribedBy = _b.ariaDescribedBy, ariaLabelledBy = _b.ariaLabelledBy, disabled = _b.disabled, id = _b.id, label = _b.label, labelRender = _b.labelRender, labelPlacement = _b.labelPlacement, name3 = _b.name, labelOptional = _b.labelOptional, tabIndex = _b.tabIndex, required = _b.required, validityStyles = _b.validityStyles, size2 = _b.size, rounded = _b.rounded;
    var defaultSlot = getDefaultSlots(this);
    var renderedLabel = label;
    this.localizationService = provideLocalizationService(this);
    this.defaultValidationMessage = this.localizeMessage(checkboxValidation);
    this.optionalMessage = this.localizeMessage(checkboxOptionalText);
    var checkboxClasses = classNames({
      "k-checkbox-wrap": true,
      "k-disabled": disabled
    });
    var inputClasses = classNames((_a3 = {
      "k-checkbox": true
    }, _a3["k-checkbox-".concat(kendoThemeMaps.sizeMap[size2])] = size2, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded])] = rounded, _a3["k-indeterminate"] = this.indeterminateProp, _a3["k-disabled"] = disabled, _a3["k-invalid k-invalid"] = !(this.isValid || validityStyles !== void 0 || validityStyles === true), _a3));
    var checkboxInput = function checkboxInput2() {
      return h("input", {
        type: "checkbox",
        attrs: this.v3 ? void 0 : {
          type: "checkbox",
          name: name3,
          id: id || this.calculatedId,
          "aria-labelledby": ariaLabelledBy,
          "aria-describedby": ariaDescribedBy,
          disabled,
          tabindex: getTabIndex(tabIndex, disabled),
          role: "checkbox",
          required: required !== void 0 ? required : false,
          "aria-checked": this.computedChecked || this.checkedProp ? true : this.indeterminateProp ? "mixed" : false,
          "aria-disabled": disabled || void 0
        },
        "class": inputClasses,
        name: name3,
        id: id || this.calculatedId,
        ref: setRef(this, "input"),
        "aria-labelledby": ariaLabelledBy,
        "aria-describedby": ariaDescribedBy,
        checked: this.v3 ? Boolean(this.checkedProp) : null,
        domProps: this.v3 ? void 0 : {
          "checked": Boolean(this.checkedProp)
        },
        disabled,
        tabindex: getTabIndex(tabIndex, disabled),
        role: "checkbox",
        required: required !== void 0 ? required : false,
        "aria-checked": this.computedChecked || this.checkedProp ? true : this.indeterminateProp ? "mixed" : false,
        "aria-disabled": disabled || void 0,
        onChange: this.onChangeHandler,
        on: this.v3 ? void 0 : {
          "change": this.onChangeHandler,
          "keydown": this.onKeyDownHandler,
          "focus": this.onFocusHandler,
          "blur": this.onBlurHandler
        },
        onKeydown: this.onKeyDownHandler,
        onFocus: this.onFocusHandler,
        onBlur: this.onBlurHandler
      });
    };
    if (labelRender) {
      var renderTemplate = labelRender ? templateRendering.call(this, labelRender, getListeners.call(this)) : null;
      renderedLabel = getTemplate.call(this, {
        h,
        template: renderTemplate
      });
    }
    var checkboxLabel = function checkboxLabel2() {
      return renderedLabel !== void 0 ? h("label", {
        "class": this.labelComputedClass,
        "for": id || this.calculatedId,
        attrs: this.v3 ? void 0 : {
          "for": id || this.calculatedId
        },
        style: {
          userSelect: "none"
        }
      }, [renderedLabel, labelOptional && h("span", {
        "class": "k-label-optional"
      }, [this.optionalMessage])]) : null;
    };
    return labelPlacement === "before" ? h("span", {
      "class": checkboxClasses,
      dir: "rtl",
      attrs: this.v3 ? void 0 : {
        dir: "rtl"
      }
    }, [checkboxInput.call(this), checkboxLabel.call(this), defaultSlot]) : h("span", {
      "class": checkboxClasses,
      dir: this.currentDir,
      attrs: this.v3 ? void 0 : {
        dir: this.currentDir
      }
    }, [checkboxInput.call(this), checkboxLabel.call(this), defaultSlot]);
  },
  methods: {
    setValidity: function setValidity6() {
      var isValid3 = this.$props.valid !== void 0 ? this.$props.valid : !this.$props.required ? true : this.computedChecked ? true : false;
      if (this.input && this.input.setCustomValidity) {
        this.input.setCustomValidity(isValid3 ? "" : this.$props.validationMessage || this.defaultValidationMessage);
      }
    },
    localizeMessage: function localizeMessage(message) {
      return this.localizationService.toLanguageString(message, messages[message]);
    },
    focusElement: function focusElement2() {
      if (this.input) {
        this.input.focus();
      }
    },
    setValue: function setValue(e, val) {
      this.$data.valueDuringOnChange = val;
      var that = this;
      this.$nextTick(function() {
        if (!that.isCheckedControlled && !that.isValueControlled && !that.$props.disabled) {
          that.currentValue = val;
          that.currentChecked = val;
        }
        if (!that.$props.disabled) {
          var handle = {
            element: that.$el,
            focus: null
            // focusElement
          };
          that.$emit("changemodel", val);
          that.$emit("update:modelValue", val);
          that.$emit("change", {
            e,
            handle,
            value: val
          });
        }
        this.$data.valueDuringOnChange = void 0;
      });
    },
    onChangeHandler: function onChangeHandler3(e) {
      var newValue = e.target.checked;
      this.setValue(e, newValue);
    },
    onKeyDownHandler: function onKeyDownHandler4(e) {
      if (this.$props.disabled) {
        return;
      }
      var keyCode = e.keyCode;
      var currentVal = e.currentTarget.checked;
      if (keyCode === Keys.space) {
        e.preventDefault();
        e.stopPropagation();
        this.setValue(e, !currentVal);
      }
    },
    onBlurHandler: function onBlurHandler2(e) {
      if (!this.$props.disabled) {
        this.$emit("blur", e);
      }
    },
    onFocusHandler: function onFocusHandler2(e) {
      if (!this.$props.disabled) {
        this.$emit("focus", e);
      }
    }
  }
};
var Checkbox = CheckboxVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/radiobutton/RadioButton.js
var allVue25 = vue_runtime_esm_bundler_exports;
var gh24 = allVue25.h;
var isV325 = allVue25.version && allVue25.version[0] === "3";
var ref9 = allVue25.ref;
var inject5 = allVue25.inject;
var RadioButtonVue2 = {
  name: "KendoRadioButton",
  inheritAttrs: false,
  props: {
    ariaDescribedBy: String,
    checked: Boolean,
    disabled: Boolean,
    className: String,
    content: [String, Number, Boolean, Object],
    dataItem: Object,
    id: String,
    label: String,
    labelRender: [String, Number, Boolean, Object],
    item: [String, Number, Boolean, Object],
    labelPlacement: String,
    name: String,
    tag: {
      type: String,
      default: "div"
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator26(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    tabIndex: Number,
    value: [String, Number, Object],
    valid: {
      type: Boolean,
      default: void 0
    }
  },
  // @ts-ignore
  emits: {
    change: null,
    focus: null,
    blur: null
  },
  created: function created16() {
    this.calculatedId = guid();
    validatePackage(packageMetadata);
  },
  mounted: function mounted16() {
    this.input = getRef(this, "input");
  },
  computed: {
    inputClassName: function inputClassName() {
      var _a3;
      return _a3 = {
        "k-radio": true
      }, _a3["k-radio-".concat(kendoThemeMaps.sizeMap[this.$props.size])] = this.$props.size, _a3["k-invalid"] = this.$props.valid === false, _a3[this.$props.className] = this.$props.className, _a3;
    }
  },
  methods: {
    focusElement: function focusElement3() {
      if (this.input) {
        this.input.focus();
      }
    },
    handleChange: function handleChange4(event) {
      this.$emit("change", {
        event,
        value: this.$props.value
      });
    },
    handleFocus: function handleFocus2(event) {
      if (!this.$props.disabled) {
        this.$emit("focus", event, void 0);
      }
    },
    handleBlur: function handleBlur2(event) {
      if (!this.$props.disabled) {
        this.$emit("blur", event, void 0);
      }
    }
  },
  // @ts-ignore
  setup: !isV325 ? void 0 : function() {
    var v3 = !!isV325;
    var inputRef = ref9(null);
    return {
      v3,
      inputRef
    };
  },
  render: function render24(createElement) {
    var h = gh24 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a3 = this.$props, ariaDescribedBy = _a3.ariaDescribedBy, checked = _a3.checked, disabled = _a3.disabled, id = _a3.id, label = _a3.label, labelRender = _a3.labelRender, labelPlacement = _a3.labelPlacement, name3 = _a3.name, tabIndex = _a3.tabIndex, value2 = _a3.value, tag = _a3.tag;
    var renderedLabel = label;
    if (labelRender) {
      var renderTemplate = labelRender ? templateRendering.call(this, labelRender, getListeners.call(this)) : null;
      renderedLabel = getTemplate.call(this, {
        h,
        template: renderTemplate
      });
    }
    var content = getTemplate.call(this, {
      h,
      template: this.$props.content
    });
    var radioButtonLabel = renderedLabel !== void 0 ? h("label", {
      "class": "k-radio-label",
      "for": id || this.calculatedId,
      attrs: this.v3 ? void 0 : {
        "for": id || this.calculatedId,
        "aria-label": label
      },
      style: {
        userSelect: "none"
      },
      "aria-label": label
    }, [renderedLabel]) : null;
    var radio = h("input", {
      type: "radio",
      attrs: this.v3 ? void 0 : {
        type: "radio",
        id: id || this.calculatedId,
        name: name3,
        disabled,
        tabindex: getTabIndex(tabIndex, disabled),
        "aria-describedby": ariaDescribedBy
      },
      id: id || this.calculatedId,
      name: name3,
      "class": this.inputClassName,
      ref: setRef(this, "input"),
      disabled,
      tabindex: getTabIndex(tabIndex, disabled),
      checked: this.v3 ? checked : null,
      domProps: this.v3 ? void 0 : {
        "checked": checked,
        "value": value2
      },
      style: this.$attrs.style,
      "aria-describedby": ariaDescribedBy,
      value: this.v3 ? value2 : null,
      onChange: this.handleChange,
      on: this.v3 ? void 0 : {
        "change": this.handleChange,
        "focus": this.handleFocus,
        "blur": this.handleBlur
      },
      onFocus: this.handleFocus,
      onBlur: this.handleBlur
    });
    var defaultRendering = labelPlacement === "before" ? h(tag, [radioButtonLabel, radio, content, defaultSlot]) : h(tag, [radio, radioButtonLabel, content, defaultSlot]);
    return getTemplate.call(this, {
      h,
      template: this.$props.item,
      defaultRendering,
      defaultSlots: defaultSlot,
      additionalListeners: {
        change: this.handleChange,
        focus: this.handleFocus,
        blur: this.handleBlur
      },
      additionalProps: {
        dataItem: this.$props.dataItem
      }
    });
  }
};
var RadioButton = RadioButtonVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/radiobutton/RadioGroup.js
var allVue26 = vue_runtime_esm_bundler_exports;
var gh25 = allVue26.h;
var isV326 = allVue26.version && allVue26.version[0] === "3";
var ref10 = allVue26.ref;
var inject6 = allVue26.inject;
var RadioGroupVue2 = {
  name: "KendoRadioGroup",
  props: {
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    dataItems: Array,
    defaultValue: [String, Number, Object],
    dir: String,
    disabled: Boolean,
    labelPlacement: String,
    item: {
      type: String,
      default: void 0
    },
    layout: {
      type: String,
      default: "vertical",
      validator: function validator27(value2) {
        return ["horizontal", "vertical"].includes(value2);
      }
    },
    name: String,
    modelValue: [String, Number, Object],
    value: [String, Number, Object],
    valid: {
      type: Boolean,
      default: void 0
    }
  },
  // @ts-ignore
  emits: {
    "changemodel": null,
    "update:modelValue": null,
    change: null,
    focus: null,
    blur: null
  },
  model: {
    event: "changemodel"
  },
  created: function created17() {
    this.radioGroupName = guid();
    validatePackage(packageMetadata);
    this.stateChecked = this.$props.defaultValue;
  },
  watch: {
    value: function value(newValue) {
      if (newValue === void 0) {
        this.stateChecked = this.$props.defaultValue;
      }
    }
  },
  mounted: function mounted17() {
    this.rtl = isRtl(this.$el);
  },
  computed: {
    radioGroupClasses: function radioGroupClasses() {
      var layout = this.$props.layout;
      return {
        "k-radio-list": true,
        "k-list-horizontal": layout === "horizontal",
        "k-list-vertical": layout === "vertical" || layout === void 0
      };
    },
    checkedRadioValue: function checkedRadioValue() {
      var value2 = this.$props.value;
      return value2 !== void 0 ? value2 : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.stateChecked;
    },
    currentDir: function currentDir() {
      var dir = this.$props.dir;
      return dir ? dir : this.rtl ? "rtl" : void 0;
    }
  },
  data: function data16() {
    return {
      rtl: false,
      stateChecked: void 0
    };
  },
  methods: {
    focusElement: function focusElement4() {
      if (this.$el) {
        focusFirstFocusableChild(this.$el);
      }
    },
    handleChange: function handleChange5(event) {
      var currentValue = event.value;
      if (!(this.$props.value !== void 0) && !this.$props.disabled) {
        this.stateChecked = currentValue;
      }
      if (!this.$props.disabled) {
        this.$emit("changemodel", currentValue);
        this.$emit("update:modelValue", currentValue);
        this.$emit("change", {
          event,
          value: currentValue
        });
      }
    },
    handleFocus: function handleFocus3(event) {
      if (!this.$props.disabled) {
        this.$emit("focus", event);
      }
    },
    handleBlur: function handleBlur3(event) {
      if (!this.$props.disabled) {
        this.$emit("blur", event);
      }
    }
  },
  // @ts-ignore
  setup: !isV326 ? void 0 : function() {
    var v3 = !!isV326;
    var inputRef = ref10(null);
    return {
      v3,
      inputRef
    };
  },
  render: function render25(createElement) {
    var h = gh25 || createElement;
    var _a3 = this.$props, ariaLabelledBy = _a3.ariaLabelledBy, ariaDescribedBy = _a3.ariaDescribedBy, dataItems = _a3.dataItems, disabled = _a3.disabled, name3 = _a3.name, labelPlacement = _a3.labelPlacement, valid = _a3.valid;
    var radioOptions = dataItems && dataItems.map(function(option, index) {
      var isCurrentlyChecked = this.checkedRadioValue === option.value;
      var noOptionChecked = this.checkedRadioValue === null || this.checkedRadioValue === void 0;
      var item = templateRendering.call(this, this.$props.item || option.item, getListeners.call(this));
      return (
        // @ts-ignore function children
        h(RadioButton, {
          "class": classNames("k-radio-item", {
            "k-disabled": option.disabled || disabled
          }),
          style: option.style,
          key: index,
          item,
          attrs: this.v3 ? void 0 : {
            item,
            role: "radio",
            tag: "li",
            valid,
            className: option.className,
            label: option.label,
            value: option.value,
            dataItem: option,
            checked: isCurrentlyChecked,
            disabled: option.disabled || disabled ? true : false,
            labelPlacement: option.labelPlacement ? option.labelPlacement : labelPlacement,
            tabIndex: option.tabIndex ? option.tabIndex : noOptionChecked && index === 0 || isCurrentlyChecked ? 0 : -1,
            index,
            name: name3 || option.name || this.radioGroupName
          },
          role: "radio",
          tag: "li",
          valid,
          className: option.className,
          label: option.label,
          value: option.value,
          dataItem: option,
          checked: isCurrentlyChecked,
          disabled: option.disabled || disabled ? true : false,
          labelPlacement: option.labelPlacement ? option.labelPlacement : labelPlacement,
          tabIndex: option.tabIndex ? option.tabIndex : noOptionChecked && index === 0 || isCurrentlyChecked ? 0 : -1,
          index,
          name: name3 || option.name || this.radioGroupName,
          onChange: this.handleChange,
          on: this.v3 ? void 0 : {
            "change": this.handleChange,
            "focus": this.handleFocus,
            "blur": this.handleBlur
          },
          onFocus: this.handleFocus,
          onBlur: this.handleBlur
        }, this.v3 ? function() {
          return [option.content];
        } : [option.content])
      );
    }, this);
    return h("ul", {
      role: "radiogroup",
      attrs: this.v3 ? void 0 : {
        role: "radiogroup",
        dir: this.currentDir,
        "aria-labelledby": ariaLabelledBy,
        "aria-describedby": ariaDescribedBy
      },
      "class": this.radioGroupClasses,
      dir: this.currentDir,
      "aria-labelledby": ariaLabelledBy,
      "aria-describedby": ariaDescribedBy
    }, [radioOptions]);
  }
};
var RadioGroup = RadioGroupVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/textarea/TextArea.js
var __assign13 = function() {
  __assign13 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign13.apply(this, arguments);
};
var allVue27 = vue_runtime_esm_bundler_exports;
var gh26 = allVue27.h;
var isV327 = allVue27.version && allVue27.version[0] === "3";
var TextAreaVue2 = {
  name: "KendoTextArea",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "input": null,
    "change": null,
    "changemodel": null,
    "update:modelValue": null,
    "focus": null,
    "blur": null
  },
  props: {
    title: String,
    ariaDescribedBy: String,
    ariaLabelledBy: String,
    autoSize: Boolean,
    modelValue: {
      type: [String, Array, Number],
      default: void 0
    },
    defaultValue: [String, Number],
    dir: String,
    disabled: Boolean,
    readOnly: Boolean,
    rows: Number,
    id: String,
    name: String,
    validationMessage: String,
    size: {
      type: String,
      default: "medium",
      validator: function validator28(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator29(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator30(value2) {
        return [null, "solid", "flat", "outline"].includes(value2);
      }
    },
    required: Boolean,
    placeholder: String,
    tabIndex: Number,
    valid: {
      type: Boolean,
      default: void 0
    },
    value: [String, Array, Number],
    validityStyles: {
      type: Boolean,
      default: true
    },
    iconName: String,
    inputPrefix: templateDefinition,
    inputSuffix: templateDefinition,
    showValidationIcon: Boolean,
    showLoadingIcon: Boolean,
    showClearButton: Boolean,
    inputClass: String,
    wrapperClass: String,
    flow: {
      type: String,
      default: "horizontal",
      validator: function validator31(value2) {
        return ["horizontal", "vertical"].includes(value2);
      }
    },
    resizable: {
      type: String,
      default: "vertical",
      validator: function validator32(value2) {
        return ["both", "horizontal", "vertical", "none"].includes(value2);
      }
    }
  },
  created: function created18() {
    validatePackage(packageMetadata);
    this.calculatedId = guid();
  },
  computed: {
    rootClassName: function rootClassName() {
      var _a3;
      var _b = this.$props, size2 = _b.size, fillMode = _b.fillMode, rounded = _b.rounded, required = _b.required, showLoadingIcon = _b.showLoadingIcon, resizable = _b.resizable, autoSize = _b.autoSize;
      var invalid = this.validityStyles === true ? !this.isValid : false;
      return _a3 = {
        "k-input": true,
        "k-textarea": true
      }, _a3["k-input-".concat(kendoThemeMaps.sizeMap[size2] || size2)] = size2, _a3["k-input-".concat(fillMode)] = fillMode, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a3["k-disabled"] = this.$props.disabled, _a3["k-invalid"] = invalid, _a3["k-required"] = required, _a3["k-loading"] = showLoadingIcon, _a3["k-resize-".concat(resizable)] = autoSize ? "none" : resizable, _a3["!k-flex-col"] = this.flow === "vertical", _a3["!k-flex-row"] = this.flow === "horizontal", _a3[this.wrapperClass] = this.wrapperClass, _a3;
    },
    inputInnerClass: function inputInnerClass5() {
      var _a3;
      return _a3 = {
        "k-input-inner": true,
        "!k-resize-none": true,
        "!k-overflow-auto": true,
        "k-flex": true
      }, _a3[this.inputClass] = this.inputClass, _a3;
    },
    prefixRenderClass: function prefixRenderClass() {
      return {
        "k-input-prefix": true,
        "!k-flex-col": this.flow === "horizontal",
        "!k-flex-row": this.flow === "vertical",
        "!k-align-items-start": this.flow === "horizontal"
      };
    },
    suffixRenderClass: function suffixRenderClass() {
      return {
        "k-input-suffix": true,
        "!k-flex-col": this.flow === "horizontal",
        "!k-flex-row": this.flow === "vertical",
        "!k-align-items-start": this.flow === "horizontal"
      };
    },
    suffixIconWrapClass: function suffixIconWrapClass() {
      return {
        "k-flex-wrap": true,
        "!k-align-items-start": true
      };
    },
    computedValue: function computedValue8() {
      return this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.currentValue;
    },
    isValid: function isValid2() {
      return this.valid !== void 0 ? this.valid : !this.required ? true : this.computedValue ? true : false;
    }
  },
  data: function data17() {
    return {
      currentValue: this.$props.defaultValue,
      textAreaHeight: "auto",
      currentDir: "ltr"
    };
  },
  watch: {
    size: function size() {
      this.textAreaHeight = "auto";
    }
  },
  mounted: function mounted18() {
    this.element = this.v3 ? this.elementRef : this.$refs.element;
    this.currentDir = this.$props.dir !== void 0 ? this.$props.dir : isRtl(this.$el) ? "rtl" : "ltr";
    this.setValidity();
  },
  updated: function updated12() {
    this.element = this.v3 ? this.elementRef : this.$refs.element;
    this.setValidity();
  },
  // @ts-ignore
  setup: !isV327 ? void 0 : function() {
    var v3 = !!isV327;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render26(createElement) {
    var _this = this;
    var h = gh26 || createElement;
    var _a3 = this.$props, ariaDescribedBy = _a3.ariaDescribedBy, ariaLabelledBy = _a3.ariaLabelledBy, autoSize = _a3.autoSize, disabled = _a3.disabled, readOnly = _a3.readOnly, required = _a3.required, rows = _a3.rows, id = _a3.id, name3 = _a3.name, placeholder = _a3.placeholder, tabIndex = _a3.tabIndex, iconName = _a3.iconName, showValidationIcon = _a3.showValidationIcon, showLoadingIcon = _a3.showLoadingIcon, showClearButton = _a3.showClearButton, title = _a3.title;
    var textAreaAttrs = __assign13({
      id: id || this.calculatedId,
      name: name3,
      disabled,
      rows,
      title,
      placeholder,
      readOnly,
      required,
      tabIndex: getTabIndex(tabIndex, disabled),
      "aria-labelledby": ariaLabelledBy,
      "aria-describedby": ariaDescribedBy,
      "aria-multiline": true,
      "aria-disabled": disabled || void 0
    }, this.$attrs);
    var inputPrefixTemplate = templateRendering.call(this, this.$props.inputPrefix, getListeners.call(this));
    var inputSuffixTemplate = templateRendering.call(this, this.$props.inputSuffix, getListeners.call(this));
    var inputPrefix = getTemplate.call(this, {
      h,
      template: inputPrefixTemplate,
      additionalProps: {
        value: this.computedValue,
        valid: this.isValid
      }
    });
    var inputSuffix = getTemplate.call(this, {
      h,
      template: inputSuffixTemplate,
      additionalProps: {
        value: this.computedValue,
        valid: this.isValid
      }
    });
    var textarea = h("textarea", __assign13(__assign13({}, textAreaAttrs), {
      attrs: this.v3 ? void 0 : textAreaAttrs,
      class: this.inputInnerClass,
      ref: this.v3 ? function(el) {
        _this.elementRef = el;
      } : "element",
      style: autoSize ? {
        overflow: "hidden",
        height: this.textAreaHeight
      } : {},
      value: this.v3 ? this.computedValue : null,
      domProps: this.v3 ? void 0 : {
        "value": this.computedValue
      },
      onChange: this.handleChange,
      onInput: this.handleInput,
      on: this.v3 ? void 0 : {
        "change": this.handleChange,
        "focus": this.handleFocus,
        "blur": this.handleBlur,
        input: this.handleInput
      },
      onFocus: this.handleFocus,
      onBlur: this.handleBlur
    }));
    var renderWithIcons = [iconName && h("span", {
      "class": "k-flex-wrap"
    }, [h(Icon, {
      name: iconName,
      attrs: this.v3 ? void 0 : {
        name: iconName
      },
      "class": "k-input-icon"
    })]), textarea, showValidationIcon && this.isValid && h("span", {
      "class": this.suffixIconWrapClass
    }, [h(Icon, {
      name: "check",
      attrs: this.v3 ? void 0 : {
        name: "check"
      },
      "class": "k-input-validation-icon"
    })]), showValidationIcon && !this.isValid && h("span", {
      "class": this.suffixIconWrapClass
    }, [h(Icon, {
      name: "exclamation-circle",
      attrs: this.v3 ? void 0 : {
        name: "exclamation-circle",
        icon: exclamationCircleIcon
      },
      icon: exclamationCircleIcon,
      "class": "k-input-validation-icon"
    })]), showLoadingIcon && h("span", {
      "class": this.suffixIconWrapClass
    }, [h(Icon, {
      name: "loading",
      attrs: this.v3 ? void 0 : {
        name: "loading"
      },
      "class": "k-input-loading-icon"
    })]), showClearButton && this.computedValue && h("span", {
      "class": this.suffixIconWrapClass
    }, [h("span", {
      onClick: this.clearClick,
      on: this.v3 ? void 0 : {
        "click": this.clearClick
      },
      "class": "k-clear-value"
    }, [h(Icon, {
      name: "x",
      attrs: this.v3 ? void 0 : {
        name: "x"
      }
    })])])];
    return h("span", {
      "class": this.rootClassName,
      dir: this.currentDir === "rtl" ? this.currentDir : "",
      attrs: this.v3 ? void 0 : {
        dir: this.currentDir === "rtl" ? this.currentDir : ""
      },
      style: this.$attrs.style
    }, [this.$props.inputPrefix && h("span", {
      "class": this.prefixRenderClass
    }, [inputPrefix]), iconName || showValidationIcon || showLoadingIcon || showClearButton ? h("span", {
      "class": "k-hstack k-flex"
    }, [renderWithIcons]) : renderWithIcons, this.$props.inputSuffix && h("span", {
      "class": this.suffixRenderClass
    }, [inputSuffix])]);
  },
  methods: {
    setValidity: function setValidity7() {
      if (this.element && this.element.setCustomValidity) {
        this.element.setCustomValidity(this.isValid ? "" : this.validationMessage || "");
      }
      if (this.element) {
        this.textAreaHeight = "".concat(this.element.scrollHeight, "px");
      }
    },
    clearClick: function clearClick5(event) {
      this.emitUpdate(event, "change", "");
    },
    focus: function focus11() {
      if (this.element) {
        this.element.focus();
      }
    },
    emitUpdate: function emitUpdate3(event, eventName, value2) {
      var newValue = value2;
      if (!this.$props.disabled) {
        this.textAreaHeight = "auto";
        this.currentValue = newValue;
      }
      if (!this.$props.disabled) {
        this.$emit("changemodel", newValue);
        this.$emit("update:modelValue", newValue);
        this.$emit(eventName, {
          event,
          component: this,
          name: this.element.name,
          value: newValue
        });
      }
    },
    handleChange: function handleChange6(event) {
      this.emitUpdate(event, "change", event.target.value);
    },
    handleInput: function handleInput3(event) {
      this.emitUpdate(event, "input", event.target.value);
    },
    handleFocus: function handleFocus4(event) {
      if (!this.$props.disabled) {
        this.$emit("focus", {
          event,
          component: this,
          name: this.element.name
        });
      }
    },
    handleBlur: function handleBlur4(event) {
      if (!this.$props.disabled) {
        this.$emit("blur", {
          event,
          component: this,
          name: this.element.name
        });
      }
    }
  }
};
var TextArea = TextAreaVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/signature/SignatureBottomActions.js
var allVue28 = vue_runtime_esm_bundler_exports;
var gh27 = allVue28.h;
var isV328 = allVue28.version && allVue28.version[0] === "3";
var SignatureBottomActionsVue2 = {
  name: "KendoSignatureBottomActions",
  // @ts-ignore
  emits: {
    clear: null
  },
  props: {
    showClear: Boolean,
    size: String,
    title: String
  },
  methods: {
    onClear: function onClear(e) {
      this.$emit("clear", e);
    }
  },
  // @ts-ignore
  setup: !isV328 ? void 0 : function() {
    var v3 = !!isV328;
    return {
      v3
    };
  },
  render: function render27(createElement) {
    var h = gh27 || createElement;
    var _a3 = this.$props, showClear = _a3.showClear, title = _a3.title, size2 = _a3.size;
    return h("div", {
      "class": "k-signature-actions k-signature-actions-bottom"
    }, [showClear && // @ts-ignore
    h(Button, {
      "class": "k-signature-action k-signature-clear",
      icon: "x",
      attrs: this.v3 ? void 0 : {
        icon: "x",
        svgIcon: xIcon,
        shape: null,
        fillMode: "flat",
        size: size2,
        "aria-label": title,
        title
      },
      svgIcon: xIcon,
      shape: null,
      fillMode: "flat",
      size: size2,
      onClick: this.onClear,
      on: this.v3 ? void 0 : {
        "click": this.onClear
      },
      "aria-label": title,
      title
    })]);
  }
};
var SignatureBottomActions = SignatureBottomActionsVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/signature/SignatureLine.js
var allVue29 = vue_runtime_esm_bundler_exports;
var gh28 = allVue29.h;
var isV329 = allVue29.version && allVue29.version[0] === "3";
var SignatureLineVue2 = {
  name: "KendoSignatureLine",
  // @ts-ignore
  setup: !isV329 ? void 0 : function() {
    var v3 = !!isV329;
    return {
      v3
    };
  },
  render: function render28(createElement) {
    var h = gh28 || createElement;
    return h("div", {
      "class": "k-signature-line",
      style: {
        zIndex: 2,
        pointerEvents: "none"
      }
    });
  }
};
var SignatureLine = SignatureLineVue2;

// node_modules/@progress/kendo-inputs-common/dist/es/maskedtextbox/parsing/result.js
var ResultType2;
(function(ResultType3) {
  ResultType3[ResultType3["Literal"] = 0] = "Literal";
  ResultType3[ResultType3["Mask"] = 1] = "Mask";
  ResultType3[ResultType3["Undefined"] = 2] = "Undefined";
})(ResultType2 || (ResultType2 = {}));
var Result2 = (
  /** @class */
  function() {
    function Result3(value2, rest, type) {
      if (type === void 0) {
        type = ResultType2.Undefined;
      }
      this.value = value2;
      this.rest = rest;
      this.type = type;
    }
    Result3.prototype.map = function(fn) {
      return new Result3(fn(this.value), this.rest);
    };
    Result3.prototype.chain = function(fn) {
      return fn(this.value, this.rest);
    };
    Result3.prototype.fold = function(s, _) {
      return s(this.value, this.rest);
    };
    Result3.prototype.concat = function(r) {
      return this.map(function(vs, _) {
        return r.chain(function(v, __) {
          return vs.concat([v]);
        });
      });
    };
    Result3.prototype.toString = function() {
      return "Result({ value: '" + this.value + "', rest: " + this.rest + " })";
    };
    return Result3;
  }()
);

// node_modules/@progress/kendo-inputs-common/dist/es/maskedtextbox/parsing/stream.js
var Stream2 = (
  /** @class */
  function() {
    function Stream3(input, control) {
      if (input === void 0) {
        input = [];
      }
      if (control === void 0) {
        control = [];
      }
      this.input = input;
      this.control = control;
      this.inputCursor = 0;
      this.controlCursor = 0;
    }
    Stream3.prototype.eof = function() {
      return this.inputCursor >= this.input.length;
    };
    Stream3.prototype.next = function() {
      return {
        char: this.input[this.inputCursor++],
        control: this.control[this.controlCursor++]
      };
    };
    Stream3.prototype.peek = function() {
      return {
        char: this.input[this.inputCursor],
        control: this.control[this.controlCursor]
      };
    };
    Stream3.prototype.eat_input = function() {
      this.inputCursor++;
    };
    Stream3.prototype.eat_control = function() {
      this.controlCursor++;
    };
    Stream3.prototype.eat = function() {
      this.inputCursor++;
      this.controlCursor++;
    };
    return Stream3;
  }()
);

// node_modules/@progress/kendo-inputs-common/dist/es/maskedtextbox/parsing/parsers.js
var toArray2 = function(value2) {
  return (value2 || "").split("");
};
var ESCAPE_CHARACTER2 = "\\";
var Parser2 = (
  /** @class */
  function() {
    function Parser3(parse) {
      this.parse = parse;
    }
    Parser3.prototype.run = function(input, control) {
      if (control === void 0) {
        control = "";
      }
      if (input instanceof Stream2) {
        return this.parse(input);
      } else {
        return this.parse(new Stream2(toArray2(input), toArray2(control)));
      }
    };
    Parser3.prototype.map = function(f) {
      var _this = this;
      return new Parser3(function(stream) {
        return _this.parse(stream).map(f);
      });
    };
    Parser3.prototype.chain = function(f) {
      var _this = this;
      return new Parser3(function(stream) {
        return _this.parse(stream).chain(function(v, s) {
          return f(v).run(s);
        });
      });
    };
    Parser3.prototype.isLiteral = function(c) {
      return this.run(c).type === ResultType2.Literal;
    };
    return Parser3;
  }()
);
var mask3 = function(_a3) {
  var prompt2 = _a3.prompt, promptPlaceholder2 = _a3.promptPlaceholder;
  return function(rule) {
    return new Parser2(function(stream) {
      while (!stream.eof()) {
        var _a4 = stream.peek(), char = _a4.char, control = _a4.control;
        if (char === control && control === prompt2) {
          stream.eat();
          return new Result2(prompt2, stream, ResultType2.Mask);
        }
        if (rule.test(char)) {
          stream.eat();
          return new Result2(char, stream, ResultType2.Mask);
        }
        if (char === promptPlaceholder2) {
          stream.eat();
          return new Result2(prompt2, stream, ResultType2.Mask);
        }
        stream.eat_input();
      }
      stream.eat();
      return new Result2(prompt2, stream, ResultType2.Mask);
    });
  };
};
var literal2 = function(_token) {
  return new Parser2(function(stream) {
    var char = stream.peek().char;
    if (char === _token) {
      stream.eat();
      return new Result2(_token, stream, ResultType2.Literal);
    }
    return new Result2(_token, stream, ResultType2.Literal);
  });
};
var unmask2 = function(prompt2) {
  return function(rule) {
    return new Parser2(function(stream) {
      while (!stream.eof()) {
        var _a3 = stream.peek(), char = _a3.char, control = _a3.control;
        if (char === prompt2 && control === prompt2) {
          stream.eat();
          return new Result2(char, stream);
        }
        if (rule.test(char)) {
          stream.eat();
          return new Result2(char, stream);
        }
        stream.eat_input();
      }
      stream.eat();
      return new Result2("", stream);
    });
  };
};
var unliteral2 = function(_token) {
  return new Parser2(function(stream) {
    if (stream.eof()) {
      return new Result2("", stream);
    }
    var char = stream.peek().char;
    if (char === _token) {
      stream.eat();
    }
    return new Result2(_token, stream);
  });
};
var token2 = function(rules2, creator) {
  return new Parser2(function(stream) {
    var char = stream.next().char;
    var rule = rules2[char];
    if (char === ESCAPE_CHARACTER2) {
      char = stream.next().char;
      return new Result2(creator.literal(char), stream);
    }
    if (!rule) {
      return new Result2(creator.literal(char), stream);
    }
    return new Result2(creator.mask(rule), stream);
  });
};
var rawMask2 = function(_a3) {
  var prompt2 = _a3.prompt, promptPlaceholder2 = _a3.promptPlaceholder;
  return new Parser2(function(stream) {
    var char = stream.next().char;
    if (char === prompt2) {
      return new Result2(promptPlaceholder2, stream);
    }
    return new Result2(char, stream);
  });
};
var rawLiteral2 = function(includeLiterals2) {
  return new Parser2(function(stream) {
    var char = stream.next().char;
    if (includeLiterals2) {
      return new Result2(char, stream);
    }
    return new Result2("", stream);
  });
};

// node_modules/@progress/kendo-inputs-common/dist/es/maskedtextbox/parsing/combinators.js
var always2 = function(value2) {
  return new Parser2(function(stream) {
    return new Result2(value2, stream);
  });
};
var append2 = function(p1, p2) {
  return p1.chain(function(vs) {
    return p2.map(function(v) {
      return vs.concat([v]);
    });
  });
};
var sequence2 = function(list) {
  return list.reduce(function(acc, parser) {
    return append2(acc, parser);
  }, always2([]));
};
var greedy2 = function(parser) {
  return new Parser2(function(stream) {
    var result = new Result2([], stream);
    while (!stream.eof()) {
      result = result.concat(parser.run(stream));
    }
    return result;
  });
};

// node_modules/@progress/kendo-inputs-common/dist/es/maskedtextbox/masking.service.js
var MaskingService2 = (
  /** @class */
  function() {
    function MaskingService3() {
      this.rules = {};
      this.prompt = "_";
      this.mask = "";
      this.promptPlaceholder = " ";
      this.includeLiterals = false;
      this.maskTokens = [];
      this.unmaskTokens = [];
      this.rawTokens = [];
      this.validationTokens = [];
    }
    MaskingService3.prototype.update = function(_a3) {
      var _b = _a3.mask, mask4 = _b === void 0 ? "" : _b, _c = _a3.prompt, prompt2 = _c === void 0 ? "" : _c, _d = _a3.promptPlaceholder, promptPlaceholder2 = _d === void 0 ? " " : _d, _e = _a3.rules, rules2 = _e === void 0 ? {} : _e, _f = _a3.includeLiterals, includeLiterals2 = _f === void 0 ? false : _f;
      this.mask = mask4;
      this.prompt = prompt2;
      this.promptPlaceholder = promptPlaceholder2;
      this.rules = rules2;
      this.includeLiterals = includeLiterals2;
      this.tokenize();
    };
    MaskingService3.prototype.validationValue = function(maskedValue) {
      if (maskedValue === void 0) {
        maskedValue = "";
      }
      var value2 = maskedValue;
      sequence2(this.validationTokens).run(maskedValue).fold(function(unmasked) {
        value2 = unmasked.join("");
      });
      return value2;
    };
    MaskingService3.prototype.rawValue = function(maskedValue) {
      if (maskedValue === void 0) {
        maskedValue = "";
      }
      var value2 = maskedValue;
      if (!this.rawTokens.length) {
        return value2;
      }
      sequence2(this.rawTokens).run(maskedValue).fold(function(unmasked) {
        value2 = unmasked.join("");
      });
      return value2;
    };
    MaskingService3.prototype.maskRaw = function(rawValue2) {
      if (rawValue2 === void 0) {
        rawValue2 = "";
      }
      var value2 = rawValue2;
      if (!this.maskTokens.length) {
        return value2;
      }
      sequence2(this.maskTokens).run(rawValue2).fold(function(masked) {
        value2 = masked.join("");
      });
      return value2;
    };
    MaskingService3.prototype.maskInput = function(input, control, splitPoint) {
      if (input.length < control.length) {
        return this.maskRemoved(input, control, splitPoint);
      }
      return this.maskInserted(input, control, splitPoint);
    };
    MaskingService3.prototype.maskInRange = function(pasted, oldValue, start, end) {
      var value2 = "";
      var selection2 = end;
      var beforeChange = oldValue.split("").slice(0, start);
      var afterChange = oldValue.split("").slice(end);
      sequence2(this.maskTokens.slice(start, end)).run(pasted).fold(function(masked) {
        value2 = beforeChange.concat(masked).concat(afterChange).join("");
      });
      return {
        selection: selection2,
        value: value2
      };
    };
    MaskingService3.prototype.maskRemoved = function(input, control, splitPoint) {
      var _this = this;
      var value2 = "";
      var selection2 = splitPoint;
      var unchanged = input.split("").slice(splitPoint);
      var changed = input.split("").slice(0, splitPoint).join("");
      var take = this.maskTokens.length - (input.length - splitPoint);
      sequence2(this.maskTokens.slice(0, take)).run(changed, control).fold(function(masked) {
        selection2 = _this.adjustPosition(masked, selection2);
        value2 = masked.concat(unchanged).join("");
      });
      return {
        selection: selection2,
        value: value2
      };
    };
    MaskingService3.prototype.adjustPosition = function(input, selection2) {
      var caretChar = input[selection2];
      var isLiteral = this.maskTokens[selection2].isLiteral(caretChar);
      if (!isLiteral && caretChar !== this.prompt) {
        return selection2 + 1;
      }
      return selection2;
    };
    MaskingService3.prototype.maskInserted = function(input, control, splitPoint) {
      var _this = this;
      var value2 = "";
      var selection2 = splitPoint;
      var changed = input.slice(0, splitPoint);
      sequence2(this.unmaskTokens).run(changed, control).chain(function(unmasked) {
        selection2 = unmasked.join("").length;
        var unchanged = control.slice(selection2);
        return sequence2(_this.maskTokens).run(unmasked.join("") + unchanged, control);
      }).fold(function(masked) {
        value2 = masked.join("");
      });
      return {
        selection: selection2,
        value: value2
      };
    };
    Object.defineProperty(MaskingService3.prototype, "maskTokenCreator", {
      get: function() {
        var _a3 = this, prompt2 = _a3.prompt, promptPlaceholder2 = _a3.promptPlaceholder;
        return {
          literal: function(rule) {
            return literal2(rule);
          },
          mask: function(rule) {
            return mask3({ prompt: prompt2, promptPlaceholder: promptPlaceholder2 })(rule);
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MaskingService3.prototype, "unmaskTokenCreator", {
      get: function() {
        var _this = this;
        return {
          literal: function(rule) {
            return unliteral2(rule);
          },
          mask: function(rule) {
            return unmask2(_this.prompt)(rule);
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MaskingService3.prototype, "rawTokenCreator", {
      get: function() {
        var _a3 = this, prompt2 = _a3.prompt, promptPlaceholder2 = _a3.promptPlaceholder, includeLiterals2 = _a3.includeLiterals;
        return {
          literal: function(_) {
            return rawLiteral2(includeLiterals2);
          },
          mask: function(_) {
            return rawMask2({ prompt: prompt2, promptPlaceholder: promptPlaceholder2 });
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MaskingService3.prototype, "validationTokenCreator", {
      get: function() {
        var prompt2 = this.prompt;
        return {
          literal: function(_) {
            return rawLiteral2(false);
          },
          mask: function(_) {
            return rawMask2({ prompt: prompt2, promptPlaceholder: "" });
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MaskingService3.prototype.tokenize = function() {
      var _this = this;
      greedy2(token2(this.rules, this.maskTokenCreator)).run(this.mask).fold(function(tokens, _) {
        _this.maskTokens = tokens;
      });
      greedy2(token2(this.rules, this.unmaskTokenCreator)).run(this.mask).fold(function(tokens, _) {
        _this.unmaskTokens = tokens;
      });
      greedy2(token2(this.rules, this.rawTokenCreator)).run(this.mask).fold(function(tokens, _) {
        _this.rawTokens = tokens;
      });
      greedy2(token2(this.rules, this.validationTokenCreator)).run(this.mask).fold(function(tokens, _) {
        _this.validationTokens = tokens;
      });
    };
    return MaskingService3;
  }()
);

// node_modules/@progress/kendo-inputs-common/dist/es/common/drawing-utils.js
var _a2 = drawing_exports.util;
var elementOffset = _a2.elementOffset;
var limitValue = _a2.limitValue;

// node_modules/@progress/kendo-inputs-common/dist/es/signature/signature-pad.js
var Point = geometry_exports.Point;
var Rect = geometry_exports.Rect;
var transform = geometry_exports.transform;
var noop2 = function() {
};
var DECIMAL_DIGITS = 3;
var DEFAULT_COLOR = "#000";
var DEFAULT_BACKGROUND_COLOR = "#fff";
var DEFAULT_PRECISION = 1;
var DEFAULT_SAMPLING_RATE = 200;
var DEFAULT_STROKE_WIDTH = 1;
var DEFAULT_WIDTH = 750;
var DEFAULT_HEIGHT = 250;
var DEFAULT_SCALE = 1;
var DEFAULT_EXPORT_SCALE = 6;
var SignaturePad = (
  /** @class */
  function() {
    function SignaturePad2(element2, options) {
      if (options === void 0) {
        options = {};
      }
      this.element = element2;
      this.lastMoveTime = 0;
      this.options = Object.assign({
        scale: DEFAULT_SCALE,
        precision: DEFAULT_PRECISION,
        samplingRate: DEFAULT_SAMPLING_RATE,
        smooth: options.smooth !== false,
        color: options.color || DEFAULT_COLOR,
        backgroundColor: options.backgroundColor || DEFAULT_BACKGROUND_COLOR,
        strokeWidth: DEFAULT_STROKE_WIDTH,
        onChange: noop2,
        onDraw: noop2,
        onDrawEnd: noop2
      }, options);
      this.pathOptions = {
        stroke: {
          color: this.options.color,
          width: this.options.strokeWidth,
          lineCap: "round",
          lineJoin: "round"
        }
      };
      this.initSurface();
      this.attachEvents();
    }
    SignaturePad2.prototype.destroy = function() {
      this.detachEvents();
    };
    SignaturePad2.prototype.clear = function() {
      this.rootGroup.clear();
      this.path = null;
    };
    Object.defineProperty(SignaturePad2.prototype, "isDrawing", {
      get: function() {
        return Boolean(this.points);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SignaturePad2.prototype, "pathData", {
      get: function() {
        var _a3;
        return (_a3 = this.path) === null || _a3 === void 0 ? void 0 : _a3.toString(DECIMAL_DIGITS);
      },
      set: function(value2) {
        this.clear();
        this.path = MultiPath.parse(value2, this.pathOptions);
        this.rootGroup.append(this.path);
      },
      enumerable: false,
      configurable: true
    });
    SignaturePad2.prototype.loadImage = function(data20, size2) {
      if (size2 === void 0) {
        size2 = [];
      }
      if (!data20) {
        this.clear();
        return;
      }
      var _a3 = this.size, width = _a3[0], height = _a3[1];
      var contentWidth = width / this.options.scale;
      var contentHeight = height / this.options.scale;
      var importWidth = size2[0] || contentWidth * DEFAULT_EXPORT_SCALE;
      var importHeight = size2[1] || contentHeight * DEFAULT_EXPORT_SCALE;
      var scaleX = contentWidth / importWidth;
      var scaleY = contentHeight / importHeight;
      var scale = Math.min(scaleX, scaleY);
      var img = new image_default(data20, new geometry_exports.Rect([0, 0], [importWidth, importHeight]));
      img.transform(transform().scale(scale, scale));
      this.clear();
      this.rootGroup.append(img);
    };
    SignaturePad2.prototype.exportImage = function(options) {
      var _a3;
      var _b = this.size, width = _b[0], height = _b[1];
      var contentWidth = width / this.options.scale;
      var contentHeight = height / this.options.scale;
      var exportWidth = (options === null || options === void 0 ? void 0 : options.width) || contentWidth * DEFAULT_EXPORT_SCALE;
      var exportHeight = (options === null || options === void 0 ? void 0 : options.height) || contentHeight * DEFAULT_EXPORT_SCALE;
      var scaleX = exportWidth / contentWidth;
      var scaleY = exportHeight / contentHeight;
      var scale = Math.min(scaleX, scaleY);
      var exportRect = new Rect([0, 0], [exportWidth, exportHeight]);
      var exportGroup = new group_default({
        clip: Path.fromRect(exportRect)
      });
      var contentGroup = new group_default({
        transform: transform().scale(scale, scale)
      });
      var frame = Path.fromRect(exportRect, {
        fill: {
          color: this.options.backgroundColor
        }
      });
      exportGroup.append(frame);
      exportGroup.append(contentGroup);
      (_a3 = contentGroup.children).push.apply(_a3, this.rootGroup.children);
      return exportImage(exportGroup, Object.assign({
        width: exportWidth,
        height: exportHeight
      }, options));
    };
    SignaturePad2.prototype.resize = function() {
      this.surface.resize(true);
    };
    SignaturePad2.prototype.setOptions = function(options) {
      Object.assign(this.options, options);
      this.pathOptions.stroke.color = this.options.color;
      this.pathOptions.stroke.width = this.options.strokeWidth;
      if (this.path) {
        this.path.options.set("stroke.color", this.options.color);
        this.path.options.set("stroke.width", this.options.strokeWidth);
      }
      this.background.options.set("fill.color", this.options.backgroundColor);
    };
    SignaturePad2.prototype.initSurface = function() {
      this.surface = surface_default.create(this.element, { type: "canvas" });
      this.element.style.touchAction = "none";
      var scale = this.options.scale;
      this.rootGroup = new group_default({
        transform: transform().scale(scale, scale)
      });
      var width = this.element.offsetWidth || DEFAULT_WIDTH;
      var height = this.element.offsetHeight || DEFAULT_HEIGHT;
      this.size = [width, height];
      this.background = Path.fromRect(new Rect([0, 0], this.size), {
        fill: {
          color: this.options.backgroundColor
        }
      });
      this.surface.draw(this.background);
      this.surface.draw(this.rootGroup);
    };
    SignaturePad2.prototype.attachEvents = function() {
      this.onPointerDown = this.onPointerDown.bind(this);
      this.onPointerMove = this.onPointerMove.bind(this);
      this.onPointerUp = this.onPointerUp.bind(this);
      this.element.addEventListener("pointerdown", this.onPointerDown);
      this.element.addEventListener("pointermove", this.onPointerMove);
      this.element.addEventListener("pointerup", this.onPointerUp);
    };
    SignaturePad2.prototype.detachEvents = function() {
      this.element.removeEventListener("pointerdown", this.onPointerDown);
      this.element.removeEventListener("pointermove", this.onPointerMove);
      this.element.removeEventListener("pointerup", this.onPointerUp);
    };
    SignaturePad2.prototype.touchPoint = function(e) {
      var offset = elementOffset(this.element);
      var pageX = e.pageX;
      var pageY = e.pageY;
      var scale = 1 / this.options.scale;
      return new Point(pageX - offset.left, pageY - offset.top).scale(scale, scale);
    };
    SignaturePad2.prototype.onPointerDown = function(e) {
      if (this.options.readonly || !e.isPrimary || !isMainButton(e)) {
        return;
      }
      if (!this.path) {
        this.path = new MultiPath(this.pathOptions);
        this.rootGroup.append(this.path);
      }
      this.options.onDraw();
      this.element.setPointerCapture(e.pointerId);
      var point = this.touchPoint(e);
      this.points = [point];
      this.path.moveTo(point);
    };
    SignaturePad2.prototype.onPointerMove = function(e) {
      if (!this.points || !e.isPrimary) {
        return;
      }
      var now = (/* @__PURE__ */ new Date()).getTime();
      var elapsed = now - this.lastMoveTime;
      var minTimeDelta = 1e3 / limitValue(this.options.samplingRate, 1, 1e4);
      if (elapsed < minTimeDelta) {
        return;
      } else {
        this.lastMoveTime = now;
      }
      var point = this.touchPoint(e);
      var lastPoint = this.points[this.points.length - 1];
      var minDelta = 1 / limitValue(this.options.precision, 0.01, 100);
      if (point.distanceTo(lastPoint) < minDelta) {
        return;
      }
      this.points.push(point);
      this.path.lineTo(point);
    };
    SignaturePad2.prototype.onPointerUp = function(e) {
      if (!e.isPrimary || !this.path || !this.points || this.options.readonly) {
        return;
      }
      if (this.options.smooth) {
        var segments = Path.curveFromPoints(this.points);
        this.path.paths.splice(this.path.paths.length - 1, 1, segments);
      }
      this.points = null;
      this.options.onDrawEnd();
      this.options.onChange(this.pathData);
    };
    return SignaturePad2;
  }()
);
function isMainButton(e) {
  return typeof e.button !== "number" || e.button === 0;
}

// node_modules/@progress/kendo-vue-inputs/dist/es/signature/SignatureCanvas.js
var allVue30 = vue_runtime_esm_bundler_exports;
var gh29 = allVue30.h;
var isV330 = allVue30.version && allVue30.version[0] === "3";
var ref11 = allVue30.ref;
var setOptions = function setOptions2() {
  if (this.instance) {
    this.instance.setOptions(this.getOptions());
  }
};
var SignatureCanvasVue2 = {
  name: "KendoSignatureCanvas",
  // @ts-ignore
  emits: {
    change: null,
    draw: null,
    drawend: null
  },
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  props: {
    strokeWidth: Number,
    popupScale: Number,
    scale: Number,
    name: String,
    value: String,
    tabIndex: Number,
    disabled: Boolean,
    readOnly: Boolean,
    color: String,
    backgroundColor: String,
    elementSize: Function,
    smooth: Boolean
  },
  watch: {
    color: setOptions,
    backgroundColor: setOptions,
    smooth: setOptions,
    strokeWidth: setOptions,
    readOnly: setOptions
  },
  mounted: function mounted19() {
    this.canvas = this.$el;
    var pad = new SignaturePad(this.canvas, this.getOptions());
    if (this.value) {
      pad.loadImage(this.value);
    }
    this.instance = pad;
    this.instance.setOptions({
      onChange: this.onValueChange,
      onDraw: this.onDraw,
      onDrawEnd: this.onDrawEnd
    });
  },
  destroyed: !!isV330 ? void 0 : function() {
    if (this.instance) {
      this.instance.destroy();
    }
  },
  // @ts-ignore
  unmounted: function unmounted2() {
    if (this.instance) {
      this.instance.destroy();
    }
  },
  // @ts-ignore
  setup: !isV330 ? void 0 : function() {
    var v3 = !!isV330;
    return {
      v3
    };
  },
  render: function render29(createElement) {
    var h = gh29 || createElement;
    return h("div", {
      "class": "k-signature-canvas",
      tabIndex: getTabIndex(this.$props.tabIndex, this.$props.disabled),
      attrs: this.v3 ? void 0 : {
        tabIndex: getTabIndex(this.$props.tabIndex, this.$props.disabled),
        role: "img",
        id: this.$props.id,
        name: this.$props.name,
        "aria-label": this.$props.ariaLabel,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        "aria-disabled": this.$props.disabled ? "true" : void 0
      },
      role: "img",
      id: this.$props.id,
      name: this.$props.name,
      "aria-label": this.$props.ariaLabel,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      "aria-disabled": this.$props.disabled ? "true" : void 0
    });
  },
  methods: {
    onValueChange: function onValueChange() {
      var that = this;
      this.exportImage(this.elementSize()).then(function(nextValue) {
        that.$emit("change", nextValue);
      });
    },
    onDraw: function onDraw() {
      this.$emit("draw");
    },
    onDrawEnd: function onDrawEnd() {
      this.$emit("drawend");
    },
    loadImage: function loadImage(newLocale) {
      this.instance.loadImage(newLocale);
    },
    clear: function clear() {
      this.instance.clear();
    },
    getOptions: function getOptions() {
      return {
        scale: this.popupScale,
        color: this.color,
        backgroundColor: this.backgroundColor,
        strokeWidth: this.$props.strokeWidth,
        smooth: this.$props.smooth,
        readonly: this.$props.readOnly
      };
    },
    exportImage: function exportImage2(exportSize) {
      var _a3;
      var width = exportSize.width, height = exportSize.height;
      return (_a3 = this.instance) === null || _a3 === void 0 ? void 0 : _a3.exportImage({
        width: width * this.scale,
        height: height * this.scale
      });
    }
  }
};
var SignatureCanvas = SignatureCanvasVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/signature/SignatureDialog.js
var allVue31 = vue_runtime_esm_bundler_exports;
var gh30 = allVue31.h;
var isV331 = allVue31.version && allVue31.version[0] === "3";
var SignatureDialogVue2 = {
  name: "KendoSignatureDialog",
  // @ts-ignore
  emits: {
    change: null,
    clear: null,
    close: null,
    focus: null,
    blur: null,
    overlayclick: null,
    draw: null,
    drawend: null
  },
  props: {
    openWrapperClass: Object,
    size: String,
    dir: String,
    popupWidth: Number,
    popupHeight: Number,
    showClear: Boolean,
    strokeWidth: Number,
    popupScale: Number,
    scale: Number,
    value: String,
    tabIndex: Number,
    disabled: Boolean,
    readOnly: Boolean,
    color: String,
    backgroundColor: String,
    elementSize: Function,
    smooth: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data18() {
    return {
      isDrawing: false
    };
  },
  mounted: function mounted20() {
    this.openCanvas = getRef(this, "openCanvas");
  },
  // @ts-ignore
  setup: !isV331 ? void 0 : function() {
    var v3 = !!isV331;
    return {
      v3
    };
  },
  render: function render30(createElement) {
    var _this = this;
    var h = gh30 || createElement;
    var _a3 = this.$props, showClear = _a3.showClear, popupWidth = _a3.popupWidth, popupHeight = _a3.popupHeight, dir = _a3.dir, size2 = _a3.size, value2 = _a3.value, tabIndex = _a3.tabIndex, disabled = _a3.disabled, readOnly = _a3.readOnly, color = _a3.color, backgroundColor = _a3.backgroundColor, strokeWidth = _a3.strokeWidth, smooth = _a3.smooth, popupScale = _a3.popupScale, scale = _a3.scale, elementSize2 = _a3.elementSize;
    var ls = provideLocalizationService(this);
    var minimizeTitle = ls.toLanguageString(signatureMinimize, messages[signatureMinimize]);
    var clearTitle = ls.toLanguageString(signatureClear, messages[signatureClear]);
    var hideLine = !this.$props.hideLine && h(SignatureLine);
    var bottomActions = h(SignatureBottomActions, {
      showClear,
      attrs: this.v3 ? void 0 : {
        showClear,
        size: size2,
        title: clearTitle
      },
      size: size2,
      onClear: this.onClear,
      on: this.v3 ? void 0 : {
        "clear": this.onClear
      },
      title: clearTitle
    });
    var dialog = (
      // @ts-ignore function children
      h(Dialog, {
        ref: setRef(this, "dialog"),
        onOverlayclick: this.onOverlayClick,
        on: this.v3 ? void 0 : {
          "overlayclick": this.onOverlayClick
        }
      }, this.v3 ? function() {
        return [h("div", {
          style: {
            width: popupWidth + "px",
            height: popupHeight + "px"
          },
          dir,
          attrs: _this.v3 ? void 0 : {
            dir
          },
          "class": _this.openWrapperClass,
          onFocus: _this.onFocus,
          on: _this.v3 ? void 0 : {
            "focus": _this.onFocus,
            "blur": _this.onBlur
          },
          onBlur: _this.onBlur
        }, [h(SignatureCanvas, {
          ref: setRef(_this, "openCanvas"),
          value: value2,
          attrs: _this.v3 ? void 0 : {
            value: value2,
            tabIndex,
            disabled,
            readOnly,
            color,
            backgroundColor,
            strokeWidth,
            smooth,
            popupScale,
            scale,
            elementSize: elementSize2
          },
          tabIndex,
          disabled,
          readOnly,
          color,
          backgroundColor,
          strokeWidth,
          smooth,
          popupScale,
          scale,
          onChange: _this.onValueChange,
          on: _this.v3 ? void 0 : {
            "change": _this.onValueChange,
            "draw": _this.onDraw,
            "drawend": _this.onDrawEnd
          },
          elementSize: elementSize2,
          onDraw: _this.onDraw,
          onDrawend: _this.onDrawEnd
        }), h("div", {
          "class": "k-signature-actions k-signature-actions-top"
        }, [!_this.isDrawing && // @ts-ignore
        h(Button, {
          "class": "k-signature-action k-signature-minimize k-rotate-180",
          ref: setRef(_this, "minimizeButton"),
          icon: "hyperlink-open",
          attrs: _this.v3 ? void 0 : {
            icon: "hyperlink-open",
            svgIcon: hyperlinkOpenIcon,
            shape: null,
            fillMode: "flat",
            size: _this.$props.size,
            "aria-label": minimizeTitle,
            title: minimizeTitle
          },
          svgIcon: hyperlinkOpenIcon,
          shape: null,
          fillMode: "flat",
          size: _this.$props.size,
          onClick: _this.onMinimizeClick,
          on: _this.v3 ? void 0 : {
            "click": _this.onMinimizeClick
          },
          "aria-label": minimizeTitle,
          title: minimizeTitle
        })]), hideLine, bottomActions])];
      } : [h("div", {
        style: {
          width: popupWidth + "px",
          height: popupHeight + "px"
        },
        dir,
        attrs: _this.v3 ? void 0 : {
          dir
        },
        "class": _this.openWrapperClass,
        onFocus: _this.onFocus,
        on: _this.v3 ? void 0 : {
          "focus": _this.onFocus,
          "blur": _this.onBlur
        },
        onBlur: _this.onBlur
      }, [h(SignatureCanvas, {
        ref: setRef(_this, "openCanvas"),
        value: value2,
        attrs: _this.v3 ? void 0 : {
          value: value2,
          tabIndex,
          disabled,
          readOnly,
          color,
          backgroundColor,
          strokeWidth,
          smooth,
          popupScale,
          scale,
          elementSize: elementSize2
        },
        tabIndex,
        disabled,
        readOnly,
        color,
        backgroundColor,
        strokeWidth,
        smooth,
        popupScale,
        scale,
        onChange: _this.onValueChange,
        on: _this.v3 ? void 0 : {
          "change": _this.onValueChange,
          "draw": _this.onDraw,
          "drawend": _this.onDrawEnd
        },
        elementSize: elementSize2,
        onDraw: _this.onDraw,
        onDrawend: _this.onDrawEnd
      }), h("div", {
        "class": "k-signature-actions k-signature-actions-top"
      }, [!_this.isDrawing && h(Button, {
        "class": "k-signature-action k-signature-minimize k-rotate-180",
        ref: setRef(_this, "minimizeButton"),
        icon: "hyperlink-open",
        attrs: _this.v3 ? void 0 : {
          icon: "hyperlink-open",
          svgIcon: hyperlinkOpenIcon,
          shape: null,
          fillMode: "flat",
          size: _this.$props.size,
          "aria-label": minimizeTitle,
          title: minimizeTitle
        },
        svgIcon: hyperlinkOpenIcon,
        shape: null,
        fillMode: "flat",
        size: _this.$props.size,
        onClick: _this.onMinimizeClick,
        on: _this.v3 ? void 0 : {
          "click": _this.onMinimizeClick
        },
        "aria-label": minimizeTitle,
        title: minimizeTitle
      })]), hideLine, bottomActions])])
    );
    return dialog;
  },
  methods: {
    onDraw: function onDraw2() {
      this.isDrawing = true;
      this.$emit("draw");
    },
    onDrawEnd: function onDrawEnd2() {
      this.isDrawing = false;
      this.$emit("drawend");
    },
    onValueChange: function onValueChange2(nextValue) {
      this.$emit("change", nextValue);
    },
    onClear: function onClear2() {
      this.$emit("clear");
    },
    onMinimizeClick: function onMinimizeClick() {
      this.$emit("close");
    },
    onFocus: function onFocus6(e) {
      this.$emit("focus", e);
    },
    onBlur: function onBlur6(e) {
      this.$emit("blur", e);
    },
    onOverlayClick: function onOverlayClick(e) {
      this.$emit("overlayclick", e);
    }
  }
};
var SignatureDialog = SignatureDialogVue2;

// node_modules/@progress/kendo-vue-inputs/dist/es/signature/utils/main.js
function hasParent(element2, parent) {
  var current = element2;
  while (current && current !== parent) {
    current = current.parentNode;
  }
  return current ? true : false;
}

// node_modules/@progress/kendo-vue-inputs/dist/es/signature/Signature.js
var __assign14 = function() {
  __assign14 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign14.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  }, f, y, t, g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var allVue32 = vue_runtime_esm_bundler_exports;
var gh31 = allVue32.h;
var isV332 = allVue32.version && allVue32.version[0] === "3";
var ref12 = allVue32.ref;
var DEFAULT_WIDTH2 = 250;
var DEFAULT_HEIGHT2 = 84;
var DEFAULT_POPUP_SCALE = 3;
var DEFAULT_EXPORT_SCALE2 = 2;
var DEFAULT_COLOR2 = "#000000";
var DEFAULT_BACKGROUND_COLOR2 = "#ffffff";
var SignatureVue2 = {
  name: "KendoSignature",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    change: null,
    focus: null,
    blur: null,
    open: null,
    close: null,
    "changemodel": null,
    "update:modelValue": null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    strokeWidth: {
      type: Number,
      default: 1
    },
    smooth: Boolean,
    popupScale: {
      type: Number,
      default: DEFAULT_POPUP_SCALE
    },
    exportScale: {
      type: Number,
      default: DEFAULT_EXPORT_SCALE2
    },
    modelValue: String,
    name: String,
    value: String,
    tabIndex: Number,
    dir: String,
    ariaDescribedBy: String,
    ariaLabelledBy: String,
    ariaLabel: String,
    hideLine: Boolean,
    open: {
      type: Boolean,
      default: void 0
    },
    readOnly: Boolean,
    disabled: Boolean,
    validationMessage: String,
    maximizable: {
      type: Boolean,
      default: true
    },
    color: String,
    backgroundColor: String,
    validityStyles: {
      type: Boolean,
      default: true
    },
    required: {
      type: Boolean,
      default: false
    },
    valid: {
      type: Boolean,
      default: void 0
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator33(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator34(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator35(value2) {
        return [null, "solid", "flat", "outline"].includes(value2);
      }
    }
  },
  created: function created19() {
    validatePackage(packageMetadata);
  },
  computed: {
    wrapperClass: function wrapperClass2() {
      return __assign14(__assign14({}, this.openWrapperClass), {
        "k-signature-maximized": false
      });
    },
    openWrapperClass: function openWrapperClass() {
      var _a3;
      var isValid3 = !this.validityStyles || this.validityGetter().valid;
      return _a3 = {
        "k-input": true,
        "k-signature": true,
        "k-signature-maximized": true
      }, _a3["k-signature-".concat(kendoThemeMaps.sizeMap[this.$props.size] || this.$props.size)] = this.$props.size, _a3["k-input-".concat(this.$props.fillMode)] = this.$props.fillMode, _a3["k-rounded-".concat(kendoThemeMaps.roundedMap[this.$props.rounded] || this.$props.rounded)] = this.$props.rounded, _a3["k-invalid"] = !isValid3, _a3["k-required"] = this.$props.required, _a3["k-disabled"] = this.$props.disabled, _a3["k-focus"] = this.focused, _a3;
    },
    computedValue: function computedValue9() {
      return this.value !== void 0 ? this.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.currentValue;
    },
    computedOpen: function computedOpen2() {
      return this.open !== void 0 ? this.open : this.currentOpen;
    },
    computedColor: function computedColor2() {
      var defaultColor = DEFAULT_COLOR2;
      if (!this.$props.color && typeof document !== "undefined" && this.$el) {
        defaultColor = getComputedStyle(this.$el).color;
      }
      return this.$props.color || defaultColor;
    },
    computedBgColor: function computedBgColor2() {
      var defaultBackgroundColor = DEFAULT_BACKGROUND_COLOR2;
      if (!this.$props.backgroundColor && typeof document !== "undefined" && this.$el) {
        defaultBackgroundColor = getComputedStyle(this.$el).backgroundColor;
      }
      return this.$props.backgroundColor || defaultBackgroundColor;
    }
  },
  watch: {
    computedValue: function computedValue10(newValue) {
      if (newValue !== this.currentValue) {
        this.loadImage(newValue);
      }
    },
    computedOpen: function computedOpen3() {
      this.loadImage(this.computedValue);
    }
  },
  data: function data19() {
    return {
      focused: false,
      isDrawing: false,
      currentValue: void 0,
      popupValue: void 0,
      currentOpen: false
    };
  },
  mounted: function mounted21() {
    this.setRefs();
  },
  updated: function updated13() {
    this.setRefs();
  },
  // @ts-ignore
  setup: !isV332 ? void 0 : function() {
    var v3 = !!isV332;
    var inputRef = ref12(null);
    return {
      v3,
      inputRef
    };
  },
  render: function render31(createElement) {
    var h = gh31 || createElement;
    var ls = provideLocalizationService(this);
    var showMaximize = !(this.computedOpen || this.isDrawing || !this.$props.maximizable || this.$props.disabled);
    var isEmpty = !this.computedValue;
    var showClear = !(isEmpty || this.isDrawing || this.$props.readOnly || this.$props.disabled);
    var maximizeTitle = ls.toLanguageString(signatureMaximize, messages[signatureMaximize]);
    var clearTitle = ls.toLanguageString(signatureClear, messages[signatureClear]);
    var actions = h("div", {
      "class": "k-signature-actions k-signature-actions-top"
    }, [showMaximize && // @ts-ignore
    h(Button, {
      "class": "k-signature-action k-signature-maximize",
      ref: setRef(this, "maximizeButton"),
      icon: "hyperlink-open",
      attrs: this.v3 ? void 0 : {
        icon: "hyperlink-open",
        svgIcon: hyperlinkOpenIcon,
        shape: null,
        fillMode: "flat",
        size: this.$props.size,
        "aria-label": maximizeTitle,
        title: maximizeTitle
      },
      svgIcon: hyperlinkOpenIcon,
      shape: null,
      fillMode: "flat",
      size: this.$props.size,
      onClick: this.onMaximizeClick,
      on: this.v3 ? void 0 : {
        "click": this.onMaximizeClick
      },
      "aria-label": maximizeTitle,
      title: maximizeTitle
    })]);
    var hideLine = !this.$props.hideLine && h(SignatureLine);
    var bottomActions = h(SignatureBottomActions, {
      showClear,
      attrs: this.v3 ? void 0 : {
        showClear,
        size: this.size,
        title: clearTitle
      },
      size: this.size,
      onClear: this.onClear,
      on: this.v3 ? void 0 : {
        "clear": this.onClear
      },
      title: clearTitle
    });
    return h("div", {
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      },
      "class": this.wrapperClass,
      onFocus: this.onFocus,
      on: this.v3 ? void 0 : {
        "focus": this.onFocus,
        "blur": this.onBlur
      },
      onBlur: this.onBlur
    }, [h(SignatureCanvas, {
      ref: setRef(this, "canvas"),
      name: this.name,
      attrs: this.v3 ? void 0 : {
        name: this.name,
        value: this.computedValue,
        tabIndex: this.tabIndex,
        disabled: this.disabled,
        readOnly: this.readOnly,
        color: this.computedColor,
        backgroundColor: this.computedBgColor,
        strokeWidth: this.strokeWidth,
        smooth: this.smooth,
        popupScale: 1,
        scale: this.exportScale,
        elementSize: this.elementSize
      },
      value: this.computedValue,
      tabIndex: this.tabIndex,
      disabled: this.disabled,
      readOnly: this.readOnly,
      color: this.computedColor,
      backgroundColor: this.computedBgColor,
      strokeWidth: this.strokeWidth,
      smooth: this.smooth,
      popupScale: 1,
      scale: this.exportScale,
      onChange: this.onValueChange,
      on: this.v3 ? void 0 : {
        "change": this.onValueChange,
        "draw": this.onDraw,
        "drawend": this.onDrawEnd
      },
      elementSize: this.elementSize,
      onDraw: this.onDraw,
      onDrawend: this.onDrawEnd
    }), actions, hideLine, bottomActions, this.computedOpen && h(SignatureDialog, {
      ref: setRef(this, "dialog"),
      openWrapperClass: this.openWrapperClass,
      attrs: this.v3 ? void 0 : {
        openWrapperClass: this.openWrapperClass,
        popupWidth: this.popupWidth,
        popupHeight: this.popupHeight,
        showClear,
        value: this.computedValue,
        tabIndex: this.tabIndex,
        disabled: this.disabled,
        readOnly: this.readOnly,
        color: this.computedColor,
        backgroundColor: this.computedBgColor,
        strokeWidth: this.strokeWidth,
        smooth: this.smooth,
        popupScale: this.$props.popupScale,
        scale: 1 / this.popupScale * this.exportScale,
        elementSize: this.elementSize
      },
      popupWidth: this.popupWidth,
      popupHeight: this.popupHeight,
      showClear,
      onClose: this.onMinimizeClick,
      on: this.v3 ? void 0 : {
        "close": this.onMinimizeClick,
        "clear": this.onClear,
        "overlayclick": this.onOverlayClick,
        "focus": this.onFocus,
        "blur": this.onBlur,
        "change": this.onValueChange,
        "draw": this.onDraw,
        "drawend": this.onDrawEnd
      },
      onClear: this.onClear,
      onOverlayclick: this.onOverlayClick,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      value: this.computedValue,
      tabIndex: this.tabIndex,
      disabled: this.disabled,
      readOnly: this.readOnly,
      color: this.computedColor,
      backgroundColor: this.computedBgColor,
      strokeWidth: this.strokeWidth,
      smooth: this.smooth,
      popupScale: this.$props.popupScale,
      scale: 1 / this.popupScale * this.exportScale,
      onChange: this.onValueChange,
      elementSize: this.elementSize,
      onDraw: this.onDraw,
      onDrawend: this.onDrawEnd
    })]);
  },
  methods: {
    setRefs: function setRefs() {
      this.canvas = getRef(this, "canvas");
      this.minimizeButton = getRef(this, "minimizeButton");
      this.maximizeButton = getRef(this, "maximizeButton");
      this.dialog = getRef(this, "dialog");
      this.popupWidth = this.popupSize().width;
      this.popupHeight = this.popupSize().height;
    },
    onOverlayClick: function onOverlayClick2() {
      this.currentOpen = false;
    },
    onValueChange: function onValueChange3(nextValue) {
      this.currentValue = nextValue;
      this.$emit("changemodel", nextValue);
      this.$emit("update:modelValue", nextValue);
      this.$emit("change", {
        value: nextValue
      });
    },
    onDialogChange: function onDialogChange(e) {
      this.onValueChange(e.value);
    },
    reset: function reset() {
      this.clear();
      this.onValueChange();
    },
    clear: function clear2() {
      if (this.canvas) {
        this.canvas.clear();
      }
      if (this.dialog && this.dialog.openCanvas) {
        this.dialog.openCanvas.clear();
      }
    },
    loadImage: function loadImage2(value2) {
      if (this.canvas) {
        this.canvas.loadImage(value2);
      }
      if (this.dialog && this.dialog.openCanvas) {
        this.dialog.openCanvas.loadImage(value2);
      }
    },
    onDialogClose: function onDialogClose(event) {
      var _a3;
      this.onMinimizeClick(event);
      (_a3 = this.maximizeButton || this.canvas.$el) === null || _a3 === void 0 ? void 0 : _a3.focus();
    },
    exportImage: function exportImage3(exportSize) {
      var _a3;
      var width = exportSize.width, height = exportSize.height;
      return (_a3 = this.canvas.instance) === null || _a3 === void 0 ? void 0 : _a3.exportImage({
        width: width * this.exportScale,
        height: height * this.exportScale
      });
    },
    validityGetter: function validityGetter() {
      var customError = this.$props.validationMessage !== void 0;
      var currentValue = this.computedValue;
      var valueMissing = !currentValue;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : !this.required || !valueMissing;
      return {
        customError,
        valid,
        valueMissing
      };
    },
    focusElement: function focusElement5() {
      this.canvas.$el.focus();
    },
    getImperativeHandle: function getImperativeHandle() {
      var _this = this;
      var options = {
        element: this.$el,
        focus: this.focusElement()
      };
      Object.defineProperty(options, "name", {
        get: function get10() {
          return _this.name;
        }
      });
      Object.defineProperty(options, "value", {
        get: function get10() {
          return _this.computedValue;
        }
      });
      Object.defineProperty(options, "validity", {
        get: function get10() {
          return _this.validityGetter();
        }
      });
      Object.defineProperty(options, "validityStyles", {
        get: function get10() {
          return _this.validityStyles;
        }
      });
      Object.defineProperty(options, "required", {
        get: function get10() {
          return _this.required;
        }
      });
      Object.defineProperty(options, "color", {
        get: function get10() {
          return _this.computedColor;
        }
      });
      Object.defineProperty(options, "backgroundColor", {
        get: function get10() {
          return _this.computedBgColor;
        }
      });
      return options;
    },
    onFocus: function onFocus7(event) {
      if (this.focused || this.computedOpen) {
        return;
      }
      this.focused(true);
      this.$emit("focus", __assign14({
        event
      }, this.getImperativeHandle()));
    },
    onBlur: function onBlur7(event) {
      var insideWrapper = hasParent(event.relatedTarget, this.$el);
      if (insideWrapper) {
        return;
      }
      this.focused = false;
      this.$emit("blur", __assign14({
        event
      }, this.getImperativeHandle()));
    },
    onMaximizeClick: function onMaximizeClick(event) {
      return __awaiter(this, void 0, void 0, function() {
        var that;
        return __generator(this, function(_a3) {
          that = this;
          this.exportImage(this.popupSize()).then(function(newValue) {
            that.currentValue = newValue;
          });
          this.currentOpen = true;
          this.$emit("open", __assign14({
            event
          }, this.getImperativeHandle()));
          return [
            2
            /*return*/
          ];
        });
      });
    },
    onMinimizeClick: function onMinimizeClick2(event) {
      this.currentOpen = false;
      this.$emit("close", __assign14({
        event
      }, this.getImperativeHandle()));
    },
    onClear: function onClear3() {
      this.reset();
      this.focusElement();
    },
    elementSize: function elementSize() {
      var width = this.$props.width || this.$el && this.$el.offsetWidth || DEFAULT_WIDTH2;
      var height = this.$props.height || this.$el && this.$el.offsetHeight || DEFAULT_HEIGHT2;
      return {
        width,
        height
      };
    },
    popupSize: function popupSize() {
      var _a3 = this.elementSize(), width = _a3.width, height = _a3.height;
      return {
        width: width * this.popupScale,
        height: height * this.popupScale
      };
    },
    onDraw: function onDraw3() {
      this.isDrawing = true;
    },
    onDrawEnd: function onDrawEnd3() {
      this.isDrawing = false;
    }
  }
};
var Signature = SignatureVue2;

export {
  ColorPalette,
  InputVue2,
  Input,
  ColorGradient,
  FlatColorPickerVue2,
  FlatColorPicker,
  ColorPickerVue2,
  ColorPicker,
  SwitchVue2,
  Switch,
  InputSeparatorVue2,
  InputSeparator,
  TextBoxVue2,
  TextBox,
  NumericTextBoxVue2,
  NumericTextBox,
  MaskedTextBoxVue2,
  MaskedTextBox,
  SLIDER_LABEL_ATTRIBUTE,
  SliderLabelVue2,
  SliderLabel,
  SliderVue2,
  Slider,
  RangeSliderVue2,
  RangeSlider,
  CheckboxVue2,
  Checkbox,
  RadioButtonVue2,
  RadioButton,
  RadioGroupVue2,
  RadioGroup,
  TextAreaVue2,
  TextArea,
  SignatureVue2,
  Signature
};
//# sourceMappingURL=chunk-N4XRXEE2.js.map
