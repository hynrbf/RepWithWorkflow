import {
  Slide
} from "./chunk-GK4QQKT7.js";
import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";

// node_modules/@progress/kendo-popup-common/dist/es/align-point.js
var align_point_default = {
  "bottom": "bottom",
  "center": "center",
  "middle": "middle",
  "left": "left",
  "right": "right",
  "top": "top"
};

// node_modules/@progress/kendo-popup-common/dist/es/align.js
var align = function(options) {
  var anchorRect = options.anchorRect;
  var anchorAlign = options.anchorAlign;
  var elementRect = options.elementRect;
  var elementAlign = options.elementAlign;
  var margin = options.margin;
  if (margin === void 0)
    margin = {};
  var anchorHorizontal = anchorAlign.horizontal;
  var anchorVertical = anchorAlign.vertical;
  var elementHorizontal = elementAlign.horizontal;
  var elementVertical = elementAlign.vertical;
  var horizontalMargin = margin.horizontal || 0;
  var verticalMargin = margin.vertical || 0;
  var top = anchorRect.top;
  var left = anchorRect.left;
  if (anchorVertical === align_point_default.bottom) {
    top += anchorRect.height;
  }
  if (anchorVertical === align_point_default.center || anchorVertical === align_point_default.middle) {
    top += Math.round(anchorRect.height / 2);
  }
  if (elementVertical === align_point_default.bottom) {
    top -= elementRect.height;
    verticalMargin *= -1;
  }
  if (elementVertical === align_point_default.center || elementVertical === align_point_default.middle) {
    top -= Math.round(elementRect.height / 2);
    verticalMargin *= -1;
  }
  if (anchorHorizontal === align_point_default.right) {
    left += anchorRect.width;
  }
  if (anchorHorizontal === align_point_default.center || anchorHorizontal === align_point_default.middle) {
    left += Math.round(anchorRect.width / 2);
  }
  if (elementHorizontal === align_point_default.right) {
    left -= elementRect.width;
    horizontalMargin *= -1;
  }
  if (elementHorizontal === align_point_default.center || elementHorizontal === align_point_default.middle) {
    left -= Math.round(elementRect.width / 2);
    horizontalMargin *= -1;
  }
  return {
    top: top + verticalMargin,
    left: left + horizontalMargin
  };
};
var align_default = align;

// node_modules/@progress/kendo-popup-common/dist/es/add-scroll.js
function addScroll(rect, scroll) {
  return {
    top: rect.top + scroll.y,
    left: rect.left + scroll.x,
    height: rect.height,
    width: rect.width
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/apply-location-offset.js
function applyLocationOffset(rect, location, isOffsetBody) {
  var top = rect.top;
  var left = rect.left;
  if (isOffsetBody) {
    left = 0;
    top = 0;
  }
  return {
    top: top + location.top,
    left: left + location.left,
    height: rect.height,
    width: rect.width
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/owner-document.js
function ownerDocument(element) {
  return element.ownerDocument || element.document || element;
}

// node_modules/@progress/kendo-popup-common/dist/es/window.js
var getWindow = function(element) {
  return ownerDocument(element).defaultView;
};
var window_default = getWindow;

// node_modules/@progress/kendo-popup-common/dist/es/document.js
var getDocument = function(element) {
  return ownerDocument(element).documentElement;
};
var document_default = getDocument;

// node_modules/@progress/kendo-popup-common/dist/es/scrollbar-width.js
var cachedWidth = 0;
function scrollbarWidth() {
  if (!cachedWidth && typeof document !== "undefined") {
    var div = document.createElement("div");
    div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
    div.innerHTML = "&nbsp;";
    document.body.appendChild(div);
    cachedWidth = div.offsetWidth - div.scrollWidth;
    document.body.removeChild(div);
  }
  return cachedWidth;
}

// node_modules/@progress/kendo-popup-common/dist/es/window-viewport.js
function windowViewport(element) {
  var win = window_default(element);
  var document2 = document_default(element);
  var result = {
    height: win.innerHeight,
    width: win.innerWidth
  };
  if (document2.scrollHeight - document2.clientHeight > 0) {
    result.width -= scrollbarWidth();
  }
  return result;
}

// node_modules/@progress/kendo-popup-common/dist/es/bounding-offset.js
var boundingOffset = function(element) {
  if (!element.getBoundingClientRect) {
    var viewport = windowViewport(element);
    return {
      bottom: viewport.height,
      left: 0,
      right: viewport.width,
      top: 0
    };
  }
  var ref = element.getBoundingClientRect();
  var bottom = ref.bottom;
  var left = ref.left;
  var right = ref.right;
  var top = ref.top;
  return {
    bottom,
    left,
    right,
    top
  };
};
var bounding_offset_default = boundingOffset;

// node_modules/@progress/kendo-popup-common/dist/es/offset-parent.js
var offsetParent = function(element) {
  var offsetParent2 = element.offsetParent;
  while (offsetParent2 && offsetParent2.style.position === "static") {
    offsetParent2 = offsetParent2.offsetParent;
  }
  return offsetParent2 || document_default(element);
};
var offset_parent_default = offsetParent;

// node_modules/@progress/kendo-popup-common/dist/es/is-body-offset.js
var isBodyOffset = function(element) {
  return offset_parent_default(element) === element.ownerDocument.body;
};
var is_body_offset_default = isBodyOffset;

// node_modules/@progress/kendo-popup-common/dist/es/offset.js
var rectOfHiddenElement = function(element) {
  var ref = element.style;
  var display = ref.display;
  var left = ref.left;
  var position3 = ref.position;
  element.style.display = "";
  element.style.left = "-10000px";
  element.style.position = "absolute";
  var rect = element.getBoundingClientRect();
  element.style.display = display;
  element.style.left = left;
  element.style.position = position3;
  return rect;
};
var offset = function(element) {
  var rect = element.getBoundingClientRect();
  var left = rect.left;
  var top = rect.top;
  if (!rect.height && !rect.width) {
    rect = rectOfHiddenElement(element);
  }
  return {
    top,
    left,
    height: rect.height,
    width: rect.width
  };
};
var offset_default = offset;

// node_modules/@progress/kendo-popup-common/dist/es/parents.js
function parents_default(element, until) {
  var result = [];
  var next = element.parentNode;
  while (next) {
    result.push(next);
    if (next === until) {
      break;
    }
    next = next.parentNode;
  }
  return result;
}

// node_modules/@progress/kendo-popup-common/dist/es/scroll-position.js
function scrollPosition(element) {
  var documentElement = document_default(element);
  var win = window_default(element);
  return {
    x: win.pageXOffset || documentElement.scrollLeft || 0,
    y: win.pageYOffset || documentElement.scrollTop || 0
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/element-scroll-position.js
function element_scroll_position_default(element) {
  if (element === (element.ownerDocument || {}).body) {
    return scrollPosition(element);
  }
  return {
    x: element.scrollLeft,
    y: element.scrollTop
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/parent-scroll-position.js
function parentScrollPosition(element) {
  var parent = offset_parent_default(element);
  return parent ? element_scroll_position_default(parent) : { x: 0, y: 0 };
}

// node_modules/@progress/kendo-popup-common/dist/es/position.js
var position = function(element, parent) {
  var win = window_default(element);
  var elementStyles = win.getComputedStyle(element);
  var offset2 = offset_default(element);
  var parentElement = parent || offset_parent_default(element);
  var ownerDocument2 = element.ownerDocument;
  var useRelative = parentElement !== ownerDocument2.body && parentElement !== ownerDocument2.documentElement;
  var parentOffset = { top: 0, left: 0 };
  if (elementStyles.position !== "fixed" && useRelative) {
    var parentStyles = win.getComputedStyle(parentElement);
    parentOffset = offset_default(parentElement);
    parentOffset.top += parseInt(parentStyles.borderTopWidth, 10);
    parentOffset.left += parseInt(parentStyles.borderLeftWidth, 10);
  }
  return {
    top: offset2.top - parentOffset.top,
    left: offset2.left - parentOffset.left,
    height: offset2.height,
    width: offset2.width
  };
};
var position_default = position;

// node_modules/@progress/kendo-popup-common/dist/es/offset-parent-scroll-position.js
function offset_parent_scroll_position_default(offsetParentElement, element) {
  return (
    // eslint-disable-line no-arrow-condition
    offsetParentElement ? element_scroll_position_default(offsetParentElement) : parentScrollPosition(element)
  );
}

// node_modules/@progress/kendo-popup-common/dist/es/position-with-scroll.js
function position_with_scroll_default(element, parent, scale) {
  if (scale === void 0)
    scale = 1;
  var offsetParentElement = parent ? offset_parent_default(parent) : null;
  var ref = position_default(element, offsetParentElement);
  var top = ref.top;
  var left = ref.left;
  var height = ref.height;
  var width = ref.width;
  var ref$1 = offset_parent_scroll_position_default(offsetParentElement, element);
  var x = ref$1.x;
  var y = ref$1.y;
  var ownerDocument2 = element.ownerDocument;
  var positionScale = offsetParentElement === ownerDocument2.body || offsetParentElement === ownerDocument2.documentElement ? 1 : scale;
  return {
    top: top + y * positionScale,
    left: left + x * positionScale,
    height,
    width
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/remove-scroll.js
function removeScroll(rect, scroll) {
  return {
    top: rect.top - scroll.y,
    left: rect.left - scroll.x,
    height: rect.height,
    width: rect.width
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/collision.js
var collision_default = {
  "fit": "fit",
  "flip": "flip",
  "none": "none"
};

// node_modules/@progress/kendo-popup-common/dist/es/restrict-to-view.js
var fit = function(position3, size, viewPortSize) {
  var output = 0;
  if (position3 + size > viewPortSize) {
    output = viewPortSize - (position3 + size);
  }
  if (position3 < 0) {
    output = -position3;
  }
  return output;
};
var flip = function(ref) {
  var offset2 = ref.offset;
  var size = ref.size;
  var anchorSize = ref.anchorSize;
  var viewPortSize = ref.viewPortSize;
  var anchorAlignPoint = ref.anchorAlignPoint;
  var elementAlignPoint = ref.elementAlignPoint;
  var margin = ref.margin;
  var output = 0;
  var isPositionCentered = elementAlignPoint === align_point_default.center || elementAlignPoint === align_point_default.middle;
  var isOriginCentered = anchorAlignPoint === align_point_default.center || anchorAlignPoint === align_point_default.middle;
  var marginToAdd = 2 * margin;
  if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {
    var isBeforeAnchor = anchorAlignPoint === align_point_default.top || anchorAlignPoint === align_point_default.left;
    if (offset2 < 0 && isBeforeAnchor) {
      output = size + anchorSize + marginToAdd;
      if (offset2 + output + size > viewPortSize) {
        output = 0;
      }
    } else if (offset2 >= 0 && !isBeforeAnchor) {
      if (offset2 + size > viewPortSize) {
        output += -(anchorSize + size + marginToAdd);
      }
      if (offset2 + output < 0) {
        output = 0;
      }
    }
  }
  return output;
};
var restrictToView = function(options) {
  var anchorRect = options.anchorRect;
  var anchorAlign = options.anchorAlign;
  var elementRect = options.elementRect;
  var elementAlign = options.elementAlign;
  var collisions = options.collisions;
  var viewPort = options.viewPort;
  var margin = options.margin;
  if (margin === void 0)
    margin = {};
  var elementTop = elementRect.top;
  var elementLeft = elementRect.left;
  var elementHeight = elementRect.height;
  var elementWidth = elementRect.width;
  var viewPortHeight = viewPort.height;
  var viewPortWidth = viewPort.width;
  var horizontalMargin = margin.horizontal || 0;
  var verticalMargin = margin.vertical || 0;
  var left = 0;
  var top = 0;
  var isVerticalFit = collisions.vertical === collision_default.fit;
  var isHorizontalFit = collisions.horizontal === collision_default.fit;
  var isVerticalFlip = collisions.vertical === collision_default.flip;
  var isHorizontalFlip = collisions.horizontal === collision_default.flip;
  if (isVerticalFit) {
    top += fit(elementTop, elementHeight, viewPortHeight);
  }
  if (isHorizontalFit) {
    left += fit(elementLeft, elementWidth, viewPortWidth);
  }
  if (isVerticalFlip) {
    top += flip({
      margin: verticalMargin,
      offset: elementTop,
      size: elementHeight,
      anchorSize: anchorRect.height,
      viewPortSize: viewPortHeight,
      anchorAlignPoint: anchorAlign.vertical,
      elementAlignPoint: elementAlign.vertical
    });
  }
  if (isHorizontalFlip) {
    left += flip({
      margin: horizontalMargin,
      offset: elementLeft,
      size: elementWidth,
      anchorSize: anchorRect.width,
      viewPortSize: viewPortWidth,
      anchorAlignPoint: anchorAlign.horizontal,
      elementAlignPoint: elementAlign.horizontal
    });
  }
  var flippedVertical = isVerticalFlip && top !== 0;
  var flippedHorizontal = isHorizontalFlip && left !== 0;
  var fittedVertical = isVerticalFit && top !== 0;
  var fittedHorizontal = isHorizontalFit && left !== 0;
  return {
    flipped: flippedHorizontal || flippedVertical,
    fitted: fittedVertical || fittedHorizontal,
    flip: {
      horizontal: flippedHorizontal,
      vertical: flippedVertical
    },
    fit: {
      horizontal: fittedHorizontal,
      vertical: fittedVertical
    },
    offset: {
      left,
      top
    }
  };
};
var restrict_to_view_default = restrictToView;

// node_modules/@progress/kendo-popup-common/dist/es/siblings.js
function siblings_default(element) {
  var result = [];
  var sibling = element.parentNode.firstElementChild;
  while (sibling) {
    if (sibling !== element) {
      result.push(sibling);
    }
    sibling = sibling.nextElementSibling;
  }
  return result;
}

// node_modules/@progress/kendo-popup-common/dist/es/sibling-container.js
function sibling_container_default(anchor, container) {
  var parentElements = parents_default(anchor);
  var containerElement = container;
  var siblingElements;
  var result;
  while (containerElement) {
    siblingElements = siblings_default(containerElement);
    result = parentElements.reduce(
      function(list, p) {
        return list.concat(siblingElements.filter(function(s) {
          return s === p;
        }));
      },
      []
    )[0];
    if (result) {
      break;
    }
    containerElement = containerElement.parentElement;
  }
  return result;
}

// node_modules/@progress/kendo-popup-common/dist/es/utils.js
function memoize(fun) {
  var result;
  var called = false;
  return function() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    if (called) {
      return result;
    }
    result = fun.apply(void 0, args);
    called = true;
    return result;
  };
}
var hasRelativeStackingContext = memoize(function(elementSource) {
  if (!canUseDOM()) {
    return false;
  }
  var currentDocument = elementSource ? elementSource.ownerDocument : document;
  if (!currentDocument || !currentDocument.body) {
    return false;
  }
  var top = 10;
  var parent = currentDocument.createElement("div");
  parent.style.transform = "matrix(10, 0, 0, 10, 0, 0)";
  parent.innerHTML = '<div style="position: fixed; top: ' + top + 'px;">child</div>';
  currentDocument.body.appendChild(parent);
  var isDifferent = parent.children[0].getBoundingClientRect().top !== top;
  currentDocument.body.removeChild(parent);
  return isDifferent;
});
var canUseDOM = function() {
  return Boolean(
    // from fbjs
    typeof window !== "undefined" && window.document && window.document.createElement
  );
};

// node_modules/@progress/kendo-vue-popup/dist/es/util.js
var eitherRect = function eitherRect2(rect, offset2) {
  if (!rect) {
    return {
      height: 0,
      left: offset2.left,
      top: offset2.top,
      width: 0
    };
  }
  return rect;
};
var replaceOffset = function replaceOffset2(rect, offset2) {
  if (!offset2) {
    return rect;
  }
  var result = {
    height: rect.height,
    left: offset2.left,
    top: offset2.top,
    width: rect.width
  };
  return result;
};
var removeStackingOffset = function removeStackingOffset2(rect, stackingOffset) {
  if (!stackingOffset) {
    return rect;
  }
  var result = {
    height: rect.height,
    left: rect.left - stackingOffset.left,
    top: rect.top - stackingOffset.top,
    width: rect.width
  };
  return result;
};
var isDocumentAvailable = function isDocumentAvailable2() {
  return typeof document !== "undefined" && !!document.body;
};
var isWindowAvailable = function isWindowAvailable2() {
  return typeof window !== "undefined";
};
var OVERFLOW_REGEXP = /auto|scroll/;
var overflowStyle = function overflowStyle2(element) {
  var styles = window.getComputedStyle(element);
  return "".concat(styles.overflow).concat(styles.overflowX).concat(styles.overflowY);
};
var scrollableParents = function scrollableParents2(element) {
  var parentElements = [];
  if (!isDocumentAvailable() || !isWindowAvailable()) {
    return parentElements;
  }
  var parent = element.parentElement;
  while (parent) {
    if (OVERFLOW_REGEXP.test(overflowStyle(parent))) {
      parentElements.push(parent);
    }
    parent = parent.parentElement;
  }
  parentElements.push(window);
  return parentElements;
};
var FRAME_DURATION = 1e3 / 60;
var hasRelativeStackingContext2 = function hasRelativeStackingContext3() {
  if (!isDocumentAvailable()) {
    return false;
  }
  var top = 10;
  var parent = document.createElement("div");
  parent.style.transform = "matrix(10, 0, 0, 10, 0, 0)";
  parent.innerHTML = "<div>child</div>";
  document.body.appendChild(parent);
  if (parent && parent.firstChild) {
    var firstChild = parent.firstChild;
    firstChild.style.position = "fixed";
    firstChild.style.top = "".concat(top, "px");
  }
  var isDifferent = parent.children[0].getBoundingClientRect().top !== top;
  document.body.removeChild(parent);
  return isDifferent;
};
var HAS_RELATIVE_STACKING_CONTEXT = hasRelativeStackingContext2();
var zIndex2 = function zIndex3(anchor, container) {
  if (!anchor || !isDocumentAvailable() || !isWindowAvailable()) {
    return null;
  }
  var sibling = sibling_container_default(anchor, container);
  if (!sibling) {
    return null;
  }
  var result = [anchor].concat(parents_default(anchor, sibling)).reduce(function(index, p) {
    var zIndexStyle = p.style.zIndex || window.getComputedStyle(p).zIndex;
    var current = parseInt(zIndexStyle, 10);
    return current > index ? current : index;
  }, 0);
  return result ? result + 1 : null;
};
var CollisionType = {
  fit: "fit",
  flip: "flip"
};
var AlignPoint = {
  left: "left",
  center: "center",
  right: "right",
  bottom: "bottom",
  top: "top"
};
var throttle = function throttle2(func, wait, options) {
  if (options === void 0) {
    options = {};
  }
  var timeout, context, args, result;
  var previous = 0;
  options = options || {};
  var later = function later2() {
    previous = options.leading === false ? 0 : (/* @__PURE__ */ new Date()).getTime();
    timeout = null;
    result = func.apply(context, args);
    if (!timeout) {
      context = args = null;
    }
  };
  var throttled = function throttled2() {
    var now = (/* @__PURE__ */ new Date()).getTime();
    if (!previous && options.leading === false) {
      previous = now;
    }
    var remaining = wait - (now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      previous = now;
      result = func.apply(context, args);
      if (!timeout) {
        context = args = null;
      }
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }
    return result;
  };
  return throttled;
};

// node_modules/@progress/kendo-vue-popup/dist/es/services/alignService.js
var AlignService = (
  /** @class */
  function() {
    function AlignService2(_dom) {
      this._dom = _dom;
    }
    AlignService2.prototype.alignElement = function(settings) {
      var anchor = settings.anchor, element = settings.element, anchorAlign = settings.anchorAlign, elementAlign = settings.elementAlign, offset2 = settings.offset;
      var fixedMode = !this._dom.hasOffsetParent(element);
      var anchorRect = fixedMode ? this.absoluteRect(anchor, element, offset2) : this.relativeRect(anchor, element, offset2);
      return this._dom.align({
        anchorAlign,
        anchorRect,
        elementAlign,
        elementRect: this._dom.offset(element)
      });
    };
    AlignService2.prototype.absoluteRect = function(anchor, element, offset2) {
      var dom = this._dom;
      var rect = eitherRect(dom.offset(anchor), offset2);
      var stackingOffset = dom.stackingElementOffset(element);
      var removedOffset = removeStackingOffset(rect, stackingOffset);
      var stackingScroll = dom.stackingElementScroll(element);
      var withScroll = dom.addScroll(removedOffset, stackingScroll);
      var scrollPosition2 = this.elementScrollPosition(anchor, element);
      var result = dom.removeScroll(withScroll, scrollPosition2);
      result.left += window.scrollX || window.pageXOffset;
      result.top += window.scrollY || window.pageYOffset;
      return result;
    };
    AlignService2.prototype.elementScrollPosition = function(anchor, element) {
      return anchor ? { x: 0, y: 0 } : this._dom.scrollPosition(element);
    };
    AlignService2.prototype.relativeRect = function(anchor, element, offset2) {
      return eitherRect(this._dom.position(anchor, element), offset2);
    };
    return AlignService2;
  }()
);

// node_modules/@progress/kendo-vue-popup/dist/es/services/domService.js
var DOMService = (
  /** @class */
  function() {
    function DOMService2() {
    }
    DOMService2.prototype.addOffset = function(current, addition) {
      return {
        left: current.left + addition.left,
        top: current.top + addition.top
      };
    };
    DOMService2.prototype.align = function(settings) {
      return align_default(settings);
    };
    DOMService2.prototype.boundingOffset = function(el) {
      return bounding_offset_default(el);
    };
    DOMService2.prototype.getWindow = function() {
      return isWindowAvailable() ? window : null;
    };
    DOMService2.prototype.isBodyOffset = function(el) {
      return is_body_offset_default(el);
    };
    DOMService2.prototype.hasOffsetParent = function(el) {
      if (!el) {
        return false;
      }
      var offsetParentEl = el.offsetParent;
      return offsetParentEl && !(offsetParentEl.nodeName === "BODY" && window.getComputedStyle(offsetParentEl).position === "static");
    };
    DOMService2.prototype.offset = function(el) {
      if (!el) {
        return null;
      }
      return offset_default(el);
    };
    DOMService2.prototype.staticOffset = function(element) {
      if (!element) {
        return null;
      }
      var _a = element.style, left = _a.left, top = _a.top;
      element.style.left = "0px";
      element.style.top = "0px";
      var currentOffset = offset_default(element);
      element.style.left = left;
      element.style.top = top;
      return currentOffset;
    };
    DOMService2.prototype.position = function(element, popup) {
      if (!element || !popup) {
        return null;
      }
      var parentSibling = sibling_container_default(element, popup);
      return position_with_scroll_default(element, parentSibling);
    };
    DOMService2.prototype.relativeOffset = function(el, currentLocation) {
      return applyLocationOffset(this.offset(el), currentLocation, this.isBodyOffset(el));
    };
    DOMService2.prototype.addScroll = function(rect, scroll) {
      return addScroll(rect, scroll);
    };
    DOMService2.prototype.removeScroll = function(rect, scroll) {
      return removeScroll(rect, scroll);
    };
    DOMService2.prototype.restrictToView = function(settings) {
      return restrict_to_view_default(settings);
    };
    DOMService2.prototype.scrollPosition = function(el) {
      return scrollPosition(el);
    };
    DOMService2.prototype.scrollableParents = function(el) {
      return scrollableParents(el);
    };
    DOMService2.prototype.stackingElementOffset = function(el) {
      var relativeContextElement = this.getRelativeContextElement(el);
      if (!relativeContextElement) {
        return null;
      }
      return offset_default(relativeContextElement);
    };
    DOMService2.prototype.stackingElementScroll = function(el) {
      var relativeContextElement = this.getRelativeContextElement(el);
      if (!relativeContextElement) {
        return { x: 0, y: 0 };
      }
      return {
        x: relativeContextElement.scrollLeft,
        y: relativeContextElement.scrollTop
      };
    };
    DOMService2.prototype.stackingElementViewPort = function(el) {
      var relativeContextElement = this.getRelativeContextElement(el);
      if (!relativeContextElement) {
        return null;
      }
      return {
        height: relativeContextElement.scrollHeight,
        width: relativeContextElement.scrollWidth
      };
    };
    DOMService2.prototype.getRelativeContextElement = function(el) {
      if (!el || !HAS_RELATIVE_STACKING_CONTEXT) {
        return null;
      }
      var parent = el.parentElement;
      while (parent) {
        if (window.getComputedStyle(parent).transform !== "none") {
          return parent;
        }
        parent = parent.parentElement;
      }
      return null;
    };
    DOMService2.prototype.useRelativePosition = function(el) {
      return !!this.getRelativeContextElement(el);
    };
    DOMService2.prototype.windowViewPort = function(el) {
      return windowViewport(el);
    };
    DOMService2.prototype.zIndex = function(anchor, container) {
      return zIndex2(anchor, container);
    };
    DOMService2.prototype.zoomLevel = function() {
      if (!isDocumentAvailable() || !isWindowAvailable()) {
        return 1;
      }
      return parseFloat((document.documentElement.clientWidth / window.innerWidth).toFixed(2));
    };
    DOMService2.prototype.isZoomed = function() {
      return this.zoomLevel() > 1;
    };
    return DOMService2;
  }()
);

// node_modules/@progress/kendo-vue-popup/dist/es/services/positionService.js
var PositionService = (
  /** @class */
  function() {
    function PositionService2(_dom) {
      this._dom = _dom;
    }
    PositionService2.prototype.positionElement = function(settings) {
      var anchor = settings.anchor, currentLocation = settings.currentLocation, element = settings.element, anchorAlign = settings.anchorAlign, elementAlign = settings.elementAlign, collisions = settings.collisions;
      var dom = this._dom;
      var viewPort = settings.viewPort || dom.stackingElementViewPort(element) || dom.windowViewPort(element);
      var anchorRect = eitherRect(dom.offset(anchor), currentLocation);
      var initialElementRect = replaceOffset(dom.staticOffset(element), currentLocation);
      var elementRect = this.elementRect(element, initialElementRect);
      var result = dom.restrictToView({
        anchorAlign,
        anchorRect,
        collisions,
        elementAlign,
        elementRect,
        viewPort
      });
      return {
        flipped: result.flipped,
        offset: dom.addOffset(initialElementRect, result.offset)
      };
    };
    PositionService2.prototype.elementRect = function(element, rect) {
      return this._dom.removeScroll(rect, this._dom.scrollPosition(element));
    };
    return PositionService2;
  }()
);

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM2 = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata2) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata2);
  } else {
    var message = "License activation failed for ".concat(packageMetadata2.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata2.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument2 = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument2();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";

// node_modules/@progress/kendo-vue-popup/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation2.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation2.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation2.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-vue-popup/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-popup",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693312387,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-popup/dist/es/Popup.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var DEFAULT_POPUP_ZINDEX = 100;
var ZINDEX_POPUP_STEP = 1;
var DEFAULT_OFFSET = {
  left: -1e3,
  top: 0
};
var ANIMATION_CONTAINER_SHOWN = "k-animation-container-shown";
var K_POPUP = "k-popup";
var PopupVue2 = {
  name: "Popup",
  props: {
    appendTo: {
      type: String,
      default: ""
    },
    anchor: {
      type: String,
      default: ""
    },
    className: String,
    id: String,
    popupClass: String,
    collision: {
      type: Object,
      default: function _default() {
        return {
          horizontal: CollisionType.fit,
          vertical: CollisionType.flip
        };
      }
    },
    anchorAlign: {
      type: Object,
      default: function _default2() {
        return {
          horizontal: AlignPoint.left,
          vertical: AlignPoint.bottom
        };
      }
    },
    popupAlign: {
      type: Object,
      default: function _default3() {
        return {
          horizontal: AlignPoint.left,
          vertical: AlignPoint.top
        };
      }
    },
    offset: {
      type: Object,
      default: function _default4() {
        return DEFAULT_OFFSET;
      }
    },
    show: {
      type: Boolean,
      default: false
    },
    animate: {
      type: [Boolean, Object],
      default: function _default5() {
        return true;
      }
    },
    direction: {
      type: String,
      default: "down"
    },
    transition: {
      type: String,
      default: "expand"
    }
  },
  inject: {
    kCurrentZIndex: {
      default: null
    }
  },
  data: function data() {
    return {
      hasMounted: false
    };
  },
  created: function created2() {
    validatePackage(packageMetadata);
    this.mountedAppendTo = void 0;
    this.mountedAnchor = void 0;
    this._clonedElement = void 0;
    this._flipped = false;
    this._offsetTop = 0;
    this._offsetLeft = -1e3;
    this._exitingAnimation = false;
    this._prevShow = false;
    this._prevShow = this.$props.show;
    this._domService = new DOMService();
    this._alignService = new AlignService(this._domService);
    this._positionService = new PositionService(this._domService);
    this.reposition = throttle(this.reposition.bind(this), FRAME_DURATION);
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  mounted: function mounted2() {
    if (canUseDOM2) {
      this.mountedAppendTo = this.appendTo ? this.getParentRef(this.appendTo) : document.body;
      this.mountedAnchor = this.anchor ? this.getParentRef(this.anchor, true) : document.body;
    }
    this._parentElement = this.$el.parentElement;
    this._clonedElement = this.$el.cloneNode(true);
    this.hasMounted = true;
    this.mountedAppendTo.appendChild(this.$el);
  },
  updated: function updated() {
    this._prevShow = this.$props.show;
  },
  destroyed: !!isV36 ? void 0 : function() {
    this.detachRepositionHandlers();
  },
  beforeDestroy: !!isV36 ? void 0 : function() {
    if (this._parentElement) {
      this._parentElement.appendChild(this.$el);
    }
  },
  // @ts-ignore
  unmounted: function unmounted2() {
    this.detachRepositionHandlers();
  },
  // @ts-ignore
  beforeUnmount: function beforeUnmount() {
    if (this._parentElement) {
      this._parentElement.appendChild(this.$el);
    }
  },
  methods: {
    onOpened: function onOpened() {
      var element = this.$el;
      if (this.$props.show) {
        element.classList.add(ANIMATION_CONTAINER_SHOWN);
      }
      this.attachRepositionHandlers(element);
      this.$emit("open", {
        target: this
      });
    },
    onClosing: function onClosing() {
      if (!this.$props.show) {
        var element = this.$el;
        element.classList.remove(ANIMATION_CONTAINER_SHOWN);
      }
      this.detachRepositionHandlers();
    },
    onClosed: function onClosed() {
      if (this._exitingAnimation) {
        this._exitingAnimation = false;
        this.$forceUpdate();
      }
      this.$emit("close", {
        target: this
      });
    },
    transitionDuration: function transitionDuration() {
      var animate = this.$props.animate;
      var transitionEnterDuration = 0;
      var transitionExitDuration = 0;
      if (animate) {
        if (animate === true) {
          transitionEnterDuration = transitionExitDuration = void 0;
        } else {
          transitionEnterDuration = animate.openDuration;
          transitionExitDuration = animate.closeDuration;
        }
      }
      return {
        transitionEnterDuration,
        transitionExitDuration
      };
    },
    getParentRef: function getParentRef(anchor, isAnchor) {
      var parent = this.$parent;
      while (!parent.$refs[anchor]) {
        if (parent && parent.kendoAnchorRef && isAnchor) {
          return parent.kendoAnchorRef;
        }
        parent = parent.$parent;
        if (!parent && canUseDOM2) {
          return document.getElementById(anchor) || document.body;
        }
      }
      return parent.$refs[anchor].$el || parent.$refs[anchor];
    },
    position: function position2(settings, element, anchor) {
      var anchorAlign = settings.anchorAlign, popupAlign = settings.popupAlign, collision = settings.collision, offset2 = settings.offset;
      var anchorElement = anchor ? this.v3 ? this.mountedAnchor : this.getParentRef(anchor, true) : document.body;
      var alignedOffset = this._alignService.alignElement({
        anchor: anchor ? anchorElement : void 0,
        element,
        elementAlign: popupAlign,
        anchorAlign,
        offset: offset2
      });
      var result = this._positionService.positionElement({
        anchor: anchorElement,
        anchorAlign,
        collisions: collision,
        element,
        currentLocation: alignedOffset,
        elementAlign: popupAlign
      });
      return result;
    },
    calculatePosition: function calculatePosition($props, appendToElement) {
      if (!appendToElement || !isWindowAvailable() || !canUseDOM2) {
        return {
          flipped: false,
          offset: $props.offset
        };
      }
      var defaultSlot = getDefaultSlots(this);
      var root = document.createElement("div");
      var contentElement = this.$el && this.$el.firstChild ? this.$el.firstChild.firstChild ? this.$el.firstChild.firstChild.cloneNode(true) : null : null;
      var divWrapper = contentElement && contentElement.getBoundingClientRect ? contentElement : this._clonedElement;
      if (divWrapper) {
        root.appendChild(divWrapper);
      } else {
        var internalClass = this.v3 ? defaultSlot && defaultSlot[0].props ? defaultSlot[0].props.class : "" : defaultSlot && defaultSlot[0].data ? defaultSlot[0].data.staticClass : "";
        var domClass = this.v3 ? this.$props.popupClass ? this.$props.popupClass : "" : defaultSlot && defaultSlot[0].data ? defaultSlot[0].data.class : "";
        root.innerHTML = '<div class="k-animation-container k-animation-container-relative">	\n                        <div class="k-popup k-animation-container k-animation-container-relative">\n                            <div class="'.concat(internalClass, " ").concat(domClass, '" >\n                            </div>	\n                        </div>	\n                </div>');
      }
      appendToElement.appendChild(root);
      if (root && root.firstChild) {
        var firstChild = root.firstChild;
        firstChild.style.position = "absolute";
        firstChild.style.visibility = "hidden";
        firstChild.style.display = "block";
        firstChild.style.left = "-1000";
        firstChild.style.top = "0";
        var inlineStyles = this.v3 ? defaultSlot && defaultSlot[0].props ? defaultSlot[0].props.style : {} : defaultSlot[0].data ? defaultSlot[0].data.style : {};
        if (inlineStyles) {
          for (var _i = 0, _a = Object.entries(inlineStyles); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            firstChild.style[key] = value;
          }
        }
      }
      var newPosition = this.position($props, root.firstChild, this.$props.anchor);
      root.parentNode.removeChild(root);
      return newPosition;
    },
    attachRepositionHandlers: function attachRepositionHandlers(element) {
      var _this = this;
      this.detachRepositionHandlers();
      this._scrollableParents = this._domService.scrollableParents(this.$props.anchor ? this.mountedAnchor : element);
      this._scrollableParents.map(function(p) {
        return p.addEventListener("scroll", _this.reposition);
      });
      window.addEventListener("resize", this.reposition);
    },
    detachRepositionHandlers: function detachRepositionHandlers() {
      var _this = this;
      if (this._scrollableParents) {
        this._scrollableParents.map(function(p) {
          return p.removeEventListener("scroll", _this.reposition);
        });
        this._scrollableParents = void 0;
      }
      window.removeEventListener("resize", this.reposition);
    },
    reposition: function reposition() {
      this._clonedElement = this.$el.cloneNode(true);
      this.$forceUpdate();
    },
    getCurrentZIndex: function getCurrentZIndex() {
      return this.kCurrentZIndex ? this.kCurrentZIndex + ZINDEX_POPUP_STEP : DEFAULT_POPUP_ZINDEX;
    }
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh5 || createElement;
    var _a = this.$props, className = _a.className, popupClass = _a.popupClass, show = _a.show, id = _a.id;
    var defaultSlots = getDefaultSlots(this);
    var defaultSlot = this.v3 ? defaultSlots : show ? defaultSlots : null;
    var defaultAppentTo = isWindowAvailable() ? this.$props.appendTo ? this.mountedAppendTo || this.getParentRef(this.$props.appendTo) : document.body : void 0;
    if (this.$props.show) {
      var newPosition = this.calculatePosition(this.$props, defaultAppentTo);
      this._offsetLeft = newPosition.offset.left;
      this._offsetTop = newPosition.offset.top;
      this._flipped = !!newPosition.flipped;
    }
    var direction = this._flipped ? "up" : "down";
    var _b = this.transitionDuration(), transitionEnterDuration = _b.transitionEnterDuration, transitionExitDuration = _b.transitionExitDuration;
    var currentZIndex = this.getCurrentZIndex();
    this._exitingAnimation = this._exitingAnimation || this._prevShow && !show;
    if (!this.hasMounted) {
      return h("div", {
        style: {
          display: "none"
        },
        "class": className
      }, [h("div", {
        "class": [popupClass, K_POPUP]
      }, [defaultSlots])]);
    }
    if (show || this._exitingAnimation && defaultAppentTo) {
      var popup = (
        // @ts-ignore function children
        h(Slide, {
          id,
          attrs: this.v3 ? void 0 : {
            id,
            role: this.appendTo ? "" : "region",
            componentChildClassName: [popupClass, K_POPUP],
            className,
            direction,
            transitionEnterDuration,
            transitionExitDuration,
            appear: show
          },
          role: this.appendTo ? "" : "region",
          componentChildClassName: [popupClass, K_POPUP],
          className,
          onEntered: this.onOpened,
          on: this.v3 ? void 0 : {
            "entered": this.onOpened,
            "exiting": this.onClosing,
            "exited": this.onClosed
          },
          onExiting: this.onClosing,
          onExited: this.onClosed,
          direction,
          style: {
            zIndex: currentZIndex,
            position: "absolute",
            top: this._offsetTop + "px",
            left: this._offsetLeft + "px"
          },
          transitionEnterDuration,
          transitionExitDuration,
          appear: show
        }, this.v3 ? function() {
          return [defaultSlot];
        } : [defaultSlot])
      );
      return popup;
    }
    return null;
  }
};
var Popup = PopupVue2;

export {
  PopupVue2,
  Popup
};
//# sourceMappingURL=chunk-P43752AQ.js.map
