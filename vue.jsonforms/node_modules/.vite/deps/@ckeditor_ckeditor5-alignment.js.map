{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-alignment/src/utils.js", "../../@ckeditor/ckeditor5-alignment/src/alignmentcommand.js", "../../@ckeditor/ckeditor5-alignment/src/alignmentediting.js", "../../@ckeditor/ckeditor5-alignment/src/alignmentui.js", "../../@ckeditor/ckeditor5-alignment/src/alignment.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { CKEditorError, logWarning } from 'ckeditor5/src/utils';\n/**\n * @module alignment/utils\n */\n/**\n * The list of supported alignment options:\n *\n * * `'left'`,\n * * `'right'`,\n * * `'center'`,\n * * `'justify'`\n */\nexport const supportedOptions = ['left', 'right', 'center', 'justify'];\n/**\n * Checks whether the passed option is supported by {@link module:alignment/alignmentediting~AlignmentEditing}.\n *\n * @param option The option value to check.\n */\nexport function isSupported(option) {\n    return supportedOptions.includes(option);\n}\n/**\n * Checks whether alignment is the default one considering the direction\n * of the editor content.\n *\n * @param alignment The name of the alignment to check.\n * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n */\nexport function isDefault(alignment, locale) {\n    // Right now only LTR is supported so the 'left' value is always the default one.\n    if (locale.contentLanguageDirection == 'rtl') {\n        return alignment === 'right';\n    }\n    else {\n        return alignment === 'left';\n    }\n}\n/**\n * Brings the configuration to the common form, an array of objects.\n *\n * @param configuredOptions Alignment plugin configuration.\n * @returns Normalized object holding the configuration.\n */\nexport function normalizeAlignmentOptions(configuredOptions) {\n    const normalizedOptions = configuredOptions\n        .map(option => {\n        let result;\n        if (typeof option == 'string') {\n            result = { name: option };\n        }\n        else {\n            result = option;\n        }\n        return result;\n    })\n        // Remove all unknown options.\n        .filter(option => {\n        const isNameValid = supportedOptions.includes(option.name);\n        if (!isNameValid) {\n            /**\n             * The `name` in one of the `alignment.options` is not recognized.\n             * The available options are: `'left'`, `'right'`, `'center'` and `'justify'`.\n             *\n             * @error alignment-config-name-not-recognized\n             * @param option Options with unknown value of the `name` property.\n             */\n            logWarning('alignment-config-name-not-recognized', { option });\n        }\n        return isNameValid;\n    });\n    const classNameCount = normalizedOptions.filter(option => Boolean(option.className)).length;\n    // We either use classes for all styling options or for none.\n    if (classNameCount && classNameCount < normalizedOptions.length) {\n        /**\n         * The `className` property has to be defined for all options once at least one option declares `className`.\n         *\n         * @error alignment-config-classnames-are-missing\n         * @param configuredOptions Contents of `alignment.options`.\n         */\n        throw new CKEditorError('alignment-config-classnames-are-missing', { configuredOptions });\n    }\n    // Validate resulting config.\n    normalizedOptions.forEach((option, index, allOptions) => {\n        const succeedingOptions = allOptions.slice(index + 1);\n        const nameAlreadyExists = succeedingOptions.some(item => item.name == option.name);\n        if (nameAlreadyExists) {\n            /**\n             * The same `name` in one of the `alignment.options` was already declared.\n             * Each `name` representing one alignment option can be set exactly once.\n             *\n             * @error alignment-config-name-already-defined\n             * @param option First option that declares given `name`.\n             * @param configuredOptions Contents of `alignment.options`.\n             */\n            throw new CKEditorError('alignment-config-name-already-defined', { option, configuredOptions });\n        }\n        // The `className` property is present. Check for duplicates then.\n        if (option.className) {\n            const classNameAlreadyExists = succeedingOptions.some(item => item.className == option.className);\n            if (classNameAlreadyExists) {\n                /**\n                 * The same `className` in one of the `alignment.options` was already declared.\n                 *\n                 * @error alignment-config-classname-already-defined\n                 * @param option First option that declares given `className`.\n                 * @param configuredOptions\n                 * Contents of `alignment.options`.\n                 */\n                throw new CKEditorError('alignment-config-classname-already-defined', { option, configuredOptions });\n            }\n        }\n    });\n    return normalizedOptions;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module alignment/alignmentcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\nimport { isDefault } from './utils';\nconst ALIGNMENT = 'alignment';\n/**\n * The alignment command plugin.\n */\nexport default class AlignmentCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const firstBlock = first(this.editor.model.document.selection.getSelectedBlocks());\n        // As first check whether to enable or disable the command as the value will always be false if the command cannot be enabled.\n        this.isEnabled = Boolean(firstBlock) && this._canBeAligned(firstBlock);\n        if (this.isEnabled && firstBlock.hasAttribute('alignment')) {\n            this.value = firstBlock.getAttribute('alignment');\n        }\n        else {\n            this.value = locale.contentLanguageDirection === 'rtl' ? 'right' : 'left';\n        }\n    }\n    /**\n     * Executes the command. Applies the alignment `value` to the selected blocks.\n     * If no `value` is passed, the `value` is the default one or it is equal to the currently selected block's alignment attribute,\n     * the command will remove the attribute from the selected blocks.\n     *\n     * @param options Options for the executed command.\n     * @param options.value The value to apply.\n     * @fires execute\n     */\n    execute(options = {}) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const model = editor.model;\n        const doc = model.document;\n        const value = options.value;\n        model.change(writer => {\n            // Get only those blocks from selected that can have alignment set\n            const blocks = Array.from(doc.selection.getSelectedBlocks()).filter(block => this._canBeAligned(block));\n            const currentAlignment = blocks[0].getAttribute('alignment');\n            // Remove alignment attribute if current alignment is:\n            // - default (should not be stored in model as it will bloat model data)\n            // - equal to currently set\n            // - or no value is passed - denotes default alignment.\n            const removeAlignment = isDefault(value, locale) || currentAlignment === value || !value;\n            if (removeAlignment) {\n                removeAlignmentFromSelection(blocks, writer);\n            }\n            else {\n                setAlignmentOnSelection(blocks, writer, value);\n            }\n        });\n    }\n    /**\n     * Checks whether a block can have alignment set.\n     *\n     * @param block The block to be checked.\n     */\n    _canBeAligned(block) {\n        return this.editor.model.schema.checkAttribute(block, ALIGNMENT);\n    }\n}\n/**\n * Removes the alignment attribute from blocks.\n */\nfunction removeAlignmentFromSelection(blocks, writer) {\n    for (const block of blocks) {\n        writer.removeAttribute(ALIGNMENT, block);\n    }\n}\n/**\n * Sets the alignment attribute on blocks.\n */\nfunction setAlignmentOnSelection(blocks, writer, alignment) {\n    for (const block of blocks) {\n        writer.setAttribute(ALIGNMENT, alignment, block);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module alignment/alignmentediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport AlignmentCommand from './alignmentcommand';\nimport { isDefault, isSupported, normalizeAlignmentOptions, supportedOptions } from './utils';\n/**\n * The alignment editing feature. It introduces the {@link module:alignment/alignmentcommand~AlignmentCommand command} and adds\n * the `alignment` attribute for block elements in the {@link module:engine/model/model~Model model}.\n */\nexport default class AlignmentEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'AlignmentEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('alignment', {\n            options: supportedOptions.map(option => ({ name: option }))\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const schema = editor.model.schema;\n        const options = normalizeAlignmentOptions(editor.config.get('alignment.options'));\n        // Filter out unsupported options and those that are redundant, e.g. `left` in LTR / `right` in RTL mode.\n        const optionsToConvert = options.filter(option => isSupported(option.name) && !isDefault(option.name, locale));\n        // Once there is at least one `className` defined, we switch to alignment with classes.\n        const shouldUseClasses = optionsToConvert.some(option => !!option.className);\n        // Allow alignment attribute on all blocks.\n        schema.extend('$block', { allowAttributes: 'alignment' });\n        editor.model.schema.setAttributeProperties('alignment', { isFormatting: true });\n        if (shouldUseClasses) {\n            editor.conversion.attributeToAttribute(buildClassDefinition(optionsToConvert));\n        }\n        else {\n            // Downcast inline styles.\n            editor.conversion.for('downcast').attributeToAttribute(buildDowncastInlineDefinition(optionsToConvert));\n        }\n        const upcastInlineDefinitions = buildUpcastInlineDefinitions(optionsToConvert);\n        // Always upcast from inline styles.\n        for (const definition of upcastInlineDefinitions) {\n            editor.conversion.for('upcast').attributeToAttribute(definition);\n        }\n        const upcastCompatibilityDefinitions = buildUpcastCompatibilityDefinitions(optionsToConvert);\n        // Always upcast from deprecated `align` attribute.\n        for (const definition of upcastCompatibilityDefinitions) {\n            editor.conversion.for('upcast').attributeToAttribute(definition);\n        }\n        editor.commands.add('alignment', new AlignmentCommand(editor));\n    }\n}\n/**\n * Prepare downcast conversion definition for inline alignment styling.\n */\nfunction buildDowncastInlineDefinition(options) {\n    const view = {};\n    for (const { name } of options) {\n        view[name] = {\n            key: 'style',\n            value: {\n                'text-align': name\n            }\n        };\n    }\n    const definition = {\n        model: {\n            key: 'alignment',\n            values: options.map(option => option.name)\n        },\n        view\n    };\n    return definition;\n}\n/**\n * Prepare upcast definitions for inline alignment styles.\n */\nfunction buildUpcastInlineDefinitions(options) {\n    const definitions = [];\n    for (const { name } of options) {\n        definitions.push({\n            view: {\n                key: 'style',\n                value: {\n                    'text-align': name\n                }\n            },\n            model: {\n                key: 'alignment',\n                value: name\n            }\n        });\n    }\n    return definitions;\n}\n/**\n * Prepare upcast definitions for deprecated `align` attribute.\n */\nfunction buildUpcastCompatibilityDefinitions(options) {\n    const definitions = [];\n    for (const { name } of options) {\n        definitions.push({\n            view: {\n                key: 'align',\n                value: name\n            },\n            model: {\n                key: 'alignment',\n                value: name\n            }\n        });\n    }\n    return definitions;\n}\n/**\n * Prepare conversion definitions for upcast and downcast alignment with classes.\n */\nfunction buildClassDefinition(options) {\n    const view = {};\n    for (const option of options) {\n        view[option.name] = {\n            key: 'class',\n            value: option.className\n        };\n    }\n    const definition = {\n        model: {\n            key: 'alignment',\n            values: options.map(option => option.name)\n        },\n        view\n    };\n    return definition;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module alignment/alignmentui\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, createDropdown, addToolbarToDropdown } from 'ckeditor5/src/ui';\nimport { isSupported, normalizeAlignmentOptions } from './utils';\nconst iconsMap = new Map([\n    ['left', icons.alignLeft],\n    ['right', icons.alignRight],\n    ['center', icons.alignCenter],\n    ['justify', icons.alignJustify]\n]);\n/**\n * The default alignment UI plugin.\n *\n * It introduces the `'alignment:left'`, `'alignment:right'`, `'alignment:center'` and `'alignment:justify'` buttons\n * and the `'alignment'` dropdown.\n */\nexport default class AlignmentUI extends Plugin {\n    /**\n     * Returns the localized option titles provided by the plugin.\n     *\n     * The following localized titles corresponding with\n     * {@link module:alignment/alignmentconfig~AlignmentConfig#options} are available:\n     *\n     * * `'left'`,\n     * * `'right'`,\n     * * `'center'`,\n     * * `'justify'`.\n     *\n     * @readonly\n     */\n    get localizedOptionTitles() {\n        const t = this.editor.t;\n        return {\n            'left': t('Align left'),\n            'right': t('Align right'),\n            'center': t('Align center'),\n            'justify': t('Justify')\n        };\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'AlignmentUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const componentFactory = editor.ui.componentFactory;\n        const t = editor.t;\n        const options = normalizeAlignmentOptions(editor.config.get('alignment.options'));\n        options\n            .map(option => option.name)\n            .filter(isSupported)\n            .forEach(option => this._addButton(option));\n        componentFactory.add('alignment', locale => {\n            const dropdownView = createDropdown(locale);\n            // Add existing alignment buttons to dropdown's toolbar.\n            addToolbarToDropdown(dropdownView, () => options.map(option => componentFactory.create(`alignment:${option.name}`)), {\n                enableActiveItemFocusOnDropdownOpen: true,\n                isVertical: true,\n                ariaLabel: t('Text alignment toolbar')\n            });\n            // Configure dropdown properties an behavior.\n            dropdownView.buttonView.set({\n                label: t('Text alignment'),\n                tooltip: true\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: 'ck-alignment-dropdown'\n                }\n            });\n            // The default icon depends on the direction of the content.\n            const defaultIcon = locale.contentLanguageDirection === 'rtl' ? iconsMap.get('right') : iconsMap.get('left');\n            const command = editor.commands.get('alignment');\n            // Change icon to reflect current selection's alignment.\n            dropdownView.buttonView.bind('icon').to(command, 'value', value => iconsMap.get(value) || defaultIcon);\n            // Enable button if any of the buttons is enabled.\n            dropdownView.bind('isEnabled').to(command, 'isEnabled');\n            // Focus the editable after executing the command.\n            // Overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n            this.listenTo(dropdownView, 'execute', () => {\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n    /**\n     * Helper method for initializing the button and linking it with an appropriate command.\n     *\n     * @param option The name of the alignment option for which the button is added.\n     */\n    _addButton(option) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(`alignment:${option}`, locale => {\n            const command = editor.commands.get('alignment');\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label: this.localizedOptionTitles[option],\n                icon: iconsMap.get(option),\n                tooltip: true,\n                isToggleable: true\n            });\n            // Bind button model to command.\n            buttonView.bind('isEnabled').to(command);\n            buttonView.bind('isOn').to(command, 'value', value => value === option);\n            // Execute command.\n            this.listenTo(buttonView, 'execute', () => {\n                editor.execute('alignment', { value: option });\n                editor.editing.view.focus();\n            });\n            return buttonView;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module alignment/alignment\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport AlignmentEditing from './alignmentediting';\nimport AlignmentUI from './alignmentui';\n/**\n * The text alignment plugin.\n *\n * For a detailed overview, check the {@glink features/text-alignment Text alignment} feature guide\n * and the {@glink api/alignment package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:alignment/alignmentediting~AlignmentEditing} and\n * {@link module:alignment/alignmentui~AlignmentUI} plugins.\n */\nexport default class Alignment extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [AlignmentEditing, AlignmentUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Alignment';\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
