{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-heading/src/headingcommand.js", "../../@ckeditor/ckeditor5-heading/src/headingediting.js", "../../@ckeditor/ckeditor5-heading/src/utils.js", "../../@ckeditor/ckeditor5-heading/src/headingui.js", "../../@ckeditor/ckeditor5-heading/src/heading.js", "../../@ckeditor/ckeditor5-heading/src/headingbuttonsui.js", "../../@ckeditor/ckeditor5-heading/src/title.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/headingcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n */\nexport default class HeadingCommand extends Command {\n    /**\n     * Creates an instance of the command.\n     *\n     * @param editor Editor instance.\n     * @param modelElements Names of the element which this command can apply in the model.\n     */\n    constructor(editor, modelElements) {\n        super(editor);\n        this.modelElements = modelElements;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const block = first(this.editor.model.document.selection.getSelectedBlocks());\n        this.value = !!block && this.modelElements.includes(block.name) && block.name;\n        this.isEnabled = !!block && this.modelElements.some(heading => checkCanBecomeHeading(block, heading, this.editor.model.schema));\n    }\n    /**\n     * Executes the command. Applies the heading to the selected blocks or, if the first selected\n     * block is a heading already, turns selected headings (of this level only) to paragraphs.\n     *\n     * @param options.value Name of the element which this command will apply in the model.\n     * @fires execute\n     */\n    execute(options) {\n        const model = this.editor.model;\n        const document = model.document;\n        const modelElement = options.value;\n        model.change(writer => {\n            const blocks = Array.from(document.selection.getSelectedBlocks())\n                .filter(block => {\n                return checkCanBecomeHeading(block, modelElement, model.schema);\n            });\n            for (const block of blocks) {\n                if (!block.is('element', modelElement)) {\n                    writer.rename(block, modelElement);\n                }\n            }\n        });\n    }\n}\n/**\n * Checks whether the given block can be replaced by a specific heading.\n *\n * @param block A block to be tested.\n * @param heading Command element name in the model.\n * @param schema The schema of the document.\n */\nfunction checkCanBecomeHeading(block, heading, schema) {\n    return schema.checkChild(block.parent, heading) && !schema.isObject(block);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/headingediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Paragraph } from 'ckeditor5/src/paragraph';\nimport { priorities } from 'ckeditor5/src/utils';\nimport HeadingCommand from './headingcommand';\nconst defaultModelElement = 'paragraph';\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n */\nexport default class HeadingEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'HeadingEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('heading', {\n            options: [\n                { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n                { model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n                { model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n                { model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [Paragraph];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const options = editor.config.get('heading.options');\n        const modelElements = [];\n        for (const option of options) {\n            // Skip paragraph - it is defined in required Paragraph feature.\n            if (option.model === 'paragraph') {\n                continue;\n            }\n            // Schema.\n            editor.model.schema.register(option.model, {\n                inheritAllFrom: '$block'\n            });\n            editor.conversion.elementToElement(option);\n            modelElements.push(option.model);\n        }\n        this._addDefaultH1Conversion(editor);\n        // Register the heading command for this option.\n        editor.commands.add('heading', new HeadingCommand(editor, modelElements));\n    }\n    /**\n     * @inheritDoc\n     */\n    afterInit() {\n        // If the enter command is added to the editor, alter its behavior.\n        // Enter at the end of a heading element should create a paragraph.\n        const editor = this.editor;\n        const enterCommand = editor.commands.get('enter');\n        const options = editor.config.get('heading.options');\n        if (enterCommand) {\n            this.listenTo(enterCommand, 'afterExecute', (evt, data) => {\n                const positionParent = editor.model.document.selection.getFirstPosition().parent;\n                const isHeading = options.some(option => positionParent.is('element', option.model));\n                if (isHeading && !positionParent.is('element', defaultModelElement) && positionParent.childCount === 0) {\n                    data.writer.rename(positionParent, defaultModelElement);\n                }\n            });\n        }\n    }\n    /**\n     * Adds default conversion for `h1` -> `heading1` with a low priority.\n     *\n     * @param editor Editor instance on which to add the `h1` conversion.\n     */\n    _addDefaultH1Conversion(editor) {\n        editor.conversion.for('upcast').elementToElement({\n            model: 'heading1',\n            view: 'h1',\n            // With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure\n            // this listener is called before it. If not, `h1` will be transformed into a paragraph.\n            converterPriority: priorities.low + 1\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Returns heading options as defined in `config.heading.options` but processed to consider\n * the editor localization, i.e. to display {@link module:heading/headingconfig~HeadingOption}\n * in the correct language.\n *\n * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n * when the user configuration is defined because the editor does not exist yet.\n */\nexport function getLocalizedOptions(editor) {\n    const t = editor.t;\n    const localizedTitles = {\n        'Paragraph': t('Paragraph'),\n        'Heading 1': t('Heading 1'),\n        'Heading 2': t('Heading 2'),\n        'Heading 3': t('Heading 3'),\n        'Heading 4': t('Heading 4'),\n        'Heading 5': t('Heading 5'),\n        'Heading 6': t('Heading 6')\n    };\n    return editor.config.get('heading.options').map(option => {\n        const title = localizedTitles[option.title];\n        if (title && title != option.title) {\n            option.title = title;\n        }\n        return option;\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/headingui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { getLocalizedOptions } from './utils';\nimport '../theme/heading.css';\n/**\n * The headings UI feature. It introduces the `headings` dropdown.\n */\nexport default class HeadingUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'HeadingUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = getLocalizedOptions(editor);\n        const defaultTitle = t('Choose heading');\n        const accessibleLabel = t('Heading');\n        // Register UI component.\n        editor.ui.componentFactory.add('heading', locale => {\n            const titles = {};\n            const itemDefinitions = new Collection();\n            const headingCommand = editor.commands.get('heading');\n            const paragraphCommand = editor.commands.get('paragraph');\n            const commands = [headingCommand];\n            for (const option of options) {\n                const def = {\n                    type: 'button',\n                    model: new Model({\n                        label: option.title,\n                        class: option.class,\n                        role: 'menuitemradio',\n                        withText: true\n                    })\n                };\n                if (option.model === 'paragraph') {\n                    def.model.bind('isOn').to(paragraphCommand, 'value');\n                    def.model.set('commandName', 'paragraph');\n                    commands.push(paragraphCommand);\n                }\n                else {\n                    def.model.bind('isOn').to(headingCommand, 'value', value => value === option.model);\n                    def.model.set({\n                        commandName: 'heading',\n                        commandValue: option.model\n                    });\n                }\n                // Add the option to the collection.\n                itemDefinitions.add(def);\n                titles[option.model] = option.title;\n            }\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, itemDefinitions, {\n                ariaLabel: accessibleLabel,\n                role: 'menu'\n            });\n            dropdownView.buttonView.set({\n                ariaLabel: accessibleLabel,\n                ariaLabelledBy: undefined,\n                isOn: false,\n                withText: true,\n                tooltip: accessibleLabel\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: [\n                        'ck-heading-dropdown'\n                    ]\n                }\n            });\n            dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n                return areEnabled.some(isEnabled => isEnabled);\n            });\n            dropdownView.buttonView.bind('label').to(headingCommand, 'value', paragraphCommand, 'value', (value, para) => {\n                const whichModel = value || para && 'paragraph';\n                if (typeof whichModel === 'boolean') {\n                    return defaultTitle;\n                }\n                // If none of the commands is active, display default title.\n                if (!titles[whichModel]) {\n                    return defaultTitle;\n                }\n                return titles[whichModel];\n            });\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                const { commandName, commandValue } = evt.source;\n                editor.execute(commandName, commandValue ? { value: commandValue } : undefined);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/heading\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport HeadingEditing from './headingediting';\nimport HeadingUI from './headingui';\nimport '../theme/heading.css';\n/**\n * The headings feature.\n *\n * For a detailed overview, check the {@glink features/headings Headings feature} guide\n * and the {@glink api/heading package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:heading/headingediting~HeadingEditing heading editing feature}\n * and {@link module:heading/headingui~HeadingUI heading UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Heading extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [HeadingEditing, HeadingUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Heading';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/headingbuttonsui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport { getLocalizedOptions } from './utils';\nimport iconHeading1 from '../theme/icons/heading1.svg';\nimport iconHeading2 from '../theme/icons/heading2.svg';\nimport iconHeading3 from '../theme/icons/heading3.svg';\nimport iconHeading4 from '../theme/icons/heading4.svg';\nimport iconHeading5 from '../theme/icons/heading5.svg';\nimport iconHeading6 from '../theme/icons/heading6.svg';\nconst defaultIcons = {\n    heading1: iconHeading1,\n    heading2: iconHeading2,\n    heading3: iconHeading3,\n    heading4: iconHeading4,\n    heading5: iconHeading5,\n    heading6: iconHeading6\n};\n/**\n * The `HeadingButtonsUI` plugin defines a set of UI buttons that can be used instead of the\n * standard drop down component.\n *\n * This feature is not enabled by default by the {@link module:heading/heading~Heading} plugin and needs to be\n * installed manually to the editor configuration.\n *\n * Plugin introduces button UI elements, which names are same as `model` property from {@link module:heading/headingconfig~HeadingOption}.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., Heading, Paragraph, HeadingButtonsUI, ParagraphButtonUI ]\n *     heading: {\n *       options: [\n *         { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n *         { model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n *         { model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n *         { model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n *       ]\n *      },\n *      toolbar: [ 'paragraph', 'heading1', 'heading2', 'heading3' ]\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n *\n * NOTE: The `'paragraph'` button is defined in by the {@link module:paragraph/paragraphbuttonui~ParagraphButtonUI} plugin\n * which needs to be loaded manually as well.\n *\n * It is possible to use custom icons by providing `icon` config option in {@link module:heading/headingconfig~HeadingOption}.\n * For the default configuration standard icons are used.\n */\nexport default class HeadingButtonsUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const options = getLocalizedOptions(this.editor);\n        options\n            .filter(item => item.model !== 'paragraph')\n            .map(item => this._createButton(item));\n    }\n    /**\n     * Creates single button view from provided configuration option.\n     */\n    _createButton(option) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(option.model, locale => {\n            const view = new ButtonView(locale);\n            const command = editor.commands.get('heading');\n            view.label = option.title;\n            view.icon = option.icon || defaultIcons[option.model];\n            view.tooltip = true;\n            view.isToggleable = true;\n            view.bind('isEnabled').to(command);\n            view.bind('isOn').to(command, 'value', value => value == option.model);\n            view.on('execute', () => {\n                editor.execute('heading', { value: option.model });\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/title\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\nimport { DowncastWriter, enablePlaceholder, hidePlaceholder, needsPlaceholder, showPlaceholder } from 'ckeditor5/src/engine';\n// A list of element names that should be treated by the Title plugin as title-like.\n// This means that an element of a type from this list will be changed to a title element\n// when it is the first element in the root.\nconst titleLikeElements = new Set(['paragraph', 'heading1', 'heading2', 'heading3', 'heading4', 'heading5', 'heading6']);\n/**\n * The Title plugin.\n *\n * It splits the document into `Title` and `Body` sections.\n */\nexport default class Title extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * A reference to an empty paragraph in the body\n         * created when there is no element in the body for the placeholder purposes.\n         */\n        this._bodyPlaceholder = new Map();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Title';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return ['Paragraph'];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const model = editor.model;\n        // To use the schema for disabling some features when the selection is inside the title element\n        // it is needed to create the following structure:\n        //\n        // <title>\n        //     <title-content>The title text</title-content>\n        // </title>\n        //\n        // See: https://github.com/ckeditor/ckeditor5/issues/2005.\n        model.schema.register('title', { isBlock: true, allowIn: '$root' });\n        model.schema.register('title-content', { isBlock: true, allowIn: 'title', allowAttributes: ['alignment'] });\n        model.schema.extend('$text', { allowIn: 'title-content' });\n        // Disallow all attributes in `title-content`.\n        model.schema.addAttributeCheck(context => {\n            if (context.endsWith('title-content $text')) {\n                return false;\n            }\n        });\n        // Because `title` is represented by two elements in the model\n        // but only one in the view, it is needed to adjust Mapper.\n        editor.editing.mapper.on('modelToViewPosition', mapModelPositionToView(editor.editing.view));\n        editor.data.mapper.on('modelToViewPosition', mapModelPositionToView(editor.editing.view));\n        // Conversion.\n        editor.conversion.for('downcast').elementToElement({ model: 'title-content', view: 'h1' });\n        editor.conversion.for('downcast').add(dispatcher => dispatcher.on('insert:title', (evt, data, conversionApi) => {\n            conversionApi.consumable.consume(data.item, evt.name);\n        }));\n        // Custom converter is used for data v -> m conversion to avoid calling post-fixer when setting data.\n        // See https://github.com/ckeditor/ckeditor5/issues/2036.\n        editor.data.upcastDispatcher.on('element:h1', dataViewModelH1Insertion, { priority: 'high' });\n        editor.data.upcastDispatcher.on('element:h2', dataViewModelH1Insertion, { priority: 'high' });\n        editor.data.upcastDispatcher.on('element:h3', dataViewModelH1Insertion, { priority: 'high' });\n        // Take care about correct `title` element structure.\n        model.document.registerPostFixer(writer => this._fixTitleContent(writer));\n        // Create and take care of correct position of a `title` element.\n        model.document.registerPostFixer(writer => this._fixTitleElement(writer));\n        // Create element for `Body` placeholder if it is missing.\n        model.document.registerPostFixer(writer => this._fixBodyElement(writer));\n        // Prevent from adding extra at the end of the document.\n        model.document.registerPostFixer(writer => this._fixExtraParagraph(writer));\n        // Attach `Title` and `Body` placeholders to the empty title and/or content.\n        this._attachPlaceholders();\n        // Attach Tab handling.\n        this._attachTabPressHandling();\n    }\n    /**\n     * Returns the title of the document. Note that because this plugin does not allow any formatting inside\n     * the title element, the output of this method will be a plain text, with no HTML tags.\n     *\n     * It is not recommended to use this method together with features that insert markers to the\n     * data output, like comments or track changes features. If such markers start in the title and end in the\n     * body, the result of this method might be incorrect.\n     *\n     * @param options Additional configuration passed to the conversion process.\n     * See {@link module:engine/controller/datacontroller~DataController#get `DataController#get`}.\n     * @returns The title of the document.\n     */\n    getTitle(options = {}) {\n        const rootName = options.rootName ? options.rootName : undefined;\n        const titleElement = this._getTitleElement(rootName);\n        const titleContentElement = titleElement.getChild(0);\n        return this.editor.data.stringify(titleContentElement, options);\n    }\n    /**\n     * Returns the body of the document.\n     *\n     * Note that it is not recommended to use this method together with features that insert markers to the\n     * data output, like comments or track changes features. If such markers start in the title and end in the\n     * body, the result of this method might be incorrect.\n     *\n     * @param options Additional configuration passed to the conversion process.\n     * See {@link module:engine/controller/datacontroller~DataController#get `DataController#get`}.\n     * @returns The body of the document.\n     */\n    getBody(options = {}) {\n        const editor = this.editor;\n        const data = editor.data;\n        const model = editor.model;\n        const rootName = options.rootName ? options.rootName : undefined;\n        const root = editor.model.document.getRoot(rootName);\n        const view = editor.editing.view;\n        const viewWriter = new DowncastWriter(view.document);\n        const rootRange = model.createRangeIn(root);\n        const viewDocumentFragment = viewWriter.createDocumentFragment();\n        // Find all markers that intersects with body.\n        const bodyStartPosition = model.createPositionAfter(root.getChild(0));\n        const bodyRange = model.createRange(bodyStartPosition, model.createPositionAt(root, 'end'));\n        const markers = new Map();\n        for (const marker of model.markers) {\n            const intersection = bodyRange.getIntersection(marker.getRange());\n            if (intersection) {\n                markers.set(marker.name, intersection);\n            }\n        }\n        // Convert the entire root to view.\n        data.mapper.clearBindings();\n        data.mapper.bindElements(root, viewDocumentFragment);\n        data.downcastDispatcher.convert(rootRange, markers, viewWriter, options);\n        // Remove title element from view.\n        viewWriter.remove(viewWriter.createRangeOn(viewDocumentFragment.getChild(0)));\n        // view -> data\n        return editor.data.processor.toData(viewDocumentFragment);\n    }\n    /**\n     * Returns the `title` element when it is in the document. Returns `undefined` otherwise.\n     */\n    _getTitleElement(rootName) {\n        const root = this.editor.model.document.getRoot(rootName);\n        for (const child of root.getChildren()) {\n            if (isTitle(child)) {\n                return child;\n            }\n        }\n    }\n    /**\n     * Model post-fixer callback that ensures that `title` has only one `title-content` child.\n     * All additional children should be moved after the `title` element and renamed to a paragraph.\n     */\n    _fixTitleContent(writer) {\n        let changed = false;\n        for (const rootName of this.editor.model.document.getRootNames()) {\n            const title = this._getTitleElement(rootName);\n            // If there is no title in the content it will be created by `_fixTitleElement` post-fixer.\n            // If the title has just one element, then it is correct. No fixing.\n            if (!title || title.maxOffset === 1) {\n                continue;\n            }\n            const titleChildren = Array.from(title.getChildren());\n            // Skip first child because it is an allowed element.\n            titleChildren.shift();\n            for (const titleChild of titleChildren) {\n                writer.move(writer.createRangeOn(titleChild), title, 'after');\n                writer.rename(titleChild, 'paragraph');\n            }\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n     * Model post-fixer callback that creates a title element when it is missing,\n     * takes care of the correct position of it and removes additional title elements.\n     */\n    _fixTitleElement(writer) {\n        let changed = false;\n        const model = this.editor.model;\n        for (const modelRoot of this.editor.model.document.getRoots()) {\n            const titleElements = Array.from(modelRoot.getChildren()).filter(isTitle);\n            const firstTitleElement = titleElements[0];\n            const firstRootChild = modelRoot.getChild(0);\n            // When title element is at the beginning of the document then try to fix additional title elements (if there are any).\n            if (firstRootChild.is('element', 'title')) {\n                if (titleElements.length > 1) {\n                    fixAdditionalTitleElements(titleElements, writer, model);\n                    changed = true;\n                }\n                continue;\n            }\n            // When there is no title in the document and first element in the document cannot be changed\n            // to the title then create an empty title element at the beginning of the document.\n            if (!firstTitleElement && !titleLikeElements.has(firstRootChild.name)) {\n                const title = writer.createElement('title');\n                writer.insert(title, modelRoot);\n                writer.insertElement('title-content', title);\n                changed = true;\n                continue;\n            }\n            if (titleLikeElements.has(firstRootChild.name)) {\n                // Change the first element in the document to the title if it can be changed (is title-like).\n                changeElementToTitle(firstRootChild, writer, model);\n            }\n            else {\n                // Otherwise, move the first occurrence of the title element to the beginning of the document.\n                writer.move(writer.createRangeOn(firstTitleElement), modelRoot, 0);\n            }\n            fixAdditionalTitleElements(titleElements, writer, model);\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n     * Model post-fixer callback that adds an empty paragraph at the end of the document\n     * when it is needed for the placeholder purposes.\n     */\n    _fixBodyElement(writer) {\n        let changed = false;\n        for (const rootName of this.editor.model.document.getRootNames()) {\n            const modelRoot = this.editor.model.document.getRoot(rootName);\n            if (modelRoot.childCount < 2) {\n                const placeholder = writer.createElement('paragraph');\n                writer.insert(placeholder, modelRoot, 1);\n                this._bodyPlaceholder.set(rootName, placeholder);\n                changed = true;\n            }\n        }\n        return changed;\n    }\n    /**\n     * Model post-fixer callback that removes a paragraph from the end of the document\n     * if it was created for the placeholder purposes and is not needed anymore.\n     */\n    _fixExtraParagraph(writer) {\n        let changed = false;\n        for (const rootName of this.editor.model.document.getRootNames()) {\n            const root = this.editor.model.document.getRoot(rootName);\n            const placeholder = this._bodyPlaceholder.get(rootName);\n            if (shouldRemoveLastParagraph(placeholder, root)) {\n                this._bodyPlaceholder.delete(rootName);\n                writer.remove(placeholder);\n                changed = true;\n            }\n        }\n        return changed;\n    }\n    /**\n     * Attaches the `Title` and `Body` placeholders to the title and/or content.\n     */\n    _attachPlaceholders() {\n        const editor = this.editor;\n        const t = editor.t;\n        const view = editor.editing.view;\n        const sourceElement = editor.sourceElement;\n        const titlePlaceholder = editor.config.get('title.placeholder') || t('Type your title');\n        const bodyPlaceholder = editor.config.get('placeholder') ||\n            sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute('placeholder') ||\n            t('Type or paste your content here.');\n        // Attach placeholder to the view title element.\n        editor.editing.downcastDispatcher.on('insert:title-content', (evt, data, conversionApi) => {\n            const element = conversionApi.mapper.toViewElement(data.item);\n            element.placeholder = titlePlaceholder;\n            enablePlaceholder({\n                view,\n                element,\n                keepOnFocus: true\n            });\n        });\n        // Attach placeholder to first element after a title element and remove it if it's not needed anymore.\n        // First element after title can change, so we need to observe all changes keep placeholder in sync.\n        const bodyViewElements = new Map();\n        // This post-fixer runs after the model post-fixer, so we can assume that the second child in view root will always exist.\n        view.document.registerPostFixer(writer => {\n            let hasChanged = false;\n            for (const viewRoot of view.document.roots) {\n                // `viewRoot` can be empty despite the model post-fixers if the model root was detached.\n                if (viewRoot.isEmpty) {\n                    continue;\n                }\n                // If `viewRoot` is not empty, then we can expect at least two elements in it.\n                const body = viewRoot.getChild(1);\n                const oldBody = bodyViewElements.get(viewRoot.rootName);\n                // If body element has changed we need to disable placeholder on the previous element and enable on the new one.\n                if (body !== oldBody) {\n                    if (oldBody) {\n                        hidePlaceholder(writer, oldBody);\n                        writer.removeAttribute('data-placeholder', oldBody);\n                    }\n                    writer.setAttribute('data-placeholder', bodyPlaceholder, body);\n                    bodyViewElements.set(viewRoot.rootName, body);\n                    hasChanged = true;\n                }\n                // Then we need to display placeholder if it is needed.\n                // See: https://github.com/ckeditor/ckeditor5/issues/8689.\n                if (needsPlaceholder(body, true) && viewRoot.childCount === 2 && body.name === 'p') {\n                    hasChanged = showPlaceholder(writer, body) ? true : hasChanged;\n                }\n                else {\n                    // Or hide if it is not needed.\n                    hasChanged = hidePlaceholder(writer, body) ? true : hasChanged;\n                }\n            }\n            return hasChanged;\n        });\n    }\n    /**\n     * Creates navigation between the title and body sections using <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keys.\n     */\n    _attachTabPressHandling() {\n        const editor = this.editor;\n        const model = editor.model;\n        // Pressing <kbd>Tab</kbd> inside the title should move the caret to the body.\n        editor.keystrokes.set('TAB', (data, cancel) => {\n            model.change(writer => {\n                const selection = model.document.selection;\n                const selectedElements = Array.from(selection.getSelectedBlocks());\n                if (selectedElements.length === 1 && selectedElements[0].is('element', 'title-content')) {\n                    const root = selection.getFirstPosition().root;\n                    const firstBodyElement = root.getChild(1);\n                    writer.setSelection(firstBodyElement, 0);\n                    cancel();\n                }\n            });\n        });\n        // Pressing <kbd>Shift</kbd>+<kbd>Tab</kbd> at the beginning of the body should move the caret to the title.\n        editor.keystrokes.set('SHIFT + TAB', (data, cancel) => {\n            model.change(writer => {\n                const selection = model.document.selection;\n                if (!selection.isCollapsed) {\n                    return;\n                }\n                const selectedElement = first(selection.getSelectedBlocks());\n                const selectionPosition = selection.getFirstPosition();\n                const root = editor.model.document.getRoot(selectionPosition.root.rootName);\n                const title = root.getChild(0);\n                const body = root.getChild(1);\n                if (selectedElement === body && selectionPosition.isAtStart) {\n                    writer.setSelection(title.getChild(0), 0);\n                    cancel();\n                }\n            });\n        });\n    }\n}\n/**\n * A view-to-model converter for the h1 that appears at the beginning of the document (a title element).\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param evt An object containing information about the fired event.\n * @param data An object containing conversion input, a placeholder for conversion output and possibly other values.\n * @param conversionApi Conversion interface to be used by the callback.\n */\nfunction dataViewModelH1Insertion(evt, data, conversionApi) {\n    const modelCursor = data.modelCursor;\n    const viewItem = data.viewItem;\n    if (!modelCursor.isAtStart || !modelCursor.parent.is('element', '$root')) {\n        return;\n    }\n    if (!conversionApi.consumable.consume(viewItem, { name: true })) {\n        return;\n    }\n    const modelWriter = conversionApi.writer;\n    const title = modelWriter.createElement('title');\n    const titleContent = modelWriter.createElement('title-content');\n    modelWriter.append(titleContent, title);\n    modelWriter.insert(title, modelCursor);\n    conversionApi.convertChildren(viewItem, titleContent);\n    conversionApi.updateConversionResult(title, data);\n}\n/**\n * Maps position from the beginning of the model `title` element to the beginning of the view `h1` element.\n *\n * ```html\n * <title>^<title-content>Foo</title-content></title> -> <h1>^Foo</h1>\n * ```\n */\nfunction mapModelPositionToView(editingView) {\n    return (evt, data) => {\n        const positionParent = data.modelPosition.parent;\n        if (!positionParent.is('element', 'title')) {\n            return;\n        }\n        const modelTitleElement = positionParent.parent;\n        const viewElement = data.mapper.toViewElement(modelTitleElement);\n        data.viewPosition = editingView.createPositionAt(viewElement, 0);\n        evt.stop();\n    };\n}\n/**\n * @returns Returns true when given element is a title. Returns false otherwise.\n */\nfunction isTitle(element) {\n    return element.is('element', 'title');\n}\n/**\n * Changes the given element to the title element.\n */\nfunction changeElementToTitle(element, writer, model) {\n    const title = writer.createElement('title');\n    writer.insert(title, element, 'before');\n    writer.insert(element, title, 0);\n    writer.rename(element, 'title-content');\n    model.schema.removeDisallowedAttributes([element], writer);\n}\n/**\n * Loops over the list of title elements and fixes additional ones.\n *\n * @returns Returns true when there was any change. Returns false otherwise.\n */\nfunction fixAdditionalTitleElements(titleElements, writer, model) {\n    let hasChanged = false;\n    for (const title of titleElements) {\n        if (title.index !== 0) {\n            fixTitleElement(title, writer, model);\n            hasChanged = true;\n        }\n    }\n    return hasChanged;\n}\n/**\n * Changes given title element to a paragraph or removes it when it is empty.\n */\nfunction fixTitleElement(title, writer, model) {\n    const child = title.getChild(0);\n    // Empty title should be removed.\n    // It is created as a result of pasting to the title element.\n    if (child.isEmpty) {\n        writer.remove(title);\n        return;\n    }\n    writer.move(writer.createRangeOn(child), title, 'before');\n    writer.rename(child, 'paragraph');\n    writer.remove(title);\n    model.schema.removeDisallowedAttributes([child], writer);\n}\n/**\n * Returns true when the last paragraph in the document was created only for the placeholder\n * purpose and it's not needed anymore. Returns false otherwise.\n */\nfunction shouldRemoveLastParagraph(placeholder, root) {\n    if (!placeholder || !placeholder.is('element', 'paragraph') || placeholder.childCount) {\n        return false;\n    }\n    if (root.childCount <= 2 || root.getChild(root.childCount - 1) !== placeholder) {\n        return false;\n    }\n    return true;\n}\n"],
  "mappings": "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",
  "names": []
}
