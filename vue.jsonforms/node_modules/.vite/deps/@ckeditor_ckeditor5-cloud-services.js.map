{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-cloud-services/src/token/token.js", "../../@ckeditor/ckeditor5-cloud-services/src/uploadgateway/fileuploader.js", "../../@ckeditor/ckeditor5-cloud-services/src/uploadgateway/uploadgateway.js", "../../@ckeditor/ckeditor5-cloud-services/src/cloudservicescore.js", "../../@ckeditor/ckeditor5-cloud-services/src/cloudservices.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module cloud-services/token/token\n */\n/* globals XMLHttpRequest, setTimeout, clearTimeout, atob */\nimport { ObservableMixin, CKEditorError } from 'ckeditor5/src/utils';\nconst DEFAULT_OPTIONS = { autoRefresh: true };\nconst DEFAULT_TOKEN_REFRESH_TIMEOUT_TIME = 3600000;\n/**\n * Class representing the token used for communication with CKEditor Cloud Services.\n * Value of the token is retrieving from the specified URL and is refreshed every 1 hour by default.\n */\nexport default class Token extends ObservableMixin() {\n    /**\n     * Creates `Token` instance.\n     * Method `init` should be called after using the constructor or use `create` method instead.\n     *\n     * @param tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n     * value is a function it has to match the {@link module:cloud-services/token/token~Token#refreshToken} interface.\n     */\n    constructor(tokenUrlOrRefreshToken, options = {}) {\n        super();\n        if (!tokenUrlOrRefreshToken) {\n            /**\n             * A `tokenUrl` must be provided as the first constructor argument.\n             *\n             * @error token-missing-token-url\n             */\n            throw new CKEditorError('token-missing-token-url', this);\n        }\n        if (options.initValue) {\n            this._validateTokenValue(options.initValue);\n        }\n        this.set('value', options.initValue);\n        if (typeof tokenUrlOrRefreshToken === 'function') {\n            this._refresh = tokenUrlOrRefreshToken;\n        }\n        else {\n            this._refresh = () => defaultRefreshToken(tokenUrlOrRefreshToken);\n        }\n        this._options = { ...DEFAULT_OPTIONS, ...options };\n    }\n    /**\n     * Initializes the token.\n     */\n    init() {\n        return new Promise((resolve, reject) => {\n            if (!this.value) {\n                this.refreshToken()\n                    .then(resolve)\n                    .catch(reject);\n                return;\n            }\n            if (this._options.autoRefresh) {\n                this._registerRefreshTokenTimeout();\n            }\n            resolve(this);\n        });\n    }\n    /**\n     * Refresh token method. Useful in a method form as it can be override in tests.\n     */\n    refreshToken() {\n        return this._refresh()\n            .then(value => {\n            this._validateTokenValue(value);\n            this.set('value', value);\n            if (this._options.autoRefresh) {\n                this._registerRefreshTokenTimeout();\n            }\n            return this;\n        });\n    }\n    /**\n     * Destroys token instance. Stops refreshing.\n     */\n    destroy() {\n        clearTimeout(this._tokenRefreshTimeout);\n    }\n    /**\n     * Checks whether the provided token follows the JSON Web Tokens (JWT) format.\n     *\n     * @param tokenValue The token to validate.\n     */\n    _validateTokenValue(tokenValue) {\n        // The token must be a string.\n        const isString = typeof tokenValue === 'string';\n        // The token must be a plain string without quotes (\"\").\n        const isPlainString = !/^\".*\"$/.test(tokenValue);\n        // JWT token contains 3 parts: header, payload, and signature.\n        // Each part is separated by a dot.\n        const isJWTFormat = isString && tokenValue.split('.').length === 3;\n        if (!(isPlainString && isJWTFormat)) {\n            /**\n             * The provided token must follow the [JSON Web Tokens](https://jwt.io/introduction/) format.\n             *\n             * @error token-not-in-jwt-format\n             */\n            throw new CKEditorError('token-not-in-jwt-format', this);\n        }\n    }\n    /**\n     * Registers a refresh token timeout for the time taken from token.\n     */\n    _registerRefreshTokenTimeout() {\n        const tokenRefreshTimeoutTime = this._getTokenRefreshTimeoutTime();\n        clearTimeout(this._tokenRefreshTimeout);\n        this._tokenRefreshTimeout = setTimeout(() => {\n            this.refreshToken();\n        }, tokenRefreshTimeoutTime);\n    }\n    /**\n     * Returns token refresh timeout time calculated from expire time in the token payload.\n     *\n     * If the token parse fails or the token payload doesn't contain, the default DEFAULT_TOKEN_REFRESH_TIMEOUT_TIME is returned.\n     */\n    _getTokenRefreshTimeoutTime() {\n        try {\n            const [, binaryTokenPayload] = this.value.split('.');\n            const { exp: tokenExpireTime } = JSON.parse(atob(binaryTokenPayload));\n            if (!tokenExpireTime) {\n                return DEFAULT_TOKEN_REFRESH_TIMEOUT_TIME;\n            }\n            const tokenRefreshTimeoutTime = Math.floor(((tokenExpireTime * 1000) - Date.now()) / 2);\n            return tokenRefreshTimeoutTime;\n        }\n        catch (err) {\n            return DEFAULT_TOKEN_REFRESH_TIMEOUT_TIME;\n        }\n    }\n    /**\n     * Creates a initialized {@link module:cloud-services/token/token~Token} instance.\n     *\n     * @param tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n     * value is a function it has to match the {@link module:cloud-services/token/token~Token#refreshToken} interface.\n     */\n    static create(tokenUrlOrRefreshToken, options = {}) {\n        const token = new Token(tokenUrlOrRefreshToken, options);\n        return token.init();\n    }\n}\n/**\n * This function is called in a defined interval by the {@link ~Token} class. It also can be invoked manually.\n * It should return a promise, which resolves with the new token value.\n * If any error occurs it should return a rejected promise with an error message.\n */\nfunction defaultRefreshToken(tokenUrl) {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', tokenUrl);\n        xhr.addEventListener('load', () => {\n            const statusCode = xhr.status;\n            const xhrResponse = xhr.response;\n            if (statusCode < 200 || statusCode > 299) {\n                /**\n                 * Cannot download new token from the provided url.\n                 *\n                 * @error token-cannot-download-new-token\n                 */\n                return reject(new CKEditorError('token-cannot-download-new-token', null));\n            }\n            return resolve(xhrResponse);\n        });\n        xhr.addEventListener('error', () => reject(new Error('Network Error')));\n        xhr.addEventListener('abort', () => reject(new Error('Abort')));\n        xhr.send();\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { EmitterMixin, CKEditorError } from 'ckeditor5/src/utils';\nconst BASE64_HEADER_REG_EXP = /^data:(\\S*?);base64,/;\n/**\n * FileUploader class used to upload single file.\n */\nexport default class FileUploader extends EmitterMixin() {\n    /**\n     * Creates `FileUploader` instance.\n     *\n     * @param fileOrData A blob object or a data string encoded with Base64.\n     * @param token Token used for authentication.\n     * @param apiAddress API address.\n     */\n    constructor(fileOrData, token, apiAddress) {\n        super();\n        if (!fileOrData) {\n            /**\n             * File must be provided as the first argument.\n             *\n             * @error fileuploader-missing-file\n             */\n            throw new CKEditorError('fileuploader-missing-file', null);\n        }\n        if (!token) {\n            /**\n             * Token must be provided as the second argument.\n             *\n             * @error fileuploader-missing-token\n             */\n            throw new CKEditorError('fileuploader-missing-token', null);\n        }\n        if (!apiAddress) {\n            /**\n             * Api address must be provided as the third argument.\n             *\n             * @error fileuploader-missing-api-address\n             */\n            throw new CKEditorError('fileuploader-missing-api-address', null);\n        }\n        this.file = _isBase64(fileOrData) ? _base64ToBlob(fileOrData) : fileOrData;\n        this._token = token;\n        this._apiAddress = apiAddress;\n    }\n    /**\n     * Registers callback on `progress` event.\n     */\n    onProgress(callback) {\n        this.on('progress', (event, data) => callback(data));\n        return this;\n    }\n    /**\n     * Registers callback on `error` event. Event is called once when error occurs.\n     */\n    onError(callback) {\n        this.once('error', (event, data) => callback(data));\n        return this;\n    }\n    /**\n     * Aborts upload process.\n     */\n    abort() {\n        this.xhr.abort();\n    }\n    /**\n     * Sends XHR request to API.\n     */\n    send() {\n        this._prepareRequest();\n        this._attachXHRListeners();\n        return this._sendRequest();\n    }\n    /**\n     * Prepares XHR request.\n     */\n    _prepareRequest() {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', this._apiAddress);\n        xhr.setRequestHeader('Authorization', this._token.value);\n        xhr.responseType = 'json';\n        this.xhr = xhr;\n    }\n    /**\n     * Attaches listeners to the XHR.\n     */\n    _attachXHRListeners() {\n        const xhr = this.xhr;\n        const onError = (message) => {\n            return () => this.fire('error', message);\n        };\n        xhr.addEventListener('error', onError('Network Error'));\n        xhr.addEventListener('abort', onError('Abort'));\n        /* istanbul ignore else -- @preserve */\n        if (xhr.upload) {\n            xhr.upload.addEventListener('progress', event => {\n                if (event.lengthComputable) {\n                    this.fire('progress', {\n                        total: event.total,\n                        uploaded: event.loaded\n                    });\n                }\n            });\n        }\n        xhr.addEventListener('load', () => {\n            const statusCode = xhr.status;\n            const xhrResponse = xhr.response;\n            if (statusCode < 200 || statusCode > 299) {\n                return this.fire('error', xhrResponse.message || xhrResponse.error);\n            }\n        });\n    }\n    /**\n     * Sends XHR request.\n     */\n    _sendRequest() {\n        const formData = new FormData();\n        const xhr = this.xhr;\n        formData.append('file', this.file);\n        return new Promise((resolve, reject) => {\n            xhr.addEventListener('load', () => {\n                const statusCode = xhr.status;\n                const xhrResponse = xhr.response;\n                if (statusCode < 200 || statusCode > 299) {\n                    if (xhrResponse.message) {\n                        /**\n                         * Uploading file failed.\n                         *\n                         * @error fileuploader-uploading-data-failed\n                         */\n                        return reject(new CKEditorError('fileuploader-uploading-data-failed', this, { message: xhrResponse.message }));\n                    }\n                    return reject(xhrResponse.error);\n                }\n                return resolve(xhrResponse);\n            });\n            xhr.addEventListener('error', () => reject(new Error('Network Error')));\n            xhr.addEventListener('abort', () => reject(new Error('Abort')));\n            xhr.send(formData);\n        });\n    }\n}\n/**\n * Transforms Base64 string data into file.\n *\n * @param base64 String data.\n */\nfunction _base64ToBlob(base64, sliceSize = 512) {\n    try {\n        const contentType = base64.match(BASE64_HEADER_REG_EXP)[1];\n        const base64Data = atob(base64.replace(BASE64_HEADER_REG_EXP, ''));\n        const byteArrays = [];\n        for (let offset = 0; offset < base64Data.length; offset += sliceSize) {\n            const slice = base64Data.slice(offset, offset + sliceSize);\n            const byteNumbers = new Array(slice.length);\n            for (let i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n            byteArrays.push(new Uint8Array(byteNumbers));\n        }\n        return new Blob(byteArrays, { type: contentType });\n    }\n    catch (error) {\n        /**\n         * Problem with decoding Base64 image data.\n         *\n         * @error fileuploader-decoding-image-data-error\n         */\n        throw new CKEditorError('fileuploader-decoding-image-data-error', null);\n    }\n}\n/**\n * Checks that string is Base64.\n */\nfunction _isBase64(string) {\n    if (typeof string !== 'string') {\n        return false;\n    }\n    const match = string.match(BASE64_HEADER_REG_EXP);\n    return !!(match && match.length);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module cloud-services/uploadgateway/uploadgateway\n */\nimport FileUploader from './fileuploader';\nimport { CKEditorError } from 'ckeditor5/src/utils';\n/**\n * UploadGateway abstracts file uploads to CKEditor Cloud Services.\n */\nexport default class UploadGateway {\n    /**\n     * Creates `UploadGateway` instance.\n     *\n     * @param token Token used for authentication.\n     * @param apiAddress API address.\n     */\n    constructor(token, apiAddress) {\n        if (!token) {\n            /**\n             * Token must be provided.\n             *\n             * @error uploadgateway-missing-token\n             */\n            throw new CKEditorError('uploadgateway-missing-token', null);\n        }\n        if (!apiAddress) {\n            /**\n             * Api address must be provided.\n             *\n             * @error uploadgateway-missing-api-address\n             */\n            throw new CKEditorError('uploadgateway-missing-api-address', null);\n        }\n        this._token = token;\n        this._apiAddress = apiAddress;\n    }\n    /**\n     * Creates a {@link module:cloud-services/uploadgateway/fileuploader~FileUploader} instance that wraps\n     * file upload process. The file is being sent at a time when the\n     * {@link module:cloud-services/uploadgateway/fileuploader~FileUploader#send} method is called.\n     *\n     * ```ts\n     * const token = await Token.create( 'https://token-endpoint' );\n     * new UploadGateway( token, 'https://example.org' )\n     * \t.upload( 'FILE' )\n     * \t.onProgress( ( data ) => console.log( data ) )\n     * \t.send()\n     * \t.then( ( response ) => console.log( response ) );\n     * ```\n     *\n     * @param {Blob|String} fileOrData A blob object or a data string encoded with Base64.\n     * @returns {module:cloud-services/uploadgateway/fileuploader~FileUploader} Returns `FileUploader` instance.\n     */\n    upload(fileOrData) {\n        return new FileUploader(fileOrData, this._token, this._apiAddress);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module cloud-services/cloudservicescore\n */\nimport { ContextPlugin } from 'ckeditor5/src/core';\nimport Token from './token/token';\nimport UploadGateway from './uploadgateway/uploadgateway';\n/**\n * The `CloudServicesCore` plugin exposes the base API for communication with CKEditor Cloud Services.\n */\nexport default class CloudServicesCore extends ContextPlugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CloudServicesCore';\n    }\n    /**\n     * Creates the {@link module:cloud-services/token/token~Token} instance.\n     *\n     * @param tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n     * value is a function it has to match the {@link module:cloud-services/token/token~Token#refreshToken} interface.\n     * @param options.initValue Initial value of the token.\n     * @param options.autoRefresh Specifies whether to start the refresh automatically.\n     */\n    createToken(tokenUrlOrRefreshToken, options) {\n        return new Token(tokenUrlOrRefreshToken, options);\n    }\n    /**\n     * Creates the {@link module:cloud-services/uploadgateway/uploadgateway~UploadGateway} instance.\n     *\n     * @param token Token used for authentication.\n     * @param apiAddress API address.\n     */\n    createUploadGateway(token, apiAddress) {\n        return new UploadGateway(token, apiAddress);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module cloud-services/cloudservices\n */\nimport { ContextPlugin } from 'ckeditor5/src/core';\nimport { CKEditorError } from 'ckeditor5/src/utils';\nimport CloudServicesCore from './cloudservicescore';\n/**\n * Plugin introducing the integration between CKEditor 5 and CKEditor Cloud Services .\n *\n * It initializes the token provider based on\n * the {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig `config.cloudService`}.\n */\nexport default class CloudServices extends ContextPlugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * Other plugins use this token for the authorization process. It handles token requesting and refreshing.\n         * Its value is `null` when {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl} is not provided.\n         *\n         * @readonly\n         */\n        this.token = null;\n        /**\n         * A map of token object instances keyed by the token URLs.\n         */\n        this._tokens = new Map();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CloudServices';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [CloudServicesCore];\n    }\n    /**\n     * @inheritDoc\n     */\n    async init() {\n        const config = this.context.config;\n        const options = config.get('cloudServices') || {};\n        for (const [key, value] of Object.entries(options)) {\n            this[key] = value;\n        }\n        if (!this.tokenUrl) {\n            this.token = null;\n            return;\n        }\n        const cloudServicesCore = this.context.plugins.get('CloudServicesCore');\n        this.token = await cloudServicesCore.createToken(this.tokenUrl).init();\n        this._tokens.set(this.tokenUrl, this.token);\n    }\n    /**\n     * Registers an additional authentication token URL for CKEditor Cloud Services or a callback to the token value promise. See the\n     * {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl} for more details.\n     *\n     * @param tokenUrl The authentication token URL for CKEditor Cloud Services or a callback to the token value promise.\n     */\n    async registerTokenUrl(tokenUrl) {\n        // Reuse the token instance in case of multiple features using the same token URL.\n        if (this._tokens.has(tokenUrl)) {\n            return this.getTokenFor(tokenUrl);\n        }\n        const cloudServicesCore = this.context.plugins.get('CloudServicesCore');\n        const token = await cloudServicesCore.createToken(tokenUrl).init();\n        this._tokens.set(tokenUrl, token);\n        return token;\n    }\n    /**\n     * Returns an authentication token provider previously registered by {@link #registerTokenUrl}.\n     *\n     * @param tokenUrl The authentication token URL for CKEditor Cloud Services or a callback to the token value promise.\n     */\n    getTokenFor(tokenUrl) {\n        const token = this._tokens.get(tokenUrl);\n        if (!token) {\n            /**\n             * The provided `tokenUrl` was not registered by {@link module:cloud-services/cloudservices~CloudServices#registerTokenUrl}.\n             *\n             * @error cloudservices-token-not-registered\n             */\n            throw new CKEditorError('cloudservices-token-not-registered', this);\n        }\n        return token;\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        for (const token of this._tokens.values()) {\n            token.destroy();\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
