import {
  provideLocalizationService
} from "./chunk-TNWINVQ6.js";
import {
  Button
} from "./chunk-EA6IUSJI.js";
import "./chunk-P43752AQ.js";
import {
  animate,
  cancelAnimation
} from "./chunk-GK4QQKT7.js";
import {
  checkIcon,
  copyIcon,
  exclamationCircleIcon,
  fileAudioIcon,
  fileConfigIcon,
  fileDataIcon,
  fileIcon,
  fileImageIcon,
  filePdfIcon,
  filePresentationIcon,
  fileProgrammingIcon,
  fileTxtIcon,
  fileVideoIcon,
  fileZipIcon,
  uploadIcon
} from "./chunk-HKPTYRTE.js";
import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";
import {
  __commonJS,
  __toESM
} from "./chunk-HM4MQYWN.js";

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject2(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject2(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject: isObject2,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value2, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value2;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value2, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value2));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove2(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove2() {
          }
        };
      }()
    );
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value2) {
            resolve(value2);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || defaults.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel2) {
            if (!request) {
              return;
            }
            reject(!cancel2 || cancel2 && cancel2.type ? new Cancel("canceled") : cancel2);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/defaults.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value2) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value2;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data7, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data7) || utils.isArrayBuffer(data7) || utils.isBuffer(data7) || utils.isStream(data7) || utils.isFile(data7) || utils.isBlob(data7)) {
          return data7;
        }
        if (utils.isArrayBufferView(data7)) {
          return data7.buffer;
        }
        if (utils.isURLSearchParams(data7)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data7.toString();
        }
        if (utils.isObject(data7) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data7);
        }
        return data7;
      }],
      transformResponse: [function transformResponse(data7) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data7) && data7.length) {
          try {
            return JSON.parse(data7);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data7;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data7, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data7 = fn.call(context, data7, headers);
      });
      return data7;
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value2) {
      return !!(value2 && value2.__CANCEL__);
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.24.0"
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator3(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator3, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value2, opt, opts) {
        if (validator3 === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator3 ? validator3(value2, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator3 = schema[opt];
        if (validator3) {
          var value2 = options[opt];
          var result = value2 === void 0 || validator3(value2, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator3 = require_validator();
    var validators = validator3.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator3.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data7, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: data7
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel2) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel2);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel2(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel2;
      var token = new CancelToken(function executor(c) {
        cancel2 = c;
      });
      return {
        token,
        cancel: cancel2
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    module.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.Cancel = require_Cancel();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.VERSION = require_data().version;
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module.exports = axios2;
    module.exports.default = axios2;
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/@progress/kendo-vue-upload/node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value2) {
  return typeof value2 === "object";
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/classNames.js
var classNames = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.filter(function(arg) {
    return arg !== true && !!arg;
  }).map(function(arg) {
    return Array.isArray(arg) ? classNames.apply(void 0, arg) : isObject(arg) ? Object.keys(arg).map(function(key, idx) {
      return arg[idx] || arg[key] && key || null;
    }).filter(function(el) {
      return el !== null;
    }).join(" ") : arg;
  }).filter(function(arg) {
    return !!arg;
  }).join(" ");
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/keys.js
var Keys = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  delete: 46
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/refs.js
function getRef(comp, refName, customRef) {
  return comp.v3 ? comp["".concat(refName, "Ref")] : comp.$refs["".concat(customRef || refName)];
}
function setRef(comp, refName, customRef) {
  return comp.v3 ? function(el) {
    comp["".concat(refName, "Ref")] = el;
  } : customRef || refName;
}

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(obj, key, value2) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a2) {
  var h = _a2.h, template = _a2.template, defaultRendering = _a2.defaultRendering, defaultSlots = _a2.defaultSlots, additionalProps = _a2.additionalProps, additionalListeners = _a2.additionalListeners, swapDefaultSlots = _a2.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/getTabIndex.js
var DISABLED_TABINDEX = -1;
var DEFAULT_TABINDEX = 0;
var getTabIndex = function(tabIndex, disabled, useDefaultTabIndexWhenDisabled) {
  var parsedTabIndex = typeof tabIndex === "string" ? parseInt(tabIndex, void 0) : tabIndex;
  if (parsedTabIndex === NaN) {
    return void 0;
  }
  return parsedTabIndex !== void 0 ? parsedTabIndex : disabled ? useDefaultTabIndexWhenDisabled ? void 0 : DISABLED_TABINDEX : DEFAULT_TABINDEX;
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/isRtl.js
function isRtl(element) {
  return Boolean(canUseDOM && element && getComputedStyle(element).direction === "rtl");
}

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata3) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata3);
  } else {
    var message = "License activation failed for ".concat(packageMetadata3.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata3.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/icons/constants.js
var SIZE_CLASSES = {
  "default": "",
  "xsmall": "k-icon-xs",
  "small": "k-icon-sm",
  "medium": "k-icon-md",
  "large": "k-icon-lg",
  "xlarge": "k-icon-xl",
  "xxlarge": "k-icon-xxl",
  "xxxlarge": "k-icon-xxxl"
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";
var FontIconVue2 = {
  name: "KendoFontIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    tabIndex: Number
  },
  computed: {
    fontClassNames: function fontClassNames() {
      var _a2;
      var _b = this.$props, name = _b.name, flip = _b.flip, size = _b.size, themeColor = _b.themeColor;
      return _a2 = {
        "k-icon": true
      }, _a2["k-i-" + name] = name, _a2["k-color-" + themeColor] = themeColor, _a2["k-flip-h"] = flip === "horizontal" || flip === "both", _a2["k-flip-v"] = flip === "vertical" || flip === "both", _a2[SIZE_CLASSES[size]] = size, _a2;
    }
  },
  // @ts-ignore
  setup: !isV33 ? void 0 : function() {
    var v3 = !!isV33;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh2 || createElement;
    var _a2 = this.$props, id = _a2.id, title = _a2.title, tabIndex = _a2.tabIndex, ariaLabel = _a2.ariaLabel;
    return h("span", {
      "class": this.fontClassNames,
      id,
      attrs: this.v3 ? void 0 : {
        id,
        title,
        "aria-label": ariaLabel,
        tabIndex,
        role: "presentation"
      },
      title,
      "aria-label": ariaLabel,
      tabIndex,
      role: "presentation",
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    });
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit("click", e);
    }
  }
};
var FontIcon = FontIconVue2;

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";
var SvgIconVue2 = {
  name: "KendoSvgIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    icon: Object,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number,
    svgClassName: String,
    svgStyle: Object
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a2;
      var _b = this.$props, name = _b.name, flip = _b.flip, size = _b.size, themeColor = _b.themeColor;
      return _a2 = {
        "k-svg-icon": true
      }, _a2["k-color-" + themeColor] = themeColor, _a2["k-svg-i-" + name] = name, _a2["k-flip-h"] = flip === "horizontal" || flip === "both", _a2["k-flip-v"] = flip === "vertical" || flip === "both", _a2[SIZE_CLASSES[size]] = size, _a2;
    }
  },
  // @ts-ignore
  setup: !isV34 ? void 0 : function() {
    var v3 = !!isV34;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render3(createElement) {
    var h = gh3 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a2 = this.$props, svgClassName = _a2.svgClassName, icon = _a2.icon, id = _a2.id, tabIndex = _a2.tabIndex, svgStyle = _a2.svgStyle, viewBox = _a2.viewBox, title = _a2.title, ariaLabel = _a2.ariaLabel;
    var innerHTML = icon ? icon.content : void 0;
    var attrs = {
      id,
      title,
      "aria-hidden": true,
      tabIndex,
      ariaLabel,
      focusable: "false",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: icon ? icon.viewBox : viewBox
    };
    var svg = h("svg", __assign2(__assign2({}, attrs), {
      attrs: this.v3 ? void 0 : attrs,
      domProps: this.v3 ? void 0 : {
        innerHTML
      },
      innerHTML,
      "class": svgClassName,
      style: svgStyle
    }), icon ? [] : [defaultSlot]);
    return h("span", {
      "class": this.wrapperClass,
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }, [svg]);
  },
  methods: {
    handleClick: function handleClick2(e) {
      this.$emit("click", e);
    }
  }
};
var SvgIcon = SvgIconVue2;

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";
var IconVue2 = {
  name: "KendoIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  inject: {
    kendoIcons: {
      default: {
        type: "svg",
        icons: {}
      }
    }
  },
  props: {
    name: String,
    icon: Object,
    title: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number
  },
  // @ts-ignore
  setup: !isV35 ? void 0 : function() {
    var v3 = !!isV35;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render4(createElement) {
    var h = gh4 || createElement;
    var _a2 = this.$props, name = _a2.name, icon = _a2.icon, themeColor = _a2.themeColor, size = _a2.size, flip = _a2.flip, id = _a2.id, viewBox = _a2.viewBox, tabIndex = _a2.tabIndex, title = _a2.title, ariaLabel = _a2.ariaLabel;
    var svg = name && this.kendoIcons && this.kendoIcons.icons && this.kendoIcons.icons[name] || icon;
    var renderSVG = this.kendoIcons && this.kendoIcons.type === "svg" && svg !== void 0;
    var newSize = this.kendoIcons && this.kendoIcons.size ? this.kendoIcons.size : size;
    var newFlip = this.kendoIcons && this.kendoIcons.flip ? this.kendoIcons.flip : flip;
    var resolvedName = name || (icon && icon.name ? icon.name : void 0);
    var commonProps = {
      themeColor,
      size: newSize,
      flip: newFlip,
      id,
      tabIndex,
      title,
      ariaLabel
    };
    var fontIcon = h(FontIcon, __assign3(__assign3({}, commonProps), {
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    var svgIcon = h(SvgIcon, __assign3(__assign3({}, commonProps), {
      icon: svg,
      viewBox,
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        icon: svg,
        viewBox,
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    return renderSVG ? svgIcon : fontIcon;
  },
  methods: {
    handleClick: function handleClick3(e) {
      this.$emit("click", e);
    }
  }
};
var Icon = IconVue2;

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation2.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation2.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation2.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-vue-upload/dist/es/interfaces/UploadFileStatus.js
var UploadFileStatus;
(function(UploadFileStatus2) {
  UploadFileStatus2[UploadFileStatus2["UploadFailed"] = 0] = "UploadFailed";
  UploadFileStatus2[UploadFileStatus2["Initial"] = 1] = "Initial";
  UploadFileStatus2[UploadFileStatus2["Selected"] = 2] = "Selected";
  UploadFileStatus2[UploadFileStatus2["Uploading"] = 3] = "Uploading";
  UploadFileStatus2[UploadFileStatus2["Uploaded"] = 4] = "Uploaded";
  UploadFileStatus2[UploadFileStatus2["RemoveFailed"] = 5] = "RemoveFailed";
  UploadFileStatus2[UploadFileStatus2["Removing"] = 6] = "Removing";
})(UploadFileStatus || (UploadFileStatus = {}));

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-progressbars/dist/es/common/constants.js
var LABEL_DECIMALS = 3;
var DEFAULT_ANIMATION_DURATION = 400;
var NO_ANIMATION = 0;

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-progressbars/dist/es/common/utils.js
var truncateNumber = function(value2) {
  var numberParts = value2.toString().split(".");
  return numberParts.length === 1 ? "".concat(numberParts[0]) : "".concat(numberParts[0], ".").concat(numberParts[1].substr(0, LABEL_DECIMALS));
};
var calculatePercentage = function(min, max, value2) {
  var onePercent = Math.abs((max - min) / 100);
  return Math.abs((value2 - min) / onePercent);
};
var updateProgress = function(progressRef, progressWrapRef, percentage, isVertical2) {
  var progressPercentage = Math.max(percentage, 0.01);
  var progressWrapPercentage = 100 / progressPercentage * 100;
  if (progressRef && progressWrapRef) {
    progressRef.style.width = !isVertical2 ? "".concat(progressPercentage, "%") : "100%";
    progressWrapRef.style.width = !isVertical2 ? "".concat(progressWrapPercentage, "%") : "100%";
    progressRef.style.height = isVertical2 ? "".concat(progressPercentage, "%") : "100%";
    progressWrapRef.style.height = isVertical2 ? "".concat(progressWrapPercentage, "%") : "100%";
  }
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-progressbars/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-progressbars",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693312668,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-progressbars/dist/es/progressbar/ProgressBar.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var ProgressBarVue2 = {
  name: "KendoProgressBar",
  props: {
    animation: {
      type: [Boolean, Object],
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    reverse: {
      type: Boolean,
      default: false
    },
    label: String,
    labelRender: [String, Object, Function],
    labelVisible: {
      type: Boolean,
      default: true
    },
    labelPlacement: {
      type: String,
      default: void 0,
      validator: function validator(value2) {
        return ["start", "center", "end"].includes(value2);
      }
    },
    dir: {
      type: String,
      default: void 0
    },
    max: {
      type: Number,
      default: 100
    },
    min: {
      type: Number,
      default: 0
    },
    value: {
      type: Number,
      default: 0
    },
    orientation: {
      type: String,
      default: "horizontal",
      validator: function validator2(value2) {
        return ["horizontal", "vertical"].includes(value2);
      }
    },
    tabIndex: Number,
    emptyStyle: Object,
    emptyClassName: String,
    progressStyle: Object,
    progressClassName: String,
    ariaLabel: String
  },
  created: function created2() {
    validatePackage(packageMetadata);
    this.currentDir = this.$props.dir;
  },
  mounted: function mounted2() {
    this._progressStatus = getRef(this, "progressStatus");
    this._progressStatusWrap = getRef(this, "progressStatusWrap");
    this.currentDir = this.$props.dir !== void 0 ? this.$props.dir : isRtl(this.$el) ? "rtl" : "ltr";
    this.animationFrame = animate({
      duration: this.animationDuration,
      onStart: this.handleStart,
      onUpdate: this.handleUpdate,
      onEnd: this.handleEnd
    });
  },
  destroyed: !!isV36 ? void 0 : function() {
    cancelAnimation(this.animationFrame);
  },
  // @ts-ignore
  unmounted: function unmounted2() {
    cancelAnimation(this.animationFrame);
  },
  data: function data() {
    return {
      currentDir: void 0
    };
  },
  watch: {
    value: function value(_newValue, oldValue) {
      this.prevValue = oldValue;
      this.animationFrame = animate({
        duration: this.animationDuration,
        onStart: this.handleStart,
        onUpdate: this.handleUpdate,
        onEnd: this.handleEnd
      });
    }
  },
  computed: {
    wrapperClass: function wrapperClass2() {
      var _a2 = this.$props, disabled = _a2.disabled, reverse = _a2.reverse, orientation = _a2.orientation, value2 = _a2.value;
      var isVertical2 = orientation === "vertical";
      var indeterminateProp = value2 === null;
      return {
        "k-progressbar": true,
        "k-progressbar-horizontal": !isVertical2,
        "k-progressbar-vertical": isVertical2,
        "k-progressbar-reverse": reverse,
        "k-progressbar-indeterminate": indeterminateProp,
        "k-disabled": disabled
      };
    },
    isVertical: function isVertical() {
      return this.orientation === "vertical";
    },
    animationDuration: function animationDuration() {
      var animation = this.$props.animation;
      return typeof animation !== "boolean" && animation !== void 0 ? animation.duration : animation ? DEFAULT_ANIMATION_DURATION : NO_ANIMATION;
    }
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render5(createElement) {
    var h = gh5 || createElement;
    var _a2 = this.$props, disabled = _a2.disabled, labelVisible = _a2.labelVisible, labelPlacement = _a2.labelPlacement, max = _a2.max, min = _a2.min, tabIndex = _a2.tabIndex, emptyStyle = _a2.emptyStyle, emptyClassName = _a2.emptyClassName, progressStyle = _a2.progressStyle, progressClassName = _a2.progressClassName;
    var value2 = this.$props.value || 0;
    var indeterminateProp = this.$props.value === null;
    var formattedLabel = truncateNumber(value2);
    var labelProps = {
      value: value2
    };
    var label = this.$props.labelRender ? templateRendering.call(this, this.$props.labelRender, getListeners.call(this)) : void 0;
    var labelDefaultRendering = h("span", {
      "class": "k-progress-status"
    }, formattedLabel);
    var toggleButtonRendering = getTemplate.call(this, {
      h,
      template: label,
      defaultRendering: labelDefaultRendering,
      additionalProps: labelProps
    });
    var renderLabel = labelVisible ? this.$props.label ? h("span", {
      "class": "k-progress-status"
    }, [this.$props.label]) : toggleButtonRendering : void 0;
    var positionClasses = classNames("k-progress-status-wrap", {
      "k-progress-start": labelPlacement === "start",
      "k-progress-center": labelPlacement === "center",
      "k-progress-end": labelPlacement === "end" || labelPlacement === void 0
    });
    return h("div", {
      "class": this.wrapperClass,
      dir: this.currentDir,
      attrs: this.v3 ? void 0 : {
        dir: this.currentDir,
        tabindex: getTabIndex(tabIndex, disabled),
        role: "progressbar",
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": indeterminateProp ? void 0 : value2,
        "aria-disabled": disabled,
        "aria-label": this.$props.ariaLabel
      },
      tabindex: getTabIndex(tabIndex, disabled),
      role: "progressbar",
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": indeterminateProp ? void 0 : value2,
      "aria-disabled": disabled,
      "aria-label": this.$props.ariaLabel
    }, [h("span", {
      "class": positionClasses + (emptyClassName ? " " + emptyClassName : ""),
      style: emptyStyle
    }, [renderLabel]), h("div", {
      "class": "k-progressbar-value k-selected",
      style: progressStyle,
      ref: setRef(this, "progressStatus")
    }, [h("span", {
      "class": positionClasses + (progressClassName ? " " + progressClassName : ""),
      ref: setRef(this, "progressStatusWrap")
    }, [renderLabel])])]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    progressStatusElement: function progressStatusElement() {
      return this._progressStatus;
    },
    progressStatusWrapElement: function progressStatusWrapElement() {
      return this._progressStatusWrap;
    },
    handleStart: function handleStart() {
      var percentage = calculatePercentage(this.min, this.max, this.prevValue);
      updateProgress(this._progressStatus, this._progressStatusWrap, percentage, this.isVertical);
    },
    handleUpdate: function handleUpdate(progress2) {
      var percentage = calculatePercentage(this.min, this.max, this.prevValue + (this.value - this.prevValue) * progress2);
      updateProgress(this._progressStatus, this._progressStatusWrap, percentage, this.isVertical);
    },
    handleEnd: function handleEnd() {
      var percentage = calculatePercentage(this.min, this.max, this.value);
      updateProgress(this._progressStatus, this._progressStatusWrap, percentage, this.isVertical);
    }
  }
};
var ProgressBar = ProgressBarVue2;

// node_modules/@progress/kendo-vue-upload/node_modules/@progress/kendo-vue-progressbars/dist/es/chunkprogressbar/ChunkProgressBar.js
var allVue7 = vue_runtime_esm_bundler_exports;
var gh6 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";

// node_modules/@progress/kendo-vue-upload/dist/es/messages/main.js
var _a;
var cancel = "upload.cancel";
var clearSelectedFiles = "upload.clearSelectedFiles";
var dropFilesHere = "upload.dropFilesHere";
var headerStatusUploaded = "upload.headerStatusUploaded";
var headerStatusUploading = "upload.headerStatusUploading";
var invalidFileExtension = "upload.invalidFileExtension";
var invalidFiles = "upload.invalidFiles";
var invalidMaxFileSize = "upload.invalidMaxFileSize";
var invalidMinFileSize = "upload.invalidMinFileSize";
var remove = "upload.remove";
var retry = "upload.retry";
var select = "upload.select";
var selectTitle = "upload.selectTitle";
var selectNoFilesTitle = "upload.selectNoFilesTitle";
var uploadSelectedFiles = "upload.uploadSelectedFiles";
var total = "upload.total";
var files = "upload.files";
var statusUploaded = "upload.statusUploaded";
var statusUploadFailed = "upload.statusUploadFailed";
var dropZoneHint = "upload.dropZoneHint";
var dropZoneNote = "upload.dropZoneNote";
var messages = (_a = {}, _a[cancel] = "Cancel", _a[clearSelectedFiles] = "Clear", _a[dropFilesHere] = "Drop files here to upload", _a[headerStatusUploaded] = "Done", _a[headerStatusUploading] = "Uploading...", _a[invalidFileExtension] = "File type not allowed.", _a[invalidFiles] = "Invalid file(s). Please check file upload requirements.", _a[invalidMaxFileSize] = "File size too large.", _a[invalidMinFileSize] = "File size too small.", _a[remove] = "Remove", _a[retry] = "Retry", _a[select] = "Select files...", _a[selectTitle] = "Press to select more files", _a[selectNoFilesTitle] = "No files selected", _a[uploadSelectedFiles] = "Upload", _a[total] = "Total", _a[files] = "files", _a[statusUploaded] = "File(s) successfully uploaded.", _a[statusUploadFailed] = "File(s) failed to upload.", _a[dropZoneHint] = "Drag and drop files here to upload.", _a[dropZoneNote] = "Only JPEG and PNG files are allowed.", _a);

// node_modules/@progress/kendo-vue-upload/dist/es/utils/utils.js
var ampRegExp = /&/g;
var ltRegExp = /</g;
var quoteRegExp = /"/g;
var aposRegExp = /'/g;
var gtRegExp = />/g;
var htmlEncode = function(value2) {
  return ("" + value2).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;").replace(quoteRegExp, "&quot;").replace(aposRegExp, "&#39;");
};
var getFileExtension = function(fileName) {
  var rFileExtension = /\.([^\.]+)$/;
  var matches = fileName.match(rFileExtension);
  return matches ? matches[0] : "";
};
var getFileInfo = function(rawFile) {
  var fileName = rawFile.name;
  var fileSize = rawFile.size;
  return {
    extension: getFileExtension(fileName),
    name: htmlEncode(fileName),
    getRawFile: function() {
      return rawFile;
    },
    size: fileSize,
    status: UploadFileStatus.Selected,
    progress: 0,
    uid: ""
  };
};
var getAllFileInfo = function(rawFiles) {
  var allFileInfo = new Array();
  var i;
  for (i = 0; i < rawFiles.length; i++) {
    allFileInfo.push(getFileInfo(rawFiles[i]));
  }
  return allFileInfo;
};
var fileHasValidationErrors = function(file) {
  if (file.validationErrors && file.validationErrors.length > 0) {
    return true;
  }
  return false;
};
var filesHaveValidationErrors = function(files2) {
  for (var _i = 0, files_1 = files2; _i < files_1.length; _i++) {
    var file = files_1[_i];
    if (fileHasValidationErrors(file)) {
      return true;
    }
  }
  return false;
};
var getTotalFilesSizeMessage = function(files2) {
  var totalSize = 0;
  var i;
  if (typeof files2[0].size === "number") {
    for (i = 0; i < files2.length; i++) {
      if (files2[i].size) {
        totalSize += files2[i].size || 0;
      }
    }
  } else {
    return "";
  }
  totalSize /= 1024;
  if (totalSize < 1024) {
    return totalSize.toFixed(2) + " KB";
  } else {
    return (totalSize / 1024).toFixed(2) + " MB";
  }
};
var assignGuidToFiles = function(files2, batchFiles) {
  var uid = guid();
  return files2.map(function(file) {
    file.uid = batchFiles ? uid : guid();
    return file;
  });
};
var getFileStatus = function(currentFiles) {
  var isUploading = false;
  var isUploaded = false;
  var isUploadFailed = false;
  var isUploadValidationFailed = false;
  var checkFilesStatus = function(files2) {
    files2.forEach(function(file) {
      if (file.status === UploadFileStatus.Uploading) {
        isUploading = true;
      }
      if (file.status === UploadFileStatus.Uploaded) {
        isUploaded = true;
      }
      if (file.status === UploadFileStatus.UploadFailed) {
        isUploadFailed = true;
      }
      if (fileHasValidationErrors(file)) {
        isUploadValidationFailed = true;
      }
    });
  };
  if (Array.isArray(currentFiles)) {
    checkFilesStatus(currentFiles);
  } else {
    Object.keys(currentFiles).forEach(function(key) {
      checkFilesStatus(currentFiles[key]);
    });
  }
  return [isUploading, isUploaded, isUploadFailed, isUploadValidationFailed];
};
var utils_default = {
  fileHasValidationErrors,
  filesHaveValidationErrors,
  getTotalFilesSizeMessage,
  getAllFileInfo,
  getFileInfo,
  getFileExtension,
  htmlEncode,
  assignGuidToFiles,
  getFileStatus
};

// node_modules/@progress/kendo-vue-upload/dist/es/UploadListActionButton.js
var allVue8 = vue_runtime_esm_bundler_exports;
var gh7 = allVue8.h;
var isV38 = allVue8.version && allVue8.version[0] === "3";
var ref = allVue8.ref;
var inject = allVue8.inject;
var UploadListActionButtonVue2 = {
  name: "KendoVueUploadListActionButton",
  props: {
    progress: Number,
    uid: String,
    status: Number,
    async: Object,
    disabled: Boolean,
    files: Array
  },
  // @ts-ignore
  emits: {
    "cancel": null,
    "retry": null,
    "remove": null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data2() {
    return {
      retryFocused: false,
      actionFocused: false
    };
  },
  methods: {
    actionButtonTitle: function actionButtonTitle(status, localizationService) {
      if (status === UploadFileStatus.Uploading) {
        return localizationService.toLanguageString(cancel, messages[cancel]);
      }
      return localizationService.toLanguageString(remove, messages[remove]);
    },
    retryButtonTitle: function retryButtonTitle(localizationService) {
      return localizationService.toLanguageString(retry, messages[retry]);
    },
    buttonClassNames: function buttonClassNames(type) {
      return classNames(this.actionFocused && type === "action" || this.retryFocused && type === "retry" ? "k-focus" : "");
    },
    onRetryFocus: function onRetryFocus() {
      this.retryFocused = true;
    },
    onRetryBlur: function onRetryBlur() {
      this.retryFocused = false;
    },
    onActionFocus: function onActionFocus() {
      this.actionFocused = true;
    },
    onActionBlur: function onActionBlur() {
      this.actionFocused = false;
    },
    onActionClick: function onActionClick() {
      var _a2 = this.$props, status = _a2.status, uid = _a2.uid, disabled = _a2.disabled;
      if (disabled || status === UploadFileStatus.Removing) {
        return;
      }
      if (status === UploadFileStatus.Uploading) {
        this.$emit("cancel", uid);
      } else {
        this.$emit("remove", uid);
      }
    },
    onRetryClick: function onRetryClick() {
      var _a2 = this.$props, uid = _a2.uid, disabled = _a2.disabled;
      if (disabled) {
        return;
      }
      this.$emit("retry", uid);
    }
  },
  // @ts-ignore
  setup: !isV38 ? void 0 : function() {
    var v3 = !!isV38;
    var kendoLocalizationService = inject("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  render: function render6(createElement) {
    var h = gh7 || createElement;
    var _a2 = this.$props, status = _a2.status, progress2 = _a2.progress;
    var isRetryVisible = status === UploadFileStatus.UploadFailed;
    var isProgressVisible = status === UploadFileStatus.Uploading;
    var isActionHidden = (status === UploadFileStatus.Uploaded || status === UploadFileStatus.Initial) && !this.$props.async.removeUrl;
    var localizationService = provideLocalizationService(this);
    var percent = "%";
    return h("div", {
      "class": "k-upload-actions"
    }, [isProgressVisible ? h("span", {
      "class": "k-upload-pct"
    }, [progress2, percent]) : void 0, isRetryVisible ? (
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabindex: -1,
          disabled: this.disabled,
          icon: "arrow-rotate-cw-small",
          iconClass: "k-retry",
          ariaLabel: this.retryButtonTitle(localizationService),
          title: this.retryButtonTitle(localizationService)
        },
        tabindex: -1,
        disabled: this.disabled,
        "class": this.buttonClassNames("retry"),
        icon: "arrow-rotate-cw-small",
        iconClass: "k-retry",
        ariaLabel: this.retryButtonTitle(localizationService),
        title: this.retryButtonTitle(localizationService),
        onFocus: this.onRetryFocus,
        on: this.v3 ? void 0 : {
          "focus": this.onRetryFocus,
          "blur": this.onRetryBlur,
          "click": this.onRetryClick
        },
        onBlur: this.onRetryBlur,
        onClick: this.onRetryClick
      })
    ) : void 0, !isActionHidden ? (
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          fillMode: "flat",
          tabindex: -1,
          disabled: this.disabled,
          icon: isProgressVisible ? "deny" : "x",
          ariaLabel: this.actionButtonTitle(status, localizationService),
          title: this.actionButtonTitle(status, localizationService)
        },
        fillMode: "flat",
        tabindex: -1,
        disabled: this.disabled,
        "class": this.buttonClassNames("action"),
        onFocus: this.onActionFocus,
        on: this.v3 ? void 0 : {
          "focus": this.onActionFocus,
          "blur": this.onActionBlur,
          "click": this.onActionClick
        },
        onBlur: this.onActionBlur,
        onClick: this.onActionClick,
        icon: isProgressVisible ? "deny" : "x",
        ariaLabel: this.actionButtonTitle(status, localizationService),
        title: this.actionButtonTitle(status, localizationService)
      })
    ) : void 0]);
  }
};
var UploadListActionButton = UploadListActionButtonVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadListSingleItem.js
var allVue9 = vue_runtime_esm_bundler_exports;
var gh8 = allVue9.h;
var isV39 = allVue9.version && allVue9.version[0] === "3";
var ref2 = allVue9.ref;
var inject2 = allVue9.inject;
var UploadListSingleItemVue2 = {
  name: "KendoVueUploadListSingleItem",
  props: {
    files: Array,
    disabled: Boolean,
    async: Object
  },
  // @ts-ignore
  emits: {
    "cancel": null,
    "retry": null,
    "remove": null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    onRetry: function onRetry(uid) {
      this.$emit("retry", uid);
    },
    onRemove: function onRemove(uid) {
      this.$emit("remove", uid);
    },
    onCancel: function onCancel(uid) {
      this.$emit("cancel", uid);
    },
    getFileExtension: function getFileExtension2(file) {
      return file.extension ? file.extension.substring(1) : "";
    },
    getFileValidationMessage: function getFileValidationMessage(file, isUploadFailed) {
      var localizationService = provideLocalizationService(this);
      var validationMessage = "";
      if (isUploadFailed) {
        validationMessage = localizationService.toLanguageString(statusUploadFailed, messages[statusUploadFailed]);
      } else if (file.validationErrors && file.validationErrors.length > 0) {
        var messageKey = "upload.".concat(file.validationErrors[0]);
        validationMessage = localizationService.toLanguageString(messageKey, messages[messageKey]);
      }
      return validationMessage;
    },
    getFileExtensionName: function getFileExtensionName(file) {
      switch (file.extension) {
        case ".png":
        case ".jpg":
        case ".jpeg":
        case ".tiff":
        case ".bmp":
        case ".gif":
          return "file-image";
        case ".mp3":
        case ".mp4":
        case ".wav":
          return "file-audio";
        case ".mkv":
        case ".webm":
        case ".flv":
        case ".gifv":
        case ".avi":
        case ".wmv":
          return "file-video";
        case ".txt":
          return "file-txt";
        case ".pdf":
          return "file-pdf";
        case ".ppt":
        case ".pptx":
          return "file-presentation";
        case ".csv":
        case ".xls":
        case ".xlsx":
          return "file-data";
        case ".html":
        case ".css":
        case ".js":
        case ".ts":
          return "file-programming";
        case ".exe":
          return "file-config";
        case ".zip":
        case ".rar":
          return "file-zip";
        default:
          return "file";
      }
    },
    getFileExtensionSVG: function getFileExtensionSVG(file) {
      switch (file.extension) {
        case ".png":
        case ".jpg":
        case ".jpeg":
        case ".tiff":
        case ".bmp":
        case ".gif":
          return fileImageIcon;
        case ".mp3":
        case ".mp4":
        case ".wav":
          return fileAudioIcon;
        case ".mkv":
        case ".webm":
        case ".flv":
        case ".gifv":
        case ".avi":
        case ".wmv":
          return fileVideoIcon;
        case ".txt":
          return fileTxtIcon;
        case ".pdf":
          return filePdfIcon;
        case ".ppt":
        case ".pptx":
          return filePresentationIcon;
        case ".csv":
        case ".xls":
        case ".xlsx":
          return fileDataIcon;
        case ".html":
        case ".css":
        case ".js":
        case ".ts":
          return fileProgrammingIcon;
        case ".exe":
          return fileConfigIcon;
        case ".zip":
        case ".rar":
          return fileZipIcon;
        default:
          return fileIcon;
      }
    }
  },
  // @ts-ignore
  setup: !isV39 ? void 0 : function() {
    var v3 = !!isV39;
    var kendoLocalizationService = inject2("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  render: function render7(createElement) {
    var h = gh8 || createElement;
    var _a2 = this.$props, files2 = _a2.files, disabled = _a2.disabled, async = _a2.async;
    var file = files2[0];
    var itemClassName = classNames("k-file-single");
    var _b = utils_default.getFileStatus([file]), isUploaded = _b[1], isUploadFailed = _b[2], isUploadValidationFailed = _b[3];
    var showProgressBar = !isUploadValidationFailed && !isUploaded && !isUploadFailed;
    var renderValidationError = function renderValidationError2(currentFile, isCurrentUploadFailed) {
      return h("span", {
        "class": "k-file-info",
        key: "2"
      }, [h("span", {
        "class": "k-file-name",
        title: currentFile.name,
        attrs: this.v3 ? void 0 : {
          title: currentFile.name
        }
      }, [currentFile.name]), h("span", {
        "class": "k-file-validation-message"
      }, [this.getFileValidationMessage(currentFile, isCurrentUploadFailed)])]);
    };
    var renderFileDetails = function renderFileDetails2(currentFile) {
      var localizationService = provideLocalizationService(this);
      var successMessage = localizationService.toLanguageString(statusUploaded, messages[statusUploaded]);
      return h("span", {
        "class": "k-file-info",
        key: "2"
      }, [h("span", {
        "class": "k-file-name",
        title: currentFile.name,
        attrs: this.v3 ? void 0 : {
          title: currentFile.name
        }
      }, [currentFile.name]), currentFile.progress !== 100 ? h("span", {
        "class": "k-file-size"
      }, [utils_default.getTotalFilesSizeMessage([currentFile])]) : h("span", {
        "class": "k-file-validation-message"
      }, [successMessage])]);
    };
    return h("div", {
      "class": itemClassName
    }, [
      showProgressBar && h(ProgressBar, {
        value: file.progress || 0,
        attrs: this.v3 ? void 0 : {
          value: file.progress || 0,
          labelVisible: false
        },
        labelVisible: false
      }),
      h("span", {
        "class": "k-file-icon-wrapper",
        key: "1"
      }, [h(Icon, {
        name: this.getFileExtensionName(file),
        attrs: this.v3 ? void 0 : {
          name: this.getFileExtensionName(file),
          icon: this.getFileExtensionSVG(file),
          size: "xxxlarge"
        },
        icon: this.getFileExtensionSVG(file),
        size: "xxxlarge",
        "class": "k-file-icon"
      }), h("span", {
        "class": "k-file-state"
      })]),
      isUploadValidationFailed || isUploadFailed ? renderValidationError.call(this, file, isUploadFailed) : renderFileDetails.call(this, file),
      // @ts-ignore  function children
      h(UploadListActionButton, {
        uid: file.uid,
        attrs: this.v3 ? void 0 : {
          uid: file.uid,
          status: file.status,
          progress: file.progress,
          files: files2,
          disabled,
          async
        },
        status: file.status,
        progress: file.progress,
        files: files2,
        disabled,
        async,
        onCancel: this.onCancel,
        on: this.v3 ? void 0 : {
          "cancel": this.onCancel,
          "remove": this.onRemove,
          "retry": this.onRetry
        },
        onRemove: this.onRemove,
        onRetry: this.onRetry
      })
    ]);
  }
};
var UploadListSingleItem = UploadListSingleItemVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadListMultiItem.js
var allVue10 = vue_runtime_esm_bundler_exports;
var gh9 = allVue10.h;
var isV310 = allVue10.version && allVue10.version[0] === "3";
var ref3 = allVue10.ref;
var inject3 = allVue10.inject;
var UploadListMultiItemVue2 = {
  name: "KendoVueUploadListMultiItem",
  props: {
    files: Array,
    disabled: Boolean,
    async: Object
  },
  // @ts-ignore
  emits: {
    "cancel": null,
    "retry": null,
    "remove": null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    onRetry: function onRetry2(uid) {
      this.$emit("retry", uid);
    },
    onRemove: function onRemove2(uid) {
      this.$emit("remove", uid);
    },
    onCancel: function onCancel2(uid) {
      this.$emit("cancel", uid);
    },
    getFileValidationMessage: function getFileValidationMessage2(file) {
      var localizationService = provideLocalizationService(this);
      var validationMessage = "";
      if (file.validationErrors && file.validationErrors.length > 0) {
        var messageKey = "upload.".concat(file.validationErrors[0]);
        validationMessage = localizationService.toLanguageString(messageKey, messages[messageKey]);
      }
      return validationMessage;
    },
    progress: function progress() {
      var files2 = this.$props.files;
      var sum = 0;
      files2.forEach(function(file) {
        sum += file.progress || 0;
      });
      return sum / files2.length;
    }
  },
  // @ts-ignore
  setup: !isV310 ? void 0 : function() {
    var v3 = !!isV310;
    var kendoLocalizationService = inject3("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  render: function render8(createElement) {
    var h = gh9 || createElement;
    var _a2 = this.$props, files2 = _a2.files, disabled = _a2.disabled, async = _a2.async;
    var itemClassName = classNames("k-file-multiple");
    var _b = utils_default.getFileStatus(files2), isUploaded = _b[1], isUploadFailed = _b[2], isUploadValidationFailed = _b[3];
    var localizationService = provideLocalizationService(this);
    var totalMessage = localizationService.toLanguageString(total, messages[total]);
    var filesMessage = localizationService.toLanguageString(files, messages[files]);
    var uploadFailedMessage = localizationService.toLanguageString(statusUploadFailed, messages[statusUploadFailed]);
    var successMessage = localizationService.toLanguageString(statusUploaded, messages[statusUploaded]);
    var progress2 = this.progress();
    var showProgressBar = !isUploadValidationFailed && !isUploaded && !isUploadFailed;
    var mapFiles = function mapFiles2() {
      return files2.map(function(file) {
        return h("span", {
          key: file.name,
          "class": "k-file-info"
        }, [h("span", {
          "class": "k-file-name",
          title: file.name,
          attrs: this.v3 ? void 0 : {
            title: file.name
          }
        }, [file.name]), utils_default.fileHasValidationErrors(file) ? h("span", {
          "class": "k-file-validation-message"
        }, [this.getFileValidationMessage(file)]) : h("span", {
          key: "".concat(file.name, "-size"),
          "class": "k-file-size"
        }, [utils_default.getTotalFilesSizeMessage([file])])]);
      }, this);
    };
    return h("div", {
      "class": itemClassName
    }, [
      showProgressBar && h(ProgressBar, {
        value: progress2 || 0,
        attrs: this.v3 ? void 0 : {
          value: progress2 || 0,
          labelVisible: false
        },
        labelVisible: false
      }),
      h("span", {
        "class": "k-file-icon-wrapper"
      }, [h(Icon, {
        name: "copy",
        attrs: this.v3 ? void 0 : {
          name: "copy",
          icon: copyIcon,
          size: "xxxlarge"
        },
        icon: copyIcon,
        size: "xxxlarge",
        "class": "k-file-icon"
      })]),
      h("span", {
        "class": "k-multiple-files-wrapper"
      }, [mapFiles.call(this), !isUploadFailed ? progress2 !== 100 ? h("span", {
        "class": "k-file-summary"
      }, ["".concat(totalMessage, ": ").concat(files2.length, " ").concat(filesMessage, ", ").concat(utils_default.getTotalFilesSizeMessage(files2))]) : h("span", {
        "class": "k-file-summary k-text-success"
      }, ["".concat(files2.length, " ").concat(successMessage)]) : h("span", {
        "class": "k-file-validation-message"
      }, ["".concat(files2.length, " ").concat(uploadFailedMessage)])]),
      // @ts-ignore  function children
      h(UploadListActionButton, {
        uid: files2[0].uid,
        attrs: this.v3 ? void 0 : {
          uid: files2[0].uid,
          status: files2[0].status,
          progress: progress2,
          files: files2,
          disabled,
          async
        },
        status: files2[0].status,
        progress: progress2,
        files: files2,
        disabled,
        async,
        onCancel: this.onCancel,
        on: this.v3 ? void 0 : {
          "cancel": this.onCancel,
          "remove": this.onRemove,
          "retry": this.onRetry
        },
        onRemove: this.onRemove,
        onRetry: this.onRetry
      })
    ]);
  }
};
var UploadListMultiItem = UploadListMultiItemVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadListGroup.js
var allVue11 = vue_runtime_esm_bundler_exports;
var gh10 = allVue11.h;
var isV311 = allVue11.version && allVue11.version[0] === "3";
var ref4 = allVue11.ref;
var UploadListGroupVue2 = {
  name: "KendoVueUploadListGroup",
  props: {
    files: Array,
    async: Object,
    disabled: Boolean,
    navigationIndex: Number,
    list: [String, Function, Object],
    index: Number
  },
  // @ts-ignore
  emits: {
    "cancel": null,
    "click": null,
    "retry": null,
    "remove": null
  },
  mounted: function mounted3() {
    this._element = this.v3 ? this.elementRef : this.$refs.element;
  },
  updated: function updated() {
    var _a2 = this.$props, navigationIndex3 = _a2.navigationIndex, index = _a2.index;
    if (navigationIndex3 === index && this._element && canUseDOM && document.activeElement !== this._element) {
      this._element.focus();
    }
  },
  methods: {
    onClick: function onClick() {
      this.$emit("click", this.$props.index);
    },
    onRetry: function onRetry3(uid) {
      this.$emit("retry", uid);
    },
    onRemove: function onRemove3(uid) {
      this.$emit("remove", uid);
    },
    onCancel: function onCancel3(uid) {
      this.$emit("cancel", uid);
    }
  },
  // @ts-ignore
  setup: !isV311 ? void 0 : function() {
    var v3 = !!isV311;
    var elementRef = ref4(null);
    return {
      v3,
      elementRef
    };
  },
  render: function render9(createElement) {
    var h = gh10 || createElement;
    var _a2 = this.$props, files2 = _a2.files, async = _a2.async, disabled = _a2.disabled, navigationIndex3 = _a2.navigationIndex, index = _a2.index, list = _a2.list;
    var firstFile = files2[0];
    var isFileSuccess = firstFile.status === UploadFileStatus.Uploaded || firstFile.status === UploadFileStatus.Initial;
    var validationErrors = utils_default.filesHaveValidationErrors(files2);
    var actionFailed = firstFile.status === UploadFileStatus.UploadFailed || firstFile.status === UploadFileStatus.RemoveFailed;
    var liClassName = classNames("k-file", {
      "k-file-invalid": validationErrors,
      "k-file-error": actionFailed,
      "k-file-progress": firstFile.status === UploadFileStatus.Uploading,
      "k-file-success": isFileSuccess,
      "k-focus": navigationIndex3 === index
    });
    var itemComponent;
    var defaultItemRendering = files2.length === 1 ? (
      // @ts-ignore
      h(UploadListSingleItem, {
        files: files2,
        attrs: this.v3 ? void 0 : {
          files: files2,
          async,
          disabled
        },
        async,
        disabled,
        onCancel: this.onCancel,
        on: this.v3 ? void 0 : {
          "cancel": this.onCancel,
          "remove": this.onRemove,
          "retry": this.onRetry
        },
        onRemove: this.onRemove,
        onRetry: this.onRetry
      })
    ) : (
      // @ts-ignore
      h(UploadListMultiItem, {
        files: files2,
        attrs: this.v3 ? void 0 : {
          files: files2,
          async,
          disabled
        },
        async,
        disabled,
        onCancel: this.onCancel,
        on: this.v3 ? void 0 : {
          "cancel": this.onCancel,
          "remove": this.onRemove,
          "retry": this.onRetry
        },
        onRemove: this.onRemove,
        onRetry: this.onRetry
      })
    );
    itemComponent = getTemplate.call(this, {
      h,
      template: this.$props.list,
      defaultRendering: defaultItemRendering,
      additionalProps: this.$props,
      additionalListeners: {
        retry: this.onRetry,
        remove: this.onRemove,
        cancel: this.onCancel
      }
    });
    return h("li", {
      ref: setRef(this, "element"),
      "class": liClassName,
      "data-uid": firstFile.uid,
      attrs: this.v3 ? void 0 : {
        "data-uid": firstFile.uid,
        tabindex: -1
      },
      tabindex: -1,
      onClick: this.onClick,
      on: this.v3 ? void 0 : {
        "click": this.onClick
      }
    }, [itemComponent]);
  }
};
var UploadListGroup = UploadListGroupVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadList.js
var allVue12 = vue_runtime_esm_bundler_exports;
var gh11 = allVue12.h;
var isV312 = allVue12.version && allVue12.version[0] === "3";
var ref5 = allVue12.ref;
var UploadListVue2 = {
  name: "KendoVueUploadList",
  props: {
    groupedFiles: Object,
    async: Object,
    disabled: Boolean,
    navigationIndex: {
      type: Number,
      default: void 0
    },
    list: [String, Function, Object]
  },
  // @ts-ignore
  emits: {
    "cancel": null,
    "click": null,
    "retry": null,
    "remove": null
  },
  methods: {
    onClick: function onClick2(navIndex2) {
      this.$emit("click", navIndex2);
    },
    onRetry: function onRetry4(uid) {
      this.$emit("retry", uid);
    },
    onRemove: function onRemove4(uid) {
      this.$emit("remove", uid);
    },
    onCancel: function onCancel4(uid) {
      this.$emit("cancel", uid);
    }
  },
  // @ts-ignore
  setup: !isV312 ? void 0 : function() {
    var v3 = !!isV312;
    return {
      v3
    };
  },
  render: function render10(createElement) {
    var h = gh11 || createElement;
    var _a2 = this.$props, groupedFiles = _a2.groupedFiles, navigationIndex3 = _a2.navigationIndex, async = _a2.async, disabled = _a2.disabled, list = _a2.list;
    var ulClassName = classNames("k-upload-files", "k-reset");
    return h("ul", {
      "class": ulClassName
    }, [Object.keys(groupedFiles).map(function(key, index) {
      var files2 = groupedFiles[key];
      return (
        // @ts-ignore  function children
        h(UploadListGroup, {
          key,
          files: files2,
          attrs: this.v3 ? void 0 : {
            files: files2,
            index,
            navigationIndex: navigationIndex3,
            async,
            disabled,
            list
          },
          index,
          navigationIndex: navigationIndex3,
          async,
          disabled,
          list,
          onCancel: this.onCancel,
          on: this.v3 ? void 0 : {
            "cancel": this.onCancel,
            "click": this.onClick,
            "remove": this.onRemove,
            "retry": this.onRetry
          },
          onClick: this.onClick,
          onRemove: this.onRemove,
          onRetry: this.onRetry
        })
      );
    }, this)]);
  }
};
var UploadList = UploadListVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadActionButtons.js
var allVue13 = vue_runtime_esm_bundler_exports;
var gh12 = allVue13.h;
var isV313 = allVue13.version && allVue13.version[0] === "3";
var ref6 = allVue13.ref;
var inject4 = allVue13.inject;
var UploadActionButtonsVue2 = {
  name: "KendoVueUploadActionButtons",
  props: {
    disabled: Boolean,
    navigationIndex: Number,
    clearButtonIndex: Number,
    uploadButtonIndex: Number,
    actionsLayout: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  emits: {
    "clear": null,
    "click": null,
    "upload": null
  },
  created: function created3() {
    this._prevNavigationIndex = void 0;
  },
  // @ts-ignore
  setup: !isV313 ? void 0 : function() {
    var v3 = !!isV313;
    var uploadElementRef = ref6(null);
    var clearElementRef = ref6(null);
    var kendoLocalizationService = inject4("kendoLocalizationService", {});
    return {
      v3,
      uploadElementRef,
      clearElementRef,
      kendoLocalizationService
    };
  },
  mounted: function mounted4() {
    this._clearElement = this.v3 ? this.clearElementRef : this.$refs.clearElement;
    this._uploadElement = this.v3 ? this.uploadElementRef : this.$refs.uploadElement;
  },
  watch: {
    navigationIndex: function navigationIndex(_newNavigationIndex, oldNavigationIndex) {
      this._prevNavigationIndex = oldNavigationIndex;
    }
  },
  updated: function updated2() {
    var _a2 = this.$props, navigationIndex3 = _a2.navigationIndex, clearButtonIndex2 = _a2.clearButtonIndex, uploadButtonIndex2 = _a2.uploadButtonIndex;
    if (navigationIndex3 !== this._prevNavigationIndex) {
      if (navigationIndex3 === clearButtonIndex2 && this._clearElement) {
        this._clearElement.focus();
      }
      if (navigationIndex3 === uploadButtonIndex2 && this._uploadElement) {
        this._uploadElement.focus();
      }
    }
  },
  methods: {
    onClearClick: function onClearClick() {
      if (this.$props.disabled) {
        return;
      }
      this.$emit("clear");
    },
    onUploadClick: function onUploadClick() {
      if (this.$props.disabled) {
        return;
      }
      this.$emit("click", this.$props.uploadButtonIndex);
      this.$emit("upload");
    }
  },
  render: function render11(createElement) {
    var _this = this;
    var h = gh12 || createElement;
    var _a2 = this.$props, disabled = _a2.disabled, navigationIndex3 = _a2.navigationIndex, clearButtonIndex2 = _a2.clearButtonIndex, uploadButtonIndex2 = _a2.uploadButtonIndex, actionsLayout = _a2.actionsLayout;
    var localizationService = provideLocalizationService(this);
    var wrapperClasses = classNames("k-actions", {
      "k-actions-start": actionsLayout === "start",
      "k-actions-center": actionsLayout === "center",
      "k-actions-end": actionsLayout === "end",
      "k-actions-stretched": actionsLayout === "stretched"
    });
    var clearButtonClasses = classNames("k-clear-selected", navigationIndex3 === clearButtonIndex2 ? "k-focus" : "");
    var uploadButtonClasses = classNames("k-upload-selected", navigationIndex3 === uploadButtonIndex2 ? "k-focus" : "");
    return h("div", {
      "class": wrapperClasses
    }, [
      // @ts-ignore  function children
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          disabled,
          tabIndex: -1
        },
        ref: this.v3 ? function(el) {
          _this.clearElementRef = el;
        } : "clearElement",
        disabled,
        "class": clearButtonClasses,
        tabIndex: -1,
        onClick: this.onClearClick,
        on: this.v3 ? void 0 : {
          "click": this.onClearClick
        }
      }, this.v3 ? function() {
        return [localizationService.toLanguageString(clearSelectedFiles, messages[clearSelectedFiles])];
      } : [localizationService.toLanguageString(clearSelectedFiles, messages[clearSelectedFiles])]),
      // @ts-ignore  function children
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          disabled,
          themeColor: "primary",
          tabIndex: -1
        },
        ref: this.v3 ? function(el) {
          _this.uploadElementRef = el;
        } : "uploadElement",
        disabled,
        themeColor: "primary",
        "class": uploadButtonClasses,
        tabIndex: -1,
        onClick: this.onUploadClick,
        on: this.v3 ? void 0 : {
          "click": this.onUploadClick
        }
      }, this.v3 ? function() {
        return [localizationService.toLanguageString(uploadSelectedFiles, messages[uploadSelectedFiles])];
      } : [localizationService.toLanguageString(uploadSelectedFiles, messages[uploadSelectedFiles])])
    ]);
  }
};
var UploadActionButtons = UploadActionButtonsVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadInput.js
var allVue14 = vue_runtime_esm_bundler_exports;
var gh13 = allVue14.h;
var isV314 = allVue14.version && allVue14.version[0] === "3";
var ref7 = allVue14.ref;
var CHROME_REGEX = /(chrome)[ \/]([\w.]+)/i;
var SAFARI_REGEX = /(webkit)[ \/]([\w.]+)/i;
var UploadInputVue2 = {
  name: "KendoVueUploadInput",
  props: {
    async: Object,
    id: String,
    multiple: {
      type: Boolean,
      default: void 0
    },
    disabled: {
      type: Boolean,
      default: void 0
    },
    accept: {
      type: String,
      default: void 0
    },
    hasFiles: {
      type: Boolean,
      default: false
    },
    ariaLabelledBy: {
      type: String,
      default: void 0
    },
    ariaDescribedBy: {
      type: String,
      default: void 0
    }
  },
  // @ts-ignore
  emits: {
    "mousedown": null,
    "add": null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  mounted: function mounted5() {
    this._input = this.v3 ? this.inputRef : this.$refs.input;
  },
  methods: {
    onMouseDown: function onMouseDown(e) {
      this.$emit("mousedown", e);
    },
    onAdd: function onAdd() {
      var ua = navigator.userAgent;
      var input = this._input;
      if (input) {
        if (input.files) {
          this.$emit("add", input.files);
        }
        if (!(!ua.match(CHROME_REGEX) && ua.match(SAFARI_REGEX))) {
          input.type = "";
          input.type = "file";
        }
      }
    },
    actionElement: function actionElement() {
      return this._input;
    }
  },
  // @ts-ignore
  setup: !isV314 ? void 0 : function() {
    var v3 = !!isV314;
    var inputRef = ref7(null);
    return {
      v3,
      inputRef
    };
  },
  render: function render12(createElement) {
    var h = gh13 || createElement;
    var _a2 = this.$props, multiple = _a2.multiple, async = _a2.async, disabled = _a2.disabled, accept = _a2.accept, hasFiles = _a2.hasFiles, ariaLabelledBy = _a2.ariaLabelledBy, ariaDescribedBy = _a2.ariaDescribedBy;
    var localizationService = provideLocalizationService(this);
    var message = hasFiles ? selectTitle : selectNoFilesTitle;
    var selectMessage = localizationService.toLanguageString(message, messages[message]);
    var selectLabel = localizationService.toLanguageString(select, messages[select]);
    return h("input", {
      ref: setRef(this, "input"),
      id: this.id,
      attrs: this.v3 ? void 0 : {
        id: this.id,
        autocomplete: "off",
        name: async.saveField,
        accept,
        type: "file",
        tabindex: -1,
        multiple,
        disabled,
        title: selectMessage,
        "aria-label": ariaLabelledBy !== void 0 ? void 0 : selectLabel,
        "aria-labelledby": ariaLabelledBy,
        "aria-describedby": ariaDescribedBy
      },
      "class": "k-hidden",
      autocomplete: "off",
      name: async.saveField,
      accept,
      type: "file",
      tabindex: -1,
      multiple,
      disabled,
      onChange: this.onAdd,
      on: this.v3 ? void 0 : {
        "change": this.onAdd,
        "mousedown": this.onMouseDown
      },
      onMousedown: this.onMouseDown,
      title: selectMessage,
      "aria-label": ariaLabelledBy !== void 0 ? void 0 : selectLabel,
      "aria-labelledby": ariaLabelledBy,
      "aria-describedby": ariaDescribedBy
    });
  }
};
var UploadInput = UploadInputVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadAddButton.js
var allVue15 = vue_runtime_esm_bundler_exports;
var gh14 = allVue15.h;
var isV315 = allVue15.version && allVue15.version[0] === "3";
var ref8 = allVue15.ref;
var inject5 = allVue15.inject;
var UploadAddButtonVue2 = {
  name: "KendoVueUploadAddButton",
  props: {
    addButtonIndex: Number,
    navigationIndex: Number,
    notFocusedIndex: Number,
    tabIndex: Number,
    async: Object,
    multiple: Boolean,
    disabled: Boolean,
    accept: String,
    id: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  emits: {
    "add": null,
    "click": null
  },
  // @ts-ignore
  setup: !isV315 ? void 0 : function() {
    var v3 = !!isV315;
    var elementRef = ref8(null);
    var uploadInputRef = ref8(null);
    var kendoLocalizationService = inject5("kendoLocalizationService", {});
    return {
      v3,
      elementRef,
      uploadInputRef,
      kendoLocalizationService
    };
  },
  created: function created4() {
    this.uploadInputId = guid();
  },
  mounted: function mounted6() {
    this.element = this.v3 ? this.elementRef : this.$refs.element;
    this.uploadInput = this.v3 ? this.uploadInputRef : this.$refs.uploadInput;
  },
  watch: {
    navigationIndex: function navigationIndex2(_newNavigationIndex, oldNavigationIndex) {
      this._prevNavigationIndex = oldNavigationIndex;
    }
  },
  updated: function updated3() {
    var _a2 = this.$props, navigationIndex3 = _a2.navigationIndex, addButtonIndex2 = _a2.addButtonIndex, notFocusedIndex = _a2.notFocusedIndex;
    if (navigationIndex3 !== this._prevNavigationIndex && this._prevNavigationIndex !== notFocusedIndex && navigationIndex3 === addButtonIndex2 && this.element) {
      this.element.focus();
    }
  },
  methods: {
    focus: function focus2() {
      if (this.element) {
        this.element.focus();
      }
    },
    onClick: function onClick3() {
      if (this.actionElement()) {
        this.actionElement().click();
      }
      this.$emit("click", this.$props.addButtonIndex);
    },
    onAdd: function onAdd2(files2) {
      this.$emit("add", files2);
    },
    onInputMouseDown: function onInputMouseDown(e) {
      if (this.element) {
        e.preventDefault();
        this.element.focus();
      }
    },
    actionElement: function actionElement2() {
      if (this.uploadInput) {
        return this.uploadInput.actionElement();
      }
    }
  },
  render: function render13(createElement) {
    var _this = this;
    var h = gh14 || createElement;
    var _a2 = this.$props, navigationIndex3 = _a2.navigationIndex, addButtonIndex2 = _a2.addButtonIndex, tabIndex = _a2.tabIndex, id = _a2.id, async = _a2.async, multiple = _a2.multiple, disabled = _a2.disabled, accept = _a2.accept;
    var localizationService = provideLocalizationService(this);
    var selectMessage = localizationService.toLanguageString(select, messages[select]);
    var buttonClassName = classNames("k-upload-button", navigationIndex3 === addButtonIndex2 ? "k-focus" : "");
    return h("div", {
      "class": "k-upload-button-wrap"
    }, [
      // @ts-ignore  function children
      h(Button, {
        id,
        attrs: this.v3 ? void 0 : {
          id,
          role: "button",
          type: "button",
          disabled,
          ariaLabel: selectMessage,
          tabindex: tabIndex
        },
        ref: setRef(this, "element"),
        role: "button",
        type: "button",
        disabled,
        ariaLabel: selectMessage,
        "class": buttonClassName,
        tabindex: tabIndex,
        onClick: this.onClick,
        on: this.v3 ? void 0 : {
          "click": this.onClick
        }
      }, this.v3 ? function() {
        return [selectMessage];
      } : [selectMessage]),
      // @ts-ignore  function children
      h(UploadInput, {
        id: this.uploadInputId,
        attrs: this.v3 ? void 0 : {
          id: this.uploadInputId,
          async,
          multiple,
          disabled,
          accept
        },
        async,
        multiple,
        disabled,
        accept,
        onMousedown: this.onInputMouseDown,
        on: this.v3 ? void 0 : {
          "mousedown": this.onInputMouseDown,
          "add": this.onAdd
        },
        onAdd: this.onAdd,
        ref: this.v3 ? function(el) {
          _this.uploadInputRef = el;
        } : "uploadInput"
      })
    ]);
  }
};
var UploadAddButton = UploadAddButtonVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadStatus.js
var allVue16 = vue_runtime_esm_bundler_exports;
var gh15 = allVue16.h;
var isV316 = allVue16.version && allVue16.version[0] === "3";
var inject6 = allVue16.inject;
var UploadStatusVue2 = {
  props: {
    isUploading: Boolean,
    isUploaded: Boolean,
    isUploadFailed: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV316 ? void 0 : function() {
    var v3 = !!isV316;
    var kendoLocalizationService = inject6("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  render: function render14(createElement) {
    var h = gh15 || createElement;
    var _a2 = this.$props, isUploading = _a2.isUploading, isUploaded = _a2.isUploaded, isUploadFailed = _a2.isUploadFailed;
    var statusText = "";
    var localizationService = provideLocalizationService(this);
    if (isUploading) {
      statusText = localizationService.toLanguageString(headerStatusUploading, messages[headerStatusUploading]);
    } else if (isUploaded || isUploadFailed) {
      statusText = localizationService.toLanguageString(headerStatusUploaded, messages[headerStatusUploaded]);
    }
    return h("div", {
      "class": classNames("k-upload-status")
    }, [h(Icon, {
      name: !isUploading && !isUploadFailed && isUploaded ? "check" : !isUploading && isUploadFailed ? "exclamation-circle" : isUploading ? "upload" : "",
      attrs: this.v3 ? void 0 : {
        name: !isUploading && !isUploadFailed && isUploaded ? "check" : !isUploading && isUploadFailed ? "exclamation-circle" : isUploading ? "upload" : "",
        icon: !isUploading && !isUploadFailed && isUploaded ? checkIcon : !isUploading && isUploadFailed ? exclamationCircleIcon : isUploading ? uploadIcon : {}
      },
      icon: !isUploading && !isUploadFailed && isUploaded ? checkIcon : !isUploading && isUploadFailed ? exclamationCircleIcon : isUploading ? uploadIcon : {}
    }), statusText]);
  }
};
var UploadStatus = UploadStatusVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadDropZone.js
var allVue17 = vue_runtime_esm_bundler_exports;
var gh16 = allVue17.h;
var isV317 = allVue17.version && allVue17.version[0] === "3";
var ref9 = allVue17.ref;
var inject7 = allVue17.inject;
var TIME_TO_CHECK_DRAG = 100;
var UploadDropZoneVue2 = {
  name: "KendoVueUploadDropZone",
  props: {
    addButtonIndex: Number,
    async: Object,
    multiple: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    showFileList: Boolean,
    showActionButtons: Boolean,
    actionsLayout: {
      type: String,
      default: function _default() {
        return "end";
      }
    },
    tabIndex: Number,
    accept: String,
    groupedFiles: {
      type: Object,
      default: function _default2() {
        return {};
      }
    },
    navigationIndex: Number,
    notFocusedIndex: Number,
    list: [String, Function, Object],
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    fileGroup: Object
  },
  // @ts-ignore
  emits: {
    "add": null,
    "click": null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data3() {
    return {
      currentDocumentActive: false,
      currentElementActive: false
    };
  },
  created: function created5() {
    this.currentElementActive = false;
  },
  mounted: function mounted7() {
    this.uploadAddButton = this.v3 ? this.uploadAddButtonRef : this.$refs.uploadAddButton;
    document.addEventListener("dragenter", this.onDocumentDragEnter);
    document.addEventListener("dragover", this.onDocumentDragOver);
  },
  destroyed: !!isV317 ? void 0 : function() {
    document.removeEventListener("dragenter", this.onDocumentDragEnter);
    document.removeEventListener("dragover", this.onDocumentDragOver);
  },
  // @ts-ignore
  unmounted: function unmounted3() {
    document.removeEventListener("dragenter", this.onDocumentDragEnter);
    document.removeEventListener("dragover", this.onDocumentDragOver);
  },
  // @ts-ignore
  setup: !isV317 ? void 0 : function() {
    var v3 = !!isV317;
    var uploadAddButtonRef = ref9(null);
    var kendoLocalizationService = inject7("kendoLocalizationService", {});
    return {
      v3,
      uploadAddButtonRef,
      kendoLocalizationService
    };
  },
  computed: {
    dropZoneClasses: function dropZoneClasses() {
      return {
        "k-dropzone": true,
        "k-upload-dropzone": true,
        "k-active": this.currentDocumentActive,
        "k-hover": this.currentElementActive
      };
    }
  },
  methods: {
    actionElement: function actionElement3() {
      if (this.uploadAddButton) {
        return this.uploadAddButton.uploadInput;
      }
    },
    focus: function focus3() {
      if (this.uploadAddButton) {
        return this.uploadAddButton.focus();
      }
    },
    onDocumentDragEnter: function onDocumentDragEnter() {
      var _this = this;
      if (!this.currentDocumentActive) {
        this.currentDocumentActive = true;
        var documentInterval = function documentInterval2() {
          if (_this.isDragOver(_this._lastDocumentDragOver)) {
            _this.currentDocumentActive = false;
            clearInterval(_this._documentInterval);
            _this._documentInterval = null;
            _this._lastDocumentDragOver = null;
          }
        };
        this._documentInterval = setInterval(documentInterval, TIME_TO_CHECK_DRAG);
      }
    },
    onDocumentDragOver: function onDocumentDragOver() {
      this._lastDocumentDragOver = /* @__PURE__ */ new Date();
    },
    onElementDragEnter: function onElementDragEnter() {
      var _this = this;
      if (!this.currentElementActive) {
        this.currentElementActive = true;
        var elementInterval = function elementInterval2() {
          if (_this.isDragOver(_this._lastElementDragOver)) {
            _this.currentElementActive = false;
            clearInterval(_this._elementInterval);
            _this._elementInterval = null;
            _this._lastElementDragOver = null;
          }
        };
        this._elementInterval = setInterval(elementInterval, TIME_TO_CHECK_DRAG);
      }
    },
    onElementDragOver: function onElementDragOver(event) {
      event.preventDefault();
      this._lastElementDragOver = /* @__PURE__ */ new Date();
    },
    onDrop: function onDrop(event) {
      event.preventDefault();
      var droppedFiles = event.dataTransfer.files;
      if (droppedFiles.length > 0 && !this.$props.disabled) {
        this.$emit("add", droppedFiles);
      }
    },
    isDragOver: function isDragOver(prevDate) {
      return (/* @__PURE__ */ new Date()).getTime() - (prevDate || /* @__PURE__ */ new Date()).getTime() > TIME_TO_CHECK_DRAG;
    },
    onClick: function onClick4(eventIndex) {
      this.$emit("click", eventIndex);
    },
    onAdd: function onAdd3(files2) {
      this.$emit("add", files2);
    }
  },
  render: function render15(createElement) {
    var h = gh16 || createElement;
    var _a2 = this.$props, multiple = _a2.multiple, disabled = _a2.disabled, tabIndex = _a2.tabIndex, fileGroup = _a2.fileGroup, accept = _a2.accept, navigationIndex3 = _a2.navigationIndex, notFocusedIndex = _a2.notFocusedIndex, id = _a2.id, ariaLabelledBy = _a2.ariaLabelledBy, ariaDescribedBy = _a2.ariaDescribedBy;
    var localizationService = provideLocalizationService(this);
    var dropFilesMessage = localizationService.toLanguageString(dropFilesHere, messages[dropFilesHere]);
    var _b = utils_default.getFileStatus(fileGroup), isUploading = _b[0], isUploaded = _b[1], isUploadFailed = _b[2], isUploadValidationFailed = _b[3];
    var dropZoneClassName = classNames("k-dropzone-hint", {
      // Unsure about that, since it hides the "Drop Files Message" when we remove all uploaded components.
      // 'k-hidden': this.isDragged && !this.elementActive
    });
    var addButtonComponent = function addButtonComponent2() {
      var _this = this;
      return (
        // @ts-ignore  function children
        h(UploadAddButton, {
          id,
          attrs: this.v3 ? void 0 : {
            id,
            ariaLabelledBy,
            ariaDescribedBy,
            accept,
            async: this.async,
            addButtonIndex: this.addButtonIndex,
            navigationIndex: navigationIndex3,
            notFocusedIndex,
            tabIndex,
            multiple,
            disabled
          },
          ariaLabelledBy,
          ariaDescribedBy,
          ref: this.v3 ? function(el) {
            _this.uploadAddButtonRef = el;
          } : "uploadAddButton",
          accept,
          async: this.async,
          addButtonIndex: this.addButtonIndex,
          navigationIndex: navigationIndex3,
          notFocusedIndex,
          tabIndex,
          multiple,
          disabled,
          onClick: this.onClick,
          on: this.v3 ? void 0 : {
            "click": this.onClick,
            "add": this.onAdd
          },
          onAdd: this.onAdd
        })
      );
    };
    return h("div", {
      "class": this.dropZoneClasses,
      onDrop: this.onDrop,
      on: this.v3 ? void 0 : {
        "drop": this.onDrop,
        "dragenter": this.onElementDragEnter,
        "dragover": this.onElementDragOver
      },
      onDragenter: this.onElementDragEnter,
      onDragover: this.onElementDragOver
    }, [addButtonComponent.call(this), isUploading || isUploaded || isUploadFailed || isUploadValidationFailed ? (
      // @ts-ignore  function children
      h(UploadStatus, {
        isUploading,
        attrs: this.v3 ? void 0 : {
          isUploading,
          isUploaded,
          isUploadFailed
        },
        isUploaded,
        isUploadFailed
      })
    ) : h("div", {
      "class": dropZoneClassName
    }, [dropFilesMessage])]);
  }
};
var UploadDropZone = UploadDropZoneVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadUI.js
var allVue18 = vue_runtime_esm_bundler_exports;
var gh17 = allVue18.h;
var isV318 = allVue18.version && allVue18.version[0] === "3";
var ref10 = allVue18.ref;
var ADD_BUTTON_NAV_INDEX = -1;
var UploadUIVue2 = {
  name: "KendoVueUploadUI",
  props: {
    async: Object,
    className: String,
    multiple: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    showFileList: Boolean,
    showActionButtons: Boolean,
    actionsLayout: {
      type: String,
      default: function _default3() {
        return "end";
      }
    },
    tabIndex: Number,
    accept: String,
    groupedFiles: {
      type: Object,
      default: function _default4() {
        return {};
      }
    },
    navigationIndex: Number,
    notFocusedIndex: Number,
    list: [String, Function, Object],
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  computed: {
    groupsCount: function groupsCount() {
      return Object.keys(this.$props.groupedFiles).length;
    },
    lastGroupIndex: function lastGroupIndex() {
      return this.groupsCount - 1;
    },
    addButtonIndex: function addButtonIndex() {
      return ADD_BUTTON_NAV_INDEX;
    },
    clearButtonIndex: function clearButtonIndex() {
      return this.lastGroupIndex + 1;
    },
    uploadButtonIndex: function uploadButtonIndex() {
      return this.lastGroupIndex + 2;
    },
    isRtl: function isRtl2() {
      return this._container && getComputedStyle(this._container).direction === "rtl" || false;
    }
  },
  methods: {
    actionElement: function actionElement4() {
      if (this.uploadDropZone) {
        return this.uploadDropZone.actionElement();
      }
    },
    focus: function focus4() {
      if (this.uploadDropZone) {
        return this.uploadDropZone.focus();
      }
    },
    onAdd: function onAdd4(files2) {
      this.$emit("add", files2);
    },
    onRetry: function onRetry5(uid) {
      this.$emit("retry", uid);
    },
    onCancel: function onCancel5(uid) {
      this.$emit("cancel", uid);
    },
    onClear: function onClear() {
      this.$emit("clear");
    },
    onUpload: function onUpload() {
      this.$emit("upload");
    },
    onRemove: function onRemove5(uid) {
      this.$emit("remove", uid);
    },
    onKeyDown: function onKeyDown(event) {
      this.$emit("keydown", event, this.isRtl);
    },
    onFocus: function onFocus(event) {
      this.$emit("focus", event);
    },
    onBlur: function onBlur(event) {
      this.$emit("blur", event);
    },
    onClick: function onClick5(navIndex2) {
      this.$emit("click", navIndex2);
    }
  },
  // @ts-ignore
  emits: {
    "add": null,
    "retry": null,
    "cancel": null,
    "clear": null,
    "upload": null,
    "remove": null,
    "keydown": null,
    "click": null,
    "focus": null,
    "blur": null
  },
  mounted: function mounted8() {
    this._container = this.v3 ? this.containerRef : this.$refs.container;
    this.uploadDropZone = this.v3 ? this.uploadDropZoneRef : this.$refs.uploadDropZone;
  },
  // @ts-ignore
  setup: !isV318 ? void 0 : function() {
    var v3 = !!isV318;
    var containerRef = ref10(null);
    var uploadDropZoneRef = ref10(null);
    return {
      v3,
      containerRef,
      uploadDropZoneRef
    };
  },
  render: function render16(createElement) {
    var _this = this;
    var h = gh17 || createElement;
    var _a2 = this.$props, multiple = _a2.multiple, disabled = _a2.disabled, tabIndex = _a2.tabIndex, accept = _a2.accept, showFileList = _a2.showFileList, groupedFiles = _a2.groupedFiles, navigationIndex3 = _a2.navigationIndex, showActionButtons = _a2.showActionButtons, actionsLayout = _a2.actionsLayout, notFocusedIndex = _a2.notFocusedIndex, list = _a2.list, id = _a2.id, ariaLabelledBy = _a2.ariaLabelledBy, ariaDescribedBy = _a2.ariaDescribedBy, async = _a2.async;
    var className = classNames("k-upload", "k-upload-async", this.$props.className, disabled ? "k-disabled" : "");
    return h("div", {
      ref: setRef(this, "container"),
      "class": className,
      onKeydown: this.onKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onKeyDown,
        "focus": this.onFocus,
        "blur": this.onBlur
      },
      onFocus: this.onFocus,
      onBlur: this.onBlur
    }, [
      // @ts-ignore  function children
      h(UploadDropZone, {
        id,
        attrs: this.v3 ? void 0 : {
          id,
          ariaLabelledBy,
          ariaDescribedBy,
          accept,
          async,
          addButtonIndex: this.addButtonIndex,
          navigationIndex: navigationIndex3,
          notFocusedIndex,
          tabIndex,
          multiple,
          fileGroup: groupedFiles,
          disabled
        },
        ariaLabelledBy,
        ariaDescribedBy,
        ref: this.v3 ? function(el) {
          _this.uploadDropZoneRef = el;
        } : "uploadDropZone",
        accept,
        async,
        addButtonIndex: this.addButtonIndex,
        navigationIndex: navigationIndex3,
        notFocusedIndex,
        tabIndex,
        multiple,
        onClick: this.onClick,
        on: this.v3 ? void 0 : {
          "click": this.onClick,
          "add": this.onAdd
        },
        onAdd: this.onAdd,
        fileGroup: groupedFiles,
        disabled
      }),
      showFileList ? (
        // @ts-ignore  function children
        h(UploadList, {
          groupedFiles,
          attrs: this.v3 ? void 0 : {
            groupedFiles,
            disabled,
            async,
            navigationIndex: navigationIndex3,
            list
          },
          disabled,
          async,
          navigationIndex: navigationIndex3,
          list,
          onCancel: this.onCancel,
          on: this.v3 ? void 0 : {
            "cancel": this.onCancel,
            "remove": this.onRemove,
            "retry": this.onRetry,
            "click": this.onClick
          },
          onRemove: this.onRemove,
          onRetry: this.onRetry,
          onClick: this.onClick
        })
      ) : void 0,
      showActionButtons ? (
        // @ts-ignore  function children
        h(UploadActionButtons, {
          disabled,
          attrs: this.v3 ? void 0 : {
            disabled,
            navigationIndex: navigationIndex3,
            clearButtonIndex: this.clearButtonIndex,
            uploadButtonIndex: this.uploadButtonIndex,
            actionsLayout
          },
          navigationIndex: navigationIndex3,
          clearButtonIndex: this.clearButtonIndex,
          uploadButtonIndex: this.uploadButtonIndex,
          actionsLayout,
          onUpload: this.onUpload,
          on: this.v3 ? void 0 : {
            "upload": this.onUpload,
            "clear": this.onClear,
            "click": this.onClick
          },
          onClear: this.onClear,
          onClick: this.onClick
        })
      ) : void 0
    ]);
  }
};
var UploadUI = UploadUIVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/UploadNavigation.js
var allVue19 = vue_runtime_esm_bundler_exports;
var gh18 = allVue19.h;
var isV319 = allVue19.version && allVue19.version[0] === "3";
var ref11 = allVue19.ref;
var NOT_FOCUSED_INDEX = -2;
var DEFAULT_INDEX = -1;
var UploadNavigationVue2 = {
  name: "KendoVueUploadNavigation",
  props: {
    async: Object,
    className: String,
    multiple: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    showFileList: Boolean,
    showActionButtons: Boolean,
    actionsLayout: {
      type: String,
      default: function _default5() {
        return "end";
      }
    },
    tabIndex: Number,
    accept: String,
    groupedFiles: {
      type: Object,
      default: function _default6() {
        return {};
      }
    },
    notFocusedIndex: Number,
    list: [String, Function, Object],
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String
  },
  // @ts-ignore
  emits: {
    "add": null,
    "cancel": null,
    "clear": null,
    "upload": null,
    "retry": null,
    "remove": null
  },
  data: function data4() {
    return {
      currentNavIndex: NOT_FOCUSED_INDEX
    };
  },
  updated: function updated4() {
  },
  methods: {
    actionElement: function actionElement5() {
      if (this._uploadUI) {
        return this._uploadUI.actionElement();
      }
    },
    navIndex: function navIndex(_navIndex) {
      if (_navIndex === void 0) {
        return this.currentNavIndex;
      }
      var prevNavIndex = this.navIndex;
      this.currentNavIndex = _navIndex;
      if (_navIndex !== prevNavIndex) {
        this.$forceUpdate();
      }
    },
    focus: function focus5() {
      if (this._uploadUI) {
        this._uploadUI.focus();
      }
    },
    onKeyDown: function onKeyDown2(event, isRtl3) {
      var _a2;
      var navIndex2 = this.navIndex();
      var groupKeys = Object.keys(this.$props.groupedFiles);
      var maxFileIndex = groupKeys.length - 1;
      var maxNavIndex = this.$props.autoUpload || groupKeys.length === 0 ? maxFileIndex : maxFileIndex + 1;
      var cancelButtonIndex = maxFileIndex + 1;
      var uploadButtonIndex2 = cancelButtonIndex + 1;
      var prevIndex = navIndex2 === NOT_FOCUSED_INDEX ? DEFAULT_INDEX : navIndex2;
      var nextIndex = navIndex2;
      switch (event.keyCode) {
        case Keys.up:
          event.preventDefault();
          if (navIndex2 > -1) {
            nextIndex = prevIndex - 1;
          }
          break;
        case Keys.down:
          event.preventDefault();
          if (navIndex2 < maxNavIndex) {
            nextIndex = prevIndex + 1;
          }
          break;
        case Keys.left:
          event.preventDefault();
          if (isRtl3) {
            if (navIndex2 === cancelButtonIndex) {
              nextIndex = prevIndex + 1;
            }
          } else {
            if (navIndex2 === uploadButtonIndex2) {
              nextIndex = prevIndex - 1;
            }
          }
          break;
        case Keys.right:
          event.preventDefault();
          if (isRtl3) {
            if (navIndex2 === uploadButtonIndex2) {
              nextIndex = prevIndex - 1;
            }
          } else {
            if (navIndex2 === cancelButtonIndex) {
              nextIndex = prevIndex + 1;
            }
          }
          break;
        case Keys.enter:
          if (navIndex2 === DEFAULT_INDEX || navIndex2 === NOT_FOCUSED_INDEX) {
            if (this.actionElement()) {
              if (canUseDOM && ((_a2 = document.activeElement) === null || _a2 === void 0 ? void 0 : _a2.className.indexOf("k-upload-button")) === -1) {
                this.actionElement().$el.click();
              }
            }
          }
          if (navIndex2 >= 0 && navIndex2 <= maxFileIndex) {
            this.onRetry(groupKeys[navIndex2]);
          }
          break;
        case Keys.space:
          event.preventDefault();
          if (navIndex2 === DEFAULT_INDEX || navIndex2 === NOT_FOCUSED_INDEX) {
            if (this.actionElement()) {
              this.actionElement().$el.click();
            }
          }
          break;
        case Keys.tab:
          nextIndex = NOT_FOCUSED_INDEX;
          break;
        case Keys.delete:
          if (navIndex2 >= 0 && navIndex2 <= maxFileIndex) {
            nextIndex = prevIndex - 1;
            this.onRemove(groupKeys[navIndex2]);
          }
          break;
        case Keys.esc:
          if (navIndex2 >= 0 && navIndex2 <= maxFileIndex) {
            nextIndex = prevIndex - 1;
            this.onCancel(groupKeys[navIndex2]);
          }
          break;
        default:
      }
      this.navIndex(nextIndex);
    },
    onCancel: function onCancel6(uid) {
      this.$emit("cancel", uid);
    },
    onClear: function onClear2() {
      this.navIndex(DEFAULT_INDEX);
      this.$emit("clear");
    },
    onUpload: function onUpload2() {
      this.navIndex(DEFAULT_INDEX);
      this.$emit("upload");
    },
    onRetry: function onRetry6(uid) {
      this.$emit("retry", uid);
    },
    onRemove: function onRemove6(uid) {
      this.navIndex(this.navIndex() > DEFAULT_INDEX ? this.navIndex() - 1 : DEFAULT_INDEX);
      this.$emit("remove", uid);
    },
    onAdd: function onAdd5(files2) {
      this.navIndex(DEFAULT_INDEX);
      this.$emit("add", files2);
    },
    onClick: function onClick6(navIndex2) {
      this.navIndex(navIndex2);
    },
    onFocus: function onFocus2() {
      if (this._blurTimeout) {
        clearTimeout(this._blurTimeout);
        this._blurTimeout = void 0;
      }
    },
    onBlurTimeout: function onBlurTimeout() {
      this.navIndex(NOT_FOCUSED_INDEX);
      this._blurTimeout = void 0;
    },
    onBlur: function onBlur2() {
      clearTimeout(this._blurTimeout);
      this._blurTimeout = window.setTimeout(this.onBlurTimeout);
    }
  },
  mounted: function mounted9() {
    this._uploadUI = this.v3 ? this.uploadUIRef : this.$refs.uploadUI;
  },
  // @ts-ignore
  setup: !isV319 ? void 0 : function() {
    var v3 = !!isV319;
    var uploadUIRef = ref11(null);
    return {
      v3,
      uploadUIRef
    };
  },
  render: function render17(createElement) {
    var _this = this;
    var h = gh18 || createElement;
    var _a2 = this.$props, multiple = _a2.multiple, disabled = _a2.disabled, showFileList = _a2.showFileList, showActionButtons = _a2.showActionButtons, actionsLayout = _a2.actionsLayout, tabIndex = _a2.tabIndex, accept = _a2.accept, groupedFiles = _a2.groupedFiles, list = _a2.list, id = _a2.id, ariaLabelledBy = _a2.ariaLabelledBy, ariaDescribedBy = _a2.ariaDescribedBy, async = _a2.async;
    return (
      // @ts-ignore  function children
      h(UploadUI, {
        ref: this.v3 ? function(el) {
          _this.uploadUIRef = el;
        } : "uploadUI",
        "class": this.$props.className,
        onKeydown: this.onKeyDown,
        on: this.v3 ? void 0 : {
          "keydown": this.onKeyDown,
          "add": this.onAdd,
          "clear": this.onClear,
          "upload": this.onUpload,
          "remove": this.onRemove,
          "retry": this.onRetry,
          "cancel": this.onCancel,
          "click": this.onClick,
          "focus": this.onFocus,
          "blur": this.onBlur
        },
        navigationIndex: this.currentNavIndex,
        attrs: this.v3 ? void 0 : {
          navigationIndex: this.currentNavIndex,
          notFocusedIndex: NOT_FOCUSED_INDEX,
          multiple,
          disabled,
          showFileList,
          showActionButtons,
          actionsLayout,
          tabIndex,
          accept,
          groupedFiles,
          list,
          id,
          ariaLabelledBy,
          ariaDescribedBy,
          async
        },
        notFocusedIndex: NOT_FOCUSED_INDEX,
        onAdd: this.onAdd,
        onClear: this.onClear,
        onUpload: this.onUpload,
        onRemove: this.onRemove,
        onRetry: this.onRetry,
        onCancel: this.onCancel,
        onClick: this.onClick,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        multiple,
        disabled,
        showFileList,
        showActionButtons,
        actionsLayout,
        tabIndex,
        accept,
        groupedFiles,
        list,
        id,
        ariaLabelledBy,
        ariaDescribedBy,
        async
      })
    );
  }
};
var UploadNavigation = UploadNavigationVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/Upload.js
var import_axios = __toESM(require_axios2());

// node_modules/@progress/kendo-vue-upload/dist/es/utils/stateUtils.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var copyState = function(state) {
  return (state || []).map(function(file) {
    return __assign4({}, file);
  });
};
var add = function(file, filesState) {
  filesState.push(file);
};
var addMany = function(fileList, filesState) {
  fileList.forEach(function(file) {
    return add(file, filesState);
  });
};
var groupFilesByUid = function(files2) {
  var fileGroup = {};
  files2.forEach(function(file) {
    if (fileGroup[file.uid]) {
      fileGroup[file.uid].push(file);
    } else {
      fileGroup[file.uid] = [file];
    }
  });
  return fileGroup;
};
var filesForUpload = function(files2) {
  var notUploadedGroups = {};
  groupForEach(files2, function(currentFiles, uid) {
    var currentFilesValid = true;
    currentFiles.forEach(function(file) {
      if (file.status !== UploadFileStatus.Selected || file.validationErrors && file.validationErrors.length > 0) {
        currentFilesValid = false;
      }
    });
    if (currentFilesValid) {
      notUploadedGroups[uid] = currentFiles;
    }
  });
  return notUploadedGroups;
};
var setFilesStatus = function(filesGroup, status) {
  groupForEach(filesGroup, function(currentFiles) {
    currentFiles.forEach(function(file) {
      file.status = status;
    });
  });
};
var flatFileGroup = function(fileGroup) {
  var transformed = [];
  groupForEach(fileGroup, function(currentFiles) {
    transformed.push.apply(transformed, currentFiles);
  });
  return transformed;
};
var groupForEach = function(fileGroup, callBack) {
  Object.keys(fileGroup).forEach(function(uidKey) {
    callBack(fileGroup[uidKey], uidKey);
  });
};
var stateUtils_default = {
  copyState,
  addMany,
  add,
  groupFilesByUid,
  filesForUpload,
  setFilesStatus,
  flatFileGroup,
  groupForEach
};

// node_modules/@progress/kendo-vue-upload/dist/es/utils/connectionUtils.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var populateClientFormData = function(data7, clientData) {
  Object.keys(clientData).forEach(function(key) {
    data7.append(key, clientData[key]);
  });
};
var populateUploadFormData = function(files2, saveField, clientData) {
  var data7 = new FormData();
  populateClientFormData(data7, clientData);
  files2.forEach(function(file) {
    var rawFile = file.getRawFile ? file.getRawFile() : "";
    if (rawFile) {
      data7.append(saveField, rawFile, file.name);
    } else {
      data7.append(saveField, rawFile);
    }
  });
  return data7;
};
var populateRemoveFormData = function(fileNames, removeField, clientData) {
  var data7 = new FormData();
  populateClientFormData(data7, clientData);
  fileNames.forEach(function(fileName) {
    data7.append(removeField, fileName);
  });
  return data7;
};
var populateRequestOptions = function(headers, async) {
  return {
    headers,
    responseType: async.responseType,
    withCredentials: async.withCredentials
  };
};
var cloneRequestHeaders = function(headers) {
  var cloned = {};
  Object.keys(headers).forEach(function(key) {
    cloned[key] = headers[key];
  });
  return cloned;
};
var convertAxiosResponse = function(event) {
  var data7 = event.data, config = event.config, others = __rest(event, ["data", "config"]);
  return __assign5({ response: data7 }, others);
};
var connectionUtils_default = {
  populateClientFormData,
  populateUploadFormData,
  populateRemoveFormData,
  populateRequestOptions,
  cloneRequestHeaders,
  convertAxiosResponse
};

// node_modules/@progress/kendo-vue-upload/dist/es/utils/validationUtils.js
var INVALIDMAXFILESIZE = "invalidMaxFileSize";
var INVALIDMINFILESIZE = "invalidMinFileSize";
var INVALIDFILEEXTENSION = "invalidFileExtension";
var validateFileExtension = function(file, allowedExtensions) {
  if (allowedExtensions.length > 0) {
    if (allowedExtensions.indexOf((file.extension || "").toLowerCase()) < 0) {
      file.validationErrors = file.validationErrors || [];
      if (file.validationErrors.indexOf(INVALIDFILEEXTENSION) < 0) {
        file.validationErrors.push(INVALIDFILEEXTENSION);
      }
    }
  }
};
var validateFileSize = function(file, minFileSize, maxFileSize) {
  if (minFileSize !== 0 && (file.size || 0) < minFileSize) {
    file.validationErrors = file.validationErrors || [];
    if (file.validationErrors.indexOf(INVALIDMINFILESIZE) < 0) {
      file.validationErrors.push(INVALIDMINFILESIZE);
    }
  }
  if (maxFileSize !== 0 && (file.size || 0) > maxFileSize) {
    file.validationErrors = file.validationErrors || [];
    if (file.validationErrors.indexOf(INVALIDMAXFILESIZE) < 0) {
      file.validationErrors.push(INVALIDMAXFILESIZE);
    }
  }
};
var parseAllowedExtensions = function(extensions) {
  var allowedExtensions = extensions.map(function(ext) {
    var parsedExt = ext.substring(0, 1) === "." ? ext : "." + ext;
    return parsedExt.toLowerCase();
  });
  return allowedExtensions;
};
var validateFiles = function(files2, restrictionInfo, validateFile) {
  var allowedExtensions = parseAllowedExtensions(restrictionInfo.allowedExtensions || []);
  var maxFileSize = restrictionInfo.maxFileSize || 0;
  var minFileSize = restrictionInfo.minFileSize || 0;
  var i;
  for (i = 0; i < files2.length; i++) {
    validateFileExtension(files2[i], allowedExtensions);
    validateFileSize(files2[i], minFileSize, maxFileSize);
    if (validateFile) {
      validateFile(files2[i]);
    }
  }
};
var validationUtils_default = {
  validateFiles
};

// node_modules/@progress/kendo-vue-upload/dist/es/package-metadata.js
var packageMetadata2 = {
  name: "@progress/kendo-vue-upload",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693313263,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-upload/dist/es/Upload.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var allVue20 = vue_runtime_esm_bundler_exports;
var gh19 = allVue20.h;
var isV320 = allVue20.version && allVue20.version[0] === "3";
var ref12 = allVue20.ref;
var UploadVue2 = {
  name: "KendoVueUpload",
  props: {
    autoUpload: {
      type: Boolean,
      default: true
    },
    batch: {
      type: Boolean,
      default: false
    },
    withCredentials: {
      type: Boolean,
      default: true
    },
    saveField: {
      type: String,
      default: function _default7() {
        return "files";
      }
    },
    saveHeaders: {
      type: [String, Function, Object],
      default: function _default8() {
        return {};
      }
    },
    saveMethod: {
      type: String,
      default: function _default9() {
        return "POST";
      }
    },
    saveUrl: {
      type: [String, Function],
      default: function _default10() {
        return "";
      }
    },
    responseType: {
      type: String,
      default: function _default11() {
        return "json";
      }
    },
    removeField: {
      type: String,
      default: function _default12() {
        return "fileNames";
      }
    },
    removeHeaders: {
      type: [String, Function, Object],
      default: function _default13() {
        return {};
      }
    },
    removeMethod: {
      type: String,
      default: function _default14() {
        return "POST";
      }
    },
    removeUrl: {
      type: [String, Function],
      default: function _default15() {
        return "";
      }
    },
    multiple: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    showFileList: {
      type: Boolean,
      default: true
    },
    showActionButtons: {
      type: Boolean,
      default: true
    },
    actionsLayout: {
      type: String,
      default: function _default16() {
        return "end";
      }
    },
    tabIndex: Number,
    accept: String,
    list: [String, Function, Object],
    restrictions: {
      type: Object,
      default: function _default17() {
        return {
          allowedExtensions: [],
          maxFileSize: 0,
          minFileSize: 0
        };
      }
    },
    validateFile: Function,
    files: Array,
    defaultFiles: Array
  },
  // @ts-ignore
  emits: {
    "add": null,
    "beforeremove": null,
    "beforeupload": null,
    "cancel": null,
    "statuschange": null,
    "progress": null,
    "remove": null
  },
  created: function created6() {
    this._httpSubscriptions = {};
    validatePackage(packageMetadata2);
    if (this.$props.defaultFiles) {
      this.currentFiles = this.$props.defaultFiles;
    }
  },
  data: function data5() {
    return {
      currentFiles: []
    };
  },
  computed: {
    computedAsync: function computedAsync() {
      var _a2 = this.$props, autoUpload = _a2.autoUpload, batch = _a2.batch, removeField = _a2.removeField, removeHeaders = _a2.removeHeaders, removeMethod = _a2.removeMethod, removeUrl = _a2.removeUrl, responseType = _a2.responseType, saveField = _a2.saveField, saveHeaders = _a2.saveHeaders, saveMethod = _a2.saveMethod, saveUrl = _a2.saveUrl, withCredentials = _a2.withCredentials;
      return {
        autoUpload,
        batch,
        removeField,
        removeHeaders,
        removeMethod,
        removeUrl,
        responseType,
        saveField,
        saveHeaders,
        saveMethod,
        saveUrl,
        withCredentials
      };
    },
    computedFiles: function computedFiles() {
      var files2 = this.isControlled ? this.$props.files : this.currentFiles;
      return files2 || [];
    },
    isControlled: function isControlled() {
      return !this.$props.defaultFiles;
    },
    isCustomSave: function isCustomSave() {
      return this.$props.saveUrl && typeof this.$props.saveUrl === "function";
    },
    isCustomRemove: function isCustomRemove() {
      return this.$props.removeUrl && typeof this.$props.removeUrl === "function";
    },
    fileStateCopy: function fileStateCopy() {
      return stateUtils_default.copyState(this.computedFiles);
    },
    actionElement: function actionElement6() {
      if (this._uploadNavigation) {
        return this._uploadNavigation.actionElement;
      }
    }
  },
  mounted: function mounted10() {
    this._uploadNavigation = this.v3 ? this.uploadNavigationRef : this.$refs.uploadNavigation;
  },
  methods: {
    focus: function focus6() {
      if (this._uploadNavigation) {
        this._uploadNavigation.focus();
      }
    },
    uploadFiles: function uploadFiles(filesForUpload2) {
      var _this = this;
      var async = this.computedAsync;
      stateUtils_default.setFilesStatus(filesForUpload2, UploadFileStatus.Uploading);
      stateUtils_default.groupForEach(filesForUpload2, function(currentFiles, uid) {
        var headers = connectionUtils_default.cloneRequestHeaders(async.saveHeaders || {});
        var additionalData = {};
        var eventData = {
          target: _this,
          files: currentFiles,
          headers,
          additionalData
        };
        _this.$emit("beforeupload", eventData);
        var requestOptions = connectionUtils_default.populateRequestOptions(eventData.headers, _this.computedAsync);
        var formData = connectionUtils_default.populateUploadFormData(currentFiles, async.saveField, eventData.additionalData);
        if (_this.isCustomSave) {
          _this.$props.saveUrl(currentFiles, {
            formData,
            requestOptions
          }, _this.onUploadProgress).then(function(event) {
            return _this.onUploadSuccess(event.uid);
          }).catch(function(event) {
            return _this.onUploadError(event.uid);
          });
        } else {
          var cancelTokenSource = import_axios.default.CancelToken.source();
          _this._httpSubscriptions[uid] = cancelTokenSource;
          (0, import_axios.default)(__assign6(__assign6({
            method: async.saveMethod,
            url: async.saveUrl,
            data: formData,
            cancelToken: cancelTokenSource.token
          }, requestOptions), {
            onUploadProgress: function onUploadProgress2(event) {
              return _this.onUploadProgress(uid, event);
            }
          })).then(function(event) {
            return _this.onUploadSuccess(uid, event);
          }).catch(function(event) {
            return _this.onUploadError(uid, event);
          });
        }
      });
    },
    removeFiles: function removeFiles(filesForRemove) {
      var _this = this;
      var async = this.computedAsync;
      stateUtils_default.groupForEach(filesForRemove, function(currentFiles, uid) {
        var headers = connectionUtils_default.cloneRequestHeaders(async.removeHeaders || {});
        var additionalData = {};
        var eventData = {
          target: _this,
          files: currentFiles,
          headers,
          additionalData
        };
        _this.$emit("beforeremove", eventData);
        var fileNames = currentFiles.map(function(file) {
          return file.name;
        });
        var requestOptions = connectionUtils_default.populateRequestOptions(eventData.headers, _this.computedAsync);
        var formData = connectionUtils_default.populateRemoveFormData(fileNames, async.removeField, eventData.additionalData);
        if (_this.isCustomRemove) {
          _this.$props.removeUrl(currentFiles, {
            formData,
            requestOptions
          }).then(function(event) {
            return _this.onRemoveSuccess(event.uid);
          }).catch(function(event) {
            return _this.onRemoveError(event.uid);
          });
        } else {
          (0, import_axios.default)(__assign6({
            method: async.removeMethod,
            url: async.removeUrl,
            data: formData
          }, requestOptions)).then(function(event) {
            return _this.onRemoveSuccess(uid, event);
          }).catch(function(event) {
            return _this.onRemoveError(uid, event);
          });
        }
      });
    },
    onUpload: function onUpload3() {
      var _this = this;
      var newState = this.fileStateCopy;
      var groupedFiles = stateUtils_default.groupFilesByUid(newState);
      var filesForUpload2 = stateUtils_default.filesForUpload(groupedFiles);
      this.uploadFiles(filesForUpload2);
      var onStatusChangeEvent = function onStatusChangeEvent2() {
        var eventData = {
          target: _this,
          newState,
          affectedFiles: stateUtils_default.flatFileGroup(filesForUpload2)
        };
        _this.$emit("statuschange", eventData);
      };
      if (this.isControlled) {
        onStatusChangeEvent();
      } else {
        this.currentFiles = newState;
        onStatusChangeEvent();
      }
    },
    onAdd: function onAdd6(files2) {
      var _this = this;
      var selectedFiles = utils_default.getAllFileInfo(files2);
      var newState;
      selectedFiles = utils_default.assignGuidToFiles(selectedFiles, this.computedAsync.batch);
      validationUtils_default.validateFiles(selectedFiles, this.$props.restrictions, this.validateFile);
      if (!this.$props.multiple) {
        newState = [];
      } else {
        newState = this.fileStateCopy;
      }
      stateUtils_default.addMany(selectedFiles, newState);
      if (this.computedAsync.autoUpload) {
        var groupedFiles = stateUtils_default.groupFilesByUid(newState);
        this.uploadFiles(stateUtils_default.filesForUpload(groupedFiles));
      }
      var onAddEvent = function onAddEvent2() {
        var eventData = {
          target: _this,
          newState,
          affectedFiles: selectedFiles
        };
        _this.$emit("add", eventData);
      };
      if (this.isControlled) {
        onAddEvent();
      } else {
        this.currentFiles = newState;
        onAddEvent();
      }
    },
    onUploadProgress: function onUploadProgress(uid, event) {
      var _this = this;
      var percentComplete = Math.round(100 * event.loaded / event.total) || 0;
      var newState = this.fileStateCopy;
      var filesWithProgress = newState.filter(function(file) {
        return file.uid === uid;
      });
      if (!filesWithProgress.length) {
        return;
      }
      filesWithProgress.forEach(function(file) {
        file.progress = percentComplete;
      });
      var onProgressEvent = function onProgressEvent2() {
        var eventData = {
          target: _this,
          newState,
          affectedFiles: filesWithProgress
        };
        _this.$emit("progress", eventData);
      };
      if (this.isControlled) {
        onProgressEvent();
      } else {
        this.currentFiles = newState;
        onProgressEvent();
      }
    },
    onUploadSuccess: function onUploadSuccess(uid, event) {
      var _this = this;
      var newState = this.fileStateCopy;
      var successFiles = newState.filter(function(file) {
        return file.uid === uid;
      });
      successFiles.forEach(function(file) {
        file.status = UploadFileStatus.Uploaded;
      });
      delete this._httpSubscriptions[uid];
      var onStatusChangeEvent = function onStatusChangeEvent2() {
        var eventData = {
          target: _this,
          newState,
          affectedFiles: successFiles,
          response: event ? connectionUtils_default.convertAxiosResponse(event) : void 0
        };
        _this.$emit("statuschange", eventData);
      };
      if (this.isControlled) {
        onStatusChangeEvent();
      } else {
        this.currentFiles = newState;
        onStatusChangeEvent();
      }
    },
    onUploadError: function onUploadError(uid, event) {
      var _this = this;
      var newState = this.fileStateCopy;
      var failedFiles = newState.filter(function(file) {
        return file.uid === uid;
      });
      failedFiles.forEach(function(file) {
        file.status = UploadFileStatus.UploadFailed;
      });
      delete this._httpSubscriptions[uid];
      if (!failedFiles.length) {
        return;
      }
      var onStatusChangeEvent = function onStatusChangeEvent2() {
        var eventData = {
          target: _this,
          newState,
          affectedFiles: failedFiles,
          response: event ? connectionUtils_default.convertAxiosResponse(event) : void 0
        };
        _this.$emit("statuschange", eventData);
      };
      if (this.isControlled) {
        onStatusChangeEvent();
      } else {
        this.currentFiles = newState;
        onStatusChangeEvent();
      }
    },
    onRemove: function onRemove7(uid) {
      var _a2;
      var _this = this;
      var newState = this.fileStateCopy;
      var filesForRemove = newState.filter(function(file) {
        return file.uid === uid;
      });
      var filesToKeep = newState.filter(function(file) {
        return file.uid !== uid;
      });
      var remoteRemoveStatuses = [UploadFileStatus.Uploaded, UploadFileStatus.Initial, UploadFileStatus.RemoveFailed];
      if (filesForRemove[0] && remoteRemoveStatuses.indexOf(filesForRemove[0].status) > -1) {
        var fileGroup = (_a2 = {}, _a2[uid] = filesForRemove, _a2);
        stateUtils_default.setFilesStatus(fileGroup, UploadFileStatus.Removing);
        this.removeFiles(fileGroup);
        var onStatusChangeEvent = function onStatusChangeEvent2() {
          var eventData = {
            target: _this,
            newState,
            affectedFiles: filesForRemove
          };
          _this.$emit("statuschange", eventData);
        };
        if (this.isControlled) {
          onStatusChangeEvent();
        } else {
          this.currentFiles = newState;
          onStatusChangeEvent();
        }
      } else {
        var onRemoveEvent = function onRemoveEvent2() {
          var eventData = {
            target: _this,
            newState: filesToKeep,
            affectedFiles: filesForRemove
          };
          _this.$emit("remove", eventData);
        };
        if (this.isControlled) {
          onRemoveEvent();
        } else {
          this.currentFiles = filesToKeep;
          onRemoveEvent();
        }
      }
    },
    onRemoveSuccess: function onRemoveSuccess(uid, event) {
      var _this = this;
      var newState = this.fileStateCopy;
      var filesForRemove = newState.filter(function(file) {
        return file.uid === uid;
      });
      var filesToKeep = newState.filter(function(file) {
        return file.uid !== uid;
      });
      var onRemoveEvent = function onRemoveEvent2() {
        var eventData = {
          target: _this,
          newState: filesToKeep,
          affectedFiles: filesForRemove,
          response: event ? connectionUtils_default.convertAxiosResponse(event) : void 0
        };
        _this.$emit("remove", eventData);
      };
      if (this.isControlled) {
        onRemoveEvent();
      } else {
        this.currentFiles = filesToKeep;
        onRemoveEvent();
      }
    },
    onRemoveError: function onRemoveError(uid, event) {
      var _this = this;
      var newState = this.fileStateCopy;
      var failedFiles = newState.filter(function(file) {
        return file.uid === uid;
      });
      failedFiles.forEach(function(file) {
        file.status = UploadFileStatus.RemoveFailed;
      });
      var onStatusChangeEvent = function onStatusChangeEvent2() {
        var eventData = {
          target: _this,
          newState,
          affectedFiles: failedFiles,
          response: event ? connectionUtils_default.convertAxiosResponse(event) : void 0
        };
        _this.$emit("statuschange", eventData);
      };
      if (this.isControlled) {
        onStatusChangeEvent();
      } else {
        this.currentFiles = newState;
        onStatusChangeEvent();
      }
    },
    onRetry: function onRetry7(uid) {
      var _this = this;
      var newState = this.fileStateCopy;
      var filesForRetry = stateUtils_default.groupFilesByUid(newState.filter(function(file) {
        return file.uid === uid;
      }));
      stateUtils_default.setFilesStatus(filesForRetry, UploadFileStatus.Uploading);
      this.uploadFiles(filesForRetry);
      var onStatusChangeEvent = function onStatusChangeEvent2() {
        var eventData = {
          target: _this,
          newState,
          affectedFiles: stateUtils_default.flatFileGroup(filesForRetry)
        };
        _this.$emit("statuschange", eventData);
      };
      if (this.isControlled) {
        onStatusChangeEvent();
      } else {
        this.currentFiles = newState;
        onStatusChangeEvent();
      }
    },
    onCancel: function onCancel7(uid) {
      var _this = this;
      var newState = this.fileStateCopy;
      var filesToKeep = newState.filter(function(file) {
        return file.uid !== uid;
      });
      var filesForRemove = newState.filter(function(file) {
        return file.uid === uid;
      });
      if (this._httpSubscriptions[uid]) {
        this._httpSubscriptions[uid].cancel();
        delete this._httpSubscriptions[uid];
      }
      var eventData = {
        target: this,
        uid
      };
      this.$emit("cancel", eventData);
      var onRemoveEvent = function onRemoveEvent2() {
        var remEventData = {
          target: _this,
          newState: filesToKeep,
          affectedFiles: filesForRemove
        };
        _this.$emit("remove", remEventData);
      };
      if (this.isControlled) {
        onRemoveEvent();
      } else {
        this.currentFiles = newState;
        onRemoveEvent();
      }
    },
    onClear: function onClear3() {
      var _this = this;
      if (!this.computedFiles.length) {
        return;
      }
      Object.keys(this._httpSubscriptions).forEach(function(key) {
        _this._httpSubscriptions[key].cancel();
      });
      this._httpSubscriptions = {};
      var onRemoveEvent = function onRemoveEvent2() {
        var eventData = {
          target: _this,
          newState: [],
          affectedFiles: _this.fileStateCopy
        };
        _this.$emit("remove", eventData);
      };
      if (this.isControlled) {
        onRemoveEvent();
      } else {
        this.currentFiles = [];
        onRemoveEvent();
      }
    }
  },
  // @ts-ignore
  setup: !isV320 ? void 0 : function() {
    var v3 = !!isV320;
    return {
      v3
    };
  },
  render: function render18(createElement) {
    var _this = this;
    var h = gh19 || createElement;
    var _a2 = this.$props, showFileList = _a2.showFileList, autoUpload = _a2.autoUpload, showActionButtons = _a2.showActionButtons, actionsLayout = _a2.actionsLayout, tabIndex = _a2.tabIndex, disabled = _a2.disabled, batch = _a2.batch, withCredentials = _a2.withCredentials, saveField = _a2.saveField, saveHeaders = _a2.saveHeaders, saveMethod = _a2.saveMethod, saveUrl = _a2.saveUrl, responseType = _a2.responseType, removeField = _a2.removeField, removeHeaders = _a2.removeHeaders, removeMethod = _a2.removeMethod, removeUrl = _a2.removeUrl, multiple = _a2.multiple, accept = _a2.accept, restrictions = _a2.restrictions, files2 = _a2.files, defaultFiles = _a2.defaultFiles;
    var list = templateRendering.call(this, this.$props.list, getListeners.call(this));
    var groupedFiles = stateUtils_default.groupFilesByUid(this.computedFiles);
    var filesForUpload2 = stateUtils_default.filesForUpload(groupedFiles);
    return (
      // @ts-ignore  function children
      h(UploadNavigation, {
        groupedFiles,
        attrs: this.v3 ? void 0 : {
          groupedFiles,
          className: this.$props.className,
          showFileList: showFileList && !!Object.keys(groupedFiles).length,
          showActionButtons: showActionButtons && !autoUpload && !!Object.keys(filesForUpload2).length,
          actionsLayout,
          disabled,
          tabIndex: getTabIndex(tabIndex, disabled),
          multiple,
          accept,
          list,
          restrictions,
          files: files2,
          defaultFiles,
          async: this.computedAsync
        },
        className: this.$props.className,
        showFileList: showFileList && !!Object.keys(groupedFiles).length,
        showActionButtons: showActionButtons && !autoUpload && !!Object.keys(filesForUpload2).length,
        actionsLayout,
        disabled,
        onAdd: this.onAdd,
        on: this.v3 ? void 0 : {
          "add": this.onAdd,
          "remove": this.onRemove,
          "clear": this.onClear,
          "upload": this.onUpload,
          "retry": this.onRetry,
          "cancel": this.onCancel
        },
        onRemove: this.onRemove,
        onClear: this.onClear,
        onUpload: this.onUpload,
        onRetry: this.onRetry,
        onCancel: this.onCancel,
        tabIndex: getTabIndex(tabIndex, disabled),
        ref: this.v3 ? function(el) {
          _this.uploadNavigationRef = el;
        } : "uploadNavigation",
        multiple,
        accept,
        list,
        restrictions,
        files: files2,
        defaultFiles,
        async: this.computedAsync
      })
    );
  }
};
var Upload = UploadVue2;

// node_modules/@progress/kendo-vue-upload/dist/es/ExternalDropZone.js
var allVue21 = vue_runtime_esm_bundler_exports;
var gh20 = allVue21.h;
var isV321 = allVue21.version && allVue21.version[0] === "3";
var ref13 = allVue21.ref;
var inject8 = allVue21.inject;
var TIME_TO_CHECK_DRAG2 = 100;
var ExternalDropZoneVue2 = {
  name: "KendoVueExternalDropZone",
  props: {
    id: String,
    tabIndex: Number,
    innerStyle: Object,
    uploadRef: [String, Function, Object],
    disabled: Boolean,
    customHint: [String, Function, Object],
    customNote: [String, Function, Object]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created7() {
    validatePackage(packageMetadata2);
    this.elementInterval = null;
    this.elementActive = false;
    this.lastElementDragOverRef = null;
  },
  data: function data6() {
    return {
      overDropZone: false
    };
  },
  mounted: function mounted11() {
    this.externalDropZone = this.v3 ? this.externalDropZoneRef : this.$refs.externalDropZone;
  },
  methods: {
    focus: function focus7() {
      if (this.externalDropZone && this.externalDropZone.focus) {
        this.externalDropZone.focus();
      }
    },
    isDragOver: function isDragOver2(prevDate) {
      return (/* @__PURE__ */ new Date()).getTime() - (prevDate || /* @__PURE__ */ new Date()).getTime() > TIME_TO_CHECK_DRAG2;
    },
    handleOnDrop: function handleOnDrop(event) {
      event.preventDefault();
      var droppedFiles = event.dataTransfer.files;
      var refToUpload = this.$parent.$refs[this.$props.uploadRef];
      if (droppedFiles.length > 0 && !this.$props.disabled && refToUpload) {
        if (refToUpload.onAdd) {
          event.preventDefault();
          refToUpload.onAdd(droppedFiles);
        }
      }
    },
    handleOnElementDragEnter: function handleOnElementDragEnter() {
      var _this = this;
      this.elementActive = true;
      var locElementInterval = function locElementInterval2() {
        if (_this.isDragOver(_this.lastElementDragOver)) {
          _this.overDropZone = false;
          _this.elementActive = false;
          clearInterval(_this.elementInterval);
          _this.elementInterval = null;
          _this.lastElementDragOver = null;
        }
      };
      this.elementInterval = setInterval(locElementInterval, TIME_TO_CHECK_DRAG2);
    },
    handleOnElementDragOver: function handleOnElementDragOver(event) {
      event.preventDefault();
      this.lastElementDragOver = /* @__PURE__ */ new Date();
      this.overDropZone = true;
    }
  },
  // @ts-ignore
  setup: !isV321 ? void 0 : function() {
    var v3 = !!isV321;
    var externalDropZoneRef = ref13(null);
    var kendoLocalizationService = inject8("kendoLocalizationService", {});
    return {
      v3,
      externalDropZoneRef,
      kendoLocalizationService
    };
  },
  render: function render19(createElement) {
    var h = gh20 || createElement;
    var _a2 = this.$props, customNote = _a2.customNote, customHint = _a2.customHint;
    var localizationService = provideLocalizationService(this);
    var localizedHint = localizationService.toLanguageString(dropZoneHint, messages[dropZoneHint]);
    var localizedNote = localizationService.toLanguageString(dropZoneNote, messages[dropZoneNote]);
    var hintTemplate = templateRendering.call(this, customHint, getListeners.call(this));
    var noteTemplate = templateRendering.call(this, customNote, getListeners.call(this));
    var hintElement;
    var hintElementDefaultRendering = h("span", [localizedHint]);
    hintElement = getTemplate.call(this, {
      h,
      template: hintTemplate,
      defaultRendering: hintElementDefaultRendering
    });
    var noteElement;
    var noteElementDefaultRendering = h("span", [localizedNote]);
    noteElement = getTemplate.call(this, {
      h,
      template: noteTemplate,
      defaultRendering: noteElementDefaultRendering
    });
    return h("div", {
      ref: setRef(this, "externalDropZone"),
      id: this.$props.id,
      attrs: this.v3 ? void 0 : {
        id: this.$props.id,
        tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled, void 0)
      },
      "class": classNames("k-external-dropzone", {
        "k-external-dropzone-hover": this.overDropZone,
        "k-disabled": this.$props.disabled
      }, this.$props.className),
      tabindex: getTabIndex(this.$props.tabIndex, this.$props.disabled, void 0),
      onDrop: this.handleOnDrop,
      on: this.v3 ? void 0 : {
        "drop": this.handleOnDrop,
        "dragenter": this.handleOnElementDragEnter,
        "dragover": this.handleOnElementDragOver
      },
      onDragenter: this.handleOnElementDragEnter,
      onDragover: this.handleOnElementDragOver
    }, [h("div", {
      style: this.$props.innerStyle,
      "class": "k-dropzone-inner"
    }, [h(Icon, {
      name: "upload",
      attrs: this.v3 ? void 0 : {
        name: "upload",
        icon: uploadIcon,
        size: "xxxlarge"
      },
      icon: uploadIcon,
      "class": "k-dropzone-icon",
      size: "xxxlarge"
    }), h("span", {
      "class": "k-dropzone-hint"
    }, [hintElement]), h("span", {
      "class": "k-dropzone-note"
    }, [noteElement])]), h("div", {
      "class": "k-upload"
    })]);
  }
};
var ExternalDropZone = ExternalDropZoneVue2;
export {
  ExternalDropZone,
  ExternalDropZoneVue2,
  Upload,
  UploadFileStatus,
  UploadListActionButton,
  UploadListActionButtonVue2,
  UploadListMultiItem,
  UploadListMultiItemVue2,
  UploadListSingleItem,
  UploadListSingleItemVue2,
  UploadUI,
  UploadUIVue2,
  UploadVue2,
  messages,
  utils_default as utils
};
//# sourceMappingURL=@progress_kendo-vue-upload.js.map
