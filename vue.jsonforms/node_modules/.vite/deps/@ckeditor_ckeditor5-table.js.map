{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-table/src/converters/tableproperties.js", "../../@ckeditor/ckeditor5-table/src/utils/common.js", "../../@ckeditor/ckeditor5-table/src/converters/upcasttable.js", "../../@ckeditor/ckeditor5-table/src/tablewalker.js", "../../@ckeditor/ckeditor5-table/src/converters/downcast.js", "../../@ckeditor/ckeditor5-table/src/commands/inserttablecommand.js", "../../@ckeditor/ckeditor5-table/src/commands/insertrowcommand.js", "../../@ckeditor/ckeditor5-table/src/commands/insertcolumncommand.js", "../../@ckeditor/ckeditor5-table/src/commands/splitcellcommand.js", "../../@ckeditor/ckeditor5-table/src/utils/structure.js", "../../@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js", "../../@ckeditor/ckeditor5-table/src/commands/removerowcommand.js", "../../@ckeditor/ckeditor5-table/src/commands/removecolumncommand.js", "../../@ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.js", "../../@ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.js", "../../@ckeditor/ckeditor5-table/src/tablecolumnresize/constants.js", "../../@ckeditor/ckeditor5-table/src/tablecolumnresize/utils.js", "../../@ckeditor/ckeditor5-table/src/tableutils.js", "../../@ckeditor/ckeditor5-table/src/commands/mergecellscommand.js", "../../@ckeditor/ckeditor5-table/src/commands/selectrowcommand.js", "../../@ckeditor/ckeditor5-table/src/commands/selectcolumncommand.js", "../../@ckeditor/ckeditor5-table/src/converters/table-layout-post-fixer.js", "../../@ckeditor/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.js", "../../@ckeditor/ckeditor5-table/src/converters/table-headings-refresh-handler.js", "../../@ckeditor/ckeditor5-table/src/converters/table-cell-refresh-handler.js", "../../@ckeditor/ckeditor5-table/src/tableediting.js", "../../@ckeditor/ckeditor5-table/src/ui/inserttableview.js", "../../@ckeditor/ckeditor5-table/src/tableui.js", "../../@ckeditor/ckeditor5-table/src/tableselection.js", "../../@ckeditor/ckeditor5-table/src/tableclipboard.js", "../../@ckeditor/ckeditor5-table/src/tablekeyboard.js", "../../@ckeditor/ckeditor5-table/src/tablemouse/mouseeventsobserver.js", "../../@ckeditor/ckeditor5-table/src/tablemouse.js", "../../@ckeditor/ckeditor5-table/src/table.js", "../../@ckeditor/ckeditor5-table/src/plaintableoutput.js", "../../@ckeditor/ckeditor5-table/src/utils/ui/widget.js", "../../@ckeditor/ckeditor5-table/src/tabletoolbar.js", "../../@ckeditor/ckeditor5-table/src/ui/colorinputview.js", "../../@ckeditor/ckeditor5-table/src/utils/ui/table-properties.js", "../../@ckeditor/ckeditor5-table/src/ui/formrowview.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/ui/tablecellpropertiesview.js", "../../@ckeditor/ckeditor5-table/src/utils/ui/contextualballoon.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesui.js", "../../@ckeditor/ckeditor5-table/src/utils/table-properties.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellwidth/commands/tablecellwidthcommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellwidth/tablecellwidthediting.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpaddingcommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellheightcommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbackgroundcolorcommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellverticalalignmentcommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellhorizontalalignmentcommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderstylecommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbordercolorcommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderwidthcommand.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesediting.js", "../../@ckeditor/ckeditor5-table/src/tablecellproperties.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/commands/tablebackgroundcolorcommand.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/commands/tablebordercolorcommand.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderstylecommand.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderwidthcommand.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/commands/tablewidthcommand.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/commands/tableheightcommand.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/commands/tablealignmentcommand.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesediting.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/ui/tablepropertiesview.js", "../../@ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesui.js", "../../@ckeditor/ckeditor5-table/src/tableproperties.js", "../../@ckeditor/ckeditor5-table/src/converters/table-caption-post-fixer.js", "../../@ckeditor/ckeditor5-table/src/tablecaption/utils.js", "../../@ckeditor/ckeditor5-table/src/tablecaption/toggletablecaptioncommand.js", "../../@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionediting.js", "../../@ckeditor/ckeditor5-table/src/tablecaption/tablecaptionui.js", "../../@ckeditor/ckeditor5-table/src/tablecaption.js", "../../@ckeditor/ckeditor5-table/src/tablecolumnresize/tablewidthscommand.js", "../../@ckeditor/ckeditor5-table/src/tablecolumnresize/converters.js", "../../@ckeditor/ckeditor5-table/src/tablecolumnresize/tablecolumnresizeediting.js", "../../@ckeditor/ckeditor5-table/src/tablecolumnresize.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Conversion helper for upcasting attributes using normalized styles.\n *\n * @param options.modelAttribute The attribute to set.\n * @param options.styleName The style name to convert.\n * @param options.viewElement The view element name that should be converted.\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n * @param options.shouldUpcast The function which returns `true` if style should be upcasted from this element.\n */\nexport function upcastStyleToAttribute(conversion, options) {\n    const { modelAttribute, styleName, viewElement, defaultValue, reduceBoxSides = false, shouldUpcast = () => true } = options;\n    conversion.for('upcast').attributeToAttribute({\n        view: {\n            name: viewElement,\n            styles: {\n                [styleName]: /[\\s\\S]+/\n            }\n        },\n        model: {\n            key: modelAttribute,\n            value: (viewElement) => {\n                if (!shouldUpcast(viewElement)) {\n                    return;\n                }\n                const normalized = viewElement.getNormalizedStyle(styleName);\n                const value = reduceBoxSides ? reduceBoxSidesValue(normalized) : normalized;\n                if (defaultValue !== value) {\n                    return value;\n                }\n            }\n        }\n    });\n}\n/**\n * Conversion helper for upcasting border styles for view elements.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `borderColor` value.\n * @param defaultBorder.style The default `borderStyle` value.\n * @param defaultBorder.width The default `borderWidth` value.\n */\nexport function upcastBorderStyles(conversion, viewElementName, modelAttributes, defaultBorder) {\n    conversion.for('upcast').add(dispatcher => dispatcher.on('element:' + viewElementName, (evt, data, conversionApi) => {\n        // If the element was not converted by element-to-element converter,\n        // we should not try to convert the style. See #8393.\n        if (!data.modelRange) {\n            return;\n        }\n        // Check the most detailed properties. These will be always set directly or\n        // when using the \"group\" properties like: `border-(top|right|bottom|left)` or `border`.\n        const stylesToConsume = [\n            'border-top-width',\n            'border-top-color',\n            'border-top-style',\n            'border-bottom-width',\n            'border-bottom-color',\n            'border-bottom-style',\n            'border-right-width',\n            'border-right-color',\n            'border-right-style',\n            'border-left-width',\n            'border-left-color',\n            'border-left-style'\n        ].filter(styleName => data.viewItem.hasStyle(styleName));\n        if (!stylesToConsume.length) {\n            return;\n        }\n        const matcherPattern = {\n            styles: stylesToConsume\n        };\n        // Try to consume appropriate values from consumable values list.\n        if (!conversionApi.consumable.test(data.viewItem, matcherPattern)) {\n            return;\n        }\n        const modelElement = [...data.modelRange.getItems({ shallow: true })].pop();\n        conversionApi.consumable.consume(data.viewItem, matcherPattern);\n        const normalizedBorder = {\n            style: data.viewItem.getNormalizedStyle('border-style'),\n            color: data.viewItem.getNormalizedStyle('border-color'),\n            width: data.viewItem.getNormalizedStyle('border-width')\n        };\n        const reducedBorder = {\n            style: reduceBoxSidesValue(normalizedBorder.style),\n            color: reduceBoxSidesValue(normalizedBorder.color),\n            width: reduceBoxSidesValue(normalizedBorder.width)\n        };\n        if (reducedBorder.style !== defaultBorder.style) {\n            conversionApi.writer.setAttribute(modelAttributes.style, reducedBorder.style, modelElement);\n        }\n        if (reducedBorder.color !== defaultBorder.color) {\n            conversionApi.writer.setAttribute(modelAttributes.color, reducedBorder.color, modelElement);\n        }\n        if (reducedBorder.width !== defaultBorder.width) {\n            conversionApi.writer.setAttribute(modelAttributes.width, reducedBorder.width, modelElement);\n        }\n    }));\n}\n/**\n * Conversion helper for downcasting an attribute to a style.\n */\nexport function downcastAttributeToStyle(conversion, options) {\n    const { modelElement, modelAttribute, styleName } = options;\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: modelElement,\n            key: modelAttribute\n        },\n        view: modelAttributeValue => ({\n            key: 'style',\n            value: {\n                [styleName]: modelAttributeValue\n            }\n        })\n    });\n}\n/**\n * Conversion helper for downcasting attributes from the model table to a view table (not to `<figure>`).\n */\nexport function downcastTableAttribute(conversion, options) {\n    const { modelAttribute, styleName } = options;\n    conversion.for('downcast').add(dispatcher => dispatcher.on(`attribute:${modelAttribute}:table`, (evt, data, conversionApi) => {\n        const { item, attributeNewValue } = data;\n        const { mapper, writer } = conversionApi;\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const table = [...mapper.toViewElement(item).getChildren()].find(child => child.is('element', 'table'));\n        if (attributeNewValue) {\n            writer.setStyle(styleName, attributeNewValue, table);\n        }\n        else {\n            writer.removeStyle(styleName, table);\n        }\n    }));\n}\n/**\n * Reduces the full top, right, bottom, left object to a single string if all sides are equal.\n * Returns original style otherwise.\n */\nfunction reduceBoxSidesValue(style) {\n    if (!style) {\n        return;\n    }\n    const sides = ['top', 'right', 'bottom', 'left'];\n    const allSidesDefined = sides.every(side => style[side]);\n    if (!allSidesDefined) {\n        return style;\n    }\n    const topSideStyle = style.top;\n    const allSidesEqual = sides.every(side => style[side] === topSideStyle);\n    if (!allSidesEqual) {\n        return style;\n    }\n    return topSideStyle;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { downcastAttributeToStyle, upcastStyleToAttribute } from './../converters/tableproperties';\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param key An attribute key.\n * @param value The new attribute value.\n * @param item A model item on which the attribute will be set.\n * @param defaultValue The default attribute value. If a value is lower or equal, it will be unset.\n */\nexport function updateNumericAttribute(key, value, item, writer, defaultValue = 1) {\n    if (value !== undefined && value !== null && defaultValue !== undefined && defaultValue !== null && value > defaultValue) {\n        writer.setAttribute(key, value, item);\n    }\n    else {\n        writer.removeAttribute(key, item);\n    }\n}\n/**\n * A common method to create an empty table cell. It creates a proper model structure as a table cell must have at least one block inside.\n *\n * @param writer The model writer.\n * @param insertPosition The position at which the table cell should be inserted.\n * @param attributes The element attributes.\n * @returns Created table cell.\n */\nexport function createEmptyTableCell(writer, insertPosition, attributes = {}) {\n    const tableCell = writer.createElement('tableCell', attributes);\n    writer.insertElement('paragraph', tableCell);\n    writer.insert(tableCell, insertPosition);\n    return tableCell;\n}\n/**\n * Checks if a table cell belongs to the heading column section.\n */\nexport function isHeadingColumnCell(tableUtils, tableCell) {\n    const table = tableCell.parent.parent;\n    const headingColumns = parseInt(table.getAttribute('headingColumns') || '0');\n    const { column } = tableUtils.getCellLocation(tableCell);\n    return !!headingColumns && column < headingColumns;\n}\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */\nexport function enableProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('tableCell', {\n        allowAttributes: [modelAttribute]\n    });\n    upcastStyleToAttribute(conversion, { viewElement: /^(td|th)$/, ...options });\n    downcastAttributeToStyle(conversion, { modelElement: 'tableCell', ...options });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { createEmptyTableCell } from '../utils/common';\nimport { first } from 'ckeditor5/src/utils';\n/**\n * Returns a function that converts the table view representation:\n *\n * ```xml\n * <figure class=\"table\"><table>...</table></figure>\n * ```\n *\n * to the model representation:\n *\n * ```xml\n * <table></table>\n * ```\n */\nexport function upcastTableFigure() {\n    return (dispatcher) => {\n        dispatcher.on('element:figure', (evt, data, conversionApi) => {\n            // Do not convert if this is not a \"table figure\".\n            if (!conversionApi.consumable.test(data.viewItem, { name: true, classes: 'table' })) {\n                return;\n            }\n            // Find a table element inside the figure element.\n            const viewTable = getViewTableFromFigure(data.viewItem);\n            // Do not convert if table element is absent or was already converted.\n            if (!viewTable || !conversionApi.consumable.test(viewTable, { name: true })) {\n                return;\n            }\n            // Consume the figure to prevent other converters from processing it again.\n            conversionApi.consumable.consume(data.viewItem, { name: true, classes: 'table' });\n            // Convert view table to model table.\n            const conversionResult = conversionApi.convertItem(viewTable, data.modelCursor);\n            // Get table element from conversion result.\n            const modelTable = first(conversionResult.modelRange.getItems());\n            // When table wasn't successfully converted then finish conversion.\n            if (!modelTable) {\n                // Revert consumed figure so other features can convert it.\n                conversionApi.consumable.revert(data.viewItem, { name: true, classes: 'table' });\n                return;\n            }\n            conversionApi.convertChildren(data.viewItem, conversionApi.writer.createPositionAt(modelTable, 'end'));\n            conversionApi.updateConversionResult(modelTable, data);\n        });\n    };\n}\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns Conversion helper.\n */\nexport default function upcastTable() {\n    return (dispatcher) => {\n        dispatcher.on('element:table', (evt, data, conversionApi) => {\n            const viewTable = data.viewItem;\n            // When element was already consumed then skip it.\n            if (!conversionApi.consumable.test(viewTable, { name: true })) {\n                return;\n            }\n            const { rows, headingRows, headingColumns } = scanTable(viewTable);\n            // Only set attributes if values is greater then 0.\n            const attributes = {};\n            if (headingColumns) {\n                attributes.headingColumns = headingColumns;\n            }\n            if (headingRows) {\n                attributes.headingRows = headingRows;\n            }\n            const table = conversionApi.writer.createElement('table', attributes);\n            if (!conversionApi.safeInsert(table, data.modelCursor)) {\n                return;\n            }\n            conversionApi.consumable.consume(viewTable, { name: true });\n            // Upcast table rows in proper order (heading rows first).\n            rows.forEach(row => conversionApi.convertItem(row, conversionApi.writer.createPositionAt(table, 'end')));\n            // Convert everything else.\n            conversionApi.convertChildren(viewTable, conversionApi.writer.createPositionAt(table, 'end'));\n            // Create one row and one table cell for empty table.\n            if (table.isEmpty) {\n                const row = conversionApi.writer.createElement('tableRow');\n                conversionApi.writer.insert(row, conversionApi.writer.createPositionAt(table, 'end'));\n                createEmptyTableCell(conversionApi.writer, conversionApi.writer.createPositionAt(row, 'end'));\n            }\n            conversionApi.updateConversionResult(table, data);\n        });\n    };\n}\n/**\n * A conversion helper that skips empty <tr> elements from upcasting at the beginning of the table.\n *\n * An empty row is considered a table model error but when handling clipboard data there could be rows that contain only row-spanned cells\n * and empty TR-s are used to maintain the table structure (also {@link module:table/tablewalker~TableWalker} assumes that there are only\n * rows that have related `tableRow` elements).\n *\n * *Note:* Only the first empty rows are removed because they have no meaning and it solves the issue\n * of an improper table with all empty rows.\n *\n * @returns Conversion helper.\n */\nexport function skipEmptyTableRow() {\n    return (dispatcher) => {\n        dispatcher.on('element:tr', (evt, data) => {\n            if (data.viewItem.isEmpty && data.modelCursor.index == 0) {\n                evt.stop();\n            }\n        }, { priority: 'high' });\n    };\n}\n/**\n * A converter that ensures an empty paragraph is inserted in a table cell if no other content was converted.\n *\n * @returns Conversion helper.\n */\nexport function ensureParagraphInTableCell(elementName) {\n    return (dispatcher) => {\n        dispatcher.on(`element:${elementName}`, (evt, data, { writer }) => {\n            // The default converter will create a model range on converted table cell.\n            if (!data.modelRange) {\n                return;\n            }\n            const tableCell = data.modelRange.start.nodeAfter;\n            const modelCursor = writer.createPositionAt(tableCell, 0);\n            // Ensure a paragraph in the model for empty table cells for converted table cells.\n            if (data.viewItem.isEmpty) {\n                writer.insertElement('paragraph', modelCursor);\n                return;\n            }\n            const childNodes = Array.from(tableCell.getChildren());\n            // In case there are only markers inside the table cell then move them to the paragraph.\n            if (childNodes.every(node => node.is('element', '$marker'))) {\n                const paragraph = writer.createElement('paragraph');\n                writer.insert(paragraph, writer.createPositionAt(tableCell, 0));\n                for (const node of childNodes) {\n                    writer.move(writer.createRangeOn(node), writer.createPositionAt(paragraph, 'end'));\n                }\n            }\n        }, { priority: 'low' });\n    };\n}\n/**\n * Get view `<table>` element from the view widget (`<figure>`).\n */\nfunction getViewTableFromFigure(figureView) {\n    for (const figureChild of figureView.getChildren()) {\n        if (figureChild.is('element', 'table')) {\n            return figureChild;\n        }\n    }\n}\n/**\n * Scans table rows and extracts required metadata from the table:\n *\n * headingRows    - The number of rows that go as table headers.\n * headingColumns - The maximum number of row headings.\n * rows           - Sorted `<tr>` elements as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n */\nfunction scanTable(viewTable) {\n    let headingRows = 0;\n    let headingColumns = undefined;\n    // The `<tbody>` and `<thead>` sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more than one\n    // of them.\n    // As the model does not have these sections, rows from different sections must be sorted.\n    // For example, below is a valid HTML table:\n    //\n    // <table>\n    //   <tbody><tr><td>2</td></tr></tbody>\n    //   <thead><tr><td>1</td></tr></thead>\n    //   <tbody><tr><td>3</td></tr></tbody>\n    // </table>\n    //\n    // But browsers will render rows in order as: 1 as the heading and 2 and 3 as the body.\n    const headRows = [];\n    const bodyRows = [];\n    // Currently the editor does not support more then one <thead> section.\n    // Only the first <thead> from the view will be used as a heading row and the others will be converted to body rows.\n    let firstTheadElement;\n    for (const tableChild of Array.from(viewTable.getChildren())) {\n        // Only `<thead>`, `<tbody>` & `<tfoot>` from allowed table children can have `<tr>`s.\n        // The else is for future purposes (mainly `<caption>`).\n        if (tableChild.name !== 'tbody' && tableChild.name !== 'thead' && tableChild.name !== 'tfoot') {\n            continue;\n        }\n        // Save the first `<thead>` in the table as table header - all other ones will be converted to table body rows.\n        if (tableChild.name === 'thead' && !firstTheadElement) {\n            firstTheadElement = tableChild;\n        }\n        // There might be some extra empty text nodes between the `<tr>`s.\n        // Make sure further code operates on `tr`s only. (#145)\n        const trs = Array.from(tableChild.getChildren()).filter((el) => el.is('element', 'tr'));\n        for (const tr of trs) {\n            // This <tr> is a child of a first <thead> element.\n            if ((firstTheadElement && tableChild === firstTheadElement) ||\n                (tableChild.name === 'tbody' &&\n                    Array.from(tr.getChildren()).length &&\n                    Array.from(tr.getChildren()).every(e => e.is('element', 'th')))) {\n                headingRows++;\n                headRows.push(tr);\n            }\n            else {\n                bodyRows.push(tr);\n                // For other rows check how many column headings this row has.\n                const headingCols = scanRowForHeadingColumns(tr);\n                if (!headingColumns || headingCols < headingColumns) {\n                    headingColumns = headingCols;\n                }\n            }\n        }\n    }\n    return {\n        headingRows,\n        headingColumns: headingColumns || 0,\n        rows: [...headRows, ...bodyRows]\n    };\n}\n/**\n * Scans a `<tr>` element and its children for metadata:\n * - For heading row:\n *     - Adds this row to either the heading or the body rows.\n *     - Updates the number of heading rows.\n * - For body rows:\n *     - Calculates the number of column headings.\n */\nfunction scanRowForHeadingColumns(tr) {\n    let headingColumns = 0;\n    let index = 0;\n    // Filter out empty text nodes from tr children.\n    const children = Array.from(tr.getChildren())\n        .filter(child => child.name === 'th' || child.name === 'td');\n    // Count starting adjacent <th> elements of a <tr>.\n    while (index < children.length && children[index].name === 'th') {\n        const th = children[index];\n        // Adjust columns calculation by the number of spanned columns.\n        const colspan = parseInt(th.getAttribute('colspan') || '1');\n        headingColumns = headingColumns + colspan;\n        index++;\n    }\n    return headingColumns;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * The table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableSlot} with proper table cell attributes.\n */\nexport default class TableWalker {\n    /**\n     * Creates an instance of the table walker.\n     *\n     * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n     * It walks row by row and column by column in order to output values defined in the constructor.\n     * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n     * pass the `includeAllSlots` option to the constructor.\n     *\n     * The most important values of the iterator are column and row indexes of a cell.\n     *\n     * See {@link module:table/tablewalker~TableSlot} what values are returned by the table walker.\n     *\n     * To iterate over a given row:\n     *\n     * ```ts\n     * const tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n     *\n     * for ( const tableSlot of tableWalker ) {\n     *   console.log( 'A cell at row', tableSlot.row, 'and column', tableSlot.column );\n     * }\n     * ```\n     *\n     * For instance the code above for the following table:\n     *\n     *  +----+----+----+----+----+----+\n     *  | 00      | 02 | 03 | 04 | 05 |\n     *  |         +----+----+----+----+\n     *  |         | 12      | 14 | 15 |\n     *  |         +----+----+----+    +\n     *  |         | 22           |    |\n     *  |----+----+----+----+----+    +\n     *  | 30 | 31 | 32 | 33 | 34 |    |\n     *  +----+----+----+----+----+----+\n     *\n     * will log in the console:\n     *\n     *  'A cell at row 1 and column 2'\n     *  'A cell at row 1 and column 4'\n     *  'A cell at row 1 and column 5'\n     *  'A cell at row 2 and column 2'\n     *\n     * To also iterate over spanned cells:\n     *\n     * ```ts\n     * const tableWalker = new TableWalker( table, { row: 1, includeAllSlots: true } );\n     *\n     * for ( const tableSlot of tableWalker ) {\n     *   console.log( 'Slot at', tableSlot.row, 'x', tableSlot.column, ':', tableSlot.isAnchor ? 'is anchored' : 'is spanned' );\n     * }\n     * ```\n     *\n     * will log in the console for the table from the previous example:\n     *\n     *  'Cell at 1 x 0 : is spanned'\n     *  'Cell at 1 x 1 : is spanned'\n     *  'Cell at 1 x 2 : is anchored'\n     *  'Cell at 1 x 3 : is spanned'\n     *  'Cell at 1 x 4 : is anchored'\n     *  'Cell at 1 x 5 : is anchored'\n     *\n     * **Note**: Option `row` is a shortcut that sets both `startRow` and `endRow` to the same row.\n     * (Use either `row` or `startRow` and `endRow` but never together). Similarly the `column` option sets both `startColumn`\n     * and `endColumn` to the same column (Use either `column` or `startColumn` and `endColumn` but never together).\n     *\n     * @param table A table over which the walker iterates.\n     * @param options An object with configuration.\n     * @param options.row A row index for which this iterator will output cells. Can't be used together with `startRow` and `endRow`.\n     * @param options.startRow A row index from which this iterator should start. Can't be used together with `row`. Default value is 0.\n     * @param options.endRow A row index at which this iterator should end. Can't be used together with `row`.\n     * @param options.column A column index for which this iterator will output cells.\n     * Can't be used together with `startColumn` and `endColumn`.\n     * @param options.startColumn A column index from which this iterator should start.\n     * Can't be used together with `column`. Default value is 0.\n     * @param options.endColumn A column index at which this iterator should end. Can't be used together with `column`.\n     * @param options.includeAllSlots Also return values for spanned cells. Default value is \"false\".\n     */\n    constructor(table, options = {}) {\n        /**\n         * Indicates whether the iterator jumped to (or close to) the start row, ignoring rows that don't need to be traversed.\n         */\n        this._jumpedToStartRow = false;\n        this._table = table;\n        this._startRow = options.row !== undefined ? options.row : options.startRow || 0;\n        this._endRow = options.row !== undefined ? options.row : options.endRow;\n        this._startColumn = options.column !== undefined ? options.column : options.startColumn || 0;\n        this._endColumn = options.column !== undefined ? options.column : options.endColumn;\n        this._includeAllSlots = !!options.includeAllSlots;\n        this._skipRows = new Set();\n        this._row = 0;\n        this._rowIndex = 0;\n        this._column = 0;\n        this._cellIndex = 0;\n        this._spannedCells = new Map();\n        this._nextCellAtColumn = -1;\n    }\n    /**\n     * Iterable interface.\n     */\n    [Symbol.iterator]() {\n        return this;\n    }\n    /**\n     * Gets the next table walker's value.\n     *\n     * @returns The next table walker's value.\n     */\n    next() {\n        if (this._canJumpToStartRow()) {\n            this._jumpToNonSpannedRowClosestToStartRow();\n        }\n        const row = this._table.getChild(this._rowIndex);\n        // Iterator is done when there's no row (table ended) or the row is after `endRow` limit.\n        if (!row || this._isOverEndRow()) {\n            return { done: true, value: undefined };\n        }\n        // We step over current element when it is not a tableRow instance.\n        if (!row.is('element', 'tableRow')) {\n            this._rowIndex++;\n            return this.next();\n        }\n        if (this._isOverEndColumn()) {\n            return this._advanceToNextRow();\n        }\n        let outValue = null;\n        const spanData = this._getSpanned();\n        if (spanData) {\n            if (this._includeAllSlots && !this._shouldSkipSlot()) {\n                outValue = this._formatOutValue(spanData.cell, spanData.row, spanData.column);\n            }\n        }\n        else {\n            const cell = row.getChild(this._cellIndex);\n            if (!cell) {\n                // If there are no more cells left in row advance to the next row.\n                return this._advanceToNextRow();\n            }\n            const colspan = parseInt(cell.getAttribute('colspan') || '1');\n            const rowspan = parseInt(cell.getAttribute('rowspan') || '1');\n            // Record this cell spans if it's not 1x1 cell.\n            if (colspan > 1 || rowspan > 1) {\n                this._recordSpans(cell, rowspan, colspan);\n            }\n            if (!this._shouldSkipSlot()) {\n                outValue = this._formatOutValue(cell);\n            }\n            this._nextCellAtColumn = this._column + colspan;\n        }\n        // Advance to the next column before returning value.\n        this._column++;\n        if (this._column == this._nextCellAtColumn) {\n            this._cellIndex++;\n        }\n        // The current value will be returned only if current row and column are not skipped.\n        return outValue || this.next();\n    }\n    /**\n     * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n     * to output.\n     *\n     * @param row The row index to skip.\n     */\n    skipRow(row) {\n        this._skipRows.add(row);\n    }\n    /**\n     * Advances internal cursor to the next row.\n     */\n    _advanceToNextRow() {\n        this._row++;\n        this._rowIndex++;\n        this._column = 0;\n        this._cellIndex = 0;\n        this._nextCellAtColumn = -1;\n        return this.next();\n    }\n    /**\n     * Checks if the current row is over {@link #_endRow}.\n     */\n    _isOverEndRow() {\n        // If #_endRow is defined skip all rows after it.\n        return this._endRow !== undefined && this._row > this._endRow;\n    }\n    /**\n     * Checks if the current cell is over {@link #_endColumn}\n     */\n    _isOverEndColumn() {\n        // If #_endColumn is defined skip all cells after it.\n        return this._endColumn !== undefined && this._column > this._endColumn;\n    }\n    /**\n     * A common method for formatting the iterator's output value.\n     *\n     * @param cell The table cell to output.\n     * @param anchorRow The row index of a cell anchor slot.\n     * @param anchorColumn The column index of a cell anchor slot.\n     */\n    _formatOutValue(cell, anchorRow = this._row, anchorColumn = this._column) {\n        return {\n            done: false,\n            value: new TableSlot(this, cell, anchorRow, anchorColumn)\n        };\n    }\n    /**\n     * Checks if the current slot should be skipped.\n     */\n    _shouldSkipSlot() {\n        const rowIsMarkedAsSkipped = this._skipRows.has(this._row);\n        const rowIsBeforeStartRow = this._row < this._startRow;\n        const columnIsBeforeStartColumn = this._column < this._startColumn;\n        const columnIsAfterEndColumn = this._endColumn !== undefined && this._column > this._endColumn;\n        return rowIsMarkedAsSkipped || rowIsBeforeStartRow || columnIsBeforeStartColumn || columnIsAfterEndColumn;\n    }\n    /**\n     * Returns the cell element that is spanned over the current cell location.\n     */\n    _getSpanned() {\n        const rowMap = this._spannedCells.get(this._row);\n        // No spans for given row.\n        if (!rowMap) {\n            return null;\n        }\n        // If spans for given rows has entry for column it means that this location if spanned by other cell.\n        return rowMap.get(this._column) || null;\n    }\n    /**\n     * Updates spanned cells map relative to the current cell location and its span dimensions.\n     *\n     * @param cell A cell that is spanned.\n     * @param rowspan Cell height.\n     * @param colspan Cell width.\n     */\n    _recordSpans(cell, rowspan, colspan) {\n        const data = {\n            cell,\n            row: this._row,\n            column: this._column\n        };\n        for (let rowToUpdate = this._row; rowToUpdate < this._row + rowspan; rowToUpdate++) {\n            for (let columnToUpdate = this._column; columnToUpdate < this._column + colspan; columnToUpdate++) {\n                if (rowToUpdate != this._row || columnToUpdate != this._column) {\n                    this._markSpannedCell(rowToUpdate, columnToUpdate, data);\n                }\n            }\n        }\n    }\n    /**\n     * Marks the cell location as spanned by another cell.\n     *\n     * @param row The row index of the cell location.\n     * @param column The column index of the cell location.\n     * @param data A spanned cell details (cell element, anchor row and column).\n     */\n    _markSpannedCell(row, column, data) {\n        if (!this._spannedCells.has(row)) {\n            this._spannedCells.set(row, new Map());\n        }\n        const rowSpans = this._spannedCells.get(row);\n        rowSpans.set(column, data);\n    }\n    /**\n     * Checks if part of the table can be skipped.\n     */\n    _canJumpToStartRow() {\n        return !!this._startRow &&\n            this._startRow > 0 &&\n            !this._jumpedToStartRow;\n    }\n    /**\n     * Sets the current row to `this._startRow` or the first row before it that has the number of cells\n     * equal to the number of columns in the table.\n     *\n     * Example:\n     * \t+----+----+----+\n     *  | 00 | 01 | 02 |\n     *  |----+----+----+\n     *  | 10      | 12 |\n     *  |         +----+\n     *  |         | 22 |\n     *  |         +----+\n     *  |         | 32 | <--- Start row\n     *  +----+----+----+\n     *  | 40 | 41 | 42 |\n     *  +----+----+----+\n     *\n     * If the 4th row is a `this._startRow`, this method will:\n     * 1.) Count the number of columns this table has based on the first row (3 columns in this case).\n     * 2.) Check if the 4th row contains 3 cells. It doesn't, so go to the row before it.\n     * 3.) Check if the 3rd row contains 3 cells. It doesn't, so go to the row before it.\n     * 4.) Check if the 2nd row contains 3 cells. It does, so set the current row to that row.\n     *\n     * Setting the current row this way is necessary to let the `next()`  method loop over the cells\n     * spanning multiple rows or columns and update the `this._spannedCells` property.\n     */\n    _jumpToNonSpannedRowClosestToStartRow() {\n        const firstRowLength = this._getRowLength(0);\n        for (let i = this._startRow; !this._jumpedToStartRow; i--) {\n            if (firstRowLength === this._getRowLength(i)) {\n                this._row = i;\n                this._rowIndex = i;\n                this._jumpedToStartRow = true;\n            }\n        }\n    }\n    /**\n     * Returns a number of columns in a row taking `colspan` into consideration.\n     */\n    _getRowLength(rowIndex) {\n        const row = this._table.getChild(rowIndex);\n        return [...row.getChildren()].reduce((cols, row) => {\n            return cols + parseInt(row.getAttribute('colspan') || '1');\n        }, 0);\n    }\n}\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n */\nclass TableSlot {\n    /**\n     * Creates an instance of the table walker value.\n     *\n     * @param tableWalker The table walker instance.\n     * @param cell The current table cell.\n     * @param anchorRow The row index of a cell anchor slot.\n     * @param anchorColumn The column index of a cell anchor slot.\n     */\n    constructor(tableWalker, cell, anchorRow, anchorColumn) {\n        this.cell = cell;\n        this.row = tableWalker._row;\n        this.column = tableWalker._column;\n        this.cellAnchorRow = anchorRow;\n        this.cellAnchorColumn = anchorColumn;\n        this._cellIndex = tableWalker._cellIndex;\n        this._rowIndex = tableWalker._rowIndex;\n        this._table = tableWalker._table;\n    }\n    // @if CK_DEBUG // public get isSpanned(): unknown { return throwMissingGetterError( 'isSpanned' ); }\n    // @if CK_DEBUG // public get colspan(): unknown { return throwMissingGetterError( 'colspan' ); }\n    // @if CK_DEBUG // public get rowspan(): unknown { return throwMissingGetterError( 'rowspan' ); }\n    // @if CK_DEBUG // public get cellIndex(): unknown { return throwMissingGetterError( 'cellIndex' ); }\n    /**\n     * Whether the cell is anchored in the current slot.\n     */\n    get isAnchor() {\n        return this.row === this.cellAnchorRow && this.column === this.cellAnchorColumn;\n    }\n    /**\n     * The width of a cell defined by a `colspan` attribute. If the model attribute is not present, it is set to `1`.\n     */\n    get cellWidth() {\n        return parseInt(this.cell.getAttribute('colspan') || '1');\n    }\n    /**\n     * The height of a cell defined by a `rowspan` attribute. If the model attribute is not present, it is set to `1`.\n     */\n    get cellHeight() {\n        return parseInt(this.cell.getAttribute('rowspan') || '1');\n    }\n    /**\n     * The index of the current row element in the table.\n     */\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    /**\n     * Returns the {@link module:engine/model/position~Position} before the table slot.\n     */\n    getPositionBefore() {\n        const model = this._table.root.document.model;\n        return model.createPositionAt(this._table.getChild(this.row), this._cellIndex);\n    }\n}\n/**\n * This `TableSlot`'s getter (property) was removed in CKEditor 5 v20.0.0.\n *\n * Check out the new `TableWalker`'s API in the documentation.\n *\n * @error tableslot-getter-removed\n * @param getterName\n */\n// @if CK_DEBUG // function throwMissingGetterError( getterName: string ): void {\n// @if CK_DEBUG //\t\tthrow new CKEditorError( 'tableslot-getter-removed', null, {\n// @if CK_DEBUG //\t\t\tgetterName\n// @if CK_DEBUG //\t\t} );\n// @if CK_DEBUG // }\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/converters/downcast\n */\nimport { toWidget, toWidgetEditable } from 'ckeditor5/src/widget';\nimport TableWalker from './../tablewalker';\n/**\n * Model table element to view table element conversion helper.\n */\nexport function downcastTable(tableUtils, options) {\n    return (table, { writer }) => {\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const tableElement = writer.createContainerElement('table', null, []);\n        const figureElement = writer.createContainerElement('figure', { class: 'table' }, tableElement);\n        // Table head slot.\n        if (headingRows > 0) {\n            writer.insert(writer.createPositionAt(tableElement, 'end'), writer.createContainerElement('thead', null, writer.createSlot(element => element.is('element', 'tableRow') && element.index < headingRows)));\n        }\n        // Table body slot.\n        if (headingRows < tableUtils.getRows(table)) {\n            writer.insert(writer.createPositionAt(tableElement, 'end'), writer.createContainerElement('tbody', null, writer.createSlot(element => element.is('element', 'tableRow') && element.index >= headingRows)));\n        }\n        // Dynamic slots.\n        for (const { positionOffset, filter } of options.additionalSlots) {\n            writer.insert(writer.createPositionAt(tableElement, positionOffset), writer.createSlot(filter));\n        }\n        // Create a slot with items that don't fit into the table.\n        writer.insert(writer.createPositionAt(tableElement, 'after'), writer.createSlot(element => {\n            if (element.is('element', 'tableRow')) {\n                return false;\n            }\n            return !options.additionalSlots.some(({ filter }) => filter(element));\n        }));\n        return options.asWidget ? toTableWidget(figureElement, writer) : figureElement;\n    };\n}\n/**\n * Model table row element to view `<tr>` element conversion helper.\n *\n * @returns Element creator.\n */\nexport function downcastRow() {\n    return (tableRow, { writer }) => {\n        return tableRow.isEmpty ?\n            writer.createEmptyElement('tr') :\n            writer.createContainerElement('tr');\n    };\n}\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */\nexport function downcastCell(options = {}) {\n    return (tableCell, { writer }) => {\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowIndex = table.getChildIndex(tableRow);\n        const tableWalker = new TableWalker(table, { row: rowIndex });\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const headingColumns = table.getAttribute('headingColumns') || 0;\n        let result = null;\n        // We need to iterate over a table in order to get proper row & column values from a walker.\n        for (const tableSlot of tableWalker) {\n            if (tableSlot.cell == tableCell) {\n                const isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n                const cellElementName = isHeading ? 'th' : 'td';\n                result = options.asWidget ?\n                    toWidgetEditable(writer.createEditableElement(cellElementName), writer) :\n                    writer.createContainerElement(cellElementName);\n                break;\n            }\n        }\n        return result;\n    };\n}\n/**\n * Overrides paragraph inside table cell conversion.\n *\n * This converter:\n * * should be used to override default paragraph conversion.\n * * It will only convert `<paragraph>` placed directly inside `<tableCell>`.\n * * For a single paragraph without attributes it returns `<span>` to simulate data table.\n * * For all other cases it returns `<p>` element.\n *\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */\nexport function convertParagraphInTableCell(options = {}) {\n    return (modelElement, { writer }) => {\n        if (!modelElement.parent.is('element', 'tableCell')) {\n            return null;\n        }\n        if (!isSingleParagraphWithoutAttributes(modelElement)) {\n            return null;\n        }\n        if (options.asWidget) {\n            return writer.createContainerElement('span', { class: 'ck-table-bogus-paragraph' });\n        }\n        else {\n            // Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n            const viewElement = writer.createContainerElement('p');\n            writer.setCustomProperty('dataPipeline:transparentRendering', true, viewElement);\n            return viewElement;\n        }\n    };\n}\n/**\n * Checks if given model `<paragraph>` is an only child of a parent (`<tableCell>`) and if it has any attribute set.\n *\n * The paragraph should be converted in the editing view to:\n *\n * * If returned `true` - to a `<span class=\"ck-table-bogus-paragraph\">`\n * * If returned `false` - to a `<p>`\n */\nexport function isSingleParagraphWithoutAttributes(modelElement) {\n    const tableCell = modelElement.parent;\n    const isSingleParagraph = tableCell.childCount == 1;\n    return isSingleParagraph && !hasAnyAttribute(modelElement);\n}\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param writer An instance of the view writer.\n * @param label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n */\nfunction toTableWidget(viewElement, writer) {\n    writer.setCustomProperty('table', true, viewElement);\n    return toWidget(viewElement, writer, { hasSelectionHandle: true });\n}\n/**\n * Checks if an element has any attributes set.\n */\nfunction hasAnyAttribute(element) {\n    const iteratorItem = element.getAttributeKeys().next();\n    return !iteratorItem.done;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/inserttablecommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n * ```ts\n * editor.execute( 'insertTable', { rows: 20, columns: 5 } );\n * ```\n */\nexport default class InsertTableCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const schema = model.schema;\n        this.isEnabled = isAllowedInParent(selection, schema);\n    }\n    /**\n     * Executes the command.\n     *\n     * Inserts a table with the given number of rows and columns into the editor.\n     *\n     * @param options.rows The number of rows to create in the inserted table. Default value is 2.\n     * @param options.columns The number of columns to create in the inserted table. Default value is 2.\n     * @param options.headingRows The number of heading rows. If not provided it will default to\n     * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.rows`} table config.\n     * @param options.headingColumns The number of heading columns. If not provided it will default to\n     * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.columns`} table config.\n     * @fires execute\n     */\n    execute(options = {}) {\n        const editor = this.editor;\n        const model = editor.model;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const defaultRows = editor.config.get('table.defaultHeadings.rows');\n        const defaultColumns = editor.config.get('table.defaultHeadings.columns');\n        if (options.headingRows === undefined && defaultRows) {\n            options.headingRows = defaultRows;\n        }\n        if (options.headingColumns === undefined && defaultColumns) {\n            options.headingColumns = defaultColumns;\n        }\n        model.change(writer => {\n            const table = tableUtils.createTable(writer, options);\n            model.insertObject(table, null, null, { findOptimalPosition: 'auto' });\n            writer.setSelection(writer.createPositionAt(table.getNodeByPath([0, 0, 0]), 0));\n        });\n    }\n}\n/**\n * Checks if the table is allowed in the parent.\n */\nfunction isAllowedInParent(selection, schema) {\n    const positionParent = selection.getFirstPosition().parent;\n    const validParent = positionParent === positionParent.root ? positionParent : positionParent.parent;\n    return schema.checkChild(validParent, 'table');\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/insertrowcommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowBelow' );\n * ```\n *\n * To insert a row above the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowAbove' );\n * ```\n */\nexport default class InsertRowCommand extends Command {\n    /**\n     * Creates a new `InsertRowCommand` instance.\n     *\n     * @param editor The editor on which this command will be used.\n     * @param options.order The order of insertion relative to the row in which the caret is located.\n     * Possible values: `\"above\"` and `\"below\"`. Default value is \"below\"\n     */\n    constructor(editor, options = {}) {\n        super(editor);\n        this.order = options.order || 'below';\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const selection = this.editor.model.document.selection;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells(selection).length;\n        this.isEnabled = isAnyCellSelected;\n    }\n    /**\n     * Executes the command.\n     *\n     * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n     *\n     * @fires execute\n     */\n    execute() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const insertAbove = this.order === 'above';\n        const affectedTableCells = tableUtils.getSelectionAffectedTableCells(selection);\n        const rowIndexes = tableUtils.getRowIndexes(affectedTableCells);\n        const row = insertAbove ? rowIndexes.first : rowIndexes.last;\n        const table = affectedTableCells[0].findAncestor('table');\n        tableUtils.insertRows(table, { at: insertAbove ? row : row + 1, copyStructureFromAbove: !insertAbove });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/insertcolumncommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnLeft' );\n * ```\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnRight' );\n * ```\n */\nexport default class InsertColumnCommand extends Command {\n    /**\n     * Creates a new `InsertColumnCommand` instance.\n     *\n     * @param editor An editor on which this command will be used.\n     * @param options.order The order of insertion relative to the column in which the caret is located.\n     * Possible values: `\"left\"` and `\"right\"`. Default value is \"right\".\n     */\n    constructor(editor, options = {}) {\n        super(editor);\n        this.order = options.order || 'right';\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const selection = this.editor.model.document.selection;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells(selection).length;\n        this.isEnabled = isAnyCellSelected;\n    }\n    /**\n     * Executes the command.\n     *\n     * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n     * in which the selection is set.\n     *\n     * @fires execute\n     */\n    execute() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const insertBefore = this.order === 'left';\n        const affectedTableCells = tableUtils.getSelectionAffectedTableCells(selection);\n        const columnIndexes = tableUtils.getColumnIndexes(affectedTableCells);\n        const column = insertBefore ? columnIndexes.first : columnIndexes.last;\n        const table = affectedTableCells[0].findAncestor('table');\n        tableUtils.insertColumns(table, { columns: 1, at: insertBefore ? column : column + 1 });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/splitcellcommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n * ```ts\n * editor.execute( 'splitTableCellVertically' );\n * ```\n */\nexport default class SplitCellCommand extends Command {\n    /**\n     * Creates a new `SplitCellCommand` instance.\n     *\n     * @param editor The editor on which this command will be used.\n     * @param options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n     */\n    constructor(editor, options = {}) {\n        super(editor);\n        this.direction = options.direction || 'horizontally';\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length === 1;\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection)[0];\n        const isHorizontal = this.direction === 'horizontally';\n        if (isHorizontal) {\n            tableUtils.splitCellHorizontally(tableCell, 2);\n        }\n        else {\n            tableUtils.splitCellVertically(tableCell, 2);\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { default as TableWalker } from '../tablewalker';\nimport { createEmptyTableCell, updateNumericAttribute } from './common';\n/**\n * Returns a cropped table according to given dimensions.\n\n * To return a cropped table that starts at first row and first column and end in third row and column:\n *\n * ```ts\n * const croppedTable = cropTableToDimensions( table, {\n *   startRow: 1,\n *   endRow: 3,\n *   startColumn: 1,\n *   endColumn: 3\n * }, writer );\n * ```\n *\n * Calling the code above for the table below:\n *\n *        0   1   2   3   4                      0   1   2\n *      ┌───┬───┬───┬───┬───┐\n *   0  │ a │ b │ c │ d │ e │\n *      ├───┴───┤   ├───┴───┤                  ┌───┬───┬───┐\n *   1  │ f     │   │ g     │                  │   │   │ g │  0\n *      ├───┬───┴───┼───┬───┤   will return:   ├───┴───┼───┤\n *   2  │ h │ i     │ j │ k │                  │ i     │ j │  1\n *      ├───┤       ├───┤   │                  │       ├───┤\n *   3  │ l │       │ m │   │                  │       │ m │  2\n *      ├───┼───┬───┤   ├───┤                  └───────┴───┘\n *   4  │ n │ o │ p │   │ q │\n *      └───┴───┴───┴───┴───┘\n */\nexport function cropTableToDimensions(sourceTable, cropDimensions, writer) {\n    const { startRow, startColumn, endRow, endColumn } = cropDimensions;\n    // Create empty table with empty rows equal to crop height.\n    const croppedTable = writer.createElement('table');\n    const cropHeight = endRow - startRow + 1;\n    for (let i = 0; i < cropHeight; i++) {\n        writer.insertElement('tableRow', croppedTable, 'end');\n    }\n    const tableMap = [...new TableWalker(sourceTable, { startRow, endRow, startColumn, endColumn, includeAllSlots: true })];\n    // Iterate over source table slots (including empty - spanned - ones).\n    for (const { row: sourceRow, column: sourceColumn, cell: tableCell, isAnchor, cellAnchorRow, cellAnchorColumn } of tableMap) {\n        // Row index in cropped table.\n        const rowInCroppedTable = sourceRow - startRow;\n        const row = croppedTable.getChild(rowInCroppedTable);\n        // For empty slots: fill the gap with empty table cell.\n        if (!isAnchor) {\n            // But fill the gap only if the spanning cell is anchored outside cropped area.\n            // In the table from method jsdoc those cells are: \"c\" & \"f\".\n            if (cellAnchorRow < startRow || cellAnchorColumn < startColumn) {\n                createEmptyTableCell(writer, writer.createPositionAt(row, 'end'));\n            }\n        }\n        // Otherwise clone the cell with all children and trim if it exceeds cropped area.\n        else {\n            const tableCellCopy = writer.cloneElement(tableCell);\n            writer.append(tableCellCopy, row);\n            // Trim table if it exceeds cropped area.\n            // In the table from method jsdoc those cells are: \"g\" & \"m\".\n            trimTableCellIfNeeded(tableCellCopy, sourceRow, sourceColumn, endRow, endColumn, writer);\n        }\n    }\n    // Adjust heading rows & columns in cropped table if crop selection includes headings parts.\n    addHeadingsToCroppedTable(croppedTable, sourceTable, startRow, startColumn, writer);\n    return croppedTable;\n}\n/**\n * Returns slot info of cells that starts above and overlaps a given row.\n *\n * In a table below, passing `overlapRow = 3`\n *\n *     ┌───┬───┬───┬───┬───┐\n *  0  │ a │ b │ c │ d │ e │\n *     │   ├───┼───┼───┼───┤\n *  1  │   │ f │ g │ h │ i │\n *     ├───┤   ├───┼───┤   │\n *  2  │ j │   │ k │ l │   │\n *     │   │   │   ├───┼───┤\n *  3  │   │   │   │ m │ n │  <- overlap row to check\n *     ├───┼───┤   │   ├───│\n *  4  │ o │ p │   │   │ q │\n *     └───┴───┴───┴───┴───┘\n *\n * will return slot info for cells: \"j\", \"f\", \"k\".\n *\n * @param table The table to check.\n * @param overlapRow The index of the row to check.\n * @param startRow row to start analysis. Use it when it is known that the cells above that row will not overlap. Default value is 0.\n */\nexport function getVerticallyOverlappingCells(table, overlapRow, startRow = 0) {\n    const cells = [];\n    const tableWalker = new TableWalker(table, { startRow, endRow: overlapRow - 1 });\n    for (const slotInfo of tableWalker) {\n        const { row, cellHeight } = slotInfo;\n        const cellEndRow = row + cellHeight - 1;\n        if (row < overlapRow && overlapRow <= cellEndRow) {\n            cells.push(slotInfo);\n        }\n    }\n    return cells;\n}\n/**\n * Splits the table cell horizontally.\n *\n * @returns Created table cell, if any were created.\n */\nexport function splitHorizontally(tableCell, splitRow, writer) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = tableRow.index;\n    const rowspan = parseInt(tableCell.getAttribute('rowspan'));\n    const newRowspan = splitRow - rowIndex;\n    const newCellAttributes = {};\n    const newCellRowSpan = rowspan - newRowspan;\n    if (newCellRowSpan > 1) {\n        newCellAttributes.rowspan = newCellRowSpan;\n    }\n    const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n    if (colspan > 1) {\n        newCellAttributes.colspan = colspan;\n    }\n    const startRow = rowIndex;\n    const endRow = startRow + newRowspan;\n    const tableMap = [...new TableWalker(table, { startRow, endRow, includeAllSlots: true })];\n    let newCell = null;\n    let columnIndex;\n    for (const tableSlot of tableMap) {\n        const { row, column, cell } = tableSlot;\n        if (cell === tableCell && columnIndex === undefined) {\n            columnIndex = column;\n        }\n        if (columnIndex !== undefined && columnIndex === column && row === endRow) {\n            newCell = createEmptyTableCell(writer, tableSlot.getPositionBefore(), newCellAttributes);\n        }\n    }\n    // Update the rowspan attribute after updating table.\n    updateNumericAttribute('rowspan', newRowspan, tableCell, writer);\n    return newCell;\n}\n/**\n * Returns slot info of cells that starts before and overlaps a given column.\n *\n * In a table below, passing `overlapColumn = 3`\n *\n *    0   1   2   3   4\n *  ┌───────┬───────┬───┐\n *  │ a     │ b     │ c │\n *  │───┬───┴───────┼───┤\n *  │ d │ e         │ f │\n *  ├───┼───┬───────┴───┤\n *  │ g │ h │ i         │\n *  ├───┼───┼───┬───────┤\n *  │ j │ k │ l │ m     │\n *  ├───┼───┴───┼───┬───┤\n *  │ n │ o     │ p │ q │\n *  └───┴───────┴───┴───┘\n *                ^\n *                Overlap column to check\n *\n * will return slot info for cells: \"b\", \"e\", \"i\".\n *\n * @param table The table to check.\n * @param overlapColumn The index of the column to check.\n */\nexport function getHorizontallyOverlappingCells(table, overlapColumn) {\n    const cellsToSplit = [];\n    const tableWalker = new TableWalker(table);\n    for (const slotInfo of tableWalker) {\n        const { column, cellWidth } = slotInfo;\n        const cellEndColumn = column + cellWidth - 1;\n        if (column < overlapColumn && overlapColumn <= cellEndColumn) {\n            cellsToSplit.push(slotInfo);\n        }\n    }\n    return cellsToSplit;\n}\n/**\n * Splits the table cell vertically.\n *\n * @param columnIndex The table cell column index.\n * @param splitColumn The index of column to split cell on.\n * @returns Created table cell.\n */\nexport function splitVertically(tableCell, columnIndex, splitColumn, writer) {\n    const colspan = parseInt(tableCell.getAttribute('colspan'));\n    const newColspan = splitColumn - columnIndex;\n    const newCellAttributes = {};\n    const newCellColSpan = colspan - newColspan;\n    if (newCellColSpan > 1) {\n        newCellAttributes.colspan = newCellColSpan;\n    }\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    if (rowspan > 1) {\n        newCellAttributes.rowspan = rowspan;\n    }\n    const newCell = createEmptyTableCell(writer, writer.createPositionAfter(tableCell), newCellAttributes);\n    // Update the colspan attribute after updating table.\n    updateNumericAttribute('colspan', newColspan, tableCell, writer);\n    return newCell;\n}\n/**\n * Adjusts table cell dimensions to not exceed limit row and column.\n *\n * If table cell width (or height) covers a column (or row) that is after a limit column (or row)\n * this method will trim \"colspan\" (or \"rowspan\") attribute so the table cell will fit in a defined limits.\n */\nexport function trimTableCellIfNeeded(tableCell, cellRow, cellColumn, limitRow, limitColumn, writer) {\n    const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const endColumn = cellColumn + colspan - 1;\n    if (endColumn > limitColumn) {\n        const trimmedSpan = limitColumn - cellColumn + 1;\n        updateNumericAttribute('colspan', trimmedSpan, tableCell, writer, 1);\n    }\n    const endRow = cellRow + rowspan - 1;\n    if (endRow > limitRow) {\n        const trimmedSpan = limitRow - cellRow + 1;\n        updateNumericAttribute('rowspan', trimmedSpan, tableCell, writer, 1);\n    }\n}\n/**\n * Sets proper heading attributes to a cropped table.\n */\nfunction addHeadingsToCroppedTable(croppedTable, sourceTable, startRow, startColumn, writer) {\n    const headingRows = parseInt(sourceTable.getAttribute('headingRows') || '0');\n    if (headingRows > 0) {\n        const headingRowsInCrop = headingRows - startRow;\n        updateNumericAttribute('headingRows', headingRowsInCrop, croppedTable, writer, 0);\n    }\n    const headingColumns = parseInt(sourceTable.getAttribute('headingColumns') || '0');\n    if (headingColumns > 0) {\n        const headingColumnsInCrop = headingColumns - startColumn;\n        updateNumericAttribute('headingColumns', headingColumnsInCrop, croppedTable, writer, 0);\n    }\n}\n/**\n * Removes columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+----+----+----+\n *     | 00 | 01      | 03 | 04      | 06 |\n *     +----+----+----+----+         +----+\n *     | 10 | 11      | 13 |         | 16 |\n *     +----+----+----+----+----+----+----+\n *     | 20 | 21      | 23 | 24      | 26 |\n *     +----+----+----+----+----+----+----+\n *                  ^--- empty ---^\n *\n * Will remove columns 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a column from a table use {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`}.\n *\n * @internal\n * @returns True if removed some columns.\n */\nexport function removeEmptyColumns(table, tableUtils) {\n    const width = tableUtils.getColumns(table);\n    const columnsMap = new Array(width).fill(0);\n    for (const { column } of new TableWalker(table)) {\n        columnsMap[column]++;\n    }\n    const emptyColumns = columnsMap.reduce((result, cellsCount, column) => {\n        return cellsCount ? result : [...result, column];\n    }, []);\n    if (emptyColumns.length > 0) {\n        // Remove only last empty column because it will recurrently trigger removing empty rows.\n        const emptyColumn = emptyColumns[emptyColumns.length - 1];\n        // @if CK_DEBUG_TABLE // console.log( `Removing empty column: ${ emptyColumn }.` );\n        tableUtils.removeColumns(table, { at: emptyColumn });\n        return true;\n    }\n    return false;\n}\n/**\n * Removes rows that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+\n *     | 00 | 01 | 02 |\n *     +----+----+----+\n *     | 10 | 11 | 12 |\n *     +    +    +    +\n *     |    |    |    | <-- empty\n *     +----+----+----+\n *     | 30 | 31 | 32 |\n *     +----+----+----+\n *     | 40      | 42 |\n *     +         +    +\n *     |         |    | <-- empty\n *     +----+----+----+\n *     | 60 | 61 | 62 |\n *     +----+----+----+\n *\n * Will remove rows 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a row from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`}.\n *\n * @internal\n * @returns True if removed some rows.\n */\nexport function removeEmptyRows(table, tableUtils) {\n    const emptyRows = [];\n    const tableRowCount = tableUtils.getRows(table);\n    for (let rowIndex = 0; rowIndex < tableRowCount; rowIndex++) {\n        const tableRow = table.getChild(rowIndex);\n        if (tableRow.isEmpty) {\n            emptyRows.push(rowIndex);\n        }\n    }\n    if (emptyRows.length > 0) {\n        // Remove only last empty row because it will recurrently trigger removing empty columns.\n        const emptyRow = emptyRows[emptyRows.length - 1];\n        // @if CK_DEBUG_TABLE // console.log( `Removing empty row: ${ emptyRow }.` );\n        tableUtils.removeRows(table, { at: emptyRow });\n        return true;\n    }\n    return false;\n}\n/**\n * Removes rows and columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+\n *     | 00      | 02      |\n *     +----+----+         +\n *     | 10      |         |\n *     +----+----+----+----+\n *     | 20      | 22 | 23 |\n *     +         +    +    +\n *     |         |    |    | <-- empty row\n *     +----+----+----+----+\n *             ^--- empty column\n *\n * Will remove row 3 and column 1.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a rows from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`} and\n * {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`} to remove a column.\n *\n * @internal\n */\nexport function removeEmptyRowsColumns(table, tableUtils) {\n    const removedColumns = removeEmptyColumns(table, tableUtils);\n    // If there was some columns removed then cleaning empty rows was already triggered.\n    if (!removedColumns) {\n        removeEmptyRows(table, tableUtils);\n    }\n}\n/**\n * Returns adjusted last row index if selection covers part of a row with empty slots (spanned by other cells).\n * The `dimensions.lastRow` is equal to last row index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *        +---+---+---+---+\n *      0 | a | b | c | d |\n *        +   +   +---+---+\n *      1 |   | e | f | g |\n *        +   +---+   +---+\n *      2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n *        +   +   +   +   +    so we need to return 3, not 2\n *      3 |   |   |   |   |\n *        +---+---+---+---+\n *\n * @returns Adjusted last row index.\n */\nexport function adjustLastRowIndex(table, dimensions) {\n    const lastRowMap = Array.from(new TableWalker(table, {\n        startColumn: dimensions.firstColumn,\n        endColumn: dimensions.lastColumn,\n        row: dimensions.lastRow\n    }));\n    const everyCellHasSingleRowspan = lastRowMap.every(({ cellHeight }) => cellHeight === 1);\n    // It is a \"flat\" row, so the last row index is OK.\n    if (everyCellHasSingleRowspan) {\n        return dimensions.lastRow;\n    }\n    // Otherwise get any cell's rowspan and adjust the last row index.\n    const rowspanAdjustment = lastRowMap[0].cellHeight - 1;\n    return dimensions.lastRow + rowspanAdjustment;\n}\n/**\n * Returns adjusted last column index if selection covers part of a column with empty slots (spanned by other cells).\n * The `dimensions.lastColumn` is equal to last column index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *       0   1   2   3\n *     +---+---+---+---+\n *     | a             |\n *     +---+---+---+---+\n *     | b | c | d     |\n *     +---+---+---+---+\n *     | e     | f     |\n *     +---+---+---+---+\n *     | g | h         |\n *     +---+---+---+---+\n *               ^\n *              last column, each cell has colspan = 2, so we need to return 3, not 2\n *\n * @returns Adjusted last column index.\n */\nexport function adjustLastColumnIndex(table, dimensions) {\n    const lastColumnMap = Array.from(new TableWalker(table, {\n        startRow: dimensions.firstRow,\n        endRow: dimensions.lastRow,\n        column: dimensions.lastColumn\n    }));\n    const everyCellHasSingleColspan = lastColumnMap.every(({ cellWidth }) => cellWidth === 1);\n    // It is a \"flat\" column, so the last column index is OK.\n    if (everyCellHasSingleColspan) {\n        return dimensions.lastColumn;\n    }\n    // Otherwise get any cell's colspan and adjust the last column index.\n    const colspanAdjustment = lastColumnMap[0].cellWidth - 1;\n    return dimensions.lastColumn + colspanAdjustment;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core';\nimport TableWalker from '../tablewalker';\nimport { isHeadingColumnCell } from '../utils/common';\nimport { removeEmptyRowsColumns } from '../utils/structure';\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n * ```ts\n * editor.execute( 'mergeTableCellRight' );\n * ```\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n */\nexport default class MergeCellCommand extends Command {\n    /**\n     * Creates a new `MergeCellCommand` instance.\n     *\n     * @param editor The editor on which this command will be used.\n     * @param options.direction Indicates which cell to merge with the currently selected one.\n     * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n     */\n    constructor(editor, options) {\n        super(editor);\n        this.direction = options.direction;\n        this.isHorizontal = this.direction == 'right' || this.direction == 'left';\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const cellToMerge = this._getMergeableCell();\n        this.value = cellToMerge;\n        this.isEnabled = !!cellToMerge;\n    }\n    /**\n     * Executes the command.\n     *\n     * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n     *\n     * @fires execute\n     */\n    execute() {\n        const model = this.editor.model;\n        const doc = model.document;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getTableCellsContainingSelection(doc.selection)[0];\n        const cellToMerge = this.value;\n        const direction = this.direction;\n        model.change(writer => {\n            const isMergeNext = direction == 'right' || direction == 'down';\n            // The merge mechanism is always the same so sort cells to be merged.\n            const cellToExpand = (isMergeNext ? tableCell : cellToMerge);\n            const cellToRemove = (isMergeNext ? cellToMerge : tableCell);\n            // Cache the parent of cell to remove for later check.\n            const removedTableCellRow = cellToRemove.parent;\n            mergeTableCells(cellToRemove, cellToExpand, writer);\n            const spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n            const cellSpan = parseInt(tableCell.getAttribute(spanAttribute) || '1');\n            const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || '1');\n            // Update table cell span attribute and merge set selection on merged contents.\n            writer.setAttribute(spanAttribute, cellSpan + cellToMergeSpan, cellToExpand);\n            writer.setSelection(writer.createRangeIn(cellToExpand));\n            const tableUtils = this.editor.plugins.get('TableUtils');\n            const table = removedTableCellRow.findAncestor('table');\n            // Remove empty rows and columns after merging.\n            removeEmptyRowsColumns(table, tableUtils);\n        });\n    }\n    /**\n     * Returns a cell that can be merged with the current cell depending on the command's direction.\n     */\n    _getMergeableCell() {\n        const model = this.editor.model;\n        const doc = model.document;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getTableCellsContainingSelection(doc.selection)[0];\n        if (!tableCell) {\n            return;\n        }\n        // First get the cell on proper direction.\n        const cellToMerge = this.isHorizontal ?\n            getHorizontalCell(tableCell, this.direction, tableUtils) :\n            getVerticalCell(tableCell, this.direction, tableUtils);\n        if (!cellToMerge) {\n            return;\n        }\n        // If found check if the span perpendicular to merge direction is equal on both cells.\n        const spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n        const span = parseInt(tableCell.getAttribute(spanAttribute) || '1');\n        const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || '1');\n        if (cellToMergeSpan === span) {\n            return cellToMerge;\n        }\n    }\n}\n/**\n * Returns the cell that can be merged horizontally.\n */\nfunction getHorizontalCell(tableCell, direction, tableUtils) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n    const hasHeadingColumns = (table.getAttribute('headingColumns') || 0) > 0;\n    if (!horizontalCell) {\n        return;\n    }\n    // Sort cells:\n    const cellOnLeft = (direction == 'right' ? tableCell : horizontalCell);\n    const cellOnRight = (direction == 'right' ? horizontalCell : tableCell);\n    // Get their column indexes:\n    const { column: leftCellColumn } = tableUtils.getCellLocation(cellOnLeft);\n    const { column: rightCellColumn } = tableUtils.getCellLocation(cellOnRight);\n    const leftCellSpan = parseInt(cellOnLeft.getAttribute('colspan') || '1');\n    const isCellOnLeftInHeadingColumn = isHeadingColumnCell(tableUtils, cellOnLeft);\n    const isCellOnRightInHeadingColumn = isHeadingColumnCell(tableUtils, cellOnRight);\n    // We cannot merge heading columns cells with regular cells.\n    if (hasHeadingColumns && isCellOnLeftInHeadingColumn != isCellOnRightInHeadingColumn) {\n        return;\n    }\n    // The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n    const cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n    // If the right cell's column index is different it means that there are rowspanned cells between them.\n    return cellsAreTouching ? horizontalCell : undefined;\n}\n/**\n * Returns the cell that can be merged vertically.\n */\nfunction getVerticalCell(tableCell, direction, tableUtils) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = table.getChildIndex(tableRow);\n    // Don't search for mergeable cell if direction points out of the table.\n    if ((direction == 'down' && rowIndex === tableUtils.getRows(table) - 1) || (direction == 'up' && rowIndex === 0)) {\n        return null;\n    }\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const headingRows = table.getAttribute('headingRows') || 0;\n    const isMergeWithBodyCell = direction == 'down' && (rowIndex + rowspan) === headingRows;\n    const isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n    // Don't search for mergeable cell if direction points out of the current table section.\n    if (headingRows && (isMergeWithBodyCell || isMergeWithHeadCell)) {\n        return null;\n    }\n    const currentCellRowSpan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n    const tableMap = [...new TableWalker(table, { endRow: rowOfCellToMerge })];\n    const currentCellData = tableMap.find(value => value.cell === tableCell);\n    const mergeColumn = currentCellData.column;\n    const cellToMergeData = tableMap.find(({ row, cellHeight, column }) => {\n        if (column !== mergeColumn) {\n            return false;\n        }\n        if (direction == 'down') {\n            // If merging a cell below the mergeRow is already calculated.\n            return row === rowOfCellToMerge;\n        }\n        else {\n            // If merging a cell above calculate if it spans to mergeRow.\n            return rowOfCellToMerge === row + cellHeight;\n        }\n    });\n    return cellToMergeData && cellToMergeData.cell ? cellToMergeData.cell : null;\n}\n/**\n * Merges two table cells. It will ensure that after merging cells with an empty paragraph, the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have the contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */\nfunction mergeTableCells(cellToRemove, cellToExpand, writer) {\n    if (!isEmpty(cellToRemove)) {\n        if (isEmpty(cellToExpand)) {\n            writer.remove(writer.createRangeIn(cellToExpand));\n        }\n        writer.move(writer.createRangeIn(cellToRemove), writer.createPositionAt(cellToExpand, 'end'));\n    }\n    // Remove merged table cell.\n    writer.remove(cellToRemove);\n}\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */\nfunction isEmpty(tableCell) {\n    const firstTableChild = tableCell.getChild(0);\n    return tableCell.childCount == 1 && firstTableChild.is('element', 'paragraph') && firstTableChild.isEmpty;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/removerowcommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableRow' );\n * ```\n */\nexport default class RemoveRowCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        const firstCell = selectedCells[0];\n        if (firstCell) {\n            const table = firstCell.findAncestor('table');\n            const tableRowCount = tableUtils.getRows(table);\n            const lastRowIndex = tableRowCount - 1;\n            const selectedRowIndexes = tableUtils.getRowIndexes(selectedCells);\n            const areAllRowsSelected = selectedRowIndexes.first === 0 && selectedRowIndexes.last === lastRowIndex;\n            // Disallow selecting whole table -> delete whole table should be used instead.\n            this.isEnabled = !areAllRowsSelected;\n        }\n        else {\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const removedRowIndexes = tableUtils.getRowIndexes(referenceCells);\n        const firstCell = referenceCells[0];\n        const table = firstCell.findAncestor('table');\n        const columnIndexToFocus = tableUtils.getCellLocation(firstCell).column;\n        model.change(writer => {\n            const rowsToRemove = removedRowIndexes.last - removedRowIndexes.first + 1;\n            tableUtils.removeRows(table, {\n                at: removedRowIndexes.first,\n                rows: rowsToRemove\n            });\n            const cellToFocus = getCellToFocus(table, removedRowIndexes.first, columnIndexToFocus, tableUtils.getRows(table));\n            writer.setSelection(writer.createPositionAt(cellToFocus, 0));\n        });\n    }\n}\n/**\n * Returns a cell that should be focused before removing the row, belonging to the same column as the currently focused cell.\n * - If the row was not the last one, the cell to focus will be in the row that followed it (before removal).\n * - If the row was the last one, the cell to focus will be in the row that preceded it (before removal).\n */\nfunction getCellToFocus(table, removedRowIndex, columnToFocus, tableRowCount) {\n    // Don't go beyond last row's index.\n    const row = table.getChild(Math.min(removedRowIndex, tableRowCount - 1));\n    // Default to first table cell.\n    let cellToFocus = row.getChild(0);\n    let column = 0;\n    for (const tableCell of row.getChildren()) {\n        if (column > columnToFocus) {\n            return cellToFocus;\n        }\n        cellToFocus = tableCell;\n        column += parseInt(tableCell.getAttribute('colspan') || '1');\n    }\n    return cellToFocus;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/removecolumncommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport TableWalker from '../tablewalker';\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableColumn' );\n * ```\n */\nexport default class RemoveColumnCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        const firstCell = selectedCells[0];\n        if (firstCell) {\n            const table = firstCell.findAncestor('table');\n            const tableColumnCount = tableUtils.getColumns(table);\n            const { first, last } = tableUtils.getColumnIndexes(selectedCells);\n            this.isEnabled = last - first < (tableColumnCount - 1);\n        }\n        else {\n            this.isEnabled = false;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const [firstCell, lastCell] = getBoundaryCells(this.editor.model.document.selection, tableUtils);\n        const table = firstCell.parent.parent;\n        // Cache the table before removing or updating colspans.\n        const tableMap = [...new TableWalker(table)];\n        // Store column indexes of removed columns.\n        const removedColumnIndexes = {\n            first: tableMap.find(value => value.cell === firstCell).column,\n            last: tableMap.find(value => value.cell === lastCell).column\n        };\n        const cellToFocus = getCellToFocus(tableMap, firstCell, lastCell, removedColumnIndexes);\n        this.editor.model.change(writer => {\n            const columnsToRemove = removedColumnIndexes.last - removedColumnIndexes.first + 1;\n            tableUtils.removeColumns(table, {\n                at: removedColumnIndexes.first,\n                columns: columnsToRemove\n            });\n            writer.setSelection(writer.createPositionAt(cellToFocus, 0));\n        });\n    }\n}\n/**\n * Returns a proper table cell to focus after removing a column.\n * - selection is on last table cell it will return previous cell.\n */\nfunction getCellToFocus(tableMap, firstCell, lastCell, removedColumnIndexes) {\n    const colspan = parseInt(lastCell.getAttribute('colspan') || '1');\n    // If the table cell is spanned over 2+ columns - it will be truncated so the selection should\n    // stay in that cell.\n    if (colspan > 1) {\n        return lastCell;\n    }\n    // Normally, look for the cell in the same row that precedes the first cell to put selection there (\"column on the left\").\n    // If the deleted column is the first column of the table, there will be no predecessor: use the cell\n    // from the column that follows then (also in the same row).\n    else if (firstCell.previousSibling || lastCell.nextSibling) {\n        return lastCell.nextSibling || firstCell.previousSibling;\n    }\n    // It can happen that table cells have no siblings in a row, for instance, when there are row spans\n    // in the table (in the previous row). Then just look for the closest cell that is in a column\n    // that will not be removed to put the selection there.\n    else {\n        // Look for any cell in a column that precedes the first removed column.\n        if (removedColumnIndexes.first) {\n            return tableMap.reverse().find(({ column }) => {\n                return column < removedColumnIndexes.first;\n            }).cell;\n        }\n        // If the first removed column is the first column of the table, then\n        // look for any cell that is in a column that follows the last removed column.\n        else {\n            return tableMap.reverse().find(({ column }) => {\n                return column > removedColumnIndexes.last;\n            }).cell;\n        }\n    }\n}\n/**\n * Returns helper object returning the first and the last cell contained in given selection, based on DOM order.\n */\nfunction getBoundaryCells(selection, tableUtils) {\n    const referenceCells = tableUtils.getSelectionAffectedTableCells(selection);\n    const firstCell = referenceCells[0];\n    const lastCell = referenceCells.pop();\n    const returnValue = [firstCell, lastCell];\n    return firstCell.isBefore(lastCell) ? returnValue : returnValue.reverse();\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/setheaderrowcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { updateNumericAttribute } from '../utils/common';\nimport { getVerticallyOverlappingCells, splitHorizontally } from '../utils/structure';\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n * ```ts\n * editor.execute( 'setTableRowHeader' );\n * ```\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n */\nexport default class SetHeaderRowCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const isInTable = selectedCells.length > 0;\n        this.isEnabled = isInTable;\n        this.value = isInTable && selectedCells.every(cell => this._isInHeading(cell, cell.parent.parent));\n    }\n    /**\n     * Executes the command.\n     *\n     * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n     *\n     * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n     *\n     * @fires execute\n     * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header rows according to\n     * the `forceValue` parameter instead of the current model state.\n     */\n    execute(options = {}) {\n        if (options.forceValue === this.value) {\n            return;\n        }\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const table = selectedCells[0].findAncestor('table');\n        const { first, last } = tableUtils.getRowIndexes(selectedCells);\n        const headingRowsToSet = this.value ? first : last + 1;\n        const currentHeadingRows = table.getAttribute('headingRows') || 0;\n        model.change(writer => {\n            if (headingRowsToSet) {\n                // Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n                // Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n                const startRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n                const overlappingCells = getVerticallyOverlappingCells(table, headingRowsToSet, startRow);\n                for (const { cell } of overlappingCells) {\n                    splitHorizontally(cell, headingRowsToSet, writer);\n                }\n            }\n            updateNumericAttribute('headingRows', headingRowsToSet, table, writer, 0);\n        });\n    }\n    /**\n     * Checks if a table cell is in the heading section.\n     */\n    _isInHeading(tableCell, table) {\n        const headingRows = parseInt(table.getAttribute('headingRows') || '0');\n        return !!headingRows && tableCell.parent.index < headingRows;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/setheadercolumncommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { isHeadingColumnCell, updateNumericAttribute } from '../utils/common';\nimport { getHorizontallyOverlappingCells, splitVertically } from '../utils/structure';\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n * ```ts\n * editor.execute( 'setTableColumnHeader' );\n * ```\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n */\nexport default class SetHeaderColumnCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const isInTable = selectedCells.length > 0;\n        this.isEnabled = isInTable;\n        this.value = isInTable && selectedCells.every(cell => isHeadingColumnCell(tableUtils, cell));\n    }\n    /**\n     * Executes the command.\n     *\n     * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n     *\n     * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n     *\n     * @fires execute\n     * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header columns according to\n     * the `forceValue` parameter instead of the current model state.\n     */\n    execute(options = {}) {\n        if (options.forceValue === this.value) {\n            return;\n        }\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const table = selectedCells[0].findAncestor('table');\n        const { first, last } = tableUtils.getColumnIndexes(selectedCells);\n        const headingColumnsToSet = this.value ? first : last + 1;\n        model.change(writer => {\n            if (headingColumnsToSet) {\n                // Changing heading columns requires to check if any of a heading cell is overlapping horizontally the table head.\n                // Any table cell that has a colspan attribute > 1 will not exceed the table head so we need to fix it in columns before.\n                const overlappingCells = getHorizontallyOverlappingCells(table, headingColumnsToSet);\n                for (const { cell, column } of overlappingCells) {\n                    splitVertically(cell, column, headingColumnsToSet, writer);\n                }\n            }\n            updateNumericAttribute('headingColumns', headingColumnsToSet, table, writer, 0);\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecolumnresize/constants\n */\n/**\n * The minimum column width given as a percentage value. Used in situations when the table is not yet rendered, so it is impossible to\n * calculate how many percentage of the table width would be {@link ~COLUMN_MIN_WIDTH_IN_PIXELS minimum column width in pixels}.\n */\nexport const COLUMN_MIN_WIDTH_AS_PERCENTAGE = 5;\n/**\n * The minimum column width in pixels when the maximum table width is known.\n */\nexport const COLUMN_MIN_WIDTH_IN_PIXELS = 40;\n/**\n * Determines how many digits after the decimal point are used to store the column width as a percentage value.\n */\nexport const COLUMN_WIDTH_PRECISION = 2;\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { global } from 'ckeditor5/src/utils';\nimport { COLUMN_WIDTH_PRECISION, COLUMN_MIN_WIDTH_AS_PERCENTAGE, COLUMN_MIN_WIDTH_IN_PIXELS } from './constants';\n/**\n * Returns all the inserted or changed table model elements in a given change set. Only the tables\n * with 'columnsWidth' attribute are taken into account. The returned set may be empty.\n *\n * Most notably if an entire table is removed it will not be included in returned set.\n *\n * @param model The model to collect the affected elements from.\n * @returns A set of table model elements.\n */\nexport function getChangedResizedTables(model) {\n    const affectedTables = new Set();\n    for (const change of model.document.differ.getChanges()) {\n        let referencePosition = null;\n        // Checks if the particular change from the differ is:\n        // - an insertion or removal of a table, a row or a cell,\n        // - an attribute change on a table, a row or a cell.\n        switch (change.type) {\n            case 'insert':\n                referencePosition = ['table', 'tableRow', 'tableCell'].includes(change.name) ?\n                    change.position :\n                    null;\n                break;\n            case 'remove':\n                // If the whole table is removed, there's no need to update its column widths (#12201).\n                referencePosition = ['tableRow', 'tableCell'].includes(change.name) ?\n                    change.position :\n                    null;\n                break;\n            case 'attribute':\n                if (change.range.start.nodeAfter) {\n                    referencePosition = ['table', 'tableRow', 'tableCell'].includes(change.range.start.nodeAfter.name) ?\n                        change.range.start :\n                        null;\n                }\n                break;\n        }\n        if (!referencePosition) {\n            continue;\n        }\n        const tableNode = (referencePosition.nodeAfter && referencePosition.nodeAfter.is('element', 'table')) ?\n            referencePosition.nodeAfter : referencePosition.findAncestor('table');\n        // We iterate over the whole table looking for the nested tables that are also affected.\n        for (const node of model.createRangeOn(tableNode).getItems()) {\n            if (!node.is('element', 'table')) {\n                continue;\n            }\n            if (!getColumnGroupElement(node)) {\n                continue;\n            }\n            affectedTables.add(node);\n        }\n    }\n    return affectedTables;\n}\n/**\n * Calculates the percentage of the minimum column width given in pixels for a given table.\n *\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The minimal column width in percentage.\n */\nexport function getColumnMinWidthAsPercentage(modelTable, editor) {\n    return COLUMN_MIN_WIDTH_IN_PIXELS * 100 / getTableWidthInPixels(modelTable, editor);\n}\n/**\n * Calculates the table width in pixels.\n *\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The width of the table in pixels.\n */\nexport function getTableWidthInPixels(modelTable, editor) {\n    // It is possible for a table to not have a <tbody> element - see #11878.\n    const referenceElement = getChildrenViewElement(modelTable, 'tbody', editor) || getChildrenViewElement(modelTable, 'thead', editor);\n    const domReferenceElement = editor.editing.view.domConverter.mapViewToDom(referenceElement);\n    return getElementWidthInPixels(domReferenceElement);\n}\n/**\n * Returns the a view element with a given name that is nested directly in a `<table>` element\n * related to a given `modelTable`.\n *\n * @param elementName Name of a view to be looked for, e.g. `'colgroup`', `'thead`'.\n * @returns Matched view or `undefined` otherwise.\n */\nfunction getChildrenViewElement(modelTable, elementName, editor) {\n    const viewFigure = editor.editing.mapper.toViewElement(modelTable);\n    const viewTable = [...viewFigure.getChildren()]\n        .find((node) => node.is('element', 'table'));\n    return [...viewTable.getChildren()]\n        .find((node) => node.is('element', elementName));\n}\n/**\n * Returns the computed width (in pixels) of the DOM element without padding and borders.\n *\n * @param domElement A DOM element.\n * @returns The width of the DOM element in pixels.\n */\nexport function getElementWidthInPixels(domElement) {\n    const styles = global.window.getComputedStyle(domElement);\n    // In the 'border-box' box sizing algorithm, the element's width\n    // already includes the padding and border width (#12335).\n    if (styles.boxSizing === 'border-box') {\n        return parseFloat(styles.width) -\n            parseFloat(styles.paddingLeft) -\n            parseFloat(styles.paddingRight) -\n            parseFloat(styles.borderLeftWidth) -\n            parseFloat(styles.borderRightWidth);\n    }\n    else {\n        return parseFloat(styles.width);\n    }\n}\n/**\n * Returns the column indexes on the left and right edges of a cell. They differ if the cell spans\n * across multiple columns.\n *\n * @param cell A table cell model element.\n * @param tableUtils The Table Utils plugin instance.\n * @returns An object containing the indexes of the left and right edges of the cell.\n */\nexport function getColumnEdgesIndexes(cell, tableUtils) {\n    const cellColumnIndex = tableUtils.getCellLocation(cell).column;\n    const cellWidth = cell.getAttribute('colspan') || 1;\n    return {\n        leftEdge: cellColumnIndex,\n        rightEdge: cellColumnIndex + cellWidth - 1\n    };\n}\n/**\n * Rounds the provided value to a fixed-point number with defined number of digits after the decimal point.\n *\n * @param value A number to be rounded.\n * @returns The rounded number.\n */\nexport function toPrecision(value) {\n    const multiplier = Math.pow(10, COLUMN_WIDTH_PRECISION);\n    const number = typeof value === 'number' ? value : parseFloat(value);\n    return Math.round(number * multiplier) / multiplier;\n}\n/**\n * Clamps the number within the inclusive lower (min) and upper (max) bounds. Returned number is rounded using the\n * {@link ~toPrecision `toPrecision()`} function.\n *\n * @param number A number to be clamped.\n * @param min A lower bound.\n * @param max An upper bound.\n * @returns The clamped number.\n */\nexport function clamp(number, min, max) {\n    if (number <= min) {\n        return toPrecision(min);\n    }\n    if (number >= max) {\n        return toPrecision(max);\n    }\n    return toPrecision(number);\n}\n/**\n * Creates an array with defined length and fills all elements with defined value.\n *\n * @param length The length of the array.\n * @param value The value to fill the array with.\n * @returns An array with defined length and filled with defined value.\n */\nexport function createFilledArray(length, value) {\n    return Array(length).fill(value);\n}\n/**\n * Sums all array values that can be parsed to a float.\n *\n * @param array An array of numbers.\n * @returns The sum of all array values.\n */\nexport function sumArray(array) {\n    return array\n        .map(value => typeof value === 'number' ? value : parseFloat(value))\n        .filter(value => !Number.isNaN(value))\n        .reduce((result, item) => result + item, 0);\n}\n/**\n * Makes sure that the sum of the widths from all columns is 100%. If the sum of all the widths is not equal 100%, all the widths are\n * changed proportionally so that they all sum back to 100%. If there are columns without specified width, the amount remaining\n * after assigning the known widths will be distributed equally between them.\n *\n * @param columnWidths An array of column widths.\n * @returns An array of column widths guaranteed to sum up to 100%.\n */\nexport function normalizeColumnWidths(columnWidths) {\n    const widths = columnWidths.map(width => {\n        if (width === 'auto') {\n            return width;\n        }\n        return parseFloat(width.replace('%', ''));\n    });\n    let normalizedWidths = calculateMissingColumnWidths(widths);\n    const totalWidth = sumArray(normalizedWidths);\n    if (totalWidth !== 100) {\n        normalizedWidths = normalizedWidths\n            // Adjust all the columns proportionally.\n            .map(width => toPrecision(width * 100 / totalWidth))\n            // Due to rounding of numbers it may happen that the sum of the widths of all columns will not be exactly 100%.\n            // Therefore, the width of the last column is explicitly adjusted (narrowed or expanded), since all the columns\n            // have been proportionally changed already.\n            .map((columnWidth, columnIndex, width) => {\n            const isLastColumn = columnIndex === width.length - 1;\n            if (!isLastColumn) {\n                return columnWidth;\n            }\n            const totalWidth = sumArray(width);\n            return toPrecision(columnWidth + 100 - totalWidth);\n        });\n    }\n    return normalizedWidths.map(width => width + '%');\n}\n/**\n * Initializes the column widths by parsing the attribute value and calculating the uninitialized column widths. The special value 'auto'\n * indicates that width for the column must be calculated. The width of such uninitialized column is calculated as follows:\n * - If there is enough free space in the table for all uninitialized columns to have at least the minimum allowed width for all of them,\n *   then set this width equally for all uninitialized columns.\n * - Otherwise, just set the minimum allowed width for all uninitialized columns. The sum of all column widths will be greater than 100%,\n *   but then it will be adjusted proportionally to 100% in {@link #normalizeColumnWidths `normalizeColumnWidths()`}.\n *\n * @param columnWidths An array of column widths.\n * @returns An array with 'auto' values replaced with calculated widths.\n */\nfunction calculateMissingColumnWidths(columnWidths) {\n    const numberOfUninitializedColumns = columnWidths.filter(columnWidth => columnWidth === 'auto').length;\n    if (numberOfUninitializedColumns === 0) {\n        return columnWidths.map(columnWidth => toPrecision(columnWidth));\n    }\n    const totalWidthOfInitializedColumns = sumArray(columnWidths);\n    const widthForUninitializedColumn = Math.max((100 - totalWidthOfInitializedColumns) / numberOfUninitializedColumns, COLUMN_MIN_WIDTH_AS_PERCENTAGE);\n    return columnWidths\n        .map(columnWidth => columnWidth === 'auto' ? widthForUninitializedColumn : columnWidth)\n        .map(columnWidth => toPrecision(columnWidth));\n}\n/**\n * Calculates the total horizontal space taken by the cell. That includes:\n *  * width,\n *  * left and red padding,\n *  * border width.\n *\n * @param domCell A DOM cell element.\n * @returns Width in pixels without `px` at the end.\n */\nexport function getDomCellOuterWidth(domCell) {\n    const styles = global.window.getComputedStyle(domCell);\n    // In the 'border-box' box sizing algorithm, the element's width\n    // already includes the padding and border width (#12335).\n    if (styles.boxSizing === 'border-box') {\n        return parseInt(styles.width);\n    }\n    else {\n        return parseFloat(styles.width) +\n            parseFloat(styles.paddingLeft) +\n            parseFloat(styles.paddingRight) +\n            parseFloat(styles.borderWidth);\n    }\n}\n/**\n * Updates column elements to match columns widths.\n *\n * @param columns\n * @param tableColumnGroup\n * @param normalizedWidths\n * @param writer\n */\nexport function updateColumnElements(columns, tableColumnGroup, normalizedWidths, writer) {\n    for (let i = 0; i < Math.max(normalizedWidths.length, columns.length); i++) {\n        const column = columns[i];\n        const columnWidth = normalizedWidths[i];\n        if (!columnWidth) {\n            // Number of `<tableColumn>` elements exceeds actual number of columns.\n            writer.remove(column);\n        }\n        else if (!column) {\n            // There is fewer `<tableColumn>` elements than actual columns.\n            writer.appendElement('tableColumn', { columnWidth }, tableColumnGroup);\n        }\n        else {\n            // Update column width.\n            writer.setAttribute('columnWidth', columnWidth, column);\n        }\n    }\n}\n/**\n * Returns a 'tableColumnGroup' element from the 'table'.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns A 'tableColumnGroup' element.\n */\nexport function getColumnGroupElement(element) {\n    if (element.is('element', 'tableColumnGroup')) {\n        return element;\n    }\n    const children = element.getChildren();\n    return Array\n        .from(children)\n        .find(element => element.is('element', 'tableColumnGroup'));\n}\n/**\n * Returns an array of 'tableColumn' elements. It may be empty if there's no `tableColumnGroup` element.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of 'tableColumn' elements.\n */\nexport function getTableColumnElements(element) {\n    const columnGroupElement = getColumnGroupElement(element);\n    if (!columnGroupElement) {\n        return [];\n    }\n    return Array.from(columnGroupElement.getChildren());\n}\n/**\n * Returns an array of table column widths.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of table column widths.\n */\nexport function getTableColumnsWidths(element) {\n    return getTableColumnElements(element).map(column => column.getAttribute('columnWidth'));\n}\n/**\n * Translates the `colSpan` model attribute into additional column widths and returns the resulting array.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @param writer A writer instance.\n * @returns An array of table column widths.\n */\nexport function translateColSpanAttribute(element, writer) {\n    const tableColumnElements = getTableColumnElements(element);\n    return tableColumnElements.reduce((acc, element) => {\n        const columnWidth = element.getAttribute('columnWidth');\n        const colSpan = element.getAttribute('colSpan');\n        if (!colSpan) {\n            acc.push(columnWidth);\n            return acc;\n        }\n        // Translate the `colSpan` model attribute on to the proper number of column widths\n        // and remove it from the element.\n        // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n        for (let i = 0; i < colSpan; i++) {\n            acc.push(columnWidth);\n        }\n        writer.removeAttribute('colSpan', element);\n        return acc;\n    }, []);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableutils\n */\nimport { CKEditorError } from 'ckeditor5/src/utils';\nimport { Plugin } from 'ckeditor5/src/core';\nimport TableWalker from './tablewalker';\nimport { createEmptyTableCell, updateNumericAttribute } from './utils/common';\nimport { removeEmptyColumns, removeEmptyRows } from './utils/structure';\nimport { getTableColumnElements } from './tablecolumnresize/utils';\n/**\n * The table utilities plugin.\n */\nexport default class TableUtils extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableUtils';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        this.decorate('insertColumns');\n        this.decorate('insertRows');\n    }\n    /**\n     * Returns the table cell location as an object with table row and table column indexes.\n     *\n     * For instance, in the table below:\n     *\n     *      0   1   2   3\n     *    +---+---+---+---+\n     *  0 | a     | b | c |\n     *    +       +   +---+\n     *  1 |       |   | d |\n     *    +---+---+   +---+\n     *  2 | e     |   | f |\n     *    +---+---+---+---+\n     *\n     * the method will return:\n     *\n     * ```ts\n     * const cellA = table.getNodeByPath( [ 0, 0 ] );\n     * editor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n     * // will return { row: 0, column: 0 }\n     *\n     * const cellD = table.getNodeByPath( [ 1, 0 ] );\n     * editor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n     * // will return { row: 1, column: 3 }\n     * ```\n     *\n     * @returns Returns a `{row, column}` object.\n     */\n    getCellLocation(tableCell) {\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowIndex = table.getChildIndex(tableRow);\n        const tableWalker = new TableWalker(table, { row: rowIndex });\n        for (const { cell, row, column } of tableWalker) {\n            if (cell === tableCell) {\n                return { row, column };\n            }\n        }\n        // Should be unreachable code.\n        /* istanbul ignore next -- @preserve */\n        return undefined;\n    }\n    /**\n     * Creates an empty table with a proper structure. The table needs to be inserted into the model,\n     * for example, by using the {@link module:engine/model/model~Model#insertContent} function.\n     *\n     * ```ts\n     * model.change( ( writer ) => {\n     *   // Create a table of 2 rows and 7 columns:\n     *   const table = tableUtils.createTable( writer, { rows: 2, columns: 7 } );\n     *\n     *   // Insert a table to the model at the best position taking the current selection:\n     *   model.insertContent( table );\n     * }\n     * ```\n     *\n     * @param writer The model writer.\n     * @param options.rows The number of rows to create. Default value is 2.\n     * @param options.columns The number of columns to create. Default value is 2.\n     * @param options.headingRows The number of heading rows. Default value is 0.\n     * @param options.headingColumns The number of heading columns. Default value is 0.\n     * @returns The created table element.\n     */\n    createTable(writer, options) {\n        const table = writer.createElement('table');\n        const rows = options.rows || 2;\n        const columns = options.columns || 2;\n        createEmptyRows(writer, table, 0, rows, columns);\n        if (options.headingRows) {\n            updateNumericAttribute('headingRows', Math.min(options.headingRows, rows), table, writer, 0);\n        }\n        if (options.headingColumns) {\n            updateNumericAttribute('headingColumns', Math.min(options.headingColumns, columns), table, writer, 0);\n        }\n        return table;\n    }\n    /**\n     * Inserts rows into a table.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n     * ```\n     *\n     * Assuming the table on the left, the above code will transform it to the table on the right:\n     *\n     *  row index\n     *    0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n     *      | a | b | c |       `rows` = 2,    | a | b | c |\n     *    1 +   +---+---+   <-- insert here    +   +---+---+ 1\n     *      |   | d | e |                      |   |   |   |\n     *    2 +   +---+---+       will give:     +   +---+---+ 2\n     *      |   | f | g |                      |   |   |   |\n     *    3 +---+---+---+                      +   +---+---+ 3\n     *                                         |   | d | e |\n     *                                         +   +---+---+ 4\n     *                                         +   + f | g |\n     *                                         +---+---+---+ 5\n     *\n     * @param table The table model element where the rows will be inserted.\n     * @param options.at The row index at which the rows will be inserted.  Default value is 0.\n     * @param options.rows The number of rows to insert.  Default value is 1.\n     * @param options.copyStructureFromAbove The flag for copying row structure. Note that\n     * the row structure will not be copied if this option is not provided.\n     */\n    insertRows(table, options = {}) {\n        const model = this.editor.model;\n        const insertAt = options.at || 0;\n        const rowsToInsert = options.rows || 1;\n        const isCopyStructure = options.copyStructureFromAbove !== undefined;\n        const copyStructureFrom = options.copyStructureFromAbove ? insertAt - 1 : insertAt;\n        const rows = this.getRows(table);\n        const columns = this.getColumns(table);\n        if (insertAt > rows) {\n            /**\n             * The `options.at` points at a row position that does not exist.\n             *\n             * @error tableutils-insertrows-insert-out-of-range\n             */\n            throw new CKEditorError('tableutils-insertrows-insert-out-of-range', this, { options });\n        }\n        model.change(writer => {\n            const headingRows = table.getAttribute('headingRows') || 0;\n            // Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n            if (headingRows > insertAt) {\n                updateNumericAttribute('headingRows', headingRows + rowsToInsert, table, writer, 0);\n            }\n            // Inserting at the end or at the beginning of a table doesn't require to calculate anything special.\n            if (!isCopyStructure && (insertAt === 0 || insertAt === rows)) {\n                createEmptyRows(writer, table, insertAt, rowsToInsert, columns);\n                return;\n            }\n            // Iterate over all the rows above the inserted rows in order to check for the row-spanned cells.\n            const walkerEndRow = isCopyStructure ? Math.max(insertAt, copyStructureFrom) : insertAt;\n            const tableIterator = new TableWalker(table, { endRow: walkerEndRow });\n            // Store spans of the reference row to reproduce it's structure. This array is column number indexed.\n            const rowColSpansMap = new Array(columns).fill(1);\n            for (const { row, column, cellHeight, cellWidth, cell } of tableIterator) {\n                const lastCellRow = row + cellHeight - 1;\n                const isOverlappingInsertedRow = row < insertAt && insertAt <= lastCellRow;\n                const isReferenceRow = row <= copyStructureFrom && copyStructureFrom <= lastCellRow;\n                // If the cell is row-spanned and overlaps the inserted row, then reserve space for it in the row map.\n                if (isOverlappingInsertedRow) {\n                    // This cell overlaps the inserted rows so we need to expand it further.\n                    writer.setAttribute('rowspan', cellHeight + rowsToInsert, cell);\n                    // Mark this cell with negative number to indicate how many cells should be skipped when adding the new cells.\n                    rowColSpansMap[column] = -cellWidth;\n                }\n                // Store the colspan from reference row.\n                else if (isCopyStructure && isReferenceRow) {\n                    rowColSpansMap[column] = cellWidth;\n                }\n            }\n            for (let rowIndex = 0; rowIndex < rowsToInsert; rowIndex++) {\n                const tableRow = writer.createElement('tableRow');\n                writer.insert(tableRow, table, insertAt);\n                for (let cellIndex = 0; cellIndex < rowColSpansMap.length; cellIndex++) {\n                    const colspan = rowColSpansMap[cellIndex];\n                    const insertPosition = writer.createPositionAt(tableRow, 'end');\n                    // Insert the empty cell only if this slot is not row-spanned from any other cell.\n                    if (colspan > 0) {\n                        createEmptyTableCell(writer, insertPosition, colspan > 1 ? { colspan } : undefined);\n                    }\n                    // Skip the col-spanned slots, there won't be any cells.\n                    cellIndex += Math.abs(colspan) - 1;\n                }\n            }\n        });\n    }\n    /**\n     * Inserts columns into a table.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n     * ```\n     *\n     * Assuming the table on the left, the above code will transform it to the table on the right:\n     *\n     *  0   1   2   3                   0   1   2   3   4   5\n     *  +---+---+---+                   +---+---+---+---+---+\n     *  | a     | b |                   | a             | b |\n     *  +       +---+                   +               +---+\n     *  |       | c |                   |               | c |\n     *  +---+---+---+     will give:    +---+---+---+---+---+\n     *  | d | e | f |                   | d |   |   | e | f |\n     *  +---+   +---+                   +---+---+---+   +---+\n     *  | g |   | h |                   | g |   |   |   | h |\n     *  +---+---+---+                   +---+---+---+---+---+\n     *  | i         |                   | i                 |\n     *  +---+---+---+                   +---+---+---+---+---+\n     *      ^---- insert here, `at` = 1, `columns` = 2\n     *\n     * @param table The table model element where the columns will be inserted.\n     * @param options.at The column index at which the columns will be inserted. Default value is 0.\n     * @param options.columns The number of columns to insert. Default value is 1.\n     */\n    insertColumns(table, options = {}) {\n        const model = this.editor.model;\n        const insertAt = options.at || 0;\n        const columnsToInsert = options.columns || 1;\n        model.change(writer => {\n            const headingColumns = table.getAttribute('headingColumns');\n            // Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n            if (insertAt < headingColumns) {\n                writer.setAttribute('headingColumns', headingColumns + columnsToInsert, table);\n            }\n            const tableColumns = this.getColumns(table);\n            // Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n            if (insertAt === 0 || tableColumns === insertAt) {\n                for (const tableRow of table.getChildren()) {\n                    // Ignore non-row elements inside the table (e.g. caption).\n                    if (!tableRow.is('element', 'tableRow')) {\n                        continue;\n                    }\n                    createCells(columnsToInsert, writer, writer.createPositionAt(tableRow, insertAt ? 'end' : 0));\n                }\n                return;\n            }\n            const tableWalker = new TableWalker(table, { column: insertAt, includeAllSlots: true });\n            for (const tableSlot of tableWalker) {\n                const { row, cell, cellAnchorColumn, cellAnchorRow, cellWidth, cellHeight } = tableSlot;\n                // When iterating over column the table walker outputs either:\n                // - cells at given column index (cell \"e\" from method docs),\n                // - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeAllSlots: true`),\n                // - or a cell from the same row which spans over this column (cell \"a\").\n                if (cellAnchorColumn < insertAt) {\n                    // If cell is anchored in previous column, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n                    // For such cells expand them by a number of columns inserted.\n                    writer.setAttribute('colspan', cellWidth + columnsToInsert, cell);\n                    // This cell will overlap cells in rows below so skip them (because of `includeAllSlots` option) - (cell \"a\")\n                    const lastCellRow = cellAnchorRow + cellHeight - 1;\n                    for (let i = row; i <= lastCellRow; i++) {\n                        tableWalker.skipRow(i);\n                    }\n                }\n                else {\n                    // It's either cell at this column index or spanned cell by a row-spanned cell from row above.\n                    // In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n                    createCells(columnsToInsert, writer, tableSlot.getPositionBefore());\n                }\n            }\n        });\n    }\n    /**\n     * Removes rows from the given `table`.\n     *\n     * This method re-calculates the table geometry including `rowspan` attribute of table cells overlapping removed rows\n     * and table headings values.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).removeRows( table, { at: 1, rows: 2 } );\n     * ```\n     *\n     * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n     *\n     *  row index\n     *      ┌───┬───┬───┐        `at` = 1        ┌───┬───┬───┐\n     *    0 │ a │ b │ c │        `rows` = 2      │ a │ b │ c │ 0\n     *      │   ├───┼───┤                        │   ├───┼───┤\n     *    1 │   │ d │ e │  <-- remove from here  │   │ d │ g │ 1\n     *      │   │   ├───┤        will give:      ├───┼───┼───┤\n     *    2 │   │   │ f │                        │ h │ i │ j │ 2\n     *      │   │   ├───┤                        └───┴───┴───┘\n     *    3 │   │   │ g │\n     *      ├───┼───┼───┤\n     *    4 │ h │ i │ j │\n     *      └───┴───┴───┘\n     *\n     * @param options.at The row index at which the removing rows will start.\n     * @param options.rows The number of rows to remove. Default value is 1.\n     */\n    removeRows(table, options) {\n        const model = this.editor.model;\n        const rowsToRemove = options.rows || 1;\n        const rowCount = this.getRows(table);\n        const first = options.at;\n        const last = first + rowsToRemove - 1;\n        if (last > rowCount - 1) {\n            /**\n             * The `options.at` param must point at existing row and `options.rows` must not exceed the rows in the table.\n             *\n             * @error tableutils-removerows-row-index-out-of-range\n             */\n            throw new CKEditorError('tableutils-removerows-row-index-out-of-range', this, { table, options });\n        }\n        model.change(writer => {\n            const indexesObject = { first, last };\n            // Removing rows from the table require that most calculations to be done prior to changing table structure.\n            // Preparations must be done in the same enqueueChange callback to use the current table structure.\n            // 1. Preparation - get row-spanned cells that have to be modified after removing rows.\n            const { cellsToMove, cellsToTrim } = getCellsToMoveAndTrimOnRemoveRow(table, indexesObject);\n            // 2. Execution\n            // 2a. Move cells from removed rows that extends over a removed section - must be done before removing rows.\n            // This will fill any gaps in a rows below that previously were empty because of row-spanned cells.\n            if (cellsToMove.size) {\n                const rowAfterRemovedSection = last + 1;\n                moveCellsToRow(table, rowAfterRemovedSection, cellsToMove, writer);\n            }\n            // 2b. Remove all required rows.\n            for (let i = last; i >= first; i--) {\n                writer.remove(table.getChild(i));\n            }\n            // 2c. Update cells from rows above that overlap removed section. Similar to step 2 but does not involve moving cells.\n            for (const { rowspan, cell } of cellsToTrim) {\n                updateNumericAttribute('rowspan', rowspan, cell, writer);\n            }\n            // 2d. Adjust heading rows if removed rows were in a heading section.\n            updateHeadingRows(table, indexesObject, writer);\n            // 2e. Remove empty columns (without anchored cells) if there are any.\n            if (!removeEmptyColumns(table, this)) {\n                // If there wasn't any empty columns then we still need to check if this wasn't called\n                // because of cleaning empty rows and we only removed one of them.\n                removeEmptyRows(table, this);\n            }\n        });\n    }\n    /**\n     * Removes columns from the given `table`.\n     *\n     * This method re-calculates the table geometry including the `colspan` attribute of table cells overlapping removed columns\n     * and table headings values.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).removeColumns( table, { at: 1, columns: 2 } );\n     * ```\n     *\n     * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n     *\n     *    0   1   2   3   4                       0   1   2\n     *  ┌───────────────┬───┐                   ┌───────┬───┐\n     *  │ a             │ b │                   │ a     │ b │\n     *  │               ├───┤                   │       ├───┤\n     *  │               │ c │                   │       │ c │\n     *  ├───┬───┬───┬───┼───┤     will give:    ├───┬───┼───┤\n     *  │ d │ e │ f │ g │ h │                   │ d │ g │ h │\n     *  ├───┼───┼───┤   ├───┤                   ├───┤   ├───┤\n     *  │ i │ j │ k │   │ l │                   │ i │   │ l │\n     *  ├───┴───┴───┴───┴───┤                   ├───┴───┴───┤\n     *  │ m                 │                   │ m         │\n     *  └───────────────────┘                   └───────────┘\n     *        ^---- remove from here, `at` = 1, `columns` = 2\n     *\n     * @param options.at The row index at which the removing columns will start.\n     * @param options.columns The number of columns to remove.\n     */\n    removeColumns(table, options) {\n        const model = this.editor.model;\n        const first = options.at;\n        const columnsToRemove = options.columns || 1;\n        const last = options.at + columnsToRemove - 1;\n        model.change(writer => {\n            adjustHeadingColumns(table, { first, last }, writer);\n            const tableColumns = getTableColumnElements(table);\n            for (let removedColumnIndex = last; removedColumnIndex >= first; removedColumnIndex--) {\n                for (const { cell, column, cellWidth } of [...new TableWalker(table)]) {\n                    // If colspaned cell overlaps removed column decrease its span.\n                    if (column <= removedColumnIndex && cellWidth > 1 && column + cellWidth > removedColumnIndex) {\n                        updateNumericAttribute('colspan', cellWidth - 1, cell, writer);\n                    }\n                    else if (column === removedColumnIndex) {\n                        // The cell in removed column has colspan of 1.\n                        writer.remove(cell);\n                    }\n                }\n                // If table has `tableColumn` elements, we need to update it manually.\n                // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for details.\n                if (tableColumns[removedColumnIndex]) {\n                    // If the removed column is the first one then we need to add its width to the next column.\n                    // Otherwise we add it to the previous column.\n                    const adjacentColumn = removedColumnIndex === 0 ? tableColumns[1] : tableColumns[removedColumnIndex - 1];\n                    const removedColumnWidth = parseFloat(tableColumns[removedColumnIndex].getAttribute('columnWidth'));\n                    const adjacentColumnWidth = parseFloat(adjacentColumn.getAttribute('columnWidth'));\n                    writer.remove(tableColumns[removedColumnIndex]);\n                    // Add the removed column width (in %) to the adjacent column.\n                    writer.setAttribute('columnWidth', removedColumnWidth + adjacentColumnWidth + '%', adjacentColumn);\n                }\n            }\n            // Remove empty rows that could appear after removing columns.\n            if (!removeEmptyRows(table, this)) {\n                // If there wasn't any empty rows then we still need to check if this wasn't called\n                // because of cleaning empty columns and we only removed one of them.\n                removeEmptyColumns(table, this);\n            }\n        });\n    }\n    /**\n     * Divides a table cell vertically into several ones.\n     *\n     * The cell will be visually split into more cells by updating colspans of other cells in a column\n     * and inserting cells (columns) after that cell.\n     *\n     * In the table below, if cell \"a\" is split into 3 cells:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +---+---+---+\n     *  | d | e | f |\n     *  +---+---+---+\n     *\n     * it will result in the table below:\n     *\n     *  +---+---+---+---+---+\n     *  | a |   |   | b | c |\n     *  +---+---+---+---+---+\n     *  | d         | e | f |\n     *  +---+---+---+---+---+\n     *\n     * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n     *\n     * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n     * will be left to the original cell:\n     *\n     *  +---+---+---+\n     *  | a         |\n     *  +---+---+---+\n     *  | b | c | d |\n     *  +---+---+---+\n     *\n     * Splitting cell \"a\" with `colspan=3` into 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n     *\n     *  +---+---+---+\n     *  | a     |   |\n     *  +---+---+---+\n     *  | b | c | d |\n     *  +---+---+---+\n     */\n    splitCellVertically(tableCell, numberOfCells = 2) {\n        const model = this.editor.model;\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n        const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n        model.change(writer => {\n            // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n            if (colspan > 1) {\n                // Get spans of new (inserted) cells and span to update of split cell.\n                const { newCellsSpan, updatedSpan } = breakSpanEvenly(colspan, numberOfCells);\n                updateNumericAttribute('colspan', updatedSpan, tableCell, writer);\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                if (newCellsSpan > 1) {\n                    newCellsAttributes.colspan = newCellsSpan;\n                }\n                // Copy rowspan of split cell.\n                if (rowspan > 1) {\n                    newCellsAttributes.rowspan = rowspan;\n                }\n                const cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n                createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n            }\n            // Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n            if (colspan < numberOfCells) {\n                const cellsToInsert = numberOfCells - colspan;\n                // First step: expand cells on the same column as split cell.\n                const tableMap = [...new TableWalker(table)];\n                // Get the column index of split cell.\n                const { column: splitCellColumn } = tableMap.find(({ cell }) => cell === tableCell);\n                // Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n                const cellsToUpdate = tableMap.filter(({ cell, cellWidth, column }) => {\n                    const isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n                    const spansOverColumn = (column < splitCellColumn && column + cellWidth > splitCellColumn);\n                    return isOnSameColumn || spansOverColumn;\n                });\n                // Expand cells vertically.\n                for (const { cell, cellWidth } of cellsToUpdate) {\n                    writer.setAttribute('colspan', cellWidth + cellsToInsert, cell);\n                }\n                // Second step: create columns after split cell.\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                // Copy rowspan of split cell.\n                if (rowspan > 1) {\n                    newCellsAttributes.rowspan = rowspan;\n                }\n                createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n                const headingColumns = table.getAttribute('headingColumns') || 0;\n                // Update heading section if split cell is in heading section.\n                if (headingColumns > splitCellColumn) {\n                    updateNumericAttribute('headingColumns', headingColumns + cellsToInsert, table, writer);\n                }\n            }\n        });\n    }\n    /**\n     * Divides a table cell horizontally into several ones.\n     *\n     * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n     * below.\n     *\n     * If in the table below cell \"b\" is split into 3 cells:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +---+---+---+\n     *  | d | e | f |\n     *  +---+---+---+\n     *\n     * It will result in the table below:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +   +---+   +\n     *  |   |   |   |\n     *  +   +---+   +\n     *  |   |   |   |\n     *  +---+---+---+\n     *  | d | e | f |\n     *  +---+---+---+\n     *\n     * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n     *\n     * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n     * will be left to the original cell:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +   +---+---+\n     *  |   | d | e |\n     *  +   +---+---+\n     *  |   | f | g |\n     *  +   +---+---+\n     *  |   | h | i |\n     *  +---+---+---+\n     *\n     * Splitting cell \"a\" with `rowspan=4` into 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n     *\n     *  +---+---+---+\n     *  | a | b | c |\n     *  +   +---+---+\n     *  |   | d | e |\n     *  +---+---+---+\n     *  |   | f | g |\n     *  +---+---+---+\n     *  |   | h | i |\n     *  +---+---+---+\n     */\n    splitCellHorizontally(tableCell, numberOfCells = 2) {\n        const model = this.editor.model;\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const splitCellRow = table.getChildIndex(tableRow);\n        const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n        const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n        model.change(writer => {\n            // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n            if (rowspan > 1) {\n                // Cache table map before updating table.\n                const tableMap = [...new TableWalker(table, {\n                        startRow: splitCellRow,\n                        endRow: splitCellRow + rowspan - 1,\n                        includeAllSlots: true\n                    })];\n                // Get spans of new (inserted) cells and span to update of split cell.\n                const { newCellsSpan, updatedSpan } = breakSpanEvenly(rowspan, numberOfCells);\n                updateNumericAttribute('rowspan', updatedSpan, tableCell, writer);\n                const { column: cellColumn } = tableMap.find(({ cell }) => cell === tableCell);\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                if (newCellsSpan > 1) {\n                    newCellsAttributes.rowspan = newCellsSpan;\n                }\n                // Copy colspan of split cell.\n                if (colspan > 1) {\n                    newCellsAttributes.colspan = colspan;\n                }\n                for (const tableSlot of tableMap) {\n                    const { column, row } = tableSlot;\n                    // As both newly created cells and the split cell might have rowspan,\n                    // the insertion of new cells must go to appropriate rows:\n                    //\n                    // 1. It's a row after split cell + it's height.\n                    const isAfterSplitCell = row >= splitCellRow + updatedSpan;\n                    // 2. Is on the same column.\n                    const isOnSameColumn = column === cellColumn;\n                    // 3. And it's row index is after previous cell height.\n                    const isInEvenlySplitRow = (row + splitCellRow + updatedSpan) % newCellsSpan === 0;\n                    if (isAfterSplitCell && isOnSameColumn && isInEvenlySplitRow) {\n                        createCells(1, writer, tableSlot.getPositionBefore(), newCellsAttributes);\n                    }\n                }\n            }\n            // Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n            if (rowspan < numberOfCells) {\n                // We already split the cell in check one so here we split to the remaining number of cells only.\n                const cellsToInsert = numberOfCells - rowspan;\n                // This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n                const tableMap = [...new TableWalker(table, { startRow: 0, endRow: splitCellRow })];\n                // First step: expand cells.\n                for (const { cell, cellHeight, row } of tableMap) {\n                    // Expand rowspan of cells that are either:\n                    // - on the same row as current cell,\n                    // - or are below split cell row and overlaps that row.\n                    if (cell !== tableCell && row + cellHeight > splitCellRow) {\n                        const rowspanToSet = cellHeight + cellsToInsert;\n                        writer.setAttribute('rowspan', rowspanToSet, cell);\n                    }\n                }\n                // Second step: create rows with single cell below split cell.\n                const newCellsAttributes = {};\n                // Copy colspan of split cell.\n                if (colspan > 1) {\n                    newCellsAttributes.colspan = colspan;\n                }\n                createEmptyRows(writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes);\n                // Update heading section if split cell is in heading section.\n                const headingRows = table.getAttribute('headingRows') || 0;\n                if (headingRows > splitCellRow) {\n                    updateNumericAttribute('headingRows', headingRows + cellsToInsert, table, writer);\n                }\n            }\n        });\n    }\n    /**\n     * Returns the number of columns for a given table.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).getColumns( table );\n     * ```\n     *\n     * @param table The table to analyze.\n     */\n    getColumns(table) {\n        // Analyze first row only as all the rows should have the same width.\n        // Using the first row without checking if it's a tableRow because we expect\n        // that table will have only tableRow model elements at the beginning.\n        const row = table.getChild(0);\n        return [...row.getChildren()].reduce((columns, row) => {\n            const columnWidth = parseInt(row.getAttribute('colspan') || '1');\n            return columns + columnWidth;\n        }, 0);\n    }\n    /**\n     * Returns the number of rows for a given table. Any other element present in the table model is omitted.\n     *\n     * ```ts\n     * editor.plugins.get( 'TableUtils' ).getRows( table );\n     * ```\n     *\n     * @param table The table to analyze.\n     */\n    getRows(table) {\n        // Rowspan not included due to #6427.\n        return Array.from(table.getChildren())\n            .reduce((rowCount, child) => child.is('element', 'tableRow') ? rowCount + 1 : rowCount, 0);\n    }\n    /**\n     * Creates an instance of the table walker.\n     *\n     * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n     * It walks row by row and column by column in order to output values defined in the options.\n     * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n     * pass the `includeAllSlots` option.\n     *\n     * @internal\n     * @param table A table over which the walker iterates.\n     * @param options An object with configuration.\n     */\n    createTableWalker(table, options = {}) {\n        return new TableWalker(table, options);\n    }\n    /**\n     * Returns all model table cells that are fully selected (from the outside)\n     * within the provided model selection's ranges.\n     *\n     * To obtain the cells selected from the inside, use\n     * {@link #getTableCellsContainingSelection}.\n     */\n    getSelectedTableCells(selection) {\n        const cells = [];\n        for (const range of this.sortRanges(selection.getRanges())) {\n            const element = range.getContainedElement();\n            if (element && element.is('element', 'tableCell')) {\n                cells.push(element);\n            }\n        }\n        return cells;\n    }\n    /**\n     * Returns all model table cells that the provided model selection's ranges\n     * {@link module:engine/model/range~Range#start} inside.\n     *\n     * To obtain the cells selected from the outside, use\n     * {@link #getSelectedTableCells}.\n     */\n    getTableCellsContainingSelection(selection) {\n        const cells = [];\n        for (const range of selection.getRanges()) {\n            const cellWithSelection = range.start.findAncestor('tableCell');\n            if (cellWithSelection) {\n                cells.push(cellWithSelection);\n            }\n        }\n        return cells;\n    }\n    /**\n     * Returns all model table cells that are either completely selected\n     * by selection ranges or host selection range\n     * {@link module:engine/model/range~Range#start start positions} inside them.\n     *\n     * Combines {@link #getTableCellsContainingSelection} and\n     * {@link #getSelectedTableCells}.\n     */\n    getSelectionAffectedTableCells(selection) {\n        const selectedCells = this.getSelectedTableCells(selection);\n        if (selectedCells.length) {\n            return selectedCells;\n        }\n        return this.getTableCellsContainingSelection(selection);\n    }\n    /**\n     * Returns an object with the `first` and `last` row index contained in the given `tableCells`.\n     *\n     * ```ts\n     * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n     *\n     * const { first, last } = getRowIndexes( selectedTableCells );\n     *\n     * console.log( `Selected rows: ${ first } to ${ last }` );\n     * ```\n     *\n     * @returns Returns an object with the `first` and `last` table row indexes.\n     */\n    getRowIndexes(tableCells) {\n        const indexes = tableCells.map(cell => cell.parent.index);\n        return this._getFirstLastIndexesObject(indexes);\n    }\n    /**\n     * Returns an object with the `first` and `last` column index contained in the given `tableCells`.\n     *\n     * ```ts\n     * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n     *\n     * const { first, last } = getColumnIndexes( selectedTableCells );\n     *\n     * console.log( `Selected columns: ${ first } to ${ last }` );\n     * ```\n     *\n     * @returns Returns an object with the `first` and `last` table column indexes.\n     */\n    getColumnIndexes(tableCells) {\n        const table = tableCells[0].findAncestor('table');\n        const tableMap = [...new TableWalker(table)];\n        const indexes = tableMap\n            .filter(entry => tableCells.includes(entry.cell))\n            .map(entry => entry.column);\n        return this._getFirstLastIndexesObject(indexes);\n    }\n    /**\n     * Checks if the selection contains cells that do not exceed rectangular selection.\n     *\n     * In a table below:\n     *\n     *  ┌───┬───┬───┬───┐\n     *  │ a │ b │ c │ d │\n     *  ├───┴───┼───┤   │\n     *  │ e     │ f │   │\n     *  │       ├───┼───┤\n     *  │       │ g │ h │\n     *  └───────┴───┴───┘\n     *\n     * Valid selections are these which create a solid rectangle (without gaps), such as:\n     *   - a, b (two horizontal cells)\n     *   - c, f (two vertical cells)\n     *   - a, b, e (cell \"e\" spans over four cells)\n     *   - c, d, f (cell d spans over a cell in the row below)\n     *\n     * While an invalid selection would be:\n     *   - a, c (the unselected cell \"b\" creates a gap)\n     *   - f, g, h (cell \"d\" spans over a cell from the row of \"f\" cell - thus creates a gap)\n     */\n    isSelectionRectangular(selectedTableCells) {\n        if (selectedTableCells.length < 2 || !this._areCellInTheSameTableSection(selectedTableCells)) {\n            return false;\n        }\n        // A valid selection is a fully occupied rectangle composed of table cells.\n        // Below we will calculate the area of a selected table cells and the area of valid selection.\n        // The area of a valid selection is defined by top-left and bottom-right cells.\n        const rows = new Set();\n        const columns = new Set();\n        let areaOfSelectedCells = 0;\n        for (const tableCell of selectedTableCells) {\n            const { row, column } = this.getCellLocation(tableCell);\n            const rowspan = parseInt(tableCell.getAttribute('rowspan')) || 1;\n            const colspan = parseInt(tableCell.getAttribute('colspan')) || 1;\n            // Record row & column indexes of current cell.\n            rows.add(row);\n            columns.add(column);\n            // For cells that spans over multiple rows add also the last row that this cell spans over.\n            if (rowspan > 1) {\n                rows.add(row + rowspan - 1);\n            }\n            // For cells that spans over multiple columns add also the last column that this cell spans over.\n            if (colspan > 1) {\n                columns.add(column + colspan - 1);\n            }\n            areaOfSelectedCells += (rowspan * colspan);\n        }\n        // We can only merge table cells that are in adjacent rows...\n        const areaOfValidSelection = getBiggestRectangleArea(rows, columns);\n        return areaOfValidSelection == areaOfSelectedCells;\n    }\n    /**\n     * Returns array of sorted ranges.\n     */\n    sortRanges(ranges) {\n        return Array.from(ranges).sort(compareRangeOrder);\n    }\n    /**\n     * Helper method to get an object with `first` and `last` indexes from an unsorted array of indexes.\n     */\n    _getFirstLastIndexesObject(indexes) {\n        const allIndexesSorted = indexes.sort((indexA, indexB) => indexA - indexB);\n        const first = allIndexesSorted[0];\n        const last = allIndexesSorted[allIndexesSorted.length - 1];\n        return { first, last };\n    }\n    /**\n     * Checks if the selection does not mix a header (column or row) with other cells.\n     *\n     * For instance, in the table below valid selections consist of cells with the same letter only.\n     * So, a-a (same heading row and column) or d-d (body cells) are valid while c-d or a-b are not.\n     *\n     * header columns\n     *    ↓   ↓\n     *  ┌───┬───┬───┬───┐\n     *  │ a │ a │ b │ b │  ← header row\n     *  ├───┼───┼───┼───┤\n     *  │ c │ c │ d │ d │\n     *  ├───┼───┼───┼───┤\n     *  │ c │ c │ d │ d │\n     *  └───┴───┴───┴───┘\n     */\n    _areCellInTheSameTableSection(tableCells) {\n        const table = tableCells[0].findAncestor('table');\n        const rowIndexes = this.getRowIndexes(tableCells);\n        const headingRows = parseInt(table.getAttribute('headingRows')) || 0;\n        // Calculating row indexes is a bit cheaper so if this check fails we can't merge.\n        if (!this._areIndexesInSameSection(rowIndexes, headingRows)) {\n            return false;\n        }\n        const columnIndexes = this.getColumnIndexes(tableCells);\n        const headingColumns = parseInt(table.getAttribute('headingColumns')) || 0;\n        // Similarly cells must be in same column section.\n        return this._areIndexesInSameSection(columnIndexes, headingColumns);\n    }\n    /**\n     * Unified check if table rows/columns indexes are in the same heading/body section.\n     */\n    _areIndexesInSameSection({ first, last }, headingSectionSize) {\n        const firstCellIsInHeading = first < headingSectionSize;\n        const lastCellIsInHeading = last < headingSectionSize;\n        return firstCellIsInHeading === lastCellIsInHeading;\n    }\n}\n/**\n * Creates empty rows at the given index in an existing table.\n *\n * @param insertAt The row index of row insertion.\n * @param rows The number of rows to create.\n * @param tableCellToInsert The number of cells to insert in each row.\n */\nfunction createEmptyRows(writer, table, insertAt, rows, tableCellToInsert, attributes = {}) {\n    for (let i = 0; i < rows; i++) {\n        const tableRow = writer.createElement('tableRow');\n        writer.insert(tableRow, table, insertAt);\n        createCells(tableCellToInsert, writer, writer.createPositionAt(tableRow, 'end'), attributes);\n    }\n}\n/**\n * Creates cells at a given position.\n *\n * @param cells The number of cells to create\n */\nfunction createCells(cells, writer, insertPosition, attributes = {}) {\n    for (let i = 0; i < cells; i++) {\n        createEmptyTableCell(writer, insertPosition, attributes);\n    }\n}\n/**\n * Evenly distributes the span of a cell to a number of provided cells.\n * The resulting spans will always be integer values.\n *\n * For instance breaking a span of 7 into 3 cells will return:\n *\n * ```ts\n * { newCellsSpan: 2, updatedSpan: 3 }\n * ```\n *\n * as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n *\n * @param span The span value do break.\n * @param numberOfCells The number of resulting spans.\n */\nfunction breakSpanEvenly(span, numberOfCells) {\n    if (span < numberOfCells) {\n        return { newCellsSpan: 1, updatedSpan: 1 };\n    }\n    const newCellsSpan = Math.floor(span / numberOfCells);\n    const updatedSpan = (span - newCellsSpan * numberOfCells) + newCellsSpan;\n    return { newCellsSpan, updatedSpan };\n}\n/**\n * Updates heading columns attribute if removing a row from head section.\n */\nfunction adjustHeadingColumns(table, removedColumnIndexes, writer) {\n    const headingColumns = table.getAttribute('headingColumns') || 0;\n    if (headingColumns && removedColumnIndexes.first < headingColumns) {\n        const headingsRemoved = Math.min(headingColumns - 1 /* Other numbers are 0-based */, removedColumnIndexes.last) -\n            removedColumnIndexes.first + 1;\n        writer.setAttribute('headingColumns', headingColumns - headingsRemoved, table);\n    }\n}\n/**\n * Calculates a new heading rows value for removing rows from heading section.\n */\nfunction updateHeadingRows(table, { first, last }, writer) {\n    const headingRows = table.getAttribute('headingRows') || 0;\n    if (first < headingRows) {\n        const newRows = last < headingRows ? headingRows - (last - first + 1) : first;\n        updateNumericAttribute('headingRows', newRows, table, writer, 0);\n    }\n}\n/**\n * Finds cells that will be:\n * - trimmed - Cells that are \"above\" removed rows sections and overlap the removed section - their rowspan must be trimmed.\n * - moved - Cells from removed rows section might stick out of. These cells are moved to the next row after a removed section.\n *\n * Sample table with overlapping & sticking out cells:\n *\n *      +----+----+----+----+----+\n *      | 00 | 01 | 02 | 03 | 04 |\n *      +----+    +    +    +    +\n *      | 10 |    |    |    |    |\n *      +----+----+    +    +    +\n *      | 20 | 21 |    |    |    | <-- removed row\n *      +    +    +----+    +    +\n *      |    |    | 32 |    |    | <-- removed row\n *      +----+    +    +----+    +\n *      | 40 |    |    | 43 |    |\n *      +----+----+----+----+----+\n *\n * In a table above:\n * - cells to trim: '02', '03' & '04'.\n * - cells to move: '21' & '32'.\n */\nfunction getCellsToMoveAndTrimOnRemoveRow(table, { first, last }) {\n    const cellsToMove = new Map();\n    const cellsToTrim = [];\n    for (const { row, column, cellHeight, cell } of new TableWalker(table, { endRow: last })) {\n        const lastRowOfCell = row + cellHeight - 1;\n        const isCellStickingOutFromRemovedRows = row >= first && row <= last && lastRowOfCell > last;\n        if (isCellStickingOutFromRemovedRows) {\n            const rowspanInRemovedSection = last - row + 1;\n            const rowSpanToSet = cellHeight - rowspanInRemovedSection;\n            cellsToMove.set(column, {\n                cell,\n                rowspan: rowSpanToSet\n            });\n        }\n        const isCellOverlappingRemovedRows = row < first && lastRowOfCell >= first;\n        if (isCellOverlappingRemovedRows) {\n            let rowspanAdjustment;\n            // Cell fully covers removed section - trim it by removed rows count.\n            if (lastRowOfCell >= last) {\n                rowspanAdjustment = last - first + 1;\n            }\n            // Cell partially overlaps removed section - calculate cell's span that is in removed section.\n            else {\n                rowspanAdjustment = lastRowOfCell - first + 1;\n            }\n            cellsToTrim.push({\n                cell,\n                rowspan: cellHeight - rowspanAdjustment\n            });\n        }\n    }\n    return { cellsToMove, cellsToTrim };\n}\nfunction moveCellsToRow(table, targetRowIndex, cellsToMove, writer) {\n    const tableWalker = new TableWalker(table, {\n        includeAllSlots: true,\n        row: targetRowIndex\n    });\n    const tableRowMap = [...tableWalker];\n    const row = table.getChild(targetRowIndex);\n    let previousCell;\n    for (const { column, cell, isAnchor } of tableRowMap) {\n        if (cellsToMove.has(column)) {\n            const { cell: cellToMove, rowspan } = cellsToMove.get(column);\n            const targetPosition = previousCell ?\n                writer.createPositionAfter(previousCell) :\n                writer.createPositionAt(row, 0);\n            writer.move(writer.createRangeOn(cellToMove), targetPosition);\n            updateNumericAttribute('rowspan', rowspan, cellToMove, writer);\n            previousCell = cellToMove;\n        }\n        else if (isAnchor) {\n            // If cell is spanned then `cell` holds reference to overlapping cell. See ckeditor/ckeditor5#6502.\n            previousCell = cell;\n        }\n    }\n}\nfunction compareRangeOrder(rangeA, rangeB) {\n    // Since table cell ranges are disjoint, it's enough to check their start positions.\n    const posA = rangeA.start;\n    const posB = rangeB.start;\n    // Checking for equal position (returning 0) is not needed because this would be either:\n    // a. Intersecting range (not allowed by model)\n    // b. Collapsed range on the same position (allowed by model but should not happen).\n    return posA.isBefore(posB) ? -1 : 1;\n}\n/**\n * Calculates the area of a maximum rectangle that can span over the provided row & column indexes.\n */\nfunction getBiggestRectangleArea(rows, columns) {\n    const rowsIndexes = Array.from(rows.values());\n    const columnIndexes = Array.from(columns.values());\n    const lastRow = Math.max(...rowsIndexes);\n    const firstRow = Math.min(...rowsIndexes);\n    const lastColumn = Math.max(...columnIndexes);\n    const firstColumn = Math.min(...columnIndexes);\n    return (lastRow - firstRow + 1) * (lastColumn - firstColumn + 1);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core';\nimport TableUtils from '../tableutils';\nimport { updateNumericAttribute } from '../utils/common';\nimport { removeEmptyRowsColumns } from '../utils/structure';\n/**\n * The merge cells command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCells'` editor command.\n *\n * For example, to merge selected table cells:\n *\n * ```ts\n * editor.execute( 'mergeTableCells' );\n * ```\n */\nexport default class MergeCellsCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selectedTableCells = tableUtils.getSelectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = tableUtils.isSelectionRectangular(selectedTableCells);\n    }\n    /**\n     * Executes the command.\n     *\n     * @fires execute\n     */\n    execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        model.change(writer => {\n            const selectedTableCells = tableUtils.getSelectedTableCells(model.document.selection);\n            // All cells will be merged into the first one.\n            const firstTableCell = selectedTableCells.shift();\n            // Update target cell dimensions.\n            const { mergeWidth, mergeHeight } = getMergeDimensions(firstTableCell, selectedTableCells, tableUtils);\n            updateNumericAttribute('colspan', mergeWidth, firstTableCell, writer);\n            updateNumericAttribute('rowspan', mergeHeight, firstTableCell, writer);\n            for (const tableCell of selectedTableCells) {\n                mergeTableCells(tableCell, firstTableCell, writer);\n            }\n            const table = firstTableCell.findAncestor('table');\n            // Remove rows and columns that become empty (have no anchored cells).\n            removeEmptyRowsColumns(table, tableUtils);\n            writer.setSelection(firstTableCell, 'in');\n        });\n    }\n}\n/**\n *  Merges two table cells. It will ensure that after merging cells with empty paragraphs the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */\nfunction mergeTableCells(cellBeingMerged, targetCell, writer) {\n    if (!isEmpty(cellBeingMerged)) {\n        if (isEmpty(targetCell)) {\n            writer.remove(writer.createRangeIn(targetCell));\n        }\n        writer.move(writer.createRangeIn(cellBeingMerged), writer.createPositionAt(targetCell, 'end'));\n    }\n    // Remove merged table cell.\n    writer.remove(cellBeingMerged);\n}\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */\nfunction isEmpty(tableCell) {\n    const firstTableChild = tableCell.getChild(0);\n    return tableCell.childCount == 1 && firstTableChild.is('element', 'paragraph') && firstTableChild.isEmpty;\n}\nfunction getMergeDimensions(firstTableCell, selectedTableCells, tableUtils) {\n    let maxWidthOffset = 0;\n    let maxHeightOffset = 0;\n    for (const tableCell of selectedTableCells) {\n        const { row, column } = tableUtils.getCellLocation(tableCell);\n        maxWidthOffset = getMaxOffset(tableCell, column, maxWidthOffset, 'colspan');\n        maxHeightOffset = getMaxOffset(tableCell, row, maxHeightOffset, 'rowspan');\n    }\n    // Update table cell span attribute and merge set selection on a merged contents.\n    const { row: firstCellRow, column: firstCellColumn } = tableUtils.getCellLocation(firstTableCell);\n    const mergeWidth = maxWidthOffset - firstCellColumn;\n    const mergeHeight = maxHeightOffset - firstCellRow;\n    return { mergeWidth, mergeHeight };\n}\nfunction getMaxOffset(tableCell, start, currentMaxOffset, which) {\n    const dimensionValue = parseInt(tableCell.getAttribute(which) || '1');\n    return Math.max(currentMaxOffset, start + dimensionValue);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/selectrowcommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The select row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableRow'` editor command.\n *\n * To select the rows containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableRow' );\n * ```\n */\nexport default class SelectRowCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length > 0;\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const rowIndexes = tableUtils.getRowIndexes(referenceCells);\n        const table = referenceCells[0].findAncestor('table');\n        const rangesToSelect = [];\n        for (let rowIndex = rowIndexes.first; rowIndex <= rowIndexes.last; rowIndex++) {\n            for (const cell of table.getChild(rowIndex).getChildren()) {\n                rangesToSelect.push(model.createRangeOn(cell));\n            }\n        }\n        model.change(writer => {\n            writer.setSelection(rangesToSelect);\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/commands/selectcolumncommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport TableWalker from '../tablewalker';\n/**\n * The select column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableColumn'` editor command.\n *\n * To select the columns containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableColumn' );\n * ```\n */\nexport default class SelectColumnCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length > 0;\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const firstCell = referenceCells[0];\n        const lastCell = referenceCells.pop();\n        const table = firstCell.findAncestor('table');\n        const startLocation = tableUtils.getCellLocation(firstCell);\n        const endLocation = tableUtils.getCellLocation(lastCell);\n        const startColumn = Math.min(startLocation.column, endLocation.column);\n        const endColumn = Math.max(startLocation.column, endLocation.column);\n        const rangesToSelect = [];\n        for (const cellInfo of new TableWalker(table, { startColumn, endColumn })) {\n            rangesToSelect.push(model.createRangeOn(cellInfo.cell));\n        }\n        model.change(writer => {\n            writer.setSelection(rangesToSelect);\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableWalker from './../tablewalker';\nimport { createEmptyTableCell, updateNumericAttribute } from '../utils/common';\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of the table cells extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as a child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extend beyond their section.\n * 2. It will add empty table cells to the rows that are narrower than the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or a part of a table) to the editor from external sources.\n *\n * For example, see the following table which has a cell (FOO) with the rowspan attribute (2):\n *\n * ```xml\n * <table headingRows=\"1\">\n *   <tableRow>\n *     <tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *     <tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *   </tableRow>\n *   <tableRow>\n *     <tableCell><paragraph>BAZ</paragraph></tableCell>\n *     <tableCell><paragraph>XYZ</paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * It will be rendered in the view as:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * In the above example the table will be rendered as a table with two rows: one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would extend from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is the default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ in the content will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table row sizes (the number of columns).\n * The size of a table row is calculated by counting column spans of table cells, both horizontal (from the same row) and\n * vertical (from the rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header: it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and the second with colspan (2).\n * The table cell (FOO) does not extend beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * ## Collaboration and undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without a deeper analysis of the nature of the change. As such, it might lead\n * to a structure which was not intended by the user. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which the editor content might not return to the original state.\n *\n * This will usually happen when one or more users change the size of the table.\n *\n * As an example see the table below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * and the user actions:\n *\n * 1. Both users have a table with two rows and two columns.\n * 2. User A adds a column at the end of the table. This will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table. This will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * The last row is shorter then others so the table post-fixer will add an empty row to the last row:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by the post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * Unfortunately undo does not know the nature of the changes and depending on which user applies the post-fixer changes, undoing them\n * might lead to a broken table. If User B undoes inserting the column to the table, the undo engine will undo only the operations of\n * inserting empty cells to rows from the initial table state (row 1 and 2) but the cell in the post-fixed row will remain:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * After undo, the table post-fixer will detect that two rows are shorter than others and will fix the table to:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n */\nexport default function injectTableLayoutPostFixer(model) {\n    model.document.registerPostFixer(writer => tableLayoutPostFixer(writer, model));\n}\n/**\n * The table layout post-fixer.\n */\nfunction tableLayoutPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    // Do not analyze the same table more then once - may happen for multiple changes in the same table.\n    const analyzedTables = new Set();\n    for (const entry of changes) {\n        let table = null;\n        if (entry.type == 'insert' && entry.name == 'table') {\n            table = entry.position.nodeAfter;\n        }\n        // Fix table on adding/removing table cells and rows.\n        if ((entry.type == 'insert' || entry.type == 'remove') && (entry.name == 'tableRow' || entry.name == 'tableCell')) {\n            table = entry.position.findAncestor('table');\n        }\n        // Fix table on any table's attribute change - including attributes of table cells.\n        if (isTableAttributeEntry(entry)) {\n            table = entry.range.start.findAncestor('table');\n        }\n        if (table && !analyzedTables.has(table)) {\n            // Step 1: correct rowspans of table cells if necessary.\n            // The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n            wasFixed = fixTableCellsRowspan(table, writer) || wasFixed;\n            // Step 2: fix table rows sizes.\n            wasFixed = fixTableRowsSizes(table, writer) || wasFixed;\n            analyzedTables.add(table);\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes the invalid value of the `rowspan` attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n *\n * @returns Returns `true` if the table was fixed.\n */\nfunction fixTableCellsRowspan(table, writer) {\n    let wasFixed = false;\n    const cellsToTrim = findCellsToTrim(table);\n    if (cellsToTrim.length) {\n        // @if CK_DEBUG_TABLE // console.log( `Post-fixing table: trimming cells row-spans (${ cellsToTrim.length }).` );\n        wasFixed = true;\n        for (const data of cellsToTrim) {\n            updateNumericAttribute('rowspan', data.rowspan, data.cell, writer, 1);\n        }\n    }\n    return wasFixed;\n}\n/**\n * Makes all table rows in a table the same size.\n *\n * @returns Returns `true` if the table was fixed.\n */\nfunction fixTableRowsSizes(table, writer) {\n    let wasFixed = false;\n    const childrenLengths = getChildrenLengths(table);\n    const rowsToRemove = [];\n    // Find empty rows.\n    for (const [rowIndex, size] of childrenLengths.entries()) {\n        // Ignore all non-row models.\n        if (!size && table.getChild(rowIndex).is('element', 'tableRow')) {\n            rowsToRemove.push(rowIndex);\n        }\n    }\n    // Remove empty rows.\n    if (rowsToRemove.length) {\n        // @if CK_DEBUG_TABLE // console.log( `Post-fixing table: remove empty rows (${ rowsToRemove.length }).` );\n        wasFixed = true;\n        for (const rowIndex of rowsToRemove.reverse()) {\n            writer.remove(table.getChild(rowIndex));\n            childrenLengths.splice(rowIndex, 1);\n        }\n    }\n    // Filter out everything that's not a table row.\n    const rowsLengths = childrenLengths.filter((row, rowIndex) => table.getChild(rowIndex).is('element', 'tableRow'));\n    // Verify if all the rows have the same number of columns.\n    const tableSize = rowsLengths[0];\n    const isValid = rowsLengths.every(length => length === tableSize);\n    if (!isValid) {\n        // @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: adding missing cells.' );\n        // Find the maximum number of columns.\n        const maxColumns = rowsLengths.reduce((prev, current) => current > prev ? current : prev, 0);\n        for (const [rowIndex, size] of rowsLengths.entries()) {\n            const columnsToInsert = maxColumns - size;\n            if (columnsToInsert) {\n                for (let i = 0; i < columnsToInsert; i++) {\n                    createEmptyTableCell(writer, writer.createPositionAt(table.getChild(rowIndex), 'end'));\n                }\n                wasFixed = true;\n            }\n        }\n    }\n    return wasFixed;\n}\n/**\n * Searches for table cells that extend beyond the table section to which they belong to. It will return an array of objects\n * that stores table cells to be trimmed and the correct value of the `rowspan` attribute to set.\n */\nfunction findCellsToTrim(table) {\n    const headingRows = parseInt(table.getAttribute('headingRows') || '0');\n    const maxRows = Array.from(table.getChildren())\n        .reduce((count, row) => row.is('element', 'tableRow') ? count + 1 : count, 0);\n    const cellsToTrim = [];\n    for (const { row, cell, cellHeight } of new TableWalker(table)) {\n        // Skip cells that do not expand over its row.\n        if (cellHeight < 2) {\n            continue;\n        }\n        const isInHeader = row < headingRows;\n        // Row limit is either end of header section or whole table as table body is after the header.\n        const rowLimit = isInHeader ? headingRows : maxRows;\n        // If table cell expands over its limit reduce it height to proper value.\n        if (row + cellHeight > rowLimit) {\n            const newRowspan = rowLimit - row;\n            cellsToTrim.push({ cell, rowspan: newRowspan });\n        }\n    }\n    return cellsToTrim;\n}\n/**\n * Returns an array with lengths of rows assigned to the corresponding row index.\n */\nfunction getChildrenLengths(table) {\n    // TableWalker will not provide items for the empty rows, we need to pre-fill this array.\n    const lengths = new Array(table.childCount).fill(0);\n    for (const { rowIndex } of new TableWalker(table, { includeAllSlots: true })) {\n        lengths[rowIndex]++;\n    }\n    return lengths;\n}\n/**\n * Checks if the differ entry for an attribute change is one of the table's attributes.\n */\nfunction isTableAttributeEntry(entry) {\n    if (entry.type !== 'attribute') {\n        return false;\n    }\n    const key = entry.attributeKey;\n    return key === 'headingRows' || key === 'colspan' || key === 'rowspan';\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Injects a table cell post-fixer into the model which inserts a `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have an empty `paragraph` as a child.\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * Will be fixed to:\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell><paragraph></paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n */\nexport default function injectTableCellParagraphPostFixer(model) {\n    model.document.registerPostFixer(writer => tableCellContentsPostFixer(writer, model));\n}\n/**\n * The table cell contents post-fixer.\n */\nfunction tableCellContentsPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    for (const entry of changes) {\n        if (entry.type == 'insert' && entry.name == 'table') {\n            wasFixed = fixTable(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if (entry.type == 'insert' && entry.name == 'tableRow') {\n            wasFixed = fixTableRow(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if (entry.type == 'insert' && entry.name == 'tableCell') {\n            wasFixed = fixTableCellContent(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if ((entry.type == 'remove' || entry.type == 'insert') && checkTableCellChange(entry)) {\n            wasFixed = fixTableCellContent(entry.position.parent, writer) || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cells in a table.\n */\nfunction fixTable(table, writer) {\n    let wasFixed = false;\n    for (const row of table.getChildren()) {\n        if (row.is('element', 'tableRow')) {\n            wasFixed = fixTableRow(row, writer) || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cells in a table row.\n */\nfunction fixTableRow(tableRow, writer) {\n    let wasFixed = false;\n    for (const tableCell of tableRow.getChildren()) {\n        wasFixed = fixTableCellContent(tableCell, writer) || wasFixed;\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cell content by:\n * - Adding a paragraph to a table cell without any child.\n * - Wrapping direct $text in a `<paragraph>`.\n */\nfunction fixTableCellContent(tableCell, writer) {\n    // Insert paragraph to an empty table cell.\n    if (tableCell.childCount == 0) {\n        // @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: insert paragraph in empty cell.' );\n        writer.insertElement('paragraph', tableCell);\n        return true;\n    }\n    // Check table cell children for directly placed text nodes.\n    // Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n    const textNodes = Array.from(tableCell.getChildren()).filter(child => child.is('$text'));\n    // @if CK_DEBUG_TABLE // textNodes.length && console.log( 'Post-fixing table: wrap cell content with paragraph.' );\n    for (const child of textNodes) {\n        writer.wrap(writer.createRangeOn(child), 'paragraph');\n    }\n    // Return true when there were text nodes to fix.\n    return !!textNodes.length;\n}\n/**\n * Checks if a differ change should fix the table cell. This happens on:\n * - Removing content from the table cell (i.e. `tableCell` can be left empty).\n * - Adding a text node directly into a table cell.\n */\nfunction checkTableCellChange(entry) {\n    if (!entry.position.parent.is('element', 'tableCell')) {\n        return false;\n    }\n    return entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableWalker from '../tablewalker';\n/**\n * A table headings refresh handler which marks the table cells or rows in the differ to have it re-rendered\n * if the headings attribute changed.\n *\n * Table heading rows and heading columns are represented in the model by a `headingRows` and `headingColumns` attributes.\n *\n * When table headings attribute changes, all the cells/rows are marked to re-render to change between `<td>` and `<th>`.\n */\nexport default function tableHeadingsRefreshHandler(model, editing) {\n    const differ = model.document.differ;\n    for (const change of differ.getChanges()) {\n        let table;\n        let isRowChange = false;\n        if (change.type == 'attribute') {\n            const element = change.range.start.nodeAfter;\n            if (!element || !element.is('element', 'table')) {\n                continue;\n            }\n            if (change.attributeKey != 'headingRows' && change.attributeKey != 'headingColumns') {\n                continue;\n            }\n            table = element;\n            isRowChange = change.attributeKey == 'headingRows';\n        }\n        else if (change.name == 'tableRow' || change.name == 'tableCell') {\n            table = change.position.findAncestor('table');\n            isRowChange = change.name == 'tableRow';\n        }\n        if (!table) {\n            continue;\n        }\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const headingColumns = table.getAttribute('headingColumns') || 0;\n        const tableWalker = new TableWalker(table);\n        for (const tableSlot of tableWalker) {\n            const isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n            const expectedElementName = isHeading ? 'th' : 'td';\n            const viewElement = editing.mapper.toViewElement(tableSlot.cell);\n            if (viewElement && viewElement.is('element') && viewElement.name != expectedElementName) {\n                editing.reconvertItem((isRowChange ? tableSlot.cell.parent : tableSlot.cell));\n            }\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { isSingleParagraphWithoutAttributes } from './downcast';\n/**\n * A table cell refresh handler which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it does not have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added, we need to ensure that the first `paragraph` is\n * re-rendered so it changes from `<span>` to `<p>`. The easiest way to do it is to re-render the entire table cell.\n */\nexport default function tableCellRefreshHandler(model, editing) {\n    const differ = model.document.differ;\n    // Stores cells to be refreshed, so the table cell will be refreshed once for multiple changes.\n    const cellsToCheck = new Set();\n    for (const change of differ.getChanges()) {\n        const parent = change.type == 'attribute' ? change.range.start.parent : change.position.parent;\n        if (parent.is('element', 'tableCell')) {\n            cellsToCheck.add(parent);\n        }\n    }\n    for (const tableCell of cellsToCheck.values()) {\n        const paragraphsToRefresh = Array.from(tableCell.getChildren())\n            .filter(child => shouldRefresh(child, editing.mapper));\n        for (const paragraph of paragraphsToRefresh) {\n            editing.reconvertItem(paragraph);\n        }\n    }\n}\n/**\n * Check if given model element needs refreshing.\n */\nfunction shouldRefresh(child, mapper) {\n    if (!child.is('element', 'paragraph')) {\n        return false;\n    }\n    const viewElement = mapper.toViewElement(child);\n    if (!viewElement) {\n        return false;\n    }\n    return isSingleParagraphWithoutAttributes(child) !== viewElement.is('element', 'span');\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport upcastTable, { ensureParagraphInTableCell, skipEmptyTableRow, upcastTableFigure } from './converters/upcasttable';\nimport { convertParagraphInTableCell, downcastCell, downcastRow, downcastTable } from './converters/downcast';\nimport InsertTableCommand from './commands/inserttablecommand';\nimport InsertRowCommand from './commands/insertrowcommand';\nimport InsertColumnCommand from './commands/insertcolumncommand';\nimport SplitCellCommand from './commands/splitcellcommand';\nimport MergeCellCommand from './commands/mergecellcommand';\nimport RemoveRowCommand from './commands/removerowcommand';\nimport RemoveColumnCommand from './commands/removecolumncommand';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand';\nimport MergeCellsCommand from './commands/mergecellscommand';\nimport SelectRowCommand from './commands/selectrowcommand';\nimport SelectColumnCommand from './commands/selectcolumncommand';\nimport TableUtils from '../src/tableutils';\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer';\nimport injectTableCellParagraphPostFixer from './converters/table-cell-paragraph-post-fixer';\nimport tableHeadingsRefreshHandler from './converters/table-headings-refresh-handler';\nimport tableCellRefreshHandler from './converters/table-cell-refresh-handler';\nimport '../theme/tableediting.css';\n/**\n * The table editing feature.\n */\nexport default class TableEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableUtils];\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this._additionalSlots = [];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const conversion = editor.conversion;\n        const tableUtils = editor.plugins.get(TableUtils);\n        schema.register('table', {\n            inheritAllFrom: '$blockObject',\n            allowAttributes: ['headingRows', 'headingColumns']\n        });\n        schema.register('tableRow', {\n            allowIn: 'table',\n            isLimit: true\n        });\n        schema.register('tableCell', {\n            allowContentOf: '$container',\n            allowIn: 'tableRow',\n            allowAttributes: ['colspan', 'rowspan'],\n            isLimit: true,\n            isSelectable: true\n        });\n        // Figure conversion.\n        conversion.for('upcast').add(upcastTableFigure());\n        // Table conversion.\n        conversion.for('upcast').add(upcastTable());\n        conversion.for('editingDowncast').elementToStructure({\n            model: {\n                name: 'table',\n                attributes: ['headingRows']\n            },\n            view: downcastTable(tableUtils, {\n                asWidget: true,\n                additionalSlots: this._additionalSlots\n            })\n        });\n        conversion.for('dataDowncast').elementToStructure({\n            model: {\n                name: 'table',\n                attributes: ['headingRows']\n            },\n            view: downcastTable(tableUtils, {\n                additionalSlots: this._additionalSlots\n            })\n        });\n        // Table row conversion.\n        conversion.for('upcast').elementToElement({ model: 'tableRow', view: 'tr' });\n        conversion.for('upcast').add(skipEmptyTableRow());\n        conversion.for('downcast').elementToElement({\n            model: 'tableRow',\n            view: downcastRow()\n        });\n        // Table cell conversion.\n        conversion.for('upcast').elementToElement({ model: 'tableCell', view: 'td' });\n        conversion.for('upcast').elementToElement({ model: 'tableCell', view: 'th' });\n        conversion.for('upcast').add(ensureParagraphInTableCell('td'));\n        conversion.for('upcast').add(ensureParagraphInTableCell('th'));\n        conversion.for('editingDowncast').elementToElement({\n            model: 'tableCell',\n            view: downcastCell({ asWidget: true })\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'tableCell',\n            view: downcastCell()\n        });\n        // Duplicates code - needed to properly refresh paragraph inside a table cell.\n        conversion.for('editingDowncast').elementToElement({\n            model: 'paragraph',\n            view: convertParagraphInTableCell({ asWidget: true }),\n            converterPriority: 'high'\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'paragraph',\n            view: convertParagraphInTableCell(),\n            converterPriority: 'high'\n        });\n        // Table attributes conversion.\n        conversion.for('downcast').attributeToAttribute({ model: 'colspan', view: 'colspan' });\n        conversion.for('upcast').attributeToAttribute({\n            model: { key: 'colspan', value: upcastCellSpan('colspan') },\n            view: 'colspan'\n        });\n        conversion.for('downcast').attributeToAttribute({ model: 'rowspan', view: 'rowspan' });\n        conversion.for('upcast').attributeToAttribute({\n            model: { key: 'rowspan', value: upcastCellSpan('rowspan') },\n            view: 'rowspan'\n        });\n        // Define the config.\n        editor.config.define('table.defaultHeadings.rows', 0);\n        editor.config.define('table.defaultHeadings.columns', 0);\n        // Define all the commands.\n        editor.commands.add('insertTable', new InsertTableCommand(editor));\n        editor.commands.add('insertTableRowAbove', new InsertRowCommand(editor, { order: 'above' }));\n        editor.commands.add('insertTableRowBelow', new InsertRowCommand(editor, { order: 'below' }));\n        editor.commands.add('insertTableColumnLeft', new InsertColumnCommand(editor, { order: 'left' }));\n        editor.commands.add('insertTableColumnRight', new InsertColumnCommand(editor, { order: 'right' }));\n        editor.commands.add('removeTableRow', new RemoveRowCommand(editor));\n        editor.commands.add('removeTableColumn', new RemoveColumnCommand(editor));\n        editor.commands.add('splitTableCellVertically', new SplitCellCommand(editor, { direction: 'vertically' }));\n        editor.commands.add('splitTableCellHorizontally', new SplitCellCommand(editor, { direction: 'horizontally' }));\n        editor.commands.add('mergeTableCells', new MergeCellsCommand(editor));\n        editor.commands.add('mergeTableCellRight', new MergeCellCommand(editor, { direction: 'right' }));\n        editor.commands.add('mergeTableCellLeft', new MergeCellCommand(editor, { direction: 'left' }));\n        editor.commands.add('mergeTableCellDown', new MergeCellCommand(editor, { direction: 'down' }));\n        editor.commands.add('mergeTableCellUp', new MergeCellCommand(editor, { direction: 'up' }));\n        editor.commands.add('setTableColumnHeader', new SetHeaderColumnCommand(editor));\n        editor.commands.add('setTableRowHeader', new SetHeaderRowCommand(editor));\n        editor.commands.add('selectTableRow', new SelectRowCommand(editor));\n        editor.commands.add('selectTableColumn', new SelectColumnCommand(editor));\n        injectTableLayoutPostFixer(model);\n        injectTableCellParagraphPostFixer(model);\n        this.listenTo(model.document, 'change:data', () => {\n            tableHeadingsRefreshHandler(model, editor.editing);\n            tableCellRefreshHandler(model, editor.editing);\n        });\n    }\n    /**\n     * Registers downcast handler for the additional table slot.\n     */\n    registerAdditionalSlot(slotHandler) {\n        this._additionalSlots.push(slotHandler);\n    }\n}\n/**\n * Returns fixed colspan and rowspan attrbutes values.\n *\n * @param type colspan or rowspan.\n * @returns conversion value function.\n */\nfunction upcastCellSpan(type) {\n    return (cell) => {\n        const span = parseInt(cell.getAttribute(type));\n        if (Number.isNaN(span) || span <= 0) {\n            return null;\n        }\n        return span;\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/ui/inserttableview\n */\nimport { View, ButtonView, addKeyboardHandlingForGrid } from 'ckeditor5/src/ui';\nimport { KeystrokeHandler, FocusTracker } from 'ckeditor5/src/utils';\nimport './../../theme/inserttable.css';\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n */\nexport default class InsertTableView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.items = this._createGridCollection();\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.set('rows', 0);\n        this.set('columns', 0);\n        this.bind('label').to(this, 'columns', this, 'rows', (columns, rows) => `${rows} × ${columns}`);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: ['ck']\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: ['ck-insert-table-dropdown__grid']\n                    },\n                    on: {\n                        'mouseover@.ck-insert-table-dropdown-grid-box': bind.to('boxover')\n                    },\n                    children: this.items\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-insert-table-dropdown__label'\n                        ],\n                        'aria-hidden': true\n                    },\n                    children: [\n                        {\n                            text: bind.to('label')\n                        }\n                    ]\n                }\n            ],\n            on: {\n                mousedown: bind.to(evt => {\n                    evt.preventDefault();\n                }),\n                click: bind.to(() => {\n                    this.fire('execute');\n                })\n            }\n        });\n        // #rows and #columns are set via changes to #focusTracker on mouse over.\n        this.on('boxover', (evt, domEvt) => {\n            const { row, column } = domEvt.target.dataset;\n            this.items.get((parseInt(row, 10) - 1) * 10 + (parseInt(column, 10) - 1)).focus();\n        });\n        // This allows the #rows and #columns to be updated when:\n        // * the user navigates the grid using the keyboard,\n        // * the user moves the mouse over grid items.\n        this.focusTracker.on('change:focusedElement', (evt, name, focusedElement) => {\n            if (!focusedElement) {\n                return;\n            }\n            const { row, column } = focusedElement.dataset;\n            // As row & column indexes are zero-based transform it to number of selected rows & columns.\n            this.set({\n                rows: parseInt(row),\n                columns: parseInt(column)\n            });\n        });\n        this.on('change:columns', () => this._highlightGridBoxes());\n        this.on('change:rows', () => this._highlightGridBoxes());\n    }\n    render() {\n        super.render();\n        addKeyboardHandlingForGrid({\n            keystrokeHandler: this.keystrokes,\n            focusTracker: this.focusTracker,\n            gridItems: this.items,\n            numberOfColumns: 10,\n            uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n        });\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    focus() {\n        this.items.get(0).focus();\n    }\n    /**\n     * @inheritDoc\n     */\n    focusLast() {\n        this.items.get(0).focus();\n    }\n    /**\n     * Highlights grid boxes depending on rows and columns selected.\n     */\n    _highlightGridBoxes() {\n        const rows = this.rows;\n        const columns = this.columns;\n        this.items.map((boxView, index) => {\n            // Translate box index to the row & column index.\n            const itemRow = Math.floor(index / 10);\n            const itemColumn = index % 10;\n            // Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n            const isOn = itemRow < rows && itemColumn < columns;\n            boxView.set('isOn', isOn);\n        });\n    }\n    /**\n     * Creates a new Button for the grid.\n     *\n     * @param locale The locale instance.\n     * @param row Row number.\n     * @param column Column number.\n     * @param label The grid button label.\n     */\n    _createGridButton(locale, row, column, label) {\n        const button = new ButtonView(locale);\n        button.set({\n            label,\n            class: 'ck-insert-table-dropdown-grid-box'\n        });\n        button.extendTemplate({\n            attributes: {\n                'data-row': row,\n                'data-column': column\n            }\n        });\n        return button;\n    }\n    /**\n     * @returns A view collection containing boxes to be placed in a table grid.\n     */\n    _createGridCollection() {\n        const boxes = [];\n        // Add grid boxes to table selection view.\n        for (let index = 0; index < 100; index++) {\n            const row = Math.floor(index / 10);\n            const column = index % 10;\n            const label = `${row + 1} × ${column + 1}`;\n            boxes.push(this._createGridButton(this.locale, row + 1, column + 1, label));\n        }\n        return this.createCollection(boxes);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addListToDropdown, createDropdown, Model, SplitButtonView, SwitchButtonView } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport InsertTableView from './ui/inserttableview';\nimport tableIcon from './../theme/icons/table.svg';\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` split button.\n *\n * The `'tableColumn'`, `'tableRow'` and `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n */\nexport default class TableUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        const contentLanguageDirection = editor.locale.contentLanguageDirection;\n        const isContentLtr = contentLanguageDirection === 'ltr';\n        editor.ui.componentFactory.add('insertTable', locale => {\n            const command = editor.commands.get('insertTable');\n            const dropdownView = createDropdown(locale);\n            dropdownView.bind('isEnabled').to(command);\n            // Decorate dropdown's button.\n            dropdownView.buttonView.set({\n                icon: tableIcon,\n                label: t('Insert table'),\n                tooltip: true\n            });\n            let insertTableView;\n            dropdownView.on('change:isOpen', () => {\n                if (insertTableView) {\n                    return;\n                }\n                // Prepare custom view for dropdown's panel.\n                insertTableView = new InsertTableView(locale);\n                dropdownView.panelView.children.add(insertTableView);\n                insertTableView.delegate('execute').to(dropdownView);\n                dropdownView.on('execute', () => {\n                    editor.execute('insertTable', { rows: insertTableView.rows, columns: insertTableView.columns });\n                    editor.editing.view.focus();\n                });\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('tableColumn', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableColumnHeader',\n                        label: t('Header column'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n                        label: t('Insert column left')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n                        label: t('Insert column right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableColumn',\n                        label: t('Delete column')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'selectTableColumn',\n                        label: t('Select column')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Column'), tableColumnIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('tableRow', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableRowHeader',\n                        label: t('Header row'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowAbove',\n                        label: t('Insert row above')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowBelow',\n                        label: t('Insert row below')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableRow',\n                        label: t('Delete row')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'selectTableRow',\n                        label: t('Select row')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Row'), tableRowIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('mergeTableCells', locale => {\n            const options = [\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellUp',\n                        label: t('Merge cell up')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n                        label: t('Merge cell right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellDown',\n                        label: t('Merge cell down')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n                        label: t('Merge cell left')\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellVertically',\n                        label: t('Split cell vertically')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellHorizontally',\n                        label: t('Split cell horizontally')\n                    }\n                }\n            ];\n            return this._prepareMergeSplitButtonDropdown(t('Merge cells'), tableMergeCellIcon, options, locale);\n        });\n    }\n    /**\n     * Creates a dropdown view from a set of options.\n     *\n     * @param label The dropdown button label.\n     * @param icon An icon for the dropdown button.\n     * @param options The list of options for the dropdown.\n     */\n    _prepareDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale);\n        const commands = this._fillDropdownWithListOptions(dropdownView, options);\n        // Decorate dropdown's button.\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        // Make dropdown button disabled when all options are disabled.\n        dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n            return areEnabled.some(isEnabled => isEnabled);\n        });\n        this.listenTo(dropdownView, 'execute', evt => {\n            editor.execute(evt.source.commandName);\n            // Toggling a switch button view should not move the focus to the editable.\n            if (!(evt.source instanceof SwitchButtonView)) {\n                editor.editing.view.focus();\n            }\n        });\n        return dropdownView;\n    }\n    /**\n     * Creates a dropdown view with a {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} for\n     * merge (and split)–related commands.\n     *\n     * @param label The dropdown button label.\n     * @param icon An icon for the dropdown button.\n     * @param options The list of options for the dropdown.\n     */\n    _prepareMergeSplitButtonDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale, SplitButtonView);\n        const mergeCommandName = 'mergeTableCells';\n        // Main command.\n        const mergeCommand = editor.commands.get(mergeCommandName);\n        // Subcommands in the dropdown.\n        const commands = this._fillDropdownWithListOptions(dropdownView, options);\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true,\n            isEnabled: true\n        });\n        // Make dropdown button disabled when all options are disabled together with the main command.\n        dropdownView.bind('isEnabled').toMany([mergeCommand, ...commands], 'isEnabled', (...areEnabled) => {\n            return areEnabled.some(isEnabled => isEnabled);\n        });\n        // Merge selected table cells when the main part of the split button is clicked.\n        this.listenTo(dropdownView.buttonView, 'execute', () => {\n            editor.execute(mergeCommandName);\n            editor.editing.view.focus();\n        });\n        // Execute commands for events coming from the list in the dropdown panel.\n        this.listenTo(dropdownView, 'execute', evt => {\n            editor.execute(evt.source.commandName);\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    }\n    /**\n     * Injects a {@link module:ui/list/listview~ListView} into the passed dropdown with buttons\n     * which execute editor commands as configured in passed options.\n     *\n     * @param options The list of options for the dropdown.\n     * @returns Commands the list options are interacting with.\n     */\n    _fillDropdownWithListOptions(dropdownView, options) {\n        const editor = this.editor;\n        const commands = [];\n        const itemDefinitions = new Collection();\n        for (const option of options) {\n            addListOption(option, editor, commands, itemDefinitions);\n        }\n        addListToDropdown(dropdownView, itemDefinitions);\n        return commands;\n    }\n}\n/**\n * Adds an option to a list view.\n *\n * @param option A configuration option.\n * @param commands The list of commands to update.\n * @param itemDefinitions A collection of dropdown items to update with the given option.\n */\nfunction addListOption(option, editor, commands, itemDefinitions) {\n    if (option.type === 'button' || option.type === 'switchbutton') {\n        const model = option.model = new Model(option.model);\n        const { commandName, bindIsOn } = option.model;\n        const command = editor.commands.get(commandName);\n        commands.push(command);\n        model.set({ commandName });\n        model.bind('isEnabled').to(command);\n        if (bindIsOn) {\n            model.bind('isOn').to(command, 'value');\n        }\n        model.set({\n            withText: true\n        });\n    }\n    itemDefinitions.add(option);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableselection\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\nimport TableWalker from './tablewalker';\nimport TableUtils from './tableutils';\nimport { cropTableToDimensions, adjustLastRowIndex, adjustLastColumnIndex } from './utils/structure';\nimport '../theme/tableselection.css';\n/**\n * This plugin enables the advanced table cells, rows and columns selection.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport default class TableSelection extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableSelection';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableUtils, TableUtils];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        this.listenTo(model, 'deleteContent', (evt, args) => this._handleDeleteContent(evt, args), { priority: 'high' });\n        this.listenTo(view.document, 'insertText', (evt, data) => this._handleInsertTextEvent(evt, data), { priority: 'high' });\n        this._defineSelectionConverter();\n        this._enablePluginDisabling(); // sic!\n    }\n    /**\n     * Returns the currently selected table cells or `null` if it is not a table cells selection.\n     */\n    getSelectedTableCells() {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selection = this.editor.model.document.selection;\n        const selectedCells = tableUtils.getSelectedTableCells(selection);\n        if (selectedCells.length == 0) {\n            return null;\n        }\n        // This should never happen, but let's know if it ever happens.\n        // @if CK_DEBUG //\tif ( selectedCells.length != selection.rangeCount ) {\n        // @if CK_DEBUG //\t\tconsole.warn( 'Mixed selection warning. The selection contains table cells and some other ranges.' );\n        // @if CK_DEBUG //\t}\n        return selectedCells;\n    }\n    /**\n     * Returns the selected table fragment as a document fragment.\n     */\n    getSelectionAsFragment() {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selectedCells = this.getSelectedTableCells();\n        if (!selectedCells) {\n            return null;\n        }\n        return this.editor.model.change(writer => {\n            const documentFragment = writer.createDocumentFragment();\n            const { first: firstColumn, last: lastColumn } = tableUtils.getColumnIndexes(selectedCells);\n            const { first: firstRow, last: lastRow } = tableUtils.getRowIndexes(selectedCells);\n            const sourceTable = selectedCells[0].findAncestor('table');\n            let adjustedLastRow = lastRow;\n            let adjustedLastColumn = lastColumn;\n            // If the selection is rectangular there could be a case of all cells in the last row/column spanned over\n            // next row/column so the real lastRow/lastColumn should be updated.\n            if (tableUtils.isSelectionRectangular(selectedCells)) {\n                const dimensions = {\n                    firstColumn,\n                    lastColumn,\n                    firstRow,\n                    lastRow\n                };\n                adjustedLastRow = adjustLastRowIndex(sourceTable, dimensions);\n                adjustedLastColumn = adjustLastColumnIndex(sourceTable, dimensions);\n            }\n            const cropDimensions = {\n                startRow: firstRow,\n                startColumn: firstColumn,\n                endRow: adjustedLastRow,\n                endColumn: adjustedLastColumn\n            };\n            const table = cropTableToDimensions(sourceTable, cropDimensions, writer);\n            writer.insert(table, documentFragment, 0);\n            return documentFragment;\n        });\n    }\n    /**\n     * Sets the model selection based on given anchor and target cells (can be the same cell).\n     * Takes care of setting the backward flag.\n     *\n     * ```ts\n     * const modelRoot = editor.model.document.getRoot();\n     * const firstCell = modelRoot.getNodeByPath( [ 0, 0, 0 ] );\n     * const lastCell = modelRoot.getNodeByPath( [ 0, 0, 1 ] );\n     *\n     * const tableSelection = editor.plugins.get( 'TableSelection' );\n     * tableSelection.setCellSelection( firstCell, lastCell );\n     * ```\n     */\n    setCellSelection(anchorCell, targetCell) {\n        const cellsToSelect = this._getCellsToSelect(anchorCell, targetCell);\n        this.editor.model.change(writer => {\n            writer.setSelection(cellsToSelect.cells.map(cell => writer.createRangeOn(cell)), { backward: cellsToSelect.backward });\n        });\n    }\n    /**\n     * Returns the focus cell from the current selection.\n     */\n    getFocusCell() {\n        const selection = this.editor.model.document.selection;\n        const focusCellRange = [...selection.getRanges()].pop();\n        const element = focusCellRange.getContainedElement();\n        if (element && element.is('element', 'tableCell')) {\n            return element;\n        }\n        return null;\n    }\n    /**\n     * Returns the anchor cell from the current selection.\n     */\n    getAnchorCell() {\n        const selection = this.editor.model.document.selection;\n        const anchorCellRange = first(selection.getRanges());\n        const element = anchorCellRange.getContainedElement();\n        if (element && element.is('element', 'tableCell')) {\n            return element;\n        }\n        return null;\n    }\n    /**\n     * Defines a selection converter which marks the selected cells with a specific class.\n     *\n     * The real DOM selection is put in the last cell. Since the order of ranges is dependent on whether the\n     * selection is backward or not, the last cell will usually be close to the \"focus\" end of the selection\n     * (a selection has anchor and focus).\n     *\n     * The real DOM selection is then hidden with CSS.\n     */\n    _defineSelectionConverter() {\n        const editor = this.editor;\n        const highlighted = new Set();\n        editor.conversion.for('editingDowncast').add(dispatcher => dispatcher.on('selection', (evt, data, conversionApi) => {\n            const viewWriter = conversionApi.writer;\n            clearHighlightedTableCells(viewWriter);\n            const selectedCells = this.getSelectedTableCells();\n            if (!selectedCells) {\n                return;\n            }\n            for (const tableCell of selectedCells) {\n                const viewElement = conversionApi.mapper.toViewElement(tableCell);\n                viewWriter.addClass('ck-editor__editable_selected', viewElement);\n                highlighted.add(viewElement);\n            }\n            const lastViewCell = conversionApi.mapper.toViewElement(selectedCells[selectedCells.length - 1]);\n            viewWriter.setSelection(lastViewCell, 0);\n        }, { priority: 'lowest' }));\n        function clearHighlightedTableCells(viewWriter) {\n            for (const previouslyHighlighted of highlighted) {\n                viewWriter.removeClass('ck-editor__editable_selected', previouslyHighlighted);\n            }\n            highlighted.clear();\n        }\n    }\n    /**\n     * Creates a listener that reacts to changes in {@link #isEnabled} and, if the plugin was disabled,\n     * it collapses the multi-cell selection to a regular selection placed inside a table cell.\n     *\n     * This listener helps features that disable the table selection plugin bring the selection\n     * to a clear state they can work with (for instance, because they don't support multiple cell selection).\n     */\n    _enablePluginDisabling() {\n        const editor = this.editor;\n        this.on('change:isEnabled', () => {\n            if (!this.isEnabled) {\n                const selectedCells = this.getSelectedTableCells();\n                if (!selectedCells) {\n                    return;\n                }\n                editor.model.change(writer => {\n                    const position = writer.createPositionAt(selectedCells[0], 0);\n                    const range = editor.model.schema.getNearestSelectionRange(position);\n                    writer.setSelection(range);\n                });\n            }\n        });\n    }\n    /**\n     * Overrides the default `model.deleteContent()` behavior over a selected table fragment.\n     *\n     * @param args Delete content method arguments.\n     */\n    _handleDeleteContent(event, args) {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selection = args[0];\n        const options = args[1];\n        const model = this.editor.model;\n        const isBackward = !options || options.direction == 'backward';\n        const selectedTableCells = tableUtils.getSelectedTableCells(selection);\n        if (!selectedTableCells.length) {\n            return;\n        }\n        event.stop();\n        model.change(writer => {\n            const tableCellToSelect = selectedTableCells[isBackward ? selectedTableCells.length - 1 : 0];\n            model.change(writer => {\n                for (const tableCell of selectedTableCells) {\n                    model.deleteContent(writer.createSelection(tableCell, 'in'));\n                }\n            });\n            const rangeToSelect = model.schema.getNearestSelectionRange(writer.createPositionAt(tableCellToSelect, 0));\n            // Note: we ignore the case where rangeToSelect may be null because deleteContent() will always (unless someone broke it)\n            // create an empty paragraph to accommodate the selection.\n            if (selection.is('documentSelection')) {\n                writer.setSelection(rangeToSelect);\n            }\n            else {\n                selection.setTo(rangeToSelect);\n            }\n        });\n    }\n    /**\n     * This handler makes it possible to remove the content of all selected cells by starting to type.\n     * If you take a look at {@link #_defineSelectionConverter} you will find out that despite the multi-cell selection being set\n     * in the model, the view selection is collapsed in the last cell (because most browsers are unable to render multi-cell selections;\n     * yes, it's a hack).\n     *\n     * When multiple cells are selected in the model and the user starts to type, the\n     * {@link module:engine/view/document~Document#event:insertText} event carries information provided by the\n     * beforeinput DOM  event, that in turn only knows about this collapsed DOM selection in the last cell.\n     *\n     * As a result, the selected cells have no chance to be cleaned up. To fix this, this listener intercepts\n     * the event and injects the custom view selection in the data that translates correctly to the actual state\n     * of the multi-cell selection in the model.\n     *\n     * @param data Insert text event data.\n     */\n    _handleInsertTextEvent(evt, data) {\n        const editor = this.editor;\n        const selectedCells = this.getSelectedTableCells();\n        if (!selectedCells) {\n            return;\n        }\n        const view = editor.editing.view;\n        const mapper = editor.editing.mapper;\n        const viewRanges = selectedCells.map(tableCell => view.createRangeOn(mapper.toViewElement(tableCell)));\n        data.selection = view.createSelection(viewRanges);\n    }\n    /**\n     * Returns an array of table cells that should be selected based on the\n     * given anchor cell and target (focus) cell.\n     *\n     * The cells are returned in a reverse direction if the selection is backward.\n     */\n    _getCellsToSelect(anchorCell, targetCell) {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const startLocation = tableUtils.getCellLocation(anchorCell);\n        const endLocation = tableUtils.getCellLocation(targetCell);\n        const startRow = Math.min(startLocation.row, endLocation.row);\n        const endRow = Math.max(startLocation.row, endLocation.row);\n        const startColumn = Math.min(startLocation.column, endLocation.column);\n        const endColumn = Math.max(startLocation.column, endLocation.column);\n        // 2-dimensional array of the selected cells to ease flipping the order of cells for backward selections.\n        const selectionMap = new Array(endRow - startRow + 1).fill(null).map(() => []);\n        const walkerOptions = {\n            startRow,\n            endRow,\n            startColumn,\n            endColumn\n        };\n        for (const { row, cell } of new TableWalker(anchorCell.findAncestor('table'), walkerOptions)) {\n            selectionMap[row - startRow].push(cell);\n        }\n        const flipVertically = endLocation.row < startLocation.row;\n        const flipHorizontally = endLocation.column < startLocation.column;\n        if (flipVertically) {\n            selectionMap.reverse();\n        }\n        if (flipHorizontally) {\n            selectionMap.forEach(row => row.reverse());\n        }\n        return {\n            cells: selectionMap.flat(),\n            backward: flipVertically || flipHorizontally\n        };\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport TableSelection from './tableselection';\nimport TableWalker from './tablewalker';\nimport TableUtils from './tableutils';\nimport { cropTableToDimensions, getHorizontallyOverlappingCells, getVerticallyOverlappingCells, removeEmptyRowsColumns, splitHorizontally, splitVertically, trimTableCellIfNeeded, adjustLastRowIndex, adjustLastColumnIndex } from './utils/structure';\n/**\n * This plugin adds support for copying/cutting/pasting fragments of tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport default class TableClipboard extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableClipboard';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableSelection, TableUtils];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        this.listenTo(viewDocument, 'copy', (evt, data) => this._onCopyCut(evt, data));\n        this.listenTo(viewDocument, 'cut', (evt, data) => this._onCopyCut(evt, data));\n        this.listenTo(editor.model, 'insertContent', (evt, [content, selectable]) => this._onInsertContent(evt, content, selectable), { priority: 'high' });\n        this.decorate('_replaceTableSlotCell');\n    }\n    /**\n     * Copies table content to a clipboard on \"copy\" & \"cut\" events.\n     *\n     * @param evt An object containing information about the handled event.\n     * @param data Clipboard event data.\n     */\n    _onCopyCut(evt, data) {\n        const tableSelection = this.editor.plugins.get(TableSelection);\n        if (!tableSelection.getSelectedTableCells()) {\n            return;\n        }\n        if (evt.name == 'cut' && !this.editor.model.canEditAt(this.editor.model.document.selection)) {\n            return;\n        }\n        data.preventDefault();\n        evt.stop();\n        const dataController = this.editor.data;\n        const viewDocument = this.editor.editing.view.document;\n        const content = dataController.toView(tableSelection.getSelectionAsFragment());\n        viewDocument.fire('clipboardOutput', {\n            dataTransfer: data.dataTransfer,\n            content,\n            method: evt.name\n        });\n    }\n    /**\n     * Overrides default {@link module:engine/model/model~Model#insertContent `model.insertContent()`} method to handle pasting table inside\n     * selected table fragment.\n     *\n     * Depending on selected table fragment:\n     * - If a selected table fragment is smaller than paste table it will crop pasted table to match dimensions.\n     * - If dimensions are equal it will replace selected table fragment with a pasted table contents.\n     *\n     * @param content The content to insert.\n     * @param selectable The selection into which the content should be inserted.\n     * If not provided the current model document selection will be used.\n     */\n    _onInsertContent(evt, content, selectable) {\n        if (selectable && !selectable.is('documentSelection')) {\n            return;\n        }\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        // We might need to crop table before inserting so reference might change.\n        let pastedTable = this.getTableIfOnlyTableInContent(content, model);\n        if (!pastedTable) {\n            return;\n        }\n        const selectedTableCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        if (!selectedTableCells.length) {\n            removeEmptyRowsColumns(pastedTable, tableUtils);\n            return;\n        }\n        // Override default model.insertContent() handling at this point.\n        evt.stop();\n        model.change(writer => {\n            const pastedDimensions = {\n                width: tableUtils.getColumns(pastedTable),\n                height: tableUtils.getRows(pastedTable)\n            };\n            // Prepare the table for pasting.\n            const selection = prepareTableForPasting(selectedTableCells, pastedDimensions, writer, tableUtils);\n            // Beyond this point we operate on a fixed content table with rectangular selection and proper last row/column values.\n            const selectionHeight = selection.lastRow - selection.firstRow + 1;\n            const selectionWidth = selection.lastColumn - selection.firstColumn + 1;\n            // Crop pasted table if:\n            // - Pasted table dimensions exceeds selection area.\n            // - Pasted table has broken layout (ie some cells sticks out by the table dimensions established by the first and last row).\n            //\n            // Note: The table dimensions are established by the width of the first row and the total number of rows.\n            // It is possible to programmatically create a table that has rows which would have cells anchored beyond first row width but\n            // such table will not be created by other editing solutions.\n            const cropDimensions = {\n                startRow: 0,\n                startColumn: 0,\n                endRow: Math.min(selectionHeight, pastedDimensions.height) - 1,\n                endColumn: Math.min(selectionWidth, pastedDimensions.width) - 1\n            };\n            pastedTable = cropTableToDimensions(pastedTable, cropDimensions, writer);\n            // Content table to which we insert a pasted table.\n            const selectedTable = selectedTableCells[0].findAncestor('table');\n            const cellsToSelect = this._replaceSelectedCellsWithPasted(pastedTable, pastedDimensions, selectedTable, selection, writer);\n            if (this.editor.plugins.get('TableSelection').isEnabled) {\n                // Selection ranges must be sorted because the first and last selection ranges are considered\n                // as anchor/focus cell ranges for multi-cell selection.\n                const selectionRanges = tableUtils.sortRanges(cellsToSelect.map(cell => writer.createRangeOn(cell)));\n                writer.setSelection(selectionRanges);\n            }\n            else {\n                // Set selection inside first cell if multi-cell selection is disabled.\n                writer.setSelection(cellsToSelect[0], 0);\n            }\n        });\n    }\n    /**\n     * Replaces the part of selectedTable with pastedTable.\n     */\n    _replaceSelectedCellsWithPasted(pastedTable, pastedDimensions, selectedTable, selection, writer) {\n        const { width: pastedWidth, height: pastedHeight } = pastedDimensions;\n        // Holds two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n        const pastedTableLocationMap = createLocationMap(pastedTable, pastedWidth, pastedHeight);\n        const selectedTableMap = [...new TableWalker(selectedTable, {\n                startRow: selection.firstRow,\n                endRow: selection.lastRow,\n                startColumn: selection.firstColumn,\n                endColumn: selection.lastColumn,\n                includeAllSlots: true\n            })];\n        // Selection must be set to pasted cells (some might be removed or new created).\n        const cellsToSelect = [];\n        // Store next cell insert position.\n        let insertPosition;\n        // Content table replace cells algorithm iterates over a selected table fragment and:\n        //\n        // - Removes existing table cells at current slot (location).\n        // - Inserts cell from a pasted table for a matched slots.\n        //\n        // This ensures proper table geometry after the paste\n        for (const tableSlot of selectedTableMap) {\n            const { row, column } = tableSlot;\n            // Save the insert position for current row start.\n            if (column === selection.firstColumn) {\n                insertPosition = tableSlot.getPositionBefore();\n            }\n            // Map current table slot location to an pasted table slot location.\n            const pastedRow = row - selection.firstRow;\n            const pastedColumn = column - selection.firstColumn;\n            const pastedCell = pastedTableLocationMap[pastedRow % pastedHeight][pastedColumn % pastedWidth];\n            // Clone cell to insert (to duplicate its attributes and children).\n            // Cloning is required to support repeating pasted table content when inserting to a bigger selection.\n            const cellToInsert = pastedCell ? writer.cloneElement(pastedCell) : null;\n            // Replace the cell from the current slot with new table cell.\n            const newTableCell = this._replaceTableSlotCell(tableSlot, cellToInsert, insertPosition, writer);\n            // The cell was only removed.\n            if (!newTableCell) {\n                continue;\n            }\n            // Trim the cell if it's row/col-spans would exceed selection area.\n            trimTableCellIfNeeded(newTableCell, row, column, selection.lastRow, selection.lastColumn, writer);\n            cellsToSelect.push(newTableCell);\n            insertPosition = writer.createPositionAfter(newTableCell);\n        }\n        // If there are any headings, all the cells that overlap from heading must be splitted.\n        const headingRows = parseInt(selectedTable.getAttribute('headingRows') || '0');\n        const headingColumns = parseInt(selectedTable.getAttribute('headingColumns') || '0');\n        const areHeadingRowsIntersectingSelection = selection.firstRow < headingRows && headingRows <= selection.lastRow;\n        const areHeadingColumnsIntersectingSelection = selection.firstColumn < headingColumns && headingColumns <= selection.lastColumn;\n        if (areHeadingRowsIntersectingSelection) {\n            const columnsLimit = { first: selection.firstColumn, last: selection.lastColumn };\n            const newCells = doHorizontalSplit(selectedTable, headingRows, columnsLimit, writer, selection.firstRow);\n            cellsToSelect.push(...newCells);\n        }\n        if (areHeadingColumnsIntersectingSelection) {\n            const rowsLimit = { first: selection.firstRow, last: selection.lastRow };\n            const newCells = doVerticalSplit(selectedTable, headingColumns, rowsLimit, writer);\n            cellsToSelect.push(...newCells);\n        }\n        return cellsToSelect;\n    }\n    /**\n     * Replaces a single table slot.\n     *\n     * @returns Inserted table cell or null if slot should remain empty.\n     * @private\n     */\n    _replaceTableSlotCell(tableSlot, cellToInsert, insertPosition, writer) {\n        const { cell, isAnchor } = tableSlot;\n        // If the slot is occupied by a cell in a selected table - remove it.\n        // The slot of this cell will be either:\n        // - Replaced by a pasted table cell.\n        // - Spanned by a previously pasted table cell.\n        if (isAnchor) {\n            writer.remove(cell);\n        }\n        // There is no cell to insert (might be spanned by other cell in a pasted table) - advance to the next content table slot.\n        if (!cellToInsert) {\n            return null;\n        }\n        writer.insert(cellToInsert, insertPosition);\n        return cellToInsert;\n    }\n    /**\n     * Extracts the table for pasting into a table.\n     *\n     * @param content The content to insert.\n     * @param model The editor model.\n     */\n    getTableIfOnlyTableInContent(content, model) {\n        if (!content.is('documentFragment') && !content.is('element')) {\n            return null;\n        }\n        // Table passed directly.\n        if (content.is('element', 'table')) {\n            return content;\n        }\n        // We do not support mixed content when pasting table into table.\n        // See: https://github.com/ckeditor/ckeditor5/issues/6817.\n        if (content.childCount == 1 && content.getChild(0).is('element', 'table')) {\n            return content.getChild(0);\n        }\n        // If there are only whitespaces around a table then use that table for pasting.\n        const contentRange = model.createRangeIn(content);\n        for (const element of contentRange.getItems()) {\n            if (element.is('element', 'table')) {\n                // Stop checking if there is some content before table.\n                const rangeBefore = model.createRange(contentRange.start, model.createPositionBefore(element));\n                if (model.hasContent(rangeBefore, { ignoreWhitespaces: true })) {\n                    return null;\n                }\n                // Stop checking if there is some content after table.\n                const rangeAfter = model.createRange(model.createPositionAfter(element), contentRange.end);\n                if (model.hasContent(rangeAfter, { ignoreWhitespaces: true })) {\n                    return null;\n                }\n                // There wasn't any content neither before nor after.\n                return element;\n            }\n        }\n        return null;\n    }\n}\n/**\n * Prepares a table for pasting and returns adjusted selection dimensions.\n */\nfunction prepareTableForPasting(selectedTableCells, pastedDimensions, writer, tableUtils) {\n    const selectedTable = selectedTableCells[0].findAncestor('table');\n    const columnIndexes = tableUtils.getColumnIndexes(selectedTableCells);\n    const rowIndexes = tableUtils.getRowIndexes(selectedTableCells);\n    const selection = {\n        firstColumn: columnIndexes.first,\n        lastColumn: columnIndexes.last,\n        firstRow: rowIndexes.first,\n        lastRow: rowIndexes.last\n    };\n    // Single cell selected - expand selection to pasted table dimensions.\n    const shouldExpandSelection = selectedTableCells.length === 1;\n    if (shouldExpandSelection) {\n        selection.lastRow += pastedDimensions.height - 1;\n        selection.lastColumn += pastedDimensions.width - 1;\n        expandTableSize(selectedTable, selection.lastRow + 1, selection.lastColumn + 1, tableUtils);\n    }\n    // In case of expanding selection we do not reset the selection so in this case we will always try to fix selection\n    // like in the case of a non-rectangular area. This might be fixed by re-setting selected cells array but this shortcut is safe.\n    if (shouldExpandSelection || !tableUtils.isSelectionRectangular(selectedTableCells)) {\n        // For a non-rectangular selection (ie in which some cells sticks out from a virtual selection rectangle) we need to create\n        // a table layout that has a rectangular selection. This will split cells so the selection become rectangular.\n        // Beyond this point we will operate on fixed content table.\n        splitCellsToRectangularSelection(selectedTable, selection, writer);\n    }\n    // However a selected table fragment might be invalid if examined alone. Ie such table fragment:\n    //\n    //    +---+---+---+---+\n    //  0 | a | b | c | d |\n    //    +   +   +---+---+\n    //  1 |   | e | f | g |\n    //    +   +---+   +---+\n    //  2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n    //    +   +   +   +   +    so we need to return 3, not 2\n    //  3 |   |   |   |   |\n    //    +---+---+---+---+\n    //\n    // is invalid as the cells \"h\" and \"i\" have rowspans.\n    // This case needs only adjusting the selection dimension as the rest of the algorithm operates on empty slots also.\n    else {\n        selection.lastRow = adjustLastRowIndex(selectedTable, selection);\n        selection.lastColumn = adjustLastColumnIndex(selectedTable, selection);\n    }\n    return selection;\n}\n/**\n * Expand table (in place) to expected size.\n */\nfunction expandTableSize(table, expectedHeight, expectedWidth, tableUtils) {\n    const tableWidth = tableUtils.getColumns(table);\n    const tableHeight = tableUtils.getRows(table);\n    if (expectedWidth > tableWidth) {\n        tableUtils.insertColumns(table, {\n            at: tableWidth,\n            columns: expectedWidth - tableWidth\n        });\n    }\n    if (expectedHeight > tableHeight) {\n        tableUtils.insertRows(table, {\n            at: tableHeight,\n            rows: expectedHeight - tableHeight\n        });\n    }\n}\n/**\n * Returns two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n *\n * At given row & column location it might be one of:\n *\n * * cell - cell from pasted table anchored at this location.\n * * null - if no cell is anchored at this location.\n *\n * For instance, from a table below:\n *\n *   +----+----+----+----+\n *   | 00 | 01 | 02 | 03 |\n *   +    +----+----+----+\n *   |    | 11      | 13 |\n *   +----+         +----+\n *   | 20 |         | 23 |\n *   +----+----+----+----+\n *\n * The method will return an array (numbers represents cell element):\n *\n * ```ts\n * const map = [\n *   [ '00', '01', '02', '03' ],\n *   [ null, '11', null, '13' ],\n *   [ '20', null, null, '23' ]\n * ]\n * ```\n *\n * This allows for a quick access to table at give row & column. For instance to access table cell \"13\" from pasted table call:\n *\n * ```ts\n * const cell = map[ 1 ][ 3 ]\n * ```\n */\nfunction createLocationMap(table, width, height) {\n    // Create height x width (row x column) two-dimensional table to store cells.\n    const map = new Array(height).fill(null)\n        .map(() => new Array(width).fill(null));\n    for (const { column, row, cell } of new TableWalker(table)) {\n        map[row][column] = cell;\n    }\n    return map;\n}\n/**\n * Make selected cells rectangular by splitting the cells that stand out from a rectangular selection.\n *\n * In the table below a selection is shown with \"::\" and slots with anchor cells are named.\n *\n * +----+----+----+----+----+                    +----+----+----+----+----+\n * | 00 | 01 | 02 | 03      |                    | 00 | 01 | 02 | 03      |\n * +    +----+    +----+----+                    |    ::::::::::::::::----+\n * |    | 11 |    | 13 | 14 |                    |    ::11 |    | 13:: 14 |    <- first row\n * +----+----+    +    +----+                    +----::---|    |   ::----+\n * | 20 | 21 |    |    | 24 |   select cells:    | 20 ::21 |    |   :: 24 |\n * +----+----+    +----+----+     11 -> 33       +----::---|    |---::----+\n * | 30      |    | 33 | 34 |                    | 30 ::   |    | 33:: 34 |    <- last row\n * +         +    +----+    +                    |    ::::::::::::::::    +\n * |         |    | 43 |    |                    |         |    | 43 |    |\n * +----+----+----+----+----+                    +----+----+----+----+----+\n *                                                      ^          ^\n *                                                     first & last columns\n *\n * Will update table to:\n *\n *                       +----+----+----+----+----+\n *                       | 00 | 01 | 02 | 03      |\n *                       +    +----+----+----+----+\n *                       |    | 11 |    | 13 | 14 |\n *                       +----+----+    +    +----+\n *                       | 20 | 21 |    |    | 24 |\n *                       +----+----+    +----+----+\n *                       | 30 |    |    | 33 | 34 |\n *                       +    +----+----+----+    +\n *                       |    |    |    | 43 |    |\n *                       +----+----+----+----+----+\n *\n * In th example above:\n * - Cell \"02\" which have `rowspan = 4` must be trimmed at first and at after last row.\n * - Cell \"03\" which have `rowspan = 2` and `colspan = 2` must be trimmed at first column and after last row.\n * - Cells \"00\", \"03\" & \"30\" which cannot be cut by this algorithm as they are outside the trimmed area.\n * - Cell \"13\" cannot be cut as it is inside the trimmed area.\n */\nfunction splitCellsToRectangularSelection(table, dimensions, writer) {\n    const { firstRow, lastRow, firstColumn, lastColumn } = dimensions;\n    const rowIndexes = { first: firstRow, last: lastRow };\n    const columnIndexes = { first: firstColumn, last: lastColumn };\n    // 1. Split cells vertically in two steps as first step might create cells that needs to split again.\n    doVerticalSplit(table, firstColumn, rowIndexes, writer);\n    doVerticalSplit(table, lastColumn + 1, rowIndexes, writer);\n    // 2. Split cells horizontally in two steps as first step might create cells that needs to split again.\n    doHorizontalSplit(table, firstRow, columnIndexes, writer);\n    doHorizontalSplit(table, lastRow + 1, columnIndexes, writer, firstRow);\n}\nfunction doHorizontalSplit(table, splitRow, limitColumns, writer, startRow = 0) {\n    // If selection starts at first row then no split is needed.\n    if (splitRow < 1) {\n        return;\n    }\n    const overlappingCells = getVerticallyOverlappingCells(table, splitRow, startRow);\n    // Filter out cells that are not touching insides of the rectangular selection.\n    const cellsToSplit = overlappingCells.filter(({ column, cellWidth }) => isAffectedBySelection(column, cellWidth, limitColumns));\n    return cellsToSplit.map(({ cell }) => splitHorizontally(cell, splitRow, writer));\n}\nfunction doVerticalSplit(table, splitColumn, limitRows, writer) {\n    // If selection starts at first column then no split is needed.\n    if (splitColumn < 1) {\n        return;\n    }\n    const overlappingCells = getHorizontallyOverlappingCells(table, splitColumn);\n    // Filter out cells that are not touching insides of the rectangular selection.\n    const cellsToSplit = overlappingCells.filter(({ row, cellHeight }) => isAffectedBySelection(row, cellHeight, limitRows));\n    return cellsToSplit.map(({ cell, column }) => splitVertically(cell, column, splitColumn, writer));\n}\n/**\n * Checks if cell at given row (column) is affected by a rectangular selection defined by first/last column (row).\n *\n * The same check is used for row as for column.\n */\nfunction isAffectedBySelection(index, span, limit) {\n    const endIndex = index + span - 1;\n    const { first, last } = limit;\n    const isInsideSelection = index >= first && index <= last;\n    const overlapsSelectionFromOutside = index < first && endIndex >= first;\n    return isInsideSelection || overlapsSelectionFromOutside;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablekeyboard\n */\nimport TableSelection from './tableselection';\nimport TableWalker from './tablewalker';\nimport TableUtils from './tableutils';\nimport { Plugin } from 'ckeditor5/src/core';\nimport { getLocalizedArrowKeyCodeDirection } from 'ckeditor5/src/utils';\n/**\n * This plugin enables keyboard navigation for tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport default class TableKeyboard extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableKeyboard';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableSelection, TableUtils];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const view = this.editor.editing.view;\n        const viewDocument = view.document;\n        this.listenTo(viewDocument, 'arrowKey', (...args) => this._onArrowKey(...args), { context: 'table' });\n        this.listenTo(viewDocument, 'tab', (...args) => this._handleTabOnSelectedTable(...args), { context: 'figure' });\n        this.listenTo(viewDocument, 'tab', (...args) => this._handleTab(...args), { context: ['th', 'td'] });\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:tab tab} events for the <kbd>Tab</kbd> key executed\n     * when the table widget is selected.\n     */\n    _handleTabOnSelectedTable(bubblingEventInfo, domEventData) {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        if (!selectedElement || !selectedElement.is('element', 'table')) {\n            return;\n        }\n        domEventData.preventDefault();\n        domEventData.stopPropagation();\n        bubblingEventInfo.stop();\n        editor.model.change(writer => {\n            writer.setSelection(writer.createRangeIn(selectedElement.getChild(0).getChild(0)));\n        });\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:tab tab} events for the <kbd>Tab</kbd> key executed\n     * inside table cells.\n     */\n    _handleTab(bubblingEventInfo, domEventData) {\n        const editor = this.editor;\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        const selection = editor.model.document.selection;\n        const isForward = !domEventData.shiftKey;\n        let tableCell = tableUtils.getTableCellsContainingSelection(selection)[0];\n        if (!tableCell) {\n            tableCell = tableSelection.getFocusCell();\n        }\n        if (!tableCell) {\n            return;\n        }\n        domEventData.preventDefault();\n        domEventData.stopPropagation();\n        bubblingEventInfo.stop();\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const currentRowIndex = table.getChildIndex(tableRow);\n        const currentCellIndex = tableRow.getChildIndex(tableCell);\n        const isFirstCellInRow = currentCellIndex === 0;\n        if (!isForward && isFirstCellInRow && currentRowIndex === 0) {\n            // Set the selection over the whole table if the selection was in the first table cell.\n            editor.model.change(writer => {\n                writer.setSelection(writer.createRangeOn(table));\n            });\n            return;\n        }\n        const isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n        const isLastRow = currentRowIndex === tableUtils.getRows(table) - 1;\n        if (isForward && isLastRow && isLastCellInRow) {\n            editor.execute('insertTableRowBelow');\n            // Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n            // or it got overwritten) set the selection over the whole table to mirror the first cell case.\n            if (currentRowIndex === tableUtils.getRows(table) - 1) {\n                editor.model.change(writer => {\n                    writer.setSelection(writer.createRangeOn(table));\n                });\n                return;\n            }\n        }\n        let cellToFocus;\n        // Move to the first cell in the next row.\n        if (isForward && isLastCellInRow) {\n            const nextRow = table.getChild(currentRowIndex + 1);\n            cellToFocus = nextRow.getChild(0);\n        }\n        // Move to the last cell in the previous row.\n        else if (!isForward && isFirstCellInRow) {\n            const previousRow = table.getChild(currentRowIndex - 1);\n            cellToFocus = previousRow.getChild(previousRow.childCount - 1);\n        }\n        // Move to the next/previous cell.\n        else {\n            cellToFocus = tableRow.getChild(currentCellIndex + (isForward ? 1 : -1));\n        }\n        editor.model.change(writer => {\n            writer.setSelection(writer.createRangeIn(cellToFocus));\n        });\n    }\n    /**\n     * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\n     */\n    _onArrowKey(eventInfo, domEventData) {\n        const editor = this.editor;\n        const keyCode = domEventData.keyCode;\n        const direction = getLocalizedArrowKeyCodeDirection(keyCode, editor.locale.contentLanguageDirection);\n        const wasHandled = this._handleArrowKeys(direction, domEventData.shiftKey);\n        if (wasHandled) {\n            domEventData.preventDefault();\n            domEventData.stopPropagation();\n            eventInfo.stop();\n        }\n    }\n    /**\n     * Handles arrow keys to move the selection around the table.\n     *\n     * @param direction The direction of the arrow key.\n     * @param expandSelection If the current selection should be expanded.\n     * @returns Returns `true` if key was handled.\n     */\n    _handleArrowKeys(direction, expandSelection) {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const isForward = ['right', 'down'].includes(direction);\n        // In case one or more table cells are selected (from outside),\n        // move the selection to a cell adjacent to the selected table fragment.\n        const selectedCells = tableUtils.getSelectedTableCells(selection);\n        if (selectedCells.length) {\n            let focusCell;\n            if (expandSelection) {\n                focusCell = tableSelection.getFocusCell();\n            }\n            else {\n                focusCell = isForward ? selectedCells[selectedCells.length - 1] : selectedCells[0];\n            }\n            this._navigateFromCellInDirection(focusCell, direction, expandSelection);\n            return true;\n        }\n        // Abort if we're not in a table cell.\n        const tableCell = selection.focus.findAncestor('tableCell');\n        /* istanbul ignore if: paranoid check -- @preserve */\n        if (!tableCell) {\n            return false;\n        }\n        // When the selection is not collapsed.\n        if (!selection.isCollapsed) {\n            if (expandSelection) {\n                // Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n                // Selection for sure will not approach cell edge.\n                //\n                // With a special case when all cell content is selected - then selection should expand to the other cell.\n                // Note: When the entire cell gets selected using CTRL+A, the selection is always forward.\n                if (selection.isBackward == isForward && !selection.containsEntireContent(tableCell)) {\n                    return false;\n                }\n            }\n            else {\n                const selectedElement = selection.getSelectedElement();\n                // It will collapse for non-object selected so it's not going to move to other cell.\n                if (!selectedElement || !model.schema.isObject(selectedElement)) {\n                    return false;\n                }\n            }\n        }\n        // Let's check if the selection is at the beginning/end of the cell.\n        if (this._isSelectionAtCellEdge(selection, tableCell, isForward)) {\n            this._navigateFromCellInDirection(tableCell, direction, expandSelection);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns `true` if the selection is at the boundary of a table cell according to the navigation direction.\n     *\n     * @param selection The current selection.\n     * @param tableCell The current table cell element.\n     * @param isForward The expected navigation direction.\n     */\n    _isSelectionAtCellEdge(selection, tableCell, isForward) {\n        const model = this.editor.model;\n        const schema = this.editor.model.schema;\n        const focus = isForward ? selection.getLastPosition() : selection.getFirstPosition();\n        // If the current limit element is not table cell we are for sure not at the cell edge.\n        // Also `modifySelection` will not let us out of it.\n        if (!schema.getLimitElement(focus).is('element', 'tableCell')) {\n            const boundaryPosition = model.createPositionAt(tableCell, isForward ? 'end' : 0);\n            return boundaryPosition.isTouching(focus);\n        }\n        const probe = model.createSelection(focus);\n        model.modifySelection(probe, { direction: isForward ? 'forward' : 'backward' });\n        // If there was no change in the focus position, then it's not possible to move the selection there.\n        return focus.isEqual(probe.focus);\n    }\n    /**\n     * Moves the selection from the given table cell in the specified direction.\n     *\n     * @param focusCell The table cell that is current multi-cell selection focus.\n     * @param direction Direction in which selection should move.\n     * @param expandSelection If the current selection should be expanded. Default value is false.\n     */\n    _navigateFromCellInDirection(focusCell, direction, expandSelection = false) {\n        const model = this.editor.model;\n        const table = focusCell.findAncestor('table');\n        const tableMap = [...new TableWalker(table, { includeAllSlots: true })];\n        const { row: lastRow, column: lastColumn } = tableMap[tableMap.length - 1];\n        const currentCellInfo = tableMap.find(({ cell }) => cell == focusCell);\n        let { row, column } = currentCellInfo;\n        switch (direction) {\n            case 'left':\n                column--;\n                break;\n            case 'up':\n                row--;\n                break;\n            case 'right':\n                column += currentCellInfo.cellWidth;\n                break;\n            case 'down':\n                row += currentCellInfo.cellHeight;\n                break;\n        }\n        const isOutsideVertically = row < 0 || row > lastRow;\n        const isBeforeFirstCell = column < 0 && row <= 0;\n        const isAfterLastCell = column > lastColumn && row >= lastRow;\n        // Note that if the table cell at the end of a row is row-spanned then isAfterLastCell will never be true.\n        // However, we don't know if user was navigating on the last row or not, so let's stay in the table.\n        if (isOutsideVertically || isBeforeFirstCell || isAfterLastCell) {\n            model.change(writer => {\n                writer.setSelection(writer.createRangeOn(table));\n            });\n            return;\n        }\n        if (column < 0) {\n            column = expandSelection ? 0 : lastColumn;\n            row--;\n        }\n        else if (column > lastColumn) {\n            column = expandSelection ? lastColumn : 0;\n            row++;\n        }\n        const cellToSelect = tableMap.find(cellInfo => cellInfo.row == row && cellInfo.column == column).cell;\n        const isForward = ['right', 'down'].includes(direction);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        if (expandSelection && tableSelection.isEnabled) {\n            const anchorCell = tableSelection.getAnchorCell() || focusCell;\n            tableSelection.setCellSelection(anchorCell, cellToSelect);\n        }\n        else {\n            const positionToSelect = model.createPositionAt(cellToSelect, isForward ? 0 : 'end');\n            model.change(writer => {\n                writer.setSelection(positionToSelect);\n            });\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablemouse/mouseeventsobserver\n */\nimport { DomEventObserver } from 'ckeditor5/src/engine';\n/**\n * The mouse selection event observer.\n *\n * It registers listeners for the following DOM events:\n *\n * - `'mousemove'`\n * - `'mouseleave'`\n *\n * Note that this observer is disabled by default. To enable this observer, it needs to be added to\n * {@link module:engine/view/view~View} using the {@link module:engine/view/view~View#addObserver} method.\n *\n * The observer is registered by the {@link module:table/tableselection~TableSelection} plugin.\n */\nexport default class MouseEventsObserver extends DomEventObserver {\n    constructor() {\n        super(...arguments);\n        this.domEventType = [\n            'mousemove', 'mouseleave'\n        ];\n    }\n    /**\n     * @inheritDoc\n     */\n    onDomEvent(domEvent) {\n        this.fire(domEvent.type, domEvent);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablemouse\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport TableSelection from './tableselection';\nimport MouseEventsObserver from './tablemouse/mouseeventsobserver';\nimport TableUtils from './tableutils';\n/**\n * This plugin enables a table cells' selection with the mouse.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport default class TableMouse extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableMouse';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableSelection, TableUtils];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Currently the MouseObserver only handles `mousedown` and `mouseup` events.\n        // TODO move to the engine?\n        editor.editing.view.addObserver(MouseEventsObserver);\n        this._enableShiftClickSelection();\n        this._enableMouseDragSelection();\n    }\n    /**\n     * Enables making cells selection by <kbd>Shift</kbd>+click. Creates a selection from the cell which previously held\n     * the selection to the cell which was clicked. It can be the same cell, in which case it selects a single cell.\n     */\n    _enableShiftClickSelection() {\n        const editor = this.editor;\n        const tableUtils = editor.plugins.get(TableUtils);\n        let blockSelectionChange = false;\n        const tableSelection = editor.plugins.get(TableSelection);\n        this.listenTo(editor.editing.view.document, 'mousedown', (evt, domEventData) => {\n            const selection = editor.model.document.selection;\n            if (!this.isEnabled || !tableSelection.isEnabled) {\n                return;\n            }\n            if (!domEventData.domEvent.shiftKey) {\n                return;\n            }\n            const anchorCell = tableSelection.getAnchorCell() || tableUtils.getTableCellsContainingSelection(selection)[0];\n            if (!anchorCell) {\n                return;\n            }\n            const targetCell = this._getModelTableCellFromDomEvent(domEventData);\n            if (targetCell && haveSameTableParent(anchorCell, targetCell)) {\n                blockSelectionChange = true;\n                tableSelection.setCellSelection(anchorCell, targetCell);\n                domEventData.preventDefault();\n            }\n        });\n        this.listenTo(editor.editing.view.document, 'mouseup', () => {\n            blockSelectionChange = false;\n        });\n        // We need to ignore a `selectionChange` event that is fired after we render our new table cells selection.\n        // When downcasting table cells selection to the view, we put the view selection in the last selected cell\n        // in a place that may not be natively a \"correct\" location. This is – we put it directly in the `<td>` element.\n        // All browsers fire the native `selectionchange` event.\n        // However, all browsers except Safari return the selection in the exact place where we put it\n        // (even though it's visually normalized). Safari returns `<td><p>^foo` that makes our selection observer\n        // fire our `selectionChange` event (because the view selection that we set in the first step differs from the DOM selection).\n        // Since `selectionChange` is fired, we automatically update the model selection that moves it that paragraph.\n        // This breaks our dear cells selection.\n        //\n        // Theoretically this issue concerns only Safari that is the only browser that do normalize the selection.\n        // However, to avoid code branching and to have a good coverage for this event blocker, I enabled it for all browsers.\n        //\n        // Note: I'm keeping the `blockSelectionChange` state separately for shift+click and mouse drag (exact same logic)\n        // so I don't have to try to analyze whether they don't overlap in some weird cases. Probably they don't.\n        // But I have other things to do, like writing this comment.\n        this.listenTo(editor.editing.view.document, 'selectionChange', evt => {\n            if (blockSelectionChange) {\n                // @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n                evt.stop();\n            }\n        }, { priority: 'highest' });\n    }\n    /**\n     * Enables making cells selection by dragging.\n     *\n     * The selection is made only on mousemove. Mouse tracking is started on mousedown.\n     * However, the cells selection is enabled only after the mouse cursor left the anchor cell.\n     * Thanks to that normal text selection within one cell works just fine. However, you can still select\n     * just one cell by leaving the anchor cell and moving back to it.\n     */\n    _enableMouseDragSelection() {\n        const editor = this.editor;\n        let anchorCell, targetCell;\n        let beganCellSelection = false;\n        let blockSelectionChange = false;\n        const tableSelection = editor.plugins.get(TableSelection);\n        this.listenTo(editor.editing.view.document, 'mousedown', (evt, domEventData) => {\n            if (!this.isEnabled || !tableSelection.isEnabled) {\n                return;\n            }\n            // Make sure to not conflict with the shift+click listener and any other possible handler.\n            if (domEventData.domEvent.shiftKey || domEventData.domEvent.ctrlKey || domEventData.domEvent.altKey) {\n                return;\n            }\n            anchorCell = this._getModelTableCellFromDomEvent(domEventData);\n        });\n        this.listenTo(editor.editing.view.document, 'mousemove', (evt, domEventData) => {\n            if (!domEventData.domEvent.buttons) {\n                return;\n            }\n            if (!anchorCell) {\n                return;\n            }\n            const newTargetCell = this._getModelTableCellFromDomEvent(domEventData);\n            if (newTargetCell && haveSameTableParent(anchorCell, newTargetCell)) {\n                targetCell = newTargetCell;\n                // Switch to the cell selection mode after the mouse cursor left the anchor cell.\n                // Switch off only on mouseup (makes selecting a single cell possible).\n                if (!beganCellSelection && targetCell != anchorCell) {\n                    beganCellSelection = true;\n                }\n            }\n            // Yep, not making a cell selection yet. See method docs.\n            if (!beganCellSelection) {\n                return;\n            }\n            blockSelectionChange = true;\n            tableSelection.setCellSelection(anchorCell, targetCell);\n            domEventData.preventDefault();\n        });\n        this.listenTo(editor.editing.view.document, 'mouseup', () => {\n            beganCellSelection = false;\n            blockSelectionChange = false;\n            anchorCell = null;\n            targetCell = null;\n        });\n        // See the explanation in `_enableShiftClickSelection()`.\n        this.listenTo(editor.editing.view.document, 'selectionChange', evt => {\n            if (blockSelectionChange) {\n                // @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n                evt.stop();\n            }\n        }, { priority: 'highest' });\n    }\n    /**\n     * Returns the model table cell element based on the target element of the passed DOM event.\n     *\n     * @returns Returns the table cell or `undefined`.\n     */\n    _getModelTableCellFromDomEvent(domEventData) {\n        // Note: Work with positions (not element mapping) because the target element can be an attribute or other non-mapped element.\n        const viewTargetElement = domEventData.target;\n        const viewPosition = this.editor.editing.view.createPositionAt(viewTargetElement, 0);\n        const modelPosition = this.editor.editing.mapper.toModelPosition(viewPosition);\n        const modelElement = modelPosition.parent;\n        return modelElement.findAncestor('tableCell', { includeSelf: true });\n    }\n}\nfunction haveSameTableParent(cellA, cellB) {\n    return cellA.parent.parent == cellB.parent.parent;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/table\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Widget } from 'ckeditor5/src/widget';\nimport TableEditing from './tableediting';\nimport TableUI from './tableui';\nimport TableSelection from './tableselection';\nimport TableClipboard from './tableclipboard';\nimport TableKeyboard from './tablekeyboard';\nimport TableMouse from './tablemouse';\nimport '../theme/table.css';\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/tables/tables Table feature documentation}.\n *\n * This is a \"glue\" plugin that loads the following table features:\n *\n * * {@link module:table/tableediting~TableEditing editing feature},\n * * {@link module:table/tableselection~TableSelection selection feature},\n * * {@link module:table/tablekeyboard~TableKeyboard keyboard navigation feature},\n * * {@link module:table/tablemouse~TableMouse mouse selection feature},\n * * {@link module:table/tableclipboard~TableClipboard clipboard feature},\n * * {@link module:table/tableui~TableUI UI feature}.\n */\nexport default class Table extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableEditing, TableUI, TableSelection, TableMouse, TableKeyboard, TableClipboard, Widget];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Table';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/plaintableoutput\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport Table from './table';\n/**\n * The plain table output feature.\n */\nexport default class PlainTableOutput extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'PlainTableOutput';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [Table];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Override default table data downcast converter.\n        editor.conversion.for('dataDowncast').elementToStructure({\n            model: 'table',\n            view: downcastTableElement,\n            converterPriority: 'high'\n        });\n        // Make sure table <caption> is downcasted into <caption> in the data pipeline when necessary.\n        if (editor.plugins.has('TableCaption')) {\n            editor.conversion.for('dataDowncast').elementToElement({\n                model: 'caption',\n                view: (modelElement, { writer }) => {\n                    if (modelElement.parent.name === 'table') {\n                        return writer.createContainerElement('caption');\n                    }\n                },\n                converterPriority: 'high'\n            });\n        }\n        // Handle border-style, border-color, border-width and background-color table attributes.\n        if (editor.plugins.has('TableProperties')) {\n            downcastTableBorderAndBackgroundAttributes(editor);\n        }\n    }\n}\n/**\n * The plain table downcast converter callback.\n *\n * @param table Table model element.\n * @param conversionApi The conversion API object.\n * @returns Created element.\n */\nfunction downcastTableElement(table, { writer }) {\n    const headingRows = table.getAttribute('headingRows') || 0;\n    // Table head rows slot.\n    const headRowsSlot = writer.createSlot((element) => element.is('element', 'tableRow') && element.index < headingRows);\n    // Table body rows slot.\n    const bodyRowsSlot = writer.createSlot((element) => element.is('element', 'tableRow') && element.index >= headingRows);\n    // Table children slot.\n    const childrenSlot = writer.createSlot((element) => !element.is('element', 'tableRow'));\n    // Table <thead> element with all the heading rows.\n    const theadElement = writer.createContainerElement('thead', null, headRowsSlot);\n    // Table <tbody> element with all the body rows.\n    const tbodyElement = writer.createContainerElement('tbody', null, bodyRowsSlot);\n    // Table contents element containing <thead> and <tbody> when necessary.\n    const tableContentElements = [];\n    if (headingRows) {\n        tableContentElements.push(theadElement);\n    }\n    if (headingRows < table.childCount) {\n        tableContentElements.push(tbodyElement);\n    }\n    // Create table structure.\n    //\n    // <table>\n    //    {children-slot-like-caption}\n    //    <thead>\n    //        {table-head-rows-slot}\n    //    </thead>\n    //    <tbody>\n    //        {table-body-rows-slot}\n    //    </tbody>\n    // </table>\n    return writer.createContainerElement('table', null, [childrenSlot, ...tableContentElements]);\n}\n/**\n * Register table border and background attributes converters.\n */\nfunction downcastTableBorderAndBackgroundAttributes(editor) {\n    const modelAttributes = {\n        'border-width': 'tableBorderWidth',\n        'border-color': 'tableBorderColor',\n        'border-style': 'tableBorderStyle',\n        'background-color': 'tableBackgroundColor'\n    };\n    for (const [styleName, modelAttribute] of Object.entries(modelAttributes)) {\n        editor.conversion.for('dataDowncast').add(dispatcher => {\n            return dispatcher.on(`attribute:${modelAttribute}:table`, (evt, data, conversionApi) => {\n                const { item, attributeNewValue } = data;\n                const { mapper, writer } = conversionApi;\n                if (!conversionApi.consumable.consume(item, evt.name)) {\n                    return;\n                }\n                const table = mapper.toViewElement(item);\n                if (attributeNewValue) {\n                    writer.setStyle(styleName, attributeNewValue, table);\n                }\n                else {\n                    writer.removeStyle(styleName, table);\n                }\n            }, { priority: 'high' });\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { isWidget } from 'ckeditor5/src/widget';\n/**\n * Returns a table widget editing view element if one is selected.\n */\nexport function getSelectedTableWidget(selection) {\n    const viewElement = selection.getSelectedElement();\n    if (viewElement && isTableWidget(viewElement)) {\n        return viewElement;\n    }\n    return null;\n}\n/**\n * Returns a table widget editing view element if one is among the selection's ancestors.\n */\nexport function getTableWidgetAncestor(selection) {\n    const selectionPosition = selection.getFirstPosition();\n    if (!selectionPosition) {\n        return null;\n    }\n    let parent = selectionPosition.parent;\n    while (parent) {\n        if (parent.is('element') && isTableWidget(parent)) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\n/**\n * Checks if a given view element is a table widget.\n */\nfunction isTableWidget(viewElement) {\n    return !!viewElement.getCustomProperty('table') && isWidget(viewElement);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tabletoolbar\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { WidgetToolbarRepository } from 'ckeditor5/src/widget';\nimport { getSelectedTableWidget, getTableWidgetAncestor } from './utils/ui/widget';\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for the table cell content).\n *\n * The table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/tableconfig~TableConfig#tableToolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/tableconfig~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n */\nexport default class TableToolbar extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [WidgetToolbarRepository];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n    afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        const tableContentToolbarItems = editor.config.get('table.contentToolbar');\n        const tableToolbarItems = editor.config.get('table.tableToolbar');\n        if (tableContentToolbarItems) {\n            widgetToolbarRepository.register('tableContent', {\n                ariaLabel: t('Table toolbar'),\n                items: tableContentToolbarItems,\n                getRelatedElement: getTableWidgetAncestor\n            });\n        }\n        if (tableToolbarItems) {\n            widgetToolbarRepository.register('table', {\n                ariaLabel: t('Table toolbar'),\n                items: tableToolbarItems,\n                getRelatedElement: getSelectedTableWidget\n            });\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/ui/colorinputview\n */\nimport { View, InputTextView, createDropdown, FocusCycler, ViewCollection, ColorSelectorView } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport '../../theme/colorinput.css';\n/**\n * The color input view class. It allows the user to type in a color (hex, rgb, etc.)\n * or choose it from the configurable color palette with a preview.\n *\n * @internal\n */\nexport default class ColorInputView extends View {\n    /**\n     * Creates an instance of the color input view.\n     *\n     * @param locale The locale instance.\n     * @param options The input options.\n     * @param options.colorDefinitions The colors to be displayed in the palette inside the input's dropdown.\n     * @param options.columns The number of columns in which the colors will be displayed.\n     * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n     * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n     */\n    constructor(locale, options) {\n        super(locale);\n        this.set('value', '');\n        this.set('isReadOnly', false);\n        this.set('isFocused', false);\n        this.set('isEmpty', true);\n        this.options = options;\n        this.focusTracker = new FocusTracker();\n        this._focusables = new ViewCollection();\n        this.dropdownView = this._createDropdownView();\n        this.inputView = this._createInputTextView();\n        this.keystrokes = new KeystrokeHandler();\n        this._stillTyping = false;\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate items backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate items forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input-color'\n                ]\n            },\n            children: [\n                this.dropdownView,\n                this.inputView\n            ]\n        });\n        this.on('change:value', (evt, name, inputValue) => this._setInputValue(inputValue));\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Start listening for the keystrokes coming from the dropdown panel view.\n        this.keystrokes.listenTo(this.dropdownView.panelView.element);\n    }\n    /**\n     * Focuses the input.\n     */\n    focus() {\n        this.inputView.focus();\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Creates and configures the {@link #dropdownView}.\n     */\n    _createDropdownView() {\n        const locale = this.locale;\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        const colorSelector = this._createColorSelector(locale);\n        const dropdown = createDropdown(locale);\n        const colorPreview = new View();\n        colorPreview.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input-color__button__preview'\n                ],\n                style: {\n                    backgroundColor: bind.to('value')\n                }\n            },\n            children: [{\n                    tag: 'span',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-input-color__button__preview__no-color-indicator',\n                            bind.if('value', 'ck-hidden', value => value != '')\n                        ]\n                    }\n                }]\n        });\n        dropdown.buttonView.extendTemplate({\n            attributes: {\n                class: 'ck-input-color__button'\n            }\n        });\n        dropdown.buttonView.children.add(colorPreview);\n        dropdown.buttonView.label = t('Color picker');\n        dropdown.buttonView.tooltip = true;\n        dropdown.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n        dropdown.panelView.children.add(colorSelector);\n        dropdown.bind('isEnabled').to(this, 'isReadOnly', value => !value);\n        this._focusables.add(colorSelector);\n        this.focusTracker.add(colorSelector.element);\n        dropdown.on('change:isOpen', (evt, name, isVisible) => {\n            if (isVisible) {\n                colorSelector.updateSelectedColors();\n                colorSelector.showColorGridsFragment();\n            }\n        });\n        return dropdown;\n    }\n    /**\n     * Creates and configures an instance of {@link module:ui/inputtext/inputtextview~InputTextView}.\n     *\n     * @returns A configured instance to be set as {@link #inputView}.\n     */\n    _createInputTextView() {\n        const locale = this.locale;\n        const inputView = new InputTextView(locale);\n        inputView.extendTemplate({\n            on: {\n                blur: inputView.bindTemplate.to('blur')\n            }\n        });\n        inputView.value = this.value;\n        inputView.bind('isReadOnly', 'hasError').to(this);\n        this.bind('isFocused', 'isEmpty').to(inputView);\n        inputView.on('input', () => {\n            const inputValue = inputView.element.value;\n            // Check if the value matches one of our defined colors' label.\n            const mappedColor = this.options.colorDefinitions.find(def => inputValue === def.label);\n            this._stillTyping = true;\n            this.value = mappedColor && mappedColor.color || inputValue;\n        });\n        inputView.on('blur', () => {\n            this._stillTyping = false;\n            this._setInputValue(inputView.element.value);\n        });\n        inputView.delegate('input').to(this);\n        return inputView;\n    }\n    /**\n     * Creates and configures the panel with \"color grid\" and \"color picker\" inside the {@link #dropdownView}.\n     */\n    _createColorSelector(locale) {\n        const t = locale.t;\n        const defaultColor = this.options.defaultColorValue || '';\n        const removeColorButtonLabel = defaultColor ? t('Restore default') : t('Remove color');\n        const colorSelector = new ColorSelectorView(locale, {\n            colors: this.options.colorDefinitions,\n            columns: this.options.columns,\n            removeButtonLabel: removeColorButtonLabel,\n            colorPickerLabel: t('Color picker'),\n            colorPickerViewConfig: this.options.colorPickerConfig === false ? false : {\n                ...this.options.colorPickerConfig,\n                hideInput: true\n            }\n        });\n        colorSelector.appendUI();\n        colorSelector.on('execute', (evt, data) => {\n            if (data.source === 'colorPickerSaveButton') {\n                this.dropdownView.isOpen = false;\n                return;\n            }\n            this.value = data.value || defaultColor;\n            // Trigger the listener that actually applies the set value.\n            this.fire('input');\n            if (data.source !== 'colorPicker') {\n                this.dropdownView.isOpen = false;\n            }\n        });\n        /**\n         * Color is saved before changes in color picker. In case \"cancel button\" is pressed\n         * this color will be applied.\n         */\n        let backupColor = this.value;\n        colorSelector.on('colorPicker:cancel', () => {\n            /**\n             * Revert color to previous value before changes in color picker.\n             */\n            this.value = backupColor;\n            this.fire('input');\n            this.dropdownView.isOpen = false;\n        });\n        colorSelector.colorGridsFragmentView.colorPickerButtonView.on('execute', () => {\n            /**\n             * Save color value before changes in color picker.\n             */\n            backupColor = this.value;\n        });\n        colorSelector.bind('selectedColor').to(this, 'value');\n        return colorSelector;\n    }\n    /**\n     * Sets {@link #inputView}'s value property to the color value or color label,\n     * if there is one and the user is not typing.\n     *\n     * Handles cases like:\n     *\n     * * Someone picks the color in the grid.\n     * * The color is set from the plugin level.\n     *\n     * @param inputValue Color value to be set.\n     */\n    _setInputValue(inputValue) {\n        if (!this._stillTyping) {\n            const normalizedInputValue = normalizeColor(inputValue);\n            // Check if the value matches one of our defined colors.\n            const mappedColor = this.options.colorDefinitions.find(def => normalizedInputValue === normalizeColor(def.color));\n            if (mappedColor) {\n                this.inputView.value = mappedColor.label;\n            }\n            else {\n                this.inputView.value = inputValue || '';\n            }\n        }\n    }\n}\n/**\n * Normalizes color value, by stripping extensive whitespace.\n * For example., transforms:\n * * `   rgb(  25 50    0 )` to `rgb(25 50 0)`,\n * * \"\\t  rgb(  25 ,  50,0 )\t\t\" to `rgb(25 50 0)`.\n *\n * @param colorString The value to be normalized.\n */\nfunction normalizeColor(colorString) {\n    return colorString\n        // Remove any whitespace right after `(` or `,`.\n        .replace(/([(,])\\s+/g, '$1')\n        // Remove any whitespace at the beginning or right before the end, `)`, `,`, or another whitespace.\n        .replace(/^\\s+|\\s+(?=[),\\s]|$)/g, '')\n        // Then, replace `,` or whitespace with a single space.\n        .replace(/,|\\s/g, ' ');\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/utils/ui/table-properties\n */\nimport { ButtonView, Model } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { isColor, isLength, isPercentage } from 'ckeditor5/src/engine';\nimport ColorInputView from '../../ui/colorinputview';\nconst isEmpty = (val) => val === '';\n/**\n * Returns an object containing pairs of CSS border style values and their localized UI\n * labels. Used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nexport function getBorderStyleLabels(t) {\n    return {\n        none: t('None'),\n        solid: t('Solid'),\n        dotted: t('Dotted'),\n        dashed: t('Dashed'),\n        double: t('Double'),\n        groove: t('Groove'),\n        ridge: t('Ridge'),\n        inset: t('Inset'),\n        outset: t('Outset')\n    };\n}\n/**\n * Returns a localized error string that can be displayed next to color (background, border)\n * fields that have an invalid value.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nexport function getLocalizedColorErrorText(t) {\n    return t('The color is invalid. Try \"#FF0000\" or \"rgb(255,0,0)\" or \"red\".');\n}\n/**\n * Returns a localized error string that can be displayed next to length (padding, border width)\n * fields that have an invalid value.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nexport function getLocalizedLengthErrorText(t) {\n    return t('The value is invalid. Try \"10px\" or \"2em\" or simply \"2\".');\n}\n/**\n * Returns `true` when the passed value is an empty string or a valid CSS color expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isColor}.\n */\nexport function colorFieldValidator(value) {\n    value = value.trim().toLowerCase();\n    return isEmpty(value) || isColor(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n * See {@link module:engine/view/styles/utils~isPercentage}.\n */\nexport function lengthFieldValidator(value) {\n    value = value.trim();\n    return isEmpty(value) || isNumberString(value) || isLength(value) || isPercentage(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n */\nexport function lineWidthFieldValidator(value) {\n    value = value.trim();\n    return isEmpty(value) || isNumberString(value) || isLength(value);\n}\n/**\n * Generates item definitions for a UI dropdown that allows changing the border style of a table or a table cell.\n *\n * @param defaultStyle The default border.\n */\nexport function getBorderStyleDefinitions(view, defaultStyle) {\n    const itemDefinitions = new Collection();\n    const styleLabels = getBorderStyleLabels(view.t);\n    for (const style in styleLabels) {\n        const definition = {\n            type: 'button',\n            model: new Model({\n                _borderStyleValue: style,\n                label: styleLabels[style],\n                role: 'menuitemradio',\n                withText: true\n            })\n        };\n        if (style === 'none') {\n            definition.model.bind('isOn').to(view, 'borderStyle', value => {\n                if (defaultStyle === 'none') {\n                    return !value;\n                }\n                return value === style;\n            });\n        }\n        else {\n            definition.model.bind('isOn').to(view, 'borderStyle', value => {\n                return value === style;\n            });\n        }\n        itemDefinitions.add(definition);\n    }\n    return itemDefinitions;\n}\n/**\n * A helper that fills a toolbar with buttons that:\n *\n * * have some labels,\n * * have some icons,\n * * set a certain UI view property value upon execution.\n *\n * @param nameToValue A function that maps a button name to a value. By default names are the same as values.\n */\nexport function fillToolbar(options) {\n    const { view, icons, toolbar, labels, propertyName, nameToValue, defaultValue } = options;\n    for (const name in labels) {\n        const button = new ButtonView(view.locale);\n        button.set({\n            label: labels[name],\n            icon: icons[name],\n            tooltip: labels[name]\n        });\n        // If specified the `nameToValue()` callback, map the value based on the option's name.\n        const buttonValue = nameToValue ? nameToValue(name) : name;\n        button.bind('isOn').to(view, propertyName, value => {\n            // `value` comes from `view[ propertyName ]`.\n            let valueToCompare = value;\n            // If it's empty, and the `defaultValue` is specified, use it instead.\n            if (value === '' && defaultValue) {\n                valueToCompare = defaultValue;\n            }\n            return buttonValue === valueToCompare;\n        });\n        button.on('execute', () => {\n            view[propertyName] = buttonValue;\n        });\n        toolbar.items.add(button);\n    }\n}\n/**\n * A default color palette used by various user interfaces related to tables, for instance,\n * by {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI} or\n * {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI}.\n *\n * The color palette follows the {@link module:table/tableconfig~TableColorConfig table color configuration format}\n * and contains the following color definitions:\n *\n * ```ts\n * const defaultColors = [\n *   {\n *     color: 'hsl(0, 0%, 0%)',\n *     label: 'Black'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 30%)',\n *     label: 'Dim grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 60%)',\n *     label: 'Grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 90%)',\n *     label: 'Light grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 100%)',\n *     label: 'White',\n *     hasBorder: true\n *   },\n *   {\n *     color: 'hsl(0, 75%, 60%)',\n *     label: 'Red'\n *   },\n *   {\n *     color: 'hsl(30, 75%, 60%)',\n *     label: 'Orange'\n *   },\n *   {\n *     color: 'hsl(60, 75%, 60%)',\n *     label: 'Yellow'\n *   },\n *   {\n *     color: 'hsl(90, 75%, 60%)',\n *     label: 'Light green'\n *   },\n *   {\n *     color: 'hsl(120, 75%, 60%)',\n *     label: 'Green'\n *   },\n *   {\n *     color: 'hsl(150, 75%, 60%)',\n *     label: 'Aquamarine'\n *   },\n *   {\n *     color: 'hsl(180, 75%, 60%)',\n *     label: 'Turquoise'\n *   },\n *   {\n *     color: 'hsl(210, 75%, 60%)',\n *     label: 'Light blue'\n *   },\n *   {\n *     color: 'hsl(240, 75%, 60%)',\n *     label: 'Blue'\n *   },\n *   {\n *     color: 'hsl(270, 75%, 60%)',\n *     label: 'Purple'\n *   }\n * ];\n * ```\n */\nexport const defaultColors = [\n    {\n        color: 'hsl(0, 0%, 0%)',\n        label: 'Black'\n    },\n    {\n        color: 'hsl(0, 0%, 30%)',\n        label: 'Dim grey'\n    },\n    {\n        color: 'hsl(0, 0%, 60%)',\n        label: 'Grey'\n    },\n    {\n        color: 'hsl(0, 0%, 90%)',\n        label: 'Light grey'\n    },\n    {\n        color: 'hsl(0, 0%, 100%)',\n        label: 'White',\n        hasBorder: true\n    },\n    {\n        color: 'hsl(0, 75%, 60%)',\n        label: 'Red'\n    },\n    {\n        color: 'hsl(30, 75%, 60%)',\n        label: 'Orange'\n    },\n    {\n        color: 'hsl(60, 75%, 60%)',\n        label: 'Yellow'\n    },\n    {\n        color: 'hsl(90, 75%, 60%)',\n        label: 'Light green'\n    },\n    {\n        color: 'hsl(120, 75%, 60%)',\n        label: 'Green'\n    },\n    {\n        color: 'hsl(150, 75%, 60%)',\n        label: 'Aquamarine'\n    },\n    {\n        color: 'hsl(180, 75%, 60%)',\n        label: 'Turquoise'\n    },\n    {\n        color: 'hsl(210, 75%, 60%)',\n        label: 'Light blue'\n    },\n    {\n        color: 'hsl(240, 75%, 60%)',\n        label: 'Blue'\n    },\n    {\n        color: 'hsl(270, 75%, 60%)',\n        label: 'Purple'\n    }\n];\n/**\n * Returns a creator for a color input with a label.\n *\n * For given options, it returns a function that creates an instance of a\n * {@link module:table/ui/colorinputview~ColorInputView color input} logically related to\n * a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in the DOM.\n *\n * The helper does the following:\n *\n * * It sets the color input `id` and `ariaDescribedById` attributes.\n * * It binds the color input `isReadOnly` to the labeled view.\n * * It binds the color input `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when the user starts typing in the color input.\n *\n * Usage:\n *\n * ```ts\n * const colorInputCreator = getLabeledColorInputCreator( {\n *   colorConfig: [ ... ],\n *   columns: 3,\n * } );\n *\n * const labeledInputView = new LabeledFieldView( locale, colorInputCreator );\n * console.log( labeledInputView.view ); // A color input instance.\n * ```\n *\n * @internal\n * @param options Color input options.\n * @param options.colorConfig The configuration of the color palette displayed in the input's dropdown.\n * @param options.columns The configuration of the number of columns the color palette consists of in the input's dropdown.\n * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n * @param options.colorPickerConfig The configuration of the color picker. You could disable it or define your output format.\n */\nexport function getLabeledColorInputCreator(options) {\n    return (labeledFieldView, viewUid, statusUid) => {\n        const colorInputView = new ColorInputView(labeledFieldView.locale, {\n            colorDefinitions: colorConfigToColorGridDefinitions(options.colorConfig),\n            columns: options.columns,\n            defaultColorValue: options.defaultColorValue,\n            colorPickerConfig: options.colorPickerConfig\n        });\n        colorInputView.inputView.set({\n            id: viewUid,\n            ariaDescribedById: statusUid\n        });\n        colorInputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', value => !value);\n        colorInputView.bind('hasError').to(labeledFieldView, 'errorText', value => !!value);\n        colorInputView.on('input', () => {\n            // UX: Make the error text disappear and disable the error indicator as the user\n            // starts fixing the errors.\n            labeledFieldView.errorText = null;\n        });\n        labeledFieldView.bind('isEmpty', 'isFocused').to(colorInputView);\n        return colorInputView;\n    };\n}\n/**\n * A simple helper method to detect number strings.\n * I allows full number notation, so omitting 0 is not allowed:\n */\nfunction isNumberString(value) {\n    const parsedValue = parseFloat(value);\n    return !Number.isNaN(parsedValue) && value === String(parsedValue);\n}\nfunction colorConfigToColorGridDefinitions(colorConfig) {\n    return colorConfig.map(item => ({\n        color: item.model,\n        label: item.label,\n        options: {\n            hasBorder: item.hasBorder\n        }\n    }));\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/ui/formrowview\n */\nimport { View } from 'ckeditor5/src/ui';\nimport '../../theme/formrow.css';\n/**\n * The class representing a single row in a complex form,\n * used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}.\n *\n * **Note**: For now this class is private. When more use cases arrive (beyond ckeditor5-table),\n * it will become a component in ckeditor5-ui.\n *\n * @internal\n */\nexport default class FormRowView extends View {\n    /**\n     * Creates an instance of the form row class.\n     *\n     * @param locale The locale instance.\n     * @param options.labelView When passed, the row gets the `group` and `aria-labelledby`\n     * DOM attributes and gets described by the label.\n     */\n    constructor(locale, options = {}) {\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('class', options.class || null);\n        this.children = this.createCollection();\n        if (options.children) {\n            options.children.forEach(child => this.children.add(child));\n        }\n        this.set('_role', null);\n        this.set('_ariaLabelledBy', null);\n        if (options.labelView) {\n            this.set({\n                _role: 'group',\n                _ariaLabelledBy: options.labelView.id\n            });\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form__row',\n                    bind.to('class')\n                ],\n                role: bind.to('_role'),\n                'aria-labelledby': bind.to('_ariaLabelledBy')\n            },\n            children: this.children\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties/ui/tablecellpropertiesview\n */\nimport { addListToDropdown, ButtonView, createLabeledDropdown, createLabeledInputText, FocusCycler, FormHeaderView, LabeledFieldView, LabelView, submitHandler, ToolbarView, View, ViewCollection } from 'ckeditor5/src/ui';\nimport { KeystrokeHandler, FocusTracker } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\nimport { fillToolbar, getBorderStyleDefinitions, getBorderStyleLabels, getLabeledColorInputCreator } from '../../utils/ui/table-properties';\nimport FormRowView from '../../ui/formrowview';\nimport '../../../theme/form.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tablecellproperties.css';\nconst ALIGNMENT_ICONS = {\n    left: icons.alignLeft,\n    center: icons.alignCenter,\n    right: icons.alignRight,\n    justify: icons.alignJustify,\n    top: icons.alignTop,\n    middle: icons.alignMiddle,\n    bottom: icons.alignBottom\n};\n/**\n * The class representing a table cell properties form, allowing users to customize\n * certain style aspects of a table cell, for instance, border, padding, text alignment, etc..\n */\nexport default class TableCellPropertiesView extends View {\n    /**\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param options Additional configuration of the view.\n     * @param options.borderColors A configuration of the border color palette used by the\n     * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#borderColorInput}.\n     * @param options.backgroundColors A configuration of the background color palette used by the\n     * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#backgroundInput}.\n     * @param options.defaultTableCellProperties The default table cell properties.\n     */\n    constructor(locale, options) {\n        super(locale);\n        this.set({\n            borderStyle: '',\n            borderWidth: '',\n            borderColor: '',\n            padding: '',\n            backgroundColor: '',\n            width: '',\n            height: '',\n            horizontalAlignment: '',\n            verticalAlignment: ''\n        });\n        this.options = options;\n        const { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n        const { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n        const { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n        const { horizontalAlignmentToolbar, verticalAlignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.children = this.createCollection();\n        this.borderStyleDropdown = borderStyleDropdown;\n        this.borderWidthInput = borderWidthInput;\n        this.borderColorInput = borderColorInput;\n        this.backgroundInput = backgroundInput;\n        this.paddingInput = this._createPaddingField();\n        this.widthInput = widthInput;\n        this.heightInput = heightInput;\n        this.horizontalAlignmentToolbar = horizontalAlignmentToolbar;\n        this.verticalAlignmentToolbar = verticalAlignmentToolbar;\n        // Defer creating to make sure other fields are present and the Save button can\n        // bind its #isEnabled to their error messages so there's no way to save unless all\n        // fields are valid.\n        const { saveButtonView, cancelButtonView } = this._createActionButtons();\n        this.saveButtonView = saveButtonView;\n        this.cancelButtonView = cancelButtonView;\n        this._focusables = new ViewCollection();\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        // Form header.\n        this.children.add(new FormHeaderView(locale, {\n            label: this.t('Cell properties')\n        }));\n        // Border row.\n        this.children.add(new FormRowView(locale, {\n            labelView: borderRowLabel,\n            children: [\n                borderRowLabel,\n                borderStyleDropdown,\n                borderColorInput,\n                borderWidthInput\n            ],\n            class: 'ck-table-form__border-row'\n        }));\n        // Background.\n        this.children.add(new FormRowView(locale, {\n            labelView: backgroundRowLabel,\n            children: [\n                backgroundRowLabel,\n                backgroundInput\n            ],\n            class: 'ck-table-form__background-row'\n        }));\n        // Dimensions row and padding.\n        this.children.add(new FormRowView(locale, {\n            children: [\n                // Dimensions row.\n                new FormRowView(locale, {\n                    labelView: dimensionsLabel,\n                    children: [\n                        dimensionsLabel,\n                        widthInput,\n                        operatorLabel,\n                        heightInput\n                    ],\n                    class: 'ck-table-form__dimensions-row'\n                }),\n                // Padding row.\n                new FormRowView(locale, {\n                    children: [\n                        this.paddingInput\n                    ],\n                    class: 'ck-table-cell-properties-form__padding-row'\n                })\n            ]\n        }));\n        // Text alignment row.\n        this.children.add(new FormRowView(locale, {\n            labelView: alignmentLabel,\n            children: [\n                alignmentLabel,\n                horizontalAlignmentToolbar,\n                verticalAlignmentToolbar\n            ],\n            class: 'ck-table-cell-properties-form__alignment-row'\n        }));\n        // Action row.\n        this.children.add(new FormRowView(locale, {\n            children: [\n                this.saveButtonView,\n                this.cancelButtonView\n            ],\n            class: 'ck-table-form__action-row'\n        }));\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form',\n                    'ck-table-form',\n                    'ck-table-cell-properties-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n        // which is of the \"submit\" DOM \"type\".\n        submitHandler({\n            view: this\n        });\n        [\n            this.borderStyleDropdown,\n            this.borderColorInput,\n            this.borderColorInput.fieldView.dropdownView.buttonView,\n            this.borderWidthInput,\n            this.backgroundInput,\n            this.backgroundInput.fieldView.dropdownView.buttonView,\n            this.widthInput,\n            this.heightInput,\n            this.paddingInput,\n            this.horizontalAlignmentToolbar,\n            this.verticalAlignmentToolbar,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach(view => {\n            // Register the view as focusable.\n            this._focusables.add(view);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(view.element);\n        });\n        // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the fist focusable field in the form.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #borderStyleDropdown},\n     * * {@link #borderWidthInput},\n     * * {@link #borderColorInput}.\n     */\n    _createBorderFields() {\n        const defaultTableCellProperties = this.options.defaultTableCellProperties;\n        const defaultBorder = {\n            style: defaultTableCellProperties.borderStyle,\n            width: defaultTableCellProperties.borderWidth,\n            color: defaultTableCellProperties.borderColor\n        };\n        const colorInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.borderColors,\n            columns: 5,\n            defaultColorValue: defaultBorder.color,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const locale = this.locale;\n        const t = this.t;\n        const accessibleLabel = t('Style');\n        // -- Group label ---------------------------------------------\n        const borderRowLabel = new LabelView(locale);\n        borderRowLabel.text = t('Border');\n        // -- Style ---------------------------------------------------\n        const styleLabels = getBorderStyleLabels(t);\n        const borderStyleDropdown = new LabeledFieldView(locale, createLabeledDropdown);\n        borderStyleDropdown.set({\n            label: accessibleLabel,\n            class: 'ck-table-form__border-style'\n        });\n        borderStyleDropdown.fieldView.buttonView.set({\n            ariaLabel: accessibleLabel,\n            ariaLabelledBy: undefined,\n            isOn: false,\n            withText: true,\n            tooltip: accessibleLabel\n        });\n        borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', value => {\n            return styleLabels[value ? value : 'none'];\n        });\n        borderStyleDropdown.fieldView.on('execute', evt => {\n            this.borderStyle = evt.source._borderStyleValue;\n        });\n        borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', value => !value);\n        addListToDropdown(borderStyleDropdown.fieldView, getBorderStyleDefinitions(this, defaultBorder.style), {\n            role: 'menu',\n            ariaLabel: accessibleLabel\n        });\n        // -- Width ---------------------------------------------------\n        const borderWidthInput = new LabeledFieldView(locale, createLabeledInputText);\n        borderWidthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__border-width'\n        });\n        borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n        borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderWidthInput.fieldView.on('input', () => {\n            this.borderWidth = borderWidthInput.fieldView.element.value;\n        });\n        // -- Color ---------------------------------------------------\n        const borderColorInput = new LabeledFieldView(locale, colorInputCreator);\n        borderColorInput.set({\n            label: t('Color'),\n            class: 'ck-table-form__border-color'\n        });\n        borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n        borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderColorInput.fieldView.on('input', () => {\n            this.borderColor = borderColorInput.fieldView.value;\n        });\n        // Reset the border color and width fields depending on the `border-style` value.\n        this.on('change:borderStyle', (evt, name, newValue, oldValue) => {\n            // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n            // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n            if (!isBorderStyleSet(newValue)) {\n                this.borderColor = '';\n                this.borderWidth = '';\n            }\n            // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n            if (!isBorderStyleSet(oldValue)) {\n                this.borderColor = defaultBorder.color;\n                this.borderWidth = defaultBorder.width;\n            }\n        });\n        return {\n            borderRowLabel,\n            borderStyleDropdown,\n            borderColorInput,\n            borderWidthInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #backgroundInput}.\n     */\n    _createBackgroundFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Group label ---------------------------------------------\n        const backgroundRowLabel = new LabelView(locale);\n        backgroundRowLabel.text = t('Background');\n        // -- Background color input -----------------------------------\n        const colorInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.backgroundColors,\n            columns: 5,\n            defaultColorValue: this.options.defaultTableCellProperties.backgroundColor,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const backgroundInput = new LabeledFieldView(locale, colorInputCreator);\n        backgroundInput.set({\n            label: t('Color'),\n            class: 'ck-table-cell-properties-form__background'\n        });\n        backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n        backgroundInput.fieldView.on('input', () => {\n            this.backgroundColor = backgroundInput.fieldView.value;\n        });\n        return {\n            backgroundRowLabel,\n            backgroundInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #widthInput}.\n     * * {@link #heightInput}.\n     */\n    _createDimensionFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const dimensionsLabel = new LabelView(locale);\n        dimensionsLabel.text = t('Dimensions');\n        // -- Width ---------------------------------------------------\n        const widthInput = new LabeledFieldView(locale, createLabeledInputText);\n        widthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__dimensions-row__width'\n        });\n        widthInput.fieldView.bind('value').to(this, 'width');\n        widthInput.fieldView.on('input', () => {\n            this.width = widthInput.fieldView.element.value;\n        });\n        // -- Operator ---------------------------------------------------\n        const operatorLabel = new View(locale);\n        operatorLabel.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck-table-form__dimension-operator'\n                ]\n            },\n            children: [\n                { text: '×' }\n            ]\n        });\n        // -- Height ---------------------------------------------------\n        const heightInput = new LabeledFieldView(locale, createLabeledInputText);\n        heightInput.set({\n            label: t('Height'),\n            class: 'ck-table-form__dimensions-row__height'\n        });\n        heightInput.fieldView.bind('value').to(this, 'height');\n        heightInput.fieldView.on('input', () => {\n            this.height = heightInput.fieldView.element.value;\n        });\n        return {\n            dimensionsLabel,\n            widthInput,\n            operatorLabel,\n            heightInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #paddingInput}.\n     */\n    _createPaddingField() {\n        const locale = this.locale;\n        const t = this.t;\n        const paddingInput = new LabeledFieldView(locale, createLabeledInputText);\n        paddingInput.set({\n            label: t('Padding'),\n            class: 'ck-table-cell-properties-form__padding'\n        });\n        paddingInput.fieldView.bind('value').to(this, 'padding');\n        paddingInput.fieldView.on('input', () => {\n            this.padding = paddingInput.fieldView.element.value;\n        });\n        return paddingInput;\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #horizontalAlignmentToolbar},\n     * * {@link #verticalAlignmentToolbar}.\n     */\n    _createAlignmentFields() {\n        const locale = this.locale;\n        const t = this.t;\n        const alignmentLabel = new LabelView(locale);\n        alignmentLabel.text = t('Table cell text alignment');\n        // -- Horizontal ---------------------------------------------------\n        const horizontalAlignmentToolbar = new ToolbarView(locale);\n        const isContentRTL = locale.contentLanguageDirection === 'rtl';\n        horizontalAlignmentToolbar.set({\n            isCompact: true,\n            ariaLabel: t('Horizontal text alignment toolbar')\n        });\n        fillToolbar({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: horizontalAlignmentToolbar,\n            labels: this._horizontalAlignmentLabels,\n            propertyName: 'horizontalAlignment',\n            nameToValue: name => {\n                // For the RTL content, we want to swap the buttons \"align to the left\" and \"align to the right\".\n                if (isContentRTL) {\n                    if (name === 'left') {\n                        return 'right';\n                    }\n                    else if (name === 'right') {\n                        return 'left';\n                    }\n                }\n                return name;\n            },\n            defaultValue: this.options.defaultTableCellProperties.horizontalAlignment\n        });\n        // -- Vertical -----------------------------------------------------\n        const verticalAlignmentToolbar = new ToolbarView(locale);\n        verticalAlignmentToolbar.set({\n            isCompact: true,\n            ariaLabel: t('Vertical text alignment toolbar')\n        });\n        fillToolbar({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: verticalAlignmentToolbar,\n            labels: this._verticalAlignmentLabels,\n            propertyName: 'verticalAlignment',\n            defaultValue: this.options.defaultTableCellProperties.verticalAlignment\n        });\n        return {\n            horizontalAlignmentToolbar,\n            verticalAlignmentToolbar,\n            alignmentLabel\n        };\n    }\n    /**\n     * Creates the following form controls:\n     *\n     * * {@link #saveButtonView},\n     * * {@link #cancelButtonView}.\n     */\n    _createActionButtons() {\n        const locale = this.locale;\n        const t = this.t;\n        const saveButtonView = new ButtonView(locale);\n        const cancelButtonView = new ButtonView(locale);\n        const fieldsThatShouldValidateToSave = [\n            this.borderWidthInput,\n            this.borderColorInput,\n            this.backgroundInput,\n            this.paddingInput\n        ];\n        saveButtonView.set({\n            label: t('Save'),\n            icon: icons.check,\n            class: 'ck-button-save',\n            type: 'submit',\n            withText: true\n        });\n        saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', (...errorTexts) => {\n            return errorTexts.every(errorText => !errorText);\n        });\n        cancelButtonView.set({\n            label: t('Cancel'),\n            icon: icons.cancel,\n            class: 'ck-button-cancel',\n            withText: true\n        });\n        cancelButtonView.delegate('execute').to(this, 'cancel');\n        return {\n            saveButtonView, cancelButtonView\n        };\n    }\n    /**\n     * Provides localized labels for {@link #horizontalAlignmentToolbar} buttons.\n     */\n    get _horizontalAlignmentLabels() {\n        const locale = this.locale;\n        const t = this.t;\n        const left = t('Align cell text to the left');\n        const center = t('Align cell text to the center');\n        const right = t('Align cell text to the right');\n        const justify = t('Justify cell text');\n        // Returns object with a proper order of labels.\n        if (locale.uiLanguageDirection === 'rtl') {\n            return { right, center, left, justify };\n        }\n        else {\n            return { left, center, right, justify };\n        }\n    }\n    /**\n     * Provides localized labels for {@link #verticalAlignmentToolbar} buttons.\n     */\n    get _verticalAlignmentLabels() {\n        const t = this.t;\n        return {\n            top: t('Align cell text to the top'),\n            middle: t('Align cell text to the middle'),\n            bottom: t('Align cell text to the bottom')\n        };\n    }\n}\nfunction isBorderStyleSet(value) {\n    return value !== 'none';\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/utils/ui/contextualballoon\n */\nimport { Rect } from 'ckeditor5/src/utils';\nimport { BalloonPanelView } from 'ckeditor5/src/ui';\nimport { getTableWidgetAncestor } from './widget';\nconst DEFAULT_BALLOON_POSITIONS = BalloonPanelView.defaultPositions;\nconst BALLOON_POSITIONS = [\n    DEFAULT_BALLOON_POSITIONS.northArrowSouth,\n    DEFAULT_BALLOON_POSITIONS.northArrowSouthWest,\n    DEFAULT_BALLOON_POSITIONS.northArrowSouthEast,\n    DEFAULT_BALLOON_POSITIONS.southArrowNorth,\n    DEFAULT_BALLOON_POSITIONS.southArrowNorthWest,\n    DEFAULT_BALLOON_POSITIONS.southArrowNorthEast,\n    DEFAULT_BALLOON_POSITIONS.viewportStickyNorth\n];\n/**\n * A helper utility that positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} instance\n * with respect to the table in the editor content, if one is selected.\n *\n * @param editor The editor instance.\n * @param target Either \"cell\" or \"table\". Determines the target the balloon will be attached to.\n */\nexport function repositionContextualBalloon(editor, target) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    if (getTableWidgetAncestor(editor.editing.view.document.selection)) {\n        let position;\n        if (target === 'cell') {\n            position = getBalloonCellPositionData(editor);\n        }\n        else {\n            position = getBalloonTablePositionData(editor);\n        }\n        balloon.updatePosition(position);\n    }\n}\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table in the editor content.\n *\n * @param editor The editor instance.\n */\nexport function getBalloonTablePositionData(editor) {\n    const firstPosition = editor.model.document.selection.getFirstPosition();\n    const modelTable = firstPosition.findAncestor('table');\n    const viewTable = editor.editing.mapper.toViewElement(modelTable);\n    return {\n        target: editor.editing.view.domConverter.mapViewToDom(viewTable),\n        positions: BALLOON_POSITIONS\n    };\n}\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table cell in the editor content.\n *\n * @param editor The editor instance.\n */\nexport function getBalloonCellPositionData(editor) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const selection = editor.model.document.selection;\n    if (selection.rangeCount > 1) {\n        return {\n            target: () => createBoundingRect(selection.getRanges(), editor),\n            positions: BALLOON_POSITIONS\n        };\n    }\n    const modelTableCell = getTableCellAtPosition(selection.getFirstPosition());\n    const viewTableCell = mapper.toViewElement(modelTableCell);\n    return {\n        target: domConverter.mapViewToDom(viewTableCell),\n        positions: BALLOON_POSITIONS\n    };\n}\n/**\n * Returns the first selected table cell from a multi-cell or in-cell selection.\n *\n * @param position Document position.\n */\nfunction getTableCellAtPosition(position) {\n    const isTableCellSelected = position.nodeAfter && position.nodeAfter.is('element', 'tableCell');\n    return isTableCellSelected ? position.nodeAfter : position.findAncestor('tableCell');\n}\n/**\n * Returns bounding rectangle for given model ranges.\n *\n * @param ranges Model ranges that the bounding rect should be returned for.\n * @param editor The editor instance.\n */\nfunction createBoundingRect(ranges, editor) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const rects = Array.from(ranges).map(range => {\n        const modelTableCell = getTableCellAtPosition(range.start);\n        const viewTableCell = mapper.toViewElement(modelTableCell);\n        return new Rect(domConverter.mapViewToDom(viewTableCell));\n    });\n    return Rect.getBoundingRect(rects);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties/tablecellpropertiesui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView, clickOutsideHandler, ContextualBalloon, getLocalizedColorOptions, normalizeColorOptions } from 'ckeditor5/src/ui';\nimport TableCellPropertiesView from './ui/tablecellpropertiesview';\nimport { colorFieldValidator, getLocalizedColorErrorText, getLocalizedLengthErrorText, defaultColors, lengthFieldValidator, lineWidthFieldValidator } from '../utils/ui/table-properties';\nimport { debounce } from 'lodash-es';\nimport { getTableWidgetAncestor } from '../utils/ui/widget';\nimport { getBalloonCellPositionData, repositionContextualBalloon } from '../utils/ui/contextualballoon';\nimport tableCellProperties from './../../theme/icons/table-cell-properties.svg';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\nconst ERROR_TEXT_TIMEOUT = 500;\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n    borderStyle: 'tableCellBorderStyle',\n    borderColor: 'tableCellBorderColor',\n    borderWidth: 'tableCellBorderWidth',\n    height: 'tableCellHeight',\n    width: 'tableCellWidth',\n    padding: 'tableCellPadding',\n    backgroundColor: 'tableCellBackgroundColor',\n    horizontalAlignment: 'tableCellHorizontalAlignment',\n    verticalAlignment: 'tableCellVerticalAlignment'\n};\n/**\n * The table cell properties UI plugin. It introduces the `'tableCellProperties'` button\n * that opens a form allowing to specify the visual styling of a table cell.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport default class TableCellPropertiesUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCellPropertiesUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('table.tableCellProperties', {\n            borderColors: defaultColors,\n            backgroundColors: defaultColors\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        this._defaultTableCellProperties = getNormalizedDefaultProperties(editor.config.get('table.tableCellProperties.defaultProperties'), {\n            includeVerticalAlignmentProperty: true,\n            includeHorizontalAlignmentProperty: true,\n            includePaddingProperty: true,\n            isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n        });\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        this.view = null;\n        this._isReady = false;\n        editor.ui.componentFactory.add('tableCellProperties', locale => {\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Cell properties'),\n                icon: tableCellProperties,\n                tooltip: true\n            });\n            this.listenTo(view, 'execute', () => this._showView());\n            const commands = Object.values(propertyToCommandMap)\n                .map(commandName => editor.commands.get(commandName));\n            view.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => (areEnabled.some(isCommandEnabled => isCommandEnabled)));\n            return view;\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed.\n        // See https://github.com/ckeditor/ckeditor5/issues/1341.\n        if (this.view) {\n            this.view.destroy();\n        }\n    }\n    /**\n     * Creates the {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView} instance.\n     *\n     * @returns The cell properties form view instance.\n     */\n    _createPropertiesView() {\n        const editor = this.editor;\n        const config = editor.config.get('table.tableCellProperties');\n        const borderColorsConfig = normalizeColorOptions(config.borderColors);\n        const localizedBorderColors = getLocalizedColorOptions(editor.locale, borderColorsConfig);\n        const backgroundColorsConfig = normalizeColorOptions(config.backgroundColors);\n        const localizedBackgroundColors = getLocalizedColorOptions(editor.locale, backgroundColorsConfig);\n        const hasColorPicker = config.colorPicker !== false;\n        const view = new TableCellPropertiesView(editor.locale, {\n            borderColors: localizedBorderColors,\n            backgroundColors: localizedBackgroundColors,\n            defaultTableCellProperties: this._defaultTableCellProperties,\n            colorPickerConfig: hasColorPicker ? (config.colorPicker || {}) : false\n        });\n        const t = editor.t;\n        // Render the view so its #element is available for the clickOutsideHandler.\n        view.render();\n        this.listenTo(view, 'submit', () => {\n            this._hideView();\n        });\n        this.listenTo(view, 'cancel', () => {\n            // https://github.com/ckeditor/ckeditor5/issues/6180\n            if (this._undoStepBatch.operations.length) {\n                editor.execute('undo', this._undoStepBatch);\n            }\n            this._hideView();\n        });\n        // Close the balloon on Esc key press.\n        view.keystrokes.set('Esc', (data, cancel) => {\n            this._hideView();\n            cancel();\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: view,\n            activator: () => this._isViewInBalloon,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideView()\n        });\n        const colorErrorText = getLocalizedColorErrorText(t);\n        const lengthErrorText = getLocalizedLengthErrorText(t);\n        // Create the \"UI -> editor data\" binding.\n        // These listeners update the editor data (via table commands) when any observable\n        // property of the view has changed. They also validate the value and display errors in the UI\n        // when necessary. This makes the view live, which means the changes are\n        // visible in the editing as soon as the user types or changes fields' values.\n        view.on('change:borderStyle', this._getPropertyChangeCallback('tableCellBorderStyle'));\n        view.on('change:borderColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderColorInput,\n            commandName: 'tableCellBorderColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:borderWidth', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderWidthInput,\n            commandName: 'tableCellBorderWidth',\n            errorText: lengthErrorText,\n            validator: lineWidthFieldValidator\n        }));\n        view.on('change:padding', this._getValidatedPropertyChangeCallback({\n            viewField: view.paddingInput,\n            commandName: 'tableCellPadding',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:width', this._getValidatedPropertyChangeCallback({\n            viewField: view.widthInput,\n            commandName: 'tableCellWidth',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:height', this._getValidatedPropertyChangeCallback({\n            viewField: view.heightInput,\n            commandName: 'tableCellHeight',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:backgroundColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.backgroundInput,\n            commandName: 'tableCellBackgroundColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:horizontalAlignment', this._getPropertyChangeCallback('tableCellHorizontalAlignment'));\n        view.on('change:verticalAlignment', this._getPropertyChangeCallback('tableCellVerticalAlignment'));\n        return view;\n    }\n    /**\n     * In this method the \"editor data -> UI\" binding is happening.\n     *\n     * When executed, this method obtains selected cell property values from various table commands\n     * and passes them to the {@link #view}.\n     *\n     * This way, the UI stays up–to–date with the editor data.\n     */\n    _fillViewFormFromCommandValues() {\n        const commands = this.editor.commands;\n        const borderStyleCommand = commands.get('tableCellBorderStyle');\n        Object.entries(propertyToCommandMap)\n            .map(([property, commandName]) => {\n            const defaultValue = this._defaultTableCellProperties[property] || '';\n            return [\n                property,\n                commands.get(commandName).value || defaultValue\n            ];\n        })\n            .forEach(([property, value]) => {\n            // Do not set the `border-color` and `border-width` fields if `border-style:none`.\n            if ((property === 'borderColor' || property === 'borderWidth') && borderStyleCommand.value === 'none') {\n                return;\n            }\n            this.view.set(property, value);\n        });\n        this._isReady = true;\n    }\n    /**\n     * Shows the {@link #view} in the {@link #_balloon}.\n     *\n     * **Note**: Each time a view is shown, a new {@link #_undoStepBatch} is created. It contains\n     * all changes made to the document when the view is visible, allowing a single undo step\n     * for all of them.\n     */\n    _showView() {\n        const editor = this.editor;\n        if (!this.view) {\n            this.view = this._createPropertiesView();\n        }\n        this.listenTo(editor.ui, 'update', () => {\n            this._updateView();\n        });\n        // Update the view with the model values.\n        this._fillViewFormFromCommandValues();\n        this._balloon.add({\n            view: this.view,\n            position: getBalloonCellPositionData(editor)\n        });\n        // Create a new batch. Clicking \"Cancel\" will undo this batch.\n        this._undoStepBatch = editor.model.createBatch();\n        // Basic a11y.\n        this.view.focus();\n    }\n    /**\n     * Removes the {@link #view} from the {@link #_balloon}.\n     */\n    _hideView() {\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this._isReady = false;\n        // Blur any input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        this.view.saveButtonView.focus();\n        this._balloon.remove(this.view);\n        // Make sure the focus is not lost in the process by putting it directly\n        // into the editing view.\n        this.editor.editing.view.focus();\n    }\n    /**\n     * Repositions the {@link #_balloon} or hides the {@link #view} if a table cell is no longer selected.\n     */\n    _updateView() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        if (!getTableWidgetAncestor(viewDocument.selection)) {\n            this._hideView();\n        }\n        else if (this._isViewVisible) {\n            repositionContextualBalloon(editor, 'cell');\n        }\n    }\n    /**\n     * Returns `true` when the {@link #view} is visible in the {@link #_balloon}.\n     */\n    get _isViewVisible() {\n        return !!this.view && this._balloon.visibleView === this.view;\n    }\n    /**\n     * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n     */\n    get _isViewInBalloon() {\n        return !!this.view && this._balloon.hasView(this.view);\n    }\n    /**\n     * Creates a callback that when executed upon the {@link #view view's} property change\n     * executes a related editor command with the new property value.\n     *\n     * @param defaultValue The default value of the command.\n     */\n    _getPropertyChangeCallback(commandName) {\n        return (evt, propertyName, newValue) => {\n            if (!this._isReady) {\n                return;\n            }\n            this.editor.execute(commandName, {\n                value: newValue,\n                batch: this._undoStepBatch\n            });\n        };\n    }\n    /**\n     * Creates a callback that when executed upon the {@link #view view's} property change:\n     * * Executes a related editor command with the new property value if the value is valid,\n     * * Or sets the error text next to the invalid field, if the value did not pass the validation.\n     */\n    _getValidatedPropertyChangeCallback(options) {\n        const { commandName, viewField, validator, errorText } = options;\n        const setErrorTextDebounced = debounce(() => {\n            viewField.errorText = errorText;\n        }, ERROR_TEXT_TIMEOUT);\n        return (evt, propertyName, newValue) => {\n            setErrorTextDebounced.cancel();\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            if (validator(newValue)) {\n                this.editor.execute(commandName, {\n                    value: newValue,\n                    batch: this._undoStepBatch\n                });\n                viewField.errorText = null;\n            }\n            else {\n                setErrorTextDebounced();\n            }\n        };\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { isObject } from 'lodash-es';\n/**\n * Returns a string if all four values of box sides are equal.\n *\n * If a string is passed, it is treated as a single value (pass-through).\n *\n * ```ts\n * // Returns 'foo':\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'foo', left: 'foo' } );\n * getSingleValue( 'foo' );\n *\n * // Returns undefined:\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'bar', left: 'foo' } );\n * getSingleValue( { top: 'foo', right: 'foo' } );\n * ```\n */\nexport function getSingleValue(objectOrString) {\n    if (!objectOrString || !isObject(objectOrString)) {\n        return objectOrString;\n    }\n    const { top, right, bottom, left } = objectOrString;\n    if (top == right && right == bottom && bottom == left) {\n        return top;\n    }\n}\n/**\n * Adds a unit to a value if the value is a number or a string representing a number.\n *\n * **Note**: It does nothing to non-numeric values.\n *\n * ```ts\n * getSingleValue( 25, 'px' ); // '25px'\n * getSingleValue( 25, 'em' ); // '25em'\n * getSingleValue( '25em', 'px' ); // '25em'\n * getSingleValue( 'foo', 'px' ); // 'foo'\n * ```\n *\n * @param defaultUnit A default unit added to a numeric value.\n */\nexport function addDefaultUnitToNumericValue(value, defaultUnit) {\n    const numericValue = parseFloat(value);\n    if (Number.isNaN(numericValue)) {\n        return value;\n    }\n    if (String(numericValue) !== String(value)) {\n        return value;\n    }\n    return `${numericValue}${defaultUnit}`;\n}\n/**\n * Returns the normalized configuration.\n *\n * @param options.includeAlignmentProperty Whether the \"alignment\" property should be added.\n * @param options.includePaddingProperty Whether the \"padding\" property should be added.\n * @param options.includeVerticalAlignmentProperty Whether the \"verticalAlignment\" property should be added.\n * @param options.includeHorizontalAlignmentProperty Whether the \"horizontalAlignment\" property should be added.\n * @param options.isRightToLeftContent Whether the content is right-to-left.\n */\nexport function getNormalizedDefaultProperties(config, options = {}) {\n    const normalizedConfig = {\n        borderStyle: 'none',\n        borderWidth: '',\n        borderColor: '',\n        backgroundColor: '',\n        width: '',\n        height: '',\n        ...config\n    };\n    if (options.includeAlignmentProperty && !normalizedConfig.alignment) {\n        normalizedConfig.alignment = 'center';\n    }\n    if (options.includePaddingProperty && !normalizedConfig.padding) {\n        normalizedConfig.padding = '';\n    }\n    if (options.includeVerticalAlignmentProperty && !normalizedConfig.verticalAlignment) {\n        normalizedConfig.verticalAlignment = 'middle';\n    }\n    if (options.includeHorizontalAlignmentProperty && !normalizedConfig.horizontalAlignment) {\n        normalizedConfig.horizontalAlignment = options.isRightToLeftContent ? 'right' : 'left';\n    }\n    return normalizedConfig;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties/commands/tablecellpropertycommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The table cell attribute command.\n *\n * The command is a base command for other table cell property commands.\n */\nexport default class TableCellPropertyCommand extends Command {\n    /**\n     * Creates a new `TableCellPropertyCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param attributeName Table cell attribute name.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, attributeName, defaultValue) {\n        super(editor);\n        this.attributeName = attributeName;\n        this._defaultValue = defaultValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const editor = this.editor;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedTableCells = tableUtils.getSelectionAffectedTableCells(editor.model.document.selection);\n        this.isEnabled = !!selectedTableCells.length;\n        this.value = this._getSingleValue(selectedTableCells);\n    }\n    /**\n     * Executes the command.\n     *\n     * @fires execute\n     * @param options.value If set, the command will set the attribute on selected table cells.\n     * If it is not set, the command will remove the attribute from the selected table cells.\n     * @param options.batch Pass the model batch instance to the command to aggregate changes,\n     * for example to allow a single undo step for multiple executions.\n     */\n    execute(options = {}) {\n        const { value, batch } = options;\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const valueToSet = this._getValueToSet(value);\n        model.enqueueChange(batch, writer => {\n            if (valueToSet) {\n                tableCells.forEach(tableCell => writer.setAttribute(this.attributeName, valueToSet, tableCell));\n            }\n            else {\n                tableCells.forEach(tableCell => writer.removeAttribute(this.attributeName, tableCell));\n            }\n        });\n    }\n    /**\n     * Returns the attribute value for a table cell.\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = tableCell.getAttribute(this.attributeName);\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * Returns the proper model value. It can be used to add a default unit to numeric values.\n     */\n    _getValueToSet(value) {\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * Returns a single value for all selected table cells. If the value is the same for all cells,\n     * it will be returned (`undefined` otherwise).\n     */\n    _getSingleValue(tableCells) {\n        const firstCellValue = this._getAttribute(tableCells[0]);\n        const everyCellHasAttribute = tableCells.every(tableCells => this._getAttribute(tableCells) === firstCellValue);\n        return everyCellHasAttribute ? firstCellValue : undefined;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableCellPropertyCommand from '../../tablecellproperties/commands/tablecellpropertycommand';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties';\n/**\n * The table cell width command.\n *\n * The command is registered by the {@link module:table/tablecellwidth/tablecellwidthediting~TableCellWidthEditing} as\n * the `'tableCellWidth'` editor command.\n *\n * To change the width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds a default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */\nexport default class TableCellWidthCommand extends TableCellPropertyCommand {\n    /**\n     * Creates a new `TableCellWidthCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellWidth', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        value = addDefaultUnitToNumericValue(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellwidth/tablecellwidthediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport TableEditing from './../tableediting';\nimport TableCellWidthCommand from './commands/tablecellwidthcommand';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\nimport { enableProperty } from '../utils/common';\n/**\n * The table cell width editing feature.\n *\n * Introduces `tableCellWidth` table cell model attribute alongside with its converters\n * and a command.\n */\nexport default class TableCellWidthEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCellWidthEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableEditing];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const defaultTableCellProperties = getNormalizedDefaultProperties(editor.config.get('table.tableCellProperties.defaultProperties'));\n        enableProperty(editor.model.schema, editor.conversion, {\n            modelAttribute: 'tableCellWidth',\n            styleName: 'width',\n            defaultValue: defaultTableCellProperties.width\n        });\n        editor.commands.add('tableCellWidth', new TableCellWidthCommand(editor, defaultTableCellProperties.width));\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableCellPropertyCommand from './tablecellpropertycommand';\nimport { addDefaultUnitToNumericValue, getSingleValue } from '../../utils/table-properties';\n/**\n * The table cell padding command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellPadding'` editor command.\n *\n * To change the padding of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `padding` attribute to `'5px'` in the model.\n */\nexport default class TableCellPaddingCommand extends TableCellPropertyCommand {\n    /**\n     * Creates a new `TableCellPaddingCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellPadding', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableCellPropertyCommand from './tablecellpropertycommand';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties';\n/**\n * The table cell height command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHeight'` editor command.\n *\n * To change the height of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */\nexport default class TableCellHeightCommand extends TableCellPropertyCommand {\n    /**\n     * Creates a new `TableCellHeightCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellHeight', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableCellPropertyCommand from './tablecellpropertycommand';\n/**\n * The table cell background color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBackgroundColor'` editor command.\n *\n * To change the background color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport default class TableCellBackgroundColorCommand extends TableCellPropertyCommand {\n    /**\n     * Creates a new `TableCellBackgroundColorCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellBackgroundColor', defaultValue);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableCellPropertyCommand from './tablecellpropertycommand';\n/**\n * The table cell vertical alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellVerticalAlignment'` editor command.\n *\n * To change the vertical text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellVerticalAlignment', {\n *   value: 'top'\n * } );\n * ```\n *\n * The following values, corresponding to the\n * [`vertical-align` CSS attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align), are allowed:\n *\n * * `'top'`\n * * `'bottom'`\n *\n * The `'middle'` value is the default one so there is no need to set it.\n */\nexport default class TableCellVerticalAlignmentCommand extends TableCellPropertyCommand {\n    /**\n     * Creates a new `TableCellVerticalAlignmentCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value for the \"alignment\" attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellVerticalAlignment', defaultValue);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableCellPropertyCommand from './tablecellpropertycommand';\n/**\n * The table cell horizontal alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHorizontalAlignment'` editor command.\n *\n * To change the horizontal text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHorizontalAlignment', {\n *  value: 'right'\n * } );\n * ```\n */\nexport default class TableCellHorizontalAlignmentCommand extends TableCellPropertyCommand {\n    /**\n     * Creates a new `TableCellHorizontalAlignmentCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value for the \"alignment\" attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellHorizontalAlignment', defaultValue);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableCellPropertyCommand from './tablecellpropertycommand';\nimport { getSingleValue } from '../../utils/table-properties';\n/**\n * The table cell border style command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderStyle'` editor command.\n *\n * To change the border style of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */\nexport default class TableCellBorderStyleCommand extends TableCellPropertyCommand {\n    /**\n     * Creates a new `TableCellBorderStyleCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellBorderStyle', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableCellPropertyCommand from './tablecellpropertycommand';\nimport { getSingleValue } from '../../utils/table-properties';\n/**\n * The table cell border color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderColor'` editor command.\n *\n * To change the border color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport default class TableCellBorderColorCommand extends TableCellPropertyCommand {\n    /**\n     * Creates a new `TableCellBorderColorCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellBorderColor', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TableCellPropertyCommand from './tablecellpropertycommand';\nimport { addDefaultUnitToNumericValue, getSingleValue } from '../../utils/table-properties';\n/**\n * The table cell border width command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderWidth'` editor command.\n *\n * To change the border width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */\nexport default class TableCellBorderWidthCommand extends TableCellPropertyCommand {\n    /**\n     * Creates a new `TableCellBorderWidthCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableCellBorderWidth', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties/tablecellpropertiesediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addBorderRules, addPaddingRules, addBackgroundRules } from 'ckeditor5/src/engine';\nimport { downcastAttributeToStyle, upcastBorderStyles } from './../converters/tableproperties';\nimport TableEditing from './../tableediting';\nimport TableCellWidthEditing from '../tablecellwidth/tablecellwidthediting';\nimport TableCellPaddingCommand from './commands/tablecellpaddingcommand';\nimport TableCellHeightCommand from './commands/tablecellheightcommand';\nimport TableCellBackgroundColorCommand from './commands/tablecellbackgroundcolorcommand';\nimport TableCellVerticalAlignmentCommand from './commands/tablecellverticalalignmentcommand';\nimport TableCellHorizontalAlignmentCommand from './commands/tablecellhorizontalalignmentcommand';\nimport TableCellBorderStyleCommand from './commands/tablecellborderstylecommand';\nimport TableCellBorderColorCommand from './commands/tablecellbordercolorcommand';\nimport TableCellBorderWidthCommand from './commands/tablecellborderwidthcommand';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\nimport { enableProperty } from '../utils/common';\nconst VALIGN_VALUES_REG_EXP = /^(top|middle|bottom)$/;\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right|justify)$/;\n/**\n * The table cell properties editing feature.\n *\n * Introduces table cell model attributes and their conversion:\n *\n * - border: `tableCellBorderStyle`, `tableCellBorderColor` and `tableCellBorderWidth`\n * - background color: `tableCellBackgroundColor`\n * - cell padding: `tableCellPadding`\n * - horizontal and vertical alignment: `tableCellHorizontalAlignment`, `tableCellVerticalAlignment`\n * - cell width and height: `tableCellWidth`, `tableCellHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` commands\n * - background color: the `'tableCellBackgroundColor'` command\n * - cell padding: the `'tableCellPadding'` command\n * - horizontal and vertical alignment: the `'tableCellHorizontalAlignment'` and `'tableCellVerticalAlignment'` commands\n * - width and height: the `'tableCellWidth'` and `'tableCellHeight'` commands\n */\nexport default class TableCellPropertiesEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCellPropertiesEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableEditing, TableCellWidthEditing];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        editor.config.define('table.tableCellProperties.defaultProperties', {});\n        const defaultTableCellProperties = getNormalizedDefaultProperties(editor.config.get('table.tableCellProperties.defaultProperties'), {\n            includeVerticalAlignmentProperty: true,\n            includeHorizontalAlignmentProperty: true,\n            includePaddingProperty: true,\n            isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n        });\n        editor.data.addStyleProcessorRules(addBorderRules);\n        enableBorderProperties(schema, conversion, {\n            color: defaultTableCellProperties.borderColor,\n            style: defaultTableCellProperties.borderStyle,\n            width: defaultTableCellProperties.borderWidth\n        });\n        editor.commands.add('tableCellBorderStyle', new TableCellBorderStyleCommand(editor, defaultTableCellProperties.borderStyle));\n        editor.commands.add('tableCellBorderColor', new TableCellBorderColorCommand(editor, defaultTableCellProperties.borderColor));\n        editor.commands.add('tableCellBorderWidth', new TableCellBorderWidthCommand(editor, defaultTableCellProperties.borderWidth));\n        enableProperty(schema, conversion, {\n            modelAttribute: 'tableCellHeight',\n            styleName: 'height',\n            defaultValue: defaultTableCellProperties.height\n        });\n        editor.commands.add('tableCellHeight', new TableCellHeightCommand(editor, defaultTableCellProperties.height));\n        editor.data.addStyleProcessorRules(addPaddingRules);\n        enableProperty(schema, conversion, {\n            modelAttribute: 'tableCellPadding',\n            styleName: 'padding',\n            reduceBoxSides: true,\n            defaultValue: defaultTableCellProperties.padding\n        });\n        editor.commands.add('tableCellPadding', new TableCellPaddingCommand(editor, defaultTableCellProperties.padding));\n        editor.data.addStyleProcessorRules(addBackgroundRules);\n        enableProperty(schema, conversion, {\n            modelAttribute: 'tableCellBackgroundColor',\n            styleName: 'background-color',\n            defaultValue: defaultTableCellProperties.backgroundColor\n        });\n        editor.commands.add('tableCellBackgroundColor', new TableCellBackgroundColorCommand(editor, defaultTableCellProperties.backgroundColor));\n        enableHorizontalAlignmentProperty(schema, conversion, defaultTableCellProperties.horizontalAlignment);\n        editor.commands.add('tableCellHorizontalAlignment', new TableCellHorizontalAlignmentCommand(editor, defaultTableCellProperties.horizontalAlignment));\n        enableVerticalAlignmentProperty(schema, conversion, defaultTableCellProperties.verticalAlignment);\n        editor.commands.add('tableCellVerticalAlignment', new TableCellVerticalAlignmentCommand(editor, defaultTableCellProperties.verticalAlignment));\n    }\n}\n/**\n * Enables the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` attributes for table cells.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableCellBorderColor` value.\n * @param defaultBorder.style The default `tableCellBorderStyle` value.\n * @param defaultBorder.width The default `tableCellBorderWidth` value.\n */\nfunction enableBorderProperties(schema, conversion, defaultBorder) {\n    const modelAttributes = {\n        width: 'tableCellBorderWidth',\n        color: 'tableCellBorderColor',\n        style: 'tableCellBorderStyle'\n    };\n    schema.extend('tableCell', {\n        allowAttributes: Object.values(modelAttributes)\n    });\n    upcastBorderStyles(conversion, 'td', modelAttributes, defaultBorder);\n    upcastBorderStyles(conversion, 'th', modelAttributes, defaultBorder);\n    downcastAttributeToStyle(conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.style, styleName: 'border-style' });\n    downcastAttributeToStyle(conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.color, styleName: 'border-color' });\n    downcastAttributeToStyle(conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.width, styleName: 'border-width' });\n}\n/**\n * Enables the `'tableCellHorizontalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default horizontal alignment value.\n */\nfunction enableHorizontalAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('tableCell', {\n        allowAttributes: ['tableCellHorizontalAlignment']\n    });\n    conversion.for('downcast')\n        .attributeToAttribute({\n        model: {\n            name: 'tableCell',\n            key: 'tableCellHorizontalAlignment'\n        },\n        view: alignment => ({\n            key: 'style',\n            value: {\n                'text-align': alignment\n            }\n        })\n    });\n    conversion.for('upcast')\n        // Support for the `text-align:*;` CSS definition for the table cell alignment.\n        .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            styles: {\n                'text-align': ALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellHorizontalAlignment',\n            value: (viewElement) => {\n                const align = viewElement.getStyle('text-align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    })\n        // Support for the `align` attribute as the backward compatibility while pasting from other sources.\n        .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            attributes: {\n                align: ALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellHorizontalAlignment',\n            value: (viewElement) => {\n                const align = viewElement.getAttribute('align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    });\n}\n/**\n * Enables the `'verticalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default vertical alignment value.\n */\nfunction enableVerticalAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('tableCell', {\n        allowAttributes: ['tableCellVerticalAlignment']\n    });\n    conversion.for('downcast')\n        .attributeToAttribute({\n        model: {\n            name: 'tableCell',\n            key: 'tableCellVerticalAlignment'\n        },\n        view: alignment => ({\n            key: 'style',\n            value: {\n                'vertical-align': alignment\n            }\n        })\n    });\n    conversion.for('upcast')\n        // Support for the `vertical-align:*;` CSS definition for the table cell alignment.\n        .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            styles: {\n                'vertical-align': VALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellVerticalAlignment',\n            value: (viewElement) => {\n                const align = viewElement.getStyle('vertical-align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    })\n        // Support for the `align` attribute as the backward compatibility while pasting from other sources.\n        .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            attributes: {\n                valign: VALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellVerticalAlignment',\n            value: (viewElement) => {\n                const valign = viewElement.getAttribute('valign');\n                return valign === defaultValue ? null : valign;\n            }\n        }\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecellproperties\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport TableCellPropertiesUI from './tablecellproperties/tablecellpropertiesui';\nimport TableCellPropertiesEditing from './tablecellproperties/tablecellpropertiesediting';\n/**\n * The table cell properties feature. Enables support for setting properties of table cells (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tableproperties~TableProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing table cell properties editing feature} and\n * the {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI table cell properties UI feature}.\n */\nexport default class TableCellProperties extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCellProperties';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableCellPropertiesEditing, TableCellPropertiesUI];\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The table cell attribute command.\n *\n * This command is a base command for other table property commands.\n */\nexport default class TablePropertyCommand extends Command {\n    /**\n     * Creates a new `TablePropertyCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param attributeName Table cell attribute name.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, attributeName, defaultValue) {\n        super(editor);\n        this.attributeName = attributeName;\n        this._defaultValue = defaultValue;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const table = selection.getFirstPosition().findAncestor('table');\n        this.isEnabled = !!table;\n        this.value = this._getValue(table);\n    }\n    /**\n     * Executes the command.\n     *\n     * @fires execute\n     * @param options.value If set, the command will set the attribute on the selected table.\n     * If not set, the command will remove the attribute from the selected table.\n     * @param options.batch Pass the model batch instance to the command to aggregate changes,\n     * for example, to allow a single undo step for multiple executions.\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const { value, batch } = options;\n        const table = selection.getFirstPosition().findAncestor('table');\n        const valueToSet = this._getValueToSet(value);\n        model.enqueueChange(batch, writer => {\n            if (valueToSet) {\n                writer.setAttribute(this.attributeName, valueToSet, table);\n            }\n            else {\n                writer.removeAttribute(this.attributeName, table);\n            }\n        });\n    }\n    /**\n     * Returns the attribute value for a table.\n     */\n    _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = table.getAttribute(this.attributeName);\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * Returns the proper model value. It can be used to add a default unit to numeric values.\n     */\n    _getValueToSet(value) {\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TablePropertyCommand from './tablepropertycommand';\n/**\n * The table background color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBackgroundColor'` editor command.\n *\n * To change the background color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport default class TableBackgroundColorCommand extends TablePropertyCommand {\n    /**\n     * Creates a new `TableBackgroundColorCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableBackgroundColor', defaultValue);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TablePropertyCommand from './tablepropertycommand';\nimport { getSingleValue } from '../../utils/table-properties';\n/**\n * The table border color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderColor'` editor command.\n *\n * To change the border color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport default class TableBorderColorCommand extends TablePropertyCommand {\n    /**\n     * Creates a new `TableBorderColorCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableBorderColor', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = getSingleValue(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TablePropertyCommand from './tablepropertycommand';\nimport { getSingleValue } from '../../utils/table-properties';\n/**\n * The table style border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderStyle'` editor command.\n *\n * To change the border style of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */\nexport default class TableBorderStyleCommand extends TablePropertyCommand {\n    /**\n     * Creates a new `TableBorderStyleCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableBorderStyle', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = getSingleValue(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TablePropertyCommand from './tablepropertycommand';\nimport { addDefaultUnitToNumericValue, getSingleValue } from '../../utils/table-properties';\n/**\n * The table width border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderWidth'` editor command.\n *\n * To change the border width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */\nexport default class TableBorderWidthCommand extends TablePropertyCommand {\n    /**\n     * Creates a new `TableBorderWidthCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableBorderWidth', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = getSingleValue(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/commands/tablewidthcommand\n */\nimport TablePropertyCommand from './tablepropertycommand';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties';\n/**\n * The table width command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableWidth'` editor command.\n *\n * To change the width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '400px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */\nexport default class TableWidthCommand extends TablePropertyCommand {\n    /**\n     * Creates a new `TableWidthCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableWidth', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        value = addDefaultUnitToNumericValue(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/commands/tableheightcommand\n */\nimport TablePropertyCommand from './tablepropertycommand';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties';\n/**\n * The table height command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableHeight'` editor command.\n *\n * To change the height of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '500px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */\nexport default class TableHeightCommand extends TablePropertyCommand {\n    /**\n     * Creates a new `TableHeightCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value of the attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableHeight', defaultValue);\n    }\n    /**\n     * @inheritDoc\n     */\n    _getValueToSet(value) {\n        value = addDefaultUnitToNumericValue(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport TablePropertyCommand from './tablepropertycommand';\n/**\n * The table alignment command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableAlignment'` editor command.\n *\n * To change the alignment of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableAlignment', {\n *   value: 'right'\n * } );\n * ```\n */\nexport default class TableAlignmentCommand extends TablePropertyCommand {\n    /**\n     * Creates a new `TableAlignmentCommand` instance.\n     *\n     * @param editor An editor in which this command will be used.\n     * @param defaultValue The default value for the \"alignment\" attribute.\n     */\n    constructor(editor, defaultValue) {\n        super(editor, 'tableAlignment', defaultValue);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/tablepropertiesediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addBackgroundRules, addBorderRules } from 'ckeditor5/src/engine';\nimport TableEditing from '../tableediting';\nimport { downcastAttributeToStyle, downcastTableAttribute, upcastBorderStyles, upcastStyleToAttribute } from '../converters/tableproperties';\nimport TableBackgroundColorCommand from './commands/tablebackgroundcolorcommand';\nimport TableBorderColorCommand from './commands/tablebordercolorcommand';\nimport TableBorderStyleCommand from './commands/tableborderstylecommand';\nimport TableBorderWidthCommand from './commands/tableborderwidthcommand';\nimport TableWidthCommand from './commands/tablewidthcommand';\nimport TableHeightCommand from './commands/tableheightcommand';\nimport TableAlignmentCommand from './commands/tablealignmentcommand';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right)$/;\nconst FLOAT_VALUES_REG_EXP = /^(left|none|right)$/;\n/**\n * The table properties editing feature.\n *\n * Introduces table's model attributes and their conversion:\n *\n * - border: `tableBorderStyle`, `tableBorderColor` and `tableBorderWidth`\n * - background color: `tableBackgroundColor`\n * - horizontal alignment: `tableAlignment`\n * - width & height: `tableWidth` & `tableHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: `'tableBorderStyle'`, `'tableBorderColor'` and `'tableBorderWidth'` commands\n * - background color: `'tableBackgroundColor'`\n * - horizontal alignment: `'tableAlignment'`\n * - width & height: `'tableWidth'` & `'tableHeight'`\n */\nexport default class TablePropertiesEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TablePropertiesEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableEditing];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        editor.config.define('table.tableProperties.defaultProperties', {});\n        const defaultTableProperties = getNormalizedDefaultProperties(editor.config.get('table.tableProperties.defaultProperties'), {\n            includeAlignmentProperty: true\n        });\n        editor.data.addStyleProcessorRules(addBorderRules);\n        enableBorderProperties(schema, conversion, {\n            color: defaultTableProperties.borderColor,\n            style: defaultTableProperties.borderStyle,\n            width: defaultTableProperties.borderWidth\n        });\n        editor.commands.add('tableBorderColor', new TableBorderColorCommand(editor, defaultTableProperties.borderColor));\n        editor.commands.add('tableBorderStyle', new TableBorderStyleCommand(editor, defaultTableProperties.borderStyle));\n        editor.commands.add('tableBorderWidth', new TableBorderWidthCommand(editor, defaultTableProperties.borderWidth));\n        enableAlignmentProperty(schema, conversion, defaultTableProperties.alignment);\n        editor.commands.add('tableAlignment', new TableAlignmentCommand(editor, defaultTableProperties.alignment));\n        enableTableToFigureProperty(schema, conversion, {\n            modelAttribute: 'tableWidth',\n            styleName: 'width',\n            defaultValue: defaultTableProperties.width\n        });\n        editor.commands.add('tableWidth', new TableWidthCommand(editor, defaultTableProperties.width));\n        enableTableToFigureProperty(schema, conversion, {\n            modelAttribute: 'tableHeight',\n            styleName: 'height',\n            defaultValue: defaultTableProperties.height\n        });\n        editor.commands.add('tableHeight', new TableHeightCommand(editor, defaultTableProperties.height));\n        editor.data.addStyleProcessorRules(addBackgroundRules);\n        enableProperty(schema, conversion, {\n            modelAttribute: 'tableBackgroundColor',\n            styleName: 'background-color',\n            defaultValue: defaultTableProperties.backgroundColor\n        });\n        editor.commands.add('tableBackgroundColor', new TableBackgroundColorCommand(editor, defaultTableProperties.backgroundColor));\n    }\n}\n/**\n * Enables `tableBorderStyle'`, `tableBorderColor'` and `tableBorderWidth'` attributes for table.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableBorderColor` value.\n * @param defaultBorder.style The default `tableBorderStyle` value.\n * @param defaultBorder.width The default `tableBorderWidth` value.\n */\nfunction enableBorderProperties(schema, conversion, defaultBorder) {\n    const modelAttributes = {\n        width: 'tableBorderWidth',\n        color: 'tableBorderColor',\n        style: 'tableBorderStyle'\n    };\n    schema.extend('table', {\n        allowAttributes: Object.values(modelAttributes)\n    });\n    upcastBorderStyles(conversion, 'table', modelAttributes, defaultBorder);\n    downcastTableAttribute(conversion, { modelAttribute: modelAttributes.color, styleName: 'border-color' });\n    downcastTableAttribute(conversion, { modelAttribute: modelAttributes.style, styleName: 'border-style' });\n    downcastTableAttribute(conversion, { modelAttribute: modelAttributes.width, styleName: 'border-width' });\n}\n/**\n * Enables the `'alignment'` attribute for table.\n *\n * @param defaultValue The default alignment value.\n */\nfunction enableAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('table', {\n        allowAttributes: ['tableAlignment']\n    });\n    conversion.for('downcast')\n        .attributeToAttribute({\n        model: {\n            name: 'table',\n            key: 'tableAlignment'\n        },\n        view: alignment => ({\n            key: 'style',\n            value: {\n                // Model: `alignment:center` => CSS: `float:none`.\n                float: alignment === 'center' ? 'none' : alignment\n            }\n        }),\n        converterPriority: 'high'\n    });\n    conversion.for('upcast')\n        // Support for the `float:*;` CSS definition for the table alignment.\n        .attributeToAttribute({\n        view: {\n            name: /^(table|figure)$/,\n            styles: {\n                float: FLOAT_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableAlignment',\n            value: (viewElement) => {\n                let align = viewElement.getStyle('float');\n                // CSS: `float:none` => Model: `alignment:center`.\n                if (align === 'none') {\n                    align = 'center';\n                }\n                return align === defaultValue ? null : align;\n            }\n        }\n    })\n        // Support for the `align` attribute as the backward compatibility while pasting from other sources.\n        .attributeToAttribute({\n        view: {\n            attributes: {\n                align: ALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            name: 'table',\n            key: 'tableAlignment',\n            value: (viewElement) => {\n                const align = viewElement.getAttribute('align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    });\n}\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */\nfunction enableProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('table', {\n        allowAttributes: [modelAttribute]\n    });\n    upcastStyleToAttribute(conversion, { viewElement: 'table', ...options });\n    downcastTableAttribute(conversion, options);\n}\n/**\n * Enables conversion for an attribute for simple view (figure) to model (table) mappings.\n */\nfunction enableTableToFigureProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('table', {\n        allowAttributes: [modelAttribute]\n    });\n    upcastStyleToAttribute(conversion, {\n        viewElement: /^(table|figure)$/,\n        shouldUpcast: (element) => !(element.name == 'table' && element.parent.name == 'figure'),\n        ...options\n    });\n    downcastAttributeToStyle(conversion, { modelElement: 'table', ...options });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/ui/tablepropertiesview\n */\nimport { addListToDropdown, ButtonView, createLabeledDropdown, createLabeledInputText, FocusCycler, FormHeaderView, LabeledFieldView, LabelView, submitHandler, ToolbarView, View, ViewCollection } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\nimport { fillToolbar, getBorderStyleDefinitions, getBorderStyleLabels, getLabeledColorInputCreator } from '../../utils/ui/table-properties';\nimport FormRowView from '../../ui/formrowview';\nimport '../../../theme/form.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tableproperties.css';\nconst ALIGNMENT_ICONS = {\n    left: icons.objectLeft,\n    center: icons.objectCenter,\n    right: icons.objectRight\n};\n/**\n * The class representing a table properties form, allowing users to customize\n * certain style aspects of a table, for instance, border, background color, alignment, etc..\n */\nexport default class TablePropertiesView extends View {\n    /**\n     * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n     * @param options Additional configuration of the view.\n     */\n    constructor(locale, options) {\n        super(locale);\n        this.set({\n            borderStyle: '',\n            borderWidth: '',\n            borderColor: '',\n            backgroundColor: '',\n            width: '',\n            height: '',\n            alignment: ''\n        });\n        this.options = options;\n        const { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n        const { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n        const { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n        const { alignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.children = this.createCollection();\n        this.borderStyleDropdown = borderStyleDropdown;\n        this.borderWidthInput = borderWidthInput;\n        this.borderColorInput = borderColorInput;\n        this.backgroundInput = backgroundInput;\n        this.widthInput = widthInput;\n        this.heightInput = heightInput;\n        this.alignmentToolbar = alignmentToolbar;\n        // Defer creating to make sure other fields are present and the Save button can\n        // bind its #isEnabled to their error messages so there's no way to save unless all\n        // fields are valid.\n        const { saveButtonView, cancelButtonView } = this._createActionButtons();\n        this.saveButtonView = saveButtonView;\n        this.cancelButtonView = cancelButtonView;\n        this._focusables = new ViewCollection();\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        // Form header.\n        this.children.add(new FormHeaderView(locale, {\n            label: this.t('Table properties')\n        }));\n        // Border row.\n        this.children.add(new FormRowView(locale, {\n            labelView: borderRowLabel,\n            children: [\n                borderRowLabel,\n                borderStyleDropdown,\n                borderColorInput,\n                borderWidthInput\n            ],\n            class: 'ck-table-form__border-row'\n        }));\n        // Background row.\n        this.children.add(new FormRowView(locale, {\n            labelView: backgroundRowLabel,\n            children: [\n                backgroundRowLabel,\n                backgroundInput\n            ],\n            class: 'ck-table-form__background-row'\n        }));\n        this.children.add(new FormRowView(locale, {\n            children: [\n                // Dimensions row.\n                new FormRowView(locale, {\n                    labelView: dimensionsLabel,\n                    children: [\n                        dimensionsLabel,\n                        widthInput,\n                        operatorLabel,\n                        heightInput\n                    ],\n                    class: 'ck-table-form__dimensions-row'\n                }),\n                // Alignment row.\n                new FormRowView(locale, {\n                    labelView: alignmentLabel,\n                    children: [\n                        alignmentLabel,\n                        alignmentToolbar\n                    ],\n                    class: 'ck-table-properties-form__alignment-row'\n                })\n            ]\n        }));\n        // Action row.\n        this.children.add(new FormRowView(locale, {\n            children: [\n                this.saveButtonView,\n                this.cancelButtonView\n            ],\n            class: 'ck-table-form__action-row'\n        }));\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form',\n                    'ck-table-form',\n                    'ck-table-properties-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n        // which is of the \"submit\" DOM \"type\".\n        submitHandler({\n            view: this\n        });\n        [\n            this.borderStyleDropdown,\n            this.borderColorInput,\n            this.borderColorInput.fieldView.dropdownView.buttonView,\n            this.borderWidthInput,\n            this.backgroundInput,\n            this.backgroundInput.fieldView.dropdownView.buttonView,\n            this.widthInput,\n            this.heightInput,\n            this.alignmentToolbar,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach(view => {\n            // Register the view as focusable.\n            this._focusables.add(view);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(view.element);\n        });\n        // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the fist focusable field in the form.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #borderStyleDropdown},\n     * * {@link #borderWidthInput},\n     * * {@link #borderColorInput}.\n     */\n    _createBorderFields() {\n        const defaultTableProperties = this.options.defaultTableProperties;\n        const defaultBorder = {\n            style: defaultTableProperties.borderStyle,\n            width: defaultTableProperties.borderWidth,\n            color: defaultTableProperties.borderColor\n        };\n        const colorInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.borderColors,\n            columns: 5,\n            defaultColorValue: defaultBorder.color,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const locale = this.locale;\n        const t = this.t;\n        const accessibleLabel = t('Style');\n        // -- Group label ---------------------------------------------\n        const borderRowLabel = new LabelView(locale);\n        borderRowLabel.text = t('Border');\n        // -- Style ---------------------------------------------------\n        const styleLabels = getBorderStyleLabels(t);\n        const borderStyleDropdown = new LabeledFieldView(locale, createLabeledDropdown);\n        borderStyleDropdown.set({\n            label: accessibleLabel,\n            class: 'ck-table-form__border-style'\n        });\n        borderStyleDropdown.fieldView.buttonView.set({\n            ariaLabel: accessibleLabel,\n            ariaLabelledBy: undefined,\n            isOn: false,\n            withText: true,\n            tooltip: accessibleLabel\n        });\n        borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', value => {\n            return styleLabels[value ? value : 'none'];\n        });\n        borderStyleDropdown.fieldView.on('execute', evt => {\n            this.borderStyle = evt.source._borderStyleValue;\n        });\n        borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', value => !value);\n        addListToDropdown(borderStyleDropdown.fieldView, getBorderStyleDefinitions(this, defaultBorder.style), {\n            role: 'menu',\n            ariaLabel: accessibleLabel\n        });\n        // -- Width ---------------------------------------------------\n        const borderWidthInput = new LabeledFieldView(locale, createLabeledInputText);\n        borderWidthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__border-width'\n        });\n        borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n        borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderWidthInput.fieldView.on('input', () => {\n            this.borderWidth = borderWidthInput.fieldView.element.value;\n        });\n        // -- Color ---------------------------------------------------\n        const borderColorInput = new LabeledFieldView(locale, colorInputCreator);\n        borderColorInput.set({\n            label: t('Color'),\n            class: 'ck-table-form__border-color'\n        });\n        borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n        borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderColorInput.fieldView.on('input', () => {\n            this.borderColor = borderColorInput.fieldView.value;\n        });\n        // Reset the border color and width fields depending on the `border-style` value.\n        this.on('change:borderStyle', (evt, name, newValue, oldValue) => {\n            // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n            // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n            if (!isBorderStyleSet(newValue)) {\n                this.borderColor = '';\n                this.borderWidth = '';\n            }\n            // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n            if (!isBorderStyleSet(oldValue)) {\n                this.borderColor = defaultBorder.color;\n                this.borderWidth = defaultBorder.width;\n            }\n        });\n        return {\n            borderRowLabel,\n            borderStyleDropdown,\n            borderColorInput,\n            borderWidthInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #backgroundInput}.\n     */\n    _createBackgroundFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Group label ---------------------------------------------\n        const backgroundRowLabel = new LabelView(locale);\n        backgroundRowLabel.text = t('Background');\n        // -- Background color input -----------------------------------\n        const backgroundInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.backgroundColors,\n            columns: 5,\n            defaultColorValue: this.options.defaultTableProperties.backgroundColor,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const backgroundInput = new LabeledFieldView(locale, backgroundInputCreator);\n        backgroundInput.set({\n            label: t('Color'),\n            class: 'ck-table-properties-form__background'\n        });\n        backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n        backgroundInput.fieldView.on('input', () => {\n            this.backgroundColor = backgroundInput.fieldView.value;\n        });\n        return {\n            backgroundRowLabel,\n            backgroundInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #widthInput},\n     * * {@link #heightInput}.\n     */\n    _createDimensionFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const dimensionsLabel = new LabelView(locale);\n        dimensionsLabel.text = t('Dimensions');\n        // -- Width ---------------------------------------------------\n        const widthInput = new LabeledFieldView(locale, createLabeledInputText);\n        widthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__dimensions-row__width'\n        });\n        widthInput.fieldView.bind('value').to(this, 'width');\n        widthInput.fieldView.on('input', () => {\n            this.width = widthInput.fieldView.element.value;\n        });\n        // -- Operator ---------------------------------------------------\n        const operatorLabel = new View(locale);\n        operatorLabel.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck-table-form__dimension-operator'\n                ]\n            },\n            children: [\n                { text: '×' }\n            ]\n        });\n        // -- Height ---------------------------------------------------\n        const heightInput = new LabeledFieldView(locale, createLabeledInputText);\n        heightInput.set({\n            label: t('Height'),\n            class: 'ck-table-form__dimensions-row__height'\n        });\n        heightInput.fieldView.bind('value').to(this, 'height');\n        heightInput.fieldView.on('input', () => {\n            this.height = heightInput.fieldView.element.value;\n        });\n        return {\n            dimensionsLabel,\n            widthInput,\n            operatorLabel,\n            heightInput\n        };\n    }\n    /**\n     * Creates the following form fields:\n     *\n     * * {@link #alignmentToolbar}.\n     */\n    _createAlignmentFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const alignmentLabel = new LabelView(locale);\n        alignmentLabel.text = t('Alignment');\n        // -- Toolbar ---------------------------------------------------\n        const alignmentToolbar = new ToolbarView(locale);\n        alignmentToolbar.set({\n            isCompact: true,\n            ariaLabel: t('Table alignment toolbar')\n        });\n        fillToolbar({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: alignmentToolbar,\n            labels: this._alignmentLabels,\n            propertyName: 'alignment',\n            defaultValue: this.options.defaultTableProperties.alignment\n        });\n        return {\n            alignmentLabel,\n            alignmentToolbar\n        };\n    }\n    /**\n     * Creates the following form controls:\n     *\n     * * {@link #saveButtonView},\n     * * {@link #cancelButtonView}.\n     */\n    _createActionButtons() {\n        const locale = this.locale;\n        const t = this.t;\n        const saveButtonView = new ButtonView(locale);\n        const cancelButtonView = new ButtonView(locale);\n        const fieldsThatShouldValidateToSave = [\n            this.borderWidthInput,\n            this.borderColorInput,\n            this.backgroundInput,\n            this.widthInput,\n            this.heightInput\n        ];\n        saveButtonView.set({\n            label: t('Save'),\n            icon: icons.check,\n            class: 'ck-button-save',\n            type: 'submit',\n            withText: true\n        });\n        saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', (...errorTexts) => {\n            return errorTexts.every(errorText => !errorText);\n        });\n        cancelButtonView.set({\n            label: t('Cancel'),\n            icon: icons.cancel,\n            class: 'ck-button-cancel',\n            withText: true\n        });\n        cancelButtonView.delegate('execute').to(this, 'cancel');\n        return {\n            saveButtonView, cancelButtonView\n        };\n    }\n    /**\n     * Provides localized labels for {@link #alignmentToolbar} buttons.\n     */\n    get _alignmentLabels() {\n        const locale = this.locale;\n        const t = this.t;\n        const left = t('Align table to the left');\n        const center = t('Center table');\n        const right = t('Align table to the right');\n        // Returns object with a proper order of labels.\n        if (locale.uiLanguageDirection === 'rtl') {\n            return { right, center, left };\n        }\n        else {\n            return { left, center, right };\n        }\n    }\n}\nfunction isBorderStyleSet(value) {\n    return value !== 'none';\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties/tablepropertiesui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView, ContextualBalloon, clickOutsideHandler, getLocalizedColorOptions, normalizeColorOptions } from 'ckeditor5/src/ui';\nimport { debounce } from 'lodash-es';\nimport TablePropertiesView from './ui/tablepropertiesview';\nimport tableProperties from './../../theme/icons/table-properties.svg';\nimport { colorFieldValidator, getLocalizedColorErrorText, getLocalizedLengthErrorText, lengthFieldValidator, lineWidthFieldValidator, defaultColors } from '../utils/ui/table-properties';\nimport { getTableWidgetAncestor } from '../utils/ui/widget';\nimport { getBalloonTablePositionData, repositionContextualBalloon } from '../utils/ui/contextualballoon';\nimport { getNormalizedDefaultProperties } from '../utils/table-properties';\nconst ERROR_TEXT_TIMEOUT = 500;\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n    borderStyle: 'tableBorderStyle',\n    borderColor: 'tableBorderColor',\n    borderWidth: 'tableBorderWidth',\n    backgroundColor: 'tableBackgroundColor',\n    width: 'tableWidth',\n    height: 'tableHeight',\n    alignment: 'tableAlignment'\n};\n/**\n * The table properties UI plugin. It introduces the `'tableProperties'` button\n * that opens a form allowing to specify visual styling of an entire table.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport default class TablePropertiesUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TablePropertiesUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * The properties form view displayed inside the balloon.\n         */\n        this.view = null;\n        editor.config.define('table.tableProperties', {\n            borderColors: defaultColors,\n            backgroundColors: defaultColors\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        this._defaultTableProperties = getNormalizedDefaultProperties(editor.config.get('table.tableProperties.defaultProperties'), {\n            includeAlignmentProperty: true\n        });\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        editor.ui.componentFactory.add('tableProperties', locale => {\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Table properties'),\n                icon: tableProperties,\n                tooltip: true\n            });\n            this.listenTo(view, 'execute', () => this._showView());\n            const commands = Object.values(propertyToCommandMap)\n                .map(commandName => editor.commands.get(commandName));\n            view.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => (areEnabled.some(isCommandEnabled => isCommandEnabled)));\n            return view;\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed.\n        // See https://github.com/ckeditor/ckeditor5/issues/1341.\n        if (this.view) {\n            this.view.destroy();\n        }\n    }\n    /**\n     * Creates the {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} instance.\n     *\n     * @returns The table properties form view instance.\n     */\n    _createPropertiesView() {\n        const editor = this.editor;\n        const config = editor.config.get('table.tableProperties');\n        const borderColorsConfig = normalizeColorOptions(config.borderColors);\n        const localizedBorderColors = getLocalizedColorOptions(editor.locale, borderColorsConfig);\n        const backgroundColorsConfig = normalizeColorOptions(config.backgroundColors);\n        const localizedBackgroundColors = getLocalizedColorOptions(editor.locale, backgroundColorsConfig);\n        const hasColorPicker = config.colorPicker !== false;\n        const view = new TablePropertiesView(editor.locale, {\n            borderColors: localizedBorderColors,\n            backgroundColors: localizedBackgroundColors,\n            defaultTableProperties: this._defaultTableProperties,\n            colorPickerConfig: hasColorPicker ? (config.colorPicker || {}) : false\n        });\n        const t = editor.t;\n        // Render the view so its #element is available for the clickOutsideHandler.\n        view.render();\n        this.listenTo(view, 'submit', () => {\n            this._hideView();\n        });\n        this.listenTo(view, 'cancel', () => {\n            // https://github.com/ckeditor/ckeditor5/issues/6180\n            if (this._undoStepBatch.operations.length) {\n                editor.execute('undo', this._undoStepBatch);\n            }\n            this._hideView();\n        });\n        // Close the balloon on Esc key press.\n        view.keystrokes.set('Esc', (data, cancel) => {\n            this._hideView();\n            cancel();\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: view,\n            activator: () => this._isViewInBalloon,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideView()\n        });\n        const colorErrorText = getLocalizedColorErrorText(t);\n        const lengthErrorText = getLocalizedLengthErrorText(t);\n        // Create the \"UI -> editor data\" binding.\n        // These listeners update the editor data (via table commands) when any observable\n        // property of the view has changed. They also validate the value and display errors in the UI\n        // when necessary. This makes the view live, which means the changes are\n        // visible in the editing as soon as the user types or changes fields' values.\n        view.on('change:borderStyle', this._getPropertyChangeCallback('tableBorderStyle'));\n        view.on('change:borderColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderColorInput,\n            commandName: 'tableBorderColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:borderWidth', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderWidthInput,\n            commandName: 'tableBorderWidth',\n            errorText: lengthErrorText,\n            validator: lineWidthFieldValidator\n        }));\n        view.on('change:backgroundColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.backgroundInput,\n            commandName: 'tableBackgroundColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:width', this._getValidatedPropertyChangeCallback({\n            viewField: view.widthInput,\n            commandName: 'tableWidth',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:height', this._getValidatedPropertyChangeCallback({\n            viewField: view.heightInput,\n            commandName: 'tableHeight',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:alignment', this._getPropertyChangeCallback('tableAlignment'));\n        return view;\n    }\n    /**\n     * In this method the \"editor data -> UI\" binding is happening.\n     *\n     * When executed, this method obtains selected table property values from various table commands\n     * and passes them to the {@link #view}.\n     *\n     * This way, the UI stays up–to–date with the editor data.\n     */\n    _fillViewFormFromCommandValues() {\n        const commands = this.editor.commands;\n        const borderStyleCommand = commands.get('tableBorderStyle');\n        Object.entries(propertyToCommandMap)\n            .map(([property, commandName]) => {\n            const propertyKey = property;\n            const defaultValue = this._defaultTableProperties[propertyKey] || '';\n            return [propertyKey, (commands.get(commandName).value || defaultValue)];\n        })\n            .forEach(([property, value]) => {\n            // Do not set the `border-color` and `border-width` fields if `border-style:none`.\n            if ((property === 'borderColor' || property === 'borderWidth') && borderStyleCommand.value === 'none') {\n                return;\n            }\n            this.view.set(property, value);\n        });\n        this._isReady = true;\n    }\n    /**\n     * Shows the {@link #view} in the {@link #_balloon}.\n     *\n     * **Note**: Each time a view is shown, the new {@link #_undoStepBatch} is created that contains\n     * all changes made to the document when the view is visible, allowing a single undo step\n     * for all of them.\n     */\n    _showView() {\n        const editor = this.editor;\n        if (!this.view) {\n            this.view = this._createPropertiesView();\n        }\n        this.listenTo(editor.ui, 'update', () => {\n            this._updateView();\n        });\n        // Update the view with the model values.\n        this._fillViewFormFromCommandValues();\n        this._balloon.add({\n            view: this.view,\n            position: getBalloonTablePositionData(editor)\n        });\n        // Create a new batch. Clicking \"Cancel\" will undo this batch.\n        this._undoStepBatch = editor.model.createBatch();\n        // Basic a11y.\n        this.view.focus();\n    }\n    /**\n     * Removes the {@link #view} from the {@link #_balloon}.\n     */\n    _hideView() {\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this._isReady = false;\n        // Blur any input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        this.view.saveButtonView.focus();\n        this._balloon.remove(this.view);\n        // Make sure the focus is not lost in the process by putting it directly\n        // into the editing view.\n        this.editor.editing.view.focus();\n    }\n    /**\n     * Repositions the {@link #_balloon} or hides the {@link #view} if a table is no longer selected.\n     */\n    _updateView() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        if (!getTableWidgetAncestor(viewDocument.selection)) {\n            this._hideView();\n        }\n        else if (this._isViewVisible) {\n            repositionContextualBalloon(editor, 'table');\n        }\n    }\n    /**\n     * Returns `true` when the {@link #view} is the visible in the {@link #_balloon}.\n     */\n    get _isViewVisible() {\n        return !!this.view && this._balloon.visibleView === this.view;\n    }\n    /**\n     * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n     */\n    get _isViewInBalloon() {\n        return !!this.view && this._balloon.hasView(this.view);\n    }\n    /**\n     * Creates a callback that when executed upon {@link #view view's} property change\n     * executes a related editor command with the new property value.\n     *\n     * If new value will be set to the default value, the command will not be executed.\n     *\n     * @param commandName The command that will be executed.\n     */\n    _getPropertyChangeCallback(commandName) {\n        return (evt, propertyName, newValue) => {\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            this.editor.execute(commandName, {\n                value: newValue,\n                batch: this._undoStepBatch\n            });\n        };\n    }\n    /**\n     * Creates a callback that when executed upon {@link #view view's} property change:\n     * * executes a related editor command with the new property value if the value is valid,\n     * * or sets the error text next to the invalid field, if the value did not pass the validation.\n     */\n    _getValidatedPropertyChangeCallback(options) {\n        const { commandName, viewField, validator, errorText } = options;\n        const setErrorTextDebounced = debounce(() => {\n            viewField.errorText = errorText;\n        }, ERROR_TEXT_TIMEOUT);\n        return (evt, propertyName, newValue) => {\n            setErrorTextDebounced.cancel();\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            if (validator(newValue)) {\n                this.editor.execute(commandName, {\n                    value: newValue,\n                    batch: this._undoStepBatch\n                });\n                viewField.errorText = null;\n            }\n            else {\n                setErrorTextDebounced();\n            }\n        };\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableproperties\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport TablePropertiesEditing from './tableproperties/tablepropertiesediting';\nimport TablePropertiesUI from './tableproperties/tablepropertiesui';\n/**\n * The table properties feature. Enables support for setting properties of tables (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tablecellproperties~TableCellProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing table properties editing feature} and\n * the {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI table properties UI feature}.\n */\nexport default class TableProperties extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableProperties';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TablePropertiesEditing, TablePropertiesUI];\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Injects a table caption post-fixer into the model.\n *\n * The role of the table caption post-fixer is to ensure that the table with caption have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * If there are many caption model element, they are merged into one model.\n * * A final, merged caption model is placed at the end of the table.\n */\nexport default function injectTableCaptionPostFixer(model) {\n    model.document.registerPostFixer(writer => tableCaptionPostFixer(writer, model));\n}\n/**\n * The table caption post-fixer.\n */\nfunction tableCaptionPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    for (const entry of changes) {\n        if (entry.type != 'insert') {\n            continue;\n        }\n        const positionParent = entry.position.parent;\n        if (positionParent.is('element', 'table') || entry.name == 'table') {\n            const table = (entry.name == 'table' ? entry.position.nodeAfter : positionParent);\n            const captionsToMerge = Array.from(table.getChildren())\n                .filter((child) => child.is('element', 'caption'));\n            const firstCaption = captionsToMerge.shift();\n            if (!firstCaption) {\n                continue;\n            }\n            // Move all the contents of the captions to the first one.\n            for (const caption of captionsToMerge) {\n                writer.move(writer.createRangeIn(caption), firstCaption, 'end');\n                writer.remove(caption);\n            }\n            // Make sure the final caption is at the end of the table.\n            if (firstCaption.nextSibling) {\n                writer.move(writer.createRangeOn(firstCaption), table, 'end');\n                wasFixed = true;\n            }\n            // Do we merged captions and/or moved the single caption to the end of the table?\n            wasFixed = !!captionsToMerge.length || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Checks if the provided model element is a `table`.\n *\n * @param modelElement Element to check if it is a table.\n */\nexport function isTable(modelElement) {\n    return !!modelElement && modelElement.is('element', 'table');\n}\n/**\n * Returns the caption model element from a given table element. Returns `null` if no caption is found.\n *\n * @param tableModelElement Table element in which we will try to find a caption element.\n */\nexport function getCaptionFromTableModelElement(tableModelElement) {\n    for (const node of tableModelElement.getChildren()) {\n        if (node.is('element', 'caption')) {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Returns the caption model element for a model selection. Returns `null` if the selection has no caption element ancestor.\n *\n * @param selection The selection checked for caption presence.\n */\nexport function getCaptionFromModelSelection(selection) {\n    const tableElement = getSelectionAffectedTable(selection);\n    if (!tableElement) {\n        return null;\n    }\n    return getCaptionFromTableModelElement(tableElement);\n}\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a caption.\n *\n * There are two possible forms of the valid caption:\n *  - A `<figcaption>` element inside a `<figure class=\"table\">` element.\n *  - A `<caption>` inside a <table>.\n *\n * @returns Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element cannot be matched.\n */\nexport function matchTableCaptionViewElement(element) {\n    const parent = element.parent;\n    if (element.name == 'figcaption' && parent && parent.is('element', 'figure') && parent.hasClass('table')) {\n        return { name: true };\n    }\n    if (element.name == 'caption' && parent && parent.is('element', 'table')) {\n        return { name: true };\n    }\n    return null;\n}\n/**\n * Depending on the position of the selection we either return the table under cursor or look for the table higher in the hierarchy.\n */\nexport function getSelectionAffectedTable(selection) {\n    const selectedElement = selection.getSelectedElement();\n    // Is the command triggered from the `tableToolbar`?\n    if (selectedElement && selectedElement.is('element', 'table')) {\n        return selectedElement;\n    }\n    return selection.getFirstPosition().findAncestor('table');\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n* @module table/tablecaption/toggletablecaptioncommand\n*/\nimport { Command } from 'ckeditor5/src/core';\nimport { getCaptionFromTableModelElement, getSelectionAffectedTable } from './utils';\n/**\n * The toggle table caption command.\n *\n * This command is registered by {@link module:table/tablecaption/tablecaptionediting~TableCaptionEditing} as the\n * `'toggleTableCaption'` editor command.\n *\n * Executing this command:\n *\n * * either adds or removes the table caption of a selected table (depending on whether the caption is present or not),\n * * removes the table caption if the selection is anchored in one.\n *\n * ```ts\n * // Toggle the presence of the caption.\n * editor.execute( 'toggleTableCaption' );\n * ```\n *\n * **Note**: You can move the selection to the caption right away as it shows up upon executing this command by using\n * the `focusCaptionOnShow` option:\n *\n * ```ts\n * editor.execute( 'toggleTableCaption', { focusCaptionOnShow: true } );\n * ```\n */\nexport default class ToggleTableCaptionCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const editor = this.editor;\n        const tableElement = getSelectionAffectedTable(editor.model.document.selection);\n        this.isEnabled = !!tableElement;\n        if (!this.isEnabled) {\n            this.value = false;\n        }\n        else {\n            this.value = !!getCaptionFromTableModelElement(tableElement);\n        }\n    }\n    /**\n     * Executes the command.\n     *\n     * ```ts\n     * editor.execute( 'toggleTableCaption' );\n     * ```\n     *\n     * @param options Options for the executed command.\n     * @param options.focusCaptionOnShow When true and the caption shows up, the selection will be moved into it straight away.\n     * @fires execute\n     */\n    execute({ focusCaptionOnShow = false } = {}) {\n        this.editor.model.change(writer => {\n            if (this.value) {\n                this._hideTableCaption(writer);\n            }\n            else {\n                this._showTableCaption(writer, focusCaptionOnShow);\n            }\n        });\n    }\n    /**\n     * Shows the table caption. Also:\n     *\n     * * it attempts to restore the caption content from the `TableCaptionEditing` caption registry,\n     * * it moves the selection to the caption right away, it the `focusCaptionOnShow` option was set.\n     *\n     * @param focusCaptionOnShow Default focus behavior when showing the caption.\n     */\n    _showTableCaption(writer, focusCaptionOnShow) {\n        const model = this.editor.model;\n        const tableElement = getSelectionAffectedTable(model.document.selection);\n        const tableCaptionEditing = this.editor.plugins.get('TableCaptionEditing');\n        const savedCaptionElement = tableCaptionEditing._getSavedCaption(tableElement);\n        // Try restoring the caption from the TableCaptionEditing plugin storage.\n        const newCaptionElement = savedCaptionElement || writer.createElement('caption');\n        model.insertContent(newCaptionElement, tableElement, 'end');\n        if (focusCaptionOnShow) {\n            writer.setSelection(newCaptionElement, 'in');\n        }\n    }\n    /**\n     * Hides the caption of a selected table (or an table caption the selection is anchored to).\n     *\n     * The content of the caption is stored in the `TableCaptionEditing` caption registry to make this\n     * a reversible action.\n     */\n    _hideTableCaption(writer) {\n        const model = this.editor.model;\n        const tableElement = getSelectionAffectedTable(model.document.selection);\n        const tableCaptionEditing = this.editor.plugins.get('TableCaptionEditing');\n        const captionElement = getCaptionFromTableModelElement(tableElement);\n        // Store the caption content so it can be restored quickly if the user changes their mind.\n        tableCaptionEditing._saveCaption(tableElement, captionElement);\n        model.deleteContent(writer.createSelection(captionElement, 'on'));\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecaption/tablecaptionediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Element, enablePlaceholder } from 'ckeditor5/src/engine';\nimport { toWidgetEditable } from 'ckeditor5/src/widget';\nimport injectTableCaptionPostFixer from '../converters/table-caption-post-fixer';\nimport ToggleTableCaptionCommand from './toggletablecaptioncommand';\nimport { isTable, matchTableCaptionViewElement } from './utils';\n/**\n * The table caption editing plugin.\n */\nexport default class TableCaptionEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCaptionEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this._savedCaptionsMap = new WeakMap();\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const view = editor.editing.view;\n        const t = editor.t;\n        if (!schema.isRegistered('caption')) {\n            schema.register('caption', {\n                allowIn: 'table',\n                allowContentOf: '$block',\n                isLimit: true\n            });\n        }\n        else {\n            schema.extend('caption', {\n                allowIn: 'table'\n            });\n        }\n        editor.commands.add('toggleTableCaption', new ToggleTableCaptionCommand(this.editor));\n        // View -> model converter for the data pipeline.\n        editor.conversion.for('upcast').elementToElement({\n            view: matchTableCaptionViewElement,\n            model: 'caption'\n        });\n        // Model -> view converter for the data pipeline.\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'caption',\n            view: (modelElement, { writer }) => {\n                if (!isTable(modelElement.parent)) {\n                    return null;\n                }\n                return writer.createContainerElement('figcaption');\n            }\n        });\n        // Model -> view converter for the editing pipeline.\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: 'caption',\n            view: (modelElement, { writer }) => {\n                if (!isTable(modelElement.parent)) {\n                    return null;\n                }\n                const figcaptionElement = writer.createEditableElement('figcaption');\n                writer.setCustomProperty('tableCaption', true, figcaptionElement);\n                figcaptionElement.placeholder = t('Enter table caption');\n                enablePlaceholder({\n                    view,\n                    element: figcaptionElement,\n                    keepOnFocus: true\n                });\n                return toWidgetEditable(figcaptionElement, writer);\n            }\n        });\n        injectTableCaptionPostFixer(editor.model);\n    }\n    /**\n     * Returns the saved {@link module:engine/model/element~Element#toJSON JSONified} caption\n     * of a table model element.\n     *\n     * See {@link #_saveCaption}.\n     *\n     * @internal\n     * @param tableModelElement The model element the caption should be returned for.\n     * @returns The model caption element or `null` if there is none.\n     */\n    _getSavedCaption(tableModelElement) {\n        const jsonObject = this._savedCaptionsMap.get(tableModelElement);\n        return jsonObject ? Element.fromJSON(jsonObject) : null;\n    }\n    /**\n     * Saves a {@link module:engine/model/element~Element#toJSON JSONified} caption for\n     * a table element to allow restoring it in the future.\n     *\n     * A caption is saved every time it gets hidden. The\n     * user should be able to restore it on demand.\n     *\n     * **Note**: The caption cannot be stored in the table model element attribute because,\n     * for instance, when the model state propagates to collaborators, the attribute would get\n     * lost (mainly because it does not convert to anything when the caption is hidden) and\n     * the states of collaborators' models would de-synchronize causing numerous issues.\n     *\n     * See {@link #_getSavedCaption}.\n     *\n     * @internal\n     * @param tableModelElement The model element the caption is saved for.\n     * @param caption The caption model element to be saved.\n     */\n    _saveCaption(tableModelElement, caption) {\n        this._savedCaptionsMap.set(tableModelElement, caption.toJSON());\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n* @module table/tablecaption/tablecaptionui\n*/\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport { getCaptionFromModelSelection } from './utils';\n/**\n  * The table caption UI plugin. It introduces the `'toggleTableCaption'` UI button.\n  */\nexport default class TableCaptionUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCaptionUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const t = editor.t;\n        editor.ui.componentFactory.add('toggleTableCaption', locale => {\n            const command = editor.commands.get('toggleTableCaption');\n            const view = new ButtonView(locale);\n            view.set({\n                icon: icons.caption,\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            view.bind('label').to(command, 'value', value => value ? t('Toggle caption off') : t('Toggle caption on'));\n            this.listenTo(view, 'execute', () => {\n                editor.execute('toggleTableCaption', { focusCaptionOnShow: true });\n                // Scroll to the selection and highlight the caption if the caption showed up.\n                if (command.value) {\n                    const modelCaptionElement = getCaptionFromModelSelection(editor.model.document.selection);\n                    const figcaptionElement = editor.editing.mapper.toViewElement(modelCaptionElement);\n                    if (!figcaptionElement) {\n                        return;\n                    }\n                    editingView.scrollToTheSelection();\n                    editingView.change(writer => {\n                        writer.addClass('table__caption_highlighted', figcaptionElement);\n                    });\n                }\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecaption\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport TableCaptionEditing from './tablecaption/tablecaptionediting';\nimport TableCaptionUI from './tablecaption/tablecaptionui';\nimport '../theme/tablecaption.css';\n/**\n * The table caption plugin.\n */\nexport default class TableCaption extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableCaption';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableCaptionEditing, TableCaptionUI];\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { normalizeColumnWidths } from './utils';\n/**\n * Command used by the {@link module:table/tablecolumnresize~TableColumnResize Table column resize feature} that\n * updates the width of the whole table as well as its individual columns.\n */\nexport default class TableWidthsCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        // The command is always enabled as it doesn't care about the actual selection - table can be resized\n        // even if the selection is elsewhere.\n        this.isEnabled = true;\n    }\n    /**\n     * Updated the `tableWidth` attribute of the table and the `columnWidth` attribute of the columns of that table.\n     */\n    execute(options = {}) {\n        const { model, plugins } = this.editor;\n        let { table = model.document.selection.getSelectedElement(), columnWidths, tableWidth } = options;\n        if (columnWidths) {\n            // For backwards compatibility, columnWidths might be an array or a string of comma-separated values.\n            columnWidths = Array.isArray(columnWidths) ?\n                columnWidths :\n                columnWidths.split(',');\n        }\n        model.change(writer => {\n            if (tableWidth) {\n                writer.setAttribute('tableWidth', tableWidth, table);\n            }\n            else {\n                writer.removeAttribute('tableWidth', table);\n            }\n            const tableColumnGroup = plugins\n                .get('TableColumnResizeEditing')\n                .getColumnGroupElement(table);\n            if (!columnWidths && !tableColumnGroup) {\n                return;\n            }\n            if (!columnWidths) {\n                return writer.remove(tableColumnGroup);\n            }\n            const widths = normalizeColumnWidths(columnWidths);\n            if (!tableColumnGroup) {\n                const colGroupElement = writer.createElement('tableColumnGroup');\n                widths.forEach(columnWidth => writer.appendElement('tableColumn', { columnWidth }, colGroupElement));\n                writer.append(colGroupElement, table);\n            }\n            else {\n                Array\n                    .from(tableColumnGroup.getChildren())\n                    .forEach((column, index) => writer.setAttribute('columnWidth', widths[index], column));\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { normalizeColumnWidths, updateColumnElements, getColumnGroupElement, getTableColumnElements, translateColSpanAttribute } from './utils';\n/**\n * Returns a upcast helper that ensures the number of `<tableColumn>` elements corresponds to the actual number of columns in the table,\n * because the input data might have too few or too many <col> elements.\n */\nexport function upcastColgroupElement(tableUtilsPlugin) {\n    return dispatcher => dispatcher.on('element:colgroup', (evt, data, conversionApi) => {\n        const modelTable = data.modelCursor.findAncestor('table');\n        const tableColumnGroup = getColumnGroupElement(modelTable);\n        if (!tableColumnGroup) {\n            return;\n        }\n        const columnElements = getTableColumnElements(tableColumnGroup);\n        const columnsCount = tableUtilsPlugin.getColumns(modelTable);\n        let columnWidths = translateColSpanAttribute(tableColumnGroup, conversionApi.writer);\n        // Fill the array with 'auto' values if the number of columns is higher than number of declared values.\n        columnWidths = Array.from({ length: columnsCount }, (_, index) => columnWidths[index] || 'auto');\n        if (columnWidths.length != columnElements.length || columnWidths.includes('auto')) {\n            updateColumnElements(columnElements, tableColumnGroup, normalizeColumnWidths(columnWidths), conversionApi.writer);\n        }\n    }, { priority: 'low' });\n}\n/**\n * Returns downcast helper for adding `ck-table-resized` class if there is a `<tableColumnGroup>` element inside the table.\n */\nexport function downcastTableResizedClass() {\n    return dispatcher => dispatcher.on('insert:table', (evt, data, conversionApi) => {\n        const viewWriter = conversionApi.writer;\n        const modelTable = data.item;\n        const viewElement = conversionApi.mapper.toViewElement(modelTable);\n        const viewTable = viewElement.is('element', 'table') ?\n            viewElement :\n            Array.from(viewElement.getChildren()).find(viewChild => viewChild.is('element', 'table'));\n        const tableColumnGroup = getColumnGroupElement(modelTable);\n        if (tableColumnGroup) {\n            viewWriter.addClass('ck-table-resized', viewTable);\n        }\n        else {\n            viewWriter.removeClass('ck-table-resized', viewTable);\n        }\n    }, { priority: 'low' });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecolumnresize/tablecolumnresizeediting\n */\nimport { throttle, isEqual } from 'lodash-es';\nimport { global, DomEmitterMixin } from 'ckeditor5/src/utils';\nimport { Plugin } from 'ckeditor5/src/core';\nimport MouseEventsObserver from '../../src/tablemouse/mouseeventsobserver';\nimport TableEditing from '../tableediting';\nimport TableUtils from '../tableutils';\nimport TableWalker from '../tablewalker';\nimport TableWidthsCommand from './tablewidthscommand';\nimport { downcastTableResizedClass, upcastColgroupElement } from './converters';\nimport { clamp, createFilledArray, sumArray, getColumnEdgesIndexes, getChangedResizedTables, getColumnMinWidthAsPercentage, getElementWidthInPixels, getTableWidthInPixels, normalizeColumnWidths, toPrecision, getDomCellOuterWidth, updateColumnElements, getColumnGroupElement, getTableColumnElements, getTableColumnsWidths } from './utils';\nimport { COLUMN_MIN_WIDTH_IN_PIXELS } from './constants';\n/**\n * The table column resize editing plugin.\n */\nexport default class TableColumnResizeEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableEditing, TableUtils];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableColumnResizeEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this._isResizingActive = false;\n        this.set('_isResizingAllowed', true);\n        this._resizingData = null;\n        this._domEmitter = new (DomEmitterMixin())();\n        this._tableUtilsPlugin = editor.plugins.get('TableUtils');\n        this.on('change:_isResizingAllowed', (evt, name, value) => {\n            // Toggling the `ck-column-resize_disabled` class shows and hides the resizers through CSS.\n            const classAction = value ? 'removeClass' : 'addClass';\n            editor.editing.view.change(writer => {\n                for (const root of editor.editing.view.document.roots) {\n                    writer[classAction]('ck-column-resize_disabled', editor.editing.view.document.getRoot(root.rootName));\n                }\n            });\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        this._extendSchema();\n        this._registerPostFixer();\n        this._registerConverters();\n        this._registerResizingListeners();\n        this._registerResizerInserter();\n        const editor = this.editor;\n        const columnResizePlugin = editor.plugins.get('TableColumnResize');\n        const tableEditing = editor.plugins.get('TableEditing');\n        tableEditing.registerAdditionalSlot({\n            filter: element => element.is('element', 'tableColumnGroup'),\n            positionOffset: 0\n        });\n        const tableWidthsCommand = new TableWidthsCommand(editor);\n        // For backwards compatibility we have two commands that perform exactly the same operation.\n        editor.commands.add('resizeTableWidth', tableWidthsCommand);\n        editor.commands.add('resizeColumnWidths', tableWidthsCommand);\n        // Currently the states of column resize and table resize (which is actually the last column resize) features\n        // are bound together. They can be separated in the future by adding distinct listeners and applying\n        // different CSS classes (e.g. `ck-column-resize_disabled` and `ck-table-resize_disabled`) to the editor root.\n        // See #12148 for the details.\n        this.bind('_isResizingAllowed').to(editor, 'isReadOnly', columnResizePlugin, 'isEnabled', tableWidthsCommand, 'isEnabled', (isEditorReadOnly, isPluginEnabled, isTableWidthsCommandCommandEnabled) => !isEditorReadOnly && isPluginEnabled && isTableWidthsCommandCommandEnabled);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        this._domEmitter.stopListening();\n        super.destroy();\n    }\n    /**\n     * Returns a 'tableColumnGroup' element from the 'table'.\n     *\n     * @param element A 'table' or 'tableColumnGroup' element.\n     * @returns A 'tableColumnGroup' element.\n     */\n    getColumnGroupElement(element) {\n        return getColumnGroupElement(element);\n    }\n    /**\n     * Returns an array of 'tableColumn' elements.\n     *\n     * @param element A 'table' or 'tableColumnGroup' element.\n     * @returns An array of 'tableColumn' elements.\n     */\n    getTableColumnElements(element) {\n        return getTableColumnElements(element);\n    }\n    /**\n     * Returns an array of table column widths.\n     *\n     * @param element A 'table' or 'tableColumnGroup' element.\n     * @returns An array of table column widths.\n     */\n    getTableColumnsWidths(element) {\n        return getTableColumnsWidths(element);\n    }\n    /**\n     * Registers new attributes for a table model element.\n     */\n    _extendSchema() {\n        this.editor.model.schema.extend('table', {\n            allowAttributes: ['tableWidth']\n        });\n        this.editor.model.schema.register('tableColumnGroup', {\n            allowIn: 'table',\n            isLimit: true\n        });\n        this.editor.model.schema.register('tableColumn', {\n            allowIn: 'tableColumnGroup',\n            allowAttributes: ['columnWidth', 'colSpan'],\n            isLimit: true\n        });\n    }\n    /**\n     * Registers table column resize post-fixer.\n     *\n     * It checks if the change from the differ concerns a table-related element or attribute. For detected changes it:\n     *  * Adjusts the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n     *  * Checks if the `columnWidths` attribute gets updated accordingly after columns have been added or removed.\n     */\n    _registerPostFixer() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.document.registerPostFixer(writer => {\n            let changed = false;\n            for (const table of getChangedResizedTables(model)) {\n                const tableColumnGroup = this.getColumnGroupElement(table);\n                const columns = this.getTableColumnElements(tableColumnGroup);\n                const columnWidths = this.getTableColumnsWidths(tableColumnGroup);\n                // Adjust the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n                let normalizedWidths = normalizeColumnWidths(columnWidths);\n                // If the number of columns has changed, then we need to adjust the widths of the affected columns.\n                normalizedWidths = adjustColumnWidths(normalizedWidths, table, this);\n                if (isEqual(columnWidths, normalizedWidths)) {\n                    continue;\n                }\n                updateColumnElements(columns, tableColumnGroup, normalizedWidths, writer);\n                changed = true;\n            }\n            return changed;\n        });\n        /**\n         * Adjusts if necessary the `columnWidths` in case if the number of column has changed.\n         *\n         * @param columnWidths Note: this array **may be modified** by the function.\n         * @param table Table to be checked.\n         */\n        function adjustColumnWidths(columnWidths, table, plugin) {\n            const newTableColumnsCount = plugin._tableUtilsPlugin.getColumns(table);\n            const columnsCountDelta = newTableColumnsCount - columnWidths.length;\n            if (columnsCountDelta === 0) {\n                return columnWidths;\n            }\n            const widths = columnWidths.map(width => Number(width.replace('%', '')));\n            // Collect all cells that are affected by the change.\n            const cellSet = getAffectedCells(plugin.editor.model.document.differ, table);\n            for (const cell of cellSet) {\n                const currentColumnsDelta = newTableColumnsCount - widths.length;\n                if (currentColumnsDelta === 0) {\n                    continue;\n                }\n                // If the column count in the table changed, adjust the widths of the affected columns.\n                const hasMoreColumns = currentColumnsDelta > 0;\n                const currentColumnIndex = plugin._tableUtilsPlugin.getCellLocation(cell).column;\n                if (hasMoreColumns) {\n                    const columnMinWidthAsPercentage = getColumnMinWidthAsPercentage(table, plugin.editor);\n                    const columnWidthsToInsert = createFilledArray(currentColumnsDelta, columnMinWidthAsPercentage);\n                    widths.splice(currentColumnIndex, 0, ...columnWidthsToInsert);\n                }\n                else {\n                    // Moves the widths of the removed columns to the preceding one.\n                    // Other editors either reduce the width of the whole table or adjust the widths\n                    // proportionally, so change of this behavior can be considered in the future.\n                    const removedColumnWidths = widths.splice(currentColumnIndex, Math.abs(currentColumnsDelta));\n                    widths[currentColumnIndex] += sumArray(removedColumnWidths);\n                }\n            }\n            return widths.map(width => width + '%');\n        }\n        /**\n         * Returns a set of cells that have been changed in a given table.\n         */\n        function getAffectedCells(differ, table) {\n            const cellSet = new Set();\n            for (const change of differ.getChanges()) {\n                if (change.type == 'insert' &&\n                    change.position.nodeAfter &&\n                    change.position.nodeAfter.name == 'tableCell' &&\n                    change.position.nodeAfter.getAncestors().includes(table)) {\n                    cellSet.add(change.position.nodeAfter);\n                }\n                else if (change.type == 'remove') {\n                    // If the first cell was removed, use the node after the change position instead.\n                    const referenceNode = (change.position.nodeBefore || change.position.nodeAfter);\n                    if (referenceNode.name == 'tableCell' && referenceNode.getAncestors().includes(table)) {\n                        cellSet.add(referenceNode);\n                    }\n                }\n            }\n            return cellSet;\n        }\n    }\n    /**\n     * Registers table column resize converters.\n     */\n    _registerConverters() {\n        const editor = this.editor;\n        const conversion = editor.conversion;\n        // Table width style\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'figure',\n                key: 'style',\n                value: {\n                    width: /[\\s\\S]+/\n                }\n            },\n            model: {\n                name: 'table',\n                key: 'tableWidth',\n                value: (viewElement) => viewElement.getStyle('width')\n            }\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: {\n                name: 'table',\n                key: 'tableWidth'\n            },\n            view: (width) => ({\n                name: 'figure',\n                key: 'style',\n                value: {\n                    width\n                }\n            })\n        });\n        conversion.elementToElement({ model: 'tableColumnGroup', view: 'colgroup' });\n        conversion.elementToElement({ model: 'tableColumn', view: 'col' });\n        conversion.for('downcast').add(downcastTableResizedClass());\n        conversion.for('upcast').add(upcastColgroupElement(this._tableUtilsPlugin));\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'col',\n                styles: {\n                    width: /.*/\n                }\n            },\n            model: {\n                key: 'columnWidth',\n                value: (viewElement) => {\n                    const viewColWidth = viewElement.getStyle('width');\n                    // 'pt' is the default unit for table column width pasted from MS Office.\n                    // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n                    if (!viewColWidth || (!viewColWidth.endsWith('%') && !viewColWidth.endsWith('pt'))) {\n                        return 'auto';\n                    }\n                    return viewColWidth;\n                }\n            }\n        });\n        // The `col[span]` attribute is present in tables pasted from MS Excel. We use it to set the temporary `colSpan` model attribute,\n        // which is consumed during the `colgroup` element upcast.\n        // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'col',\n                key: 'span'\n            },\n            model: 'colSpan'\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: {\n                name: 'tableColumn',\n                key: 'columnWidth'\n            },\n            view: width => ({ key: 'style', value: { width } })\n        });\n    }\n    /**\n     * Registers listeners to handle resizing process.\n     */\n    _registerResizingListeners() {\n        const editingView = this.editor.editing.view;\n        editingView.addObserver(MouseEventsObserver);\n        editingView.document.on('mousedown', this._onMouseDownHandler.bind(this), { priority: 'high' });\n        this._domEmitter.listenTo(global.window.document, 'mousemove', throttle(this._onMouseMoveHandler.bind(this), 50));\n        this._domEmitter.listenTo(global.window.document, 'mouseup', this._onMouseUpHandler.bind(this));\n    }\n    /**\n     * Handles the `mousedown` event on column resizer element:\n     *  * calculates the initial column pixel widths,\n     *  * inserts the `<colgroup>` element if it is not present in the `<table>`,\n     *  * puts the necessary data in the temporary storage,\n     *  * applies the attributes to the `<table>` view element.\n     *\n     * @param eventInfo An object containing information about the fired event.\n     * @param domEventData The data related to the DOM event.\n     */\n    _onMouseDownHandler(eventInfo, domEventData) {\n        const target = domEventData.target;\n        if (!target.hasClass('ck-table-column-resizer')) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            return;\n        }\n        const editor = this.editor;\n        const modelTable = editor.editing.mapper.toModelElement(target.findAncestor('figure'));\n        // Do not resize if table model is in non-editable place.\n        if (!editor.model.canEditAt(modelTable)) {\n            return;\n        }\n        domEventData.preventDefault();\n        eventInfo.stop();\n        // The column widths are calculated upon mousedown to allow lazy applying the `columnWidths` attribute on the table.\n        const columnWidthsInPx = _calculateDomColumnWidths(modelTable, this._tableUtilsPlugin, editor);\n        const viewTable = target.findAncestor('table');\n        const editingView = editor.editing.view;\n        // Insert colgroup for the table that is resized for the first time.\n        if (!Array.from(viewTable.getChildren()).find(viewCol => viewCol.is('element', 'colgroup'))) {\n            editingView.change(viewWriter => {\n                _insertColgroupElement(viewWriter, columnWidthsInPx, viewTable);\n            });\n        }\n        this._isResizingActive = true;\n        this._resizingData = this._getResizingData(domEventData, columnWidthsInPx);\n        // At this point we change only the editor view - we don't want other users to see our changes yet,\n        // so we can't apply them in the model.\n        editingView.change(writer => _applyResizingAttributesToTable(writer, viewTable, this._resizingData));\n        /**\n         * Calculates the DOM columns' widths. It is done by taking the width of the widest cell\n         * from each table column (we rely on the  {@link module:table/tablewalker~TableWalker}\n         * to determine which column the cell belongs to).\n         *\n         * @param modelTable A table which columns should be measured.\n         * @param tableUtils The Table Utils plugin instance.\n         * @param editor The editor instance.\n         * @returns Columns' widths expressed in pixels (without unit).\n         */\n        function _calculateDomColumnWidths(modelTable, tableUtilsPlugin, editor) {\n            const columnWidthsInPx = Array(tableUtilsPlugin.getColumns(modelTable));\n            const tableWalker = new TableWalker(modelTable);\n            for (const cellSlot of tableWalker) {\n                const viewCell = editor.editing.mapper.toViewElement(cellSlot.cell);\n                const domCell = editor.editing.view.domConverter.mapViewToDom(viewCell);\n                const domCellWidth = getDomCellOuterWidth(domCell);\n                if (!columnWidthsInPx[cellSlot.column] || domCellWidth < columnWidthsInPx[cellSlot.column]) {\n                    columnWidthsInPx[cellSlot.column] = toPrecision(domCellWidth);\n                }\n            }\n            return columnWidthsInPx;\n        }\n        /**\n         * Creates a `<colgroup>` element with `<col>`s and inserts it into a given view table.\n         *\n         * @param viewWriter A writer instance.\n         * @param columnWidthsInPx Column widths.\n         * @param viewTable A table view element.\n         */\n        function _insertColgroupElement(viewWriter, columnWidthsInPx, viewTable) {\n            const colgroup = viewWriter.createContainerElement('colgroup');\n            for (let i = 0; i < columnWidthsInPx.length; i++) {\n                const viewColElement = viewWriter.createEmptyElement('col');\n                const columnWidthInPc = `${toPrecision(columnWidthsInPx[i] / sumArray(columnWidthsInPx) * 100)}%`;\n                viewWriter.setStyle('width', columnWidthInPc, viewColElement);\n                viewWriter.insert(viewWriter.createPositionAt(colgroup, 'end'), viewColElement);\n            }\n            viewWriter.insert(viewWriter.createPositionAt(viewTable, 0), colgroup);\n        }\n        /**\n         * Applies the style and classes to the view table as the resizing begun.\n         *\n         * @param viewWriter A writer instance.\n         * @param viewTable A table containing the clicked resizer.\n         * @param resizingData Data related to the resizing.\n         */\n        function _applyResizingAttributesToTable(viewWriter, viewTable, resizingData) {\n            const figureInitialPcWidth = resizingData.widths.viewFigureWidth / resizingData.widths.viewFigureParentWidth;\n            viewWriter.addClass('ck-table-resized', viewTable);\n            viewWriter.addClass('ck-table-column-resizer__active', resizingData.elements.viewResizer);\n            viewWriter.setStyle('width', `${toPrecision(figureInitialPcWidth * 100)}%`, viewTable.findAncestor('figure'));\n        }\n    }\n    /**\n     * Handles the `mousemove` event.\n     *  * If resizing process is not in progress, it does nothing.\n     *  * If resizing is active but not allowed, it stops the resizing process instantly calling the `mousedown` event handler.\n     *  * Otherwise it dynamically updates the widths of the resized columns.\n     *\n     * @param eventInfo An object containing information about the fired event.\n     * @param mouseEventData The native DOM event.\n     */\n    _onMouseMoveHandler(eventInfo, mouseEventData) {\n        if (!this._isResizingActive) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            this._onMouseUpHandler();\n            return;\n        }\n        const { columnPosition, flags: { isRightEdge, isTableCentered, isLtrContent }, elements: { viewFigure, viewLeftColumn, viewRightColumn }, widths: { viewFigureParentWidth, tableWidth, leftColumnWidth, rightColumnWidth } } = this._resizingData;\n        const dxLowerBound = -leftColumnWidth + COLUMN_MIN_WIDTH_IN_PIXELS;\n        const dxUpperBound = isRightEdge ?\n            viewFigureParentWidth - tableWidth :\n            rightColumnWidth - COLUMN_MIN_WIDTH_IN_PIXELS;\n        // The multiplier is needed for calculating the proper movement offset:\n        // - it should negate the sign if content language direction is right-to-left,\n        // - it should double the offset if the table edge is resized and table is centered.\n        const multiplier = (isLtrContent ? 1 : -1) * (isRightEdge && isTableCentered ? 2 : 1);\n        const dx = clamp((mouseEventData.clientX - columnPosition) * multiplier, Math.min(dxLowerBound, 0), Math.max(dxUpperBound, 0));\n        if (dx === 0) {\n            return;\n        }\n        this.editor.editing.view.change(writer => {\n            const leftColumnWidthAsPercentage = toPrecision((leftColumnWidth + dx) * 100 / tableWidth);\n            writer.setStyle('width', `${leftColumnWidthAsPercentage}%`, viewLeftColumn);\n            if (isRightEdge) {\n                const tableWidthAsPercentage = toPrecision((tableWidth + dx) * 100 / viewFigureParentWidth);\n                writer.setStyle('width', `${tableWidthAsPercentage}%`, viewFigure);\n            }\n            else {\n                const rightColumnWidthAsPercentage = toPrecision((rightColumnWidth - dx) * 100 / tableWidth);\n                writer.setStyle('width', `${rightColumnWidthAsPercentage}%`, viewRightColumn);\n            }\n        });\n    }\n    /**\n     * Handles the `mouseup` event.\n     *  * If resizing process is not in progress, it does nothing.\n     *  * If resizing is active but not allowed, it cancels the resizing process restoring the original widths.\n     *  * Otherwise it propagates the changes from view to the model by executing the adequate commands.\n     */\n    _onMouseUpHandler() {\n        if (!this._isResizingActive) {\n            return;\n        }\n        const { viewResizer, modelTable, viewFigure, viewColgroup } = this._resizingData.elements;\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const tableColumnGroup = this.getColumnGroupElement(modelTable);\n        const viewColumns = Array\n            .from(viewColgroup.getChildren())\n            .filter((column) => column.is('view:element'));\n        const columnWidthsAttributeOld = tableColumnGroup ?\n            this.getTableColumnsWidths(tableColumnGroup) :\n            null;\n        const columnWidthsAttributeNew = viewColumns.map(column => column.getStyle('width'));\n        const isColumnWidthsAttributeChanged = !isEqual(columnWidthsAttributeOld, columnWidthsAttributeNew);\n        const tableWidthAttributeOld = modelTable.getAttribute('tableWidth');\n        const tableWidthAttributeNew = viewFigure.getStyle('width');\n        const isTableWidthAttributeChanged = tableWidthAttributeOld !== tableWidthAttributeNew;\n        if (isColumnWidthsAttributeChanged || isTableWidthAttributeChanged) {\n            if (this._isResizingAllowed) {\n                editor.execute('resizeTableWidth', {\n                    table: modelTable,\n                    tableWidth: `${toPrecision(tableWidthAttributeNew)}%`,\n                    columnWidths: columnWidthsAttributeNew\n                });\n            }\n            else {\n                // In read-only mode revert all changes in the editing view. The model is not touched so it does not need to be restored.\n                // This case can occur if the read-only mode kicks in during the resizing process.\n                editingView.change(writer => {\n                    // If table had resized columns before, restore the previous column widths.\n                    // Otherwise clean up the view from the temporary column resizing markup.\n                    if (columnWidthsAttributeOld) {\n                        for (const viewCol of viewColumns) {\n                            writer.setStyle('width', columnWidthsAttributeOld.shift(), viewCol);\n                        }\n                    }\n                    else {\n                        writer.remove(viewColgroup);\n                    }\n                    if (isTableWidthAttributeChanged) {\n                        // If the whole table was already resized before, restore the previous table width.\n                        // Otherwise clean up the view from the temporary table resizing markup.\n                        if (tableWidthAttributeOld) {\n                            writer.setStyle('width', tableWidthAttributeOld, viewFigure);\n                        }\n                        else {\n                            writer.removeStyle('width', viewFigure);\n                        }\n                    }\n                    // If a table and its columns weren't resized before,\n                    // prune the remaining common resizing markup.\n                    if (!columnWidthsAttributeOld && !tableWidthAttributeOld) {\n                        writer.removeClass('ck-table-resized', [...viewFigure.getChildren()].find(element => element.name === 'table'));\n                    }\n                });\n            }\n        }\n        editingView.change(writer => {\n            writer.removeClass('ck-table-column-resizer__active', viewResizer);\n        });\n        this._isResizingActive = false;\n        this._resizingData = null;\n    }\n    /**\n     * Retrieves and returns required data needed for the resizing process.\n     *\n     * @param domEventData The data of the `mousedown` event.\n     * @param columnWidths The current widths of the columns.\n     * @returns The data needed for the resizing process.\n     */\n    _getResizingData(domEventData, columnWidths) {\n        const editor = this.editor;\n        const columnPosition = domEventData.domEvent.clientX;\n        const viewResizer = domEventData.target;\n        const viewLeftCell = viewResizer.findAncestor('td') || viewResizer.findAncestor('th');\n        const modelLeftCell = editor.editing.mapper.toModelElement(viewLeftCell);\n        const modelTable = modelLeftCell.findAncestor('table');\n        const leftColumnIndex = getColumnEdgesIndexes(modelLeftCell, this._tableUtilsPlugin).rightEdge;\n        const lastColumnIndex = this._tableUtilsPlugin.getColumns(modelTable) - 1;\n        const isRightEdge = leftColumnIndex === lastColumnIndex;\n        const isTableCentered = !modelTable.hasAttribute('tableAlignment');\n        const isLtrContent = editor.locale.contentLanguageDirection !== 'rtl';\n        const viewTable = viewLeftCell.findAncestor('table');\n        const viewFigure = viewTable.findAncestor('figure');\n        const viewColgroup = [...viewTable.getChildren()]\n            .find(viewCol => viewCol.is('element', 'colgroup'));\n        const viewLeftColumn = viewColgroup.getChild(leftColumnIndex);\n        const viewRightColumn = isRightEdge ? undefined : viewColgroup.getChild(leftColumnIndex + 1);\n        const viewFigureParentWidth = getElementWidthInPixels(editor.editing.view.domConverter.mapViewToDom(viewFigure.parent));\n        const viewFigureWidth = getElementWidthInPixels(editor.editing.view.domConverter.mapViewToDom(viewFigure));\n        const tableWidth = getTableWidthInPixels(modelTable, editor);\n        const leftColumnWidth = columnWidths[leftColumnIndex];\n        const rightColumnWidth = isRightEdge ? undefined : columnWidths[leftColumnIndex + 1];\n        return {\n            columnPosition,\n            flags: {\n                isRightEdge,\n                isTableCentered,\n                isLtrContent\n            },\n            elements: {\n                viewResizer,\n                modelTable,\n                viewFigure,\n                viewColgroup,\n                viewLeftColumn,\n                viewRightColumn\n            },\n            widths: {\n                viewFigureParentWidth,\n                viewFigureWidth,\n                tableWidth,\n                leftColumnWidth,\n                rightColumnWidth\n            }\n        };\n    }\n    /**\n     * Registers a listener ensuring that each resizable cell have a resizer handle.\n     */\n    _registerResizerInserter() {\n        this.editor.conversion.for('editingDowncast').add(dispatcher => {\n            dispatcher.on('insert:tableCell', (evt, data, conversionApi) => {\n                const modelElement = data.item;\n                const viewElement = conversionApi.mapper.toViewElement(modelElement);\n                const viewWriter = conversionApi.writer;\n                viewWriter.insert(viewWriter.createPositionAt(viewElement, 'end'), viewWriter.createUIElement('div', { class: 'ck-table-column-resizer' }));\n            }, { priority: 'lowest' });\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tablecolumnresize\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport TableColumnResizeEditing from './tablecolumnresize/tablecolumnresizeediting';\nimport TableCellWidthEditing from './tablecellwidth/tablecellwidthediting';\nimport '../theme/tablecolumnresize.css';\n/**\n * The table column resize feature.\n *\n * It provides the possibility to set the width of each column in a table using a resize handler.\n */\nexport default class TableColumnResize extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [TableColumnResizeEditing, TableCellWidthEditing];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableColumnResize';\n    }\n}\n"],
  "mappings": "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",
  "names": ["viewElement", "row", "tableUtils", "first", "getCellToFocus", "first", "first", "totalWidth", "element", "first", "row", "mergeTableCells", "isEmpty", "writer", "first", "isEmpty", "icons", "tableCells", "ALIGN_VALUES_REG_EXP", "enableBorderProperties", "enableProperty", "ALIGNMENT_ICONS", "isBorderStyleSet", "ERROR_TEXT_TIMEOUT", "propertyToCommandMap", "modelTable", "editor", "columnWidthsInPx", "viewTable"]
}
