{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-ckbox/src/ckboxui.js", "../../@ckeditor/ckeditor5-ckbox/src/utils.js", "../../@ckeditor/ckeditor5-ckbox/src/ckboxcommand.js", "../../@ckeditor/ckeditor5-ckbox/src/ckboxuploadadapter.js", "../../@ckeditor/ckeditor5-ckbox/src/ckboxediting.js", "../../@ckeditor/ckeditor5-ckbox/src/ckbox.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ckbox/ckboxui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport browseFilesIcon from '../theme/icons/browse-files.svg';\n/**\n * The CKBoxUI plugin. It introduces the `'ckbox'` toolbar button.\n */\nexport default class CKBoxUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CKBoxUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    afterInit() {\n        const editor = this.editor;\n        const command = editor.commands.get('ckbox');\n        // Do not register the `ckbox` button if the command does not exist.\n        if (!command) {\n            return;\n        }\n        const t = editor.t;\n        const componentFactory = editor.ui.componentFactory;\n        componentFactory.add('ckbox', locale => {\n            const button = new ButtonView(locale);\n            button.set({\n                label: t('Open file manager'),\n                icon: browseFilesIcon,\n                tooltip: true\n            });\n            button.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            button.on('execute', () => {\n                editor.execute('ckbox');\n            });\n            return button;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Converts image source set provided by the CKBox into an object containing:\n * - responsive URLs for the \"webp\" image format,\n * - one fallback URL for browsers that do not support the \"webp\" format.\n */\nexport function getImageUrls(imageUrls) {\n    const responsiveUrls = [];\n    let maxWidth = 0;\n    for (const key in imageUrls) {\n        const width = parseInt(key, 10);\n        if (!isNaN(width)) {\n            if (width > maxWidth) {\n                maxWidth = width;\n            }\n            responsiveUrls.push(`${imageUrls[key]} ${key}w`);\n        }\n    }\n    const imageSources = [{\n            srcset: responsiveUrls.join(','),\n            sizes: `(max-width: ${maxWidth}px) 100vw, ${maxWidth}px`,\n            type: 'image/webp'\n        }];\n    return {\n        imageFallbackUrl: imageUrls.default,\n        imageSources\n    };\n}\n/**\n * Returns a workspace id to use for communication with the CKBox service.\n *\n * @param defaultWorkspaceId The default workspace to use taken from editor config.\n */\nexport function getWorkspaceId(token, defaultWorkspaceId) {\n    const [, binaryTokenPayload] = token.value.split('.');\n    const payload = JSON.parse(atob(binaryTokenPayload));\n    const workspaces = (payload.auth && payload.auth.ckbox && payload.auth.ckbox.workspaces) || [payload.aud];\n    if (!defaultWorkspaceId) {\n        return workspaces[0];\n    }\n    const role = payload.auth && payload.auth.ckbox && payload.auth.ckbox.role;\n    if (role == 'superadmin' || workspaces.includes(defaultWorkspaceId)) {\n        return defaultWorkspaceId;\n    }\n    return null;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { createElement, toMap } from 'ckeditor5/src/utils';\nimport { getImageUrls } from './utils';\n// Defines the waiting time (in milliseconds) for inserting the chosen asset into the model. The chosen asset is temporarily stored in the\n// `CKBoxCommand#_chosenAssets` and it is removed from there automatically after this time. See `CKBoxCommand#_chosenAssets` for more\n// details.\nconst ASSET_INSERTION_WAIT_TIMEOUT = 1000;\n/**\n * The CKBox command. It is used by the {@link module:ckbox/ckboxediting~CKBoxEditing CKBox editing feature} to open the CKBox file manager.\n * The file manager allows inserting an image or a link to a file into the editor content.\n *\n * ```ts\n * editor.execute( 'ckbox' );\n * ```\n *\n * **Note:** This command uses other features to perform the following tasks:\n * - To insert images it uses the {@link module:image/image/insertimagecommand~InsertImageCommand 'insertImage'} command from the\n * {@link module:image/image~Image Image feature}.\n * - To insert links to other files it uses the {@link module:link/linkcommand~LinkCommand 'link'} command from the\n * {@link module:link/link~Link Link feature}.\n */\nexport default class CKBoxCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * A set of all chosen assets. They are stored temporarily and they are automatically removed 1 second after being chosen.\n         * Chosen assets have to be \"remembered\" for a while to be able to map the given asset with the element inserted into the model.\n         * This association map is then used to set the ID on the model element.\n         *\n         * All chosen assets are automatically removed after the timeout, because (theoretically) it may happen that they will never be\n         * inserted into the model, even if the {@link module:link/linkcommand~LinkCommand `'link'`} command or the\n         * {@link module:image/image/insertimagecommand~InsertImageCommand `'insertImage'`} command is enabled. Such a case may arise when\n         * another plugin blocks the command execution. Then, in order not to keep the chosen (but not inserted) assets forever, we delete\n         * them automatically to prevent memory leakage. The 1 second timeout is enough to insert the asset into the model and extract the\n         * ID from the chosen asset.\n         *\n         * The assets are stored only if\n         * the {@link module:ckbox/ckboxconfig~CKBoxConfig#ignoreDataId `config.ckbox.ignoreDataId`} option is set to `false` (by default).\n         *\n         * @internal\n         */\n        this._chosenAssets = new Set();\n        /**\n         * The DOM element that acts as a mounting point for the CKBox dialog.\n         */\n        this._wrapper = null;\n        this._initListeners();\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        this.fire('ckbox:open');\n    }\n    /**\n     * Indicates if the CKBox dialog is already opened.\n     *\n     * @protected\n     * @returns {Boolean}\n     */\n    _getValue() {\n        return this._wrapper !== null;\n    }\n    /**\n     * Checks whether the command can be enabled in the current context.\n     */\n    _checkEnabled() {\n        const imageCommand = this.editor.commands.get('insertImage');\n        const linkCommand = this.editor.commands.get('link');\n        if (!imageCommand.isEnabled && !linkCommand.isEnabled) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Creates the options object for the CKBox dialog.\n     *\n     * @returns The object with properties:\n     * - theme The theme for CKBox dialog.\n     * - language The language for CKBox dialog.\n     * - tokenUrl The token endpoint URL.\n     * - serviceOrigin The base URL of the API service.\n     * - dialog.onClose The callback function invoked after closing the CKBox dialog.\n     * - assets.onChoose The callback function invoked after choosing the assets.\n     */\n    _prepareOptions() {\n        const editor = this.editor;\n        const ckboxConfig = editor.config.get('ckbox');\n        return {\n            theme: ckboxConfig.theme,\n            language: ckboxConfig.language,\n            tokenUrl: ckboxConfig.tokenUrl,\n            serviceOrigin: ckboxConfig.serviceOrigin,\n            dialog: {\n                onClose: () => this.fire('ckbox:close')\n            },\n            assets: {\n                onChoose: (assets) => this.fire('ckbox:choose', assets)\n            }\n        };\n    }\n    /**\n     * Initializes various event listeners for the `ckbox:*` events, because all functionality of the `ckbox` command is event-based.\n     */\n    _initListeners() {\n        const editor = this.editor;\n        const model = editor.model;\n        const shouldInsertDataId = !editor.config.get('ckbox.ignoreDataId');\n        // Refresh the command after firing the `ckbox:*` event.\n        this.on('ckbox', () => {\n            this.refresh();\n        }, { priority: 'low' });\n        // Handle opening of the CKBox dialog.\n        this.on('ckbox:open', () => {\n            if (!this.isEnabled || this.value) {\n                return;\n            }\n            this._wrapper = createElement(document, 'div', { class: 'ck ckbox-wrapper' });\n            document.body.appendChild(this._wrapper);\n            window.CKBox.mount(this._wrapper, this._prepareOptions());\n            const MAX_NUMBER_OF_ATTEMPTS_TO_FOCUS = 50;\n            focusCKBoxItem(MAX_NUMBER_OF_ATTEMPTS_TO_FOCUS);\n        });\n        // Handle closing of the CKBox dialog.\n        this.on('ckbox:close', () => {\n            if (!this.value) {\n                return;\n            }\n            this._wrapper.remove();\n            this._wrapper = null;\n        });\n        // Handle choosing the assets.\n        this.on('ckbox:choose', (evt, assets) => {\n            if (!this.isEnabled) {\n                return;\n            }\n            const imageCommand = editor.commands.get('insertImage');\n            const linkCommand = editor.commands.get('link');\n            const assetsToProcess = prepareAssets({\n                assets,\n                isImageAllowed: imageCommand.isEnabled,\n                isLinkAllowed: linkCommand.isEnabled\n            });\n            if (assetsToProcess.length === 0) {\n                return;\n            }\n            // All assets are inserted in one undo step.\n            model.change(writer => {\n                for (const asset of assetsToProcess) {\n                    const isLastAsset = asset === assetsToProcess[assetsToProcess.length - 1];\n                    this._insertAsset(asset, isLastAsset, writer);\n                    // If asset ID must be set for the inserted model element, store the asset temporarily and remove it automatically\n                    // after the timeout.\n                    if (shouldInsertDataId) {\n                        setTimeout(() => this._chosenAssets.delete(asset), ASSET_INSERTION_WAIT_TIMEOUT);\n                        this._chosenAssets.add(asset);\n                    }\n                }\n            });\n        });\n        // Clean up after the editor is destroyed.\n        this.listenTo(editor, 'destroy', () => {\n            this.fire('ckbox:close');\n            this._chosenAssets.clear();\n        });\n    }\n    /**\n     * Inserts the asset into the model.\n     *\n     * @param asset The asset to be inserted.\n     * @param isLastAsset Indicates if the current asset is the last one from the chosen set.\n     * @param writer An instance of the model writer.\n     */\n    _insertAsset(asset, isLastAsset, writer) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        // Remove the `linkHref` attribute to not affect the asset to be inserted.\n        writer.removeSelectionAttribute('linkHref');\n        if (asset.type === 'image') {\n            this._insertImage(asset);\n        }\n        else {\n            this._insertLink(asset, writer);\n        }\n        // Except for the last chosen asset, move the selection to the end of the current range to avoid overwriting other, already\n        // inserted assets.\n        if (!isLastAsset) {\n            writer.setSelection(selection.getLastPosition());\n        }\n    }\n    /**\n     * Inserts the image by calling the `insertImage` command.\n     *\n     * @param asset The asset to be inserted.\n     */\n    _insertImage(asset) {\n        const editor = this.editor;\n        const { imageFallbackUrl, imageSources, imageTextAlternative } = asset.attributes;\n        editor.execute('insertImage', {\n            source: {\n                src: imageFallbackUrl,\n                sources: imageSources,\n                alt: imageTextAlternative\n            }\n        });\n    }\n    /**\n     * Inserts the link to the asset by calling the `link` command.\n     *\n     * @param asset The asset to be inserted.\n     * @param writer An instance of the model writer.\n     */\n    _insertLink(asset, writer) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const { linkName, linkHref } = asset.attributes;\n        // If the selection is collapsed, insert the asset name as the link label and select it.\n        if (selection.isCollapsed) {\n            const selectionAttributes = toMap(selection.getAttributes());\n            const textNode = writer.createText(linkName, selectionAttributes);\n            const range = model.insertContent(textNode);\n            writer.setSelection(range);\n        }\n        editor.execute('link', linkHref);\n    }\n}\n/**\n * Parses the chosen assets into the internal data format. Filters out chosen assets that are not allowed.\n */\nfunction prepareAssets({ assets, isImageAllowed, isLinkAllowed }) {\n    return assets\n        .map(asset => isImage(asset) ?\n        {\n            id: asset.data.id,\n            type: 'image',\n            attributes: prepareImageAssetAttributes(asset)\n        } :\n        {\n            id: asset.data.id,\n            type: 'link',\n            attributes: prepareLinkAssetAttributes(asset)\n        })\n        .filter(asset => asset.type === 'image' ? isImageAllowed : isLinkAllowed);\n}\n/**\n * Parses the assets attributes into the internal data format.\n *\n * @param origin The base URL for assets inserted into the editor.\n */\nfunction prepareImageAssetAttributes(asset) {\n    const { imageFallbackUrl, imageSources } = getImageUrls(asset.data.imageUrls);\n    return {\n        imageFallbackUrl,\n        imageSources,\n        imageTextAlternative: asset.data.metadata.description || ''\n    };\n}\n/**\n * Parses the assets attributes into the internal data format.\n *\n * @param origin The base URL for assets inserted into the editor.\n */\nfunction prepareLinkAssetAttributes(asset) {\n    return {\n        linkName: asset.data.name,\n        linkHref: getAssetUrl(asset)\n    };\n}\n/**\n * Checks whether the asset is an image.\n */\nfunction isImage(asset) {\n    const metadata = asset.data.metadata;\n    if (!metadata) {\n        return false;\n    }\n    return metadata.width && metadata.height;\n}\n/**\n * Creates the URL for the asset.\n *\n * @param origin The base URL for assets inserted into the editor.\n */\nfunction getAssetUrl(asset) {\n    const url = new URL(asset.data.url);\n    url.searchParams.set('download', 'true');\n    return url.toString();\n}\n/**\n * Focuses the CKBox first item in gallery.\n * This is a temporary fix. A permanent solution to this issue will be provided soon.\n *\n * @param limiter Max number of attempts to focus the ckbox item.\n */\nfunction focusCKBoxItem(limiter) {\n    // Trying every 100 ms get access to the CKBox component until component will be loaded.\n    setTimeout(() => {\n        if (limiter === 0) {\n            return;\n        }\n        const ckboxGalleryFirstItem = document.querySelector('.ckbox-gallery .ckbox-gallery-item');\n        // In case there is no items, \"upload button\" will be appeared in \"div\" with\n        // classname \".ckbox-empty-view\".\n        const uploadButton = document.querySelector('.ckbox-empty-view .ckbox-btn');\n        // In case \"upload button\" is loaded in \".ckbox-empty-view\" we focus actual button.\n        if (uploadButton && uploadButton instanceof HTMLElement) {\n            uploadButton.focus();\n            return;\n        }\n        if (ckboxGalleryFirstItem && ckboxGalleryFirstItem instanceof HTMLElement) {\n            ckboxGalleryFirstItem.focus();\n        }\n        else {\n            focusCKBoxItem(limiter - 1);\n        }\n    }, 100);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals AbortController, FormData, URL, XMLHttpRequest, window */\n/**\n * @module ckbox/ckboxuploadadapter\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { FileRepository } from 'ckeditor5/src/upload';\nimport { logError } from 'ckeditor5/src/utils';\nimport CKBoxEditing from './ckboxediting';\nimport { getImageUrls, getWorkspaceId } from './utils';\n/**\n * A plugin that enables file uploads in CKEditor 5 using the CKBox server–side connector.\n * See the {@glink features/file-management/ckbox CKBox file manager integration} guide to learn how to configure\n * and use this feature as well as find out more about the full integration with the file manager\n * provided by the {@link module:ckbox/ckbox~CKBox} plugin.\n *\n * Check out the {@glink features/images/image-upload/image-upload Image upload overview} guide to learn about\n * other ways to upload images into CKEditor 5.\n */\nexport default class CKBoxUploadAdapter extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return ['ImageUploadEditing', 'ImageUploadProgress', FileRepository, CKBoxEditing];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CKBoxUploadAdapter';\n    }\n    /**\n     * @inheritDoc\n     */\n    async afterInit() {\n        const editor = this.editor;\n        const hasConfiguration = !!editor.config.get('ckbox');\n        const isLibraryLoaded = !!window.CKBox;\n        // Editor supports only one upload adapter. Register the CKBox upload adapter (and potentially overwrite other one) only when the\n        // integrator intentionally wants to use the CKBox plugin, i.e. when the `config.ckbox` exists or the CKBox JavaScript library is\n        // loaded.\n        if (!hasConfiguration && !isLibraryLoaded) {\n            return;\n        }\n        const fileRepository = editor.plugins.get(FileRepository);\n        const ckboxEditing = editor.plugins.get(CKBoxEditing);\n        fileRepository.createUploadAdapter = loader => {\n            return new Adapter(loader, ckboxEditing.getToken(), editor);\n        };\n        const shouldInsertDataId = !editor.config.get('ckbox.ignoreDataId');\n        const imageUploadEditing = editor.plugins.get('ImageUploadEditing');\n        // Mark uploaded assets with the `ckboxImageId` attribute. Its value represents an ID in CKBox.\n        if (shouldInsertDataId) {\n            imageUploadEditing.on('uploadComplete', (evt, { imageElement, data }) => {\n                editor.model.change(writer => {\n                    writer.setAttribute('ckboxImageId', data.ckboxImageId, imageElement);\n                });\n            });\n        }\n    }\n}\n/**\n * Upload adapter for CKBox.\n */\nclass Adapter {\n    /**\n     * Creates a new adapter instance.\n     */\n    constructor(loader, token, editor) {\n        this.loader = loader;\n        this.token = token;\n        this.editor = editor;\n        this.controller = new AbortController();\n        this.serviceOrigin = editor.config.get('ckbox.serviceOrigin');\n    }\n    /**\n     * The ID of workspace to use.\n     */\n    getWorkspaceId() {\n        const t = this.editor.t;\n        const cannotAccessDefaultWorkspaceError = t('Cannot access default workspace.');\n        const defaultWorkspaceId = this.editor.config.get('ckbox.defaultUploadWorkspaceId');\n        const workspaceId = getWorkspaceId(this.token, defaultWorkspaceId);\n        if (workspaceId == null) {\n            /**\n             * The user is not authorized to access the workspace defined in  the`ckbox.defaultUploadWorkspaceId` configuration.\n             *\n             * @error ckbox-access-default-workspace-error\n             */\n            logError('ckbox-access-default-workspace-error');\n            throw cannotAccessDefaultWorkspaceError;\n        }\n        return workspaceId;\n    }\n    /**\n     * Resolves a promise with an array containing available categories with which the uploaded file can be associated.\n     *\n     * If the API returns limited results, the method will collect all items.\n     */\n    async getAvailableCategories(offset = 0) {\n        const ITEMS_PER_REQUEST = 50;\n        const categoryUrl = new URL('categories', this.serviceOrigin);\n        categoryUrl.searchParams.set('limit', ITEMS_PER_REQUEST.toString());\n        categoryUrl.searchParams.set('offset', offset.toString());\n        categoryUrl.searchParams.set('workspaceId', this.getWorkspaceId());\n        return this._sendHttpRequest({ url: categoryUrl })\n            .then(async (data) => {\n            const remainingItems = data.totalCount - (offset + ITEMS_PER_REQUEST);\n            if (remainingItems > 0) {\n                const offsetItems = await this.getAvailableCategories(offset + ITEMS_PER_REQUEST);\n                return [\n                    ...data.items,\n                    ...offsetItems\n                ];\n            }\n            return data.items;\n        })\n            .catch(() => {\n            this.controller.signal.throwIfAborted();\n            /**\n             * Fetching a list of available categories with which an uploaded file can be associated failed.\n             *\n             * @error ckbox-fetch-category-http-error\n             */\n            logError('ckbox-fetch-category-http-error');\n        });\n    }\n    /**\n     * Resolves a promise with an object containing a category with which the uploaded file is associated or an error code.\n     */\n    async getCategoryIdForFile(file) {\n        const extension = getFileExtension(file.name);\n        const allCategories = await this.getAvailableCategories();\n        // Couldn't fetch all categories. Perhaps the authorization token is invalid.\n        if (!allCategories) {\n            return null;\n        }\n        // The plugin allows defining to which category the uploaded file should be assigned.\n        const defaultCategories = this.editor.config.get('ckbox.defaultUploadCategories');\n        // If a user specifies the plugin configuration, find the first category that accepts the uploaded file.\n        if (defaultCategories) {\n            const userCategory = Object.keys(defaultCategories).find(category => {\n                return defaultCategories[category].find(e => e.toLowerCase() == extension);\n            });\n            // If found, return its ID if the category exists on the server side.\n            if (userCategory) {\n                const serverCategory = allCategories.find(category => category.id === userCategory || category.name === userCategory);\n                if (!serverCategory) {\n                    return null;\n                }\n                return serverCategory.id;\n            }\n        }\n        // Otherwise, find the first category that accepts the uploaded file and returns its ID.\n        const category = allCategories.find(category => category.extensions.find(e => e.toLowerCase() == extension));\n        if (!category) {\n            return null;\n        }\n        return category.id;\n    }\n    /**\n     * Starts the upload process.\n     *\n     * @see module:upload/filerepository~UploadAdapter#upload\n     */\n    async upload() {\n        const t = this.editor.t;\n        const cannotFindCategoryError = t('Cannot determine a category for the uploaded file.');\n        const file = (await this.loader.file);\n        const category = await this.getCategoryIdForFile(file);\n        if (!category) {\n            return Promise.reject(cannotFindCategoryError);\n        }\n        const uploadUrl = new URL('assets', this.serviceOrigin);\n        const formData = new FormData();\n        uploadUrl.searchParams.set('workspaceId', this.getWorkspaceId());\n        formData.append('categoryId', category);\n        formData.append('file', file);\n        const requestConfig = {\n            method: 'POST',\n            url: uploadUrl,\n            data: formData,\n            onUploadProgress: (evt) => {\n                /* istanbul ignore else -- @preserve */\n                if (evt.lengthComputable) {\n                    this.loader.uploadTotal = evt.total;\n                    this.loader.uploaded = evt.loaded;\n                }\n            }\n        };\n        return this._sendHttpRequest(requestConfig)\n            .then(async (data) => {\n            const imageUrls = getImageUrls(data.imageUrls);\n            return {\n                ckboxImageId: data.id,\n                default: imageUrls.imageFallbackUrl,\n                sources: imageUrls.imageSources\n            };\n        })\n            .catch(() => {\n            const genericError = t('Cannot upload file:') + ` ${file.name}.`;\n            return Promise.reject(genericError);\n        });\n    }\n    /**\n     * Aborts the upload process.\n     *\n     * @see module:upload/filerepository~UploadAdapter#abort\n     */\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Sends the HTTP request.\n     *\n     * @param config.url the URL where the request will be sent.\n     * @param config.method The HTTP method.\n     * @param config.data Additional data to send.\n     * @param config.onUploadProgress A callback informing about the upload progress.\n     */\n    _sendHttpRequest({ url, method = 'GET', data, onUploadProgress }) {\n        const signal = this.controller.signal;\n        const xhr = new XMLHttpRequest();\n        xhr.open(method, url.toString(), true);\n        xhr.setRequestHeader('Authorization', this.token.value);\n        xhr.setRequestHeader('CKBox-Version', 'CKEditor 5');\n        xhr.responseType = 'json';\n        // The callback is attached to the `signal#abort` event.\n        const abortCallback = () => {\n            xhr.abort();\n        };\n        return new Promise((resolve, reject) => {\n            signal.addEventListener('abort', abortCallback);\n            xhr.addEventListener('loadstart', () => {\n                signal.addEventListener('abort', abortCallback);\n            });\n            xhr.addEventListener('loadend', () => {\n                signal.removeEventListener('abort', abortCallback);\n            });\n            xhr.addEventListener('error', () => {\n                reject();\n            });\n            xhr.addEventListener('abort', () => {\n                reject();\n            });\n            xhr.addEventListener('load', async () => {\n                const response = xhr.response;\n                if (!response || response.statusCode >= 400) {\n                    return reject(response && response.message);\n                }\n                return resolve(response);\n            });\n            /* istanbul ignore else -- @preserve */\n            if (onUploadProgress) {\n                xhr.upload.addEventListener('progress', evt => {\n                    onUploadProgress(evt);\n                });\n            }\n            // Send the request.\n            xhr.send(data);\n        });\n    }\n}\n/**\n * Returns an extension from the given value.\n */\nfunction getFileExtension(value) {\n    const extensionRegExp = /\\.(?<ext>[^.]+)$/;\n    const match = value.match(extensionRegExp);\n    return match.groups.ext.toLowerCase();\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Range } from 'ckeditor5/src/engine';\nimport { CKEditorError, logError } from 'ckeditor5/src/utils';\nimport CKBoxCommand from './ckboxcommand';\nimport CKBoxUploadAdapter from './ckboxuploadadapter';\n/**\n * The CKBox editing feature. It introduces the {@link module:ckbox/ckboxcommand~CKBoxCommand CKBox command} and\n * {@link module:ckbox/ckboxuploadadapter~CKBoxUploadAdapter CKBox upload adapter}.\n */\nexport default class CKBoxEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CKBoxEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return ['CloudServices', 'LinkEditing', 'PictureEditing', CKBoxUploadAdapter];\n    }\n    /**\n     * @inheritDoc\n     */\n    async init() {\n        const editor = this.editor;\n        const hasConfiguration = !!editor.config.get('ckbox');\n        const isLibraryLoaded = !!window.CKBox;\n        // Proceed with plugin initialization only when the integrator intentionally wants to use it, i.e. when the `config.ckbox` exists or\n        // the CKBox JavaScript library is loaded.\n        if (!hasConfiguration && !isLibraryLoaded) {\n            return;\n        }\n        this._initConfig();\n        const cloudServicesCore = editor.plugins.get('CloudServicesCore');\n        const ckboxTokenUrl = editor.config.get('ckbox.tokenUrl');\n        const cloudServicesTokenUrl = editor.config.get('cloudServices.tokenUrl');\n        // To avoid fetching the same token twice we need to compare the `ckbox.tokenUrl` and `cloudServices.tokenUrl` values.\n        // If they are equal, it's enough to take the token generated by the `CloudServices` plugin.\n        if (ckboxTokenUrl === cloudServicesTokenUrl) {\n            const cloudServices = editor.plugins.get('CloudServices');\n            this._token = cloudServices.token;\n        }\n        // Otherwise, create a new token manually.\n        else {\n            this._token = await cloudServicesCore.createToken(ckboxTokenUrl).init();\n        }\n        // Extending the schema, registering converters and applying fixers only make sense if the configuration option to assign\n        // the assets ID with the model elements is enabled.\n        if (!editor.config.get('ckbox.ignoreDataId')) {\n            this._initSchema();\n            this._initConversion();\n            this._initFixers();\n        }\n        // Registering the `ckbox` command makes sense only if the CKBox library is loaded, as the `ckbox` command opens the CKBox dialog.\n        if (isLibraryLoaded) {\n            editor.commands.add('ckbox', new CKBoxCommand(editor));\n        }\n    }\n    /**\n     * Returns a token used by the CKBox plugin for communication with the CKBox service.\n     */\n    getToken() {\n        return this._token;\n    }\n    /**\n     * Initializes the `ckbox` editor configuration.\n     */\n    _initConfig() {\n        const editor = this.editor;\n        editor.config.define('ckbox', {\n            serviceOrigin: 'https://api.ckbox.io',\n            defaultUploadCategories: null,\n            ignoreDataId: false,\n            language: editor.locale.uiLanguage,\n            theme: 'default',\n            tokenUrl: editor.config.get('cloudServices.tokenUrl')\n        });\n        const tokenUrl = editor.config.get('ckbox.tokenUrl');\n        if (!tokenUrl) {\n            /**\n             * The {@link module:ckbox/ckboxconfig~CKBoxConfig#tokenUrl `config.ckbox.tokenUrl`} or the\n             * {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl `config.cloudServices.tokenUrl`}\n             * configuration is required for the CKBox plugin.\n             *\n             * ```ts\n             * ClassicEditor.create( document.createElement( 'div' ), {\n             * \tckbox: {\n             * \t\ttokenUrl: \"YOUR_TOKEN_URL\"\n             * \t\t// ...\n             * \t}\n             * \t// ...\n             * } );\n             * ```\n             *\n             * @error ckbox-plugin-missing-token-url\n             */\n            throw new CKEditorError('ckbox-plugin-missing-token-url', this);\n        }\n        if (!editor.plugins.has('ImageBlockEditing') && !editor.plugins.has('ImageInlineEditing')) {\n            /**\n             * The CKBox feature requires one of the following plugins to be loaded to work correctly:\n             *\n             * * {@link module:image/imageblock~ImageBlock},\n             * * {@link module:image/imageinline~ImageInline},\n             * * {@link module:image/image~Image} (loads both `ImageBlock` and `ImageInline`)\n             *\n             * Please make sure your editor configuration is correct.\n             *\n             * @error ckbox-plugin-image-feature-missing\n             * @param {module:core/editor/editor~Editor} editor\n             */\n            logError('ckbox-plugin-image-feature-missing', editor);\n        }\n    }\n    /**\n     * Extends the schema to allow the `ckboxImageId` and `ckboxLinkId` attributes for links and images.\n     */\n    _initSchema() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        schema.extend('$text', { allowAttributes: 'ckboxLinkId' });\n        if (schema.isRegistered('imageBlock')) {\n            schema.extend('imageBlock', { allowAttributes: ['ckboxImageId', 'ckboxLinkId'] });\n        }\n        if (schema.isRegistered('imageInline')) {\n            schema.extend('imageInline', { allowAttributes: ['ckboxImageId', 'ckboxLinkId'] });\n        }\n        schema.addAttributeCheck((context, attributeName) => {\n            const isLink = !!context.last.getAttribute('linkHref');\n            if (!isLink && attributeName === 'ckboxLinkId') {\n                return false;\n            }\n        });\n    }\n    /**\n     * Configures the upcast and downcast conversions for the `ckboxImageId` and `ckboxLinkId` attributes.\n     */\n    _initConversion() {\n        const editor = this.editor;\n        // Convert `ckboxLinkId` => `data-ckbox-resource-id`.\n        editor.conversion.for('downcast').add(dispatcher => {\n            // Due to custom converters for linked block images, handle the `ckboxLinkId` attribute manually.\n            dispatcher.on('attribute:ckboxLinkId:imageBlock', (evt, data, conversionApi) => {\n                const { writer, mapper, consumable } = conversionApi;\n                if (!consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const viewFigure = mapper.toViewElement(data.item);\n                const linkInImage = [...viewFigure.getChildren()]\n                    .find((child) => child.name === 'a');\n                // No link inside an image - no conversion needed.\n                if (!linkInImage) {\n                    return;\n                }\n                if (data.item.hasAttribute('ckboxLinkId')) {\n                    writer.setAttribute('data-ckbox-resource-id', data.item.getAttribute('ckboxLinkId'), linkInImage);\n                }\n                else {\n                    writer.removeAttribute('data-ckbox-resource-id', linkInImage);\n                }\n            }, { priority: 'low' });\n            dispatcher.on('attribute:ckboxLinkId', (evt, data, conversionApi) => {\n                const { writer, mapper, consumable } = conversionApi;\n                if (!consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                // Remove the previous attribute value if it was applied.\n                if (data.attributeOldValue) {\n                    const viewElement = createLinkElement(writer, data.attributeOldValue);\n                    writer.unwrap(mapper.toViewRange(data.range), viewElement);\n                }\n                // Add the new attribute value if specified in a model element.\n                if (data.attributeNewValue) {\n                    const viewElement = createLinkElement(writer, data.attributeNewValue);\n                    if (data.item.is('selection')) {\n                        const viewSelection = writer.document.selection;\n                        writer.wrap(viewSelection.getFirstRange(), viewElement);\n                    }\n                    else {\n                        writer.wrap(mapper.toViewRange(data.range), viewElement);\n                    }\n                }\n            }, { priority: 'low' });\n        });\n        // Convert `data-ckbox-resource-id` => `ckboxLinkId`.\n        //\n        // The helper conversion does not handle all cases, so take care of the `data-ckbox-resource-id` attribute manually for images\n        // and links.\n        editor.conversion.for('upcast').add(dispatcher => {\n            dispatcher.on('element:a', (evt, data, conversionApi) => {\n                const { writer, consumable } = conversionApi;\n                // Upcast the `data-ckbox-resource-id` attribute only for valid link elements.\n                if (!data.viewItem.getAttribute('href')) {\n                    return;\n                }\n                const consumableAttributes = { attributes: ['data-ckbox-resource-id'] };\n                if (!consumable.consume(data.viewItem, consumableAttributes)) {\n                    return;\n                }\n                const attributeValue = data.viewItem.getAttribute('data-ckbox-resource-id');\n                // Missing the `data-ckbox-resource-id` attribute.\n                if (!attributeValue) {\n                    return;\n                }\n                if (data.modelRange) {\n                    // If the `<a>` element contains more than single children (e.g. a linked image), set the `ckboxLinkId` for each\n                    // allowed child.\n                    for (let item of data.modelRange.getItems()) {\n                        if (item.is('$textProxy')) {\n                            item = item.textNode;\n                        }\n                        // Do not copy the `ckboxLinkId` attribute when wrapping an element in a block element, e.g. when\n                        // auto-paragraphing.\n                        if (shouldUpcastAttributeForNode(item)) {\n                            writer.setAttribute('ckboxLinkId', attributeValue, item);\n                        }\n                    }\n                }\n                else {\n                    // Otherwise, just set the `ckboxLinkId` for the model element.\n                    const modelElement = data.modelCursor.nodeBefore || data.modelCursor.parent;\n                    writer.setAttribute('ckboxLinkId', attributeValue, modelElement);\n                }\n            }, { priority: 'low' });\n        });\n        // Convert `ckboxImageId` => `data-ckbox-resource-id`.\n        editor.conversion.for('downcast').attributeToAttribute({\n            model: 'ckboxImageId',\n            view: 'data-ckbox-resource-id'\n        });\n        // Convert `data-ckbox-resource-id` => `ckboxImageId`.\n        editor.conversion.for('upcast').elementToAttribute({\n            model: {\n                key: 'ckboxImageId',\n                value: (viewElement) => viewElement.getAttribute('data-ckbox-resource-id')\n            },\n            view: {\n                attributes: {\n                    'data-ckbox-resource-id': /[\\s\\S]+/\n                }\n            }\n        });\n    }\n    /**\n     * Registers post-fixers that add or remove the `ckboxLinkId` and `ckboxImageId` attributes.\n     */\n    _initFixers() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        // Registers the post-fixer to sync the asset ID with the model elements.\n        model.document.registerPostFixer(syncDataIdPostFixer(editor));\n        // Registers the post-fixer to remove the `ckboxLinkId` attribute from the model selection.\n        model.document.registerPostFixer(injectSelectionPostFixer(selection));\n    }\n}\n/**\n * A post-fixer that synchronizes the asset ID with the model element.\n */\nfunction syncDataIdPostFixer(editor) {\n    return (writer) => {\n        let changed = false;\n        const model = editor.model;\n        const ckboxCommand = editor.commands.get('ckbox');\n        // The ID from chosen assets are stored in the `CKBoxCommand#_chosenAssets`. If there is no command, it makes no sense to check\n        // for changes in the model.\n        if (!ckboxCommand) {\n            return changed;\n        }\n        for (const entry of model.document.differ.getChanges()) {\n            if (entry.type !== 'insert' && entry.type !== 'attribute') {\n                continue;\n            }\n            const range = entry.type === 'insert' ?\n                new Range(entry.position, entry.position.getShiftedBy(entry.length)) :\n                entry.range;\n            const isLinkHrefAttributeRemoval = entry.type === 'attribute' &&\n                entry.attributeKey === 'linkHref' &&\n                entry.attributeNewValue === null;\n            for (const item of range.getItems()) {\n                // If the `linkHref` attribute has been removed, sync the change with the `ckboxLinkId` attribute.\n                if (isLinkHrefAttributeRemoval && item.hasAttribute('ckboxLinkId')) {\n                    writer.removeAttribute('ckboxLinkId', item);\n                    changed = true;\n                    continue;\n                }\n                // Otherwise, the change concerns either a new model element or an attribute change. Try to find the assets for the modified\n                // model element.\n                const assets = findAssetsForItem(item, ckboxCommand._chosenAssets);\n                for (const asset of assets) {\n                    const attributeName = asset.type === 'image' ? 'ckboxImageId' : 'ckboxLinkId';\n                    if (asset.id === item.getAttribute(attributeName)) {\n                        continue;\n                    }\n                    writer.setAttribute(attributeName, asset.id, item);\n                    changed = true;\n                }\n            }\n        }\n        return changed;\n    };\n}\n/**\n * A post-fixer that removes the `ckboxLinkId` from the selection if it does not represent a link anymore.\n */\nfunction injectSelectionPostFixer(selection) {\n    return (writer) => {\n        const shouldRemoveLinkIdAttribute = !selection.hasAttribute('linkHref') && selection.hasAttribute('ckboxLinkId');\n        if (shouldRemoveLinkIdAttribute) {\n            writer.removeSelectionAttribute('ckboxLinkId');\n            return true;\n        }\n        return false;\n    };\n}\n/**\n * Tries to find the asset that is associated with the model element by comparing the attributes:\n * - the image fallback URL with the `src` attribute for images,\n * - the link URL with the `href` attribute for links.\n *\n * For any model element, zero, one or more than one asset can be found (e.g. a linked image may be associated with the link asset and the\n * image asset).\n */\nfunction findAssetsForItem(item, assets) {\n    const isImageElement = item.is('element', 'imageInline') || item.is('element', 'imageBlock');\n    const isLinkElement = item.hasAttribute('linkHref');\n    return [...assets].filter(asset => {\n        if (asset.type === 'image' && isImageElement) {\n            return asset.attributes.imageFallbackUrl === item.getAttribute('src');\n        }\n        if (asset.type === 'link' && isLinkElement) {\n            return asset.attributes.linkHref === item.getAttribute('linkHref');\n        }\n    });\n}\n/**\n * Creates view link element with the requested ID.\n */\nfunction createLinkElement(writer, id) {\n    // Priority equal 5 is needed to merge adjacent `<a>` elements together.\n    const viewElement = writer.createAttributeElement('a', { 'data-ckbox-resource-id': id }, { priority: 5 });\n    writer.setCustomProperty('link', true, viewElement);\n    return viewElement;\n}\n/**\n * Checks if the model element may have the `ckboxLinkId` attribute.\n */\nfunction shouldUpcastAttributeForNode(node) {\n    if (node.is('$text')) {\n        return true;\n    }\n    if (node.is('element', 'imageInline') || node.is('element', 'imageBlock')) {\n        return true;\n    }\n    return false;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ckbox/ckbox\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport CKBoxUI from './ckboxui';\nimport CKBoxEditing from './ckboxediting';\n/**\n * The CKBox feature, a bridge between the CKEditor 5 WYSIWYG editor and the CKBox file manager and uploader.\n *\n * This is a \"glue\" plugin which enables:\n *\n * * {@link module:ckbox/ckboxediting~CKBoxEditing},\n * * {@link module:ckbox/ckboxui~CKBoxUI},\n *\n * See the {@glink features/file-management/ckbox CKBox integration} guide to learn how to configure and use this feature.\n *\n * Check out the {@glink features/images/image-upload/image-upload Image upload} guide to learn about other ways to upload\n * images into CKEditor 5.\n */\nexport default class CKBox extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CKBox';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [CKBoxEditing, CKBoxUI];\n    }\n}\n"],
  "mappings": "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",
  "names": ["category"]
}
