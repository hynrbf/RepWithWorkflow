import {
  DatePicker
} from "./chunk-QFWCMYCT.js";
import {
  Loader
} from "./chunk-7BSGVX6K.js";
import {
  filterBy,
  isCompositeFilterDescriptor
} from "./chunk-N7ANHXAD.js";
import "./chunk-PRULFUF2.js";
import {
  DropDownList
} from "./chunk-IBGZHAYS.js";
import {
  Checkbox,
  Input,
  NumericTextBox
} from "./chunk-N4XRXEE2.js";
import "./chunk-C5E7VHMO.js";
import "./chunk-PPZBNG6G.js";
import "./chunk-RFYN2QK2.js";
import "./chunk-WKLUZJPW.js";
import {
  provideIntlService,
  provideLocalizationService
} from "./chunk-TNWINVQ6.js";
import {
  Button
} from "./chunk-EA6IUSJI.js";
import {
  Popup
} from "./chunk-P43752AQ.js";
import {
  Reveal
} from "./chunk-GK4QQKT7.js";
import {
  cancelIcon,
  caretAltDownIcon,
  caretAltLeftIcon,
  caretAltRightIcon,
  caretAltToLeftIcon,
  caretAltToRightIcon,
  filterClearIcon,
  filterIcon,
  minusIcon,
  moreVerticalIcon,
  plusIcon,
  searchIcon,
  sortAscSmallIcon,
  sortDescSmallIcon,
  xCircleIcon
} from "./chunk-HKPTYRTE.js";
import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";
import "./chunk-HM4MQYWN.js";

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value) {
  return typeof value === "object";
};

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/keys.js
var Keys = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  delete: 46
};

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/refs.js
function getRef(comp, refName, customRef) {
  return comp.v3 ? comp["".concat(refName, "Ref")] : comp.$refs["".concat(customRef || refName)];
}
function setRef(comp, refName, customRef) {
  return comp.v3 ? function(el) {
    comp["".concat(refName, "Ref")] = el;
  } : customRef || refName;
}

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);
var Draggable = DraggableVue2;

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/clone.js
var cloneDate = function(date) {
  return date ? new Date(date.getTime()) : null;
};
function clone(obj) {
  var result = {};
  cloneObject(obj, result);
  return result;
}
function cloneObject(obj, result) {
  for (var field in obj) {
    if (obj.hasOwnProperty(field)) {
      var value = obj[field];
      result[field] = cloneValue(value, result[field]);
    }
  }
}
function cloneValue(value, nextValue) {
  if (Array.isArray(value)) {
    return cloneArray(value);
  } else if (value instanceof Date) {
    return cloneDate(value);
  } else if (value && isObject(value)) {
    var newNextValue = nextValue || {};
    cloneObject(value, newNextValue);
    return newNextValue;
  } else {
    return value;
  }
}
function cloneArray(array) {
  return array.map(function(value) {
    return cloneValue(value, void 0);
  });
}

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/noop.js
var noop = function() {
};

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/constants/main.js
var FIELD_REGEX = /\[(?:(\d+)|['"](.*?)['"])\]|((?:(?!\[.*?\]|\.).)+)/g;

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};
function getter(field) {
  if (getterCache[field]) {
    return getterCache[field];
  }
  var fields = [];
  field.replace(FIELD_REGEX, function(_match, index, indexAccessor, fieldName) {
    fields.push(index !== void 0 ? index : indexAccessor || fieldName);
  });
  getterCache[field] = function(obj) {
    var result = obj;
    for (var idx = 0; idx < fields.length && result; idx++) {
      result = result[fields[idx]];
    }
    return result;
  };
  return getterCache[field];
}

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function hasListener(eventName) {
  if (this.v3) {
    return Object.keys(this.$attrs).map(function(name) {
      return name.toLowerCase();
    }).some(function(event) {
      return event.endsWith(eventName.toLowerCase());
    });
  } else {
    return this.$listeners[eventName];
  }
}
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
var templateDefinition = {
  type: [String, Function, Object, Boolean],
  default: function() {
    return void 0;
  }
};
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a4) {
  var h = _a4.h, template = _a4.template, defaultRendering = _a4.defaultRendering, defaultSlots = _a4.defaultSlots, additionalProps = _a4.additionalProps, additionalListeners = _a4.additionalListeners, swapDefaultSlots = _a4.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/isRtl.js
function isRtl(element) {
  return Boolean(canUseDOM && element && getComputedStyle(element).direction === "rtl");
}

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata3) {
  var licensing2 = index_esm_exports;
  var ls2 = typeof licensing2 !== "undefined" && licensing2.validatePackage ? licensing2 : licensing2.default;
  if (ls2 && ls2.validatePackage) {
    ls2.validatePackage(packageMetadata3);
  } else {
    var message = "License activation failed for ".concat(packageMetadata3.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata3.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/theme.js
var kendoThemeMaps = {
  sizeMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  roundedMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  }
};

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/treeDataOperations.js
function getNestedValue(fieldName, dataItem) {
  var path = fieldName.split(".");
  var data15 = dataItem;
  path.forEach(function(p) {
    data15 = data15 ? data15[p] : void 0;
  });
  return data15;
}

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService4() {
    }
    Object.defineProperty(BrowserSupportService4.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService4;
  }()
);

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/icons/constants.js
var SIZE_CLASSES = {
  "default": "",
  "xsmall": "k-icon-xs",
  "small": "k-icon-sm",
  "medium": "k-icon-md",
  "large": "k-icon-lg",
  "xlarge": "k-icon-xl",
  "xxlarge": "k-icon-xxl",
  "xxxlarge": "k-icon-xxxl"
};

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";
var FontIconVue2 = {
  name: "KendoFontIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    tabIndex: Number
  },
  computed: {
    fontClassNames: function fontClassNames() {
      var _a4;
      var _b2 = this.$props, name = _b2.name, flip = _b2.flip, size = _b2.size, themeColor = _b2.themeColor;
      return _a4 = {
        "k-icon": true
      }, _a4["k-i-" + name] = name, _a4["k-color-" + themeColor] = themeColor, _a4["k-flip-h"] = flip === "horizontal" || flip === "both", _a4["k-flip-v"] = flip === "vertical" || flip === "both", _a4[SIZE_CLASSES[size]] = size, _a4;
    }
  },
  // @ts-ignore
  setup: !isV33 ? void 0 : function() {
    var v3 = !!isV33;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh2 || createElement;
    var _a4 = this.$props, id = _a4.id, title = _a4.title, tabIndex = _a4.tabIndex, ariaLabel = _a4.ariaLabel;
    return h("span", {
      "class": this.fontClassNames,
      id,
      attrs: this.v3 ? void 0 : {
        id,
        title,
        "aria-label": ariaLabel,
        tabIndex,
        role: "presentation"
      },
      title,
      "aria-label": ariaLabel,
      tabIndex,
      role: "presentation",
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    });
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit("click", e);
    }
  }
};
var FontIcon = FontIconVue2;

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";
var SvgIconVue2 = {
  name: "KendoSvgIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    icon: Object,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number,
    svgClassName: String,
    svgStyle: Object
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a4;
      var _b2 = this.$props, name = _b2.name, flip = _b2.flip, size = _b2.size, themeColor = _b2.themeColor;
      return _a4 = {
        "k-svg-icon": true
      }, _a4["k-color-" + themeColor] = themeColor, _a4["k-svg-i-" + name] = name, _a4["k-flip-h"] = flip === "horizontal" || flip === "both", _a4["k-flip-v"] = flip === "vertical" || flip === "both", _a4[SIZE_CLASSES[size]] = size, _a4;
    }
  },
  // @ts-ignore
  setup: !isV34 ? void 0 : function() {
    var v3 = !!isV34;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render3(createElement) {
    var h = gh3 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a4 = this.$props, svgClassName = _a4.svgClassName, icon = _a4.icon, id = _a4.id, tabIndex = _a4.tabIndex, svgStyle = _a4.svgStyle, viewBox = _a4.viewBox, title = _a4.title, ariaLabel = _a4.ariaLabel;
    var innerHTML = icon ? icon.content : void 0;
    var attrs = {
      id,
      title,
      "aria-hidden": true,
      tabIndex,
      ariaLabel,
      focusable: "false",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: icon ? icon.viewBox : viewBox
    };
    var svg = h("svg", __assign2(__assign2({}, attrs), {
      attrs: this.v3 ? void 0 : attrs,
      domProps: this.v3 ? void 0 : {
        innerHTML
      },
      innerHTML,
      "class": svgClassName,
      style: svgStyle
    }), icon ? [] : [defaultSlot]);
    return h("span", {
      "class": this.wrapperClass,
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }, [svg]);
  },
  methods: {
    handleClick: function handleClick2(e) {
      this.$emit("click", e);
    }
  }
};
var SvgIcon = SvgIconVue2;

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";
var IconVue2 = {
  name: "KendoIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  inject: {
    kendoIcons: {
      default: {
        type: "svg",
        icons: {}
      }
    }
  },
  props: {
    name: String,
    icon: Object,
    title: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number
  },
  // @ts-ignore
  setup: !isV35 ? void 0 : function() {
    var v3 = !!isV35;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render4(createElement) {
    var h = gh4 || createElement;
    var _a4 = this.$props, name = _a4.name, icon = _a4.icon, themeColor = _a4.themeColor, size = _a4.size, flip = _a4.flip, id = _a4.id, viewBox = _a4.viewBox, tabIndex = _a4.tabIndex, title = _a4.title, ariaLabel = _a4.ariaLabel;
    var svg = name && this.kendoIcons && this.kendoIcons.icons && this.kendoIcons.icons[name] || icon;
    var renderSVG = this.kendoIcons && this.kendoIcons.type === "svg" && svg !== void 0;
    var newSize = this.kendoIcons && this.kendoIcons.size ? this.kendoIcons.size : size;
    var newFlip = this.kendoIcons && this.kendoIcons.flip ? this.kendoIcons.flip : flip;
    var resolvedName = name || (icon && icon.name ? icon.name : void 0);
    var commonProps = {
      themeColor,
      size: newSize,
      flip: newFlip,
      id,
      tabIndex,
      title,
      ariaLabel
    };
    var fontIcon = h(FontIcon, __assign3(__assign3({}, commonProps), {
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    var svgIcon = h(SvgIcon, __assign3(__assign3({}, commonProps), {
      icon: svg,
      viewBox,
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        icon: svg,
        viewBox,
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    return renderSVG ? svgIcon : fontIcon;
  },
  methods: {
    handleClick: function handleClick3(e) {
      this.$emit("click", e);
    }
  }
};
var Icon = IconVue2;

// node_modules/@progress/kendo-vue-grid/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation3(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation3.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation3.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation3.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation3.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation3.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation3.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation3.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation3.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation3.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation3;
  }()
);

// node_modules/@progress/kendo-vue-data-tools/dist/es/messages/main.js
var _a;
var pagerInfo = "pager.info";
var pagerFirstPage = "pager.firstPage";
var pagerPreviousPage = "pager.previousPage";
var pagerNextPage = "pager.nextPage";
var pagerLastPage = "pager.lastPage";
var pagerItemPerPage = "pager.itemsPerPage";
var pagerPageInputAriaLabel = "pager.pageInputAriaLabel";
var pagerSmallPageSelectorAriaLabel = "pager.smallPageSelectorAriaLabel";
var pagerPageSelection = "pager.pageSelection";
var pagerPage = "pager.page";
var pagerOf = "pager.of";
var pagerTotalPages = "pager.totalPages";
var filterEqOperator = "filter.eqOperator";
var filterGroupFilterAriaLabel = "filter.groupFilterAriaLabel";
var filterNotEqOperator = "filter.notEqOperator";
var filterIsNullOperator = "filter.isNullOperator";
var filterIsNotNullOperator = "filter.isNotNullOperator";
var filterIsEmptyOperator = "filter.isEmptyOperator";
var filterIsNotEmptyOperator = "filter.isNotEmptyOperator";
var filterStartsWithOperator = "filter.startsWithOperator";
var filterContainsOperator = "filter.containsOperator";
var filterNotContainsOperator = "filter.notContainsOperator";
var filterEndsWithOperator = "filter.endsWithOperator";
var filterGteOperator = "filter.gteOperator";
var filterGtOperator = "filter.gtOperator";
var filterLteOperator = "filter.lteOperator";
var filterLtOperator = "filter.ltOperator";
var filterIsTrue = "filter.isTrue";
var filterIsFalse = "filter.isFalse";
var filterAfterOrEqualOperator = "filter.afterOrEqualOperator";
var filterAfterOperator = "filter.afterOperator";
var filterBeforeOperator = "filter.beforeOperator";
var filterBeforeOrEqualOperator = "filter.beforeOrEqualOperator";
var filterAndLogic = "filter.andLogic";
var filterOrLogic = "filter.orLogic";
var filterAddExpression = "filter.addExpression";
var filterAddGroup = "filter.addGroup";
var filterClose = "filter.close";
var columnMenuFilterChooseOperator = "columnMenu.filterChooseOperator";
var columnMenuFilterClearButton = "columnMenu.filterClearButton";
var columnMenuFilterSubmitButton = "columnMenu.filterSubmitButton";
var columnMenuFilterTitle = "columnMenu.filterTitle";
var columnMenuSortAscending = "columnMenu.sortAscending";
var columnMenuSortDescending = "columnMenu.sortDescending";
var columnMenuFilterEqOperator = "columnMenu.filterEqOperator";
var columnMenuFilterNotEqOperator = "columnMenu.filterNotEqOperator";
var columnMenuFilterIsNullOperator = "columnMenu.filterIsNullOperator";
var columnMenuFilterIsNotNullOperator = "columnMenu.filterIsNotNullOperator";
var columnMenuFilterIsEmptyOperator = "columnMenu.filterIsEmptyOperator";
var columnMenuFilterIsNotEmptyOperator = "columnMenu.filterIsNotEmptyOperator";
var columnMenuFilterStartsWithOperator = "columnMenu.filterStartsWithOperator";
var columnMenuFilterContainsOperator = "columnMenu.filterContainsOperator";
var columnMenuFilterNotContainsOperator = "columnMenu.filterNotContainsOperator";
var columnMenuFilterEndsWithOperator = "columnMenu.filterEndsWithOperator";
var columnMenuFilterGteOperator = "columnMenu.filterGteOperator";
var columnMenuFilterGtOperator = "columnMenu.filterGtOperator";
var columnMenuFilterLteOperator = "columnMenu.filterLteOperator";
var columnMenuFilterLtOperator = "columnMenu.filterLtOperator";
var columnMenuFilterIsTrue = "columnMenu.filterIsTrue";
var columnMenuFilterAfterOrEqualOperator = "columnMenu.filterAfterOrEqualOperator";
var columnMenuFilterAfterOperator = "columnMenu.filterAfterOperator";
var columnMenuFilterBeforeOperator = "columnMenu.filterBeforeOperator";
var columnMenuFilterBeforeOrEqualOperator = "columnMenu.filterBeforeOrEqualOperator";
var columnMenuFilterAndLogic = "columnMenu.filterAndLogic";
var columnMenuFilterOrLogic = "columnMenu.filterOrLogic";
var searchPlaceholder = "grid.searchPlaceholder";
var selectAllRows = "grid.selectAllRows";
var filterCheckAll = "grid.filterCheckAll";
var sortAriaLabel = "sort.ariaLabel";
var filterAriaLabel = "filter.ariaLabel";
var filterGroupAriaLabel = "filter.groupAriaLabel";
var filterExpressionAriaLabel = "filter.expressionAriaLabel";
var filterExpressionDropdownAriaLabel = "filter.expressionDropdownAriaLabel";
var filterExpressionOperatorDropdownAriaLabel = "filter.expressionOperatorDropdownAriaLabel";
var filterEnumFilterDropdownAriaLabel = "filter.enumFilterDropdownAriaLabel";
var filterNumericFilterAriaLabel = "filter.numericFilterAriaLabel";
var filterTextFilterAriaLabel = "filter.textFilterAriaLabel";
var filterDateFilterAriaLabel = "filter.dateFilterAriaLabel";
var filterDropDownOperatorAriaLabel = "filter.dropdownOperatorAriaLabel";
var messages = (_a = {}, _a[filterGroupFilterAriaLabel] = "Group Filter", _a[pagerSmallPageSelectorAriaLabel] = "Select page", _a[pagerPageInputAriaLabel] = "Pager - Page number input", _a[pagerItemPerPage] = "items per page", _a[pagerPageSelection] = "Select page", _a[pagerInfo] = "{0} - {1} of {2} items", _a[pagerFirstPage] = "Go to the first page", _a[pagerPreviousPage] = "Go to the previous page", _a[pagerNextPage] = "Go to the next page", _a[pagerLastPage] = "Go to the last page", _a[pagerPage] = "Page", _a[pagerOf] = "of", _a[pagerTotalPages] = "{0}", _a[searchPlaceholder] = "Search", _a[selectAllRows] = "Select All Rows", _a[filterCheckAll] = "Check All", _a[sortAriaLabel] = "Sortable", _a[filterAriaLabel] = "Filter", _a[filterEqOperator] = "Is equal to", _a[filterNotEqOperator] = "Is not equal to", _a[filterIsNullOperator] = "Is null", _a[filterIsNotNullOperator] = "Is not null", _a[filterIsEmptyOperator] = "Is empty", _a[filterIsNotEmptyOperator] = "Is not empty", _a[filterStartsWithOperator] = "Starts with", _a[filterContainsOperator] = "Contains", _a[filterNotContainsOperator] = "Does not contain", _a[filterEndsWithOperator] = "Ends with", _a[filterGteOperator] = "Is greater than or equal to", _a[filterGtOperator] = "Is greater than", _a[filterLteOperator] = "Is less than or equal to", _a[filterLtOperator] = "Is less than", _a[filterIsTrue] = "Is true", _a[filterIsFalse] = "Is false", _a[filterAfterOrEqualOperator] = "Is after or equal to", _a[filterAfterOperator] = "Is after", _a[filterBeforeOperator] = "Is before", _a[filterBeforeOrEqualOperator] = "Is before or equal to", _a[filterAndLogic] = "And", _a[filterOrLogic] = "Or", _a[filterAddExpression] = "Add Expression", _a[filterAddGroup] = "Add Group", _a[filterClose] = "Close", _a[filterGroupAriaLabel] = "Filter toolbar", _a[filterExpressionAriaLabel] = "Filter expression row", _a[filterExpressionDropdownAriaLabel] = "Filter dropdown", _a[filterExpressionOperatorDropdownAriaLabel] = "Filter operator dropdown", _a[filterEnumFilterDropdownAriaLabel] = "Select True/False", _a[filterNumericFilterAriaLabel] = "Enter number", _a[filterTextFilterAriaLabel] = "Enter text", _a[filterDateFilterAriaLabel] = "Enter date", _a[filterDropDownOperatorAriaLabel] = "Choose Operator", _a[columnMenuFilterChooseOperator] = "Choose Operator", _a[columnMenuFilterClearButton] = "Clear", _a[columnMenuFilterSubmitButton] = "Filter", _a[columnMenuFilterTitle] = "Filter", _a[columnMenuSortAscending] = "Sort Ascending", _a[columnMenuSortDescending] = "Sort Descending", _a[columnMenuFilterEqOperator] = "Is equal to", _a[columnMenuFilterNotEqOperator] = "Is not equal to", _a[columnMenuFilterIsNullOperator] = "Is null", _a[columnMenuFilterIsNotNullOperator] = "Is not null", _a[columnMenuFilterIsEmptyOperator] = "Is empty", _a[columnMenuFilterIsNotEmptyOperator] = "Is not empty", _a[columnMenuFilterStartsWithOperator] = "Starts with", _a[columnMenuFilterContainsOperator] = "Contains", _a[columnMenuFilterNotContainsOperator] = "Does not contain", _a[columnMenuFilterEndsWithOperator] = "Ends with", _a[columnMenuFilterGteOperator] = "Is greater than or equal to", _a[columnMenuFilterGtOperator] = "Is greater than", _a[columnMenuFilterLteOperator] = "Is less than or equal to", _a[columnMenuFilterLtOperator] = "Is less than", _a[columnMenuFilterIsTrue] = "Is true", _a[columnMenuFilterAfterOrEqualOperator] = "Is after or equal to", _a[columnMenuFilterAfterOperator] = "Is after", _a[columnMenuFilterBeforeOperator] = "Is before", _a[columnMenuFilterBeforeOrEqualOperator] = "Is before or equal to", _a[columnMenuFilterAndLogic] = "And", _a[columnMenuFilterOrLogic] = "Or", _a["grid.filterEqOperator"] = "Is equal to", _a["grid.filterNotEqOperator"] = "Is not equal to", _a["grid.filterIsNullOperator"] = "Is null", _a["grid.filterIsNotNullOperator"] = "Is not null", _a["grid.filterIsEmptyOperator"] = "Is empty", _a["grid.filterIsNotEmptyOperator"] = "Is not empty", _a["grid.filterStartsWithOperator"] = "Starts with", _a["grid.filterContainsOperator"] = "Contains", _a["grid.filterNotContainsOperator"] = "Does not contain", _a["grid.filterEndsWithOperator"] = "Ends with", _a["grid.filterGteOperator"] = "Is greater than or equal to", _a["grid.filterGtOperator"] = "Is greater than", _a["grid.filterLteOperator"] = "Is less than or equal to", _a["grid.filterLtOperator"] = "Is less than", _a["grid.filterIsTrue"] = "Is true", _a["grid.filterIsFalse"] = "Is false", _a["grid.filterBooleanAll"] = "(All)", _a["grid.filterAfterOrEqualOperator"] = "Is after or equal to", _a["grid.filterAfterOperator"] = "Is after", _a["grid.filterBeforeOperator"] = "Is before", _a["grid.filterBeforeOrEqualOperator"] = "Is before or equal to", _a["grid.filterAndLogic"] = "And", _a["grid.filterOrLogic"] = "Or", _a);

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/TextFilter.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/NumericFilter.js
var allVue7 = vue_runtime_esm_bundler_exports;
var gh6 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/DateFilter.js
var allVue8 = vue_runtime_esm_bundler_exports;
var gh7 = allVue8.h;
var isV38 = allVue8.version && allVue8.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/EnumFilter.js
var allVue9 = vue_runtime_esm_bundler_exports;
var gh8 = allVue9.h;
var isV39 = allVue9.version && allVue9.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/BooleanFilter.js
var allVue10 = vue_runtime_esm_bundler_exports;
var gh9 = allVue10.h;
var isV310 = allVue10.version && allVue10.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject2 = function(value) {
  return typeof value === "object";
};

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid2 = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/keys.js
var Keys2 = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  delete: 46
};

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM2 = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots2(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue2;
function _typeof2(o) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof2(o);
}
function _defineProperty2(obj, key, value) {
  key = _toPropertyKey2(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof2(key)) === "symbol" ? key : String(key);
}
function _toPrimitive2(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof2(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof2(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue11 = vue_runtime_esm_bundler_exports;
var gh10 = allVue11.h;
var isV311 = allVue11.version && allVue11.version[0] === "3";
var DraggableVue22 = (_DraggableVue2 = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created2() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV311 ? void 0 : function() {
    var v3 = !!isV311;
    return {
      v3
    };
  },
  mounted: function mounted2() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 || this.$el.nodeType === 8 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV311 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted2() {
    this.draggable.destroy();
  },
  methods: {
    press: function press2(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag2(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release2(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty2(_DraggableVue2, "setup", !isV311 ? void 0 : function() {
  var v3 = !!isV311;
  return {
    v3
  };
}), _defineProperty2(_DraggableVue2, "render", function render5(createElement) {
  var h = gh10 || createElement;
  return getDefaultSlots2(this);
}), _DraggableVue2);

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/noop.js
var noop2 = function() {
};

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache2 = {};
getterCache2.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache2 = {};
setterCache2.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function hasListener2(eventName) {
  if (this.v3) {
    return Object.keys(this.$attrs).map(function(name) {
      return name.toLowerCase();
    }).some(function(event) {
      return event.endsWith(eventName.toLowerCase());
    });
  } else {
    return this.$listeners[eventName];
  }
}
function getListeners2() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var allVue12 = vue_runtime_esm_bundler_exports;
var isV312 = allVue12.version && allVue12.version[0] === "3";
function templateRendering2(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV312 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject2(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate2(_a4) {
  var h = _a4.h, template = _a4.template, defaultRendering = _a4.defaultRendering, defaultSlots = _a4.defaultSlots, additionalProps = _a4.additionalProps, additionalListeners = _a4.additionalListeners, swapDefaultSlots = _a4.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV312) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign4(__assign4({}, transformListeners2(additionalListeners)), template.listeners);
    props = __assign4(__assign4(__assign4({}, passedProps), additionalProps), events);
    componentOptions = __assign4(__assign4({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign4(__assign4(__assign4(__assign4({}, defaultListeners), additionalListeners), transformListeners2(additionalListeners)), template.listeners);
    props = __assign4(__assign4(__assign4({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV312 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV312 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners2(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/isRtl.js
function isRtl2(element) {
  return Boolean(canUseDOM2 && element && getComputedStyle(element).direction === "rtl");
}

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
var licensing = index_esm_exports;
var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/theme.js
var kendoThemeMaps2 = {
  sizeMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  roundedMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  }
};

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument2 = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService2 = (
  /** @class */
  function() {
    function BrowserSupportService4() {
    }
    Object.defineProperty(BrowserSupportService4.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument2();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService4;
  }()
);

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/hasRelativeStackingContext.js
var hasRelativeStackingContext = function(elementSource) {
  if (!canUseDOM2) {
    return false;
  }
  var currentDocument = elementSource ? elementSource.ownerDocument : document;
  if (!currentDocument || !currentDocument.body) {
    return false;
  }
  var top = 10;
  var parent = currentDocument.createElement("div");
  parent.style.transform = "matrix(10, 0, 0, 10, 0, 0)";
  var child = currentDocument.createElement("div");
  child.appendChild(currentDocument.createTextNode("child"));
  child.style.position = "fixed";
  child.style.top = top + "px";
  parent.appendChild(child);
  currentDocument.body.appendChild(parent);
  var isDifferent = child.getBoundingClientRect().top !== top;
  currentDocument.body.removeChild(parent);
  return isDifferent;
};

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue13 = vue_runtime_esm_bundler_exports;
var gh11 = allVue13.h;
var isV313 = allVue13.version && allVue13.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var allVue14 = vue_runtime_esm_bundler_exports;
var gh12 = allVue14.h;
var isV314 = allVue14.version && allVue14.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var allVue15 = vue_runtime_esm_bundler_exports;
var gh13 = allVue15.h;
var isV315 = allVue15.version && allVue15.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/icons/getIconName.js
var getIconName = function(iconName) {
  return iconName && iconName.indexOf("k-i-") !== -1 ? iconName.split("k-i-")[1] : iconName;
};

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation2 = (
  /** @class */
  function() {
    function Navigation3(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation3.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation3.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation3.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation3.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation3.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation3.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation3.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation3.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation3.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation3;
  }()
);

// node_modules/@progress/kendo-vue-data-tools/node_modules/@progress/kendo-vue-common/dist/es/watermark/WatermarkOverlay.js
var allVue16 = vue_runtime_esm_bundler_exports;
var gh14 = allVue16.h;
var isV316 = allVue16.version && allVue16.version[0] === "3";
var banners = new Array();

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/operators.js
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var textOperators = [
  { text: filterContainsOperator, operator: "contains" },
  { text: filterNotContainsOperator, operator: "doesnotcontain" },
  { text: filterEqOperator, operator: "eq" },
  { text: filterNotEqOperator, operator: "neq" },
  { text: filterStartsWithOperator, operator: "startswith" },
  { text: filterEndsWithOperator, operator: "endswith" },
  { text: filterIsNullOperator, operator: "isnull" },
  { text: filterIsNotNullOperator, operator: "isnotnull" },
  { text: filterIsEmptyOperator, operator: "isempty" },
  { text: filterIsNotEmptyOperator, operator: "isnotempty" }
];
var numericOperators = [
  { text: filterEqOperator, operator: "eq" },
  { text: filterNotEqOperator, operator: "neq" },
  { text: filterGteOperator, operator: "gte" },
  { text: filterGtOperator, operator: "gt" },
  { text: filterLteOperator, operator: "lte" },
  { text: filterLtOperator, operator: "lt" },
  { text: filterIsNullOperator, operator: "isnull" },
  { text: filterIsNotNullOperator, operator: "isnotnull" }
];
var dateOperators = [
  { text: filterEqOperator, operator: "eq" },
  { text: filterNotEqOperator, operator: "neq" },
  { text: filterAfterOrEqualOperator, operator: "gte" },
  { text: filterAfterOperator, operator: "gt" },
  { text: filterBeforeOperator, operator: "lt" },
  { text: filterBeforeOrEqualOperator, operator: "lte" },
  { text: filterIsNullOperator, operator: "isnull" },
  { text: filterIsNotNullOperator, operator: "isnotnull" }
];
var booleanOperators = [
  { text: filterEqOperator, operator: "eq" },
  { text: filterNotEqOperator, operator: "neq" }
];
var Operators = (
  /** @class */
  function() {
    function Operators2() {
    }
    Object.defineProperty(Operators2, "text", {
      /**
       * An array containing the operators for the TextFilter component.
       *
       * The operators are:
       *
       * - { text: 'filter.containsOperator', operator: 'contains' }
       * - { text: 'filter.notContainsOperator', operator: 'doesnotcontain' }
       * - { text: 'filter.eqOperator', operator: 'eq' }
       * - { text: 'filter.notEqOperator', operator: 'neq' }
       * - { text: 'filter.startsWithOperator', operator: 'startswith' }
       * - { text: 'filter.endsWithOperator', operator: 'endswith' }
       * - { text: 'filter.isNullOperator', operator: 'isnull' }
       * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }
       * - { text: 'filter.isEmptyOperator', operator: 'isempty' }
       * - { text: 'filter.isNotEmptyOperator', operator: 'isnotempty' }
       */
      get: function() {
        return __spreadArray([], textOperators, true);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Operators2, "numeric", {
      /**
       * An array containing the operators for the NumericFilter component.
       *
       * The operators are:
       *
       * - { text: 'filter.eqOperator', operator: 'eq' }
       * - { text: 'filter.notEqOperator', operator: 'neq' }
       * - { text: 'filter.gteOperator', operator: 'gte' }
       * - { text: 'filter.gtOperator', operator: 'gt' }
       * - { text: 'filter.lteOperator', operator: 'lte' }
       * - { text: 'filter.ltOperator', operator: 'lt' }
       * - { text: 'filter.isNullOperator', operator: 'isnull' }
       * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }
       */
      get: function() {
        return __spreadArray([], numericOperators, true);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Operators2, "date", {
      /**
       * An array containing the operators for the DateFilter component.
       *
       * The operators are:
       *
       * - { text: 'filter.eqOperator', operator: 'eq' }
       * - { text: 'filter.notEqOperator', operator: 'neq' }
       * - { text: 'filter.afterOrEqualOperator', operator: 'gte' }
       * - { text: 'filter.afterOperator', operator: 'gt' }
       * - { text: 'filter.beforeOperator', operator: 'lt' }
       * - { text: 'filter.beforeOrEqualOperator', operator: 'lte' }
       * - { text: 'filter.isNullOperator', operator: 'isnull' }
       * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }
       */
      get: function() {
        return __spreadArray([], dateOperators, true);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Operators2, "boolean", {
      /**
       * An array containing the operators for the BooleanFilter component.
       *
       * The operators are:
       *
       * - { text: 'filter.eqOperator', operator: 'eq' }
       * - { text: 'filter.notEqOperator', operator: 'neq' }
       */
      get: function() {
        return __spreadArray([], booleanOperators, true);
      },
      enumerable: false,
      configurable: true
    });
    return Operators2;
  }()
);

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/Expression.js
var allVue17 = vue_runtime_esm_bundler_exports;
var gh15 = allVue17.h;
var isV317 = allVue17.version && allVue17.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/GroupToolbar.js
var allVue18 = vue_runtime_esm_bundler_exports;
var gh16 = allVue18.h;
var isV318 = allVue18.version && allVue18.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/GroupFilters.js
var allVue19 = vue_runtime_esm_bundler_exports;
var gh17 = allVue19.h;
var isV319 = allVue19.version && allVue19.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/Filter.js
var allVue20 = vue_runtime_esm_bundler_exports;
var gh18 = allVue20.h;
var isV320 = allVue20.version && allVue20.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/cells/FilterCell.js
var allVue21 = vue_runtime_esm_bundler_exports;
var gh19 = allVue21.h;
var isV321 = allVue21.version && allVue21.version[0] === "3";
var inject = allVue21.inject;

// node_modules/@progress/kendo-vue-data-tools/dist/es/navigation/constants.js
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var _a2;
var _b;
var _c;
var KEYBOARD_NAV_DATA_LEVEL = "data-keyboardnavlevel";
var KEYBOARD_NAV_DATA_SCOPE = "data-keyboardnavscope";
var KEYBOARD_NAV_DATA_HEADER = "data-keyboardnavheader";
var KEYBOARD_NAV_DATA_BODY = "data-keyboardnavbody";
var KEYBOARD_NAV_DATA_ID = "data-keyboardnavid";
var KEYBOARD_NAV_FILTER_COL_SUFFIX = "_filter";
var FOCUSABLE_ELEMENTS_BASE = ["input:not([disabled]):not([type=hidden])", "select:not([disabled])", "textarea:not([disabled])", "button:not([disabled])", "a[href]", "area[href]", "summary", "iframe", "object", "embed", "audio[controls]", "video[controls]", "[contenteditable]"];
var FOCUSABLE_ELEMENTS = __spreadArray2(__spreadArray2([], FOCUSABLE_ELEMENTS_BASE, true), ["[tabindex]"], false);
var TABBABLE_ELEMENTS = __spreadArray2(__spreadArray2([], FOCUSABLE_ELEMENTS_BASE, true), ["[tabindex]"], false).map(function(selector) {
  return selector + ':not([tabindex="-1"])';
});
var tableKeyboardNavigationScopeAttributes = (_a2 = {}, _a2[KEYBOARD_NAV_DATA_SCOPE] = true, _a2);
var tableKeyboardNavigationHeaderAttributes = (_b = {}, _b[KEYBOARD_NAV_DATA_HEADER] = true, _b);
var tableKeyboardNavigationBodyAttributes = (_c = {}, _c[KEYBOARD_NAV_DATA_BODY] = true, _c);

// node_modules/@progress/kendo-vue-data-tools/dist/es/navigation/utils.js
var generateNavigatableId = function(navigationId, idPrefix, type) {
  if (type === void 0) {
    type = "cell";
  }
  return "".concat(idPrefix, "_").concat(navigationId, "_").concat(type);
};
var getNavigatableLevel = function(element) {
  if (!element) {
    return;
  }
  return parseInt(element.getAttribute(KEYBOARD_NAV_DATA_LEVEL) || "", 10);
};
var getNavigatableId = function(element) {
  if (!element) {
    return;
  }
  var dataId = element.getAttribute(KEYBOARD_NAV_DATA_ID);
  return dataId ? dataId : void 0;
};
var isNavigatable = function(element) {
  if (!element) {
    return false;
  }
  var dataId = element.getAttribute(KEYBOARD_NAV_DATA_ID);
  return Boolean(dataId);
};
var getNavigatableElement = function(scope, options) {
  if (options === void 0) {
    options = { level: 0 };
  }
  return scope.querySelector("[".concat(KEYBOARD_NAV_DATA_LEVEL, "='").concat(options.level, "']"));
};
var getClosestNavigatableElement = function(target) {
  return target.parentElement && target.parentElement.closest("[".concat(KEYBOARD_NAV_DATA_LEVEL, "]"));
};
var getActiveElement = function(scope, activeId) {
  return scope.querySelector("[".concat(KEYBOARD_NAV_DATA_ID, "='").concat(activeId, "']"));
};
var getClosestScope = function(target) {
  return target.parentElement && target.parentElement.closest("[".concat(KEYBOARD_NAV_DATA_SCOPE, "]"));
};
var getHeaderElement = function(scope) {
  return scope.querySelector("[".concat(KEYBOARD_NAV_DATA_HEADER, "]"));
};
var getBodyElement = function(scope) {
  return scope.querySelector("[".concat(KEYBOARD_NAV_DATA_BODY, "]"));
};
var getFocusableElements = function(scope, options) {
  if (options === void 0) {
    options = { focusable: false };
  }
  var selectors = options.focusable ? FOCUSABLE_ELEMENTS : TABBABLE_ELEMENTS;
  return Array.from(scope.querySelectorAll(selectors.join(",")));
};
var getNavigatableElements = function(scope, options) {
  if (options === void 0) {
    options = { level: 0 };
  }
  if (!scope) {
    return [];
  }
  var selector = FOCUSABLE_ELEMENTS.map(function(el) {
    return el + "[".concat(KEYBOARD_NAV_DATA_LEVEL, "='").concat(options.level, "']");
  }).join(",");
  return Array.from(scope.querySelectorAll(selector));
};
var filterNavigatableElements = function(options) {
  if (options === void 0) {
    options = { level: 0 };
  }
  var selector = FOCUSABLE_ELEMENTS.map(function(sel) {
    return sel + "[".concat(KEYBOARD_NAV_DATA_LEVEL, "='").concat(options.level, "']");
  }).join(",");
  return function(element) {
    return element.matches(selector);
  };
};
var focusElement = function(options) {
  var elementForFocus = options.elementForFocus, event = options.event, kbContext = options.kbContext, prevElement = options.prevElement;
  if (kbContext && elementForFocus && elementForFocus.focus) {
    event.preventDefault();
    elementForFocus.focus();
    if (isNavigatable(elementForFocus)) {
      elementForFocus.setAttribute("tabIndex", "0");
      kbContext.activeId = getNavigatableId(elementForFocus);
    }
    if (prevElement && isNavigatable(prevElement)) {
      prevElement.setAttribute("tabIndex", "-1");
    }
  }
};
var getIdPrefix = function(navigation) {
  return navigation ? navigation.idPrefix : "";
};
var findNextIdByRowIndex = function(initialRowIndex, cellIndex, elementId, matrix, isReverse) {
  if (!elementId) {
    return [];
  }
  var currentRowIndex = initialRowIndex + (isReverse ? -1 : 1);
  while (currentRowIndex >= 0 && currentRowIndex < matrix.length) {
    var currentId = matrix[currentRowIndex][cellIndex];
    if (currentId !== elementId) {
      return [currentId, [currentRowIndex, cellIndex]];
    }
    currentRowIndex = currentRowIndex + (isReverse ? -1 : 1);
  }
  return [];
};
var findNextIdByCellIndex = function(rowIndex, initialCellIndex, elementId, matrix, isReverse) {
  if (!elementId) {
    return [];
  }
  var currentCellIndex = initialCellIndex + (isReverse ? -1 : 1);
  while (currentCellIndex >= 0 && currentCellIndex < matrix[rowIndex].length) {
    var currentId = matrix[rowIndex][currentCellIndex];
    if (currentId !== elementId) {
      return [currentId, [rowIndex, currentCellIndex]];
    }
    currentCellIndex = currentCellIndex + (isReverse ? -1 : 1);
  }
  return [];
};
var findId = function(navigationMatrix, cellId) {
  if (!cellId) {
    return;
  }
  for (var rowIndex = 0; rowIndex < navigationMatrix.length; rowIndex++) {
    for (var cellIndex = 0; cellIndex < navigationMatrix[rowIndex].length; cellIndex++) {
      if (navigationMatrix[rowIndex][cellIndex] === cellId) {
        return [rowIndex, cellIndex];
      }
    }
  }
};
var getNextNavigationIndex = function(navigation) {
  return navigation ? navigation.navigationMatrix.length : 0;
};
var getFilterColumnId = function(columnId) {
  return columnId ? "".concat(columnId).concat(KEYBOARD_NAV_FILTER_COL_SUFFIX) : "";
};
var tableKeyboardNavigationTools = {
  generateNavigatableId,
  getNavigatableId,
  getNavigatableLevel,
  getNavigatableElement,
  getClosestNavigatableElement,
  getActiveElement,
  getClosestScope,
  getHeaderElement,
  getBodyElement,
  getFocusableElements,
  getNavigatableElements,
  filterNavigatableElements,
  focusElement,
  getIdPrefix,
  isNavigatable,
  findNextIdByRowIndex,
  findNextIdByCellIndex,
  findId,
  getNextNavigationIndex,
  getFilterColumnId
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderThElement.js
var allVue22 = vue_runtime_esm_bundler_exports;
var gh20 = allVue22.h;
var isV322 = allVue22.version && allVue22.version[0] === "3";
var inject2 = allVue22.inject;
var HeaderThElementVue2 = {
  name: "KendoHeaderThElement",
  // @ts-ignore
  emits: {
    keydown: null
  },
  props: {
    ariaSort: {
      type: String,
      validator: function validator(value) {
        return ["none", "ascending", "descending"].includes(value);
      }
    },
    ariaLabel: String,
    ariaColumnIndex: Number,
    ariaSelected: Boolean,
    colSpan: Number,
    rowSpan: Number,
    role: String,
    columnId: String,
    navigatable: Boolean
  },
  computed: {
    thClass: function thClass() {
      var _a4;
      var className = this.$props.className;
      return _a4 = {
        "k-table-th": true
      }, _a4[className] = className, _a4;
    }
  },
  inject: {
    getKeyboardNavigationAttributes: {
      default: noop2
    }
  },
  // @ts-ignore
  setup: !isV322 ? void 0 : function() {
    var v3 = !!isV322;
    var kendoIntlService = inject2("kendoIntlService", {});
    var kendoLocalizationService = inject2("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render6(createElement) {
    var h = gh20 || createElement;
    var _a4 = this.$props, ariaSort = _a4.ariaSort, colSpan = _a4.colSpan, rowSpan = _a4.rowSpan, columnId = _a4.columnId, navigatable = _a4.navigatable, ariaColumnIndex = _a4.ariaColumnIndex, ariaLabel = _a4.ariaLabel, role = _a4.role, ariaSelected = _a4.ariaSelected;
    var navAttrs = this.getKeyboardNavigationAttributes(columnId, navigatable);
    var defaultSlot = getDefaultSlots2(this);
    return h("th", {
      style: {
        top: "0px"
      },
      "aria-sort": ariaSort,
      attrs: this.v3 ? void 0 : {
        "aria-sort": ariaSort,
        "aria-label": ariaLabel,
        "aria-colindex": ariaColumnIndex,
        "aria-selected": ariaSelected,
        colspan: colSpan,
        rowspan: rowSpan,
        role,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      },
      "aria-label": ariaLabel,
      "aria-colindex": ariaColumnIndex,
      "aria-selected": ariaSelected,
      colspan: colSpan,
      rowspan: rowSpan,
      "class": this.thClass,
      onKeydown: this.onKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onKeyDown
      },
      role,
      tabindex: navAttrs.tabIndex,
      "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
      "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
    }, [defaultSlot]);
  },
  methods: {
    onKeyDown: function onKeyDown(e) {
      this.$emit("keydown", e);
    }
  }
};
var HeaderThElement = HeaderThElementVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/FilterRow.js
var allVue23 = vue_runtime_esm_bundler_exports;
var gh21 = allVue23.h;
var isV323 = allVue23.version && allVue23.version[0] === "3";
var inject3 = allVue23.inject;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/Header.js
var allVue24 = vue_runtime_esm_bundler_exports;
var gh22 = allVue24.h;
var isV324 = allVue24.version && allVue24.version[0] === "3";
var ref = allVue24.ref;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderCell.js
var allVue25 = vue_runtime_esm_bundler_exports;
var gh23 = allVue25.h;
var isV325 = allVue25.version && allVue25.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/ColumnResizer.js
var allVue26 = vue_runtime_esm_bundler_exports;
var gh24 = allVue26.h;
var isV326 = allVue26.version && allVue26.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/ColumnDraggable.js
var allVue27 = vue_runtime_esm_bundler_exports;
var gh25 = allVue27.h;
var isV327 = allVue27.version && allVue27.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuItem.js
var allVue28 = vue_runtime_esm_bundler_exports;
var gh26 = allVue28.h;
var isV328 = allVue28.version && allVue28.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuItemGroup.js
var allVue29 = vue_runtime_esm_bundler_exports;
var gh27 = allVue29.h;
var isV329 = allVue29.version && allVue29.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuSort.js
var allVue30 = vue_runtime_esm_bundler_exports;
var gh28 = allVue30.h;
var isV330 = allVue30.version && allVue30.version[0] === "3";
var inject4 = allVue30.inject;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuItemContent.js
var allVue31 = vue_runtime_esm_bundler_exports;
var gh29 = allVue31.h;
var isV331 = allVue31.version && allVue31.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuFilterCell.js
var allVue32 = vue_runtime_esm_bundler_exports;
var gh30 = allVue32.h;
var isV332 = allVue32.version && allVue32.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuFilterOperators.js
var allVue33 = vue_runtime_esm_bundler_exports;
var gh31 = allVue33.h;
var isV333 = allVue33.version && allVue33.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuFilter.js
var allVue34 = vue_runtime_esm_bundler_exports;
var gh32 = allVue34.h;
var isV334 = allVue34.version && allVue34.version[0] === "3";
var inject5 = allVue34.inject;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuContent.js
var allVue35 = vue_runtime_esm_bundler_exports;
var gh33 = allVue35.h;
var isV335 = allVue35.version && allVue35.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenu.js
var allVue36 = vue_runtime_esm_bundler_exports;
var gh34 = allVue36.h;
var isV336 = allVue36.version && allVue36.version[0] === "3";
var inject6 = allVue36.inject;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderSelectionCell.js
var allVue37 = vue_runtime_esm_bundler_exports;
var gh35 = allVue37.h;
var isV337 = allVue37.version && allVue37.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderRow.js
var allVue38 = vue_runtime_esm_bundler_exports;
var gh36 = allVue38.h;
var isV338 = allVue38.version && allVue38.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderTdElement.js
var allVue39 = vue_runtime_esm_bundler_exports;
var gh37 = allVue39.h;
var isV339 = allVue39.version && allVue39.version[0] === "3";
var inject7 = allVue39.inject;
var HeaderTdElementVue2 = {
  name: "KendoHeaderTdElement",
  // @ts-ignore
  emits: {
    keydown: null
  },
  props: {
    ariaColumnIndex: Number,
    role: String,
    columnId: String,
    navigatable: Boolean
  },
  computed: {
    tdClass: function tdClass() {
      var _a4;
      var className = this.$props.className;
      return _a4 = {
        "k-table-td": true
      }, _a4[className] = className, _a4;
    }
  },
  inject: {
    getKeyboardNavigationAttributes: {
      default: noop2
    }
  },
  // @ts-ignore
  setup: !isV339 ? void 0 : function() {
    var v3 = !!isV339;
    var kendoIntlService = inject7("kendoIntlService", {});
    var kendoLocalizationService = inject7("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render7(createElement) {
    var h = gh37 || createElement;
    var _a4 = this.$props, columnId = _a4.columnId, navigatable = _a4.navigatable, ariaColumnIndex = _a4.ariaColumnIndex, role = _a4.role;
    var navAttrs = this.getKeyboardNavigationAttributes(columnId, navigatable);
    var defaultSlot = getDefaultSlots2(this);
    return h("td", {
      style: {
        top: "0px"
      },
      "aria-colindex": ariaColumnIndex,
      attrs: this.v3 ? void 0 : {
        "aria-colindex": ariaColumnIndex,
        role,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      },
      "class": this.tdClass,
      onKeydown: this.onKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onKeyDown
      },
      role,
      tabindex: navAttrs.tabIndex,
      "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
      "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
    }, [defaultSlot]);
  },
  methods: {
    onKeyDown: function onKeyDown2(e) {
      this.$emit("keydown", e);
    }
  }
};
var HeaderTdElement = HeaderTdElementVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/virtualization/columns.js
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function tableColumnsVirtualization(args) {
  var enabled = args.enabled, _a4 = args.columns, columns = _a4 === void 0 ? [] : _a4, tableViewPortWidth = args.tableViewPortWidth, scrollLeft = args.scrollLeft;
  var colSpans = columns.map(function() {
    return 1;
  });
  var hiddenColumns = columns.map(function() {
    return false;
  });
  if (!enabled) {
    return { colSpans, hiddenColumns };
  }
  var widths = columns.map(function(c) {
    return parseFloat((c.width || "").toString()) || 10;
  });
  var widthOfHiddenColumns = 0;
  for (var i = 0; i < columns.length; i++) {
    if (columns[i].locked) {
      continue;
    }
    var considerNext = i < widths.length - 1 ? widths[i + 1] : 0;
    if (widthOfHiddenColumns + widths[i] + considerNext < scrollLeft) {
      hiddenColumns[i] = true;
      widthOfHiddenColumns += widths[i];
    } else {
      break;
    }
  }
  var totalWidth = widths.reduce(function(acc, current) {
    return acc + current;
  }, 0);
  widthOfHiddenColumns = 0;
  for (var i = columns.length - 1; i >= 0; i--) {
    if (columns[i].locked) {
      continue;
    }
    if (widthOfHiddenColumns + 2 * widths[i] < totalWidth - tableViewPortWidth - scrollLeft) {
      hiddenColumns[i] = true;
      widthOfHiddenColumns += widths[i];
    } else {
      break;
    }
  }
  var hiddenCols = __spreadArray3([], hiddenColumns, true);
  var hidden = function(value) {
    return value;
  };
  var lastVisible = hiddenCols.lastIndexOf(false);
  var anyHidden = hiddenCols.some(hidden);
  var allHidden = hiddenCols.every(hidden);
  var hiddenSeqLength;
  var updateIndex;
  while (anyHidden && hiddenCols.length && (lastVisible !== -1 || allHidden)) {
    if (lastVisible < hiddenCols.length - 1) {
      hiddenSeqLength = allHidden ? hiddenCols.length : hiddenCols.length - lastVisible - 1;
      updateIndex = hiddenCols.length - hiddenSeqLength;
      if (updateIndex === 0) {
        updateIndex = hiddenSeqLength - 1;
      }
      hiddenColumns[updateIndex] = false;
      colSpans[updateIndex] = hiddenSeqLength;
      hiddenCols.splice(lastVisible + 1, hiddenSeqLength);
    }
    while (hiddenCols.length && !hiddenCols[hiddenCols.length - 1]) {
      hiddenCols.pop();
    }
    lastVisible = hiddenCols.lastIndexOf(false);
    anyHidden = hiddenCols.some(hidden);
    allHidden = hiddenCols.every(hidden);
  }
  return { colSpans, hiddenColumns };
}

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/ColumnResize.js
var ColumnResize = (
  /** @class */
  function() {
    function ColumnResize3(triggerResize) {
      var _this = this;
      this.resizable = false;
      this.isRtl = false;
      this.setIsRtl = function(isRtl4) {
        _this.isRtl = isRtl4;
      };
      this.onResize = triggerResize;
      this.dragHandler = this.dragHandler.bind(this);
    }
    ColumnResize3.prototype.dragHandler = function(event, column, dragCue, end) {
      var e = event.originalEvent;
      if (!end) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
      var tdElement = dragCue.parentElement;
      if (!tdElement || !tdElement.parentElement) {
        return;
      }
      var oldWidth = tdElement.clientWidth;
      var newWidth;
      if (this.isRtl) {
        newWidth = dragCue.getBoundingClientRect().right - dragCue.offsetWidth / 2 - event.clientX;
        newWidth += oldWidth;
      } else {
        newWidth = oldWidth + event.clientX - dragCue.getBoundingClientRect().left - dragCue.offsetWidth / 2;
      }
      if (!end && Math.abs(newWidth - oldWidth) < 1) {
        return;
      }
      this.fixateInitialWidths(tdElement.parentElement.clientWidth);
      this.setWidths(column, Math.floor(newWidth) / oldWidth);
      var index = this.columns.filter(function(c) {
        return !c.children.length;
      }).indexOf(column);
      this.onResize(index, oldWidth, newWidth, e, end);
    };
    ColumnResize3.prototype.fixateInitialWidths = function(width) {
      var columns = this.columns.filter(function(c) {
        return !c.children.length;
      });
      var remainingCount = 0;
      var cols = this.colGroupMain ? this.colGroupMain.children : [];
      for (var i = 0; i < cols.length; i++) {
        if (cols[i].width) {
          width -= parseFloat(cols[i].width);
        } else {
          remainingCount++;
        }
      }
      if (remainingCount === 0) {
        return;
      }
      var perCol = Math.floor(width / remainingCount);
      for (var i = 0; i < cols.length; i++) {
        var col = cols[i];
        if (!col.width) {
          col.width = perCol;
          columns[i].width = perCol.toString();
          if (this.colGroupHeader) {
            this.colGroupHeader.children[i].width = perCol;
          }
          if (this.colGroupFooter) {
            this.colGroupFooter.children[i].width = perCol;
          }
        }
      }
    };
    ColumnResize3.prototype.setWidths = function(column, coef) {
      var indexInOriginal = this.columns.indexOf(column);
      var toAdjust = [];
      var more = column.children.length;
      for (var i = indexInOriginal + 1; more > 0 && i < this.columns.length; i++, more--) {
        var cc = this.columns[i];
        if (!cc.children.length) {
          toAdjust.push(cc);
        } else {
          more += cc.children.length;
        }
      }
      if (toAdjust.length === 0) {
        toAdjust.push(column);
      }
      toAdjust.forEach(function(colToAdjust) {
        var targetWidth = colToAdjust.width ? parseFloat(colToAdjust.width.toString()) * coef : 0;
        var min = colToAdjust.minResizableWidth === void 0 ? 10 : colToAdjust.minResizableWidth;
        if (targetWidth < min) {
          targetWidth = min;
        }
        colToAdjust.width = targetWidth;
      });
      this.updateColElements(toAdjust);
    };
    ColumnResize3.prototype.updateColElements = function(affectedColumns) {
      var columns = this.columns.filter(function(c) {
        return !c.children.length;
      });
      var difference = 1e-10;
      for (var i = 0; i < affectedColumns.length; i++) {
        var colIndex = columns.indexOf(affectedColumns[i]);
        var currentColumnFloatWidth = parseFloat((affectedColumns[i].width || 0).toString());
        difference += currentColumnFloatWidth - Math.floor(currentColumnFloatWidth);
        var currentWidth = Math.floor(currentColumnFloatWidth) + Math.floor(difference);
        difference -= Math.floor(difference);
        if (this.colGroupMain) {
          this.colGroupMain.children[colIndex].width = currentWidth + "px";
        }
        if (this.colGroupHeader) {
          this.colGroupHeader.children[colIndex].width = currentWidth + "px";
        }
        if (this.colGroupFooter && this.colGroupFooter.children[colIndex]) {
          this.colGroupFooter.children[colIndex].width = currentWidth + "px";
        }
      }
    };
    return ColumnResize3;
  }()
);

// node_modules/@progress/kendo-vue-data-tools/dist/es/utils/main.js
function getIndex(event, parent) {
  if (!parent || !event || !event.originalEvent || !canUseDOM2) {
    return -1;
  }
  var target = document.elementFromPoint(event.clientX, event.originalEvent.clientY);
  while (target && target.parentElement !== parent) {
    target = target.parentElement;
  }
  var children = parent.children;
  for (var i = 0; i < children.length; i++) {
    if (children[i] === target) {
      return i;
    }
  }
  return -1;
}

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/CommonDragLogic.js
var CommonDragLogic = (
  /** @class */
  function() {
    function CommonDragLogic3(columnReorder2, groupReorder2, columnToGroup2) {
      var _this = this;
      this.reorderable = false;
      this.groupable = false;
      this.dropElementClue = null;
      this.dragElementClue = null;
      this.startColumn = -1;
      this.startGroup = -1;
      this.currentColumn = -1;
      this.currentGroup = -1;
      this.groupPanelDivElement = null;
      this.refGroupPanelDiv = function(e) {
        _this.groupPanelDivElement = e.children ? e.children[0] : e;
      };
      this.refDropElementClue = function(e) {
        _this.dropElementClue = e;
        if (_this.dropElementClue && canUseDOM2) {
          document.body.appendChild(_this.dropElementClue.$el);
        }
      };
      this.refDragElementClue = function(e) {
        _this.dragElementClue = e;
        if (_this.dragElementClue && canUseDOM2) {
          document.body.appendChild(_this.dragElementClue.$el);
        }
      };
      this.pressHandler = function(event, element) {
        if (!event.isTouch) {
          event.originalEvent.preventDefault();
        }
        var startColumn = _this.getColumnIndex(event, element);
        _this.startGroup = _this.getGroupIndex(event);
        if (startColumn >= 0) {
          var col = _this.columns[startColumn];
          if (col.reorderable && _this.reorderable || col.groupable && _this.groupable) {
            _this.startColumn = startColumn;
          }
        }
      };
      this.dragHandler = function(event, element) {
        if (!event.isTouch) {
          event.originalEvent.preventDefault();
        }
        event.originalEvent.stopPropagation();
        if (_this.startColumn === -1 && _this.startGroup === -1) {
          return;
        }
        _this.currentColumn = _this.getColumnIndex(event, element);
        var groupPanelChildren = _this.groupPanelDivElement && _this.groupPanelDivElement.children;
        _this.currentGroup = _this.isTargetGroupingContainer(event) ? groupPanelChildren && groupPanelChildren.length ? groupPanelChildren.length - 1 : 0 : _this.getGroupIndex(event);
        var invalidIndex = !_this.isValid();
        if (invalidIndex) {
          _this.currentColumn = -1;
          _this.currentGroup = -1;
        }
        var targetElement = _this.currentColumn >= 0 ? element.children[_this.columns[_this.currentColumn].index] : _this.isTargetGroupingContainer(event) ? event.originalEvent.target : _this.groupPanelDivElement && _this.groupPanelDivElement.children[_this.currentGroup];
        _this.updateDragElementClue(event, element, targetElement, invalidIndex);
        _this.updateDropElementClue(event, element, targetElement, invalidIndex);
      };
      this.releaseHandler = function(event) {
        var prevColumnIndex = _this.startColumn;
        var nextColumnIndex = _this.currentColumn;
        var prevGroupIndex = _this.startGroup;
        var nextGroupIndex = _this.currentGroup;
        if (_this.dropElementClue) {
          _this.dropElementClue.visible = false;
        }
        if (_this.dragElementClue) {
          _this.dragElementClue.visible = false;
        }
        var isValid = _this.isValid();
        _this.startColumn = _this.startGroup = _this.currentColumn = _this.currentGroup = -1;
        if (!isValid) {
          return;
        }
        if (prevColumnIndex >= 0 && nextColumnIndex >= 0) {
          _this.columnReorder(prevColumnIndex, nextColumnIndex, event.originalEvent);
        } else if (prevGroupIndex >= 0 && nextGroupIndex >= 0) {
          _this.groupReorder(prevGroupIndex, nextGroupIndex, event.originalEvent);
        } else if (prevColumnIndex >= 0 && nextGroupIndex >= 0) {
          _this.columnToGroup(prevColumnIndex, nextGroupIndex, event.originalEvent);
        }
      };
      this.columnReorder = columnReorder2;
      this.groupReorder = groupReorder2;
      this.columnToGroup = columnToGroup2;
    }
    CommonDragLogic3.prototype.getColumnIndex = function(event, parent) {
      if (!parent || parent.parentElement === this.groupPanelDivElement) {
        return -1;
      }
      var index = getIndex(event, parent);
      if (index === -1) {
        return -1;
      }
      var _loop_1 = function(i2) {
        if (parent.parentNode.children[i2] === parent) {
          return { value: this_1.columns.findIndex(function(c) {
            return c.index === index && c.depth === i2;
          }) };
        }
      };
      var this_1 = this;
      for (var i = 0; i < parent.parentNode.children.length; i++) {
        var state_1 = _loop_1(i);
        if (typeof state_1 === "object")
          return state_1.value;
      }
      return -1;
    };
    CommonDragLogic3.prototype.isTargetGroupingContainer = function(event) {
      var target = event.originalEvent.target;
      return target.className.indexOf("k-grouping-drop-container") !== -1;
    };
    CommonDragLogic3.prototype.getGroupIndex = function(event) {
      return getIndex(event, this.groupPanelDivElement);
    };
    CommonDragLogic3.prototype.isValid = function() {
      if (this.startGroup >= 0) {
        return this.currentGroup >= 0 && this.currentGroup !== this.startGroup;
      }
      if (this.startColumn === -1) {
        return false;
      }
      if (this.currentGroup >= 0) {
        return this.columns[this.startColumn].groupable === true && this.groupable === true;
      }
      return this.reorderable === true && this.currentColumn >= 0 && this.currentColumn !== this.startColumn && this.columns[this.startColumn].reorderable === true && this.columns[this.currentColumn].parentIndex === this.columns[this.startColumn].parentIndex;
    };
    CommonDragLogic3.prototype.updateDragElementClue = function(event, element, targetElement, invalidIndex) {
      if (!this.dragElementClue) {
        return;
      }
      var innerText = this.startColumn >= 0 ? element.children[this.columns[this.startColumn].index].innerText : element.innerText;
      this.dragElementClue.visible = true;
      this.dragElementClue.top = event.pageY + 10;
      this.dragElementClue.left = event.pageX;
      this.dragElementClue.innerText = innerText;
      this.dragElementClue.status = invalidIndex || !targetElement ? "cancel" : "plus";
    };
    CommonDragLogic3.prototype.updateDropElementClue = function(event, element, targetElement, invalidIndex) {
      if (!this.dropElementClue) {
        return;
      }
      if (invalidIndex || !targetElement) {
        this.dropElementClue.visible = false;
        return;
      }
      var rect = targetElement.getBoundingClientRect();
      var groupElement = targetElement.closest(".k-grouping-header");
      var rectParent = (groupElement || targetElement).getBoundingClientRect();
      var left = rect.left + event.pageX - event.clientX - 6;
      if (!this.isTargetGroupingContainer(event) && (this.currentColumn > this.startColumn || this.currentGroup > this.startGroup && this.startGroup !== -1)) {
        left += rect.width;
      }
      var top = rectParent.top + event.pageY - event.clientY;
      this.dropElementClue.visible = true;
      this.dropElementClue.top = top;
      this.dropElementClue.left = left;
      this.dropElementClue.height = this.currentColumn >= 0 ? element.clientHeight : rectParent.height;
    };
    return CommonDragLogic3;
  }()
);

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/DragClue.js
var allVue40 = vue_runtime_esm_bundler_exports;
var gh38 = allVue40.h;
var isV340 = allVue40.version && allVue40.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/DropClue.js
var allVue41 = vue_runtime_esm_bundler_exports;
var gh39 = allVue41.h;
var isV341 = allVue41.version && allVue41.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerNumericButtons.js
var allVue42 = vue_runtime_esm_bundler_exports;
var gh40 = allVue42.h;
var isV342 = allVue42.version && allVue42.version[0] === "3";
var PagerNumericButtonsVue2 = {
  name: "KendoNumericButtons",
  props: {
    buttonCount: Number,
    totalPages: Number,
    currentPage: Number,
    size: String,
    responsiveSize: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  computed: {
    start: {
      get: function get() {
        var page = this.$props.currentPage;
        var buttonCount = this.$props.buttonCount;
        if (page > buttonCount) {
          var reminder = page % buttonCount;
          return reminder === 0 ? page - buttonCount + 1 : page - reminder + 1;
        }
        return 1;
      }
    },
    end: {
      get: function get2() {
        return Math.min(this.start + this.$props.buttonCount - 1, this.$props.totalPages);
      }
    },
    dropdownClass: function dropdownClass() {
      var _a4;
      var size = this.$props.size;
      return _a4 = {
        "k-picker": true,
        "k-dropdown-list": true,
        "k-dropdown": true,
        "k-rounded-md": true,
        "k-picker-solid": true
      }, _a4["k-picker-".concat(kendoThemeMaps2.sizeMap[size] || size)] = size, _a4;
    }
  },
  methods: {
    click: function click(e, page) {
      e.preventDefault();
      this.$emit("pagechange", page, e);
    },
    ddlChange: function ddlChange(event) {
      this.$emit("pagechange", parseInt(event.target.value, 10), event);
    }
  },
  // @ts-ignore
  setup: !isV342 ? void 0 : function() {
    var v3 = !!isV342;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render8(createElement) {
    var _this = this;
    var h = gh40 || createElement;
    var localizationService = provideLocalizationService(this);
    var pagerSmallPageSelectoLabel = this.$props.messagesMap ? this.$props.messagesMap(pagerSmallPageSelectorAriaLabel) : {
      messageKey: pagerSmallPageSelectorAriaLabel,
      defaultMessage: messages[pagerSmallPageSelectorAriaLabel]
    };
    var prevDots = this.start > 1 && // @ts-ignore function children
    h(Button, {
      fillMode: "flat",
      attrs: this.v3 ? void 0 : {
        fillMode: "flat",
        themeColor: "primary",
        size: this.$props.size,
        rounded: null
      },
      themeColor: "primary",
      size: this.$props.size,
      rounded: null,
      onClick: function onClick2(e) {
        return _this.click(e, _this.start - 1);
      },
      on: this.v3 ? void 0 : {
        "click": function onClick2(e) {
          return _this.click(e, _this.start - 1);
        }
      }
    }, this.v3 ? function() {
      return ["..."];
    } : ["..."]);
    var postDots = this.end < this.$props.totalPages && // @ts-ignore function children
    h(Button, {
      fillMode: "flat",
      attrs: this.v3 ? void 0 : {
        fillMode: "flat",
        themeColor: "primary",
        size: this.$props.size,
        rounded: null
      },
      themeColor: "primary",
      size: this.$props.size,
      rounded: null,
      onClick: function onClick2(e) {
        return _this.click(e, _this.end + 1);
      },
      on: this.v3 ? void 0 : {
        "click": function onClick2(e) {
          return _this.click(e, _this.end + 1);
        }
      }
    }, this.v3 ? function() {
      return ["..."];
    } : ["..."]);
    var buttons = [];
    for (var idx = this.start; idx <= this.end; idx++) {
      buttons.push(idx);
    }
    var numerics = buttons.map(function(page) {
      var _this2 = this;
      return (
        // @ts-ignore function children
        h(Button, {
          key: page,
          "class": "k-link",
          onClick: function onClick2(e) {
            return _this2.click(e, page);
          },
          on: this.v3 ? void 0 : {
            "click": function onClick2(e) {
              return _this2.click(e, page);
            }
          },
          selected: this.$props.currentPage === page,
          attrs: this.v3 ? void 0 : {
            selected: this.$props.currentPage === page,
            fillMode: "flat",
            themeColor: "primary",
            size: this.$props.size,
            rounded: null,
            role: "button",
            title: "Page " + page,
            "aria-current": this.$props.currentPage === page ? true : void 0
          },
          fillMode: "flat",
          themeColor: "primary",
          size: this.$props.size,
          rounded: null,
          role: "button",
          title: "Page " + page,
          "aria-current": this.$props.currentPage === page ? true : void 0
        }, this.v3 ? function() {
          return [page];
        } : [page])
      );
    }, this);
    var dropdown = function dropdown2(currentButtons) {
      return h("select", {
        style: {
          width: "5em",
          margin: "0px 1em",
          display: this.$props.responsiveSize === "small" ? "inline-flex" : "none"
        },
        "class": this.dropdownClass,
        ariaLabel: localizationService.toLanguageString(pagerSmallPageSelectoLabel.messageKey, pagerSmallPageSelectoLabel.defaultMessage),
        attrs: this.v3 ? void 0 : {
          ariaLabel: localizationService.toLanguageString(pagerSmallPageSelectoLabel.messageKey, pagerSmallPageSelectoLabel.defaultMessage)
        },
        onChange: this.ddlChange,
        on: this.v3 ? void 0 : {
          "change": this.ddlChange
        }
      }, [currentButtons.map(function(cb) {
        return h("option", {
          value: this.v3 ? cb : null,
          domProps: this.v3 ? void 0 : {
            "value": cb,
            "selected": cb === this.$props.currentPage
          },
          selected: this.v3 ? cb === this.$props.currentPage : null
        }, [cb]);
      }, this)]);
    };
    return h("div", {
      "class": "k-pager-numbers-wrap"
    }, [h("div", {
      "class": "k-pager-numbers",
      style: {
        display: this.$props.responsiveSize !== "small" ? "" : "none"
      }
    }, [prevDots, numerics, postDots]), dropdown.call(this, buttons)]);
  }
};
var PagerNumericButtons = PagerNumericButtonsVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerInput.js
var allVue43 = vue_runtime_esm_bundler_exports;
var gh41 = allVue43.h;
var isV343 = allVue43.version && allVue43.version[0] === "3";
var inject8 = allVue43.inject;
var PagerInputVue2 = {
  name: "KendoPagerInput",
  props: {
    totalPages: Number,
    currentPage: Number,
    messagesMap: Function,
    size: String
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      currentText: void 0
    };
  },
  computed: {
    computedValue: function computedValue() {
      return this.$props.currentPage !== void 0 ? this.$props.currentPage : this.currentText;
    }
  },
  methods: {
    changeHangler: function changeHangler(e) {
      this.currentText = e.target.value;
      if (this.currentText) {
        this.$emit("pagechange", this.currentText, e);
      }
    }
  },
  // @ts-ignore
  setup: !isV343 ? void 0 : function() {
    var v3 = !!isV343;
    var kendoIntlService = inject8("kendoIntlService", {});
    var kendoLocalizationService = inject8("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render9(createElement) {
    var h = gh41 || createElement;
    var intlService = provideIntlService(this);
    var localizationService = provideLocalizationService(this);
    var pageMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerPage) : {
      messageKey: pagerPage,
      defaultMessage: messages[pagerPage]
    };
    var ofMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerOf) : {
      messageKey: pagerOf,
      defaultMessage: messages[pagerOf]
    };
    var totalPagesMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerTotalPages) : {
      messageKey: pagerTotalPages,
      defaultMessage: messages[pagerTotalPages]
    };
    var pageInputAriaLabel = this.$props.messagesMap ? this.$props.messagesMap(pagerPageInputAriaLabel) : {
      messageKey: pagerPageInputAriaLabel,
      defaultMessage: messages[pagerPageInputAriaLabel]
    };
    return h("span", {
      "class": "k-pager-input"
    }, [h("span", [localizationService.toLanguageString(pageMessage.messageKey, pageMessage.defaultMessage)]), h(NumericTextBox, {
      min: 1,
      attrs: this.v3 ? void 0 : {
        min: 1,
        value: this.computedValue,
        spinners: false,
        size: this.$props.size,
        ariaLabel: localizationService.toLanguageString(pageInputAriaLabel.messageKey, pageInputAriaLabel.defaultMessage)
      },
      value: this.computedValue,
      onChange: this.changeHangler,
      on: this.v3 ? void 0 : {
        "change": this.changeHangler
      },
      spinners: false,
      size: this.$props.size,
      ariaLabel: localizationService.toLanguageString(pageInputAriaLabel.messageKey, pageInputAriaLabel.defaultMessage)
    }), h("span", ["".concat(localizationService.toLanguageString(ofMessage.messageKey, ofMessage.defaultMessage), " ").concat(intlService.format(localizationService.toLanguageString(totalPagesMessage.messageKey, totalPagesMessage.defaultMessage), [this.$props.totalPages]))])]);
  }
};
var PagerInput = PagerInputVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerPageSizes.js
var allVue44 = vue_runtime_esm_bundler_exports;
var gh42 = allVue44.h;
var isV344 = allVue44.version && allVue44.version[0] === "3";
var inject9 = allVue44.inject;
var PagerPageSizesVue2 = {
  name: "KendoPagerPageSizes",
  props: {
    value: [String, Number],
    pageSize: Number,
    pageSizes: Array,
    size: String,
    messagesMap: Function
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    pageSizeChange: function pageSizeChange(e) {
      this.$emit("pagechange", {
        skip: 0,
        take: parseInt(e.target.value, 10)
      }, e);
    }
  },
  // @ts-ignore
  setup: !isV344 ? void 0 : function() {
    var v3 = !!isV344;
    var kendoLocalizationService = inject9("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render10(createElement) {
    var h = gh42 || createElement;
    var _a4 = this.$props, value = _a4.value, pageSizes = _a4.pageSizes, pageSize = _a4.pageSize;
    var ls2 = provideLocalizationService(this);
    var sizes = pageSizes.slice();
    if (value === void 0 && sizes.filter(function(s) {
      return s === pageSize;
    }).length === 0) {
      sizes.unshift(pageSize);
    }
    var itemPerPageMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerItemPerPage) : {
      messageKey: pagerItemPerPage,
      defaultMessage: messages[pagerItemPerPage]
    };
    var pageSelectionMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerPageSelection) : {
      messageKey: pagerPageSelection,
      defaultMessage: messages[pagerPageSelection]
    };
    return h("span", {
      "class": "k-pager-sizes k-label"
    }, [
      // @ts-ignore function children
      h(DropDownList, {
        value: value !== void 0 ? value : pageSize,
        attrs: this.v3 ? void 0 : {
          value: value !== void 0 ? value : pageSize,
          dataItems: sizes,
          size: this.$props.size,
          ariaLabel: ls2.toLanguageString(pageSelectionMessage.messageKey, pageSelectionMessage.defaultMessage)
        },
        dataItems: sizes,
        size: this.$props.size,
        ariaLabel: ls2.toLanguageString(pageSelectionMessage.messageKey, pageSelectionMessage.defaultMessage),
        onChange: this.pageSizeChange,
        on: this.v3 ? void 0 : {
          "change": this.pageSizeChange
        }
      }),
      ls2.toLanguageString(itemPerPageMessage.messageKey, itemPerPageMessage.defaultMessage)
    ]);
  }
};
var PagerPageSizes = PagerPageSizesVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerInfo.js
var allVue45 = vue_runtime_esm_bundler_exports;
var gh43 = allVue45.h;
var isV345 = allVue45.version && allVue45.version[0] === "3";
var inject10 = allVue45.inject;
var PagerInfoVue2 = {
  name: "KendoPagerInfo",
  props: {
    totalPages: Number,
    currentPage: Number,
    skip: Number,
    messagesMap: Function
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV345 ? void 0 : function() {
    var v3 = !!isV345;
    var kendoIntlService = inject10("kendoIntlService", {});
    var kendoLocalizationService = inject10("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render11(createElement) {
    var h = gh43 || createElement;
    var intlService = provideIntlService(this);
    var localizationService = provideLocalizationService(this);
    var infoMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerInfo) : {
      messageKey: pagerInfo,
      defaultMessage: messages[pagerInfo]
    };
    return h("span", {
      "class": "k-pager-info"
    }, [intlService.format(localizationService.toLanguageString(infoMessage.messageKey, infoMessage.defaultMessage), [Math.min(this.$props.skip + 1, this.$props.totalPages), Math.min(this.$props.skip + this.$props.currentPage, this.$props.totalPages), this.$props.totalPages])]);
  }
};
var PagerInfo = PagerInfoVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerNavigationButton.js
var allVue46 = vue_runtime_esm_bundler_exports;
var gh44 = allVue46.h;
var isV346 = allVue46.version && allVue46.version[0] === "3";
var PagerNavigationButtonVue2 = {
  name: "KendoPagerNavigationButton",
  props: {
    title: String,
    disabled: Boolean,
    icon: String,
    svgIcon: Object,
    page: Number,
    size: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV346 ? void 0 : function() {
    var v3 = !!isV346;
    return {
      v3
    };
  },
  methods: {
    changePage: function changePage(e) {
      e.preventDefault();
      this.$emit("pagechange", this.$props.page, e);
    }
  },
  // @ts-ignore
  render: function render12(createElement) {
    var h = gh44 || createElement;
    return h(Button, {
      fillMode: "flat",
      attrs: this.v3 ? void 0 : {
        fillMode: "flat",
        themeColor: "base",
        size: this.$props.size,
        rounded: null,
        ariaLabel: this.title,
        icon: getIconName(this.icon),
        svgIcon: this.svgIcon,
        title: this.title,
        disabled: this.disabled,
        role: "button"
      },
      themeColor: "base",
      size: this.$props.size,
      rounded: null,
      "class": "k-pager-nav",
      ariaLabel: this.title,
      icon: getIconName(this.icon),
      svgIcon: this.svgIcon,
      title: this.title,
      disabled: this.disabled,
      role: "button",
      onClick: this.changePage,
      on: this.v3 ? void 0 : {
        "click": this.changePage
      }
    });
  }
};
var PagerNavigationButton = PagerNavigationButtonVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/Pager.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var allVue47 = vue_runtime_esm_bundler_exports;
var gh45 = allVue47.h;
var isV347 = allVue47.version && allVue47.version[0] === "3";
var inject11 = allVue47.inject;
var NUMBERS_CLASS = "k-pager-numbers-wrap";
var SIZES_CLASS = "k-pager-sizes";
var INFO_CLASS = "k-pager-info";
var PagerVue2 = {
  name: "KendoPager",
  props: {
    pageSizeValue: [String, Number],
    total: Number,
    skip: Number,
    take: Number,
    pageSize: Number,
    settings: [Object, Boolean],
    buttonCount: {
      type: Number,
      default: 10
    },
    info: {
      type: Boolean,
      default: true
    },
    type: {
      type: String,
      default: "numeric",
      validator: function validator2(value) {
        return ["numeric", "input"].includes(value);
      }
    },
    pageSizes: {
      type: Array
    },
    previousNext: Boolean,
    messagesMap: Function,
    responsive: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator3(value) {
        return [null, "small", "medium", "large"].includes(value);
      }
    },
    pagerRender: [String, Function, Object],
    width: [Number, String],
    ariaControls: {
      type: String,
      default: void 0
    }
  },
  data: function data2() {
    return {
      currentRtl: false,
      itemsToFit: void 0,
      itemsWidths: void 0
    };
  },
  mounted: function mounted3() {
    if (canUseDOM2 && window.ResizeObserver) {
      this.observerResize = new window.ResizeObserver(this.onWindowResize);
      this.observerResize.observe(this.$el);
    }
    this.currentRtl = isRtl2(this.$el);
    var childrenWidths = this.collectPagerChildrenWidths();
    this.itemsWidths = childrenWidths;
    this.onWindowResize();
  },
  destroyed: !!isV347 ? void 0 : function() {
    var _a4;
    if (((_a4 = this.document) === null || _a4 === void 0 ? void 0 : _a4.body) && this.observerResize) {
      this.observerResize.disconnect();
    }
  },
  // @ts-ignore
  unmounted: function unmounted3() {
    var _a4;
    if (((_a4 = this.document) === null || _a4 === void 0 ? void 0 : _a4.body) && this.observerResize) {
      this.observerResize.disconnect();
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  computed: {
    wrapperClass: {
      get: function get3() {
        var _a4;
        var size = this.$props.size;
        return _a4 = {
          "k-pager": true
        }, _a4["k-pager-".concat(kendoThemeMaps2.sizeMap[size] || size)] = size, _a4;
      }
    },
    totalPages: {
      get: function get4() {
        return Math.ceil((this.$props.total || 0) / this.currentTake);
      }
    },
    currentPage: {
      get: function get5() {
        return Math.floor((this.$props.skip || 0) / this.currentTake) + 1;
      }
    },
    currentTake: {
      get: function get6() {
        return this.$props.take || this.$props.pageSize;
      }
    },
    showPageSizes: function showPageSizes() {
      return this.itemsToFit.includes(this.pagerSizesIndex);
    },
    showInfo: function showInfo() {
      return this.itemsToFit.includes(this.pagerInfoIndex);
    }
  },
  methods: {
    changePage: function changePage2(page, e) {
      if (page > 0 && page <= this.totalPages) {
        this.$emit("pagechange", {
          skip: (page - 1) * this.currentTake,
          take: this.currentTake
        }, e);
      }
    },
    triggerPageChange: function triggerPageChange(state, event) {
      var pagesizechange = hasListener2.call(this, "pagesizechange");
      if (pagesizechange) {
        this.$emit("pagesizechange", state, event);
      } else {
        this.$emit("pagechange", state, event);
      }
    },
    onWindowResize: function onWindowResize() {
      var element = this.$el;
      if (!element || !this.$props.responsive || this.$props.settings.responsive === false) {
        return;
      }
      this.itemsToFit = this.fitChildrenInParent(element, this.itemsWidths || []);
    },
    transformDimension: function transformDimension(initialValue) {
      return typeof initialValue === "string" ? initialValue.endsWith("px") ? initialValue : initialValue + "px" : initialValue + "px";
    },
    collectPagerChildrenWidths: function collectPagerChildrenWidths() {
      var _a4;
      var arrayChildren = Array.from(((_a4 = this.$el) === null || _a4 === void 0 ? void 0 : _a4.children) || []);
      var widths = arrayChildren.map(function(item) {
        if (item instanceof HTMLElement) {
          return {
            class: item.className,
            width: item.offsetWidth
          };
        }
        return 0;
      });
      return widths;
    },
    fitChildrenInParent: function fitChildrenInParent(parent, childrenWidths) {
      var fitItems = [];
      var elementsWidth = 0;
      var updatedWidths = childrenWidths;
      var parentWidth = parent.offsetWidth;
      var buffer = 20;
      for (var index = 0; index < childrenWidths.length; index++) {
        var padding = index === 0 ? 8 : 0;
        var parentChild = parent.children[index];
        var currentElementWidth = index === 0 ? childrenWidths[index].width : (parentChild === null || parentChild === void 0 ? void 0 : parentChild.offsetWidth) || childrenWidths[index].width;
        elementsWidth += currentElementWidth;
        if (elementsWidth < parentWidth - buffer - padding) {
          fitItems.push(childrenWidths[index].class);
        } else {
          updatedWidths[index].width = currentElementWidth;
        }
      }
      this.itemsWidths = updatedWidths;
      return fitItems;
    }
  },
  // @ts-ignore
  setup: !isV347 ? void 0 : function() {
    var v3 = !!isV347;
    var kendoIntlService = inject11("kendoIntlService", {});
    var kendoLocalizationService = inject11("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore 
  render: function render13(createElement) {
    var _a4, _b2;
    var h = gh45 || createElement;
    var _c2 = this.$props, skip2 = _c2.skip, take = _c2.take, total2 = _c2.total, pageSizes = _c2.pageSizes, buttonCount = _c2.buttonCount, messagesMap = _c2.messagesMap, info = _c2.info, type = _c2.type, previousNext = _c2.previousNext, pageSizeValue = _c2.pageSizeValue;
    var settings = __assign5({
      pageSizes,
      buttonCount,
      info,
      previousNext,
      type,
      skip: skip2,
      take,
      total: total2,
      messagesMap,
      pageSizeValue
    }, this.$props.settings);
    var pagerRender = this.$props.pagerRender || this.$props.settings.pagerRender;
    var pagerRenderTemplate = pagerRender ? templateRendering2.call(this, pagerRender, getListeners2.call(this)) : null;
    var localizationService = provideLocalizationService(this);
    var firstPageMessage = messagesMap ? messagesMap(pagerFirstPage) : {
      messageKey: pagerFirstPage,
      defaultMessage: messages[pagerFirstPage]
    };
    var previousPageMessage = messagesMap ? messagesMap(pagerPreviousPage) : {
      messageKey: pagerPreviousPage,
      defaultMessage: messages[pagerPreviousPage]
    };
    var nextPageMessage = messagesMap ? messagesMap(pagerNextPage) : {
      messageKey: pagerNextPage,
      defaultMessage: messages[pagerNextPage]
    };
    var lastPageMessage = messagesMap ? messagesMap(pagerLastPage) : {
      messageKey: pagerLastPage,
      defaultMessage: messages[pagerLastPage]
    };
    var changer = settings.type === "numeric" ? (
      // @ts-ignore
      h(PagerNumericButtons, {
        responsiveSize: this.responsive && this.itemsToFit && this.itemsToFit.length < 2 ? "small" : "large",
        attrs: this.v3 ? void 0 : {
          responsiveSize: this.responsive && this.itemsToFit && this.itemsToFit.length < 2 ? "small" : "large",
          size: this.size,
          buttonCount: settings.buttonCount || 0,
          totalPages: this.totalPages,
          currentPage: this.currentPage
        },
        size: this.size,
        buttonCount: settings.buttonCount || 0,
        totalPages: this.totalPages,
        currentPage: this.currentPage,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      })
    ) : (
      // @ts-ignore
      h(PagerInput, {
        currentPage: this.currentPage,
        attrs: this.v3 ? void 0 : {
          currentPage: this.currentPage,
          totalPages: this.totalPages,
          messagesMap,
          size: this.size
        },
        totalPages: this.totalPages,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        },
        messagesMap,
        size: this.size
      })
    );
    var first, prev, next, last;
    if (settings.previousNext) {
      first = // @ts-ignore function children
      h(PagerNavigationButton, {
        "class": "k-pager-first",
        size: this.size,
        attrs: this.v3 ? void 0 : {
          size: this.size,
          disabled: this.currentPage === 1,
          page: 1,
          title: localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage),
          icon: this.currentRtl ? "caret-alt-to-right" : "caret-alt-to-left",
          svgIcon: this.currentRtl ? caretAltToRightIcon : caretAltToLeftIcon
        },
        disabled: this.currentPage === 1,
        page: 1,
        title: localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage),
        icon: this.currentRtl ? "caret-alt-to-right" : "caret-alt-to-left",
        svgIcon: this.currentRtl ? caretAltToRightIcon : caretAltToLeftIcon,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      });
      prev = // @ts-ignore function children
      h(PagerNavigationButton, {
        disabled: this.currentPage === 1,
        attrs: this.v3 ? void 0 : {
          disabled: this.currentPage === 1,
          size: this.size,
          page: this.currentPage - 1,
          title: localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage),
          icon: this.currentRtl ? "caret-alt-right" : "caret-alt-left",
          svgIcon: this.currentRtl ? caretAltRightIcon : caretAltLeftIcon
        },
        size: this.size,
        page: this.currentPage - 1,
        title: localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage),
        icon: this.currentRtl ? "caret-alt-right" : "caret-alt-left",
        svgIcon: this.currentRtl ? caretAltRightIcon : caretAltLeftIcon,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      });
      next = // @ts-ignore function children
      h(PagerNavigationButton, {
        disabled: this.currentPage === this.totalPages,
        attrs: this.v3 ? void 0 : {
          disabled: this.currentPage === this.totalPages,
          size: this.size,
          page: this.currentPage + 1,
          title: localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage),
          icon: this.currentRtl ? "caret-alt-left" : "caret-alt-right",
          svgIcon: this.currentRtl ? caretAltLeftIcon : caretAltRightIcon
        },
        size: this.size,
        page: this.currentPage + 1,
        title: localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage),
        icon: this.currentRtl ? "caret-alt-left" : "caret-alt-right",
        svgIcon: this.currentRtl ? caretAltLeftIcon : caretAltRightIcon,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      });
      last = // @ts-ignore function children
      h(PagerNavigationButton, {
        "class": "k-pager-last",
        disabled: this.currentPage === this.totalPages,
        attrs: this.v3 ? void 0 : {
          disabled: this.currentPage === this.totalPages,
          size: this.size,
          page: this.totalPages,
          title: localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage),
          icon: this.currentRtl ? "caret-alt-to-left" : "caret-alt-to-right",
          svgIcon: this.currentRtl ? caretAltToLeftIcon : caretAltToRightIcon
        },
        size: this.size,
        page: this.totalPages,
        title: localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage),
        icon: this.currentRtl ? "caret-alt-to-left" : "caret-alt-to-right",
        svgIcon: this.currentRtl ? caretAltToLeftIcon : caretAltToRightIcon,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      });
    }
    var renderPageSizes = settings.pageSizes && // @ts-ignore function children
    h(PagerPageSizes, {
      onPagechange: this.triggerPageChange,
      on: this.v3 ? void 0 : {
        "pagechange": this.triggerPageChange
      },
      pageSize: this.currentTake,
      attrs: this.v3 ? void 0 : {
        pageSize: this.currentTake,
        pageSizes: settings.pageSizes,
        value: settings.pageSizeValue,
        messagesMap,
        size: this.size
      },
      pageSizes: settings.pageSizes,
      value: settings.pageSizeValue,
      messagesMap,
      size: this.size
    });
    var infoElement = settings.info && // @ts-ignore function children
    h(PagerInfo, {
      totalPages: this.$props.total,
      attrs: this.v3 ? void 0 : {
        totalPages: this.$props.total,
        skip: this.$props.skip,
        currentPage: this.currentTake,
        messagesMap
      },
      skip: this.$props.skip,
      currentPage: this.currentTake,
      messagesMap
    });
    var pagerContent = getTemplate2.call(this, {
      h,
      template: pagerRenderTemplate,
      additionalProps: __assign5(__assign5({}, this.$props), {
        current: this.currentPage
      }),
      additionalListeners: {
        pagechange: this.triggerPageChange
      }
    });
    var width = this.transformDimension(this.$props.width);
    return pagerRender ? h("div", {
      "class": this.wrapperClass,
      style: {
        width
      },
      role: "application",
      attrs: this.v3 ? void 0 : {
        role: "application",
        "aria-roledescription": "pager"
      },
      "aria-roledescription": "pager"
    }, [pagerContent]) : h("div", {
      "class": this.wrapperClass,
      style: {
        width
      },
      role: "application",
      attrs: this.v3 ? void 0 : {
        role: "application",
        "aria-roledescription": "pager",
        "aria-keyshortcuts": "Enter ArrowRight ArrowLeft",
        "aria-label": "Page navigation, page " + this.currentPage + " of " + this.totalPages,
        "aria-controls": this.$props.ariaControls
      },
      "aria-roledescription": "pager",
      "aria-keyshortcuts": "Enter ArrowRight ArrowLeft",
      "aria-label": "Page navigation, page " + this.currentPage + " of " + this.totalPages,
      "aria-controls": this.$props.ariaControls
    }, [h("div", {
      "class": NUMBERS_CLASS
    }, [first, prev, changer, next, last]), !(this.responsive && this.itemsToFit && !((_a4 = this.itemsToFit) === null || _a4 === void 0 ? void 0 : _a4.find(function(it) {
      return it.indexOf(SIZES_CLASS) !== -1;
    }))) && renderPageSizes, !(this.responsive && this.itemsToFit && !((_b2 = this.itemsToFit) === null || _b2 === void 0 ? void 0 : _b2.find(function(it) {
      return it.indexOf(INFO_CLASS) !== -1;
    }))) && infoElement]);
  }
};
var Pager = PagerVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/GridPagerSettings.js
var normalizeSettings = function(_a4) {
  var _b2 = _a4.buttonCount, buttonCount = _b2 === void 0 ? 10 : _b2, _c2 = _a4.info, info = _c2 === void 0 ? true : _c2, _d = _a4.type, type = _d === void 0 ? "numeric" : _d, _e = _a4.pageSizes, pageSizes = _e === void 0 ? false : _e, _f = _a4.previousNext, previousNext = _f === void 0 ? true : _f, _g = _a4.responsive, responsive = _g === void 0 ? true : _g, _h = _a4.pagerRender, pagerRender = _h === void 0 ? void 0 : _h, _j = _a4.pageSizeValue, pageSizeValue = _j === void 0 ? void 0 : _j;
  return {
    buttonCount,
    info,
    pageSizes: pageSizes === true ? [5, 10, 20] : pageSizes,
    previousNext,
    type,
    responsive,
    pagerRender,
    pageSizeValue
  };
};
var normalize2 = function(settings) {
  return normalizeSettings(settings === true ? {} : settings);
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/navigation/TableKeyboardNavigation.js
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue48 = vue_runtime_esm_bundler_exports;
var gh46 = allVue48.h;
var isV348 = allVue48.version && allVue48.version[0] === "3";
var ref2 = allVue48.ref;
var provide = allVue48.provide;
var TableKeyboardNavigationProviderVue2 = {
  name: "KendoTableKeyboardNavigationProvider",
  props: {
    navigatable: {
      type: Boolean,
      default: false
    },
    id: String
  },
  data: function data3() {
    return {
      scope: void 0,
      kbContext: void 0,
      navigation: void 0
    };
  },
  // watch: {
  //     language: function (this: TableKeyboardNavigationProviderAll, newLanguage: string) {
  //         this.$data.kendoLocalizationService.language = newLanguage ;
  //     }
  // },
  // @ts-ignore
  setup: !isV348 ? void 0 : function() {
    var v3 = !!isV348;
    return {
      v3
    };
  },
  provide: function provide2() {
    return {
      getKeyboardNavigationAttributes: this.getKeyboardNavigationAttributes,
      onNavMount: this.onComponentDidMount,
      onGetSnapshotBeforeUpdate: this.onGetSnapshotBeforeUpdate,
      onComponentDidUpdate: this.onComponentDidUpdate,
      onNavFocus: this.onFocus,
      onNavKeyDown: this.onKeyDown,
      generateMatrix: this.generateMatrix,
      kbContext: this.kbContext,
      navigation: this.navigation
    };
  },
  created: function created3() {
    var _a4 = this.$props, navigatable = _a4.navigatable, id = _a4.id;
    if (navigatable) {
      this.kbContext = {
        activeId: "",
        level: 0
      };
      this.navigation = {
        activeElementIsFocused: false,
        prevNavigationIndexes: void 0,
        idPrefix: id || guid2(),
        navigationMatrix: [],
        lastHeaderIndex: -1
      };
    }
  },
  methods: {
    getKeyboardNavigationAttributes: function getKeyboardNavigationAttributes(elementId) {
      var _a4;
      if (!elementId || this.$props.navigatable === false) {
        return {};
      }
      return _a4 = {
        tabIndex: this.kbContext.activeId && this.kbContext.activeId === elementId ? 0 : -1
      }, _a4[KEYBOARD_NAV_DATA_LEVEL] = this.kbContext.level, _a4[KEYBOARD_NAV_DATA_ID] = elementId, _a4;
    },
    onComponentDidMount: function onComponentDidMount(options) {
      var _a4 = options.scope, scope = _a4 === void 0 ? this.scope : _a4;
      if (this.kbContext && this.navigation && scope) {
        this.scope = scope;
        this.generateMatrix(options);
        var firstId = this.navigation.navigationMatrix[0][0];
        var firstIdElement = tableKeyboardNavigationTools.getActiveElement(scope, firstId);
        if (firstId && firstIdElement) {
          this.kbContext.activeId = firstId;
          firstIdElement.setAttribute("tabIndex", "0");
        }
      }
    },
    onGetSnapshotBeforeUpdate: function onGetSnapshotBeforeUpdate(options) {
      var _a4 = options.kbContext, kbContext = _a4 === void 0 ? this.kbContext : _a4, _b2 = options.navigation, navigation = _b2 === void 0 ? this.navigation : _b2, document2 = options.document;
      if (kbContext && navigation && document2) {
        var activeElement = document2.activeElement;
        var activeId = tableKeyboardNavigationTools.getNavigatableId(activeElement);
        if (activeId && activeId === kbContext.activeId) {
          navigation.activeElementIsFocused = true;
        }
      }
    },
    onComponentDidUpdate: function onComponentDidUpdate(options) {
      var scope = options.scope;
      this.generateMatrix(options);
      if (this.kbContext && this.navigation && scope) {
        var activeElement = tableKeyboardNavigationTools.getActiveElement(scope, this.kbContext.activeId);
        if (!activeElement) {
          var firstId = this.navigation.navigationMatrix[0][0];
          var firstIdElement = tableKeyboardNavigationTools.getActiveElement(scope, firstId);
          if (firstId && firstIdElement) {
            this.kbContext.activeId = firstId;
            firstIdElement.setAttribute("tabIndex", "0");
            if (this.navigation.activeElementIsFocused) {
              firstIdElement.focus();
            }
          }
        }
        this.navigation.activeElementIsFocused = false;
      }
    },
    onFocus: function onFocus(event) {
      var kbContext = this.kbContext;
      if (event.defaultPrevented) {
        return;
      }
      if (!kbContext) {
        return;
      }
      var focusedElement = event.target;
      var activeId = tableKeyboardNavigationTools.getNavigatableId(focusedElement);
      if (activeId && activeId !== kbContext.activeId) {
        var scope = tableKeyboardNavigationTools.getClosestScope(focusedElement);
        if (!scope) {
          return;
        }
        var prevElement = tableKeyboardNavigationTools.getActiveElement(scope, kbContext.activeId);
        if (prevElement) {
          prevElement.setAttribute("tabIndex", "-1");
        }
        focusedElement.setAttribute("tabIndex", "0");
        kbContext.activeId = activeId;
      }
    },
    onKeyDown: function onKeyDown3(event, options) {
      var _a4 = options.kbContext, kbContext = _a4 === void 0 ? this.kbContext : _a4, _b2 = options.navigation, navigation = _b2 === void 0 ? this.navigation : _b2, onNavigationAction2 = options.onNavigationAction;
      if (event.defaultPrevented) {
        return;
      }
      if (!kbContext || !navigation) {
        return;
      }
      if (event.keyCode === Keys2.esc) {
        var elementForFocus = tableKeyboardNavigationTools.getClosestNavigatableElement(event.target);
        tableKeyboardNavigationTools.focusElement({
          elementForFocus,
          event,
          kbContext
        });
        return;
      }
      var element = event.target;
      var elementId = tableKeyboardNavigationTools.getNavigatableId(element);
      var dataLevel = tableKeyboardNavigationTools.getNavigatableLevel(element);
      var scope = tableKeyboardNavigationTools.getClosestScope(element);
      var matrix = navigation.navigationMatrix;
      if (dataLevel !== void 0 && scope) {
        if (event.keyCode === Keys2.enter) {
          var navigatableElement = tableKeyboardNavigationTools.getNavigatableElement(element, {
            level: dataLevel + 1
          });
          if (navigatableElement) {
            tableKeyboardNavigationTools.focusElement({
              elementForFocus: navigatableElement,
              event,
              kbContext,
              prevElement: element
            });
            return;
          } else {
            var elementForFocus = tableKeyboardNavigationTools.getFocusableElements(element)[0];
            tableKeyboardNavigationTools.focusElement({
              elementForFocus,
              event,
              kbContext,
              prevElement: element
            });
            return;
          }
        }
        if (event.keyCode === Keys2.up || event.keyCode === Keys2.down || event.keyCode === Keys2.left || event.keyCode === Keys2.right) {
          var isReverse = event.keyCode === Keys2.up || event.keyCode === Keys2.left;
          var isVertical = event.keyCode === Keys2.up || event.keyCode === Keys2.down;
          var currentIdIndexes = void 0;
          if (navigation && navigation.prevNavigationIndexes) {
            var _c2 = navigation.prevNavigationIndexes, rowIndex = _c2[0], cellIndex = _c2[1];
            if (matrix[rowIndex][cellIndex] === elementId) {
              currentIdIndexes = navigation.prevNavigationIndexes;
            } else {
              currentIdIndexes = findId(matrix, elementId);
            }
          } else {
            currentIdIndexes = findId(matrix, elementId);
          }
          if (currentIdIndexes) {
            var rowIndex = currentIdIndexes[0], cellIndex = currentIdIndexes[1];
            var _d = isVertical ? findNextIdByRowIndex(rowIndex, cellIndex, elementId, matrix, isReverse) : findNextIdByCellIndex(rowIndex, cellIndex, elementId, matrix, isReverse), idForFocus = _d[0], currentIndexes = _d[1];
            if (idForFocus) {
              var elementForFocus = tableKeyboardNavigationTools.getActiveElement(scope, idForFocus);
              tableKeyboardNavigationTools.focusElement({
                elementForFocus,
                event,
                kbContext,
                prevElement: element
              });
              navigation.prevNavigationIndexes = currentIndexes;
              if (onNavigationAction2) {
                onNavigationAction2({
                  focusElement: elementForFocus,
                  event
                });
              }
            }
          }
        }
      }
    },
    generateMatrix: function generateMatrix(options) {
      var _a4 = options.navigation, navigation = _a4 === void 0 ? this.navigation : _a4, scope = options.scope;
      if (!navigation || !scope) {
        return;
      }
      var matrix = [];
      var thead = getHeaderElement(scope);
      var tbody = getBodyElement(scope);
      if (!thead || !tbody) {
        return;
      }
      var headerRows = Array.from(thead.children);
      var bodyRows = Array.from(tbody.children);
      __spreadArray4(__spreadArray4([], headerRows, true), bodyRows, true).forEach(function(row, rowIndex) {
        Array.from(row.children).forEach(function(cell) {
          var cellId = getNavigatableId(cell);
          if (!cellId) {
            return;
          }
          var rowSpan = cell.rowSpan || 1;
          var cellSpan = cell.colSpan || 1;
          var cellIndex;
          for (var depth = rowIndex, maxDepth = rowIndex + rowSpan; depth < maxDepth; depth++) {
            if (!matrix[depth]) {
              matrix[depth] = [];
            }
            if (cellIndex === void 0) {
              var freeSlotIndex = matrix[depth].findIndex(function(mi) {
                return !mi;
              });
              cellIndex = freeSlotIndex > -1 ? freeSlotIndex : matrix[depth].length;
            }
            matrix[depth][cellIndex] = cellId || "";
          }
          for (var depth = cellIndex + 1, maxDepth = cellIndex + cellSpan; depth < maxDepth; depth++) {
            matrix[rowIndex][depth] = cellId || "";
          }
        });
      });
      navigation.navigationMatrix = matrix.filter(function(row) {
        return !!row;
      });
      navigation.lastHeaderIndex = headerRows.length - 1;
    }
  },
  /**
   * @hidden
   */
  // @ts-ignore
  render: function render14(createElement) {
    var h = gh46 || createElement;
    var defaultSlot = getDefaultSlots2(this);
    return defaultSlot[0];
  }
};
var TableKeyboardNavigationProvider = TableKeyboardNavigationProviderVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/selection/utils.js
var HAS_RELATIVE_STACKING_CONTEXT = hasRelativeStackingContext();

// node_modules/@progress/kendo-vue-grid/dist/es/GridNav.js
var allVue49 = vue_runtime_esm_bundler_exports;
var gh47 = allVue49.h;
var isV349 = allVue49.version && allVue49.version[0] === "3";
var GridNavVue2 = {
  name: "KendoGridNav",
  props: {
    currentData: Array
  },
  // @ts-ignore
  setup: !isV349 ? void 0 : function() {
    var v3 = !!isV349;
    return {
      v3
    };
  },
  inject: {
    onNavKeyDown: {
      default: noop
    },
    onNavFocus: {
      default: noop
    },
    onNavMount: {
      default: noop
    },
    handleDispatchFocus: {
      default: noop
    },
    kbContext: {
      default: null
    },
    navigation: {
      default: null
    }
  },
  mounted: function mounted4() {
    this.onNavMount({
      scope: this.$el || void 0
    });
  },
  updated: function updated() {
    this.onNavMount({
      scope: this.$el || void 0
    });
  },
  methods: {
    onKeyDown: function onKeyDown4(event) {
      this.onNavKeyDown(event, {
        navigation: this.navigation,
        kbContext: this.kbContext,
        onNavigationAction: this.onNavigationAction
      });
      this.$emit("keydown", {
        dataItems: this.getLeafDataItems(),
        //     mode,
        //     cell,
        componentId: this._gridId,
        selectedField: this.$props.selectedField,
        event
      });
    },
    onFocus: function onFocus2(event) {
      this.onNavFocus(event, {
        kbContext: this.kbContext
      });
    },
    onNavigationAction: function onNavigationAction(options) {
      this.$emit("navigationaction", {
        focusElement: options.focusElement,
        event: options.event
      });
    },
    getLeafDataItems: function getLeafDataItems() {
      return this.$props.currentData.filter(function(item) {
        return item.rowType === "data";
      }).map(function(item) {
        return item.dataItem;
      });
    }
  },
  // @ts-ignore
  render: function render15(createElement) {
    var h = gh47 || createElement;
    var defaultSlots = getDefaultSlots(this);
    return h("div", {
      onKeydown: this.onKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onKeyDown,
        "focusin": this.onFocus
      },
      onFocusin: this.onFocus,
      "data-keyboardnavscope": true,
      attrs: this.v3 ? void 0 : {
        "data-keyboardnavscope": true
      }
    }, [defaultSlots]);
  }
};
var GridNav = GridNavVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/utils/main.js
var STRING = "string";
function getNestedValue2(fieldName, dataItem) {
  var path = fieldName.split(".");
  var data15 = dataItem;
  path.forEach(function(p) {
    data15 = data15 ? data15[p] : void 0;
  });
  return data15;
}
function flatData(output, input, footer, dataIndex, groupDefined, field, level) {
  if (level === void 0) {
    level = 0;
  }
  var maxLevel = level;
  for (var i = 0; i < input.length; i++) {
    if (!groupDefined || input[i].value === void 0 || input[i].items === void 0) {
      output[output.length] = {
        dataIndex: ++dataIndex.index,
        dataItem: input[i],
        rowType: "data",
        level,
        expanded: field === void 0 || getNestedValue2(field, input[i])
      };
      continue;
    }
    maxLevel = Math.max(maxLevel, level + 1);
    var expanded = field === void 0 || getNestedValue2(field, input[i]) === void 0 || getNestedValue2(field, input[i]);
    output[output.length] = {
      dataIndex: -1,
      dataItem: input[i],
      level,
      rowType: "groupHeader",
      expanded
    };
    if (expanded) {
      maxLevel = Math.max(flatData(output, input[i].items, footer, dataIndex, groupDefined, field, level + 1), maxLevel);
    }
    if (footer === "always" || expanded && footer === "visible") {
      output[output.length] = {
        dataIndex: -1,
        dataItem: input[i],
        rowType: "groupFooter",
        level,
        expanded
      };
    }
  }
  return maxLevel;
}
function isRtl3(element) {
  return element && getComputedStyle(element).direction === "rtl" || false;
}
function getIndex2(event, parent) {
  if (!parent || !event || !event.originalEvent || !canUseDOM) {
    return -1;
  }
  var target = document.elementFromPoint(event.clientX, event.originalEvent.clientY);
  while (target && target.parentElement !== parent) {
    target = target.parentElement;
  }
  var children = parent.children;
  for (var i = 0; i < children.length; i++) {
    if (children[i] === target) {
      return i;
    }
  }
  return -1;
}
var eventKeys = [
  "sortChange",
  "filterChange",
  "groupChange",
  "pageChange",
  "expandChange",
  "selectionChange",
  "headerSelectionChange",
  "rowClick",
  "itemChange",
  "dataStateChange",
  "columnResize",
  "columnReorder"
];
var GridColumnDefaults = {
  filterable: true,
  editable: true,
  sortable: true,
  resizable: true,
  reorderable: true,
  groupable: true
};
var deprecatedHandlerMessage = function(oldKey, newKey) {
  return "The ".concat(oldKey, " event handler property is deprecated, ") + "use https://www.telerik.com/kendo-vue-ui/components/grid/api/GridProps/#toc-".concat(newKey, " instead");
};
function checkPropCompatibility(props) {
  for (var index = 0; index < eventKeys.length; index++) {
    var eventKey = eventKeys[index];
    if (props[eventKey] !== void 0) {
      var newKey = "on" + eventKey.charAt(0).toUpperCase() + eventKey.slice(1);
      console.warn(deprecatedHandlerMessage(eventKey, newKey));
    }
  }
}
function nextColumn(columns, current) {
  var currentDepth = columns[current].depth;
  var next = null;
  for (var index = current + 1; index < columns.length; index++) {
    if (columns[index].depth === currentDepth) {
      next = columns[index];
      break;
    }
  }
  return next;
}
function mapColumns(columns) {
  var columnsMap = [[]];
  var maxDepth = 0;
  for (var q = columns.length - 1; q >= 0; q--) {
    maxDepth = Math.max(maxDepth, columns[q].depth);
    columns[q].colSpan = columns[q].colSpan || 1;
    if (columns[q].parentIndex !== -1) {
      columns[columns[q].parentIndex].colSpan = (columns[columns[q].parentIndex].colSpan || 0) + columns[q].colSpan;
    }
  }
  var rowSpan = 1;
  columns.forEach(function(column2, i2) {
    columnsMap[column2.depth] = columnsMap[column2.depth] || [];
    var needKFirst = false;
    if (columnsMap[column2.depth].length === 0) {
      if (rowSpan <= 1) {
        rowSpan = 1 + (column2.children.length > 0 ? 0 : maxDepth - column2.depth);
      } else {
        rowSpan--;
        needKFirst = true;
      }
    }
    column2.rowSpan = 1 + (column2.children.length > 0 ? 0 : maxDepth - column2.depth);
    column2.kFirst = needKFirst;
    column2.index = columnsMap[column2.depth].length;
    columnsMap[column2.depth].push(i2);
  });
  var stickyLeftWidth = new Array(columnsMap.length).fill(0);
  var width = 0;
  columns.forEach(function(column2) {
    if (column2.locked) {
      column2.left = stickyLeftWidth[column2.depth];
      width = column2.width ? parseFloat(column2.width.toString()) : 0;
      if (column2.children.length === 0) {
        for (var i2 = column2.depth; i2 < stickyLeftWidth.length; i2++) {
          stickyLeftWidth[i2] += width;
        }
      } else {
        stickyLeftWidth[column2.depth] += width;
      }
    }
  });
  var stickyRightWidth = new Array(columnsMap.length).fill(0);
  for (var i = columns.length - 1; i >= 0; i--) {
    var column = columns[i];
    if (column.locked) {
      column.right = stickyRightWidth[column.depth];
      width = column.width ? parseFloat(column.width.toString()) : 0;
      if (column.children.length === 0) {
        for (var j = column.depth; j < stickyRightWidth.length; j++) {
          stickyRightWidth[j] += width;
        }
      } else {
        stickyRightWidth[column.depth] += width;
      }
      var next = nextColumn(columns, i);
      column.rightBorder = !(next && next.locked);
    }
  }
  return columnsMap;
}
function readColumns(newColumns, oldColumns, idInfo, depth) {
  if (depth === void 0) {
    depth = 0;
  }
  var columns = [];
  var sameLength = newColumns && newColumns.length ? newColumns.length === oldColumns.length : false;
  if (!newColumns) {
    return [];
  }
  if (newColumns && newColumns.length === void 0) {
    newColumns = [newColumns];
  }
  newColumns.forEach(function(columnProps, index) {
    columnProps = columnProps;
    var oldColumn = sameLength ? oldColumns[index] || null : null;
    var notHiddenChildren = columnProps.children ? columnProps.children.filter(function(column) {
      return !column.hidden;
    }) : columnProps.children;
    var c = readColumns(notHiddenChildren, oldColumn && oldColumn.children || [], idInfo, depth + 1);
    columns.push(Object.assign({ depth }, GridColumnDefaults, c.length ? { cell: function() {
      return null;
    }, filterCell: function() {
      return null;
    } } : {}, oldColumn ? { width: oldColumn.width, orderIndex: oldColumn.orderIndex } : {}, columnProps, {
      id: tableKeyboardNavigationTools.generateNavigatableId("".concat(idInfo.prevId++), idInfo.idPrefix, "column"),
      declarationIndex: columns.length,
      children: c,
      rowSpan: 0,
      colSpan: 0,
      isAccessible: true
    }));
  });
  var comparator = function(a, b) {
    return a.orderIndex === b.orderIndex ? a.declarationIndex - b.declarationIndex : (a.orderIndex || 0) - (b.orderIndex || 0);
  };
  columns.sort(comparator);
  if (depth === 0) {
    var ret_1 = [];
    var flat_1 = function(cols, pIndex) {
      return cols.forEach(function(c) {
        c.parentIndex = pIndex;
        flat_1(c.children, ret_1.push(c) - 1);
      });
    };
    flat_1(columns, -1);
    return ret_1;
  }
  return columns;
}
function autoGenerateColumns(data15, group, expandField, idInfo) {
  var propData = [];
  if (Array.isArray(data15)) {
    propData = data15;
  } else if (data15) {
    propData = data15.data;
  }
  if (!propData.length) {
    console.warn("Kendo Grid autogeneration of columns is only possible if some items are defined when the component is created.");
  }
  var columns = [];
  if (propData.length > 0) {
    var itemForColumnsGen = propData[0];
    if (group) {
      for (var i = 0; i < group.length; i++) {
        itemForColumnsGen = itemForColumnsGen.items && itemForColumnsGen.items[0];
      }
    }
    var fields = Object.getOwnPropertyNames(itemForColumnsGen);
    fields.forEach(function(field) {
      if (field !== expandField && field !== "__ob__") {
        columns.push(Object.assign({
          id: tableKeyboardNavigationTools.generateNavigatableId("".concat(idInfo.prevId++), idInfo.idPrefix, "column"),
          declarationIndex: -1,
          parentIndex: -1,
          depth: 0,
          colSpan: 0,
          rowSpan: 0,
          index: 0,
          left: 0,
          right: 0,
          children: [],
          rightBorder: false,
          ariaColumnIndex: 1,
          isAccessible: true
        }, GridColumnDefaults, { field }));
      }
    });
  }
  return columns;
}
var hasParentFooterCell = function(columns, column) {
  var parent = columns[column.parentIndex];
  while (parent) {
    if (parent.footerCell) {
      return true;
    }
    parent = columns[parent.parentIndex];
  }
  return false;
};
var footerColumns = function(columns) {
  return columns.filter(function(column) {
    if (hasParentFooterCell(columns, column)) {
      return false;
    }
    return Boolean(column.footerCell) || !(column.children && column.children.length > 0);
  });
};
var parsers = {
  "number": function(value, intl, format) {
    if (typeof value === STRING && value.toLowerCase() === "null") {
      return null;
    }
    return intl.parseNumber(value, format);
  },
  "date": function(value, intl, format) {
    if (typeof value === STRING && value.toLowerCase() === "null") {
      return null;
    }
    return intl.parseDate(value, format);
  },
  "boolean": function(value) {
    if (typeof value === STRING) {
      if (value.toLowerCase() === "null") {
        return null;
      } else {
        return value.toLowerCase() === "true";
      }
    }
    return value != null ? !!value : value;
  },
  "string": function(value) {
    if (typeof value === STRING && value.toLowerCase() === "null") {
      return null;
    }
    return value != null ? value + "" : value;
  },
  "default": function(value) {
    return value;
  }
};
function updateItemsExpanded(items, collapsed, uniqueField, level) {
  items.forEach(function(di) {
    di.expanded = collapsed[level] && !collapsed[level].includes(groupedFirstItemValue(di, uniqueField));
    if (di.items && di.items.length) {
      di.items = updateItemsExpanded(di.items, collapsed, uniqueField, level + 1);
    }
  });
  return items;
}
function applyExpandedState(sdata, collapsed, uniqueField) {
  if (collapsed && collapsed.length) {
    sdata.data.forEach(function(di) {
      di.expanded = di.expanded !== void 0 ? di.expanded : collapsed[0] && !collapsed[0].includes(groupedFirstItemValue(di, uniqueField));
      if (di.items && di.items.length) {
        di.items = updateItemsExpanded(di.items, collapsed, uniqueField, 1);
      }
    });
  }
  return sdata;
}
function groupedFirstItemValue(item, field) {
  var resultItem = item;
  while (resultItem.items && resultItem.items.length) {
    resultItem = resultItem.items[0];
  }
  return field ? resultItem[field] : item.value;
}
var firefox = typeof window !== "undefined" && /Firefox/.test(window.navigator.userAgent);
var firefoxMaxHeight = 17895697;

// node_modules/@progress/kendo-vue-grid/dist/es/cells/GridSelectionCell.js
var allVue50 = vue_runtime_esm_bundler_exports;
var gh48 = allVue50.h;
var isV350 = allVue50.version && allVue50.version[0] === "3";
var GridSelectionCellVue2 = {
  name: "KendoGridSelectionCell",
  inheritAttrs: false,
  props: {
    id: String,
    field: String,
    dataItem: Object,
    format: String,
    type: String,
    className: String,
    colSpan: Number,
    columnIndex: Number,
    columnsCount: Number,
    rowType: String,
    level: Number,
    expanded: Boolean,
    render: [String, Function, Object],
    isSelected: Boolean,
    ariaColumnIndex: Number,
    editor: String,
    isRtl: Boolean
  },
  // @ts-ignore
  emits: {
    selectionchange: null,
    cellkeydown: null
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  data: function data4() {
    return {
      inputId: guid()
    };
  },
  computed: {
    tdClass: function tdClass2() {
      var _a4;
      var className = this.$props.className;
      return _a4 = {
        "k-table-td": true
      }, _a4[className] = className, _a4;
    }
  },
  methods: {
    triggerKeydown: function triggerKeydown(e) {
      this.$emit("cellkeydown", {
        event: e,
        dataItem: this.$props.dataItem,
        field: this.$props.field
      });
    },
    handleOnChange: function handleOnChange(event) {
      this.$emit("selectionchange", {
        event,
        dataItem: this.$props.dataItem
      });
    }
  },
  // @ts-ignore
  setup: !isV350 ? void 0 : function() {
    var v3 = !!isV350;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render16(createElement) {
    var h = gh48 || createElement;
    var data15 = getNestedValue2(this.$props.field, this.$props.dataItem);
    var renderTemplate = this.$props.render;
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);
    var defaultRendering = this.$props.rowType !== "groupHeader" ? h("td", {
      style: this.$attrs.style,
      onKeydown: this.triggerKeydown,
      on: this.v3 ? void 0 : {
        "keydown": this.triggerKeydown
      },
      colspan: this.$props.colSpan,
      attrs: this.v3 ? void 0 : {
        colspan: this.$props.colSpan,
        "aria-colindex": this.$props.ariaColumnIndex,
        role: "gridcell",
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      },
      "class": this.tdClass,
      "aria-colindex": this.$props.ariaColumnIndex,
      role: "gridcell",
      tabindex: navAttrs.tabIndex,
      "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
      "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
    }, [h("input", {
      checked: this.v3 ? data15 : null,
      domProps: this.v3 ? void 0 : {
        "checked": data15
      },
      id: this.inputId,
      attrs: this.v3 ? void 0 : {
        id: this.inputId,
        type: "checkbox"
      },
      type: "checkbox",
      "class": "k-checkbox k-checkbox-md k-rounded-md",
      onChange: this.handleOnChange,
      on: this.v3 ? void 0 : {
        "change": this.handleOnChange
      }
    }), h("label", {
      "class": "k-checkbox-label",
      "for": this.inputId,
      attrs: this.v3 ? void 0 : {
        "for": this.inputId
      }
    })]) : null;
    return getTemplate.call(this, {
      h,
      template: renderTemplate,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        keydown: this.triggerKeydown,
        change: this.handleOnChange
      }
    });
  }
};
var GridSelectionCell = GridSelectionCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/messages/main.js
var _a3;
var noRecords = "grid.noRecords";
var selectAllRows2 = "grid.selectAllRows";
var pagerInfo2 = "grid.pagerInfo";
var pagerFirstPage2 = "grid.pagerFirstPage";
var pagerPreviousPage2 = "grid.pagerPreviousPage";
var pagerNextPage2 = "grid.pagerNextPage";
var pagerLastPage2 = "grid.pagerLastPage";
var pagerItemPerPage2 = "grid.pagerItemsPerPage";
var pagerPageSelection2 = "grid.pagerPageSelection";
var pagerPage2 = "grid.pagerPage";
var pagerOf2 = "grid.pagerOf";
var pagerTotalPages2 = "grid.pagerTotalPages";
var groupPanelEmpty = "grid.groupPanelEmpty";
var columnMenu2 = "grid.columnMenu";
var filterClearButton = "grid.filterClearButton";
var filterSubmitButton = "grid.filterSubmitButton";
var filterTitle = "grid.filterTitle";
var sortAscending = "grid.sortAscending";
var sortDescending = "grid.sortDescending";
var searchPlaceholder2 = "grid.searchPlaceholder";
var filterCheckAll2 = "grid.filterCheckAll";
var filterChooseOperator = "grid.filterChooseOperator";
var filterSelectedItems = "grid.filterSelectedItems";
var sortAriaLabel2 = "grid.sortAriaLabel";
var sortableColumnAriaLabel = "grid.sortableColumnAriaLabel";
var sortableColumnAscendingAriaLabel = "grid.sortableColumnAscendingAriaLabel";
var sortableColumnDescendingAriaLabel = "grid.sortableColumnDescendingAriaLabel";
var filterAriaLabel2 = "grid.filterAriaLabel";
var numericFilterAriaLabel = "grid.numericFilterAriaLabel";
var dateFilterAriaLabel = "grid.dateFilterAriaLabel";
var textFilterAriaLabel = "grid.textFilterAriaLabel";
var booleanFilterAriaLabel = "grid.booleanFilterAriaLabel";
var groupHeaderAriaLabel = "grid.groupHeaderAriaLabel";
var groupCaretAriaLabelCollapse = "grid.groupCaretAriaLabelCollapse";
var groupCaretAriaLabelExpand = "grid.groupCaretAriaLabelExpand";
var expandDetailAriaLabel = "grid.expandDetailTemplateAriaLabel";
var collapseDetailAriaLabel = "grid.collapseDetailTemplateAriaLabel";
var messages2 = (_a3 = {}, _a3[selectAllRows2] = "Select All Rows", _a3[noRecords] = "No records available", _a3[groupPanelEmpty] = "Drag a column header and drop it here to group by that column", _a3[columnMenu2] = "Column Menu", _a3[filterClearButton] = "Clear", _a3[filterSubmitButton] = "Filter", _a3[filterTitle] = "Filter", _a3[sortAscending] = "Sort Ascending", _a3[sortDescending] = "Sort Descending", _a3[pagerItemPerPage2] = "items per page", _a3[pagerPageSelection2] = "Select page", _a3[pagerInfo2] = "{0} - {1} of {2} items", _a3[pagerFirstPage2] = "Go to the first page", _a3[pagerPreviousPage2] = "Go to the previous page", _a3[pagerNextPage2] = "Go to the next page", _a3[pagerLastPage2] = "Go to the last page", _a3[pagerPage2] = "Page", _a3[pagerOf2] = "of", _a3[pagerTotalPages2] = "{0}", _a3[searchPlaceholder2] = "Search", _a3[filterCheckAll2] = "Check All", _a3[filterChooseOperator] = "Choose Operator", _a3[filterSelectedItems] = "selected items", _a3[sortAriaLabel2] = "Sortable", _a3[sortableColumnAriaLabel] = "Sortable Column", _a3[sortableColumnAscendingAriaLabel] = "Sorted in ascending order", _a3[sortableColumnDescendingAriaLabel] = "Sorted in descending order", _a3[filterAriaLabel2] = "Filter", _a3[numericFilterAriaLabel] = "Numeric Filter", _a3[dateFilterAriaLabel] = "Date Filter", _a3[textFilterAriaLabel] = "Text Filter", _a3[booleanFilterAriaLabel] = "Boolean Filter", _a3[groupHeaderAriaLabel] = "Group Header", _a3[groupCaretAriaLabelCollapse] = "Collapse Group", _a3[groupCaretAriaLabelExpand] = "Expand Group", _a3[expandDetailAriaLabel] = "Expand Details", _a3[collapseDetailAriaLabel] = "Collapse Details", _a3["grid.filterEqOperator"] = "Is equal to", _a3["grid.filterNotEqOperator"] = "Is not equal to", _a3["grid.filterIsNullOperator"] = "Is null", _a3["grid.filterIsNotNullOperator"] = "Is not null", _a3["grid.filterIsEmptyOperator"] = "Is empty", _a3["grid.filterIsNotEmptyOperator"] = "Is not empty", _a3["grid.filterStartsWithOperator"] = "Starts with", _a3["grid.filterContainsOperator"] = "Contains", _a3["grid.filterNotContainsOperator"] = "Does not contain", _a3["grid.filterEndsWithOperator"] = "Ends with", _a3["grid.filterGteOperator"] = "Is greater than or equal to", _a3["grid.filterGtOperator"] = "Is greater than", _a3["grid.filterLteOperator"] = "Is less than or equal to", _a3["grid.filterLtOperator"] = "Is less than", _a3["grid.filterIsTrue"] = "Is true", _a3["grid.filterIsFalse"] = "Is false", _a3["grid.filterBooleanAll"] = "(All)", _a3["grid.filterAfterOrEqualOperator"] = "Is after or equal to", _a3["grid.filterAfterOperator"] = "Is after", _a3["grid.filterBeforeOperator"] = "Is before", _a3["grid.filterBeforeOrEqualOperator"] = "Is before or equal to", _a3["grid.filterAndLogic"] = "And", _a3["grid.filterOrLogic"] = "Or", _a3);
function pagerMessagesMap(pagerMessageKey) {
  var messageKey = pagerMessageKey.replace(/^pager\.([a-z])/, function(_match, group) {
    return "grid.pager" + group.toUpperCase();
  });
  return { messageKey, defaultMessage: messages2[messageKey] };
}

// node_modules/@progress/kendo-vue-grid/dist/es/cells/GridHierarchyCell.js
var allVue51 = vue_runtime_esm_bundler_exports;
var gh49 = allVue51.h;
var isV351 = allVue51.version && allVue51.version[0] === "3";
var GridHierarchyCellVue2 = {
  name: "KendoGridHierarchyCell",
  inheritAttrs: false,
  props: {
    id: String,
    field: String,
    dataItem: Object,
    format: String,
    type: String,
    className: String,
    colSpan: Number,
    columnIndex: Number,
    columnsCount: Number,
    rowType: String,
    level: Number,
    expanded: Boolean,
    editor: String,
    isSelected: Boolean,
    dataIndex: Number,
    ariaColumnIndex: Number,
    render: [String, Function, Object],
    isRtl: Boolean
  },
  // @ts-ignore
  emits: {
    change: null,
    cellkeydown: null
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    },
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  methods: {
    triggerKeydown: function triggerKeydown2(event, expanded) {
      this.$emit("cellkeydown", {
        event,
        dataItem: this.$props.dataItem,
        field: this.$props.field,
        expanded
      });
      if (event.defaultPrevented) {
        return;
      }
      if (event.keyCode === Keys.enter) {
        event.preventDefault();
        this.$emit("change", {
          dataItem: this.$props.dataItem,
          dataIndex: this.$props.dataIndex,
          event,
          field: this.$props.field,
          value: !expanded
        });
      }
    },
    clickHandler: function clickHandler(e, dataItem, expanded) {
      e.preventDefault();
      this.$emit("change", {
        dataItem,
        event: e,
        field: void 0,
        value: !expanded
      });
    }
  },
  computed: {
    wrapperClass: function wrapperClass2() {
      var _a4;
      return _a4 = {
        "k-table-td": true,
        "k-hierarchy-cell": true
      }, _a4[this.className || ""] = this.className, _a4;
    }
  },
  // @ts-ignore
  setup: !isV351 ? void 0 : function() {
    var v3 = !!isV351;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render17(createElement) {
    var _this = this;
    var h = gh49 || createElement;
    var defaultRendering = null;
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);
    var localizationService = provideLocalizationService(this);
    var collapseMessage = localizationService.toLanguageString(collapseDetailAriaLabel, messages2[collapseDetailAriaLabel]);
    var expandMessage = localizationService.toLanguageString(expandDetailAriaLabel, messages2[expandDetailAriaLabel]);
    if (this.$props.rowType === "groupFooter") {
      defaultRendering = h("td", {
        "class": this.wrapperClass
      });
    } else if (this.$props.rowType !== "groupHeader") {
      var expanded_1 = getNestedValue2(this.$props.field, this.$props.dataItem);
      defaultRendering = h("td", {
        style: this.$attrs.style,
        onKeydown: function onKeydown(ev) {
          _this.triggerKeydown(ev, expanded_1);
        },
        on: this.v3 ? void 0 : {
          "keydown": function onKeydown(ev) {
            _this.triggerKeydown(ev, expanded_1);
          }
        },
        "class": this.wrapperClass,
        "aria-expanded": expanded_1 ? "true" : "false",
        attrs: this.v3 ? void 0 : {
          "aria-expanded": expanded_1 ? "true" : "false",
          role: "gridcell",
          "aria-colindex": this.$props.ariaColumnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        },
        role: "gridcell",
        "aria-colindex": this.$props.ariaColumnIndex,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      }, [h("a", {
        onClick: function onClick2(e) {
          _this.clickHandler(e, _this.$props.dataItem, expanded_1);
        },
        on: this.v3 ? void 0 : {
          "click": function onClick2(e) {
            _this.clickHandler(e, _this.$props.dataItem, expanded_1);
          }
        },
        href: "#",
        attrs: this.v3 ? void 0 : {
          href: "#",
          tabindex: -1,
          title: expanded_1 ? collapseMessage : expandMessage,
          "aria-label": expanded_1 ? collapseMessage : expandMessage
        },
        tabindex: -1,
        title: expanded_1 ? collapseMessage : expandMessage,
        "aria-label": expanded_1 ? collapseMessage : expandMessage
      }, [h(Icon, {
        name: expanded_1 ? "minus" : "plus",
        attrs: this.v3 ? void 0 : {
          name: expanded_1 ? "minus" : "plus",
          icon: expanded_1 ? minusIcon : plusIcon
        },
        icon: expanded_1 ? minusIcon : plusIcon
      })])]);
    }
    return getTemplate.call(this, {
      h,
      template: this.$props.render,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        keydown: this.triggerKeydown,
        click: this.clickHandler
      }
    });
  }
};
var GridHierarchyCell = GridHierarchyCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/cells/GridDetailHierarchyCell.js
var allVue52 = vue_runtime_esm_bundler_exports;
var gh50 = allVue52.h;
var isV352 = allVue52.version && allVue52.version[0] === "3";
var inject12 = allVue52.inject;
var GridDetailHierarchyCellVue2 = {
  props: {
    id: String
  },
  inject: {
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  // @ts-ignore
  setup: !isV352 ? void 0 : function() {
    var v3 = !!isV352;
    var kendoIntlService = inject12("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  // @ts-ignore
  render: function render18(createElement) {
    var h = gh50 || createElement;
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);
    return h("td", {
      "class": "k-table-td k-hierarchy-cell",
      tabindex: navAttrs.tabIndex,
      attrs: this.v3 ? void 0 : {
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      },
      "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
      "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
    });
  }
};
var GridDetailHierarchyCell = GridDetailHierarchyCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/cells/GridDetailCell.js
var allVue53 = vue_runtime_esm_bundler_exports;
var gh51 = allVue53.h;
var isV353 = allVue53.version && allVue53.version[0] === "3";
var inject13 = allVue53.inject;
var GridDetailCellVue2 = {
  props: {
    colSpan: Number,
    ariaColIndex: Number,
    dataItem: [Object, String, Number],
    dataIndex: Number,
    detail: [String, Function, Object],
    id: String
  },
  inject: {
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  // @ts-ignore
  setup: !isV353 ? void 0 : function() {
    var v3 = !!isV353;
    var kendoIntlService = inject13("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  // @ts-ignore
  render: function render19(createElement) {
    var h = gh51 || createElement;
    var _a4 = this.$props, colSpan = _a4.colSpan, ariaColIndex = _a4.ariaColIndex, dataItem = _a4.dataItem, dataIndex = _a4.dataIndex, id = _a4.id;
    var navAttrs = this.getKeyboardNavigationAttributes(id);
    var detailRender = function detailRender2(args) {
      return getTemplate.call(this, {
        h,
        template: this.$props.detail,
        additionalProps: args
      });
    };
    return h("td", {
      "class": "k-table-td k-detail-cell",
      colspan: colSpan,
      attrs: this.v3 ? void 0 : {
        colspan: colSpan,
        "aria-colindex": ariaColIndex,
        role: "gridcell",
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      },
      "aria-colindex": ariaColIndex,
      role: "gridcell",
      tabindex: navAttrs.tabIndex,
      "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
      "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
    }, [detailRender.call(this, {
      dataItem,
      dataIndex
    })]);
  }
};
var GridDetailCell = GridDetailCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/cells/GridEditCell.js
var allVue54 = vue_runtime_esm_bundler_exports;
var gh52 = allVue54.h;
var isV354 = allVue54.version && allVue54.version[0] === "3";
var inject14 = allVue54.inject;
var GridEditCellVue2 = {
  name: "GridEditCell",
  inheritAttrs: false,
  props: {
    id: String,
    field: String,
    dataItem: Object,
    format: String,
    type: String,
    className: String,
    colSpan: Number,
    columnIndex: Number,
    columnsCount: Number,
    rowType: String,
    level: Number,
    expanded: Boolean,
    editor: String,
    isSelected: Boolean,
    ariaColumnIndex: Number,
    render: [String, Function, Object],
    isRtl: Boolean
  },
  // @ts-ignore
  emits: {
    change: null,
    cellkeydown: null,
    edit: null,
    add: null,
    cancel: null,
    save: null,
    remove: null
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  computed: {
    tdClass: function tdClass3() {
      var _a4;
      var className = this.$props.className;
      return _a4 = {
        "k-table-td": true
      }, _a4[className] = className, _a4;
    }
  },
  data: function data5() {
    return {
      inputId: guid()
    };
  },
  methods: {
    triggerKeydown: function triggerKeydown3(e) {
      this.$emit("cellkeydown", {
        event: e,
        dataItem: this.$props.dataItem,
        field: this.$props.field
      });
    },
    triggerEdit: function triggerEdit(dataItem) {
      this.$emit("edit", dataItem);
    },
    triggerAdd: function triggerAdd(dataItem) {
      this.$emit("add", dataItem);
    },
    triggerCancel: function triggerCancel(dataItem) {
      this.$emit("cancel", dataItem);
    },
    triggerSave: function triggerSave(dataItem) {
      this.$emit("save", dataItem);
    },
    triggerRemove: function triggerRemove(dataItem) {
      this.$emit("remove", dataItem);
    },
    changeHandler: function changeHandler(event, value) {
      if (!value) {
        if (event.target.type === "checkbox") {
          value = event.target.checked;
        } else {
          value = event.target.valueAsDate ? event.target.valueAsDate : event.target.value;
        }
      }
      this.$emit("change", {
        dataItem: this.$props.dataItem,
        field: this.$props.field,
        event,
        value
      });
    }
  },
  // @ts-ignore
  setup: !isV354 ? void 0 : function() {
    var v3 = !!isV354;
    var kendoIntlService = inject14("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  // @ts-ignore
  render: function render20(createElement) {
    var h = gh52 || createElement;
    var data15 = getNestedValue2(this.$props.field, this.$props.dataItem);
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);
    var defaultRendering = null;
    switch (this.$props.editor) {
      case "numeric":
        defaultRendering = h("td", {
          style: this.$attrs.style,
          onKeydown: this.triggerKeydown,
          on: this.v3 ? void 0 : {
            "keydown": this.triggerKeydown
          },
          colspan: this.$props.colSpan,
          attrs: this.v3 ? void 0 : {
            colspan: this.$props.colSpan,
            role: "gridcell",
            "aria-colindex": this.$props.ariaColumnIndex,
            "aria-selected": this.$props.isSelected,
            "data-grid-col-index": this.$props.columnIndex,
            tabindex: navAttrs.tabIndex,
            "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
            "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
          },
          "class": this.tdClass,
          role: "gridcell",
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        }, [
          // @ts-ignore
          h(NumericTextBox, {
            style: {
              width: "100%"
            },
            value: data15 === void 0 ? null : data15,
            attrs: this.v3 ? void 0 : {
              value: data15 === void 0 ? null : data15
            },
            onChange: this.changeHandler,
            on: this.v3 ? void 0 : {
              "change": this.changeHandler
            }
          })
        ]);
        break;
      case "date":
        defaultRendering = h("td", {
          style: this.$attrs.style,
          onKeydown: this.triggerKeydown,
          on: this.v3 ? void 0 : {
            "keydown": this.triggerKeydown
          },
          colspan: this.$props.colSpan,
          attrs: this.v3 ? void 0 : {
            colspan: this.$props.colSpan,
            role: "gridcell",
            "aria-colindex": this.$props.ariaColumnIndex,
            "aria-selected": this.$props.isSelected,
            "data-grid-col-index": this.$props.columnIndex,
            tabindex: navAttrs.tabIndex,
            "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
            "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
          },
          "class": this.tdClass,
          role: "gridcell",
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        }, [
          // @ts-ignore
          h(DatePicker, {
            style: {
              width: "100%"
            },
            value: data15,
            attrs: this.v3 ? void 0 : {
              value: data15
            },
            onChange: this.changeHandler,
            on: this.v3 ? void 0 : {
              "change": this.changeHandler
            }
          })
        ]);
        break;
      case "boolean":
        defaultRendering = h("td", {
          style: this.$attrs.style,
          onKeydown: this.triggerKeydown,
          on: this.v3 ? void 0 : {
            "keydown": this.triggerKeydown
          },
          colspan: this.$props.colSpan,
          attrs: this.v3 ? void 0 : {
            colspan: this.$props.colSpan,
            role: "gridcell",
            "aria-colindex": this.$props.ariaColumnIndex,
            "aria-selected": this.$props.isSelected,
            "data-grid-col-index": this.$props.columnIndex,
            tabindex: navAttrs.tabIndex,
            "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
            "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
          },
          "class": this.tdClass,
          role: "gridcell",
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        }, [h("input", {
          checked: this.v3 ? data15 || false : null,
          domProps: this.v3 ? void 0 : {
            "checked": data15 || false
          },
          id: this.inputId,
          attrs: this.v3 ? void 0 : {
            id: this.inputId,
            type: "checkbox"
          },
          type: "checkbox",
          "class": "k-checkbox k-checkbox-md k-rounded-md",
          onChange: this.changeHandler,
          on: this.v3 ? void 0 : {
            "change": this.changeHandler
          }
        }), h("label", {
          "class": "k-checkbox-label",
          "for": this.inputId,
          attrs: this.v3 ? void 0 : {
            "for": this.inputId
          }
        })]);
        break;
      default:
        defaultRendering = h("td", {
          style: this.$attrs.style,
          onKeydown: this.triggerKeydown,
          on: this.v3 ? void 0 : {
            "keydown": this.triggerKeydown
          },
          colspan: this.$props.colSpan,
          attrs: this.v3 ? void 0 : {
            colspan: this.$props.colSpan,
            role: "gridcell",
            "aria-colindex": this.$props.ariaColumnIndex,
            "aria-selected": this.$props.isSelected,
            "data-grid-col-index": this.$props.columnIndex,
            tabindex: navAttrs.tabIndex,
            "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
            "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
          },
          "class": this.tdClass,
          role: "gridcell",
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        }, [h("span", {
          "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
        }, [h("input", {
          style: {
            width: "100%"
          },
          "class": "k-input-inner",
          value: this.v3 ? data15 !== null && data15 !== void 0 ? data15 : "" : null,
          domProps: this.v3 ? void 0 : {
            "value": data15 !== null && data15 !== void 0 ? data15 : ""
          },
          onChange: this.changeHandler,
          on: this.v3 ? void 0 : {
            "change": this.changeHandler
          }
        })])]);
    }
    return getTemplate.call(this, {
      h,
      template: this.$props.render,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        change: this.changeHandler,
        keydown: this.triggerKeydown,
        edit: this.triggerEdit,
        add: this.triggerAdd,
        cancel: this.triggerCancel,
        save: this.triggerSave,
        remove: this.triggerRemove
      }
    });
  }
};
var GridEditCell = GridEditCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/utils/browser-support.service.js
var getDocument3 = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService3 = (
  /** @class */
  function() {
    function BrowserSupportService4() {
    }
    Object.defineProperty(BrowserSupportService4.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument3();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService4;
  }()
);

// node_modules/@progress/kendo-vue-grid/dist/es/header/Header.js
var allVue55 = vue_runtime_esm_bundler_exports;
var gh53 = allVue55.h;
var isV355 = allVue55.version && allVue55.version[0] === "3";
var ref3 = allVue55.ref;
var HeaderVue2 = {
  props: {
    staticHeaders: Boolean,
    headerRow: Object,
    columnResize: Object,
    cols: Array,
    size: String,
    draggable: Boolean
  },
  data: function data6() {
    return {
      divStyle: {},
      element: null,
      headerWrap: null,
      table: null
    };
  },
  computed: {
    wrapperClass: function wrapperClass3() {
      return {
        "k-grid-header": true,
        "k-grid-draggable-header": this.$props.draggable
      };
    },
    tableClass: function tableClass() {
      var _a4;
      var size = this.$props.size;
      return _a4 = {
        "k-table": true,
        "k-grid-header-table": true
      }, _a4["k-table-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a4;
    }
  },
  mounted: function mounted5() {
    this.headerWrap = getRef(this, "headerWrap");
    this.table = getRef(this, "table");
    this.$props.columnResize.colGroupHeader = getRef(this, "colGroupHeader");
    var scrollbarWidth = new BrowserSupportService3().scrollbarWidth;
    var rtl = isRtl3(this.$el);
    if (this.$props.columnResize) {
      this.$props.columnResize.setIsRtl(rtl);
    }
    var padding = Math.max(0, scrollbarWidth) + "px";
    var right = rtl ? 0 : padding;
    var left = rtl ? padding : 0;
    this.divStyle = {
      padding: "0 ".concat(right, " 0 ").concat(left)
    };
  },
  methods: {
    setScrollLeft: function setScrollLeft(scrollLeft) {
      if (this.headerWrap) {
        this.headerWrap.scrollLeft = scrollLeft;
      }
    },
    setWidth: function setWidth(width) {
      if (this.table) {
        this.table.style.width = width + "px";
      }
    }
  },
  // @ts-ignore
  setup: !isV355 ? void 0 : function() {
    var v3 = !!isV355;
    var headerWrapRef = ref3(null);
    var tableRef = ref3(null);
    var colGroupHeaderRef = ref3(null);
    return {
      v3,
      headerWrapRef,
      tableRef,
      colGroupHeaderRef
    };
  },
  // @ts-ignore
  render: function render21(createElement) {
    var h = gh53 || createElement;
    if (!this.$props.staticHeaders) {
      return this.$props.headerRow;
    }
    return h("div", {
      "class": this.wrapperClass,
      style: this.divStyle
    }, [h("div", {
      ref: setRef(this, "headerWrap"),
      "class": "k-grid-header-wrap"
    }, [h("table", {
      "class": this.tableClass,
      ref: setRef(this, "table"),
      role: "none",
      attrs: this.v3 ? void 0 : {
        role: "none"
      }
    }, [h("colgroup", {
      ref: setRef(this, "colGroupHeader")
    }, [this.$props.cols]), this.$props.headerRow])])]);
  }
};
var Header = HeaderVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/interfaces/GridSortSettings.js
var __spreadArray5 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var normalize3 = function() {
  var _a4;
  var settings = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    settings[_i] = arguments[_i];
  }
  return (_a4 = Object).assign.apply(_a4, __spreadArray5([{ allowUnsort: true, mode: "single" }], settings, false));
};

// node_modules/@progress/kendo-vue-grid/dist/es/drag/ColumnResizer.js
var allVue56 = vue_runtime_esm_bundler_exports;
var gh54 = allVue56.h;
var isV356 = allVue56.version && allVue56.version[0] === "3";
var ColumnResizerVue2 = {
  mounted: function mounted6() {
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
  },
  methods: {
    drag: function drag3(event) {
      var element = this.draggable && this.draggable.element;
      if (element) {
        this.$emit("resize", event, element, false);
      }
    },
    release: function release3(event) {
      var element = this.draggable && this.draggable.element;
      if (element) {
        this.$emit("resize", event, element, true);
      }
    }
  },
  // @ts-ignore
  setup: !isV356 ? void 0 : function() {
    var v3 = !!isV356;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render22(createElement) {
    var _this = this;
    var h = gh54 || createElement;
    var resizeStyle = {
      // TODO: move to theme
      cursor: "col-resize",
      display: "block",
      height: "1000%",
      position: "absolute",
      // [this.props.isRtl ? 'left' : 'right']: 0,
      top: 0,
      width: ".5em"
    };
    return (
      // @ts-ignore  function children
      h(Draggable, {
        onDrag: this.drag,
        on: this.v3 ? void 0 : {
          "drag": this.drag,
          "release": this.release
        },
        onRelease: this.release,
        ref: "draggable"
      }, this.v3 ? function() {
        return [h("span", {
          "class": "k-column-resizer",
          draggable: false,
          attrs: _this.v3 ? void 0 : {
            draggable: false
          },
          style: resizeStyle
        })];
      } : [h("span", {
        "class": "k-column-resizer",
        draggable: false,
        attrs: _this.v3 ? void 0 : {
          draggable: false
        },
        style: resizeStyle
      })])
    );
  }
};
var ColumnResizer2 = ColumnResizerVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/drag/ColumnDraggable.js
var allVue57 = vue_runtime_esm_bundler_exports;
var gh55 = allVue57.h;
var isV357 = allVue57.version && allVue57.version[0] === "3";
var ColumnDraggableVue2 = {
  mounted: function mounted7() {
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
  },
  methods: {
    onPress: function onPress(event) {
      var element = this.draggable && this.draggable.element;
      if (element) {
        this.$emit("pressHandler", event, element);
      }
    },
    onDrag: function onDrag(event) {
      var element = this.draggable && this.draggable.element;
      if (element) {
        this.$emit("dragHandler", event, element);
      }
    },
    onRelease: function onRelease(event) {
      var element = this.draggable && this.draggable.element;
      if (element) {
        this.$emit("releaseHandler", event, element);
      }
    }
  },
  // @ts-ignore
  setup: !isV357 ? void 0 : function() {
    var v3 = !!isV357;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render23(createElement) {
    var _this = this;
    var h = gh55 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return (
      // @ts-ignore  function children
      h(Draggable, {
        onPress: this.onPress,
        on: this.v3 ? void 0 : {
          "press": this.onPress,
          "drag": this.onDrag,
          "release": this.onRelease
        },
        onDrag: this.onDrag,
        onRelease: this.onRelease,
        ref: "draggable"
      }, this.v3 ? function() {
        return [h("tr", {
          "class": "k-table-row",
          role: "row",
          attrs: _this.v3 ? void 0 : {
            role: "row"
          }
        }, [defaultSlot])];
      } : [h("tr", {
        "class": "k-table-row",
        role: "row",
        attrs: _this.v3 ? void 0 : {
          role: "row"
        }
      }, [defaultSlot])])
    );
  }
};
var ColumnDraggable2 = ColumnDraggableVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/header/GridHeaderCell.js
var allVue58 = vue_runtime_esm_bundler_exports;
var gh56 = allVue58.h;
var isV358 = allVue58.version && allVue58.version[0] === "3";
var GridHeaderCellVue2 = {
  props: {
    field: String,
    title: String,
    sortable: [Boolean, Object],
    render: [Object, Function, String]
  },
  computed: {
    linkClass: function linkClass() {
      return {
        "k-link": true,
        "!k-cursor-default": !this.sortable
      };
    }
  },
  methods: {
    clickHandler: function clickHandler2(event) {
      if (this.sortable) {
        this.$emit("headercellclick", event);
      }
    }
  },
  // @ts-ignore
  setup: !isV358 ? void 0 : function() {
    var v3 = !!isV358;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render24(createElement) {
    var h = gh56 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var renderTemplate = this.$props.render;
    var textInCell = this.$props.title || this.$props.field || " ";
    var defaultRendering = getTemplate.call(this, {
      h,
      template: renderTemplate,
      defaultRendering: textInCell,
      additionalProps: this.$props,
      additionalListeners: {
        click: this.clickHandler
      }
    });
    return h("span", {
      "class": this.linkClass,
      onClick: this.clickHandler,
      on: this.v3 ? void 0 : {
        "click": this.clickHandler
      }
    }, [h("span", {
      "class": "k-column-title"
    }, [defaultRendering]), defaultSlot]);
  }
};
var GridHeaderCell = GridHeaderCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/GridColumnMenuItem.js
var allVue59 = vue_runtime_esm_bundler_exports;
var gh57 = allVue59.h;
var isV359 = allVue59.version && allVue59.version[0] === "3";
var GridColumnMenuItemVue2 = {
  props: {
    title: String,
    iconClass: String,
    icon: String,
    svgIcon: Object,
    selected: Boolean
  },
  methods: {
    onClick: function onClick(e) {
      this.$emit("menuitemclick", e);
    },
    onKeyDown: function onKeyDown5(event) {
      if (event.keyCode === Keys.enter) {
        this.$emit("menuitemclick", event);
      }
    }
  },
  // @ts-ignore
  setup: !isV359 ? void 0 : function() {
    var v3 = !!isV359;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render25(createElement) {
    var h = gh57 || createElement;
    var _a4 = this.$props, title = _a4.title, iconClass = _a4.iconClass, selected = _a4.selected, icon = _a4.icon, svgIcon = _a4.svgIcon;
    return h("div", {
      tabindex: 0,
      attrs: this.v3 ? void 0 : {
        tabindex: 0
      },
      onKeydown: this.onKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onKeyDown,
        "click": this.onClick
      },
      onClick: this.onClick,
      "class": "k-columnmenu-item ".concat(selected ? "k-selected" : "")
    }, [iconClass && h(Icon, {
      "class": iconClass
    }), (icon || svgIcon) && h(Icon, {
      name: icon,
      attrs: this.v3 ? void 0 : {
        name: icon,
        icon: svgIcon
      },
      icon: svgIcon
    }), title]);
  }
};
var GridColumnMenuItem = GridColumnMenuItemVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/GridColumnMenuItemGroup.js
var allVue60 = vue_runtime_esm_bundler_exports;
var gh58 = allVue60.h;
var isV360 = allVue60.version && allVue60.version[0] === "3";
var GridColumnMenuItemGroupVue2 = {
  // @ts-ignore
  setup: !isV360 ? void 0 : function() {
    var v3 = !!isV360;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render26(createElement) {
    var h = gh58 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("div", {
      "class": "k-columnmenu-item-wrapper"
    }, [defaultSlot]);
  }
};
var GridColumnMenuItemGroup = GridColumnMenuItemGroupVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/GridColumnMenuSort.js
var allVue61 = vue_runtime_esm_bundler_exports;
var gh59 = allVue61.h;
var isV361 = allVue61.version && allVue61.version[0] === "3";
var inject15 = allVue61.inject;
var ASC_DIR = "asc";
var DESC_DIR = "desc";
var sortSeqMap = {
  true: {
    "asc": {
      "asc": "",
      "desc": "desc"
    },
    "desc": {
      "asc": "asc",
      "desc": ""
    },
    "": {
      "asc": "asc",
      "desc": "desc"
    }
  },
  false: {
    "asc": {
      "asc": "asc",
      "desc": "desc"
    },
    "desc": {
      "asc": "asc",
      "desc": "desc"
    },
    "": {
      "asc": "asc",
      "desc": "desc"
    }
  }
};
var sortIndex = function sortIndex2(field, sort) {
  if (!sort) {
    return -1;
  }
  return sort.findIndex(function(s) {
    return s.field === field;
  });
};
var sortedAsc = function sortedAsc2(sortedIndex, sort) {
  return !!(sort && sortedIndex > -1 && sort[sortedIndex].dir === ASC_DIR);
};
var sortedDesc = function sortedDesc2(sortedIndex, sort) {
  return !!(sort && sortedIndex > -1 && sort[sortedIndex].dir === DESC_DIR);
};
var sortGroupByField = function sortGroupByField2(field, sort) {
  var currentSortIndex = sortIndex(field, sort);
  return sortedDesc(currentSortIndex, sort) || sortedAsc(currentSortIndex, sort);
};
var GridColumnMenuSortVue2 = {
  props: {
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    column: Object
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    onAscClick: function onAscClick(e) {
      this.onSort(e, ASC_DIR);
      this.$emit("closemenu");
    },
    onDescClick: function onDescClick(e) {
      this.onSort(e, DESC_DIR);
      this.$emit("closemenu");
    },
    onSort: function onSort(e, selectedDir) {
      e.preventDefault();
      if (!hasListener.call(this, "sortchange")) {
        return;
      }
      var _a4 = this.$props, column = _a4.column, sortable = _a4.sortable, sort = _a4.sort;
      var _b2 = normalize3(sortable || false, false), allowUnsort = _b2.allowUnsort, mode = _b2.mode;
      var oldDescriptor = (sort || []).filter(function(d) {
        return d.field === column.field;
      })[0];
      var dir = sortSeqMap[allowUnsort][oldDescriptor && oldDescriptor.dir || ""][selectedDir];
      var newDescriptor = mode === "single" ? [] : (this.$props.sort || []).filter(function(d) {
        return d.field !== column.field;
      });
      if (dir !== "" && column.field) {
        newDescriptor.push({
          field: column.field,
          dir
        });
      }
      this.$emit("sortchange", newDescriptor, {
        event: e,
        field: this.$props.column.field
      });
    }
  },
  // @ts-ignore
  setup: !isV361 ? void 0 : function() {
    var v3 = !!isV361;
    var kendoLocalizationService = inject15("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render27(createElement) {
    var _this = this;
    var h = gh59 || createElement;
    var _a4 = this.$props, sort = _a4.sort, column = _a4.column;
    var currentSortIndex = sortIndex(column.field, sort);
    var localizationService = provideLocalizationService(this);
    return (
      // @ts-ignore function children
      h(GridColumnMenuItemGroup, this.v3 ? function() {
        return [
          // @ts-ignore
          h(GridColumnMenuItem, {
            title: localizationService.toLanguageString(sortAscending, messages2[sortAscending]),
            attrs: _this.v3 ? void 0 : {
              title: localizationService.toLanguageString(sortAscending, messages2[sortAscending]),
              icon: "sort-asc-small",
              svgIcon: sortAscSmallIcon,
              selected: sortedAsc(currentSortIndex, sort)
            },
            icon: "sort-asc-small",
            svgIcon: sortAscSmallIcon,
            selected: sortedAsc(currentSortIndex, sort),
            onMenuitemclick: _this.onAscClick,
            on: _this.v3 ? void 0 : {
              "menuitemclick": _this.onAscClick
            }
          }),
          // @ts-ignore
          h(GridColumnMenuItem, {
            title: localizationService.toLanguageString(sortDescending, messages2[sortDescending]),
            attrs: _this.v3 ? void 0 : {
              title: localizationService.toLanguageString(sortDescending, messages2[sortDescending]),
              icon: "sort-desc-small",
              svgIcon: sortDescSmallIcon,
              selected: sortedDesc(currentSortIndex, sort)
            },
            icon: "sort-desc-small",
            svgIcon: sortDescSmallIcon,
            selected: sortedDesc(currentSortIndex, sort),
            onMenuitemclick: _this.onDescClick,
            on: _this.v3 ? void 0 : {
              "menuitemclick": _this.onDescClick
            }
          })
        ];
      } : [h(GridColumnMenuItem, {
        title: localizationService.toLanguageString(sortAscending, messages2[sortAscending]),
        attrs: _this.v3 ? void 0 : {
          title: localizationService.toLanguageString(sortAscending, messages2[sortAscending]),
          icon: "sort-asc-small",
          svgIcon: sortAscSmallIcon,
          selected: sortedAsc(currentSortIndex, sort)
        },
        icon: "sort-asc-small",
        svgIcon: sortAscSmallIcon,
        selected: sortedAsc(currentSortIndex, sort),
        onMenuitemclick: _this.onAscClick,
        on: _this.v3 ? void 0 : {
          "menuitemclick": _this.onAscClick
        }
      }), h(GridColumnMenuItem, {
        title: localizationService.toLanguageString(sortDescending, messages2[sortDescending]),
        attrs: _this.v3 ? void 0 : {
          title: localizationService.toLanguageString(sortDescending, messages2[sortDescending]),
          icon: "sort-desc-small",
          svgIcon: sortDescSmallIcon,
          selected: sortedDesc(currentSortIndex, sort)
        },
        icon: "sort-desc-small",
        svgIcon: sortDescSmallIcon,
        selected: sortedDesc(currentSortIndex, sort),
        onMenuitemclick: _this.onDescClick,
        on: _this.v3 ? void 0 : {
          "menuitemclick": _this.onDescClick
        }
      })])
    );
  }
};
var GridColumnMenuSort = GridColumnMenuSortVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/GridColumnMenuItemContent.js
var allVue62 = vue_runtime_esm_bundler_exports;
var gh60 = allVue62.h;
var isV362 = allVue62.version && allVue62.version[0] === "3";
var GridColumnMenuItemContentVue2 = {
  props: {
    show: Boolean
  },
  // @ts-ignore
  setup: !isV362 ? void 0 : function() {
    var v3 = !!isV362;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render28(createElement) {
    var _this = this;
    var h = gh60 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("div", {
      "class": "k-columnmenu-item-content"
    }, [
      // @ts-ignore function children
      h(Reveal, {
        appear: this.$props.show,
        attrs: this.v3 ? void 0 : {
          appear: this.$props.show
        },
        style: {
          position: "relative",
          display: "block"
        }
      }, this.v3 ? function() {
        return [_this.$props.show ? defaultSlot : null];
      } : [_this.$props.show ? defaultSlot : null])
    ]);
  }
};
var GridColumnMenuItemContent = GridColumnMenuItemContentVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/filterCommon.js
var filterLogicList2 = [
  { text: "grid.filterAndLogic", operator: "and" },
  { text: "grid.filterOrLogic", operator: "or" }
];
var operators2 = {
  "text": [
    { text: "grid.filterContainsOperator", operator: "contains" },
    { text: "grid.filterNotContainsOperator", operator: "doesnotcontain" },
    { text: "grid.filterEqOperator", operator: "eq" },
    { text: "grid.filterNotEqOperator", operator: "neq" },
    { text: "grid.filterStartsWithOperator", operator: "startswith" },
    { text: "grid.filterEndsWithOperator", operator: "endswith" },
    { text: "grid.filterIsNullOperator", operator: "isnull" },
    { text: "grid.filterIsNotNullOperator", operator: "isnotnull" },
    { text: "grid.filterIsEmptyOperator", operator: "isempty" },
    { text: "grid.filterIsNotEmptyOperator", operator: "isnotempty" }
  ],
  "numeric": [
    { text: "grid.filterEqOperator", operator: "eq" },
    { text: "grid.filterNotEqOperator", operator: "neq" },
    { text: "grid.filterGteOperator", operator: "gte" },
    { text: "grid.filterGtOperator", operator: "gt" },
    { text: "grid.filterLteOperator", operator: "lte" },
    { text: "grid.filterLtOperator", operator: "lt" },
    { text: "grid.filterIsNullOperator", operator: "isnull" },
    { text: "grid.filterIsNotNullOperator", operator: "isnotnull" }
  ],
  "date": [
    { text: "grid.filterEqOperator", operator: "eq" },
    { text: "grid.filterNotEqOperator", operator: "neq" },
    { text: "grid.filterAfterOrEqualOperator", operator: "gte" },
    { text: "grid.filterAfterOperator", operator: "gt" },
    { text: "grid.filterBeforeOperator", operator: "lt" },
    { text: "grid.filterBeforeOrEqualOperator", operator: "lte" },
    { text: "grid.filterIsNullOperator", operator: "isnull" },
    { text: "grid.filterIsNotNullOperator", operator: "isnotnull" }
  ],
  "boolean": [
    { text: "grid.filterEqOperator", operator: "eq" }
  ]
};
var IsUnaryFilter = function(operator) {
  return operator === "isnull" || operator === "isnotnull" || operator === "isempty" || operator === "isnotempty";
};
var operatorMap2 = function(iterable, service) {
  return iterable.map(function(operator) {
    return {
      text: service.toLanguageString(operator.text, messages2[operator.text]),
      operator: operator.operator
    };
  });
};
var defaultBooleanOperator = "eq";
var booleanFilterValues2 = [
  { text: "grid.filterBooleanAll", operator: "" },
  { text: "grid.filterIsTrue", operator: true },
  { text: "grid.filterIsFalse", operator: false }
];
var defaultHideSecondFilter2 = {
  text: false,
  numeric: false,
  date: false,
  boolean: true
};
var cellInputChange2 = function(value, e, props) {
  var defaultOperator = getDefaultOperator2(props.operators);
  var operator = props.operator;
  switch (props.filterType) {
    case "numeric":
      if (!operator || IsUnaryFilter(operator)) {
        operator = defaultOperator;
      }
      if (value === null && operator === defaultOperator) {
        operator = "";
      }
      break;
    case "date":
      if (!operator || IsUnaryFilter(operator)) {
        operator = defaultOperator;
      }
      if (value === null && operator === defaultOperator) {
        operator = "";
      }
      break;
    case "text":
      if (!operator || IsUnaryFilter(operator)) {
        operator = defaultOperator;
      }
      if (!value && operator === defaultOperator) {
        operator = "";
      }
      break;
    default:
      return;
  }
  return { value, operator, event: e };
};
var getDefaultOperator2 = function(filterOperators, filterType) {
  if (filterType) {
    return filterOperators[filterType][0].operator;
  } else {
    return filterOperators[0].operator;
  }
};
var getFilterType2 = function(filterType) {
  return filterType || "text";
};
var cellBoolDropdownChange2 = function(value, e) {
  return {
    value,
    operator: value === "" ? "" : defaultBooleanOperator,
    event: e
  };
};
var cellOperatorChange2 = function(operator, e, value) {
  if (IsUnaryFilter(operator)) {
    value = null;
  }
  return { value, operator, event: e };
};
var getAriaLabel = function(filterType, service) {
  switch (filterType) {
    case "text":
      return service.toLanguageString(textFilterAriaLabel, messages2[textFilterAriaLabel]);
    case "numeric":
      return service.toLanguageString(numericFilterAriaLabel, messages2[numericFilterAriaLabel]);
    case "boolean":
      return service.toLanguageString(booleanFilterAriaLabel, messages2[booleanFilterAriaLabel]);
    case "date":
      return service.toLanguageString(dateFilterAriaLabel, messages2[dateFilterAriaLabel]);
    default:
      return;
  }
};

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/GridColumnMenuFilterCell.js
var allVue63 = vue_runtime_esm_bundler_exports;
var gh61 = allVue63.h;
var isV363 = allVue63.version && allVue63.version[0] === "3";
var GridColumnMenuFilterCellVue2 = {
  props: {
    field: String,
    filterType: String,
    value: [Object, String, Number, Date, Boolean],
    operator: String,
    operators: Array,
    booleanValues: Array
  },
  // @ts-ignore
  emits: {
    change: null,
    filtercellfocus: null
  },
  methods: {
    handleFocus: function handleFocus(e) {
      this.$emit("filtercellfocus", e);
    },
    triggerChange: function triggerChange(filter) {
      this.$emit("change", filter);
    },
    inputChange: function inputChange(value, e) {
      var filter = cellInputChange2(value, e, this.$props);
      this.triggerChange(filter);
    },
    boolDropdownChange: function boolDropdownChange(value, e) {
      var filter = cellBoolDropdownChange2(value.value.operator, e);
      this.triggerChange(filter);
    }
  },
  // @ts-ignore
  setup: !isV363 ? void 0 : function() {
    var v3 = !!isV363;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render29(createElement) {
    var _this = this;
    var h = gh61 || createElement;
    var _a4 = this.$props, filterType = _a4.filterType, value = _a4.value, booleanValues = _a4.booleanValues;
    switch (filterType) {
      case "numeric":
        return (
          // @ts-ignore
          h(NumericTextBox, {
            value,
            attrs: this.v3 ? void 0 : {
              value
            },
            onChange: function onChange(e) {
              _this.inputChange(e.value, e.event);
            },
            on: this.v3 ? void 0 : {
              "change": function onChange(e) {
                _this.inputChange(e.value, e.event);
              }
            }
          })
        );
      case "date":
        return (
          // @ts-ignore
          h(DatePicker, {
            value,
            attrs: this.v3 ? void 0 : {
              value
            },
            onFocus: this.handleFocus,
            on: this.v3 ? void 0 : {
              "focus": this.handleFocus,
              "change": function change(e) {
                _this.inputChange(e.value, e.event);
              }
            },
            onChange: function change(e) {
              _this.inputChange(e.value, e.event);
            }
          })
        );
      case "boolean":
        var noFilterSet_1 = function noFilterSet_12(filter) {
          return filter === null || filter === void 0;
        };
        return (
          // @ts-ignore
          h(DropDownList, {
            onChange: this.boolDropdownChange,
            on: this.v3 ? void 0 : {
              "change": this.boolDropdownChange
            },
            value: booleanValues.find(function(item) {
              return item.operator === (noFilterSet_1(value) ? "" : value);
            }),
            attrs: this.v3 ? void 0 : {
              value: booleanValues.find(function(item) {
                return item.operator === (noFilterSet_1(value) ? "" : value);
              }),
              "data-items": booleanValues,
              textField: "text"
            },
            "data-items": booleanValues,
            textField: "text"
          })
        );
      default:
        return h("span", {
          "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
        }, [h("input", {
          "class": "k-input-inner",
          value: this.v3 ? value || "" : null,
          domProps: this.v3 ? void 0 : {
            "value": value || ""
          },
          onInput: function onInput(e) {
            _this.inputChange(e.target.value, e);
          },
          on: this.v3 ? void 0 : {
            "input": function onInput(e) {
              _this.inputChange(e.target.value, e);
            }
          }
        })]);
    }
  }
};
var GridColumnMenuFilterCell = GridColumnMenuFilterCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/GridColumnMenuFilterOperators.js
var allVue64 = vue_runtime_esm_bundler_exports;
var gh62 = allVue64.h;
var isV364 = allVue64.version && allVue64.version[0] === "3";
var ColumnMenuFilterOperatorsVue2 = {
  props: {
    filterType: String,
    operator: String,
    operators: Array
  },
  // @ts-ignore
  emits: {
    change: null
  },
  methods: {
    triggerChange: function triggerChange2(filter) {
      this.$emit("change", filter);
    },
    operatorChange: function operatorChange(operatorValue, e) {
      var filter = cellOperatorChange2(operatorValue.value.operator, e, this.$props.value);
      this.triggerChange(filter);
    }
  },
  // @ts-ignore
  setup: !isV364 ? void 0 : function() {
    var v3 = !!isV364;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render30(createElement) {
    var _this = this;
    var h = gh62 || createElement;
    var ddlValue = this.$props.operators.find(function(item) {
      return item.operator === _this.$props.operator;
    }) || null;
    return this.$props.filterType !== "boolean" ? (
      // @ts-ignore
      h(DropDownList, {
        onChange: this.operatorChange,
        on: this.v3 ? void 0 : {
          "change": this.operatorChange
        },
        value: ddlValue,
        attrs: this.v3 ? void 0 : {
          value: ddlValue,
          "data-items": this.$props.operators,
          textField: "text"
        },
        "data-items": this.$props.operators,
        textField: "text"
      })
    ) : null;
  }
};
var ColumnMenuFilterOperators2 = ColumnMenuFilterOperatorsVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/GridColumnMenuFilter.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __spreadArray6 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue65 = vue_runtime_esm_bundler_exports;
var gh63 = allVue65.h;
var isV365 = allVue65.version && allVue65.version[0] === "3";
var inject16 = allVue65.inject;
var rootFilterOrDefault = function rootFilterOrDefault2(rootFilter) {
  return rootFilter || {
    filters: [],
    logic: "and"
  };
};
var filterGroupByField = function filterGroupByField2(field, filter) {
  var rootFilter = rootFilterOrDefault(filter);
  var compositeFilters = rootFilter.filters.filter(function(f) {
    if (isCompositeFilterDescriptor(f)) {
      return f.filters && f.filters.length && f.filters.length <= 2 && !f.filters.find(function(nf) {
        return isCompositeFilterDescriptor(nf) || nf.field !== field;
      });
    }
    return false;
  });
  return compositeFilters[0] || null;
};
var GridColumnMenuFilterVue2 = {
  name: "KendoGridColumnMenuFilter",
  props: {
    column: Object,
    filter: Object,
    expanded: {
      type: Boolean,
      default: void 0
    },
    filterable: Boolean,
    filterOperators: {
      type: Object,
      default: function _default() {
        return operators2;
      }
    },
    hideSecondFilter: {
      type: [Boolean, Object],
      default: function _default2() {
        return void 0;
      }
    },
    filterUI: [String, Function, Object]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data7() {
    return {
      currentExpanded: false,
      filterGroup: null
    };
  },
  created: function created4() {
    var _this = this;
    var filterGroup;
    if (this.$props.column && this.$props.column.field) {
      var filterType = getFilterType2(this.$props.column.filter);
      var defaultOperator = getDefaultOperator2(this.$props.filterOperators, filterType);
      filterGroup = filterGroupByField(this.$props.column.field, this.$props.filter);
      filterGroup = filterGroup ? __assign6(__assign6({}, filterGroup), {
        filters: filterGroup.filters.map(function(f) {
          return __assign6({}, f);
        })
      }) : {
        logic: "and",
        filters: [{
          field: this.$props.column.field,
          operator: defaultOperator
        }, {
          field: this.$props.column.field,
          operator: defaultOperator
        }]
      };
      if (filterGroup.filters.filter(function(x) {
        return x.field === _this.$props.column.field;
      }).length === 1) {
        filterGroup.filters.splice(1, 0, {
          field: this.$props.column.field,
          operator: defaultOperator
        });
      }
    }
    this.currentExpanded = this.$props.expanded || false;
    this.filterGroup = filterGroup;
  },
  methods: {
    removeGroup: function removeGroup(group, rootFilter) {
      var filters = __spreadArray6([], rootFilter.filters, true);
      var groupIndex = filters.findIndex(function(f) {
        return f === group;
      });
      if (groupIndex > -1) {
        filters.splice(groupIndex, 1);
      }
      return __assign6(__assign6({}, rootFilter), {
        filters
      });
    },
    insertGroup: function insertGroup(group, rootFilter) {
      return __assign6(__assign6({}, rootFilter), {
        filters: __spreadArray6([group], rootFilter.filters, true)
      });
    },
    isControlled: function isControlled() {
      return this.$props.expanded !== void 0;
    },
    onFilterExpand: function onFilterExpand() {
      var isControlled2 = this.isControlled();
      var nextValue = !(isControlled2 ? this.$props.expanded : this.currentExpanded);
      this.$emit("expandchange", nextValue);
      if (!isControlled2) {
        this.currentExpanded = nextValue;
      }
    },
    filterChangeHandler: function filterChangeHandler(e, filterIndex) {
      this.filterChange(filterIndex || 0, e);
    },
    firstFilterChange: function firstFilterChange(e) {
      this.filterChange(0, e);
    },
    secondFilterChange: function secondFilterChange(e) {
      this.filterChange(1, e);
    },
    filterChange: function filterChange(filterIndex, e) {
      var filters = this.filterGroup.filters.map(function(f, i) {
        if (i === filterIndex) {
          return __assign6(__assign6({}, f), {
            value: e.value,
            operator: e.operator
          });
        }
        return f;
      });
      this.filterGroup = __assign6(__assign6({}, this.filterGroup), {
        filters
      });
    },
    logicChange: function logicChange(e) {
      this.filterGroup = __assign6(__assign6({}, this.filterGroup), {
        logic: e.target.value.operator
      });
    },
    clear: function clear(e) {
      e.preventDefault();
      if (!hasListener.call(this, "filterchange")) {
        return;
      }
      var field = this.$props.column.field;
      var rootFilter = rootFilterOrDefault(this.$props.filter);
      var filterGroup = filterGroupByField(field, this.$props.filter);
      var rootFilters = rootFilter.filters.filter(function(f) {
        return f !== filterGroup;
      });
      if (!rootFilters.length) {
        this.$emit("filterchange", null, {
          event: e,
          field: this.$props.column.field
        });
      } else {
        this.$emit("filterchange", __assign6(__assign6({}, rootFilter), {
          filters: rootFilters
        }), {
          event: e,
          field: this.$props.column.field
        });
      }
      this.$emit("closemenu");
    },
    currentFilterGroup: function currentFilterGroup() {
      return __assign6(__assign6({}, this.filterGroup), {
        filters: this.filterGroup.filters.filter(function(nf) {
          return nf.value !== void 0 && nf.value !== null && nf.value !== "" || nf.value === null && nf.operator;
        })
      });
    },
    submit: function submit(e) {
      e.preventDefault();
      if (!hasListener.call(this, "filterchange")) {
        return;
      }
      var field = this.$props.column.field;
      var rootFilter = rootFilterOrDefault(this.$props.filter);
      var filterGroup = filterGroupByField(field, this.$props.filter);
      var currentFilterGroup2 = this.currentFilterGroup();
      var updatedFilter = null;
      if (filterGroup && currentFilterGroup2.filters.length > 0) {
        var rootFilters = rootFilter.filters.map(function(f) {
          if (f === filterGroup) {
            return currentFilterGroup2;
          }
          return f;
        });
        updatedFilter = __assign6(__assign6({}, rootFilter), {
          filters: rootFilters
        });
      } else if (currentFilterGroup2.filters.length === 0) {
        var rootFilters = rootFilter.filters.filter(function(f) {
          return f !== filterGroup;
        });
        if (rootFilters.length) {
          updatedFilter = __assign6(__assign6({}, rootFilter), {
            filters: rootFilters
          });
        }
      } else {
        updatedFilter = __assign6(__assign6({}, rootFilter), {
          filters: __spreadArray6(__spreadArray6([], rootFilter.filters, true), [currentFilterGroup2], false)
        });
      }
      this.$emit("filterchange", updatedFilter, {
        event: e,
        field: this.$props.column.field
      });
      this.$emit("closemenu");
    },
    handleFocus: function handleFocus2(e) {
      this.$emit("filterfocus", e);
    }
  },
  // @ts-ignore
  setup: !isV365 ? void 0 : function() {
    var v3 = !!isV365;
    var kendoLocalizationService = inject16("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render31(createElement) {
    var _this2 = this;
    var _this = this;
    var h = gh63 || createElement;
    var _a4 = this.$props, column = _a4.column, filterUI = _a4.filterUI, hideSecondFilter = _a4.hideSecondFilter, filterOperators = _a4.filterOperators;
    if (!column || !column.field) {
      return h("div");
    }
    var filterType = column.filter || "text";
    var currentHideSecondFilter = hideSecondFilter !== void 0 ? hideSecondFilter : defaultHideSecondFilter2[filterType];
    var localizationService = provideLocalizationService(this);
    var filters = this.filterGroup.filters;
    var currentOperators = operatorMap2(filterOperators[filterType], localizationService);
    var booleanValues = operatorMap2(booleanFilterValues2, localizationService);
    var firstFilterCellProps = {
      field: column.field,
      value: filters[0].value,
      operator: filters[0].operator,
      operators: currentOperators,
      booleanValues,
      filterType
    };
    var secondFilterCellProps = {
      field: column.field,
      value: filters[1].value,
      operator: filters[1].operator,
      operators: currentOperators,
      booleanValues,
      filterType
    };
    var filterLogic = this.filterGroup.logic;
    var logicData = operatorMap2(filterLogicList2, localizationService);
    var logicProps = {
      value: logicData.find(function(item) {
        return item.operator === (filterLogic === null ? "" : filterLogic);
      }),
      data: logicData
    };
    var isFilterValid = this.currentFilterGroup().filters.length !== 0;
    var expandState = this.isControlled() ? this.$props.expanded : this.currentExpanded;
    var firstField = firstFilterCellProps.field, firstValue = firstFilterCellProps.value, firstOperator = firstFilterCellProps.operator, firstBooleanValues = firstFilterCellProps.booleanValues, firstFilterType = firstFilterCellProps.filterType, secondField = secondFilterCellProps.field, secondValue = secondFilterCellProps.value, secondOperator = secondFilterCellProps.operator, secondBooleanValues = secondFilterCellProps.booleanValues, secondFilterType = secondFilterCellProps.filterType;
    var filterUIRender = filterUI && templateRendering.call(this, filterUI, getListeners.call(this));
    var render54 = getTemplate.call(this, {
      h,
      template: filterUIRender,
      defaultRendering: void 0,
      additionalProps: this.$props,
      additionalListeners: {
        change: this.filterChangeHandler,
        logicchange: this.logicChange
      }
    });
    return (
      // @ts-ignore function children
      h(GridColumnMenuItemGroup, this.v3 ? function() {
        return [
          // @ts-ignore
          h(GridColumnMenuItem, {
            title: localizationService.toLanguageString(filterTitle, messages2[filterTitle]),
            attrs: _this2.v3 ? void 0 : {
              title: localizationService.toLanguageString(filterTitle, messages2[filterTitle]),
              icon: "filter",
              svgIcon: filterIcon
            },
            icon: "filter",
            svgIcon: filterIcon,
            onMenuitemclick: _this2.onFilterExpand,
            on: _this2.v3 ? void 0 : {
              "menuitemclick": _this2.onFilterExpand
            }
          }),
          // @ts-ignore function children
          h(GridColumnMenuItemContent, {
            show: !!expandState,
            attrs: _this2.v3 ? void 0 : {
              show: !!expandState
            }
          }, _this2.v3 ? function() {
            return [h("div", {
              "class": "kendo-grid-filter-menu-container"
            }, [h("form", {
              "class": "k-filter-menu k-group k-reset k-border-up",
              onSubmit: _this2.submit,
              on: _this2.v3 ? void 0 : {
                "submit": _this2.submit,
                "reset": _this2.clear
              },
              onReset: _this2.clear
            }, [h("div", {
              "class": "k-filter-menu-container"
            }, [
              // @ts-ignore
              !filterUI && [h(ColumnMenuFilterOperators2, {
                operator: firstOperator,
                attrs: _this2.v3 ? void 0 : {
                  operator: firstOperator,
                  filterType: firstFilterType,
                  operators: currentOperators
                },
                filterType: firstFilterType,
                onChange: function onChange(e) {
                  _this.filterChangeHandler(e, 0);
                },
                on: _this2.v3 ? void 0 : {
                  "change": function onChange(e) {
                    _this.filterChangeHandler(e, 0);
                  }
                },
                operators: currentOperators
              }), h(GridColumnMenuFilterCell, {
                field: firstField,
                attrs: _this2.v3 ? void 0 : {
                  field: firstField,
                  value: firstValue,
                  operator: firstOperator,
                  booleanValues: firstBooleanValues,
                  filterType: firstFilterType,
                  operators: currentOperators
                },
                value: firstValue,
                operator: firstOperator,
                booleanValues: firstBooleanValues,
                filterType: firstFilterType,
                onFiltercellfocus: _this2.handleFocus,
                on: _this2.v3 ? void 0 : {
                  "filtercellfocus": _this2.handleFocus,
                  "change": function change(e) {
                    _this.filterChangeHandler(e, 0);
                  }
                },
                onChange: function change(e) {
                  _this.filterChangeHandler(e, 0);
                },
                operators: currentOperators
              })],
              !hideSecondFilter && !filterUI && [
                // @ts-ignore
                h(DropDownList, {
                  onChange: _this2.logicChange,
                  on: _this2.v3 ? void 0 : {
                    "change": _this2.logicChange
                  },
                  "class": "k-filter-and",
                  "data-items": logicProps.data,
                  attrs: _this2.v3 ? void 0 : {
                    "data-items": logicProps.data,
                    value: logicProps.value,
                    textField: "text"
                  },
                  value: logicProps.value,
                  textField: "text"
                }),
                // @ts-ignore
                h(ColumnMenuFilterOperators2, {
                  operator: secondOperator,
                  attrs: _this2.v3 ? void 0 : {
                    operator: secondOperator,
                    filterType: secondFilterType,
                    operators: currentOperators
                  },
                  filterType: secondFilterType,
                  onChange: function onChange(e) {
                    _this.filterChangeHandler(e, 1);
                  },
                  on: _this2.v3 ? void 0 : {
                    "change": function onChange(e) {
                      _this.filterChangeHandler(e, 1);
                    }
                  },
                  operators: currentOperators
                }),
                // @ts-ignore
                h(GridColumnMenuFilterCell, {
                  field: secondField,
                  attrs: _this2.v3 ? void 0 : {
                    field: secondField,
                    value: secondValue,
                    operator: secondOperator,
                    booleanValues: secondBooleanValues,
                    filterType: secondFilterType,
                    operators: currentOperators
                  },
                  value: secondValue,
                  operator: secondOperator,
                  booleanValues: secondBooleanValues,
                  filterType: secondFilterType,
                  onFiltercellfocus: _this2.handleFocus,
                  on: _this2.v3 ? void 0 : {
                    "filtercellfocus": _this2.handleFocus,
                    "change": function change(e) {
                      _this.filterChangeHandler(e, 1);
                    }
                  },
                  onChange: function change(e) {
                    _this.filterChangeHandler(e, 1);
                  },
                  operators: currentOperators
                })
              ],
              filterUI && render54,
              h("div", {
                "class": "k-columnmenu-actions"
              }, [
                // @ts-ignore function children
                h(Button, {
                  themeColor: "primary",
                  attrs: _this2.v3 ? void 0 : {
                    themeColor: "primary",
                    disabled: !isFilterValid
                  },
                  disabled: !isFilterValid
                }, _this2.v3 ? function() {
                  return [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])];
                } : [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])]),
                // @ts-ignore function children
                h(Button, {
                  type: "reset",
                  attrs: _this2.v3 ? void 0 : {
                    type: "reset"
                  }
                }, _this2.v3 ? function() {
                  return [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])];
                } : [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])])
              ])
            ])])])];
          } : [h("div", {
            "class": "kendo-grid-filter-menu-container"
          }, [h("form", {
            "class": "k-filter-menu k-group k-reset k-border-up",
            onSubmit: _this2.submit,
            on: _this2.v3 ? void 0 : {
              "submit": _this2.submit,
              "reset": _this2.clear
            },
            onReset: _this2.clear
          }, [h("div", {
            "class": "k-filter-menu-container"
          }, [!filterUI && [h(ColumnMenuFilterOperators2, {
            operator: firstOperator,
            attrs: _this2.v3 ? void 0 : {
              operator: firstOperator,
              filterType: firstFilterType,
              operators: currentOperators
            },
            filterType: firstFilterType,
            onChange: function onChange(e) {
              _this.filterChangeHandler(e, 0);
            },
            on: _this2.v3 ? void 0 : {
              "change": function onChange(e) {
                _this.filterChangeHandler(e, 0);
              }
            },
            operators: currentOperators
          }), h(GridColumnMenuFilterCell, {
            field: firstField,
            attrs: _this2.v3 ? void 0 : {
              field: firstField,
              value: firstValue,
              operator: firstOperator,
              booleanValues: firstBooleanValues,
              filterType: firstFilterType,
              operators: currentOperators
            },
            value: firstValue,
            operator: firstOperator,
            booleanValues: firstBooleanValues,
            filterType: firstFilterType,
            onFiltercellfocus: _this2.handleFocus,
            on: _this2.v3 ? void 0 : {
              "filtercellfocus": _this2.handleFocus,
              "change": function change(e) {
                _this.filterChangeHandler(e, 0);
              }
            },
            onChange: function change(e) {
              _this.filterChangeHandler(e, 0);
            },
            operators: currentOperators
          })], !hideSecondFilter && !filterUI && [h(DropDownList, {
            onChange: _this2.logicChange,
            on: _this2.v3 ? void 0 : {
              "change": _this2.logicChange
            },
            "class": "k-filter-and",
            "data-items": logicProps.data,
            attrs: _this2.v3 ? void 0 : {
              "data-items": logicProps.data,
              value: logicProps.value,
              textField: "text"
            },
            value: logicProps.value,
            textField: "text"
          }), h(ColumnMenuFilterOperators2, {
            operator: secondOperator,
            attrs: _this2.v3 ? void 0 : {
              operator: secondOperator,
              filterType: secondFilterType,
              operators: currentOperators
            },
            filterType: secondFilterType,
            onChange: function onChange(e) {
              _this.filterChangeHandler(e, 1);
            },
            on: _this2.v3 ? void 0 : {
              "change": function onChange(e) {
                _this.filterChangeHandler(e, 1);
              }
            },
            operators: currentOperators
          }), h(GridColumnMenuFilterCell, {
            field: secondField,
            attrs: _this2.v3 ? void 0 : {
              field: secondField,
              value: secondValue,
              operator: secondOperator,
              booleanValues: secondBooleanValues,
              filterType: secondFilterType,
              operators: currentOperators
            },
            value: secondValue,
            operator: secondOperator,
            booleanValues: secondBooleanValues,
            filterType: secondFilterType,
            onFiltercellfocus: _this2.handleFocus,
            on: _this2.v3 ? void 0 : {
              "filtercellfocus": _this2.handleFocus,
              "change": function change(e) {
                _this.filterChangeHandler(e, 1);
              }
            },
            onChange: function change(e) {
              _this.filterChangeHandler(e, 1);
            },
            operators: currentOperators
          })], filterUI && render54, h("div", {
            "class": "k-columnmenu-actions"
          }, [h(Button, {
            themeColor: "primary",
            attrs: _this2.v3 ? void 0 : {
              themeColor: "primary",
              disabled: !isFilterValid
            },
            disabled: !isFilterValid
          }, _this2.v3 ? function() {
            return [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])];
          } : [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])]), h(Button, {
            type: "reset",
            attrs: _this2.v3 ? void 0 : {
              type: "reset"
            }
          }, _this2.v3 ? function() {
            return [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])];
          } : [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])])])])])])])
        ];
      } : [h(GridColumnMenuItem, {
        title: localizationService.toLanguageString(filterTitle, messages2[filterTitle]),
        attrs: _this2.v3 ? void 0 : {
          title: localizationService.toLanguageString(filterTitle, messages2[filterTitle]),
          icon: "filter",
          svgIcon: filterIcon
        },
        icon: "filter",
        svgIcon: filterIcon,
        onMenuitemclick: _this2.onFilterExpand,
        on: _this2.v3 ? void 0 : {
          "menuitemclick": _this2.onFilterExpand
        }
      }), h(GridColumnMenuItemContent, {
        show: !!expandState,
        attrs: _this2.v3 ? void 0 : {
          show: !!expandState
        }
      }, _this2.v3 ? function() {
        return [h("div", {
          "class": "kendo-grid-filter-menu-container"
        }, [h("form", {
          "class": "k-filter-menu k-group k-reset k-border-up",
          onSubmit: _this2.submit,
          on: _this2.v3 ? void 0 : {
            "submit": _this2.submit,
            "reset": _this2.clear
          },
          onReset: _this2.clear
        }, [h("div", {
          "class": "k-filter-menu-container"
        }, [!filterUI && [h(ColumnMenuFilterOperators2, {
          operator: firstOperator,
          attrs: _this2.v3 ? void 0 : {
            operator: firstOperator,
            filterType: firstFilterType,
            operators: currentOperators
          },
          filterType: firstFilterType,
          onChange: function onChange(e) {
            _this.filterChangeHandler(e, 0);
          },
          on: _this2.v3 ? void 0 : {
            "change": function onChange(e) {
              _this.filterChangeHandler(e, 0);
            }
          },
          operators: currentOperators
        }), h(GridColumnMenuFilterCell, {
          field: firstField,
          attrs: _this2.v3 ? void 0 : {
            field: firstField,
            value: firstValue,
            operator: firstOperator,
            booleanValues: firstBooleanValues,
            filterType: firstFilterType,
            operators: currentOperators
          },
          value: firstValue,
          operator: firstOperator,
          booleanValues: firstBooleanValues,
          filterType: firstFilterType,
          onFiltercellfocus: _this2.handleFocus,
          on: _this2.v3 ? void 0 : {
            "filtercellfocus": _this2.handleFocus,
            "change": function change(e) {
              _this.filterChangeHandler(e, 0);
            }
          },
          onChange: function change(e) {
            _this.filterChangeHandler(e, 0);
          },
          operators: currentOperators
        })], !hideSecondFilter && !filterUI && [h(DropDownList, {
          onChange: _this2.logicChange,
          on: _this2.v3 ? void 0 : {
            "change": _this2.logicChange
          },
          "class": "k-filter-and",
          "data-items": logicProps.data,
          attrs: _this2.v3 ? void 0 : {
            "data-items": logicProps.data,
            value: logicProps.value,
            textField: "text"
          },
          value: logicProps.value,
          textField: "text"
        }), h(ColumnMenuFilterOperators2, {
          operator: secondOperator,
          attrs: _this2.v3 ? void 0 : {
            operator: secondOperator,
            filterType: secondFilterType,
            operators: currentOperators
          },
          filterType: secondFilterType,
          onChange: function onChange(e) {
            _this.filterChangeHandler(e, 1);
          },
          on: _this2.v3 ? void 0 : {
            "change": function onChange(e) {
              _this.filterChangeHandler(e, 1);
            }
          },
          operators: currentOperators
        }), h(GridColumnMenuFilterCell, {
          field: secondField,
          attrs: _this2.v3 ? void 0 : {
            field: secondField,
            value: secondValue,
            operator: secondOperator,
            booleanValues: secondBooleanValues,
            filterType: secondFilterType,
            operators: currentOperators
          },
          value: secondValue,
          operator: secondOperator,
          booleanValues: secondBooleanValues,
          filterType: secondFilterType,
          onFiltercellfocus: _this2.handleFocus,
          on: _this2.v3 ? void 0 : {
            "filtercellfocus": _this2.handleFocus,
            "change": function change(e) {
              _this.filterChangeHandler(e, 1);
            }
          },
          onChange: function change(e) {
            _this.filterChangeHandler(e, 1);
          },
          operators: currentOperators
        })], filterUI && render54, h("div", {
          "class": "k-columnmenu-actions"
        }, [h(Button, {
          themeColor: "primary",
          attrs: _this2.v3 ? void 0 : {
            themeColor: "primary",
            disabled: !isFilterValid
          },
          disabled: !isFilterValid
        }, _this2.v3 ? function() {
          return [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])];
        } : [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])]), h(Button, {
          type: "reset",
          attrs: _this2.v3 ? void 0 : {
            type: "reset"
          }
        }, _this2.v3 ? function() {
          return [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])];
        } : [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])])])])])])];
      } : [h("div", {
        "class": "kendo-grid-filter-menu-container"
      }, [h("form", {
        "class": "k-filter-menu k-group k-reset k-border-up",
        onSubmit: _this2.submit,
        on: _this2.v3 ? void 0 : {
          "submit": _this2.submit,
          "reset": _this2.clear
        },
        onReset: _this2.clear
      }, [h("div", {
        "class": "k-filter-menu-container"
      }, [!filterUI && [h(ColumnMenuFilterOperators2, {
        operator: firstOperator,
        attrs: _this2.v3 ? void 0 : {
          operator: firstOperator,
          filterType: firstFilterType,
          operators: currentOperators
        },
        filterType: firstFilterType,
        onChange: function onChange(e) {
          _this.filterChangeHandler(e, 0);
        },
        on: _this2.v3 ? void 0 : {
          "change": function onChange(e) {
            _this.filterChangeHandler(e, 0);
          }
        },
        operators: currentOperators
      }), h(GridColumnMenuFilterCell, {
        field: firstField,
        attrs: _this2.v3 ? void 0 : {
          field: firstField,
          value: firstValue,
          operator: firstOperator,
          booleanValues: firstBooleanValues,
          filterType: firstFilterType,
          operators: currentOperators
        },
        value: firstValue,
        operator: firstOperator,
        booleanValues: firstBooleanValues,
        filterType: firstFilterType,
        onFiltercellfocus: _this2.handleFocus,
        on: _this2.v3 ? void 0 : {
          "filtercellfocus": _this2.handleFocus,
          "change": function change(e) {
            _this.filterChangeHandler(e, 0);
          }
        },
        onChange: function change(e) {
          _this.filterChangeHandler(e, 0);
        },
        operators: currentOperators
      })], !hideSecondFilter && !filterUI && [h(DropDownList, {
        onChange: _this2.logicChange,
        on: _this2.v3 ? void 0 : {
          "change": _this2.logicChange
        },
        "class": "k-filter-and",
        "data-items": logicProps.data,
        attrs: _this2.v3 ? void 0 : {
          "data-items": logicProps.data,
          value: logicProps.value,
          textField: "text"
        },
        value: logicProps.value,
        textField: "text"
      }), h(ColumnMenuFilterOperators2, {
        operator: secondOperator,
        attrs: _this2.v3 ? void 0 : {
          operator: secondOperator,
          filterType: secondFilterType,
          operators: currentOperators
        },
        filterType: secondFilterType,
        onChange: function onChange(e) {
          _this.filterChangeHandler(e, 1);
        },
        on: _this2.v3 ? void 0 : {
          "change": function onChange(e) {
            _this.filterChangeHandler(e, 1);
          }
        },
        operators: currentOperators
      }), h(GridColumnMenuFilterCell, {
        field: secondField,
        attrs: _this2.v3 ? void 0 : {
          field: secondField,
          value: secondValue,
          operator: secondOperator,
          booleanValues: secondBooleanValues,
          filterType: secondFilterType,
          operators: currentOperators
        },
        value: secondValue,
        operator: secondOperator,
        booleanValues: secondBooleanValues,
        filterType: secondFilterType,
        onFiltercellfocus: _this2.handleFocus,
        on: _this2.v3 ? void 0 : {
          "filtercellfocus": _this2.handleFocus,
          "change": function change(e) {
            _this.filterChangeHandler(e, 1);
          }
        },
        onChange: function change(e) {
          _this.filterChangeHandler(e, 1);
        },
        operators: currentOperators
      })], filterUI && render54, h("div", {
        "class": "k-columnmenu-actions"
      }, [h(Button, {
        themeColor: "primary",
        attrs: _this2.v3 ? void 0 : {
          themeColor: "primary",
          disabled: !isFilterValid
        },
        disabled: !isFilterValid
      }, _this2.v3 ? function() {
        return [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])];
      } : [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])]), h(Button, {
        type: "reset",
        attrs: _this2.v3 ? void 0 : {
          type: "reset"
        }
      }, _this2.v3 ? function() {
        return [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])];
      } : [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])])])])])])])])
    );
  }
};
var GridColumnMenuFilter = GridColumnMenuFilterVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/ColumnMenuContent.js
var allVue66 = vue_runtime_esm_bundler_exports;
var gh64 = allVue66.h;
var isV366 = allVue66.version && allVue66.version[0] === "3";
var ColumnMenuContentVue2 = {
  name: "KendoColumnMenuContent",
  inheritAttrs: false,
  props: {
    column: Object,
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    filter: Object,
    filterOperators: Object,
    filterable: Boolean,
    render: [Boolean, String, Function, Object]
  },
  methods: {
    handleFocus: function handleFocus3(e) {
      this.$emit("contentfocus", e);
    },
    closeMenu: function closeMenu() {
      this.$emit("closemenu");
    },
    expandChange: function expandChange() {
      this.$emit("expandchange");
    },
    sortChange: function sortChange(newDescriptor, e) {
      this.$emit("sortchange", newDescriptor, e);
    },
    filterChange: function filterChange2(newDescriptor, e) {
      this.$emit("filterchange", newDescriptor, e);
    },
    contentKeyDown: function contentKeyDown(event) {
      if (event.keyCode === Keys.esc) {
        this.$emit("closemenu");
      }
    }
  },
  // @ts-ignore
  setup: !isV366 ? void 0 : function() {
    var v3 = !!isV366;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render32(createElement) {
    var h = gh64 || createElement;
    var renderTemplate = this.$props.render;
    var defaultRendering = h("div", {
      style: this.$attrs.style,
      onKeydown: this.contentKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.contentKeyDown
      }
    }, [
      // @ts-ignore
      h(GridColumnMenuSort, {
        column: this.$props.column,
        attrs: this.v3 ? void 0 : {
          column: this.$props.column,
          sortable: this.$props.sortable,
          sort: this.$props.sort
        },
        sortable: this.$props.sortable,
        sort: this.$props.sort,
        onClosemenu: this.closeMenu,
        on: this.v3 ? void 0 : {
          "closemenu": this.closeMenu,
          "sortchange": this.sortChange
        },
        onSortchange: this.sortChange
      }),
      // @ts-ignore
      h(GridColumnMenuFilter, {
        column: this.$props.column,
        attrs: this.v3 ? void 0 : {
          column: this.$props.column,
          filterable: this.$props.filterable,
          filter: this.$props.filter,
          filterOperators: this.$props.filterOperators
        },
        filterable: this.$props.filterable,
        filter: this.$props.filter,
        filterOperators: this.$props.filterOperators,
        onFilterfocus: this.handleFocus,
        on: this.v3 ? void 0 : {
          "filterfocus": this.handleFocus,
          "closemenu": this.closeMenu,
          "expandchange": this.expandChange,
          "filterchange": this.filterChange
        },
        onClosemenu: this.closeMenu,
        onExpandchange: this.expandChange,
        onFilterchange: this.filterChange
      })
    ]);
    return getTemplate.call(this, {
      h,
      template: typeof renderTemplate !== "boolean" && renderTemplate,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        closemenu: this.closeMenu,
        filterchange: this.filterChange,
        sortchange: this.sortChange,
        expandchange: this.expandChange,
        contentfocus: this.handleFocus
      }
    });
  }
};
var ColumnMenuContent2 = ColumnMenuContentVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/ColumnMenu.js
var allVue67 = vue_runtime_esm_bundler_exports;
var gh65 = allVue67.h;
var isV367 = allVue67.version && allVue67.version[0] === "3";
var inject17 = allVue67.inject;
var ColumnMenuVue2 = {
  name: "KendoColumnMenu",
  props: {
    animate: {
      type: [Boolean, Object],
      default: function _default3() {
        return true;
      }
    },
    column: Object,
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    opened: Boolean,
    filter: Object,
    filterable: Boolean,
    filterOperators: Object,
    render: [Boolean, String, Function, Object]
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data8() {
    return {
      show: false,
      blurTimeout: void 0
    };
  },
  created: function created5() {
    this._anchor = guid();
  },
  computed: {
    currentOpen: function currentOpen() {
      return this.show || this.$props.opened;
    }
  },
  watch: {
    currentOpen: function currentOpen2(newOpened) {
      this.$nextTick(function() {
        this._content = this.$refs.content;
        if (newOpened && this._content) {
          var focusableElements = tableKeyboardNavigationTools.getFocusableElements(this._content, {
            focusable: true
          });
          if (focusableElements.length) {
            focusableElements[0].focus();
          } else {
            this._content.focus();
          }
        }
      });
    }
  },
  methods: {
    blur: function blur() {
      var _this = this;
      clearTimeout(this.blurTimeout);
      this.blurTimeout = setTimeout(function() {
        _this.closeMenu();
      }, 200);
    },
    focus: function focus() {
      clearTimeout(this.blurTimeout);
    },
    handleFocus: function handleFocus4(_) {
      clearTimeout(this.blurTimeout);
    },
    anchorClick: function anchorClick(e) {
      e.preventDefault();
      this.show = !this.show;
    },
    closeMenu: function closeMenu2() {
      this.$emit("close");
      this.show = false;
    },
    sortChange: function sortChange2(newDescriptor, e) {
      this.$emit("sortchange", newDescriptor, e);
    },
    filterChange: function filterChange3(newDescriptor, e) {
      this.$emit("filterchange", newDescriptor, e);
    }
  },
  // @ts-ignore
  setup: !isV367 ? void 0 : function() {
    var v3 = !!isV367;
    var kendoLocalizationService = inject17("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render33(createElement) {
    var _this2 = this;
    var h = gh65 || createElement;
    var renderTemplate = this.$props.render;
    var ls2 = provideLocalizationService(this);
    return h("div", {
      style: {
        display: "inline"
      }
    }, [
      h("a", {
        "class": "k-grid-header-menu k-grid-column-menu",
        title: "".concat(this.$props.column.field, " ").concat(ls2.toLanguageString(columnMenu2, messages2[columnMenu2])),
        attrs: this.v3 ? void 0 : {
          title: "".concat(this.$props.column.field, " ").concat(ls2.toLanguageString(columnMenu2, messages2[columnMenu2])),
          href: "#"
        },
        ref: setRef(this, "kendoAnchor", this._anchor),
        onClick: this.anchorClick,
        on: this.v3 ? void 0 : {
          "click": this.anchorClick
        },
        href: "#"
      }, [h(Icon, {
        name: "more-vertical",
        attrs: this.v3 ? void 0 : {
          name: "more-vertical",
          icon: moreVerticalIcon
        },
        icon: moreVerticalIcon
      })]),
      // @ts-ignore function children
      h(Popup, {
        animate: this.$props.animate,
        attrs: this.v3 ? void 0 : {
          animate: this.$props.animate,
          anchor: this._anchor,
          show: this.currentOpen
        },
        anchor: this._anchor,
        show: this.currentOpen
      }, this.v3 ? function() {
        return [h("div", {
          ref: "content",
          "class": "k-grid-columnmenu-popup",
          tabindex: 0,
          attrs: _this2.v3 ? void 0 : {
            tabindex: 0
          },
          onFocusout: _this2.blur,
          on: _this2.v3 ? void 0 : {
            "focusout": _this2.blur,
            "focusin": _this2.focus
          },
          onFocusin: _this2.focus,
          style: {
            outline: "none",
            width: "230px"
          }
        }, [
          // @ts-ignore
          h(ColumnMenuContent2, {
            column: _this2.$props.column,
            attrs: _this2.v3 ? void 0 : {
              column: _this2.$props.column,
              sortable: _this2.$props.sortable,
              sort: _this2.$props.sort,
              filter: _this2.$props.filter,
              filterable: _this2.$props.filterable,
              filterOperators: _this2.$props.filterOperators,
              render: renderTemplate
            },
            sortable: _this2.$props.sortable,
            sort: _this2.$props.sort,
            filter: _this2.$props.filter,
            filterable: _this2.$props.filterable,
            filterOperators: _this2.$props.filterOperators,
            render: renderTemplate,
            onContentfocus: _this2.handleFocus,
            on: _this2.v3 ? void 0 : {
              "contentfocus": _this2.handleFocus,
              "closemenu": _this2.closeMenu,
              "sortchange": _this2.sortChange,
              "filterchange": _this2.filterChange
            },
            onClosemenu: _this2.closeMenu,
            onSortchange: _this2.sortChange,
            onFilterchange: _this2.filterChange
          })
        ])];
      } : [h("div", {
        ref: "content",
        "class": "k-grid-columnmenu-popup",
        tabindex: 0,
        attrs: _this2.v3 ? void 0 : {
          tabindex: 0
        },
        onFocusout: _this2.blur,
        on: _this2.v3 ? void 0 : {
          "focusout": _this2.blur,
          "focusin": _this2.focus
        },
        onFocusin: _this2.focus,
        style: {
          outline: "none",
          width: "230px"
        }
      }, [h(ColumnMenuContent2, {
        column: _this2.$props.column,
        attrs: _this2.v3 ? void 0 : {
          column: _this2.$props.column,
          sortable: _this2.$props.sortable,
          sort: _this2.$props.sort,
          filter: _this2.$props.filter,
          filterable: _this2.$props.filterable,
          filterOperators: _this2.$props.filterOperators,
          render: renderTemplate
        },
        sortable: _this2.$props.sortable,
        sort: _this2.$props.sort,
        filter: _this2.$props.filter,
        filterable: _this2.$props.filterable,
        filterOperators: _this2.$props.filterOperators,
        render: renderTemplate,
        onContentfocus: _this2.handleFocus,
        on: _this2.v3 ? void 0 : {
          "contentfocus": _this2.handleFocus,
          "closemenu": _this2.closeMenu,
          "sortchange": _this2.sortChange,
          "filterchange": _this2.filterChange
        },
        onClosemenu: _this2.closeMenu,
        onSortchange: _this2.sortChange,
        onFilterchange: _this2.filterChange
      })])])
    ]);
  }
};
var ColumnMenu2 = ColumnMenuVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/header/HeaderRow.js
var allVue68 = vue_runtime_esm_bundler_exports;
var gh66 = allVue68.h;
var isV368 = allVue68.version && allVue68.version[0] === "3";
var ariaSortMap = {
  "none": "none",
  "asc": "ascending",
  "desc": "descending"
};
var sortSeqMap2 = {
  true: {
    "asc": "desc",
    "desc": "",
    "": "asc"
  },
  false: {
    "asc": "desc",
    "desc": "asc",
    "": "asc"
  }
};
var HeaderRowVue2 = {
  name: "KendoHeaderRow",
  props: {
    grid: Object,
    cellRender: [String, Function, Object],
    groupable: [Boolean, Object],
    reorderable: Boolean,
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    filter: Object,
    filterable: Boolean,
    filterOperators: Object,
    filterChange: Function,
    filterRow: Object,
    columns: Array,
    columnsMap: Array,
    columnResize: Object,
    columnMenu: [Boolean, String, Function, Object],
    columnMenuAnimate: {
      type: [Boolean, Object],
      default: function _default4() {
        return true;
      }
    },
    isRtl: Boolean,
    isColCountDefined: Boolean,
    // columnsInitial prop: 
    // Needed for hidden column scenarios. By this value we can define correct aria-colindex attribute
    columnsInitial: Array
  },
  inject: {
    onNavFocus: {
      default: noop
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data9() {
    return {
      columnMenuOpened: {}
    };
  },
  created: function created6() {
    this.serviceIndex = 0;
    this.index = -1;
    this._element = null;
    this.cellClick = this.cellClick.bind(this);
  },
  methods: {
    pressHandler: function pressHandler(event, element) {
      this.$emit("pressHandler", event, element);
    },
    dragHandler: function dragHandler(event, element) {
      this.$emit("dragHandler", event, element);
    },
    releaseHandler: function releaseHandler(event) {
      this.$emit("releaseHandler", event);
    },
    selectionChangeHandler: function selectionChangeHandler(options) {
      this.$emit("selectionchange", options);
    },
    cellClick: function cellClick(e, column) {
      e.preventDefault();
      if (!hasListener.call(this, "sortChange")) {
        return;
      }
      var _a4 = normalize3(this.$props.sortable || false, column.sortable || false), allowUnsort = _a4.allowUnsort, mode = _a4.mode;
      var oldDescriptor = (this.$props.sort || []).filter(function(d) {
        return d.field === column.field;
      })[0];
      var dir = sortSeqMap2[allowUnsort][oldDescriptor && oldDescriptor.dir || ""];
      var newDescriptor = mode === "single" ? [] : (this.$props.sort || []).filter(function(d) {
        return d.field !== column.field;
      });
      if (dir !== "" && column.field) {
        newDescriptor.push({
          field: column.field,
          dir
        });
      }
      this.sortChangeHandler(newDescriptor, {
        event: e,
        field: column.field
      });
    },
    sortChangeHandler: function sortChangeHandler(newDescriptor, e) {
      this.$emit("sortChange", newDescriptor, e);
    },
    filterChangeHandler: function filterChangeHandler2(newDescriptor, e) {
      this.$emit("filterChange", newDescriptor, e);
    },
    cellClass: function cellClass(field, headerClassName, locked) {
      var customClass = headerClassName ? " " + headerClassName : "";
      var result = "k-header" + (locked ? " k-grid-header-sticky" : "") + customClass;
      if (this.$props.sort && this.$props.sort.filter(function(descriptor) {
        return descriptor.field === field;
      }).length > 0) {
        result += " k-sorted";
      }
      return result;
    },
    cellKeyDown: function cellKeyDown(event, column) {
      var _a4;
      if (event.defaultPrevented) {
        return;
      }
      if (event.keyCode === Keys.enter) {
        this.cellClick(event, column);
      }
      if (event.altKey && event.keyCode === Keys.down) {
        if (column.field) {
          event.preventDefault();
          this.columnMenuOpened = (_a4 = {}, _a4[column.field] = true, _a4);
        }
      }
    },
    getTemplate: function getTemplate3(template) {
      return templateRendering.call(this.$props.grid, template, getListeners.call(this.$props.grid));
    },
    columnMenuClose: function columnMenuClose() {
      this.onNavFocus({});
      this.columnMenuOpened = {};
    }
  },
  computed: {
    element: {
      get: function get7() {
        return this._element;
      }
    },
    theadClasses: {
      get: function get8() {
        return {
          "k-table-thead": true,
          "k-grid-header": true
        };
      }
    }
  },
  // @ts-ignore
  setup: !isV368 ? void 0 : function() {
    var v3 = !!isV368;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render34(createElement) {
    var h = gh66 || createElement;
    var localizationService = provideLocalizationService(this);
    var ariaLabelSortableColumn = localizationService.toLanguageString(sortableColumnAriaLabel, messages2[sortableColumnAriaLabel]);
    var ariaLabelAscendingSort = localizationService.toLanguageString(sortableColumnAscendingAriaLabel, messages2[sortableColumnAscendingAriaLabel]);
    var ariaLabelDescendingSort = localizationService.toLanguageString(sortableColumnDescendingAriaLabel, messages2[sortableColumnDescendingAriaLabel]);
    this.serviceIndex = 0;
    this.index = -1;
    var cells = function cells2(rowIndexes) {
      return rowIndexes.map(function(columnIndex) {
        var _this2 = this;
        var _this = this;
        var column = this.$props.columns[columnIndex];
        var sortable = this.$props.sortable && column.sortable;
        var sortIndex3 = this.$props.sort ? this.$props.sort.findIndex(function(s) {
          return s.field === column.field;
        }) : -1;
        var sortDir = sortIndex3 >= 0 ? this.$props.sort[sortIndex3].dir || "none" : "none";
        var sortIconRenderer = function sortIconRenderer2(iconSortIndex) {
          if (!this.$props.sort) {
            return null;
          }
          var currentDir = iconSortIndex >= 0 ? this.$props.sort[iconSortIndex].dir : "";
          return iconSortIndex >= 0 && [h("span", {
            key: 1,
            "class": "k-sort-icon"
          }, [h(Icon, {
            name: "sort-" + currentDir + "-small",
            attrs: this.v3 ? void 0 : {
              name: "sort-" + currentDir + "-small",
              icon: currentDir === "asc" ? sortAscSmallIcon : sortDescSmallIcon
            },
            icon: currentDir === "asc" ? sortAscSmallIcon : sortDescSmallIcon
          })]), this.$props.sort.length > 1 && h("span", {
            key: 2,
            "class": "k-sort-icon"
          }, [h("span", {
            "class": "k-sort-order"
          }, [iconSortIndex + 1])])];
        };
        var sortIcon = sortIconRenderer.call(this, sortIndex3);
        var columnMenu3 = column.columnMenu || column.columnMenu === false ? column.columnMenu : this.$props.columnMenu;
        var className = (column.kFirst ? "k-first " : "") + this.cellClass(column.field, column.headerClassName, column.locked) + (columnMenu3 ? " k-filterable" : "");
        var columnMenuRender = !columnMenu3 || typeof columnMenu3 === "boolean" ? !!columnMenu3 : this.getTemplate(columnMenu3);
        var style = column.left !== void 0 ? !this.$props.isRtl ? {
          left: column.left + "px",
          right: column.right + "px"
        } : {
          left: column.right + "px",
          right: column.left + "px"
        } : {};
        var getAriaLabel2 = ariaSortMap[sortDir] === "none" ? ariaLabelSortableColumn : ariaSortMap[sortDir] === "ascending" ? ariaLabelAscendingSort : ariaLabelDescendingSort;
        var ariaAttrs = column.isAccessible ? {
          ariaSort: ariaSortMap[sortDir],
          ariaLabel: getAriaLabel2,
          role: "columnheader",
          ariaColumnIndex: this.$props.isColCountDefined ? this.$props.columnsInitial.findIndex(function(col) {
            return col.field === column.field;
          }) + 1 : void 0,
          ariaSelected: false,
          ariaHaspopup: columnMenu3 ? "menu" : this.$props.filterable && column.filterable ? "dialog" : void 0
        } : {
          role: "columnheader"
        };
        var key = column.declarationIndex >= 0 ? ++this.index : --this.serviceIndex;
        var columnMenuOpened = column.columnMenuOpened !== void 0 ? column.columnMenuOpened : this.columnMenuOpened[column.field];
        return (
          // @ts-ignore function children
          h(HeaderThElement, {
            ariaSort: sortable ? ariaAttrs.ariaSort : void 0,
            attrs: this.v3 ? void 0 : {
              ariaSort: sortable ? ariaAttrs.ariaSort : void 0,
              ariaLabel: sortable ? ariaAttrs.ariaLabel : void 0,
              role: ariaAttrs.role,
              ariaColumnIndex: ariaAttrs.ariaColumnIndex,
              ariaSelected: ariaAttrs.ariaSelected,
              ariaHaspopup: ariaAttrs.ariaHaspopup,
              colSpan: column.colSpan,
              rowSpan: column.rowSpan,
              columnId: column.id,
              navigatable: column.navigatable
            },
            ariaLabel: sortable ? ariaAttrs.ariaLabel : void 0,
            role: ariaAttrs.role,
            ariaColumnIndex: ariaAttrs.ariaColumnIndex,
            ariaSelected: ariaAttrs.ariaSelected,
            ariaHaspopup: ariaAttrs.ariaHaspopup,
            key,
            colSpan: column.colSpan,
            rowSpan: column.rowSpan,
            "class": className,
            style,
            columnId: column.id,
            navigatable: column.navigatable,
            onKeydown: function onKeydown(e) {
              return _this.cellKeyDown(e, column);
            },
            on: this.v3 ? void 0 : {
              "keydown": function onKeydown(e) {
                return _this.cellKeyDown(e, column);
              }
            }
          }, this.v3 ? function() {
            return [[
              // @ts-ignore
              column.children.length === 0 && columnMenu3 && h(ColumnMenu2, {
                key: 0,
                column: {
                  field: column.field,
                  filter: column.filter
                },
                attrs: _this2.v3 ? void 0 : {
                  column: {
                    field: column.field,
                    filter: column.filter
                  },
                  opened: columnMenuOpened,
                  animate: _this2.$props.columnMenuAnimate,
                  sortable,
                  sort: _this2.$props.sort,
                  filter: _this2.$props.filter,
                  filterable: _this2.$props.filterable && column.filterable,
                  filterOperators: _this2.$props.filterOperators,
                  render: columnMenuRender
                },
                opened: columnMenuOpened,
                animate: _this2.$props.columnMenuAnimate,
                sortable,
                sort: _this2.$props.sort,
                onClose: _this2.columnMenuClose,
                on: _this2.v3 ? void 0 : {
                  "close": _this2.columnMenuClose,
                  "sortchange": _this2.sortChangeHandler,
                  "filterchange": _this2.filterChangeHandler
                },
                onSortchange: _this2.sortChangeHandler,
                filter: _this2.$props.filter,
                filterable: _this2.$props.filterable && column.filterable,
                filterOperators: _this2.$props.filterOperators,
                onFilterchange: _this2.filterChangeHandler,
                render: columnMenuRender
              }),
              column.internalHeaderCell && h("span", {
                "class": "k-cell-inner"
              }, [
                // @ts-ignore function children
                h(column.internalHeaderCell, {
                  key: 1,
                  field: column.field,
                  attrs: _this2.v3 ? void 0 : {
                    field: column.field,
                    sortable,
                    selectionValue: column.headerSelectionValue,
                    title: column.title,
                    render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                  },
                  sortable,
                  onHeadercellclick: function onHeadercellclick(e) {
                    return _this.cellClick(e, column);
                  },
                  on: _this2.v3 ? void 0 : {
                    "headercellclick": function onHeadercellclick(e) {
                      return _this.cellClick(e, column);
                    },
                    "selectionchange": _this2.selectionChangeHandler
                  },
                  onSelectionchange: _this2.selectionChangeHandler,
                  selectionValue: column.headerSelectionValue,
                  title: column.title,
                  render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                }, _this2.v3 ? function() {
                  return [sortIcon];
                } : [sortIcon])
              ]) || h("span", {
                "class": "k-cell-inner"
              }, [
                // @ts-ignore function children
                h(GridHeaderCell, {
                  key: 1,
                  field: column.field,
                  attrs: _this2.v3 ? void 0 : {
                    field: column.field,
                    sortable,
                    selectionValue: column.headerSelectionValue,
                    title: column.title,
                    render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                  },
                  sortable,
                  onHeadercellclick: function onHeadercellclick(e) {
                    return _this.cellClick(e, column);
                  },
                  on: _this2.v3 ? void 0 : {
                    "headercellclick": function onHeadercellclick(e) {
                      return _this.cellClick(e, column);
                    }
                  },
                  selectionValue: column.headerSelectionValue,
                  title: column.title,
                  render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                }, _this2.v3 ? function() {
                  return [sortIcon];
                } : [sortIcon])
              ]),
              _this2.$props.columnResize && _this2.$props.columnResize.resizable && column.resizable && h(ColumnResizer2, {
                key: 2,
                onResize: function onResize2(e, element, end) {
                  return _this.$props.columnResize && _this.$props.columnResize.dragHandler(e, column, element, end);
                },
                on: _this2.v3 ? void 0 : {
                  "resize": function onResize2(e, element, end) {
                    return _this.$props.columnResize && _this.$props.columnResize.dragHandler(e, column, element, end);
                  }
                }
              })
            ]];
          } : [[column.children.length === 0 && columnMenu3 && h(ColumnMenu2, {
            key: 0,
            column: {
              field: column.field,
              filter: column.filter
            },
            attrs: _this2.v3 ? void 0 : {
              column: {
                field: column.field,
                filter: column.filter
              },
              opened: columnMenuOpened,
              animate: _this2.$props.columnMenuAnimate,
              sortable,
              sort: _this2.$props.sort,
              filter: _this2.$props.filter,
              filterable: _this2.$props.filterable && column.filterable,
              filterOperators: _this2.$props.filterOperators,
              render: columnMenuRender
            },
            opened: columnMenuOpened,
            animate: _this2.$props.columnMenuAnimate,
            sortable,
            sort: _this2.$props.sort,
            onClose: _this2.columnMenuClose,
            on: _this2.v3 ? void 0 : {
              "close": _this2.columnMenuClose,
              "sortchange": _this2.sortChangeHandler,
              "filterchange": _this2.filterChangeHandler
            },
            onSortchange: _this2.sortChangeHandler,
            filter: _this2.$props.filter,
            filterable: _this2.$props.filterable && column.filterable,
            filterOperators: _this2.$props.filterOperators,
            onFilterchange: _this2.filterChangeHandler,
            render: columnMenuRender
          }), column.internalHeaderCell && h("span", {
            "class": "k-cell-inner"
          }, [h(column.internalHeaderCell, {
            key: 1,
            field: column.field,
            attrs: _this2.v3 ? void 0 : {
              field: column.field,
              sortable,
              selectionValue: column.headerSelectionValue,
              title: column.title,
              render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
            },
            sortable,
            onHeadercellclick: function onHeadercellclick(e) {
              return _this.cellClick(e, column);
            },
            on: _this2.v3 ? void 0 : {
              "headercellclick": function onHeadercellclick(e) {
                return _this.cellClick(e, column);
              },
              "selectionchange": _this2.selectionChangeHandler
            },
            onSelectionchange: _this2.selectionChangeHandler,
            selectionValue: column.headerSelectionValue,
            title: column.title,
            render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
          }, _this2.v3 ? function() {
            return [sortIcon];
          } : [sortIcon])]) || h("span", {
            "class": "k-cell-inner"
          }, [h(GridHeaderCell, {
            key: 1,
            field: column.field,
            attrs: _this2.v3 ? void 0 : {
              field: column.field,
              sortable,
              selectionValue: column.headerSelectionValue,
              title: column.title,
              render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
            },
            sortable,
            onHeadercellclick: function onHeadercellclick(e) {
              return _this.cellClick(e, column);
            },
            on: _this2.v3 ? void 0 : {
              "headercellclick": function onHeadercellclick(e) {
                return _this.cellClick(e, column);
              }
            },
            selectionValue: column.headerSelectionValue,
            title: column.title,
            render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
          }, _this2.v3 ? function() {
            return [sortIcon];
          } : [sortIcon])]), _this2.$props.columnResize && _this2.$props.columnResize.resizable && column.resizable && h(ColumnResizer2, {
            key: 2,
            onResize: function onResize2(e, element, end) {
              return _this.$props.columnResize && _this.$props.columnResize.dragHandler(e, column, element, end);
            },
            on: _this2.v3 ? void 0 : {
              "resize": function onResize2(e, element, end) {
                return _this.$props.columnResize && _this.$props.columnResize.dragHandler(e, column, element, end);
              }
            }
          })]])
        );
      }, this);
    };
    return h("thead", {
      role: "rowgroup",
      attrs: this.v3 ? void 0 : {
        role: "rowgroup",
        "data-keyboardnavheader": true
      },
      "class": this.theadClasses,
      "data-keyboardnavheader": true
    }, [this.$props.columnsMap.map(function(rowIndexes, index) {
      var _this3 = this;
      return (this.$props.groupable || this.$props.reorderable) && // @ts-ignore function children
      h(ColumnDraggable2, {
        key: index,
        onPressHandler: this.pressHandler,
        on: this.v3 ? void 0 : {
          "pressHandler": this.pressHandler,
          "dragHandler": this.dragHandler,
          "releaseHandler": this.releaseHandler
        },
        onDragHandler: this.dragHandler,
        onReleaseHandler: this.releaseHandler
      }, this.v3 ? function() {
        return [cells.call(_this3, rowIndexes)];
      } : [cells.call(_this3, rowIndexes)]) || h("tr", {
        "class": "k-table-row",
        role: "row",
        attrs: this.v3 ? void 0 : {
          role: "row",
          "aria-rowindex": this.columnsMap.length
        },
        "aria-rowindex": this.columnsMap.length
      }, [cells.call(this, rowIndexes)]);
    }, this), this.$props.filterRow]);
  }
};
var HeaderRow = HeaderRowVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/cells/GridFilterCell.js
var allVue69 = vue_runtime_esm_bundler_exports;
var gh67 = allVue69.h;
var isV369 = allVue69.version && allVue69.version[0] === "3";
var inject18 = allVue69.inject;
var GridFilterCellVue2 = {
  name: "KendoGridFilterCell",
  inheritAttrs: false,
  props: {
    id: String,
    grid: Object,
    field: String,
    filterType: String,
    colSpan: Number,
    title: String,
    value: [String, Number, Boolean, Date],
    operator: [String, Function],
    operators: Array,
    booleanValues: Array,
    onChange: Function,
    render: [String, Function, Object],
    ariaLabel: String,
    size: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  methods: {
    inputChange: function inputChange2(value, e) {
      var filter = cellInputChange2(value, e, this.$props);
      this.triggerChange(filter);
    },
    operatorChange: function operatorChange2(operatorValue, e) {
      var filter = cellOperatorChange2(operatorValue.value.operator, e, this.$props.value);
      this.triggerChange(filter);
    },
    boolDropdownChange: function boolDropdownChange2(value, e) {
      var filter = cellBoolDropdownChange2(value.value.operator, e);
      this.triggerChange(filter);
    },
    clear: function clear2(e) {
      e.preventDefault();
      this.triggerChange({
        value: "",
        operator: "",
        event: e
      });
    },
    triggerChange: function triggerChange3(filter) {
      filter.field = this.$props.field;
      this.$emit("change", filter);
    }
  },
  // @ts-ignore
  setup: !isV369 ? void 0 : function() {
    var v3 = !!isV369;
    var kendoIntlService = inject18("kendoIntlService", {});
    var kendoLocalizationService = inject18("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render35(createElement) {
    var _this = this;
    var h = gh67 || createElement;
    var localizationService = provideLocalizationService(this);
    var size = this.$props.size;
    var selectedOperator = this.$props.operators.find(function(item) {
      return item.operator === _this.$props.operator;
    }) || null;
    var renderOperatorEditor = function renderOperatorEditor2() {
      if (this.$props.filterType === "boolean") {
        return;
      }
      return (
        // @ts-ignore
        h(DropDownList, {
          onChange: this.operatorChange,
          on: this.v3 ? void 0 : {
            "change": this.operatorChange
          },
          value: selectedOperator,
          attrs: this.v3 ? void 0 : {
            value: selectedOperator,
            size,
            icon: "filter",
            svgIcon: filterIcon,
            iconClassName: "filter k-button-icon",
            "data-items": this.$props.operators,
            textField: "text",
            title: localizationService.toLanguageString(filterChooseOperator, messages2[filterChooseOperator]),
            popupSettings: {
              width: ""
            },
            ariaLabel: "filter"
          },
          size,
          "class": "k-dropdown-operator",
          icon: "filter",
          svgIcon: filterIcon,
          iconClassName: "filter k-button-icon",
          "data-items": this.$props.operators,
          textField: "text",
          title: localizationService.toLanguageString(filterChooseOperator, messages2[filterChooseOperator]),
          popupSettings: {
            width: ""
          },
          ariaLabel: "filter"
        })
      );
    };
    var filterComponent = function filterComponent2(filterType, value) {
      var _this2 = this;
      switch (filterType) {
        case "numeric":
          return (
            // @ts-ignore
            h(NumericTextBox, {
              size,
              attrs: this.v3 ? void 0 : {
                size,
                value,
                title: this.$props.title,
                ariaLabel: this.ariaLabel
              },
              value,
              onChange: function onChange(e) {
                _this2.inputChange(e.value, e.event);
              },
              on: this.v3 ? void 0 : {
                "change": function onChange(e) {
                  _this2.inputChange(e.value, e.event);
                }
              },
              title: this.$props.title,
              ariaLabel: this.ariaLabel
            })
          );
        case "date":
          return (
            // @ts-ignore
            h(DatePicker, {
              size,
              attrs: this.v3 ? void 0 : {
                size,
                value,
                title: this.$props.title,
                ariaLabel: this.ariaLabel
              },
              value,
              onChange: function onChange(e) {
                _this2.inputChange(e.value, e);
              },
              on: this.v3 ? void 0 : {
                "change": function onChange(e) {
                  _this2.inputChange(e.value, e);
                }
              },
              title: this.$props.title,
              ariaLabel: this.ariaLabel
            })
          );
        case "boolean":
          var booleanValues = this.$props.booleanValues;
          return (
            // @ts-ignore
            h(DropDownList, {
              onChange: this.boolDropdownChange,
              on: this.v3 ? void 0 : {
                "change": this.boolDropdownChange
              },
              size,
              attrs: this.v3 ? void 0 : {
                size,
                value: booleanValues.find(function(item) {
                  return item.operator === (value !== null ? value : "");
                }),
                "data-items": booleanValues,
                textField: "text",
                title: this.$props.title,
                ariaLabel: this.ariaLabel
              },
              value: booleanValues.find(function(item) {
                return item.operator === (value !== null ? value : "");
              }),
              "data-items": booleanValues,
              textField: "text",
              title: this.$props.title,
              ariaLabel: this.ariaLabel
            })
          );
        default:
          return h(Input, {
            value: value || "",
            attrs: this.v3 ? void 0 : {
              value: value || "",
              size,
              title: this.$props.title,
              "aria-label": this.ariaLabel
            },
            size,
            onInput: function onInput(e) {
              _this2.inputChange(e.target.value, e);
            },
            on: this.v3 ? void 0 : {
              "input": function onInput(e) {
                _this2.inputChange(e.target.value, e);
              }
            },
            title: this.$props.title,
            "aria-label": this.ariaLabel
          });
      }
    };
    var defaultRendering = h("div", {
      "class": "k-filtercell",
      style: this.$attrs.style
    }, [h("div", {
      "class": "k-filtercell-wrapper"
    }, [filterComponent.call(this, this.$props.filterType, this.$props.value), h("div", {
      "class": "k-filtercell-operator"
    }, [
      renderOperatorEditor.call(this),
      // @ts-ignore function children 
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          size,
          icon: "filter-clear",
          svgIcon: filterClearIcon,
          title: localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])
        },
        size,
        icon: "filter-clear",
        svgIcon: filterClearIcon,
        "class": {
          /* button is always visible if there is either value or operator */
          "k-disabled": !(!(this.$props.value === null || this.$props.value === "") || this.$props.operator)
        },
        title: localizationService.toLanguageString(filterClearButton, messages2[filterClearButton]),
        onClick: this.clear,
        on: this.v3 ? void 0 : {
          "click": this.clear
        }
      })
    ])])]);
    var gridListeners = this.$props.grid ? getListeners.call(this.$props.grid) : null;
    var cellRenderFunction = templateRendering.call(this.$props.grid, this.$props.render, gridListeners);
    return getTemplate.call(this, {
      h,
      template: cellRenderFunction,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        change: this.triggerChange
      }
    });
  }
};
var GridFilterCell = GridFilterCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/header/FilterRow.js
var allVue70 = vue_runtime_esm_bundler_exports;
var gh68 = allVue70.h;
var isV370 = allVue70.version && allVue70.version[0] === "3";
var inject19 = allVue70.inject;
var FilterRowVue2 = {
  name: "kendoFilterRow",
  props: {
    grid: Object,
    columns: Array,
    filter: Object,
    filterOperators: Object,
    sort: [Object, Array],
    cellRender: [String, Function, Object],
    isRtl: Boolean,
    ariaRowIndex: Number,
    size: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    headerCellClassName: function headerCellClassName(field, locked) {
      var result = "k-table-th k-header" + (locked ? " k-grid-header-sticky" : "");
      if (this.$props.sort && this.$props.sort.filter(function(descriptor) {
        return descriptor.field === field;
      }).length > 0) {
        result += " k-sorted";
      }
      return result;
    },
    setFilter: function setFilter(value, operator, field, e) {
      var filters = [];
      if (value !== "" && value !== null || operator !== "") {
        filters.push({
          field,
          operator,
          value
        });
      }
      if (this.$props.filter && this.$props.filter.filters) {
        var oldFilters = this.$props.filter.filters || [];
        oldFilters.forEach(function(filter) {
          var descriptor = filter;
          if (descriptor && descriptor.field !== field) {
            filters.push(descriptor);
          }
        });
      }
      var filtersResult = filters.length > 0 ? {
        logic: "and",
        filters
      } : null;
      this.$emit("filterchange", filtersResult, e);
    }
  },
  // @ts-ignore
  setup: !isV370 ? void 0 : function() {
    var v3 = !!isV370;
    var kendoLocalizationService = inject19("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render36(createElement) {
    var h = gh68 || createElement;
    var intl = provideLocalizationService(this);
    var oldFilters = this.$props.filter && this.$props.filter.filters || [];
    var activeFilterValueFor = function activeFilterValueFor2(field, defaultValue) {
      if (defaultValue === void 0) {
        defaultValue = null;
      }
      var found = oldFilters.filter(function(filter) {
        return filter.field === field;
      })[0];
      return found ? found.value : defaultValue;
    };
    var activeOperatorFor = function activeOperatorFor2(field) {
      var found = oldFilters.filter(function(filter) {
        return filter.field === field;
      })[0];
      return found ? found.operator : null;
    };
    var serviceIndex = 0, index = -1;
    var filterCells = this.$props.columns.filter(function(c) {
      return c.children.length === 0;
    }).map(function(column) {
      var _this = this;
      var onChangeFn = function onChangeFn2(e) {
        _this.setFilter(e.value, e.operator, column.field, e);
      };
      var filterType = getFilterType2(column.filter);
      var ariaLabelFilter = column.field + " " + getAriaLabel(filterType, intl);
      var filterRender = h(GridFilterCell, {
        grid: this.$props.grid,
        attrs: this.v3 ? void 0 : {
          grid: this.$props.grid,
          field: column.field,
          title: column.filterTitle,
          value: activeFilterValueFor(column.field, filterType === "text" ? "" : null),
          operator: activeOperatorFor(column.field),
          operators: operatorMap2(this.$props.filterOperators[filterType] || [], intl),
          booleanValues: operatorMap2(booleanFilterValues2, intl),
          filterType,
          render: column.filterCell || this.$props.cellRender,
          ariaLabel: ariaLabelFilter,
          size: this.$props.size
        },
        field: column.field,
        title: column.filterTitle,
        value: activeFilterValueFor(column.field, filterType === "text" ? "" : null),
        operator: activeOperatorFor(column.field),
        operators: operatorMap2(this.$props.filterOperators[filterType] || [], intl),
        booleanValues: operatorMap2(booleanFilterValues2, intl),
        filterType,
        onChange: onChangeFn,
        on: this.v3 ? void 0 : {
          "change": onChangeFn
        },
        render: column.filterCell || this.$props.cellRender,
        ariaLabel: ariaLabelFilter,
        size: this.$props.size
      });
      var key = column.declarationIndex >= 0 ? ++index : --serviceIndex;
      var ariaAttrs = {
        ariaLabel: column.filterable ? intl.toLanguageString(filterAriaLabel2, messages2[filterAriaLabel2]) : void 0,
        ariaColumnIndex: column.ariaColumnIndex
      };
      var style = column.left !== void 0 ? !this.$props.isRtl ? {
        left: column.left + "px",
        right: column.right + "px"
      } : {
        left: column.right + "px",
        right: column.left + "px"
      } : {};
      var filterCell = (
        // @ts-ignore function children
        h(HeaderTdElement, {
          key,
          role: "gridcell",
          attrs: this.v3 ? void 0 : {
            role: "gridcell",
            columnId: tableKeyboardNavigationTools.getFilterColumnId(column.id),
            navigatable: column.navigatable,
            ariaColumnIndex: ariaAttrs.ariaColumnIndex,
            ariaLabel: ariaLabelFilter
          },
          columnId: tableKeyboardNavigationTools.getFilterColumnId(column.id),
          navigatable: column.navigatable,
          style,
          "class": this.headerCellClassName(column.field, column.locked) || void 0,
          ariaColumnIndex: ariaAttrs.ariaColumnIndex,
          ariaLabel: ariaLabelFilter
        }, this.v3 ? function() {
          return [filterRender];
        } : [filterRender])
      );
      return column.filterable && filterCell || // @ts-ignore function children
      h(HeaderTdElement, {
        key,
        role: "gridcell",
        attrs: this.v3 ? void 0 : {
          role: "gridcell",
          columnId: tableKeyboardNavigationTools.getFilterColumnId(column.id),
          navigatable: column.navigatable,
          ariaColumnIndex: ariaAttrs.ariaColumnIndex,
          ariaLabel: ariaLabelFilter
        },
        columnId: tableKeyboardNavigationTools.getFilterColumnId(column.id),
        navigatable: column.navigatable,
        style,
        "class": this.headerCellClassName(column.field, column.locked) || void 0,
        ariaColumnIndex: ariaAttrs.ariaColumnIndex,
        ariaLabel: ariaLabelFilter
      });
    }, this);
    return h("tr", {
      "class": "k-table-row k-filter-row",
      "aria-rowindex": this.ariaRowIndex,
      attrs: this.v3 ? void 0 : {
        "aria-rowindex": this.ariaRowIndex,
        role: "row"
      },
      role: "row"
    }, [filterCells]);
  }
};
var FilterRow = FilterRowVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/drag/GroupingIndicator.js
var allVue71 = vue_runtime_esm_bundler_exports;
var gh69 = allVue71.h;
var isV371 = allVue71.version && allVue71.version[0] === "3";
var ref4 = allVue71.ref;
var GroupingIndicatorVue2 = {
  props: {
    title: String,
    dir: String
    // 'asc' | 'desc';
  },
  mounted: function mounted8() {
    this.element = getRef(this, "indicatorContainer");
    if (this.element) {
      this.draggable = this.$refs.draggable;
    }
  },
  methods: {
    press: function press3(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag4(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release4(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    },
    sortChange: function sortChange3(event) {
      event.preventDefault();
      var sort = this.$props.dir === "asc" ? "desc" : "asc";
      this.$emit("sortChange", event, sort);
    },
    groupRemove: function groupRemove(event) {
      event.preventDefault();
      this.$emit("remove", event);
    }
  },
  // @ts-ignore
  setup: !isV371 ? void 0 : function() {
    var v3 = !!isV371;
    var indicatorContainerRef = ref4(null);
    return {
      v3,
      indicatorContainerRef
    };
  },
  // @ts-ignore
  render: function render37(createElement) {
    var _this = this;
    var h = gh69 || createElement;
    return (
      // @ts-ignore  function children
      h(Draggable, {
        onPress: this.press,
        on: this.v3 ? void 0 : {
          "press": this.press,
          "drag": this.drag,
          "release": this.release
        },
        onDrag: this.drag,
        onRelease: this.release,
        ref: "draggable"
      }, this.v3 ? function() {
        return [h("div", {
          "class": "k-chip k-chip-md k-chip-solid k-chip-solid-base k-rounded-md",
          ref: setRef(_this, "indicatorContainer")
        }, [h(Icon, {
          name: "sort-" + _this.$props.dir + "-small",
          attrs: _this.v3 ? void 0 : {
            name: "sort-" + _this.$props.dir + "-small",
            icon: _this.$props.dir === "asc" ? sortAscSmallIcon : sortDescSmallIcon
          },
          "class": "k-chip-icon",
          icon: _this.$props.dir === "asc" ? sortAscSmallIcon : sortDescSmallIcon
        }), h("span", {
          "class": "k-chip-content",
          tabindex: -1,
          attrs: _this.v3 ? void 0 : {
            tabindex: -1
          },
          onClick: _this.sortChange,
          on: _this.v3 ? void 0 : {
            "click": _this.sortChange
          }
        }, [_this.$props.title]), h("span", {
          "class": "k-chip-actions"
        }, [h("span", {
          "class": "k-chip-action k-chip-remove-action",
          tabindex: -1,
          attrs: _this.v3 ? void 0 : {
            tabindex: -1
          },
          onClick: _this.groupRemove,
          on: _this.v3 ? void 0 : {
            "click": _this.groupRemove
          }
        }, [h(Icon, {
          name: "x-circle",
          attrs: _this.v3 ? void 0 : {
            name: "x-circle",
            icon: xCircleIcon
          },
          icon: xCircleIcon
        })])])])];
      } : [h("div", {
        "class": "k-chip k-chip-md k-chip-solid k-chip-solid-base k-rounded-md",
        ref: setRef(_this, "indicatorContainer")
      }, [h(Icon, {
        name: "sort-" + _this.$props.dir + "-small",
        attrs: _this.v3 ? void 0 : {
          name: "sort-" + _this.$props.dir + "-small",
          icon: _this.$props.dir === "asc" ? sortAscSmallIcon : sortDescSmallIcon
        },
        "class": "k-chip-icon",
        icon: _this.$props.dir === "asc" ? sortAscSmallIcon : sortDescSmallIcon
      }), h("span", {
        "class": "k-chip-content",
        tabindex: -1,
        attrs: _this.v3 ? void 0 : {
          tabindex: -1
        },
        onClick: _this.sortChange,
        on: _this.v3 ? void 0 : {
          "click": _this.sortChange
        }
      }, [_this.$props.title]), h("span", {
        "class": "k-chip-actions"
      }, [h("span", {
        "class": "k-chip-action k-chip-remove-action",
        tabindex: -1,
        attrs: _this.v3 ? void 0 : {
          tabindex: -1
        },
        onClick: _this.groupRemove,
        on: _this.v3 ? void 0 : {
          "click": _this.groupRemove
        }
      }, [h(Icon, {
        name: "x-circle",
        attrs: _this.v3 ? void 0 : {
          name: "x-circle",
          icon: xCircleIcon
        },
        icon: xCircleIcon
      })])])])])
    );
  }
};
var GroupingIndicator = GroupingIndicatorVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/header/GroupPanel.js
var allVue72 = vue_runtime_esm_bundler_exports;
var gh70 = allVue72.h;
var isV372 = allVue72.version && allVue72.version[0] === "3";
var inject20 = allVue72.inject;
var GroupPanelVue2 = {
  props: {
    group: Array,
    resolveTitle: Function,
    ariaControls: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    pressHandler: function pressHandler2(event, element) {
      this.$emit("pressHandler", event, element);
    },
    dragHandler: function dragHandler2(event, element) {
      this.$emit("dragHandler", event, element);
    },
    releaseHandler: function releaseHandler2(event) {
      this.$emit("releaseHandler", event);
    },
    onGroupRemove: function onGroupRemove(event, index) {
      var newGroups = this.$props.group.slice();
      newGroups.splice(index, 1);
      this.$emit("groupChange", newGroups, event);
    },
    onGroupSortChange: function onGroupSortChange(event, index, groupDesc, dir) {
      var group = Object.assign({}, groupDesc, {
        dir
      });
      var newGroups = this.$props.group.slice();
      newGroups.splice(index, 1, group);
      this.$emit("groupChange", newGroups, event);
    }
  },
  // @ts-ignore
  setup: !isV372 ? void 0 : function() {
    var v3 = !!isV372;
    var kendoLocalizationService = inject20("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render38(createElement) {
    var h = gh70 || createElement;
    var groupsProp = this.$props.group || [];
    var ariaControls = this.$props.ariaControls;
    var groups = groupsProp.map(function(groupDesc, index) {
      var _this = this;
      return (
        // @ts-ignore
        h(GroupingIndicator, {
          key: index,
          dir: groupDesc.dir || "asc",
          attrs: this.v3 ? void 0 : {
            dir: groupDesc.dir || "asc",
            title: this.$props.resolveTitle(groupDesc.field)
          },
          title: this.$props.resolveTitle(groupDesc.field),
          onRemove: function onRemove(event) {
            return _this.onGroupRemove(event, index);
          },
          on: this.v3 ? void 0 : {
            "remove": function onRemove(event) {
              return _this.onGroupRemove(event, index);
            },
            "sortChange": function sortChange4(event, dir) {
              _this.onGroupSortChange(event, index, groupDesc, dir);
            },
            "press": this.pressHandler,
            "drag": this.dragHandler,
            "release": this.releaseHandler
          },
          onSortChange: function sortChange4(event, dir) {
            _this.onGroupSortChange(event, index, groupDesc, dir);
          },
          onPress: this.pressHandler,
          onDrag: this.dragHandler,
          onRelease: this.releaseHandler
        })
      );
    }, this);
    var groupHeaderAriaLabelValue = provideLocalizationService(this).toLanguageString(groupHeaderAriaLabel, messages2[groupHeaderAriaLabel]);
    return h("div", {
      "class": "k-grouping-header",
      role: "toolbar",
      attrs: this.v3 ? void 0 : {
        role: "toolbar",
        "aria-label": groupHeaderAriaLabelValue,
        "aria-controls": ariaControls
      },
      "aria-label": groupHeaderAriaLabelValue,
      "aria-controls": ariaControls
    }, [!!groups.length && h("div", {
      "class": "k-chip-list k-chip-list-md"
    }, [groups]), h("div", {
      "class": "k-grouping-drop-container"
    }, [!groups.length && provideLocalizationService(this).toLanguageString(groupPanelEmpty, messages2[groupPanelEmpty])])]);
  }
};
var GroupPanel = GroupPanelVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/footer/Footer.js
var allVue73 = vue_runtime_esm_bundler_exports;
var gh71 = allVue73.h;
var isV373 = allVue73.version && allVue73.version[0] === "3";
var ref5 = allVue73.ref;
var FooterVue2 = {
  name: "Footer",
  props: {
    staticHeaders: Boolean,
    row: Object,
    columnResize: Object,
    cols: Array,
    size: String
  },
  data: function data10() {
    return {
      scrollbarWidth: 0,
      rtl: false,
      tableWidth: null
    };
  },
  computed: {
    tableClass: function tableClass2() {
      var _a4;
      var size = this.$props.size;
      return _a4 = {
        "k-table": true,
        "k-grid-footer-table": true
      }, _a4["k-table-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a4;
    },
    divStyle: {
      get: function get9() {
        var padding = this.$data.scrollbarWidth + "px";
        var right = this.rtl ? 0 : padding;
        var left = this.rtl ? padding : 0;
        return {
          padding: "0 ".concat(right, " 0 ").concat(left)
        };
      }
    },
    tableStyle: {
      get: function get10() {
        return this.tableWidth ? {
          width: this.tableWidth
        } : null;
      }
    }
  },
  mounted: function mounted9() {
    this.$data.scrollbarWidth = new BrowserSupportService3().scrollbarWidth;
    this.rtl = isRtl3(this.$el);
    this.$props.columnResize.colGroupFooter = getRef(this, "colGroupHeader");
    this._footerWrap = getRef(this, "footerWrap");
  },
  methods: {
    setScrollLeft: function setScrollLeft2(scrollLeft) {
      if (this._footerWrap) {
        this._footerWrap.scrollLeft = scrollLeft;
      }
    },
    setWidth: function setWidth2(width) {
      this.$data.tableWidth = width + "px";
    }
  },
  // @ts-ignore
  setup: !isV373 ? void 0 : function() {
    var v3 = !!isV373;
    var footerWrapRef = ref5(null);
    var colGroupHeaderRef = ref5(null);
    return {
      v3,
      colGroupHeaderRef,
      footerWrapRef
    };
  },
  // @ts-ignore
  render: function render39(createElement) {
    var h = gh71 || createElement;
    if (!this.$props.staticHeaders) {
      return h("tfoot", {
        "class": "k-table-tfoot k-grid-footer",
        role: "rowgroup",
        attrs: this.v3 ? void 0 : {
          role: "rowgroup"
        }
      }, [this.$props.row]);
    }
    return h("div", {
      "class": "k-grid-footer",
      style: this.divStyle,
      role: "presentation",
      attrs: this.v3 ? void 0 : {
        role: "presentation"
      }
    }, [h("div", {
      "class": "k-grid-footer-wrap",
      ref: setRef(this, "footerWrap"),
      role: "presentation",
      attrs: this.v3 ? void 0 : {
        role: "presentation"
      }
    }, [h("table", {
      "class": this.tableClass,
      style: this.tableStyle,
      role: "presentation",
      attrs: this.v3 ? void 0 : {
        role: "presentation"
      }
    }, [h("colgroup", {
      ref: setRef(this, "colGroupHeader")
    }, [this.$props.cols]), h("tfoot", {
      "class": "k-table-tfoot",
      role: "rowgroup",
      attrs: this.v3 ? void 0 : {
        role: "rowgroup"
      }
    }, [this.$props.row])])])]);
  }
};
var Footer = FooterVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/footer/FooterRow.js
var allVue74 = vue_runtime_esm_bundler_exports;
var gh72 = allVue74.h;
var isV374 = allVue74.version && allVue74.version[0] === "3";
var FooterRowVue2 = {
  name: "FooterRow",
  props: {
    isRtl: Boolean,
    columns: Array,
    rowIndex: Number
  },
  methods: {
    columnStyles: function columnStyles(column) {
      return column.left !== void 0 ? !this.$props.isRtl ? {
        left: column.left + "px",
        right: column.right + "px"
      } : {
        left: column.right + "px",
        right: column.left + "px"
      } : {};
    }
  },
  // @ts-ignore
  setup: !isV374 ? void 0 : function() {
    var v3 = !!isV374;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render40(createElement) {
    var h = gh72 || createElement;
    var renderCell = function renderCell2(column, index) {
      var footerCellRendering = null;
      var stickyClassName = column.locked && column.left !== void 0 ? "k-grid-footer-sticky" : "";
      var tdClassName = column.footerClassName ? "k-table-td ".concat(column.footerClassName, " ").concat(stickyClassName) : "k-table-td " + stickyClassName;
      footerCellRendering = getTemplate.call(this, {
        h,
        template: column.footerCell,
        defaultRendering: null,
        additionalProps: {
          field: column.field,
          colSpan: column.colSpan !== 1 ? column.colSpan : void 0,
          defaultStyle: this.columnStyles(column)
        }
      });
      return h("td", {
        key: index,
        colspan: column.colSpan !== 1 ? column.colSpan : void 0,
        attrs: this.v3 ? void 0 : {
          colspan: column.colSpan !== 1 ? column.colSpan : void 0,
          role: "gridcell"
        },
        style: this.columnStyles(column),
        "class": tdClassName,
        role: "gridcell"
      }, [footerCellRendering]);
    };
    return h("tr", {
      "class": "k-table-row",
      role: "row",
      attrs: this.v3 ? void 0 : {
        role: "row",
        "aria-rowIndex": this.$props.rowIndex
      },
      "aria-rowIndex": this.$props.rowIndex
    }, [footerColumns(this.$props.columns).map(renderCell, this)]);
  }
};
var FooterRow = FooterRowVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/GridCellValue.js
var allVue75 = vue_runtime_esm_bundler_exports;
var gh73 = allVue75.h;
var isV375 = allVue75.version && allVue75.version[0] === "3";
var GridCellValueVue2 = {
  name: "GridCellValue",
  props: {
    dataItem: Object,
    column: Object,
    editField: String,
    editCell: Object,
    inbuildCell: Object
  },
  // @ts-ignore
  setup: !isV375 ? void 0 : function() {
    var v3 = !!isV375;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render41(createElement) {
    var h = gh73 || createElement;
    var inEdit = this.editField ? getNestedValue(this.editField, this.dataItem) : false;
    return this.column.editable && this.editField && (inEdit === true || inEdit === this.column.field) ? this.editCell : this.inbuildCell;
  }
};
var GridCellValue = GridCellValueVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/VirtualScroll.js
var VirtualScroll = (
  /** @class */
  function() {
    function VirtualScroll2(cached, topCacheCount) {
      var _this = this;
      this.table = null;
      this.containerHeight = 0;
      this.topCacheCount = 0;
      this.attendedSkip = 0;
      this.propsSkip = 0;
      this.total = 0;
      this.scrollableVirtual = false;
      this.realSkip = 0;
      this.pageSize = 0;
      this.fixedScroll = false;
      this.askedSkip = void 0;
      this.tableTransform = "";
      this.prevScrollPos = 0;
      this.tableTranslate = 0;
      this.scrollSyncing = false;
      this.topItems = function(heights, skipTopBuffer) {
        if (!_this.container || skipTopBuffer) {
          return { topItemsCount: 0, topItemsHeight: 0 };
        }
        var screenHeight = _this.container.clientHeight;
        var footerRowsCount = _this.container.querySelectorAll(".k-group-footer").length;
        var itemsOnScreen = Math.ceil(screenHeight / heights[0].line);
        var footersToItems = Math.ceil(footerRowsCount / itemsOnScreen);
        var topItemsCount = Math.max(footersToItems, Math.ceil((heights.length - itemsOnScreen) / 2));
        var topItemsHeight = 0;
        for (var i = 0; i < topItemsCount; i++) {
          topItemsHeight += heights[i].line + heights[i].acc;
        }
        var additioanlFooterItems = footersToItems ? footerRowsCount / (1 + footersToItems) : 0;
        var itemsNeededOnScreen = itemsOnScreen + itemsOnScreen / 2 + additioanlFooterItems;
        return {
          topItemsCount,
          topItemsHeight,
          itemsNeededOnScreen
        };
      };
      this.horizontalScrollbarHeight = function() {
        if (!_this.container) {
          return 0;
        }
        return _this.container.offsetHeight - _this.container.clientHeight;
      };
      if (cached) {
        this.topCacheCount = topCacheCount;
        this.attendedSkip = -this.topCacheCount;
      }
      this.scrollHandler = this.scrollHandler.bind(this);
    }
    Object.defineProperty(VirtualScroll2.prototype, "container", {
      get: function() {
        return this.containerRef;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(VirtualScroll2.prototype, "rowHeights", {
      /**
       * @return - The row heights in an array.
       */
      get: function() {
        var result = [];
        var allRows = this.tableBodyRef && this.tableBodyRef.children || [];
        var accumulate = 0;
        for (var i = 0; i < allRows.length; i++) {
          if (allRows[i].className.indexOf("k-grouping-row") > -1) {
            accumulate += allRows[i].scrollHeight;
            continue;
          }
          if (allRows[i].className.indexOf("k-detail-row") > -1) {
            result[result.length - 1].line += allRows[i].scrollHeight;
          } else {
            result.push({
              line: allRows[i].scrollHeight,
              acc: accumulate
            });
            accumulate = 0;
          }
        }
        return result;
      },
      enumerable: false,
      configurable: true
    });
    VirtualScroll2.prototype.changePage = function(skip2, e) {
      this.attendedSkip = skip2 - this.topCacheCount;
      this.PageChange({
        skip: Math.max(0, skip2 - this.topCacheCount),
        take: this.pageSize
      }, e);
    };
    VirtualScroll2.prototype.translate = function(dY) {
      this.tableTranslate = dY;
      if (this.scrollableVirtual && this.table) {
        this.table.style.transform = "translateY(" + dY + "px)";
      }
    };
    VirtualScroll2.prototype.reset = function() {
      this.scrollSyncing = true;
      if (this.fixedScroll) {
        return;
      }
      if (this.container) {
        this.container.scrollTop = 0;
      }
      this.translate(0);
    };
    VirtualScroll2.prototype.localScrollUp = function(e) {
      if (!this.container) {
        return;
      }
      var heights = this.rowHeights;
      var scrollTop = this.container.scrollTop;
      var targetTranslate = this.tableTranslate;
      var rowsCount = 0;
      var _a4 = this.topItems(heights, Boolean(this.topCacheCount)), topItemsCount = _a4.topItemsCount, topItemsHeight = _a4.topItemsHeight, itemsNeededOnScreen = _a4.itemsNeededOnScreen;
      var additionalOnTop = scrollTop - targetTranslate;
      if (additionalOnTop > topItemsHeight || heights.length <= itemsNeededOnScreen) {
        return;
      }
      while (rowsCount < this.topCacheCount + this.attendedSkip - this.realSkip + topItemsCount && this.propsSkip - rowsCount > 0 && !(targetTranslate + (heights[heights.length - 1 - rowsCount].line + heights[heights.length - 1 - rowsCount].acc) + additionalOnTop <= scrollTop)) {
        targetTranslate -= heights[heights.length - 1 - rowsCount].line + heights[heights.length - 1 - rowsCount].acc;
        rowsCount++;
      }
      if (rowsCount === 0 && this.topCacheCount === 0 && this.attendedSkip > 0) {
        targetTranslate = Math.max(targetTranslate - heights[0].line, 0);
        rowsCount = 1;
      }
      if (this.propsSkip - rowsCount <= 0 && targetTranslate > scrollTop) {
        this.translate(0);
        this.changePage(0, e);
        this.container.scrollTop = 0;
        return;
      }
      if (targetTranslate > scrollTop) {
        targetTranslate = scrollTop;
      }
      if (targetTranslate !== this.tableTranslate) {
        this.translate(Math.max(0, targetTranslate - topItemsHeight));
        var nextSkip = Math.max(0, this.propsSkip - rowsCount - topItemsCount);
        this.changePage(nextSkip, e);
      }
    };
    VirtualScroll2.prototype.localScrollDown = function(e) {
      if (!this.container) {
        return;
      }
      var heights = this.rowHeights;
      var scrollTop = this.container.scrollTop;
      var targetTranslate = this.tableTranslate;
      var rowsCount = 0;
      var _a4 = this.topItems(heights, Boolean(this.topCacheCount)), topItemsCount = _a4.topItemsCount, topItemsHeight = _a4.topItemsHeight, itemsNeededOnScreen = _a4.itemsNeededOnScreen;
      while (rowsCount < heights.length - this.topCacheCount && !(targetTranslate + heights[rowsCount].line + heights[rowsCount].acc > scrollTop)) {
        targetTranslate += heights[rowsCount].line + heights[rowsCount].acc;
        rowsCount++;
      }
      if (topItemsCount > this.propsSkip + rowsCount || heights.length <= itemsNeededOnScreen) {
        return;
      }
      if (rowsCount >= heights.length - this.topCacheCount && this.propsSkip + rowsCount >= this.total) {
        this.translate(targetTranslate - topItemsHeight);
        this.changePage(this.total - 1 - topItemsCount, e);
      } else if (targetTranslate !== this.tableTranslate && this.propsSkip + rowsCount - topItemsCount !== this.propsSkip) {
        this.translate(targetTranslate - topItemsHeight);
        this.changePage(this.propsSkip + rowsCount - topItemsCount, e);
      }
    };
    VirtualScroll2.prototype.scrollNonStrict = function(e) {
      var floatRowIndex = this.total * this.prevScrollPos / this.containerHeight;
      var rowIndex = Math.floor(floatRowIndex);
      if (rowIndex >= this.total) {
        rowIndex = this.total - 1;
      }
      var rowpercentage = Math.min(floatRowIndex - rowIndex, 1);
      var microAdjust = 0;
      var rowIndexOffset = rowIndex - this.propsSkip;
      var heights = this.rowHeights;
      if (rowIndexOffset >= 0 && rowIndexOffset <= 1) {
        microAdjust = -((heights[0].line + heights[0].acc) * rowpercentage);
      } else if (rowIndexOffset === -1) {
        microAdjust = -((heights[heights.length - 1].line + heights[heights.length - 1].acc) * rowpercentage);
      }
      var _a4 = this.topItems(heights, Boolean(this.topCacheCount)), topItemsCount = _a4.topItemsCount, topItemsHeight = _a4.topItemsHeight, itemsNeededOnScreen = _a4.itemsNeededOnScreen;
      var nextScroll = Math.max(0, microAdjust - topItemsHeight - this.horizontalScrollbarHeight() + this.containerHeight * floatRowIndex / this.total);
      if (this.prevScrollPos < nextScroll && heights.length <= itemsNeededOnScreen) {
        return;
      }
      this.translate(nextScroll);
      this.changePage(rowIndex - topItemsCount, e);
    };
    VirtualScroll2.prototype.scrollHandler = function(e) {
      if (!this.scrollableVirtual) {
        return;
      }
      if (this.scrollSyncing || !this.container || !this.table) {
        this.scrollSyncing = false;
        return;
      }
      var scrollTop = this.container.scrollTop;
      var prev = this.prevScrollPos;
      this.prevScrollPos = scrollTop;
      if (this.askedSkip !== void 0) {
        this.translate(this.containerHeight * this.askedSkip / this.total);
        this.changePage(this.askedSkip, e);
        this.prevScrollPos = scrollTop;
        this.askedSkip = void 0;
        return;
      }
      if (scrollTop - prev < 0 && scrollTop > this.tableTranslate - this.table.scrollHeight / 10) {
        this.localScrollUp(e);
      } else if (scrollTop - prev > 0 && scrollTop < this.tableTranslate + this.table.scrollHeight * 2 / 3) {
        this.localScrollDown(e);
      } else {
        this.scrollNonStrict(e);
      }
      this.prevScrollPos = scrollTop;
    };
    return VirtualScroll2;
  }()
);

// node_modules/@progress/kendo-vue-grid/dist/es/VirtualScrollFixed.js
var RowHeightService = (
  /** @class */
  function() {
    function RowHeightService2(total2, rowHeight2, detailRowHeight, data15) {
      if (total2 === void 0) {
        total2 = 0;
      }
      this.total = total2;
      this.offsets = [];
      this.heights = [];
      var agg = 0;
      for (var idx = 0; idx < total2; idx++) {
        this.offsets.push(agg);
        var currHeight = data15 && data15[idx].expanded && data15[idx].rowType === "data" ? detailRowHeight : rowHeight2;
        agg += currHeight;
        this.heights.push(currHeight);
      }
    }
    RowHeightService2.prototype.height = function(rowIndex) {
      return this.heights[rowIndex];
    };
    RowHeightService2.prototype.index = function(position) {
      if (position < 0) {
        return void 0;
      }
      var result = this.offsets.reduce(function(prev, current, idx) {
        if (prev !== void 0) {
          return prev;
        } else if (current === position) {
          return idx;
        } else if (current > position) {
          return idx - 1;
        }
        return void 0;
      }, void 0);
      return result === void 0 ? this.total - 1 : result;
    };
    RowHeightService2.prototype.offset = function(rowIndex) {
      return this.offsets[rowIndex];
    };
    RowHeightService2.prototype.totalHeight = function() {
      var lastOffset = this.offsets[this.offsets.length - 1];
      var lastHeight = this.heights[this.heights.length - 1];
      return lastOffset + lastHeight;
    };
    return RowHeightService2;
  }()
);
var VirtualScrollFixed = (
  /** @class */
  function() {
    function VirtualScrollFixed2(_cached) {
      this.table = null;
      this.containerHeight = 0;
      this.topCacheCount = 0;
      this.attendedSkip = 0;
      this.propsSkip = 0;
      this.total = 0;
      this.scrollableVirtual = false;
      this.realSkip = 0;
      this.pageSize = 0;
      this.PageChange = null;
      this.fixedScroll = false;
      this.askedSkip = void 0;
      this.tableTransform = "";
      this.scrollSyncing = false;
      this.lastLoaded = 0;
      this.firstLoaded = 0;
      this.lastScrollTop = 0;
      this.firstLoaded = this.pageSize;
      this.lastLoaded = this.realSkip + this.pageSize;
      this.scrollHandler = this.scrollHandler.bind(this);
    }
    Object.defineProperty(VirtualScrollFixed2.prototype, "container", {
      get: function() {
        return this.containerRef;
      },
      enumerable: false,
      configurable: true
    });
    VirtualScrollFixed2.prototype.translate = function(dY) {
      if (this.scrollableVirtual && this.table) {
        this.table.style.transform = "translateY(" + dY + "px)";
      }
    };
    VirtualScrollFixed2.prototype.changePage = function(skip2, e) {
      if (this.PageChange) {
        this.PageChange({ skip: Math.max(0, skip2), take: this.pageSize }, e);
      }
    };
    VirtualScrollFixed2.prototype.reset = function() {
      this.scrollSyncing = true;
      if (this.fixedScroll) {
        return;
      }
      if (this.container) {
        this.container.scrollTop = 0;
      }
      this.translate(0);
    };
    VirtualScrollFixed2.prototype.scrollHandler = function(e) {
      if (!this.scrollableVirtual || !this.container || !this.table || !this.rowHeightService || !this.containerRef) {
        return;
      }
      if (this.scrollSyncing) {
        this.scrollSyncing = false;
        return;
      }
      var scrollTop = this.container.scrollTop;
      var up = this.lastScrollTop >= scrollTop;
      var down = !up;
      this.lastScrollTop = scrollTop;
      var firstItemIndex = this.rowHeightService.index(scrollTop);
      var firstItemOffset = this.rowHeightService.offset(firstItemIndex);
      var offsetHeight = this.containerRef.offsetHeight;
      var lastItemIndex = this.rowHeightService.index(scrollTop + offsetHeight);
      if (down && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {
        var overflow = firstItemIndex + this.pageSize - this.total;
        if (overflow > 0) {
          firstItemIndex = firstItemIndex - overflow;
          firstItemOffset = this.rowHeightService.offset(firstItemIndex);
        }
        this.firstLoaded = firstItemIndex;
        this.translate(firstItemOffset);
        var nextTake = this.firstLoaded + this.pageSize;
        this.lastLoaded = Math.min(nextTake, this.total);
        this.changePage(this.firstLoaded, e);
      } else if (up && firstItemIndex < this.firstLoaded) {
        var nonVisibleBuffer = Math.floor(this.pageSize * 0.3);
        this.firstLoaded = Math.max(firstItemIndex - nonVisibleBuffer, 0);
        this.translate(this.rowHeightService.offset(this.firstLoaded));
        this.lastLoaded = Math.min(this.firstLoaded + this.pageSize, this.total);
        this.changePage(this.firstLoaded, e);
      }
    };
    return VirtualScrollFixed2;
  }()
);

// node_modules/@progress/kendo-vue-grid/dist/es/drag/ColumnResize.js
var ColumnResize2 = (
  /** @class */
  function() {
    function ColumnResize3(triggerResize) {
      var _this = this;
      this.resizable = false;
      this.isRtl = false;
      this.setIsRtl = function(isRtl4) {
        _this.isRtl = isRtl4;
      };
      this.onResize = triggerResize;
      this.dragHandler = this.dragHandler.bind(this);
    }
    ColumnResize3.prototype.dragHandler = function(event, column, dragCue, end) {
      var e = event.originalEvent;
      if (!end) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
      var tdElement = dragCue.parentElement;
      if (!tdElement || !tdElement.parentElement) {
        return;
      }
      var oldWidth = tdElement.clientWidth;
      var newWidth;
      if (this.isRtl) {
        newWidth = dragCue.getBoundingClientRect().right - dragCue.offsetWidth / 2 - event.clientX;
        newWidth += oldWidth;
      } else {
        newWidth = oldWidth + event.clientX - dragCue.getBoundingClientRect().left - dragCue.offsetWidth / 2;
      }
      if (!end && Math.abs(newWidth - oldWidth) < 1) {
        return;
      }
      this.fixateInitialWidths(tdElement.parentElement.clientWidth);
      this.setWidths(column, Math.floor(newWidth) / oldWidth);
      var index = this.columns.filter(function(c) {
        return !c.children.length;
      }).indexOf(column);
      this.onResize(index, oldWidth, newWidth, e, end);
    };
    ColumnResize3.prototype.fixateInitialWidths = function(width) {
      var columns = this.columns.filter(function(c) {
        return !c.children.length;
      });
      var remainingCount = 0;
      var cols = this.colGroupMain ? this.colGroupMain.children : [];
      for (var i = 0; i < cols.length; i++) {
        if (cols[i].width) {
          width -= parseFloat(cols[i].width);
        } else {
          remainingCount++;
        }
      }
      if (remainingCount === 0) {
        return;
      }
      var perCol = Math.floor(width / remainingCount);
      for (var i = 0; i < cols.length; i++) {
        var col = cols[i];
        if (!col.width) {
          col.width = perCol;
          columns[i].width = perCol.toString();
          if (this.colGroupHeader) {
            this.colGroupHeader.children[i].width = perCol;
          }
          if (this.colGroupFooter) {
            this.colGroupFooter.children[i].width = perCol;
          }
        }
      }
    };
    ColumnResize3.prototype.setWidths = function(column, coef) {
      var indexInOriginal = this.columns.indexOf(column);
      var toAdjust = [];
      var more = column.children.length;
      for (var i = indexInOriginal + 1; more > 0 && i < this.columns.length; i++, more--) {
        var cc = this.columns[i];
        if (!cc.children.length) {
          toAdjust.push(cc);
        } else {
          more += cc.children.length;
        }
      }
      if (toAdjust.length === 0) {
        toAdjust.push(column);
      }
      toAdjust.forEach(function(colToAdjust) {
        var targetWidth = colToAdjust.width ? parseFloat(colToAdjust.width.toString()) * coef : 0;
        var min = colToAdjust.minResizableWidth === void 0 ? 10 : colToAdjust.minResizableWidth;
        if (targetWidth < min) {
          targetWidth = min;
        }
        colToAdjust.width = targetWidth;
      });
      this.updateColElements(toAdjust);
    };
    ColumnResize3.prototype.updateColElements = function(affectedColumns) {
      var columns = this.columns.filter(function(c) {
        return !c.children.length;
      });
      var difference = 1e-10;
      for (var i = 0; i < affectedColumns.length; i++) {
        var colIndex = columns.indexOf(affectedColumns[i]);
        var currentColumnFloatWidth = parseFloat((affectedColumns[i].width || 0).toString());
        difference += currentColumnFloatWidth - Math.floor(currentColumnFloatWidth);
        var currentWidth = Math.floor(currentColumnFloatWidth) + Math.floor(difference);
        difference -= Math.floor(difference);
        if (this.colGroupMain) {
          this.colGroupMain.children[colIndex].width = currentWidth + "px";
        }
        if (this.colGroupHeader) {
          this.colGroupHeader.children[colIndex].width = currentWidth + "px";
        }
        if (this.colGroupFooter && this.colGroupFooter.children[colIndex]) {
          this.colGroupFooter.children[colIndex].width = currentWidth + "px";
        }
      }
    };
    return ColumnResize3;
  }()
);

// node_modules/@progress/kendo-vue-grid/dist/es/drag/CommonDragLogic.js
var CommonDragLogic2 = (
  /** @class */
  function() {
    function CommonDragLogic3(columnReorder2, groupReorder2, columnToGroup2) {
      var _this = this;
      this.reorderable = false;
      this.groupable = false;
      this.dropElementClue = null;
      this.dragElementClue = null;
      this.startColumn = -1;
      this.startGroup = -1;
      this.currentColumn = -1;
      this.currentGroup = -1;
      this.groupPanelDivElement = null;
      this.refGroupPanelDiv = function(e) {
        _this.groupPanelDivElement = e.children ? e.children[0] : e;
      };
      this.refDropElementClue = function(e) {
        _this.dropElementClue = e;
        if (_this.dropElementClue && canUseDOM) {
          document.body.appendChild(_this.dropElementClue.$el);
        }
      };
      this.refDragElementClue = function(e) {
        _this.dragElementClue = e;
        if (_this.dragElementClue && canUseDOM) {
          document.body.appendChild(_this.dragElementClue.$el);
        }
      };
      this.pressHandler = function(event, element) {
        if (!event.isTouch) {
          event.originalEvent.preventDefault();
        }
        var startColumn = _this.getColumnIndex(event, element);
        _this.startGroup = _this.getGroupIndex(event);
        if (startColumn >= 0) {
          var col = _this.columns[startColumn];
          if (col.reorderable && _this.reorderable || col.groupable && _this.groupable) {
            _this.startColumn = startColumn;
          }
        }
      };
      this.dragHandler = function(event, element) {
        if (!event.isTouch) {
          event.originalEvent.preventDefault();
        }
        event.originalEvent.stopPropagation();
        if (_this.startColumn === -1 && _this.startGroup === -1) {
          return;
        }
        _this.currentColumn = _this.getColumnIndex(event, element);
        var groupPanelChildren = _this.groupPanelDivElement && _this.groupPanelDivElement.children;
        _this.currentGroup = _this.isTargetGroupingContainer(event) ? groupPanelChildren && groupPanelChildren.length ? groupPanelChildren.length : 0 : _this.getGroupIndex(event);
        var invalidIndex = !_this.isValid();
        if (invalidIndex) {
          _this.currentColumn = -1;
          _this.currentGroup = -1;
        }
        var targetElement = _this.currentColumn >= 0 ? element.children[_this.columns[_this.currentColumn].index] : _this.isTargetGroupingContainer(event) ? event.originalEvent.target : _this.groupPanelDivElement && _this.groupPanelDivElement.children[_this.currentGroup];
        _this.updateDragElementClue(event, element, targetElement, invalidIndex);
        _this.updateDropElementClue(event, element, targetElement, invalidIndex);
      };
      this.releaseHandler = function(event) {
        var prevColumnIndex = _this.startColumn;
        var nextColumnIndex = _this.currentColumn;
        var prevGroupIndex = _this.startGroup;
        var nextGroupIndex = _this.currentGroup;
        if (_this.dropElementClue) {
          _this.dropElementClue.visible = false;
        }
        if (_this.dragElementClue) {
          _this.dragElementClue.visible = false;
        }
        var isValid = _this.isValid();
        _this.startColumn = _this.startGroup = _this.currentColumn = _this.currentGroup = -1;
        if (!isValid) {
          return;
        }
        if (prevColumnIndex >= 0 && nextColumnIndex >= 0) {
          _this.columnReorder(prevColumnIndex, nextColumnIndex, event.originalEvent);
        } else if (prevGroupIndex >= 0 && nextGroupIndex >= 0) {
          _this.groupReorder(prevGroupIndex, nextGroupIndex, event.originalEvent);
        } else if (prevColumnIndex >= 0 && nextGroupIndex >= 0) {
          _this.columnToGroup(prevColumnIndex, nextGroupIndex, event.originalEvent);
        }
      };
      this.columnReorder = columnReorder2;
      this.groupReorder = groupReorder2;
      this.columnToGroup = columnToGroup2;
    }
    CommonDragLogic3.prototype.getColumnIndex = function(event, parent) {
      if (!parent || parent.parentElement === this.groupPanelDivElement) {
        return -1;
      }
      var index = getIndex2(event, parent);
      if (index === -1) {
        return -1;
      }
      var _loop_1 = function(i2) {
        if (parent.parentNode.children[i2] === parent) {
          return { value: this_1.columns.findIndex(function(c) {
            return c.index === index && c.depth === i2;
          }) };
        }
      };
      var this_1 = this;
      for (var i = 0; i < parent.parentNode.children.length; i++) {
        var state_1 = _loop_1(i);
        if (typeof state_1 === "object")
          return state_1.value;
      }
      return -1;
    };
    CommonDragLogic3.prototype.isTargetGroupingContainer = function(event) {
      var target = event.originalEvent.target;
      return target.className.indexOf && target.className.indexOf("k-grouping-drop-container") !== -1;
    };
    CommonDragLogic3.prototype.getGroupIndex = function(event) {
      return getIndex2(event, this.groupPanelDivElement);
    };
    CommonDragLogic3.prototype.isValid = function() {
      if (this.startGroup >= 0) {
        return this.currentGroup >= 0 && this.currentGroup !== this.startGroup;
      }
      if (this.startColumn === -1) {
        return false;
      }
      if (this.currentGroup >= 0) {
        return this.columns[this.startColumn].groupable === true && this.groupable === true;
      }
      return this.reorderable === true && this.currentColumn >= 0 && this.currentColumn !== this.startColumn && this.columns[this.startColumn].reorderable === true && this.columns[this.currentColumn].parentIndex === this.columns[this.startColumn].parentIndex;
    };
    CommonDragLogic3.prototype.updateDragElementClue = function(event, element, targetElement, invalidIndex) {
      if (!this.dragElementClue) {
        return;
      }
      var innerText = this.startColumn >= 0 ? element.children[this.columns[this.startColumn].index].innerText : element.innerText;
      this.dragElementClue.visible = true;
      this.dragElementClue.top = event.pageY + 10;
      this.dragElementClue.left = event.pageX;
      this.dragElementClue.innerText = innerText;
      this.dragElementClue.status = invalidIndex || !targetElement ? "cancel" : "plus";
    };
    CommonDragLogic3.prototype.updateDropElementClue = function(event, element, targetElement, invalidIndex) {
      if (!this.dropElementClue) {
        return;
      }
      if (invalidIndex || !targetElement) {
        this.dropElementClue.visible = false;
        return;
      }
      var rect = targetElement.getBoundingClientRect();
      var groupElement = targetElement.closest(".k-grouping-header");
      var rectParent = (groupElement || targetElement).getBoundingClientRect();
      var left = rect.left + event.pageX - event.clientX - 6;
      if (!this.isTargetGroupingContainer(event) && (this.currentColumn > this.startColumn || this.currentGroup > this.startGroup && this.startGroup !== -1)) {
        left += rect.width;
      }
      var top = rectParent.top + event.pageY - event.clientY;
      this.dropElementClue.visible = true;
      this.dropElementClue.top = top;
      this.dropElementClue.left = left;
      this.dropElementClue.height = this.currentColumn >= 0 ? element.clientHeight : rectParent.height;
    };
    return CommonDragLogic3;
  }()
);

// node_modules/@progress/kendo-vue-grid/dist/es/drag/DragClue.js
var allVue76 = vue_runtime_esm_bundler_exports;
var gh74 = allVue76.h;
var isV376 = allVue76.version && allVue76.version[0] === "3";
var DragClueVue2 = {
  data: function data11() {
    return {
      visible: false,
      top: 0,
      left: 0,
      innerText: "",
      status: "cancel"
    };
  },
  // @ts-ignore
  setup: !isV376 ? void 0 : function() {
    var v3 = !!isV376;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render42(createElement) {
    var h = gh74 || createElement;
    return this.visible && h("div", {
      "class": "k-header k-drag-clue",
      style: {
        display: "block",
        position: "absolute",
        zIndex: 2e4,
        padding: "8px 12px",
        top: this.top + "px",
        left: this.left + "px"
      }
    }, [h(Icon, {
      name: this.status,
      attrs: this.v3 ? void 0 : {
        name: this.status,
        icon: this.status === "cancel" ? cancelIcon : plusIcon
      },
      "class": "k-drag-status",
      icon: this.status === "cancel" ? cancelIcon : plusIcon
    }), this.innerText]);
  }
};
var DragClue2 = DragClueVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/drag/DropClue.js
var allVue77 = vue_runtime_esm_bundler_exports;
var gh75 = allVue77.h;
var isV377 = allVue77.version && allVue77.version[0] === "3";
var DropClueVue2 = {
  data: function data12() {
    return {
      height: 0,
      visible: false,
      left: 0,
      top: 0
    };
  },
  // @ts-ignore
  setup: !isV377 ? void 0 : function() {
    var v3 = !!isV377;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render43(createElement) {
    var h = gh75 || createElement;
    return this.visible && h("div", {
      "class": "k-grouping-dropclue",
      style: {
        zIndex: 1e4,
        display: "block",
        top: this.top + "px",
        left: this.left + "px",
        height: this.height + "px"
      }
    });
  }
};
var DropClue2 = DropClueVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/cells/GridCell.js
var allVue78 = vue_runtime_esm_bundler_exports;
var gh76 = allVue78.h;
var isV378 = allVue78.version && allVue78.version[0] === "3";
var inject21 = allVue78.inject;
var GridCellVue2 = {
  name: "GridCell",
  inheritAttrs: false,
  // @ts-ignore
  emits: {
    cellclick: null,
    cellkeydown: null
  },
  props: {
    id: String,
    field: String,
    dataItem: Object,
    format: String,
    readFormat: String,
    className: String,
    colSpan: Number,
    columnIndex: Number,
    columnsCount: Number,
    dataIndex: Number,
    rowType: String,
    level: Number,
    expanded: Boolean,
    type: String,
    editor: String,
    isSelected: Boolean,
    ariaColumnIndex: Number,
    render: [String, Function, Object],
    isRtl: Boolean
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  methods: {
    triggerClick: function triggerClick() {
      this.$emit("cellclick", {
        dataItem: this.$props.dataItem,
        field: this.$props.field
      });
    },
    triggerKeydown: function triggerKeydown4(e) {
      this.$emit("cellkeydown", {
        event: e,
        dataItem: this.$props.dataItem,
        field: this.$props.field
      });
    },
    triggerEdit: function triggerEdit2(dataItem) {
      this.$emit("edit", dataItem);
    },
    triggerAdd: function triggerAdd2(dataItem) {
      this.$emit("add", dataItem);
    },
    triggerCancel: function triggerCancel2(dataItem) {
      this.$emit("cancel", dataItem);
    },
    triggerSave: function triggerSave2(dataItem) {
      this.$emit("save", dataItem);
    },
    triggerRemove: function triggerRemove2(dataItem) {
      this.$emit("remove", dataItem);
    }
  },
  created: function created7() {
    this._intl = provideIntlService(this);
  },
  computed: {
    tdClass: function tdClass4() {
      var _a4;
      var className = this.$props.className;
      return _a4 = {
        "k-table-td": true
      }, _a4[className] = className, _a4;
    }
  },
  // @ts-ignore
  setup: !isV378 ? void 0 : function() {
    var v3 = !!isV378;
    var kendoIntlService = inject21("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  // @ts-ignore
  render: function render44(createElement) {
    var h = gh76 || createElement;
    var defaultRendering = null;
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);
    if (this.$props.rowType === "groupFooter") {
      defaultRendering = h("td", {
        "class": this.tdClass
      });
    } else if (this.$props.field !== void 0 && this.$props.rowType !== "groupHeader") {
      var data15 = getNestedValue2(this.$props.field, this.$props.dataItem);
      var dataAsString = "";
      if (data15 !== void 0 && data15 !== null) {
        dataAsString = this.$props.format ? this.$props.type ? this._intl.format(this.$props.format, parsers[this.$props.type](data15, this._intl, this.$props.readFormat)) : this._intl.format(this.$props.format, data15) : data15.toString();
      }
      defaultRendering = h("td", {
        style: this.$attrs.style,
        colspan: this.$props.colSpan,
        attrs: this.v3 ? void 0 : {
          colspan: this.$props.colSpan,
          role: "gridcell",
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        },
        "class": this.tdClass,
        onKeydown: this.triggerKeydown,
        on: this.v3 ? void 0 : {
          "keydown": this.triggerKeydown,
          "click": this.triggerClick
        },
        onClick: this.triggerClick,
        role: "gridcell",
        "aria-colindex": this.$props.ariaColumnIndex,
        "aria-selected": this.$props.isSelected,
        "data-grid-col-index": this.$props.columnIndex,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      }, [dataAsString]);
    }
    return getTemplate.call(this, {
      h,
      template: this.$props.render,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        click: this.triggerClick,
        keydown: this.triggerKeydown,
        edit: this.triggerEdit,
        add: this.triggerAdd,
        cancel: this.triggerCancel,
        save: this.triggerSave,
        remove: this.triggerRemove
      }
    });
  }
};
var GridCell = GridCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/cells/GridGroupCell.js
var allVue79 = vue_runtime_esm_bundler_exports;
var gh77 = allVue79.h;
var isV379 = allVue79.version && allVue79.version[0] === "3";
var GridGroupCellVue2 = {
  name: "KendoGridGroupCell",
  inheritAttrs: false,
  props: {
    id: String,
    field: String,
    dataItem: Object,
    format: String,
    type: String,
    colSpan: Number,
    className: String,
    columnIndex: Number,
    columnsCount: Number,
    rowType: String,
    level: Number,
    expanded: Boolean,
    editor: String,
    dataIndex: Number,
    isSelected: Boolean,
    isRtl: Boolean,
    ariaColumnIndex: Number,
    render: [String, Function, Object]
  },
  // @ts-ignore
  emits: {
    change: null,
    cellkeydown: null
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    },
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  computed: {
    tdClass: function tdClass5() {
      var _a4;
      var className = this.$props.className;
      return _a4 = {
        "k-table-td": true
      }, _a4[className] = className, _a4;
    }
  },
  methods: {
    triggerKeydown: function triggerKeydown5(event, expanded) {
      this.$emit("cellkeydown", {
        event,
        dataItem: this.$props.dataItem,
        dataIndex: this.$props.dataIndex,
        field: this.$props.field,
        expanded: this.$props.expanded
      });
      if (event.defaultPrevented) {
        return;
      }
      if (event.keyCode === Keys.enter) {
        event.preventDefault();
        this.$emit("change", {
          dataItem: this.$props.dataItem,
          dataIndex: this.$props.dataIndex,
          event,
          level: this.$props.level,
          field: void 0,
          value: !expanded
        });
      }
    },
    clickHandler: function clickHandler3(e, dataItem, expanded) {
      e.preventDefault();
      this.$emit("change", {
        dataItem,
        dataIndex: this.$props.dataIndex,
        event: e,
        level: this.$props.level,
        field: void 0,
        value: !expanded
      });
    }
  },
  // @ts-ignore
  setup: !isV379 ? void 0 : function() {
    var v3 = !!isV379;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render45(createElement) {
    var _this = this;
    var h = gh77 || createElement;
    var defaultRendering = null;
    var _a4 = this.$props, columnIndex = _a4.columnIndex, level = _a4.level, columnsCount = _a4.columnsCount, rowType = _a4.rowType, dataItem = _a4.dataItem, field = _a4.field, expanded = _a4.expanded, render54 = _a4.render;
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);
    var groupCaretAriaLabelCollapseValue = provideLocalizationService(this).toLanguageString(groupCaretAriaLabelCollapse, messages2[groupCaretAriaLabelCollapse]);
    var groupCaretAriaLabelExpandValue = provideLocalizationService(this).toLanguageString(groupCaretAriaLabelExpand, messages2[groupCaretAriaLabelExpand]);
    if (columnIndex === void 0 || level === void 0 || columnIndex < level || columnsCount === void 0 || rowType !== "groupHeader" || dataItem[field] === void 0) {
      defaultRendering = h("td", {
        style: this.$attrs.style,
        key: "g" + columnIndex,
        "class": "k-table-td k-group-cell"
      });
    } else if (columnIndex <= level) {
      defaultRendering = h("td", {
        style: this.$attrs.style,
        onKeydown: function onKeydown(ev) {
          _this.triggerKeydown(ev, expanded);
        },
        on: this.v3 ? void 0 : {
          "keydown": function onKeydown(ev) {
            _this.triggerKeydown(ev, expanded);
          }
        },
        key: "g-colspan",
        "class": this.tdClass,
        colspan: columnsCount - columnIndex,
        attrs: this.v3 ? void 0 : {
          colspan: columnsCount - columnIndex,
          role: "gridcell",
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "aria-expanded": expanded,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
        },
        role: "gridcell",
        "aria-colindex": this.$props.ariaColumnIndex,
        "aria-selected": this.$props.isSelected,
        "aria-expanded": expanded,
        "data-grid-col-index": this.$props.columnIndex,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      }, [h("p", {
        "class": "k-reset"
      }, [h("a", {
        onClick: function onClick2(e) {
          _this.clickHandler(e, dataItem, expanded);
        },
        on: this.v3 ? void 0 : {
          "click": function onClick2(e) {
            _this.clickHandler(e, dataItem, expanded);
          }
        },
        href: "#",
        attrs: this.v3 ? void 0 : {
          href: "#",
          tabindex: -1,
          title: expanded ? groupCaretAriaLabelCollapseValue : groupCaretAriaLabelExpandValue,
          ariaLable: expanded ? groupCaretAriaLabelCollapseValue : groupCaretAriaLabelExpandValue
        },
        tabindex: -1,
        title: expanded ? groupCaretAriaLabelCollapseValue : groupCaretAriaLabelExpandValue,
        ariaLable: expanded ? groupCaretAriaLabelCollapseValue : groupCaretAriaLabelExpandValue
      }, [h(Icon, {
        name: expanded ? "caret-alt-down" : !this.isRtl ? "caret-alt-right" : "caret-alt-left",
        attrs: this.v3 ? void 0 : {
          name: expanded ? "caret-alt-down" : !this.isRtl ? "caret-alt-right" : "caret-alt-left",
          icon: expanded ? caretAltDownIcon : !this.isRtl ? caretAltRightIcon : caretAltLeftIcon
        },
        icon: expanded ? caretAltDownIcon : !this.isRtl ? caretAltRightIcon : caretAltLeftIcon
      })]), dataItem[field].toString()])]);
    }
    return getTemplate.call(this, {
      h,
      template: render54,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        keydown: this.triggerKeydown,
        click: this.clickHandler
      }
    });
  }
};
var GridGroupCell = GridGroupCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/rows/GridRow.js
var allVue80 = vue_runtime_esm_bundler_exports;
var gh78 = allVue80.h;
var isV380 = allVue80.version && allVue80.version[0] === "3";
var GridRowVue2 = {
  name: "KendoGridRow",
  props: {
    rowType: String,
    dataItem: Object,
    isAltRow: Boolean,
    isHidden: Boolean,
    onClick: Function,
    selectedField: String,
    rowHeight: Number,
    ariaRowIndex: Number,
    dataIndex: Number,
    render: [String, Function, Object]
  },
  methods: {
    handleClick: function handleClick4(e) {
      this.$emit("rowclick", e);
    },
    handleDoubleClick: function handleDoubleClick(e) {
      this.$emit("rowdblclick", e);
    }
  },
  // @ts-ignore
  setup: !isV380 ? void 0 : function() {
    var v3 = !!isV380;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render46(createElement) {
    var h = gh78 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var className = this.$props.rowType === "groupFooter" || this.$props.rowType === "groupHeader" ? this.$props.rowType === "groupFooter" && "k-group-footer" || "k-table-group-row k-grouping-row" : (this.$props.isAltRow ? "k-table-alt-row k-master-row k-alt" : "k-master-row") + (this.$props.selectedField !== void 0 && getNestedValue2(this.$props.selectedField, this.$props.dataItem) ? " k-selected" : "");
    var defaultRendering = h("tr", {
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "dblclick": this.handleDoubleClick
      },
      onDblclick: this.handleDoubleClick,
      "class": "k-table-row " + className,
      style: {
        height: this.$props.rowHeight ? this.$props.rowHeight + "px" : "",
        visibility: this.$props.isHidden ? "hidden" : ""
      },
      role: "row",
      attrs: this.v3 ? void 0 : {
        role: "row",
        "aria-rowindex": this.$props.ariaRowIndex,
        "data-grid-row-index": this.$props.rowType === "data" ? this.$props.dataIndex : void 0
      },
      "aria-rowindex": this.$props.ariaRowIndex,
      "data-grid-row-index": this.$props.rowType === "data" ? this.$props.dataIndex : void 0
    }, [defaultSlot]);
    return getTemplate.call(this, {
      h,
      template: this.$props.render,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        click: this.handleClick
      },
      defaultSlots: defaultSlot,
      swapDefaultSlots: true
    });
  }
};
var GridRow = GridRowVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/header/GridHeaderSelectionCell.js
var allVue81 = vue_runtime_esm_bundler_exports;
var gh79 = allVue81.h;
var isV381 = allVue81.version && allVue81.version[0] === "3";
var GridHeaderSelectionCellVue2 = {
  props: {
    field: String,
    title: String,
    selectionValue: Boolean,
    render: [Object, Function, String]
  },
  created: function created8() {
    this.inputId = guid();
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    changeHandle: function changeHandle(e) {
      this.$emit("selectionchange", {
        field: this.$props.field,
        event: e
      });
    }
  },
  // @ts-ignore
  setup: !isV381 ? void 0 : function() {
    var v3 = !!isV381;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render47(createElement) {
    var h = gh79 || createElement;
    var renderTemplate = this.$props.render;
    var ls2 = provideLocalizationService(this);
    var selectAllRowsMessage = ls2.toLanguageString(selectAllRows2, messages2[selectAllRows2]);
    var input = h("input", {
      key: 0,
      checked: this.v3 ? this.$props.selectionValue : null,
      domProps: this.v3 ? void 0 : {
        "checked": this.$props.selectionValue
      },
      id: this.inputId,
      attrs: this.v3 ? void 0 : {
        id: this.inputId,
        type: "checkbox",
        "aria-label": selectAllRowsMessage
      },
      type: "checkbox",
      "class": "k-checkbox k-checkbox-md k-rounded-md",
      "aria-label": selectAllRowsMessage,
      onChange: this.changeHandle,
      on: this.v3 ? void 0 : {
        "change": this.changeHandle
      }
    });
    var defaultRendering = getTemplate.call(this, {
      h,
      template: renderTemplate,
      defaultRendering: input,
      additionalProps: this.$props,
      additionalListeners: {
        selectionchange: this.changeHandle
      }
    });
    return h("span", {
      "class": "k-link"
    }, [h("span", {
      "class": "k-column-title"
    }, [defaultRendering])]);
  }
};
var GridHeaderSelectionCell = GridHeaderSelectionCellVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/GridNoRecords.js
var allVue82 = vue_runtime_esm_bundler_exports;
var gh80 = allVue82.h;
var isV382 = allVue82.version && allVue82.version[0] === "3";
var inject22 = allVue82.inject;
var GridNoRecordsVue2 = {
  name: "GridNoRecords",
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV382 ? void 0 : function() {
    var v3 = !!isV382;
    var kendoLocalizationService = inject22("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render48(createElement) {
    var h = gh80 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var localizationService = provideLocalizationService(this);
    var noRecordsMessage = localizationService.toLanguageString(noRecords, messages2[noRecords]);
    return defaultSlot ? h("div", [defaultSlot]) : this.v3 ? noRecordsMessage : this._v(noRecordsMessage);
  }
};
var GridNoRecords = GridNoRecordsVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/package-metadata.js
var packageMetadata2 = {
  name: "@progress/kendo-vue-grid",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693312966,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-grid/dist/es/Grid.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var __spreadArray7 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue83 = vue_runtime_esm_bundler_exports;
var gh81 = allVue83.h;
var isV383 = allVue83.version && allVue83.version[0] === "3";
var ref6 = allVue83.ref;
var markRaw = allVue83.markRaw;
var GridVue2 = {
  name: "KendoGrid",
  props: {
    topCacheCount: {
      type: Number,
      default: 0
    },
    collapsedGroups: {
      type: Array,
      default: function _default5() {
        return [];
      }
    },
    uniqueField: String,
    totalGroupedHeight: Number,
    allGroupedItems: Object,
    alternatePerGroup: Boolean,
    columns: Array,
    columnVirtualization: Boolean,
    dataItems: [Array, Object],
    sortable: [Boolean, Object],
    sort: Array,
    filterable: Boolean,
    filterOperators: Object,
    filterCellRender: templateDefinition,
    headerCellRender: templateDefinition,
    loader: [String, Function, Object, Boolean],
    filter: Object,
    pageable: [Boolean, Object],
    pageSize: Number,
    total: Number,
    skip: Number,
    take: Number,
    expandField: String,
    expandColumn: Object,
    selectedField: String,
    cellRender: templateDefinition,
    rowRender: templateDefinition,
    resizable: Boolean,
    reorderable: Boolean,
    group: Array,
    groupable: [Boolean, Object],
    editField: String,
    rowClass: Function,
    scrollable: {
      type: String,
      default: "scrollable"
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator4(value) {
        return ["small", "medium"].includes(value);
      }
    },
    pager: templateDefinition,
    rowHeight: Number,
    detailRowHeight: Number,
    detail: templateDefinition,
    columnMenu: [Boolean, String, Function, Object],
    columnMenuAnimate: {
      type: [Boolean, Object],
      default: function _default6() {
        return true;
      }
    },
    dataItemKey: String,
    navigatable: {
      type: Boolean,
      default: false
    }
  },
  data: function data13() {
    return {
      isRtl: false,
      context: void 0,
      navigation: void 0
    };
  },
  watch: {
    skip: function skip(value, oldValue) {
      this.onSkipChanged(value, oldValue);
    },
    total: function total(value, oldValue) {
      this.onTotalChanged(value, oldValue);
    },
    rowHeight: function rowHeight(value, oldValue) {
      this.onRowHeightChanged(value, oldValue);
    }
  },
  created: function created9() {
    validatePackage(packageMetadata2);
    this.initialHeight = null;
    this._columns = [];
    var groupable = this.currentGroupable;
    var VS = this.getVirtualScroll();
    this.vs = new VS(groupable || this.$props.rowHeight === void 0 || this.$props.rowHeight === 0, this.$props.topCacheCount);
    this.dragLogic = new CommonDragLogic2(this.columnReorder.bind(this), this.groupReorder.bind(this), this.columnToGroup.bind(this));
    this.columnResize = new ColumnResize2(this.onResize.bind(this));
    this._columnsMap = [[]];
    this._header = null;
    this._footer = null;
    this.forceUpdateTimeout = void 0;
    this._gridId = guid();
    this._gridRoleElementId = guid();
    this.slicedCurrentData = void 0;
    this._prevTotal = void 0;
  },
  mounted: function mounted10() {
    this.setRefs();
    var rtl = isRtl(this._element);
    this._prevTotal = this.$props.total;
    this.isRtl = rtl;
    this.initialHeight = this._element.style ? this._element.style.height : null;
  },
  updated: function updated2() {
    this.setRefs();
    var rtl = isRtl(this._element);
    this.isRtl = rtl;
    this._prevTotal = this.$props.total;
    if (this.vs.tableTransform && this.vs.table) {
      this.vs.table.style.transform = this.vs.tableTransform;
      this.vs.tableTransform = "";
    }
  },
  destroyed: !!isV383 ? void 0 : function() {
    this.gridUnmounted();
  },
  // @ts-ignore
  unmounted: function unmounted4() {
    this.gridUnmounted();
  },
  computed: {
    nonscrollableWrapperClass: function nonscrollableWrapperClass() {
      var _a4;
      var size = this.$props.size;
      return _a4 = {
        "k-grid": true,
        "k-grid-md": !size
      }, _a4["k-grid-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a4;
    },
    scrollableWrapperClass: function scrollableWrapperClass() {
      var scrollable = this.$props.scrollable;
      return __assign7(__assign7({}, this.nonscrollableWrapperClass), {
        "k-grid-virtual": scrollable === "virtual"
      });
    },
    gridTableClass: function gridTableClass() {
      var _a4;
      var size = this.$props.size;
      return _a4 = {
        "k-table": true,
        "k-grid-table": true,
        "k-grid-md": !size
      }, _a4["k-table-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a4;
    },
    getCorrectHeight: {
      get: function get11() {
        if (this.$props.scrollable === "virtual") {
          return this.initialHeight || "450px";
        } else {
          return null;
        }
      }
    },
    currentGroupable: function currentGroupable() {
      return this.$props.groupable === true && this.$props.group && this.$props.group.length || isObject(this.$props.groupable) && this.$props.groupable.enabled !== false;
    },
    computedCollapsed: function computedCollapsed() {
      var newCollapsed = [];
      if (this.$props.group) {
        for (var i = 0; i < this.$props.group.length; i++) {
          if (this.$props.collapsedGroups[i]) {
            newCollapsed.push(this.$props.collapsedGroups[i]);
          } else {
            newCollapsed.push([]);
          }
        }
      }
      return newCollapsed;
    },
    // Calculates the value of the ariaRowcount attribute. 
    getAriaRowCount: function getAriaRowCount() {
      var dataItems = this.$props.dataItems;
      var totalRecords = this.$props.total !== void 0 && this.$props.total || dataItems !== void 0 && dataItems !== null && dataItems.total !== void 0 && dataItems.total || dataItems !== void 0 && dataItems !== null && dataItems.length !== void 0 && dataItems.length || 0;
      if (this.$props.detail) {
        return this._columnsMap.length + (this.$props.filterable ? 1 : 0) + totalRecords * 2 + (this._columns.some(function(c) {
          return Boolean(c.footerCell);
        }) ? 1 : 0);
      } else if (!this.$props.pageable && this.$props.scrollable === "scrollable") {
        return void 0;
      } else if (this.$props.groupable) {
        return -1;
      } else {
        return this._columnsMap.length + (this.$props.filterable ? 1 : 0) + totalRecords + (this._columns.some(function(c) {
          return Boolean(c.footerCell);
        }) ? 1 : 0);
      }
    },
    // Calculates the value of the ariaColcount attribute. 
    // Based on the result of this method the ariaColIndex is rendered or not in the HeaderRow TH elements
    getAriaColCount: function getAriaColCount() {
      var columns = this.$props.columns;
      var columnVirtualization = this.$props.columnVirtualization;
      var columnsHasHiddenProperty = columns && columns.filter(function(col) {
        return col.hidden !== void 0;
      }).length !== 0;
      if (columnVirtualization || columnsHasHiddenProperty) {
        return columns.length !== 0 ? columns.length : -1;
      } else {
        return void 0;
      }
    }
  },
  methods: {
    /**
     * A getter of the current columns. Gets the current column width or current columns,
     * or any other [`GridColumnProps`]({% slug api_grid_gridcolumnprops %}) for each defined column.
     * Can be used on each Grid instance. To obtain the instance of the rendered Grid, use the `ref`
     * callback. The following example demonstrates how to reorder the columns by dragging their handlers
     * and check the properties afterwards. You can check the result in the browser console.
     */
    getColumns: function getColumns() {
      var shuffledColumns = this._columns.filter(function(q) {
        return q.declarationIndex >= 0 && q.parentIndex === -1;
      });
      var sanitize = function sanitize2(columns) {
        columns.sort(function(a, b) {
          return a.declarationIndex - b.declarationIndex;
        });
        return columns.map(function(column) {
          var declarationIndex = column.declarationIndex, parentIndex = column.parentIndex, depth = column.depth, colSpan = column.colSpan, rowSpan = column.rowSpan, index = column.index, kFirst = column.kFirst, children = column.children, props = __rest(column, ["declarationIndex", "parentIndex", "depth", "colSpan", "rowSpan", "index", "kFirst", "children"]);
          return children.length ? __assign7({
            children: sanitize2(children)
          }, props) : props;
        });
      };
      return sanitize(shuffledColumns);
    },
    setRefs: function setRefs() {
      var elementString = "$el";
      var element = getRef(this, "gridNav");
      if (element) {
        this._element = element[elementString];
      }
      var groupPanelDiv = getRef(this, "groupPanelDiv");
      if (groupPanelDiv) {
        var groupPanelDivElement = groupPanelDiv[elementString] || null;
        this.dragLogic.refGroupPanelDiv(groupPanelDivElement);
      }
      var dropElementClue = getRef(this, "dropElementClue");
      var dragElementClue = getRef(this, "dragElementClue");
      this.dragLogic.refDropElementClue(dropElementClue);
      this.dragLogic.refDragElementClue(dragElementClue);
      this.columnResize.colGroupMain = getRef(this, "colGroup");
      this._header = getRef(this, "header");
      this._footer = getRef(this, "footer");
      this.vs.containerRef = getRef(this, "scrollContainer");
      this.vs.table = getRef(this, "scrollTable");
      this.resetTableWidth();
      this.vs.tableBodyRef = getRef(this, "scrollTableBody");
    },
    gridUnmounted: function gridUnmounted() {
      clearTimeout(this.forceUpdateTimeout);
      this.columnResize.columns = [];
      this.dragLogic.columns = [];
      if (this.dragLogic && this.dragLogic.dragElementClue) {
        this.dragLogic.dragElementClue.$el.remove();
        this.dragLogic.dropElementClue.$el.remove();
      }
      this.currentData = [];
      this._columns = [];
    },
    resetVirtual: function resetVirtual() {
      this.vs.PageChange = this.pageChangeHandler;
      this.vs.realSkip = this.$props.skip || 0;
      this.vs.pageSize = (this.$props.take !== void 0 ? this.$props.take : this.$props.pageSize) || 0;
      this.vs.scrollableVirtual = this.$props.scrollable === "virtual";
      this.vs.propsSkip = (this.$props.skip || 0) + (this.$props.scrollable === "virtual" ? this.vs.topCacheCount + (this.vs.attendedSkip - (this.$props.skip || 0)) : 0);
    },
    getVirtualScroll: function getVirtualScroll() {
      return VirtualScroll;
    },
    isAllData: function isAllData() {
      var _a4 = this.$props, dataItems = _a4.dataItems, total2 = _a4.total;
      if (Array.isArray(dataItems)) {
        return dataItems.length === total2;
      } else if (dataItems) {
        return total2 === dataItems.total;
      }
      return false;
    },
    initializeVirtualization: function initializeVirtualization(total2) {
      if (this.$props.total !== this._prevTotal || this.$props.scrollable === "virtual" !== this.vs.scrollableVirtual) {
        this.vs.reset();
      }
      this.resetVirtual();
      this.vs.total = total2;
      if (this.$props.rowHeight !== void 0 && this.$props.rowHeight > 0 && !this.currentGroupable) {
        this.vs.containerHeight = Math.min(1533915, this.$props.rowHeight * (total2 || 0));
      } else {
        if (this.$props.totalGroupedHeight) {
          this.vs.containerHeight = Math.min(1533915, this.$props.totalGroupedHeight);
        } else if (this.$props.allGroupedItems && this.$props.allGroupedItems.data) {
          var allGroupedTotal = this.totalGroupedRows(applyExpandedState(this.$props.allGroupedItems, this.computedCollapsed, this.$props.uniqueField).data);
          this.vs.containerHeight = Math.min(1533915, this.$props.rowHeight * allGroupedTotal);
        } else {
          this.vs.containerHeight = 1533915;
        }
      }
      this.slicedCurrentData = void 0;
      if (this.vs instanceof VirtualScrollFixed) {
        var _a4 = this.$props, _b2 = _a4.rowHeight, rowHeight2 = _b2 === void 0 ? 0 : _b2, detail = _a4.detail, expandField = _a4.expandField;
        var _c2 = this.$props.detailRowHeight, detailRowHeight = _c2 === void 0 ? 0 : _c2;
        detailRowHeight = Boolean(detail && expandField) ? detailRowHeight : rowHeight2;
        if (this.isAllData()) {
          this.vs.total = this.currentData.length;
          this.slicedCurrentData = this.currentData.slice(this.vs.realSkip, this.vs.realSkip + this.vs.pageSize);
          this.vs.rowHeightService = this.rowHeightService(this.vs, this.currentData.length, rowHeight2, detailRowHeight, this.currentData);
        } else {
          this.vs.rowHeightService = new RowHeightService(total2, rowHeight2, detailRowHeight);
        }
        var containerHeight = this.vs.rowHeightService.totalHeight();
        this.vs.containerHeight = firefox ? Math.min(firefoxMaxHeight, containerHeight) : containerHeight;
      }
    },
    onSkipChanged: function onSkipChanged(value, _oldValue) {
      if (Math.max(0, this.vs.attendedSkip) !== value && value !== void 0) {
        this.vs.attendedSkip = value;
        this.vs.propsSkip = (value || 0) + (this.$props.scrollable === "virtual" ? this.vs.topCacheCount + (this.vs.attendedSkip - (value || 0)) : 0);
      }
    },
    onTotalChanged: function onTotalChanged(_value, _oldValue) {
      var groupable = this.currentGroupable;
      this.vs.reset();
      this.vs = new VirtualScroll(groupable || this.$props.rowHeight === void 0 || this.$props.rowHeight === 0, this.$props.topCacheCount);
      this.resetVirtual();
      this.setRefs();
    },
    onRowHeightChanged: function onRowHeightChanged(_value, _oldValue) {
      var groupable = this.currentGroupable;
      this.vs.reset();
      this.vs = new VirtualScroll(groupable || this.$props.rowHeight === void 0 || this.$props.rowHeight === 0, this.$props.topCacheCount);
      this.resetVirtual();
      this.setRefs();
    },
    scrollHandler: function scrollHandler(event) {
      var _this = this;
      clearTimeout(this.forceUpdateTimeout);
      if (this.$props.columnVirtualization && !this.vs.scrollableVirtual) {
        this.forceUpdateTimeout = setTimeout(function() {
          _this.$forceUpdate();
        }, 0);
      }
      if (this._header) {
        this._header.setScrollLeft(event.currentTarget.scrollLeft);
      }
      if (this._footer) {
        this._footer.setScrollLeft(event.currentTarget.scrollLeft);
      }
      if (this.vs) {
        this.vs.scrollHandler(event);
      }
      this.$emit("scroll", event);
    },
    rowClick: function rowClick(e, item) {
      if (e.target.type !== "checkbox") {
        this.$emit("rowclick", __assign7({
          dataItem: item.dataItem
        }, this.getArguments(e)));
      }
    },
    rowDoubleClick: function rowDoubleClick(e, item) {
      if (e.target.type !== "checkbox") {
        this.$emit("rowdblclick", __assign7({
          dataItem: item.dataItem
        }, this.getArguments(e)));
      }
    },
    loopGroupedItems: function loopGroupedItems(dataItems, func, level, item) {
      var _this = this;
      if (level === void 0) {
        level = 0;
      }
      if (item === void 0) {
        item = null;
      }
      dataItems.forEach(function(di) {
        if (!item && func(di, level)) {
          item = di;
        }
        if (di.items && di.items.length && !item) {
          item = _this.loopGroupedItems(di.items, func, level + 1, item);
        }
      });
      return item;
    },
    updateGroupCollapsed: function updateGroupCollapsed(event) {
      var collapsed = this.computedCollapsed;
      var collapsedLevel = collapsed[event.level];
      var uniqueField = this.$props.uniqueField;
      var allItemsItem = function allItemsItem2(item, level) {
        return item.value === event.dataItem.value && level === event.level;
      };
      var dataItem = this.allGroupedItems ? this.loopGroupedItems(this.allGroupedItems.data, allItemsItem, 0, null) : event.dataItem;
      var uniqueItemValue = groupedFirstItemValue(dataItem || event.dataItem, uniqueField);
      if (event.value) {
        if (collapsedLevel && collapsedLevel.length) {
          var expandedIndex = collapsedLevel.indexOf(uniqueItemValue);
          if (expandedIndex > -1) {
            collapsedLevel.splice(expandedIndex, 1);
          }
        }
      } else {
        if (collapsedLevel) {
          if (!collapsedLevel.includes(uniqueItemValue)) {
            collapsedLevel.push(uniqueItemValue);
          }
        } else {
          collapsedLevel = [uniqueItemValue];
        }
      }
      return collapsed;
    },
    itemChange: function itemChange(event) {
      var itemChange2 = hasListener.call(this, "itemchange");
      if (event.field === this.$props.expandField || (this.$props.group || this.$props.detail) && event.field === void 0) {
        var expandChange2 = hasListener.call(this, "expandchange");
        if (expandChange2 && event.dataItem) {
          this.$emit("expandchange", __assign7(__assign7({}, this.getArguments(event.event)), {
            collapsedGroups: this.updateGroupCollapsed(event),
            dataItem: event.dataItem,
            value: event.value
          }));
        }
        return;
      }
      if (itemChange2) {
        this.$emit("itemchange", __assign7(__assign7({}, this.getArguments(event.event)), {
          dataItem: event.dataItem,
          field: event.field,
          value: event.value
        }));
      }
    },
    cellClickHandler: function cellClickHandler(event) {
      this.$emit("cellclick", {
        dataItem: event.dataItem,
        field: event.field
      });
    },
    cellKeydownHandler: function cellKeydownHandler(event) {
      this.$emit("cellkeydown", event);
    },
    editHandler: function editHandler(dataItem) {
      this.$emit("edit", {
        dataItem
      });
    },
    removeHandler: function removeHandler(dataItem) {
      this.$emit("remove", {
        dataItem
      });
    },
    saveHandler: function saveHandler(dataItem) {
      this.$emit("save", {
        dataItem
      });
    },
    cancelHandler: function cancelHandler(dataItem) {
      this.$emit("cancel", {
        dataItem
      });
    },
    selectionChangeHandler: function selectionChangeHandler2(options) {
      var event = options.event, dataItem = options.dataItem, dataIndex = options.dataIndex, columnIndex = options.columnIndex;
      this.$emit("selectionchange", __assign7(__assign7({}, this.getArguments(event.event)), {
        dataItem,
        startColIndex: columnIndex,
        endColIndex: columnIndex,
        startRowIndex: dataIndex,
        endRowIndex: dataIndex,
        dataItems: this.getLeafDataItems(),
        altKey: false,
        ctrlKey: false,
        shiftKey: false,
        metaKey: false,
        isDrag: false,
        componentId: this._gridId,
        selectedField: this.$props.selectedField || ""
      }));
    },
    onHeaderSelectionChangeHandler: function onHeaderSelectionChangeHandler(event) {
      this.$emit("headerselectionchange", {
        field: event.field,
        event: event.event,
        target: this
      });
    },
    pageChangeHandler: function pageChangeHandler(page, event) {
      this.raiseDataEvent("pagechange", {
        page,
        event
      }, {
        skip: page.skip,
        take: page.take
      }, event);
    },
    sortChangeHandler: function sortChangeHandler2(sort, event) {
      this.raiseDataEvent("sortchange", {
        sort
      }, {
        sort
      }, event);
    },
    filterChangeHandler: function filterChangeHandler3(filter, event) {
      this.raiseDataEvent("filterchange", {
        filter
      }, {
        filter,
        skip: 0
      }, event);
    },
    groupChangeHandler: function groupChangeHandler(groups, event) {
      this.raiseDataEvent("groupchange", {
        group: groups
      }, {
        group: groups,
        skip: 0
      }, event);
    },
    raiseDataEvent: function raiseDataEvent(handler, data15, moreData, event) {
      if (hasListener.call(this, handler)) {
        this.$emit(handler, __assign7(__assign7({}, this.getArguments(event)), data15));
      } else if (hasListener.call(this, "datastatechange")) {
        this.$emit("datastatechange", __assign7(__assign7({}, this.getArguments(event)), {
          data: __assign7(__assign7({}, this.getDataState()), moreData)
        }));
      }
    },
    columnReorder: function columnReorder(prev, next, event) {
      var _a4;
      var _this = this;
      var depth = this._columns[prev].depth;
      var end = function end2(index) {
        do {
          index++;
        } while (index < _this._columns.length && _this._columns[index].depth > depth);
        return index;
      };
      var spliced = this._columns.splice(prev, end(prev) - prev);
      (_a4 = this._columns).splice.apply(_a4, __spreadArray7([prev < next ? end(next - spliced.length) : next, 0], spliced, false));
      this._columns.filter(function(q) {
        return q.declarationIndex >= 0;
      }).forEach(function(c, i) {
        return c.orderIndex = i;
      });
      var eventColumnProps = this.getColumns();
      this.$emit("columnreorder", {
        target: this,
        columns: eventColumnProps,
        event,
        prev,
        next
      });
    },
    groupReorder: function groupReorder(prevIndex, nextIndex, event) {
      if (this.$props.group === void 0) {
        return;
      }
      var group = this.$props.group.slice();
      group.splice.apply(group, __spreadArray7([nextIndex, 0], group.splice(prevIndex, 1), false));
      this.groupChangeHandler(group, event);
    },
    columnToGroup: function columnToGroup(columnIndex, groupIndex, event) {
      var field = this._columns[columnIndex].field;
      if (!field) {
        return;
      }
      var group = (this.$props.group || []).slice();
      group.splice(groupIndex, 0, {
        field
      });
      this.groupChangeHandler(group, event);
    },
    resetTableWidth: function resetTableWidth() {
      var totalWidth = 0;
      if (!this.columnResize.colGroupMain) {
        return;
      }
      var colElements = this.columnResize.colGroupMain.children;
      for (var i = 0; i < colElements.length; i++) {
        var width = colElements[i].width;
        if (!width) {
          return;
        }
        totalWidth += parseFloat(width.toString());
      }
      totalWidth = Math.round(totalWidth);
      if (this._header) {
        this._header.setWidth(totalWidth);
      }
      if (this._footer) {
        this._footer.setWidth(totalWidth);
      }
      if (this.vs.table) {
        this.vs.table.style.width = totalWidth + "px";
      }
    },
    onResize: function onResize(index, newWidth, oldWidth, event, end) {
      this.resetTableWidth();
      this.$emit("columnresize", {
        columns: this.getColumns(),
        index,
        event,
        newWidth,
        oldWidth,
        end,
        target: this
      });
    },
    initColumns: function initColumns(columnElements, groupCount) {
      var _this = this;
      var idPrefix = tableKeyboardNavigationTools.getIdPrefix(this.navigation);
      this._columns = readColumns(columnElements, this.getColumns(), {
        prevId: 0,
        idPrefix
      });
      if (this._columns.length === 0) {
        var currentColumns = autoGenerateColumns(this.$props.dataItems, this.$props.group, this.$props.expandField, {
          prevId: 0,
          idPrefix
        });
        this._columns = currentColumns;
      }
      if (this.$props.selectedField) {
        var that_1 = this;
        this._columns.filter(function(c) {
          return c.field === _this.$props.selectedField;
        }).forEach(function(c) {
          c.width = c.width || "50px";
          c.internalCell = that_1.v3 ? markRaw(GridSelectionCell) : GridSelectionCell;
          c.internalHeaderCell = that_1.v3 ? markRaw(GridHeaderSelectionCell) : GridHeaderSelectionCell;
        });
      }
      var defaultServiceProps = {
        id: "",
        resizable: true,
        width: "32px",
        title: " ",
        declarationIndex: -1,
        orderIndex: -1,
        children: [],
        parentIndex: -1,
        depth: 0,
        colSpan: 0,
        rowSpan: 0,
        left: 0,
        right: 0,
        // position: 'sticky',
        index: 0,
        rightBorder: false,
        ariaColumnIndex: 1,
        isAccessible: true
      };
      var columnIndexOffset = 0;
      if (this.$props.expandField && hasListener.call(this, "expandchange") && this.$props.detail) {
        this._columns.unshift(__assign7(__assign7(__assign7({}, defaultServiceProps), {
          internalCell: this.v3 ? markRaw(GridHierarchyCell) : GridHierarchyCell,
          field: this.$props.expandField,
          headerClassName: "k-hierarchy-cell k-header",
          id: tableKeyboardNavigationTools.generateNavigatableId("".concat(this._columns.length), idPrefix, "column")
        }), this.expandColumn));
        columnIndexOffset++;
      }
      for (var i = 0; i < groupCount; i++) {
        this._columns.unshift(__assign7(__assign7({}, defaultServiceProps), {
          isAccessible: false,
          internalCell: this.v3 ? markRaw(GridGroupCell) : GridGroupCell,
          field: "value"
        }));
        columnIndexOffset++;
      }
      this._columns.slice(columnIndexOffset).forEach(function(c) {
        return c.parentIndex >= 0 && (c.parentIndex += columnIndexOffset);
      });
      this._columnsMap = mapColumns(this._columns);
      this.columnResize.columns = this._columns;
      this.dragLogic.columns = this._columns;
    },
    resolveTitle: function resolveTitle(field) {
      var column = this.findColumnByField(field);
      var title = column && (column.title || column.field);
      return title === void 0 ? field : title;
    },
    findColumnByField: function findColumnByField(field) {
      var _this = this;
      var column;
      this.$props.columns.forEach(function(c) {
        var columnFound = _this.searchColumn(c, field);
        if (columnFound) {
          column = columnFound;
        }
      });
      return column;
    },
    searchColumn: function searchColumn(column, field) {
      if (column.field === field) {
        return column;
      } else if (column.children) {
        var i = void 0, result = null;
        for (i = 0; result == null && i < column.children.length; i++) {
          result = this.searchColumn(column.children[i], field);
        }
        return result;
      }
      return null;
    },
    getDataState: function getDataState() {
      return {
        filter: this.$props.filter,
        sort: this.$props.sort,
        skip: this.$props.skip,
        take: this.$props.take !== void 0 ? this.$props.take : this.$props.pageSize,
        group: this.$props.group
      };
    },
    getArguments: function getArguments(event) {
      return {
        event,
        target: this
      };
    },
    getLeafDataItems: function getLeafDataItems2() {
      return this.currentData.filter(function(item) {
        return item.rowType === "data";
      }).map(function(item) {
        return item.dataItem;
      });
    },
    totalGroupedRows: function totalGroupedRows(gridData) {
      var allRowsCount = 0;
      if (gridData) {
        allRowsCount = this.addSubItems(gridData, allRowsCount);
      }
      return allRowsCount;
    },
    addSubItems: function addSubItems(gridData, allRowsCount) {
      var _this = this;
      gridData.forEach(function(item) {
        allRowsCount++;
        if (item.expanded !== false && item.items) {
          allRowsCount = _this.addSubItems(item.items, allRowsCount);
        }
        if (_this.group && _this.group.length && (_this.$props.groupable.footer === "always" || item.expanded !== false && item.items && _this.$props.groupable.footer === "visible")) {
          allRowsCount++;
        }
      });
      return allRowsCount;
    }
  },
  // @ts-ignore
  setup: !isV383 ? void 0 : function() {
    var v3 = !!isV383;
    var groupPanelDivRef = ref6(null);
    var dropElementClueRef = ref6(null);
    var dragElementClueRef = ref6(null);
    var headerRef = ref6(null);
    var footerRef = ref6(null);
    var gridNavRef = ref6(null);
    var colGroupRef = ref6(null);
    var scrollContainerRef = ref6(null);
    var scrollTableRef = ref6(null);
    var scrollTableBodyRef = ref6(null);
    return {
      v3,
      groupPanelDivRef,
      dropElementClueRef,
      dragElementClueRef,
      headerRef,
      footerRef,
      gridNavRef,
      colGroupRef,
      scrollContainerRef,
      scrollTableRef,
      scrollTableBodyRef
    };
  },
  // @ts-ignore
  render: function render49(createElement) {
    var _this3 = this;
    var _this = this;
    var h = gh81 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var total2 = this.$props.total || 0;
    var idPrefix = tableKeyboardNavigationTools.getIdPrefix(this.navigation);
    var gridData = [];
    if (Array.isArray(this.$props.dataItems)) {
      gridData = this.$props.dataItems;
    } else if (this.$props.dataItems) {
      gridData = applyExpandedState(this.$props.dataItems, this.$props.collapsedGroups.length ? this.computedCollapsed : [], this.$props.uniqueField).data;
      total2 = total2 || this.$props.dataItems.total;
    }
    var groupable = this.$props.groupable === true || isObject(this.$props.groupable) && this.$props.groupable.enabled !== false;
    this.columnResize.resizable = this.$props.resizable || false;
    this.dragLogic.reorderable = this.$props.reorderable || false;
    this.dragLogic.groupable = groupable;
    this.initializeVirtualization(total2);
    var groupingFooter = isObject(this.$props.groupable) && this.$props.groupable.footer || "none";
    this.currentData = [];
    var resolvedGroupsCount = flatData(this.currentData, gridData, groupingFooter, {
      index: this.$props.skip || 0
    }, this.$props.group !== void 0, this.$props.expandField);
    var children = defaultSlot || [];
    var notHiddenColumns = this.$props.columns ? this.$props.columns.filter(function(column) {
      return !column.hidden;
    }) : this.$props.columns;
    this.initColumns(notHiddenColumns, resolvedGroupsCount);
    var toolbar = children.filter(function(child) {
      return child && child.tag && child.tag.toLowerCase().indexOf("toolbar") !== -1 || child.componentOptions && child.componentOptions.tag && child.componentOptions.tag.toLowerCase().indexOf("toolbar") !== -1 || child.type && child.type.name && child.type.name.toLowerCase().indexOf("toolbar") !== -1;
    });
    var noRecords2 = children.filter(function(child) {
      return child && child.tag && child.tag.toLowerCase().indexOf("records") !== -1 || child.componentOptions && child.componentOptions.tag && child.componentOptions.tag.toLowerCase().indexOf("records") !== -1 || child.type && child.type.name && child.type.name.toLowerCase().indexOf("records") !== -1;
    });
    var columnsWithColGroup = this._columns.filter(function(c) {
      return c.children.length === 0;
    });
    var groupingPanel = groupable && h(GroupPanel, {
      ref: this.v3 ? function(el) {
        _this.groupPanelDivRef = el;
      } : "groupPanelDiv",
      group: this.$props.group || [],
      attrs: this.v3 ? void 0 : {
        group: this.$props.group || [],
        ariaControls: this._gridRoleElementId,
        resolveTitle: this.resolveTitle
      },
      ariaControls: this._gridRoleElementId,
      onGroupChange: this.groupChangeHandler,
      on: this.v3 ? void 0 : {
        "groupChange": this.groupChangeHandler,
        "pressHandler": this.dragLogic.pressHandler,
        "dragHandler": this.dragLogic.dragHandler,
        "releaseHandler": this.dragLogic.releaseHandler
      },
      onPressHandler: this.dragLogic.pressHandler,
      onDragHandler: this.dragLogic.dragHandler,
      onReleaseHandler: this.dragLogic.releaseHandler,
      resolveTitle: this.resolveTitle
    });
    var renderClues = (this.dragLogic.reorderable || this.dragLogic.groupable) && canUseDOM && document && document.body;
    var clues = (
      // @ts-ignore
      [
        renderClues && h(DropClue2, {
          ref: this.v3 ? function(el) {
            _this.dropElementClueRef = el;
          } : "dropElementClue"
        }),
        // @ts-ignore
        renderClues && h(DragClue2, {
          ref: this.v3 ? function(el) {
            _this.dragElementClueRef = el;
          } : "dragElementClue"
        })
      ]
    );
    var header = h(Header, {
      size: this.$props.size,
      attrs: this.v3 ? void 0 : {
        size: this.$props.size,
        columnResize: this.columnResize,
        staticHeaders: this.$props.scrollable !== "none",
        // @ts-ignore
        headerRow: h(HeaderRow, {
          grid: this,
          attrs: this.v3 ? void 0 : {
            grid: this,
            sort: this.$props.sort,
            groupable: this.$props.groupable,
            reorderable: this.$props.reorderable,
            sortable: this.$props.sortable,
            filter: this.$props.filter,
            filterable: this.$props.filterable,
            filterOperators: this.$props.filterOperators || operators2,
            columnMenu: this.$props.columnMenu,
            columnMenuAnimate: this.$props.columnMenuAnimate,
            columns: this._columns,
            columnsInitial: this.$props.columns,
            columnResize: this.columnResize,
            columnsMap: this._columnsMap,
            cellRender: this.$props.headerCellRender,
            isRtl: this.isRtl,
            isColCountDefined: this.getAriaColCount !== void 0,
            filterRow: this.$props.filterable && h(FilterRow, {
              grid: this,
              attrs: this.v3 ? void 0 : {
                grid: this,
                size: this.$props.size,
                columns: this._columns,
                filter: this.$props.filter,
                filterOperators: this.$props.filterOperators || operators2,
                sort: this.$props.sort,
                cellRender: this.$props.filterCellRender,
                isRtl: this.isRtl,
                ariaRowIndex: this._columnsMap.length + 1
              },
              size: this.$props.size,
              columns: this._columns,
              filter: this.$props.filter,
              filterOperators: this.$props.filterOperators || operators2,
              onFilterchange: this.filterChangeHandler,
              on: this.v3 ? void 0 : {
                "filterchange": this.filterChangeHandler
              },
              sort: this.$props.sort,
              cellRender: this.$props.filterCellRender,
              isRtl: this.isRtl,
              ariaRowIndex: this._columnsMap.length + 1
            }) || void 0
          },
          sort: this.$props.sort,
          groupable: this.$props.groupable,
          reorderable: this.$props.reorderable,
          sortable: this.$props.sortable,
          onSortChange: this.sortChangeHandler,
          on: this.v3 ? void 0 : {
            "sortChange": this.sortChangeHandler,
            "filterChange": this.filterChangeHandler,
            "selectionchange": this.onHeaderSelectionChangeHandler,
            "pressHandler": this.dragLogic.pressHandler,
            "dragHandler": this.dragLogic.dragHandler,
            "releaseHandler": this.dragLogic.releaseHandler
          },
          filter: this.$props.filter,
          filterable: this.$props.filterable,
          filterOperators: this.$props.filterOperators || operators2,
          onFilterChange: this.filterChangeHandler,
          columnMenu: this.$props.columnMenu,
          columnMenuAnimate: this.$props.columnMenuAnimate,
          onSelectionchange: this.onHeaderSelectionChangeHandler,
          columns: this._columns,
          columnsInitial: this.$props.columns,
          columnResize: this.columnResize,
          onPressHandler: this.dragLogic.pressHandler,
          onDragHandler: this.dragLogic.dragHandler,
          onReleaseHandler: this.dragLogic.releaseHandler,
          columnsMap: this._columnsMap,
          cellRender: this.$props.headerCellRender,
          isRtl: this.isRtl,
          isColCountDefined: this.getAriaColCount !== void 0,
          filterRow: this.$props.filterable && h(FilterRow, {
            grid: this,
            attrs: this.v3 ? void 0 : {
              grid: this,
              size: this.$props.size,
              columns: this._columns,
              filter: this.$props.filter,
              filterOperators: this.$props.filterOperators || operators2,
              sort: this.$props.sort,
              cellRender: this.$props.filterCellRender,
              isRtl: this.isRtl,
              ariaRowIndex: this._columnsMap.length + 1
            },
            size: this.$props.size,
            columns: this._columns,
            filter: this.$props.filter,
            filterOperators: this.$props.filterOperators || operators2,
            onFilterchange: this.filterChangeHandler,
            on: this.v3 ? void 0 : {
              "filterchange": this.filterChangeHandler
            },
            sort: this.$props.sort,
            cellRender: this.$props.filterCellRender,
            isRtl: this.isRtl,
            ariaRowIndex: this._columnsMap.length + 1
          }) || void 0
        }),
        cols: columnsWithColGroup.map(function(column, index) {
          return h("col", {
            key: index.toString(),
            width: column.width !== void 0 ? Math.floor(parseFloat(column.width.toString())) + "px" : void 0,
            attrs: this.v3 ? void 0 : {
              width: column.width !== void 0 ? Math.floor(parseFloat(column.width.toString())) + "px" : void 0
            }
          });
        }, this)
      },
      columnResize: this.columnResize,
      staticHeaders: this.$props.scrollable !== "none",
      ref: this.v3 ? function(el) {
        _this.headerRef = el;
      } : "header",
      headerRow: h(HeaderRow, {
        grid: this,
        attrs: this.v3 ? void 0 : {
          grid: this,
          sort: this.$props.sort,
          groupable: this.$props.groupable,
          reorderable: this.$props.reorderable,
          sortable: this.$props.sortable,
          filter: this.$props.filter,
          filterable: this.$props.filterable,
          filterOperators: this.$props.filterOperators || operators2,
          columnMenu: this.$props.columnMenu,
          columnMenuAnimate: this.$props.columnMenuAnimate,
          columns: this._columns,
          columnsInitial: this.$props.columns,
          columnResize: this.columnResize,
          columnsMap: this._columnsMap,
          cellRender: this.$props.headerCellRender,
          isRtl: this.isRtl,
          isColCountDefined: this.getAriaColCount !== void 0,
          filterRow: this.$props.filterable && h(FilterRow, {
            grid: this,
            attrs: this.v3 ? void 0 : {
              grid: this,
              size: this.$props.size,
              columns: this._columns,
              filter: this.$props.filter,
              filterOperators: this.$props.filterOperators || operators2,
              sort: this.$props.sort,
              cellRender: this.$props.filterCellRender,
              isRtl: this.isRtl,
              ariaRowIndex: this._columnsMap.length + 1
            },
            size: this.$props.size,
            columns: this._columns,
            filter: this.$props.filter,
            filterOperators: this.$props.filterOperators || operators2,
            onFilterchange: this.filterChangeHandler,
            on: this.v3 ? void 0 : {
              "filterchange": this.filterChangeHandler
            },
            sort: this.$props.sort,
            cellRender: this.$props.filterCellRender,
            isRtl: this.isRtl,
            ariaRowIndex: this._columnsMap.length + 1
          }) || void 0
        },
        sort: this.$props.sort,
        groupable: this.$props.groupable,
        reorderable: this.$props.reorderable,
        sortable: this.$props.sortable,
        onSortChange: this.sortChangeHandler,
        on: this.v3 ? void 0 : {
          "sortChange": this.sortChangeHandler,
          "filterChange": this.filterChangeHandler,
          "selectionchange": this.onHeaderSelectionChangeHandler,
          "pressHandler": this.dragLogic.pressHandler,
          "dragHandler": this.dragLogic.dragHandler,
          "releaseHandler": this.dragLogic.releaseHandler
        },
        filter: this.$props.filter,
        filterable: this.$props.filterable,
        filterOperators: this.$props.filterOperators || operators2,
        onFilterChange: this.filterChangeHandler,
        columnMenu: this.$props.columnMenu,
        columnMenuAnimate: this.$props.columnMenuAnimate,
        onSelectionchange: this.onHeaderSelectionChangeHandler,
        columns: this._columns,
        columnsInitial: this.$props.columns,
        columnResize: this.columnResize,
        onPressHandler: this.dragLogic.pressHandler,
        onDragHandler: this.dragLogic.dragHandler,
        onReleaseHandler: this.dragLogic.releaseHandler,
        columnsMap: this._columnsMap,
        cellRender: this.$props.headerCellRender,
        isRtl: this.isRtl,
        isColCountDefined: this.getAriaColCount !== void 0,
        filterRow: this.$props.filterable && h(FilterRow, {
          grid: this,
          attrs: this.v3 ? void 0 : {
            grid: this,
            size: this.$props.size,
            columns: this._columns,
            filter: this.$props.filter,
            filterOperators: this.$props.filterOperators || operators2,
            sort: this.$props.sort,
            cellRender: this.$props.filterCellRender,
            isRtl: this.isRtl,
            ariaRowIndex: this._columnsMap.length + 1
          },
          size: this.$props.size,
          columns: this._columns,
          filter: this.$props.filter,
          filterOperators: this.$props.filterOperators || operators2,
          onFilterchange: this.filterChangeHandler,
          on: this.v3 ? void 0 : {
            "filterchange": this.filterChangeHandler
          },
          sort: this.$props.sort,
          cellRender: this.$props.filterCellRender,
          isRtl: this.isRtl,
          ariaRowIndex: this._columnsMap.length + 1
        }) || void 0
      }),
      cols: columnsWithColGroup.map(function(column, index) {
        return h("col", {
          key: index.toString(),
          width: column.width !== void 0 ? Math.floor(parseFloat(column.width.toString())) + "px" : void 0,
          attrs: this.v3 ? void 0 : {
            width: column.width !== void 0 ? Math.floor(parseFloat(column.width.toString())) + "px" : void 0
          }
        });
      }, this)
    });
    var footer = this._columns.some(function(c) {
      return Boolean(c.footerCell);
    }) ? (
      // @ts-ignore
      h(Footer, {
        size: this.$props.size,
        attrs: this.v3 ? void 0 : {
          size: this.$props.size,
          columnResize: this.columnResize,
          staticHeaders: this.$props.scrollable !== "none",
          row: (
            // @ts-ignore
            h(FooterRow, {
              isRtl: this.isRtl,
              attrs: this.v3 ? void 0 : {
                isRtl: this.isRtl,
                rowIndex: this.getAriaRowCount + 1,
                columns: this._columns.map(function(col) {
                  return __assign7(__assign7({}, col), {
                    footerCell: templateRendering.call(this, col.footerCell, getListeners.call(this))
                  });
                }, this)
              },
              rowIndex: this.getAriaRowCount + 1,
              columns: this._columns.map(function(col) {
                return __assign7(__assign7({}, col), {
                  footerCell: templateRendering.call(this, col.footerCell, getListeners.call(this))
                });
              }, this)
            })
          ),
          cols: columnsWithColGroup.map(function(column, index) {
            return h("col", {
              key: index.toString(),
              width: column.width !== void 0 ? Math.floor(parseFloat(column.width.toString())) + "px" : void 0,
              attrs: this.v3 ? void 0 : {
                width: column.width !== void 0 ? Math.floor(parseFloat(column.width.toString())) + "px" : void 0
              }
            });
          }, this)
        },
        columnResize: this.columnResize,
        staticHeaders: this.$props.scrollable !== "none",
        ref: this.v3 ? function(el) {
          _this.footerRef = el;
        } : "footer",
        row: h(FooterRow, {
          isRtl: this.isRtl,
          attrs: this.v3 ? void 0 : {
            isRtl: this.isRtl,
            rowIndex: this.getAriaRowCount + 1,
            columns: this._columns.map(function(col) {
              return __assign7(__assign7({}, col), {
                footerCell: templateRendering.call(this, col.footerCell, getListeners.call(this))
              });
            }, this)
          },
          rowIndex: this.getAriaRowCount + 1,
          columns: this._columns.map(function(col) {
            return __assign7(__assign7({}, col), {
              footerCell: templateRendering.call(this, col.footerCell, getListeners.call(this))
            });
          }, this)
        }),
        cols: columnsWithColGroup.map(function(column, index) {
          return h("col", {
            key: index.toString(),
            width: column.width !== void 0 ? Math.floor(parseFloat(column.width.toString())) + "px" : void 0,
            attrs: this.v3 ? void 0 : {
              width: column.width !== void 0 ? Math.floor(parseFloat(column.width.toString())) + "px" : void 0
            }
          });
        }, this)
      })
    ) : h("span");
    var cellRenderFunction = templateRendering.call(this, this.$props.cellRender, getListeners.call(this));
    var leftWidth = 0;
    var vnodeDataStyle = this.v3 ? this.$attrs.style : this.$vnode && this.$vnode.data ? this.$vnode.data.style : null;
    var widthProp = "width";
    var elementInlineStyleWidth = vnodeDataStyle && isObject(vnodeDataStyle) ? vnodeDataStyle[widthProp] || "" : "";
    var tableWidth = parseFloat(elementInlineStyleWidth.toString());
    var scrollLeft = this.vs && this.vs.container && this.vs.container.scrollLeft || 0;
    var _a4 = tableColumnsVirtualization({
      enabled: this.$props.columnVirtualization,
      columns: this._columns,
      tableViewPortWidth: tableWidth,
      scrollLeft
    }), colSpans = _a4.colSpans, isColHidden = _a4.hiddenColumns;
    var dataRow = function dataRow2(item2, rowId, rowDataIndex) {
      return {
        row: this._columns.map(function(column, index) {
          var _this2 = this;
          if (isColHidden[index]) {
            return null;
          }
          var className = "".concat(column.className ? column.className + " " : "") + "".concat(column.locked ? "k-grid-content-sticky" : "");
          var style = column.left !== void 0 ? !this.isRtl ? {
            left: column.left + "px",
            right: column.right + "px"
          } : {
            left: column.right + "px",
            right: column.left + "px"
          } : {};
          var columnCellRenderFunction;
          if (column.cell) {
            columnCellRenderFunction = templateRendering.call(this, column.cell, getListeners.call(this));
          }
          var isCollapsed = this.computedCollapsed && this.computedCollapsed[item2.level] && this.computedCollapsed[item2.level].some(function(c) {
            return c === groupedFirstItemValue(item2.dataItem, _this2.$props.uniqueField);
          });
          var isExpanded = isCollapsed ? !isCollapsed : item2.expanded;
          if (column.internalCell) {
            return h(column.internalCell, {
              key: index,
              id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
              attrs: this.v3 ? void 0 : {
                id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
                colSpan: colSpans[index],
                dataItem: item2.dataItem,
                field: column.field || "",
                editor: column.editor,
                format: column.format,
                readFormat: column.readFormat,
                type: column.type,
                className,
                render: columnCellRenderFunction || cellRenderFunction,
                columnIndex: index,
                columnsCount: this._columns.filter(function(c) {
                  return !c.children.length;
                }).length,
                rowType: item2.rowType,
                level: item2.level,
                expanded: isExpanded,
                dataIndex: item2.dataIndex,
                ariaColumnIndex: column.ariaColumnIndex,
                isRtl: this.isRtl
              },
              colSpan: colSpans[index],
              dataItem: item2.dataItem,
              field: column.field || "",
              editor: column.editor,
              format: column.format,
              readFormat: column.readFormat,
              type: column.type,
              className,
              render: columnCellRenderFunction || cellRenderFunction,
              onChange: this.itemChange,
              on: this.v3 ? void 0 : {
                "change": this.itemChange,
                "selectionchange": function selectionchange(e) {
                  return _this2.selectionChangeHandler({
                    event: e,
                    dataItem: item2.dataItem,
                    dataIndex: rowDataIndex,
                    columnIndex: index
                  });
                }
              },
              onSelectionchange: function selectionchange(e) {
                return _this2.selectionChangeHandler({
                  event: e,
                  dataItem: item2.dataItem,
                  dataIndex: rowDataIndex,
                  columnIndex: index
                });
              },
              columnIndex: index,
              columnsCount: this._columns.filter(function(c) {
                return !c.children.length;
              }).length,
              rowType: item2.rowType,
              level: item2.level,
              expanded: isExpanded,
              dataIndex: item2.dataIndex,
              style,
              ariaColumnIndex: column.ariaColumnIndex,
              isRtl: this.isRtl
            });
          }
          return h(GridCellValue, {
            dataItem: item2.dataItem,
            attrs: this.v3 ? void 0 : {
              dataItem: item2.dataItem,
              editField: this.$props.editField,
              column,
              editCell: h(GridEditCell, {
                id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
                attrs: this.v3 ? void 0 : {
                  id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
                  colSpan: colSpans[index],
                  dataItem: item2.dataItem,
                  field: column.field || "",
                  editor: column.editor,
                  format: column.format,
                  readFormat: column.readFormat,
                  type: column.type,
                  className,
                  render: columnCellRenderFunction || cellRenderFunction,
                  columnIndex: index,
                  columnsCount: this._columns.filter(function(c) {
                    return !c.children.length;
                  }).length,
                  rowType: item2.rowType,
                  level: item2.level,
                  expanded: isExpanded,
                  dataIndex: item2.dataIndex
                },
                key: index,
                colSpan: colSpans[index],
                dataItem: item2.dataItem,
                field: column.field || "",
                editor: column.editor,
                format: column.format,
                readFormat: column.readFormat,
                type: column.type,
                className,
                render: columnCellRenderFunction || cellRenderFunction,
                onEdit: this.editHandler,
                on: this.v3 ? void 0 : {
                  "edit": this.editHandler,
                  "remove": this.removeHandler,
                  "save": this.saveHandler,
                  "cancel": this.cancelHandler,
                  "change": this.itemChange
                },
                onRemove: this.removeHandler,
                onSave: this.saveHandler,
                onCancel: this.cancelHandler,
                onChange: this.itemChange,
                columnIndex: index,
                columnsCount: this._columns.filter(function(c) {
                  return !c.children.length;
                }).length,
                rowType: item2.rowType,
                level: item2.level,
                expanded: isExpanded,
                dataIndex: item2.dataIndex,
                style
              }),
              inbuildCell: h(GridCell, {
                key: index,
                id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
                attrs: this.v3 ? void 0 : {
                  id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
                  colSpan: colSpans[index],
                  dataItem: item2.dataItem,
                  field: column.field || "",
                  editor: column.editor,
                  format: column.format,
                  readFormat: column.readFormat,
                  type: column.type,
                  className,
                  render: columnCellRenderFunction || cellRenderFunction,
                  columnIndex: index,
                  columnsCount: this._columns.filter(function(c) {
                    return !c.children.length;
                  }).length,
                  rowType: item2.rowType,
                  level: item2.level,
                  expanded: isExpanded,
                  dataIndex: item2.dataIndex
                },
                colSpan: colSpans[index],
                dataItem: item2.dataItem,
                field: column.field || "",
                editor: column.editor,
                format: column.format,
                readFormat: column.readFormat,
                type: column.type,
                className,
                render: columnCellRenderFunction || cellRenderFunction,
                onCellclick: this.cellClickHandler,
                on: this.v3 ? void 0 : {
                  "cellclick": this.cellClickHandler,
                  "cellkeydown": this.cellKeydownHandler,
                  "edit": this.editHandler,
                  "remove": this.removeHandler,
                  "save": this.saveHandler,
                  "cancel": this.cancelHandler,
                  "change": this.itemChange,
                  "selectionchange": function selectionchange(e) {
                    return _this2.selectionChangeHandler({
                      event: e,
                      dataItem: item2.dataItem,
                      dataIndex: rowDataIndex,
                      columnIndex: index
                    });
                  }
                },
                onCellkeydown: this.cellKeydownHandler,
                onEdit: this.editHandler,
                onRemove: this.removeHandler,
                onSave: this.saveHandler,
                onCancel: this.cancelHandler,
                onChange: this.itemChange,
                onSelectionchange: function selectionchange(e) {
                  return _this2.selectionChangeHandler({
                    event: e,
                    dataItem: item2.dataItem,
                    dataIndex: rowDataIndex,
                    columnIndex: index
                  });
                },
                columnIndex: index,
                columnsCount: this._columns.filter(function(c) {
                  return !c.children.length;
                }).length,
                rowType: item2.rowType,
                level: item2.level,
                expanded: isExpanded,
                dataIndex: item2.dataIndex,
                style
              })
            },
            editField: this.$props.editField,
            column,
            editCell: h(GridEditCell, {
              id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
              attrs: this.v3 ? void 0 : {
                id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
                colSpan: colSpans[index],
                dataItem: item2.dataItem,
                field: column.field || "",
                editor: column.editor,
                format: column.format,
                readFormat: column.readFormat,
                type: column.type,
                className,
                render: columnCellRenderFunction || cellRenderFunction,
                columnIndex: index,
                columnsCount: this._columns.filter(function(c) {
                  return !c.children.length;
                }).length,
                rowType: item2.rowType,
                level: item2.level,
                expanded: isExpanded,
                dataIndex: item2.dataIndex
              },
              key: index,
              colSpan: colSpans[index],
              dataItem: item2.dataItem,
              field: column.field || "",
              editor: column.editor,
              format: column.format,
              readFormat: column.readFormat,
              type: column.type,
              className,
              render: columnCellRenderFunction || cellRenderFunction,
              onEdit: this.editHandler,
              on: this.v3 ? void 0 : {
                "edit": this.editHandler,
                "remove": this.removeHandler,
                "save": this.saveHandler,
                "cancel": this.cancelHandler,
                "change": this.itemChange
              },
              onRemove: this.removeHandler,
              onSave: this.saveHandler,
              onCancel: this.cancelHandler,
              onChange: this.itemChange,
              columnIndex: index,
              columnsCount: this._columns.filter(function(c) {
                return !c.children.length;
              }).length,
              rowType: item2.rowType,
              level: item2.level,
              expanded: isExpanded,
              dataIndex: item2.dataIndex,
              style
            }),
            inbuildCell: h(GridCell, {
              key: index,
              id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
              attrs: this.v3 ? void 0 : {
                id: tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(index)), idPrefix),
                colSpan: colSpans[index],
                dataItem: item2.dataItem,
                field: column.field || "",
                editor: column.editor,
                format: column.format,
                readFormat: column.readFormat,
                type: column.type,
                className,
                render: columnCellRenderFunction || cellRenderFunction,
                columnIndex: index,
                columnsCount: this._columns.filter(function(c) {
                  return !c.children.length;
                }).length,
                rowType: item2.rowType,
                level: item2.level,
                expanded: isExpanded,
                dataIndex: item2.dataIndex
              },
              colSpan: colSpans[index],
              dataItem: item2.dataItem,
              field: column.field || "",
              editor: column.editor,
              format: column.format,
              readFormat: column.readFormat,
              type: column.type,
              className,
              render: columnCellRenderFunction || cellRenderFunction,
              onCellclick: this.cellClickHandler,
              on: this.v3 ? void 0 : {
                "cellclick": this.cellClickHandler,
                "cellkeydown": this.cellKeydownHandler,
                "edit": this.editHandler,
                "remove": this.removeHandler,
                "save": this.saveHandler,
                "cancel": this.cancelHandler,
                "change": this.itemChange,
                "selectionchange": function selectionchange(e) {
                  return _this2.selectionChangeHandler({
                    event: e,
                    dataItem: item2.dataItem,
                    dataIndex: rowDataIndex,
                    columnIndex: index
                  });
                }
              },
              onCellkeydown: this.cellKeydownHandler,
              onEdit: this.editHandler,
              onRemove: this.removeHandler,
              onSave: this.saveHandler,
              onCancel: this.cancelHandler,
              onChange: this.itemChange,
              onSelectionchange: function selectionchange(e) {
                return _this2.selectionChangeHandler({
                  event: e,
                  dataItem: item2.dataItem,
                  dataIndex: rowDataIndex,
                  columnIndex: index
                });
              },
              columnIndex: index,
              columnsCount: this._columns.filter(function(c) {
                return !c.children.length;
              }).length,
              rowType: item2.rowType,
              level: item2.level,
              expanded: isExpanded,
              dataIndex: item2.dataIndex,
              style
            })
          });
        }, this)
      };
    };
    var hiddenRows = 0;
    if (this.$props.scrollable === "virtual" && this.totalGroupedRows(this.currentData) / 2 > this.$props.take) {
      var topIndex = this.vs.topCacheCount + this.vs.attendedSkip - (this.$props.skip || 0);
      for (var i = 0; i < topIndex; i++) {
        var item = this.currentData.shift();
        if (item) {
          this.currentData.push(item);
          hiddenRows++;
          if (item.rowType === "groupHeader") {
            i--;
          }
        } else {
          break;
        }
      }
    }
    var hidden = function hidden2(index) {
      return index >= _this.currentData.length - hiddenRows;
    };
    var detailRenderFunction = templateRendering.call(this, this.$props.detail, getListeners.call(this));
    var absoluteDataIndex = this.vs.propsSkip || 0;
    var rowIndexStart = this._columnsMap.length + (this.$props.filterable ? 1 : 0) + 1;
    var currentAriaRowIndex;
    var dataIndex = -1;
    var detailRowCount = 0;
    var body = this.currentData.length && this.currentData.map(function(item2, rowIndex) {
      var _this2 = this;
      var _this4 = this;
      if (item2.rowType === "data") {
        absoluteDataIndex++;
        dataIndex++;
      }
      if (this.$props.alternatePerGroup && item2.rowType === "groupHeader") {
        absoluteDataIndex = 0;
      }
      var isAlt = absoluteDataIndex % 2 === 0;
      var dataItemKey = this.$props.dataItemKey && getter(this.$props.dataItemKey)(item2.dataItem);
      var absoluteIndex = rowIndex + (this.vs.propsSkip || 0);
      var rowId = dataItemKey ? dataItemKey : "ai" + absoluteIndex;
      var detailRowId = rowId + "_1";
      currentAriaRowIndex = absoluteIndex + rowIndexStart + detailRowCount;
      leftWidth = 0;
      var rowRenderFunction = templateRendering.call(this, this.$props.rowRender, getListeners.call(this));
      var detailColspan;
      if (this.$props.detail && item2.rowType === "data" && item2.expanded) {
        detailColspan = columnsWithColGroup.length - (this.$props.expandField ? 1 : 0) - (this.$props.group ? this.$props.group.length : 0) || 1;
        detailRowCount++;
        currentAriaRowIndex = absoluteIndex + rowIndexStart + detailRowCount;
      }
      var masterRowIndex = rowIndex * 2 + rowIndexStart;
      var detailRowIndex = rowIndex * 2 + rowIndexStart + 1;
      return [
        // @ts-ignore function children
        h(GridRow, {
          key: rowId,
          dataItem: item2.dataItem,
          attrs: this.v3 ? void 0 : {
            dataItem: item2.dataItem,
            isAltRow: isAlt,
            rowType: item2.rowType,
            isHidden: hidden(rowIndex),
            selectedField: this.$props.selectedField,
            rowHeight: this.$props.rowHeight,
            render: rowRenderFunction,
            ariaRowIndex: this.$props.detail ? masterRowIndex : currentAriaRowIndex,
            dataIndex
          },
          isAltRow: isAlt,
          rowType: item2.rowType,
          isHidden: hidden(rowIndex),
          onRowclick: function onRowclick(e) {
            return _this4.rowClick(e, item2);
          },
          on: this.v3 ? void 0 : {
            "rowclick": function onRowclick(e) {
              return _this4.rowClick(e, item2);
            },
            "rowdblclick": function rowdblclick(e) {
              return _this4.rowDoubleClick(e, item2);
            }
          },
          onRowdblclick: function rowdblclick(e) {
            return _this4.rowDoubleClick(e, item2);
          },
          selectedField: this.$props.selectedField,
          rowHeight: this.$props.rowHeight,
          render: rowRenderFunction,
          ariaRowIndex: this.$props.detail ? masterRowIndex : currentAriaRowIndex,
          dataIndex,
          "class": this.$props.rowClass ? this.$props.rowClass(item2) : ""
        }, this.v3 ? function() {
          return [dataRow.call(_this2, item2, rowId, dataIndex).row];
        } : [dataRow.call(_this2, item2, rowId, dataIndex).row]),
        this.$props.detail && item2.rowType === "data" && item2.expanded && h("tr", {
          key: detailRowId,
          "class": isAlt ? "k-table-row k-table-alt-row k-detail-row k-alt" : "k-table-row k-detail-row",
          style: {
            visibility: hidden(rowIndex) ? "hidden" : "",
            height: this.$props.detailRowHeight + "px"
          },
          role: "row",
          attrs: this.v3 ? void 0 : {
            role: "row",
            ariaRowIndex: this.$props.detail ? detailRowIndex : currentAriaRowIndex
          },
          ariaRowIndex: this.$props.detail ? detailRowIndex : currentAriaRowIndex
        }, [
          this.$props.group && this.$props.group.map(function(group, idx) {
            return h(GridGroupCell, {
              id: "",
              attrs: this.v3 ? void 0 : {
                id: "",
                dataIndex: item2.dataIndex,
                field: group.field,
                dataItem: item2.dataItem
              },
              dataIndex: item2.dataIndex,
              field: group.field,
              dataItem: item2.dataItem,
              key: idx
            });
          }, this),
          this.$props.expandField && // @ts-ignore function children
          h(GridDetailHierarchyCell, {
            id: tableKeyboardNavigationTools.generateNavigatableId("".concat(detailRowId, "-dhcell"), idPrefix),
            attrs: this.v3 ? void 0 : {
              id: tableKeyboardNavigationTools.generateNavigatableId("".concat(detailRowId, "-dhcell"), idPrefix)
            }
          }),
          // @ts-ignore function children
          h(GridDetailCell, {
            dataItem: item2.dataItem,
            attrs: this.v3 ? void 0 : {
              dataItem: item2.dataItem,
              dataIndex: item2.dataIndex,
              colSpan: detailColspan,
              ariaColIndex: 2 + (this.$props.group ? this.$props.group.length : 0),
              detail: this.$props.detail ? detailRenderFunction : void 0,
              id: tableKeyboardNavigationTools.generateNavigatableId("".concat(detailRowId, "-dcell"), idPrefix)
            },
            dataIndex: item2.dataIndex,
            colSpan: detailColspan,
            ariaColIndex: 2 + (this.$props.group ? this.$props.group.length : 0),
            detail: this.$props.detail ? detailRenderFunction : void 0,
            id: tableKeyboardNavigationTools.generateNavigatableId("".concat(detailRowId, "-dcell"), idPrefix)
          })
        ])
      ];
    }, this) || h("tr", {
      "class": "k-table-row k-grid-norecords"
    }, [h("td", {
      "class": "k-table-td",
      colspan: this._columns.filter(function(c) {
        return !c.children.length;
      }).length,
      attrs: this.v3 ? void 0 : {
        colspan: this._columns.filter(function(c) {
          return !c.children.length;
        }).length
      }
    }, [
      // @ts-ignore
      noRecords2.length ? noRecords2 : h(GridNoRecords)
    ])]);
    var pagerTemplate = templateRendering.call(this, this.$props.pager, getListeners.call(this));
    var defaultPagerRendering = this.$props.pageable && h(Pager, {
      "class": "k-grid-pager",
      onPagesizechange: this.pageChangeHandler,
      on: this.v3 ? void 0 : {
        "pagesizechange": this.pageChangeHandler,
        "pagechange": this.pageChangeHandler
      },
      onPagechange: this.pageChangeHandler,
      size: this.$props.size,
      attrs: this.v3 ? void 0 : {
        size: this.$props.size,
        total: total2,
        skip: this.vs.propsSkip || 0,
        pageSize: (this.$props.take !== void 0 ? this.$props.take : this.$props.pageSize) || 10,
        messagesMap: pagerMessagesMap,
        settings: normalize2(this.$props.pageable || {})
      },
      total: total2,
      skip: this.vs.propsSkip || 0,
      pageSize: (this.$props.take !== void 0 ? this.$props.take : this.$props.pageSize) || 10,
      messagesMap: pagerMessagesMap,
      settings: normalize2(this.$props.pageable || {})
    });
    var pager = getTemplate.call(this, {
      h,
      template: pagerTemplate,
      defaultRendering: defaultPagerRendering,
      additionalProps: __assign7(__assign7({}, this.$props), {
        skip: this.vs.propsSkip || 0,
        messagesMap: pagerMessagesMap
      }),
      additionalListeners: {
        pagesizechange: this.pageChangeHandler,
        pagechange: this.pageChangeHandler
      }
    });
    var sorted = function sorted2(field) {
      return _this.$props.sort && _this.$props.sort.filter(function(descriptor) {
        return descriptor.field === field;
      }).length > 0;
    };
    var colGroups = h("colgroup", {
      ref: setRef(this, "colGroup")
    }, [columnsWithColGroup.map(function(column, index) {
      return h("col", {
        key: index.toString(),
        "class": sorted(column.field) ? "k-sorted" : void 0,
        width: column.width !== void 0 ? column.width.toString().indexOf("%") !== -1 ? column.width : Math.floor(parseFloat(column.width.toString())) + "px" : void 0,
        attrs: this.v3 ? void 0 : {
          width: column.width !== void 0 ? column.width.toString().indexOf("%") !== -1 ? column.width : Math.floor(parseFloat(column.width.toString())) + "px" : void 0
        }
      });
    }, this)]);
    var wrapperStyle = {
      height: this.getCorrectHeight
    };
    var loaderTemplate = templateRendering.call(this, this.$props.loader, getListeners.call(this));
    var defaultLoaderRendering = this.$props.loader && h("div", {
      "class": "k-loader-container k-loader-container-md k-loader-top"
    }, [h("div", {
      "class": "k-loader-container-overlay k-overlay-light"
    }), h("div", {
      "class": "k-loader-container-inner"
    }, [h(Loader, {
      size: "large",
      attrs: this.v3 ? void 0 : {
        size: "large",
        type: "infinite-spinner"
      },
      type: "infinite-spinner"
    })])]);
    var loader = getTemplate.call(this, {
      h,
      template: loaderTemplate,
      defaultRendering: defaultLoaderRendering
    });
    if (this.$props.scrollable === "none") {
      return (
        // @ts-ignore function children
        h(TableKeyboardNavigationProvider, {
          ref: "navRef",
          id: this._gridId,
          attrs: this.v3 ? void 0 : {
            id: this._gridId,
            navigatable: this.$props.navigatable
          },
          navigatable: this.$props.navigatable
        }, this.v3 ? function() {
          return [
            // @ts-ignore function children
            h(GridNav, {
              ref: _this3.v3 ? function(el) {
                _this.gridNavRef = el;
              } : "gridNav",
              currentData: _this3.currentData,
              attrs: _this3.v3 ? void 0 : {
                currentData: _this3.currentData
              },
              style: wrapperStyle,
              "class": _this3.nonscrollableWrapperClass
            }, _this3.v3 ? function() {
              return [toolbar, groupingPanel, h("div", {
                role: "grid",
                attrs: _this3.v3 ? void 0 : {
                  role: "grid",
                  id: _this3._gridRoleElementId,
                  "aria-colcount": _this3.getAriaColCount,
                  "aria-rowcount": _this3.getAriaRowCount
                },
                "class": "k-grid-aria-root",
                id: _this3._gridRoleElementId,
                "aria-colcount": _this3.getAriaColCount,
                "aria-rowcount": _this3.getAriaRowCount
              }, [h("table", {
                "class": "k-table",
                style: {
                  tableLayout: "fixed"
                },
                role: "none",
                attrs: _this3.v3 ? void 0 : {
                  role: "none"
                }
              }, [colGroups, header, h("tbody", {
                "class": "k-table-tbody",
                "data-keyboardnavbody": true,
                attrs: _this3.v3 ? void 0 : {
                  "data-keyboardnavbody": true
                }
              }, [body, loader]), footer])]), pager, clues];
            } : [toolbar, groupingPanel, h("div", {
              role: "grid",
              attrs: _this3.v3 ? void 0 : {
                role: "grid",
                id: _this3._gridRoleElementId,
                "aria-colcount": _this3.getAriaColCount,
                "aria-rowcount": _this3.getAriaRowCount
              },
              "class": "k-grid-aria-root",
              id: _this3._gridRoleElementId,
              "aria-colcount": _this3.getAriaColCount,
              "aria-rowcount": _this3.getAriaRowCount
            }, [h("table", {
              "class": "k-table",
              style: {
                tableLayout: "fixed"
              },
              role: "none",
              attrs: _this3.v3 ? void 0 : {
                role: "none"
              }
            }, [colGroups, header, h("tbody", {
              "class": "k-table-tbody",
              "data-keyboardnavbody": true,
              attrs: _this3.v3 ? void 0 : {
                "data-keyboardnavbody": true
              }
            }, [body, loader]), footer])]), pager, clues])
          ];
        } : [h(GridNav, {
          ref: _this3.v3 ? function(el) {
            _this.gridNavRef = el;
          } : "gridNav",
          currentData: _this3.currentData,
          attrs: _this3.v3 ? void 0 : {
            currentData: _this3.currentData
          },
          style: wrapperStyle,
          "class": _this3.nonscrollableWrapperClass
        }, _this3.v3 ? function() {
          return [toolbar, groupingPanel, h("div", {
            role: "grid",
            attrs: _this3.v3 ? void 0 : {
              role: "grid",
              id: _this3._gridRoleElementId,
              "aria-colcount": _this3.getAriaColCount,
              "aria-rowcount": _this3.getAriaRowCount
            },
            "class": "k-grid-aria-root",
            id: _this3._gridRoleElementId,
            "aria-colcount": _this3.getAriaColCount,
            "aria-rowcount": _this3.getAriaRowCount
          }, [h("table", {
            "class": "k-table",
            style: {
              tableLayout: "fixed"
            },
            role: "none",
            attrs: _this3.v3 ? void 0 : {
              role: "none"
            }
          }, [colGroups, header, h("tbody", {
            "class": "k-table-tbody",
            "data-keyboardnavbody": true,
            attrs: _this3.v3 ? void 0 : {
              "data-keyboardnavbody": true
            }
          }, [body, loader]), footer])]), pager, clues];
        } : [toolbar, groupingPanel, h("div", {
          role: "grid",
          attrs: _this3.v3 ? void 0 : {
            role: "grid",
            id: _this3._gridRoleElementId,
            "aria-colcount": _this3.getAriaColCount,
            "aria-rowcount": _this3.getAriaRowCount
          },
          "class": "k-grid-aria-root",
          id: _this3._gridRoleElementId,
          "aria-colcount": _this3.getAriaColCount,
          "aria-rowcount": _this3.getAriaRowCount
        }, [h("table", {
          "class": "k-table",
          style: {
            tableLayout: "fixed"
          },
          role: "none",
          attrs: _this3.v3 ? void 0 : {
            role: "none"
          }
        }, [colGroups, header, h("tbody", {
          "class": "k-table-tbody",
          "data-keyboardnavbody": true,
          attrs: _this3.v3 ? void 0 : {
            "data-keyboardnavbody": true
          }
        }, [body, loader]), footer])]), pager, clues])])
      );
    }
    return (
      // @ts-ignore function children
      h(TableKeyboardNavigationProvider, {
        ref: "navRef",
        id: this._gridId,
        attrs: this.v3 ? void 0 : {
          id: this._gridId,
          navigatable: this.$props.navigatable
        },
        navigatable: this.$props.navigatable
      }, this.v3 ? function() {
        return [
          // @ts-ignore function children
          h(GridNav, {
            ref: _this3.v3 ? function(el) {
              _this.gridNavRef = el;
            } : "gridNav",
            currentData: _this3.currentData,
            attrs: _this3.v3 ? void 0 : {
              currentData: _this3.currentData
            },
            style: wrapperStyle,
            "class": _this3.scrollableWrapperClass
          }, _this3.v3 ? function() {
            return [toolbar, groupingPanel, h("div", {
              role: "grid",
              attrs: _this3.v3 ? void 0 : {
                role: "grid",
                id: _this3._gridRoleElementId,
                "aria-colcount": _this3.getAriaColCount,
                "aria-rowcount": _this3.getAriaRowCount
              },
              "class": "k-grid-aria-root",
              id: _this3._gridRoleElementId,
              "aria-colcount": _this3.getAriaColCount,
              "aria-rowcount": _this3.getAriaRowCount
            }, [header, h("div", {
              "class": "k-grid-container",
              role: "presentation",
              attrs: _this3.v3 ? void 0 : {
                role: "presentation"
              }
            }, [h("div", {
              role: "presentation",
              attrs: _this3.v3 ? void 0 : {
                role: "presentation"
              },
              ref: setRef(_this3, "scrollContainer"),
              "class": "k-grid-content k-virtual-content",
              onScroll: _this3.scrollHandler,
              on: _this3.v3 ? void 0 : {
                "scroll": _this3.scrollHandler
              }
            }, [h("div", {
              "class": "k-grid-table-wrap",
              role: "presentation",
              attrs: _this3.v3 ? void 0 : {
                role: "presentation"
              }
            }, [h("table", {
              role: "none",
              attrs: _this3.v3 ? void 0 : {
                role: "none"
              },
              "class": _this3.gridTableClass,
              ref: setRef(_this3, "scrollTable")
            }, [colGroups, h("tbody", {
              "class": "k-table-tbody",
              role: "rowgroup",
              attrs: _this3.v3 ? void 0 : {
                role: "rowgroup",
                "data-keyboardnavbody": true
              },
              "data-keyboardnavbody": true,
              ref: setRef(_this3, "scrollTableBody")
            }, [body])])]), h("div", {
              "class": "k-height-container",
              role: "presentation",
              attrs: _this3.v3 ? void 0 : {
                role: "presentation"
              }
            }, [h("div", {
              style: _this3.$props.scrollable === "virtual" ? {
                "height": _this3.vs.containerHeight + "px"
              } : {}
            })])]), loader]), footer]), pager, clues];
          } : [toolbar, groupingPanel, h("div", {
            role: "grid",
            attrs: _this3.v3 ? void 0 : {
              role: "grid",
              id: _this3._gridRoleElementId,
              "aria-colcount": _this3.getAriaColCount,
              "aria-rowcount": _this3.getAriaRowCount
            },
            "class": "k-grid-aria-root",
            id: _this3._gridRoleElementId,
            "aria-colcount": _this3.getAriaColCount,
            "aria-rowcount": _this3.getAriaRowCount
          }, [header, h("div", {
            "class": "k-grid-container",
            role: "presentation",
            attrs: _this3.v3 ? void 0 : {
              role: "presentation"
            }
          }, [h("div", {
            role: "presentation",
            attrs: _this3.v3 ? void 0 : {
              role: "presentation"
            },
            ref: setRef(_this3, "scrollContainer"),
            "class": "k-grid-content k-virtual-content",
            onScroll: _this3.scrollHandler,
            on: _this3.v3 ? void 0 : {
              "scroll": _this3.scrollHandler
            }
          }, [h("div", {
            "class": "k-grid-table-wrap",
            role: "presentation",
            attrs: _this3.v3 ? void 0 : {
              role: "presentation"
            }
          }, [h("table", {
            role: "none",
            attrs: _this3.v3 ? void 0 : {
              role: "none"
            },
            "class": _this3.gridTableClass,
            ref: setRef(_this3, "scrollTable")
          }, [colGroups, h("tbody", {
            "class": "k-table-tbody",
            role: "rowgroup",
            attrs: _this3.v3 ? void 0 : {
              role: "rowgroup",
              "data-keyboardnavbody": true
            },
            "data-keyboardnavbody": true,
            ref: setRef(_this3, "scrollTableBody")
          }, [body])])]), h("div", {
            "class": "k-height-container",
            role: "presentation",
            attrs: _this3.v3 ? void 0 : {
              role: "presentation"
            }
          }, [h("div", {
            style: _this3.$props.scrollable === "virtual" ? {
              "height": _this3.vs.containerHeight + "px"
            } : {}
          })])]), loader]), footer]), pager, clues])
        ];
      } : [h(GridNav, {
        ref: _this3.v3 ? function(el) {
          _this.gridNavRef = el;
        } : "gridNav",
        currentData: _this3.currentData,
        attrs: _this3.v3 ? void 0 : {
          currentData: _this3.currentData
        },
        style: wrapperStyle,
        "class": _this3.scrollableWrapperClass
      }, _this3.v3 ? function() {
        return [toolbar, groupingPanel, h("div", {
          role: "grid",
          attrs: _this3.v3 ? void 0 : {
            role: "grid",
            id: _this3._gridRoleElementId,
            "aria-colcount": _this3.getAriaColCount,
            "aria-rowcount": _this3.getAriaRowCount
          },
          "class": "k-grid-aria-root",
          id: _this3._gridRoleElementId,
          "aria-colcount": _this3.getAriaColCount,
          "aria-rowcount": _this3.getAriaRowCount
        }, [header, h("div", {
          "class": "k-grid-container",
          role: "presentation",
          attrs: _this3.v3 ? void 0 : {
            role: "presentation"
          }
        }, [h("div", {
          role: "presentation",
          attrs: _this3.v3 ? void 0 : {
            role: "presentation"
          },
          ref: setRef(_this3, "scrollContainer"),
          "class": "k-grid-content k-virtual-content",
          onScroll: _this3.scrollHandler,
          on: _this3.v3 ? void 0 : {
            "scroll": _this3.scrollHandler
          }
        }, [h("div", {
          "class": "k-grid-table-wrap",
          role: "presentation",
          attrs: _this3.v3 ? void 0 : {
            role: "presentation"
          }
        }, [h("table", {
          role: "none",
          attrs: _this3.v3 ? void 0 : {
            role: "none"
          },
          "class": _this3.gridTableClass,
          ref: setRef(_this3, "scrollTable")
        }, [colGroups, h("tbody", {
          "class": "k-table-tbody",
          role: "rowgroup",
          attrs: _this3.v3 ? void 0 : {
            role: "rowgroup",
            "data-keyboardnavbody": true
          },
          "data-keyboardnavbody": true,
          ref: setRef(_this3, "scrollTableBody")
        }, [body])])]), h("div", {
          "class": "k-height-container",
          role: "presentation",
          attrs: _this3.v3 ? void 0 : {
            role: "presentation"
          }
        }, [h("div", {
          style: _this3.$props.scrollable === "virtual" ? {
            "height": _this3.vs.containerHeight + "px"
          } : {}
        })])]), loader]), footer]), pager, clues];
      } : [toolbar, groupingPanel, h("div", {
        role: "grid",
        attrs: _this3.v3 ? void 0 : {
          role: "grid",
          id: _this3._gridRoleElementId,
          "aria-colcount": _this3.getAriaColCount,
          "aria-rowcount": _this3.getAriaRowCount
        },
        "class": "k-grid-aria-root",
        id: _this3._gridRoleElementId,
        "aria-colcount": _this3.getAriaColCount,
        "aria-rowcount": _this3.getAriaRowCount
      }, [header, h("div", {
        "class": "k-grid-container",
        role: "presentation",
        attrs: _this3.v3 ? void 0 : {
          role: "presentation"
        }
      }, [h("div", {
        role: "presentation",
        attrs: _this3.v3 ? void 0 : {
          role: "presentation"
        },
        ref: setRef(_this3, "scrollContainer"),
        "class": "k-grid-content k-virtual-content",
        onScroll: _this3.scrollHandler,
        on: _this3.v3 ? void 0 : {
          "scroll": _this3.scrollHandler
        }
      }, [h("div", {
        "class": "k-grid-table-wrap",
        role: "presentation",
        attrs: _this3.v3 ? void 0 : {
          role: "presentation"
        }
      }, [h("table", {
        role: "none",
        attrs: _this3.v3 ? void 0 : {
          role: "none"
        },
        "class": _this3.gridTableClass,
        ref: setRef(_this3, "scrollTable")
      }, [colGroups, h("tbody", {
        "class": "k-table-tbody",
        role: "rowgroup",
        attrs: _this3.v3 ? void 0 : {
          role: "rowgroup",
          "data-keyboardnavbody": true
        },
        "data-keyboardnavbody": true,
        ref: setRef(_this3, "scrollTableBody")
      }, [body])])]), h("div", {
        "class": "k-height-container",
        role: "presentation",
        attrs: _this3.v3 ? void 0 : {
          role: "presentation"
        }
      }, [h("div", {
        style: _this3.$props.scrollable === "virtual" ? {
          "height": _this3.vs.containerHeight + "px"
        } : {}
      })])]), loader]), footer]), pager, clues])])
    );
  }
};
var Grid = GridVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/GridColumnMenuFilterUI.js
var allVue84 = vue_runtime_esm_bundler_exports;
var gh82 = allVue84.h;
var isV384 = allVue84.version && allVue84.version[0] === "3";
var GridColumnMenuFilterUIVue2 = {
  name: "KendoGridColumnMenuFilterUI",
  inheritAttrs: false,
  props: {
    firstFilterProps: Object,
    secondFilterProps: Object,
    logicValue: Object,
    logicData: Array,
    hideSecondFilter: Boolean,
    operators: Array,
    render: [String, Function, Object]
  },
  // @ts-ignore
  emits: {
    change: null,
    filteruifocus: null,
    logicChange: null
  },
  methods: {
    handleFocus: function handleFocus5(e) {
      this.$emit("filteruifocus", e);
    },
    changeHandler: function changeHandler2(e, filterIndex) {
      this.$emit("change", e, filterIndex);
    },
    logicChange: function logicChange2(e) {
      this.$emit("logicChange", e);
    }
  },
  // @ts-ignore
  setup: !isV384 ? void 0 : function() {
    var v3 = !!isV384;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render50(createElement) {
    var _this = this;
    var h = gh82 || createElement;
    var _a4 = this.$props, firstFilterProps = _a4.firstFilterProps, hideSecondFilter = _a4.hideSecondFilter, secondFilterProps = _a4.secondFilterProps, logicData = _a4.logicData, logicValue = _a4.logicValue, operators3 = _a4.operators, render54 = _a4.render;
    var firstField = firstFilterProps.field, firstValue = firstFilterProps.value, firstOperator = firstFilterProps.operator, firstBooleanValues = firstFilterProps.booleanValues, firstFilterType = firstFilterProps.filterType, secondField = secondFilterProps.field, secondValue = secondFilterProps.value, secondOperator = secondFilterProps.operator, secondBooleanValues = secondFilterProps.booleanValues, secondFilterType = secondFilterProps.filterType;
    var defaultRendering = h("div", {
      style: this.$attrs.style,
      "class": this.$attrs.class
    }, [
      // @ts-ignore
      h(GridColumnMenuFilterCell, {
        field: firstField,
        attrs: this.v3 ? void 0 : {
          field: firstField,
          value: firstValue,
          operator: firstOperator,
          booleanValues: firstBooleanValues,
          filterType: firstFilterType,
          operators: operators3
        },
        value: firstValue,
        operator: firstOperator,
        booleanValues: firstBooleanValues,
        filterType: firstFilterType,
        onFiltercellfocus: this.handleFocus,
        on: this.v3 ? void 0 : {
          "filtercellfocus": this.handleFocus,
          "change": function change(e) {
            _this.changeHandler(e, 0);
          }
        },
        onChange: function change(e) {
          _this.changeHandler(e, 0);
        },
        operators: operators3
      }),
      !hideSecondFilter && h("div", [
        // @ts-ignore
        h(DropDownList, {
          onChange: this.logicChange,
          on: this.v3 ? void 0 : {
            "change": this.logicChange
          },
          "class": "k-filter-and",
          "data-items": logicData,
          attrs: this.v3 ? void 0 : {
            "data-items": logicData,
            value: logicValue,
            textField: "text"
          },
          value: logicValue,
          textField: "text"
        }),
        // @ts-ignore
        h(GridColumnMenuFilterCell, {
          field: secondField,
          attrs: this.v3 ? void 0 : {
            field: secondField,
            value: secondValue,
            operator: secondOperator,
            booleanValues: secondBooleanValues,
            filterType: secondFilterType,
            operators: operators3
          },
          value: secondValue,
          operator: secondOperator,
          booleanValues: secondBooleanValues,
          filterType: secondFilterType,
          onFiltercellfocus: this.handleFocus,
          on: this.v3 ? void 0 : {
            "filtercellfocus": this.handleFocus,
            "change": function change(e) {
              _this.changeHandler(e, 1);
            }
          },
          onChange: function change(e) {
            _this.changeHandler(e, 1);
          },
          operators: operators3
        })
      ])
    ]);
    return getTemplate.call(this, {
      h,
      template: render54,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        change: this.changeHandler,
        logicchange: this.logicChange
      }
    });
  }
};
var GridColumnMenuFilterUI = GridColumnMenuFilterUIVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/columnMenu/GridColumnMenuCheckboxFilter.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var __spreadArray8 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue85 = vue_runtime_esm_bundler_exports;
var gh83 = allVue85.h;
var isV385 = allVue85.version && allVue85.version[0] === "3";
var inject23 = allVue85.inject;
var isArrayEqual = function isArrayEqual2(firstArray, secondArray) {
  if (firstArray.length !== secondArray.length) {
    return false;
  }
  return firstArray.every(function(ex, i) {
    return ex === secondArray[i];
  });
};
var GridColumnMenuCheckboxFilterVue2 = {
  name: "KendoGridColumnMenuCheckboxFilter",
  props: {
    column: Object,
    filter: Object,
    filterable: Boolean,
    filterOperators: Object,
    checkAllItem: [String, Object, Function],
    item: [String, Object, Function],
    expanded: {
      type: Boolean,
      default: void 0
    },
    dataItems: Array,
    searchBox: {
      type: Boolean,
      default: true
    },
    uniqueData: {
      type: Boolean,
      default: true
    }
  },
  data: function data14() {
    return {
      currentExpanded: false,
      currentValue: "",
      currentData: void 0,
      dataFromProps: void 0,
      currentFilter: void 0
    };
  },
  created: function created10() {
    this.compositeFilterIndex = this.getFilterIndex();
    this.currentExpanded = this.$props.expanded;
    this.currentData = this.parseData(this.$props.dataItems, this.$props.uniqueData) || [];
    this.dataFromProps = this.parseData(this.$props.dataItems, false) || [];
    this.currentFilter = this.defaultFilter();
  },
  updated: function updated3() {
    var field = this.$props.column.field || "";
    var data15 = this.$props.dataItems.map(function(item) {
      return getNestedValue2(field, item);
    });
    if (!isArrayEqual(data15, this.dataFromProps)) {
      this.currentData = data15;
      this.dataFromProps = data15;
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV385 ? void 0 : function() {
    var v3 = !!isV385;
    var kendoLocalizationService = inject23("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render51(createElement) {
    var _this2 = this;
    var _this = this;
    var h = gh83 || createElement;
    var column = this.$props.column;
    if (!column || !column.field) {
      return h("div");
    }
    var localizationService = provideLocalizationService(this);
    var expandState = this.$props.expanded !== void 0 ? this.$props.expanded : this.currentExpanded;
    var filterValues = [];
    if (this.currentFilter) {
      var currentFilter = __spreadArray8([], this.currentFilter.filters, true);
      this.compositeFilterIndex = currentFilter.findIndex(function(filter) {
        if (filter.filters && filter.filters.length > 0) {
          return filter.filters[0].field === column.field;
        }
        return false;
      });
      if (this.compositeFilterIndex !== -1 && currentFilter[this.compositeFilterIndex].filters.length > 0) {
        currentFilter[this.compositeFilterIndex].filters.forEach(function(filterItem) {
          if (filterItem.field === _this.$props.column.field) {
            filterValues.push(filterItem.value);
          }
        });
      }
    }
    var searchBox = function searchBox2() {
      return this.$props.searchBox && h("span", {
        "class": "k-list-filter"
      }, [h("span", {
        "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
      }, [h(Icon, {
        name: "search",
        attrs: this.v3 ? void 0 : {
          name: "search",
          icon: searchIcon
        },
        icon: searchIcon,
        "class": "k-input-icon"
      }), h("input", {
        ref: "searchBox",
        placeholder: localizationService.toLanguageString(searchPlaceholder2, messages2[searchPlaceholder2]),
        attrs: this.v3 ? void 0 : {
          placeholder: localizationService.toLanguageString(searchPlaceholder2, messages2[searchPlaceholder2])
        },
        "class": "k-input-inner",
        value: this.v3 ? this.currentValue : null,
        domProps: this.v3 ? void 0 : {
          "value": this.currentValue
        },
        onInput: this.handleSearchChange,
        on: this.v3 ? void 0 : {
          "input": this.handleSearchChange
        }
      })])]);
    };
    var uniqueFilterValues = filterValues.filter(function(item, index) {
      return filterValues.indexOf(item) === index;
    });
    var itemTemplate = templateRendering.call(this, this.$props.item, getListeners.call(this));
    var checkAllItemTemplate = templateRendering.call(this, this.$props.checkAllItem, getListeners.call(this));
    var defaultCheckAllRendering = h("li", {
      "class": "k-item"
    }, [
      // @ts-ignore  function children
      h(Checkbox, {
        label: localizationService.toLanguageString(filterCheckAll2, messages2[filterCheckAll2]),
        attrs: this.v3 ? void 0 : {
          label: localizationService.toLanguageString(filterCheckAll2, messages2[filterCheckAll2]),
          checked: this.isAllSelected()
        },
        onChange: function onChange(e) {
          return _this.handleCheckBoxChange(e, "all");
        },
        on: this.v3 ? void 0 : {
          "change": function onChange(e) {
            return _this.handleCheckBoxChange(e, "all");
          }
        },
        checked: this.isAllSelected()
      })
    ]);
    var checkAllItemRender = getTemplate.call(this, {
      h,
      template: checkAllItemTemplate,
      defaultRendering: defaultCheckAllRendering,
      additionalProps: {
        checked: this.isAllSelected()
      },
      additionalListeners: {
        change: function change(e) {
          return _this.handleCheckBoxChange(e, "all");
        }
      }
    });
    return (
      // @ts-ignore  function children
      h(GridColumnMenuItemGroup, this.v3 ? function() {
        return [
          // @ts-ignore  function children
          h(GridColumnMenuItem, {
            title: localizationService.toLanguageString(filterTitle, messages2[filterTitle]),
            attrs: _this2.v3 ? void 0 : {
              title: localizationService.toLanguageString(filterTitle, messages2[filterTitle]),
              icon: "filter",
              svgIcon: filterIcon
            },
            icon: "filter",
            svgIcon: filterIcon,
            onClick: _this2.onFilterExpand,
            on: _this2.v3 ? void 0 : {
              "click": _this2.onFilterExpand
            }
          }),
          // @ts-ignore  function children
          h(GridColumnMenuItemContent, {
            show: !!expandState,
            attrs: _this2.v3 ? void 0 : {
              show: !!expandState
            }
          }, _this2.v3 ? function() {
            return [h("div", {
              "class": "kendo-grid-filter-menu-container"
            }, [h("form", {
              "class": "k-filter-menu k-group k-reset k-border-up",
              onSubmit: _this2.submit,
              on: _this2.v3 ? void 0 : {
                "submit": _this2.submit,
                "reset": _this2.clear
              },
              onReset: _this2.clear
            }, [h("div", {
              "class": "k-filter-menu-container"
            }, [searchBox.call(_this2), h("ul", {
              "class": "k-reset k-multicheck-wrap"
            }, [checkAllItemRender, _this2.currentData.map(function(item, index) {
              var _this3 = this;
              var defaultRendering = h("li", {
                "class": "k-item",
                key: index
              }, [
                // @ts-ignore  function children
                h(Checkbox, {
                  label: String(item),
                  attrs: this.v3 ? void 0 : {
                    label: String(item),
                    checked: uniqueFilterValues.includes(item)
                  },
                  onChange: function onChange(e) {
                    return _this3.handleCheckBoxChange(e, item);
                  },
                  on: this.v3 ? void 0 : {
                    "change": function onChange(e) {
                      return _this3.handleCheckBoxChange(e, item);
                    }
                  },
                  checked: uniqueFilterValues.includes(item)
                })
              ]);
              var itemRender = getTemplate.call(this, {
                h,
                template: itemTemplate,
                defaultRendering,
                additionalProps: {
                  item,
                  index,
                  checked: uniqueFilterValues.includes(item)
                },
                additionalListeners: {
                  change: function change(e) {
                    return _this3.handleCheckBoxChange(e, item);
                  }
                }
              });
              return itemRender;
            }, _this2)]), h("div", {
              "class": "k-columnmenu-actions"
            }, [
              // @ts-ignore function children
              h(Button, {
                themeColor: "primary",
                attrs: _this2.v3 ? void 0 : {
                  themeColor: "primary"
                }
              }, _this2.v3 ? function() {
                return [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])];
              } : [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])]),
              // @ts-ignore function children
              h(Button, {
                type: "reset",
                attrs: _this2.v3 ? void 0 : {
                  type: "reset"
                }
              }, _this2.v3 ? function() {
                return [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])];
              } : [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])])
            ])])])])];
          } : [h("div", {
            "class": "kendo-grid-filter-menu-container"
          }, [h("form", {
            "class": "k-filter-menu k-group k-reset k-border-up",
            onSubmit: _this2.submit,
            on: _this2.v3 ? void 0 : {
              "submit": _this2.submit,
              "reset": _this2.clear
            },
            onReset: _this2.clear
          }, [h("div", {
            "class": "k-filter-menu-container"
          }, [searchBox.call(_this2), h("ul", {
            "class": "k-reset k-multicheck-wrap"
          }, [checkAllItemRender, _this2.currentData.map(function(item, index) {
            var _this3 = this;
            var defaultRendering = h("li", {
              "class": "k-item",
              key: index
            }, [h(Checkbox, {
              label: String(item),
              attrs: this.v3 ? void 0 : {
                label: String(item),
                checked: uniqueFilterValues.includes(item)
              },
              onChange: function onChange(e) {
                return _this3.handleCheckBoxChange(e, item);
              },
              on: this.v3 ? void 0 : {
                "change": function onChange(e) {
                  return _this3.handleCheckBoxChange(e, item);
                }
              },
              checked: uniqueFilterValues.includes(item)
            })]);
            var itemRender = getTemplate.call(this, {
              h,
              template: itemTemplate,
              defaultRendering,
              additionalProps: {
                item,
                index,
                checked: uniqueFilterValues.includes(item)
              },
              additionalListeners: {
                change: function change(e) {
                  return _this3.handleCheckBoxChange(e, item);
                }
              }
            });
            return itemRender;
          }, _this2)]), h("div", {
            "class": "k-columnmenu-actions"
          }, [h(Button, {
            themeColor: "primary",
            attrs: _this2.v3 ? void 0 : {
              themeColor: "primary"
            }
          }, _this2.v3 ? function() {
            return [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])];
          } : [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])]), h(Button, {
            type: "reset",
            attrs: _this2.v3 ? void 0 : {
              type: "reset"
            }
          }, _this2.v3 ? function() {
            return [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])];
          } : [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])])])])])])])
        ];
      } : [h(GridColumnMenuItem, {
        title: localizationService.toLanguageString(filterTitle, messages2[filterTitle]),
        attrs: _this2.v3 ? void 0 : {
          title: localizationService.toLanguageString(filterTitle, messages2[filterTitle]),
          icon: "filter",
          svgIcon: filterIcon
        },
        icon: "filter",
        svgIcon: filterIcon,
        onClick: _this2.onFilterExpand,
        on: _this2.v3 ? void 0 : {
          "click": _this2.onFilterExpand
        }
      }), h(GridColumnMenuItemContent, {
        show: !!expandState,
        attrs: _this2.v3 ? void 0 : {
          show: !!expandState
        }
      }, _this2.v3 ? function() {
        return [h("div", {
          "class": "kendo-grid-filter-menu-container"
        }, [h("form", {
          "class": "k-filter-menu k-group k-reset k-border-up",
          onSubmit: _this2.submit,
          on: _this2.v3 ? void 0 : {
            "submit": _this2.submit,
            "reset": _this2.clear
          },
          onReset: _this2.clear
        }, [h("div", {
          "class": "k-filter-menu-container"
        }, [searchBox.call(_this2), h("ul", {
          "class": "k-reset k-multicheck-wrap"
        }, [checkAllItemRender, _this2.currentData.map(function(item, index) {
          var _this3 = this;
          var defaultRendering = h("li", {
            "class": "k-item",
            key: index
          }, [h(Checkbox, {
            label: String(item),
            attrs: this.v3 ? void 0 : {
              label: String(item),
              checked: uniqueFilterValues.includes(item)
            },
            onChange: function onChange(e) {
              return _this3.handleCheckBoxChange(e, item);
            },
            on: this.v3 ? void 0 : {
              "change": function onChange(e) {
                return _this3.handleCheckBoxChange(e, item);
              }
            },
            checked: uniqueFilterValues.includes(item)
          })]);
          var itemRender = getTemplate.call(this, {
            h,
            template: itemTemplate,
            defaultRendering,
            additionalProps: {
              item,
              index,
              checked: uniqueFilterValues.includes(item)
            },
            additionalListeners: {
              change: function change(e) {
                return _this3.handleCheckBoxChange(e, item);
              }
            }
          });
          return itemRender;
        }, _this2)]), h("div", {
          "class": "k-columnmenu-actions"
        }, [h(Button, {
          themeColor: "primary",
          attrs: _this2.v3 ? void 0 : {
            themeColor: "primary"
          }
        }, _this2.v3 ? function() {
          return [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])];
        } : [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])]), h(Button, {
          type: "reset",
          attrs: _this2.v3 ? void 0 : {
            type: "reset"
          }
        }, _this2.v3 ? function() {
          return [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])];
        } : [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])])])])])])];
      } : [h("div", {
        "class": "kendo-grid-filter-menu-container"
      }, [h("form", {
        "class": "k-filter-menu k-group k-reset k-border-up",
        onSubmit: _this2.submit,
        on: _this2.v3 ? void 0 : {
          "submit": _this2.submit,
          "reset": _this2.clear
        },
        onReset: _this2.clear
      }, [h("div", {
        "class": "k-filter-menu-container"
      }, [searchBox.call(_this2), h("ul", {
        "class": "k-reset k-multicheck-wrap"
      }, [checkAllItemRender, _this2.currentData.map(function(item, index) {
        var _this3 = this;
        var defaultRendering = h("li", {
          "class": "k-item",
          key: index
        }, [h(Checkbox, {
          label: String(item),
          attrs: this.v3 ? void 0 : {
            label: String(item),
            checked: uniqueFilterValues.includes(item)
          },
          onChange: function onChange(e) {
            return _this3.handleCheckBoxChange(e, item);
          },
          on: this.v3 ? void 0 : {
            "change": function onChange(e) {
              return _this3.handleCheckBoxChange(e, item);
            }
          },
          checked: uniqueFilterValues.includes(item)
        })]);
        var itemRender = getTemplate.call(this, {
          h,
          template: itemTemplate,
          defaultRendering,
          additionalProps: {
            item,
            index,
            checked: uniqueFilterValues.includes(item)
          },
          additionalListeners: {
            change: function change(e) {
              return _this3.handleCheckBoxChange(e, item);
            }
          }
        });
        return itemRender;
      }, _this2)]), h("div", {
        "class": "k-columnmenu-actions"
      }, [h(Button, {
        themeColor: "primary",
        attrs: _this2.v3 ? void 0 : {
          themeColor: "primary"
        }
      }, _this2.v3 ? function() {
        return [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])];
      } : [localizationService.toLanguageString(filterSubmitButton, messages2[filterSubmitButton])]), h(Button, {
        type: "reset",
        attrs: _this2.v3 ? void 0 : {
          type: "reset"
        }
      }, _this2.v3 ? function() {
        return [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])];
      } : [localizationService.toLanguageString(filterClearButton, messages2[filterClearButton])])])])])])])])
    );
  },
  methods: {
    defaultFilter: function defaultFilter() {
      if (this.$props.filter) {
        return clone(this.$props.filter);
      }
      return {
        filters: [],
        logic: "and"
      };
    },
    parseData: function parseData(originalData, isUnique) {
      var field = this.$props.column.field || "";
      var data15 = originalData.map(function(item) {
        return getNestedValue2(field, item);
      });
      if (isUnique) {
        return data15.filter(function(item, index) {
          return data15.indexOf(item) === index;
        });
      }
      return data15;
    },
    getFilterIndex: function getFilterIndex() {
      var field = this.$props.column.field;
      var currentFilter = this.defaultFilter();
      var compositeFilterIndex = currentFilter.filters.findIndex(function(filter) {
        return filter.filters && filter.filters.length > 0 && filter.filters[0].field === field;
      });
      return compositeFilterIndex;
    },
    onFilterExpand: function onFilterExpand2() {
      var isControlled2 = this.$props.expanded !== void 0;
      var nextValue = !(isControlled2 ? this.$props.expanded : this.currentExpanded);
      this.$emit("expandchange", nextValue);
      if (!isControlled2) {
        this.currentExpanded = nextValue;
      }
    },
    handleSearchChange: function handleSearchChange(e) {
      var filterExpression = {
        logic: "and",
        filters: [{
          field: this.$props.column.field,
          operator: "startswith",
          value: e.target.value,
          ignoreCase: true
        }]
      };
      this.currentValue = e.target.value;
      this.currentData = this.parseData(filterBy(this.$props.dataItems || [], filterExpression), this.$props.uniqueData);
    },
    clear: function clear3(e) {
      e.preventDefault();
      var updatedFilter = this.currentFilter || null;
      if (updatedFilter !== null && updatedFilter.filters.length > 0) {
        if (this.compositeFilterIndex >= 0) {
          updatedFilter.filters.splice(this.compositeFilterIndex, 1);
        }
        this.$emit("filterchange", updatedFilter, e);
      } else {
        this.$emit("filterchange", null, e);
      }
      this.$emit("closemenu");
    },
    submit: function submit2(e) {
      e.preventDefault();
      var updatedFilter = this.currentFilter || null;
      this.$emit("filterchange", updatedFilter, e);
      this.$emit("closemenu");
    },
    handleCheckBoxChange: function handleCheckBoxChange(e, value) {
      var field = this.$props.column.field || "";
      var newFilter = __assign8({}, this.currentFilter);
      var filters = __spreadArray8([], this.currentFilter.filters, true) || [];
      var fieldFilters = [];
      if (this.compositeFilterIndex !== -1 && newFilter.filters[this.compositeFilterIndex].filters && value !== "all") {
        fieldFilters = newFilter.filters[this.compositeFilterIndex].filters;
      }
      if (e.value && value === "all") {
        this.currentData.forEach(function(item) {
          fieldFilters.push({
            field,
            operator: "eq",
            value: item
          });
        });
      } else if (e.value) {
        fieldFilters.push({
          field,
          operator: "eq",
          value
        });
      } else if (this.currentFilter) {
        var index = fieldFilters.findIndex(function(filter) {
          return filter.value === value;
        });
        fieldFilters.splice(index, 1);
      }
      newFilter.logic = "and";
      if (this.compositeFilterIndex !== -1) {
        filters[this.compositeFilterIndex] = {
          logic: "or",
          filters: fieldFilters
        };
      } else {
        filters.push({
          logic: "or",
          filters: fieldFilters
        });
      }
      if (!e.value && value === "all" || fieldFilters.length === 0) {
        filters.splice(this.compositeFilterIndex, 1);
      }
      newFilter.filters = filters;
      this.currentFilter = newFilter;
    },
    isAllSelected: function isAllSelected() {
      var _this = this;
      var isAllChecked = false;
      if (this.currentFilter) {
        var filters_1 = __spreadArray8([], this.currentFilter.filters, true);
        if (this.compositeFilterIndex === -1) {
          return false;
        }
        isAllChecked = this.currentData.every(function(item) {
          if (_this.compositeFilterIndex !== -1 && filters_1[_this.compositeFilterIndex].filters) {
            var index = filters_1[_this.compositeFilterIndex].filters.findIndex(function(filter) {
              return filter.value === item;
            });
            return index >= 0;
          }
          return false;
        });
        return isAllChecked;
      }
      return isAllChecked;
    }
  }
};
var GridColumnMenuCheckboxFilter = GridColumnMenuCheckboxFilterVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/rows/GridDetailRow.js
var allVue86 = vue_runtime_esm_bundler_exports;
var gh84 = allVue86.h;
var isV386 = allVue86.version && allVue86.version[0] === "3";
var GridDetailRowVue2 = {
  // @ts-ignore
  setup: !isV386 ? void 0 : function() {
    var v3 = !!isV386;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render52(createElement) {
    var h = gh84 || createElement;
    return null;
  }
};
var GridDetailRow = GridDetailRowVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/GridToolbar.js
var allVue87 = vue_runtime_esm_bundler_exports;
var gh85 = allVue87.h;
var isV387 = allVue87.version && allVue87.version[0] === "3";
var GridToolbarVue2 = {
  name: "GridToolbar",
  props: {
    size: {
      type: String,
      default: "medium",
      validator: function validator5(value) {
        return ["small", "medium"].includes(value);
      }
    }
  },
  computed: {
    wrapperClass: function wrapperClass4() {
      var _a4;
      var size = this.$props.size;
      return _a4 = {
        "k-toolbar": true,
        "k-grid-toolbar": true
      }, _a4["k-toolbar-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a4;
    }
  },
  // @ts-ignore
  setup: !isV387 ? void 0 : function() {
    var v3 = !!isV387;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render53(createElement) {
    var h = gh85 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("div", {
      "class": this.wrapperClass,
      role: "toolbar",
      attrs: this.v3 ? void 0 : {
        role: "toolbar"
      }
    }, [defaultSlot]);
  }
};
var GridToolbar = GridToolbarVue2;

// node_modules/@progress/kendo-vue-grid/dist/es/main.js
var vue = "Vue";
if (typeof window !== "undefined" && window[vue] && window[vue].component) {
  window[vue].component("kendo-grid", Grid);
  window[vue].component("kendo-grid-toolbar", GridToolbar);
  window[vue].component("kendo-grid-norecords", GridNoRecords);
}
export {
  Footer,
  FooterRow,
  FooterRowVue2,
  FooterVue2,
  Grid,
  GridCell,
  GridCellVue2,
  GridColumnMenuCheckboxFilter,
  GridColumnMenuCheckboxFilterVue2,
  GridColumnMenuFilter,
  GridColumnMenuFilterCell,
  GridColumnMenuFilterCellVue2,
  GridColumnMenuFilterUI,
  GridColumnMenuFilterUIVue2,
  GridColumnMenuFilterVue2,
  GridColumnMenuItem,
  GridColumnMenuItemContent,
  GridColumnMenuItemContentVue2,
  GridColumnMenuItemGroup,
  GridColumnMenuItemGroupVue2,
  GridColumnMenuItemVue2,
  GridColumnMenuSort,
  GridColumnMenuSortVue2,
  GridDetailRow,
  GridDetailRowVue2,
  GridEditCell,
  GridEditCellVue2,
  GridFilterCell,
  GridFilterCellVue2,
  GridGroupCell,
  GridGroupCellVue2,
  GridHeaderCell,
  GridHeaderCellVue2,
  GridHierarchyCell,
  GridHierarchyCellVue2,
  GridNoRecords,
  GridNoRecordsVue2,
  GridRow,
  GridRowVue2,
  GridToolbar,
  GridToolbarVue2,
  GridVue2,
  applyExpandedState,
  autoGenerateColumns,
  checkPropCompatibility,
  filterGroupByField,
  firefox,
  firefoxMaxHeight,
  flatData,
  footerColumns,
  getIndex2 as getIndex,
  getNestedValue2 as getNestedValue,
  groupedFirstItemValue,
  isRtl3 as isRtl,
  mapColumns,
  parsers,
  readColumns,
  sortGroupByField
};
//# sourceMappingURL=@progress_kendo-vue-grid.js.map
