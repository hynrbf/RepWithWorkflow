import {
  TextBox
} from "./chunk-N4XRXEE2.js";
import {
  FloatingLabel
} from "./chunk-C5E7VHMO.js";
import {
  provideLocalizationService
} from "./chunk-TNWINVQ6.js";
import {
  Button,
  Chip
} from "./chunk-EA6IUSJI.js";
import {
  Popup
} from "./chunk-P43752AQ.js";
import {
  Reveal
} from "./chunk-GK4QQKT7.js";
import {
  caretAltDownIcon,
  caretAltLeftIcon,
  caretAltRightIcon,
  plusIcon,
  searchIcon,
  xIcon
} from "./chunk-HKPTYRTE.js";
import {
  index_esm_exports,
  main_exports
} from "./chunk-NCGOQWHX.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-4NBGFDBU.js";

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject = function(value2) {
  return typeof value2 === "object";
};

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/classNames.js
var classNames = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.filter(function(arg) {
    return arg !== true && !!arg;
  }).map(function(arg) {
    return Array.isArray(arg) ? classNames.apply(void 0, arg) : isObject(arg) ? Object.keys(arg).map(function(key, idx) {
      return arg[idx] || arg[key] && key || null;
    }).filter(function(el) {
      return el !== null;
    }).join(" ") : arg;
  }).filter(function(arg) {
    return !!arg;
  }).join(" ");
};

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/keys.js
var Keys = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  delete: 46
};

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/refs.js
function getRef(comp, refName, customRef) {
  return comp.v3 ? comp["".concat(refName, "Ref")] : comp.$refs["".concat(customRef || refName)];
}
function setRef(comp, refName, customRef) {
  return comp.v3 ? function(el) {
    comp["".concat(refName, "Ref")] = el;
  } : customRef || refName;
}

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue;
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(obj, key, value2) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof(key)) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DraggableVue2 = (_DraggableVue = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.draggable.destroy();
  },
  methods: {
    press: function press(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty(_DraggableVue, "setup", !isV3 ? void 0 : function() {
  var v3 = !!isV3;
  return {
    v3
  };
}), _defineProperty(_DraggableVue, "render", function render(createElement) {
  var h = gh || createElement;
  return getDefaultSlots(this);
}), _DraggableVue);

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/noop.js
var noop = function() {
};

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/constants/main.js
var FIELD_REGEX = /\[(?:(\d+)|['"](.*?)['"])\]|((?:(?!\[.*?\]|\.).)+)/g;

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};
function getter(field) {
  if (getterCache[field]) {
    return getterCache[field];
  }
  var fields = [];
  field.replace(FIELD_REGEX, function(_match, index, indexAccessor, fieldName) {
    fields.push(index !== void 0 ? index : indexAccessor || fieldName);
  });
  getterCache[field] = function(obj) {
    var result = obj;
    for (var idx = 0; idx < fields.length && result; idx++) {
      result = result[fields[idx]];
    }
    return result;
  };
  return getterCache[field];
}

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function getListeners() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var isV32 = allVue2.version && allVue2.version[0] === "3";
function templateRendering(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV32 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate(_a2) {
  var h = _a2.h, template = _a2.template, defaultRendering = _a2.defaultRendering, defaultSlots = _a2.defaultSlots, additionalProps = _a2.additionalProps, additionalListeners = _a2.additionalListeners, swapDefaultSlots = _a2.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV32) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
    componentOptions = __assign(__assign({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
    props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV32 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV32 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/getTabIndex.js
var DISABLED_TABINDEX = -1;
var DEFAULT_TABINDEX = 0;
var getTabIndex = function(tabIndex, disabled, useDefaultTabIndexWhenDisabled) {
  var parsedTabIndex = typeof tabIndex === "string" ? parseInt(tabIndex, void 0) : tabIndex;
  if (parsedTabIndex === NaN) {
    return void 0;
  }
  return parsedTabIndex !== void 0 ? parsedTabIndex : disabled ? useDefaultTabIndexWhenDisabled ? void 0 : DISABLED_TABINDEX : DEFAULT_TABINDEX;
};

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage(packageMetadata3) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata3);
  } else {
    var message = "License activation failed for ".concat(packageMetadata3.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata3.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/theme.js
var kendoThemeMaps = {
  sizeMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  roundedMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  }
};

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService3() {
    }
    Object.defineProperty(BrowserSupportService3.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService3;
  }()
);

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/icons/constants.js
var SIZE_CLASSES = {
  "default": "",
  "xsmall": "k-icon-xs",
  "small": "k-icon-sm",
  "medium": "k-icon-md",
  "large": "k-icon-lg",
  "xlarge": "k-icon-xl",
  "xxlarge": "k-icon-xxl",
  "xxxlarge": "k-icon-xxxl"
};

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh2 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";
var FontIconVue2 = {
  name: "KendoFontIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    tabIndex: Number
  },
  computed: {
    fontClassNames: function fontClassNames() {
      var _a2;
      var _b = this.$props, name = _b.name, flip = _b.flip, size = _b.size, themeColor = _b.themeColor;
      return _a2 = {
        "k-icon": true
      }, _a2["k-i-" + name] = name, _a2["k-color-" + themeColor] = themeColor, _a2["k-flip-h"] = flip === "horizontal" || flip === "both", _a2["k-flip-v"] = flip === "vertical" || flip === "both", _a2[SIZE_CLASSES[size]] = size, _a2;
    }
  },
  // @ts-ignore
  setup: !isV33 ? void 0 : function() {
    var v3 = !!isV33;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh2 || createElement;
    var _a2 = this.$props, id = _a2.id, title = _a2.title, tabIndex = _a2.tabIndex, ariaLabel = _a2.ariaLabel;
    return h("span", {
      "class": this.fontClassNames,
      id,
      attrs: this.v3 ? void 0 : {
        id,
        title,
        "aria-label": ariaLabel,
        tabIndex,
        role: "presentation"
      },
      title,
      "aria-label": ariaLabel,
      tabIndex,
      role: "presentation",
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    });
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit("click", e);
    }
  }
};
var FontIcon = FontIconVue2;

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var allVue4 = vue_runtime_esm_bundler_exports;
var gh3 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";
var SvgIconVue2 = {
  name: "KendoSvgIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    icon: Object,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number,
    svgClassName: String,
    svgStyle: Object
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a2;
      var _b = this.$props, name = _b.name, flip = _b.flip, size = _b.size, themeColor = _b.themeColor;
      return _a2 = {
        "k-svg-icon": true
      }, _a2["k-color-" + themeColor] = themeColor, _a2["k-svg-i-" + name] = name, _a2["k-flip-h"] = flip === "horizontal" || flip === "both", _a2["k-flip-v"] = flip === "vertical" || flip === "both", _a2[SIZE_CLASSES[size]] = size, _a2;
    }
  },
  // @ts-ignore
  setup: !isV34 ? void 0 : function() {
    var v3 = !!isV34;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render3(createElement) {
    var h = gh3 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a2 = this.$props, svgClassName = _a2.svgClassName, icon = _a2.icon, id = _a2.id, tabIndex = _a2.tabIndex, svgStyle = _a2.svgStyle, viewBox = _a2.viewBox, title = _a2.title, ariaLabel = _a2.ariaLabel;
    var innerHTML = icon ? icon.content : void 0;
    var attrs = {
      id,
      title,
      "aria-hidden": true,
      tabIndex,
      ariaLabel,
      focusable: "false",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: icon ? icon.viewBox : viewBox
    };
    var svg = h("svg", __assign2(__assign2({}, attrs), {
      attrs: this.v3 ? void 0 : attrs,
      domProps: this.v3 ? void 0 : {
        innerHTML
      },
      innerHTML,
      "class": svgClassName,
      style: svgStyle
    }), icon ? [] : [defaultSlot]);
    return h("span", {
      "class": this.wrapperClass,
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }, [svg]);
  },
  methods: {
    handleClick: function handleClick2(e) {
      this.$emit("click", e);
    }
  }
};
var SvgIcon = SvgIconVue2;

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var allVue5 = vue_runtime_esm_bundler_exports;
var gh4 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";
var IconVue2 = {
  name: "KendoIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  inject: {
    kendoIcons: {
      default: {
        type: "svg",
        icons: {}
      }
    }
  },
  props: {
    name: String,
    icon: Object,
    title: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number
  },
  // @ts-ignore
  setup: !isV35 ? void 0 : function() {
    var v3 = !!isV35;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render4(createElement) {
    var h = gh4 || createElement;
    var _a2 = this.$props, name = _a2.name, icon = _a2.icon, themeColor = _a2.themeColor, size = _a2.size, flip = _a2.flip, id = _a2.id, viewBox = _a2.viewBox, tabIndex = _a2.tabIndex, title = _a2.title, ariaLabel = _a2.ariaLabel;
    var svg = name && this.kendoIcons && this.kendoIcons.icons && this.kendoIcons.icons[name] || icon;
    var renderSVG = this.kendoIcons && this.kendoIcons.type === "svg" && svg !== void 0;
    var newSize = this.kendoIcons && this.kendoIcons.size ? this.kendoIcons.size : size;
    var newFlip = this.kendoIcons && this.kendoIcons.flip ? this.kendoIcons.flip : flip;
    var resolvedName = name || (icon && icon.name ? icon.name : void 0);
    var commonProps = {
      themeColor,
      size: newSize,
      flip: newFlip,
      id,
      tabIndex,
      title,
      ariaLabel
    };
    var fontIcon = h(FontIcon, __assign3(__assign3({}, commonProps), {
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    var svgIcon = h(SvgIcon, __assign3(__assign3({}, commonProps), {
      icon: svg,
      viewBox,
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign3(__assign3({}, commonProps), {
        icon: svg,
        viewBox,
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    return renderSVG ? svgIcon : fontIcon;
  },
  methods: {
    handleClick: function handleClick3(e) {
      this.$emit("click", e);
    }
  }
};
var Icon = IconVue2;

// node_modules/@progress/kendo-vue-dropdowns/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation4(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation4.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation4.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation4.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation4.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation4.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation4.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation4.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation4.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation4.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation4;
  }()
);

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/ListContainer.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh5 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var ListContainerVue2 = {
  name: "list-container",
  // @ts-ignore
  emits: {
    mousedown: null,
    blur: null,
    open: null,
    close: null
  },
  props: {
    width: [String, Number],
    dir: String,
    itemsCount: Number,
    popupSettings: {
      type: Object,
      default: function _default() {
        return {
          animate: true,
          height: "200px"
        };
      }
    }
  },
  created: function created2() {
    this.kendoAnchorRef = void 0;
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    return {
      v3
    };
  },
  methods: {
    onMouseDown: function onMouseDown(e) {
      this.$emit("mousedown", e);
    },
    onBlur: function onBlur(e) {
      this.$emit("blur", e);
    },
    onOpen: function onOpen(e) {
      this.$emit("open", e);
    },
    onClose: function onClose(e) {
      this.$emit("close", e);
    }
  },
  // @ts-ignore
  render: function render5(createElement) {
    var _this = this;
    var h = gh5 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a2 = this.$props, onMouseDown4 = _a2.onMouseDown, onBlur6 = _a2.onBlur, width = _a2.width, dir = _a2.dir, popupSettings = _a2.popupSettings;
    var popupClass = popupSettings.popupClass, className = popupSettings.className, animate = popupSettings.animate, anchor = popupSettings.anchor, show = popupSettings.show, open = popupSettings.open, close = popupSettings.close, itemsCount = popupSettings.itemsCount, appendTo = popupSettings.appendTo;
    return (
      // @ts-ignore function children
      h(Popup, {
        ref: "popup",
        style: {
          width,
          direction: dir
        },
        popupClass: className,
        attrs: this.v3 ? void 0 : {
          popupClass: className,
          animate,
          anchor,
          show,
          contentKey: itemsCount,
          appendTo
        },
        animate,
        anchor,
        show,
        contentKey: itemsCount,
        onOpen: this.onOpen,
        on: this.v3 ? void 0 : {
          "open": this.onOpen,
          "close": this.onClose
        },
        onClose: this.onClose,
        appendTo
      }, this.v3 ? function() {
        return [h("div", {
          "class": popupClass,
          onMousedown: _this.onMouseDown,
          on: _this.v3 ? void 0 : {
            "mousedown": _this.onMouseDown,
            "focusout": _this.onBlur
          },
          onFocusout: _this.onBlur
        }, [defaultSlot])];
      } : [h("div", {
        "class": popupClass,
        onMousedown: _this.onMouseDown,
        on: _this.v3 ? void 0 : {
          "mousedown": _this.onMouseDown,
          "focusout": _this.onBlur
        },
        onFocusout: _this.onBlur
      }, [defaultSlot])])
    );
  }
};
var ListContainer = ListContainerVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/ListFilter.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var allVue7 = vue_runtime_esm_bundler_exports;
var gh6 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";
var ref = allVue7.ref;
var sizeMap = kendoThemeMaps.sizeMap;
var roundedMap = kendoThemeMaps.roundedMap;
var ListFilterVue2 = {
  name: "list-filter",
  // @ts-ignore
  emits: {
    keydown: null,
    change: null,
    focus: null,
    blur: null
  },
  props: {
    value: String,
    rounded: {
      type: String,
      default: "medium",
      validator: function validator(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator2(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator3(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    }
  },
  computed: {
    spanClass: function spanClass() {
      var _a2;
      var _b = this.$props, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode;
      return _a2 = {
        "k-searchbox k-input": true
      }, _a2["k-input-".concat(sizeMap[size] || size)] = size, _a2["k-rounded-".concat(roundedMap[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2;
    }
  },
  // @ts-ignore
  setup: !isV37 ? void 0 : function() {
    var v3 = !!isV37;
    var inputRef = ref(null);
    return {
      v3,
      inputRef
    };
  },
  methods: {
    onKeyDown: function onKeyDown(e) {
      this.$emit("keydown", e);
    },
    onChange: function onChange(e) {
      this.$emit("change", e);
    },
    handleFocus: function handleFocus(e) {
      this.$emit("focus", e);
    },
    handleBlur: function handleBlur(e) {
      this.$emit("blur", e);
    },
    prefixRender: function prefixRender(h) {
      var iconProps = {
        class: "k-input-icon",
        name: "search",
        icon: searchIcon
      };
      return h(Icon, __assign4({
        props: this.v3 ? void 0 : iconProps
      }, iconProps));
    }
  },
  mounted: function mounted2() {
    this.input = getRef(this, "input")._input;
  },
  // @ts-ignore
  render: function render6(createElement) {
    var h = gh6 || createElement;
    var _a2 = this.$props, size = _a2.size, rounded = _a2.rounded, fillMode = _a2.fillMode;
    return h("div", {
      "class": "k-list-filter"
    }, [
      // @ts-ignore
      h(TextBox, {
        ref: setRef(this, "input"),
        value: this.$props.value,
        attrs: this.v3 ? void 0 : {
          value: this.$props.value,
          size,
          fillMode,
          rounded,
          inputPrefix: this.prefixRender
        },
        onInput: this.onChange,
        on: this.v3 ? void 0 : {
          "input": this.onChange,
          "keydown": this.onKeyDown,
          "focus": this.handleFocus,
          "blur": this.handleBlur
        },
        onKeydown: this.onKeyDown,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        size,
        fillMode,
        rounded,
        inputPrefix: this.prefixRender
      })
    ]);
  }
};
var ListFilter = ListFilterVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/utils.js
var isPresent = function(value2) {
  return value2 !== null && value2 !== void 0;
};
var sameCharsOnly = function(word, character) {
  for (var idx = 0; idx < word.length; idx++) {
    if (word.charAt(idx) !== character) {
      return false;
    }
  }
  return true;
};
var shuffleData = function(data10, splitIndex, defaultItem) {
  var result = data10;
  if (defaultItem) {
    result = [defaultItem].concat(result);
  }
  return result.slice(splitIndex).concat(result.slice(0, splitIndex));
};
var matchText = function(text, word, ignoreCase) {
  if (!isPresent(text)) {
    return false;
  }
  var temp = String(text);
  if (ignoreCase) {
    temp = temp.toLowerCase();
  }
  return temp.indexOf(word) === 0;
};
var scrollToItem = function(scrollElem, itemHeight, itemIndex, translate, virtualScroll) {
  var viewportHeight = scrollElem.offsetHeight;
  var itemOffsetTop = itemHeight * itemIndex + (virtualScroll ? translate - scrollElem.scrollTop : 0);
  if (virtualScroll) {
    var diff = 0;
    if (itemOffsetTop + itemHeight > viewportHeight) {
      diff = itemOffsetTop + itemHeight - viewportHeight;
    } else if (itemOffsetTop < 0) {
      diff = itemOffsetTop;
    }
    if (diff !== 0) {
      scrollElem.scrollTop += diff;
    } else if (scrollElem.scrollTop === 0 && translate !== 0) {
      scrollElem.scrollTop = translate;
    }
  } else {
    if (itemOffsetTop + itemHeight > viewportHeight + scrollElem.scrollTop) {
      scrollElem.scrollTop = itemOffsetTop + itemHeight - viewportHeight;
    } else if (itemOffsetTop < scrollElem.scrollTop) {
      scrollElem.scrollTop -= scrollElem.scrollTop - itemOffsetTop;
    }
  }
};
var itemIndexStartsWith = function(items, text, field) {
  var result = -1;
  if (text) {
    text = text.toLowerCase();
    for (var i = 0; i < items.length; i++) {
      var itemText = (getItemValue(items[i], field) || "") + "";
      if (itemText && itemText.toLowerCase().startsWith(text)) {
        result = i;
        break;
      }
    }
  }
  return result;
};
var getItemIndexByText = function(data10, text, textField, matchCase) {
  if (matchCase === void 0) {
    matchCase = false;
  }
  var casing = function(value2) {
    return matchCase ? value2 : value2.toLowerCase();
  };
  return data10.findIndex(function(item2) {
    return textField ? casing(getItemValue(item2, textField)) === casing(text) : casing(text) === casing(item2.toString());
  });
};
var getItemValue = function(item2, field) {
  if (field && isPresent(item2)) {
    var path = field.split(".");
    var data_1 = item2;
    path.forEach(function(p) {
      data_1 = data_1 ? data_1[p] : void 0;
    });
    return data_1;
  }
  return item2;
};
var matchDataCollections = function(data1, data22, key) {
  if (data1 === void 0) {
    data1 = [];
  }
  if (data22 === void 0) {
    data22 = [];
  }
  if (data1 === data22) {
    return true;
  }
  if (data1.length !== data22.length) {
    return false;
  }
  for (var i = 0; i < data1.length; i++) {
    if (!areSame(data1[i], data22[i], key)) {
      return false;
    }
  }
  return true;
};
var removeDataItems = function(items, toRemove, key) {
  toRemove.forEach(function(item2) {
    var itemIndex = items.findIndex(function(i) {
      return areSame(i, item2, key);
    });
    if (itemIndex !== -1) {
      items.splice(itemIndex, 1);
    }
  });
};
var areSame = function(item1, item2, key) {
  return item1 === item2 || isPresent(item1) === isPresent(item2) && getItemValue(item1, key) === getItemValue(item2, key);
};
var getFocusedItem = function(data10, value2, textField) {
  if (value2) {
    var selectedIndex = getItemIndexByText(data10, value2, textField, true);
    return selectedIndex !== -1 ? data10[selectedIndex] : data10[itemIndexStartsWith(data10, value2, textField)];
  }
  return data10[0];
};
var suggestValue = function(value2, data10, textField) {
  if (data10 === void 0) {
    data10 = [];
  }
  var suggested = "";
  if (value2) {
    var suggestedItem = data10[itemIndexStartsWith(data10, value2, textField)];
    if (suggestedItem) {
      var suggestedText2 = getItemValue(suggestedItem, textField);
      if (value2.toLowerCase() !== suggestedText2.toLowerCase()) {
        suggested = suggestedText2.substring(value2.length);
      }
    }
  }
  return suggested;
};
var preventDefaultNonInputs = function(event) {
  if (event.target.nodeName !== "INPUT") {
    event.preventDefault();
  }
};
var matchTags = function(tag1, tag2, key) {
  if (!!tag1 !== !!tag2 || tag1.text !== tag2.text) {
    return false;
  }
  return tag1 === tag2 || matchDataCollections(tag1.data, tag2.data, key);
};
var firefox = typeof window !== "undefined" && /Firefox/.test(window.navigator.userAgent);
var firefoxMaxHeight = 17895697;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/ListDefaultItem.js
var allVue8 = vue_runtime_esm_bundler_exports;
var gh7 = allVue8.h;
var isV38 = allVue8.version && allVue8.version[0] === "3";
var ListDefaultItemVue2 = {
  name: "list-default-item",
  props: {
    defaultItem: [Object, String],
    textField: String,
    selected: Boolean
  },
  // @ts-ignore
  setup: !isV38 ? void 0 : function() {
    var v3 = !!isV38;
    return {
      v3
    };
  },
  methods: {
    onMouseDown: function onMouseDown2(e) {
      e.preventDefault();
    },
    onClick: function onClick(e) {
      this.$emit("defaultitemclick", e);
    }
  },
  // @ts-ignore
  render: function render7(createElement) {
    var h = gh7 || createElement;
    var _a2 = this.$props, selected = _a2.selected, defaultItem = _a2.defaultItem, textField = _a2.textField;
    return h("div", {
      onClick: this.onClick,
      on: this.v3 ? void 0 : {
        "click": this.onClick,
        "mousedown": this.onMouseDown
      },
      onMousedown: this.onMouseDown,
      style: {
        position: "unset"
      },
      "class": classNames("k-list-optionlabel", {
        "k-selected": selected
      })
    }, [getItemValue(defaultItem, textField) || ""]);
  }
};
var ListDefaultItem = ListDefaultItemVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/ListItem.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var allVue9 = vue_runtime_esm_bundler_exports;
var gh8 = allVue9.h;
var isV39 = allVue9.version && allVue9.version[0] === "3";
var ListItemVue2 = {
  name: "KendoListItem",
  inheritAttrs: false,
  props: {
    id: String,
    index: Number,
    dataItem: [Object, String, Number],
    textField: String,
    focused: Boolean,
    selected: Boolean,
    render: Object
  },
  // @ts-ignore
  setup: !isV39 ? void 0 : function() {
    var v3 = !!isV39;
    return {
      v3
    };
  },
  computed: {
    itemClass: function itemClass() {
      return {
        "k-list-item": true,
        "k-selected": this.$props.selected,
        "k-focus": this.$props.focused
      };
    }
  },
  methods: {
    handleClick: function handleClick4(e) {
      this.$emit("itemclick", this.$props.index, e);
    }
  },
  // @ts-ignore
  render: function render8(createElement) {
    var _a2;
    var h = gh8 || createElement;
    var selected = this.$props.selected;
    var defaultRendering = h("li", {
      id: this.$props.id,
      attrs: this.v3 ? void 0 : {
        id: this.$props.id,
        role: "option",
        "aria-selected": selected
      },
      role: "option",
      "aria-selected": selected,
      "class": classNames("k-list-item", (_a2 = {
        "k-selected": selected,
        "k-focus": this.$props.focused
      }, _a2[this.$attrs.class] = this.$attrs.class, _a2)),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      },
      style: this.$attrs.style || {
        position: "unset"
      }
    }, [h("span", {
      "class": "k-list-item-text"
    }, [getItemValue(this.$props.dataItem, this.$props.textField).toString()])]);
    return getTemplate.call(this, {
      h,
      template: this.$props.render,
      defaultRendering,
      additionalProps: __assign5(__assign5({}, this.$props), {
        itemClass: this.itemClass
      }),
      additionalListeners: {
        click: this.handleClick
      }
    });
  }
};
var ListItem = ListItemVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/ListGroupItem.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var allVue10 = vue_runtime_esm_bundler_exports;
var gh9 = allVue10.h;
var isV310 = allVue10.version && allVue10.version[0] === "3";
var ListGroupItemVue2 = {
  name: "KendoListItem",
  inheritAttrs: false,
  props: {
    id: String,
    group: String,
    render: Object
  },
  // @ts-ignore
  setup: !isV310 ? void 0 : function() {
    var v3 = !!isV310;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render9(createElement) {
    var h = gh9 || createElement;
    var _a2 = this.$props, id = _a2.id, group = _a2.group, virtual4 = _a2.virtual, renderer = _a2.render;
    var defaultRendering = h("li", {
      id,
      attrs: this.v3 ? void 0 : {
        id,
        role: "group"
      },
      role: "group",
      "class": "k-list-group-item",
      style: {
        position: virtual4 ? "relative" : "unset"
      }
    }, [h("span", {
      "class": !renderer ? "k-list-item-text" : void 0
    }, [group])]);
    return getTemplate.call(this, {
      h,
      template: this.$props.render,
      defaultRendering,
      additionalProps: __assign6({}, this.$props)
    });
  }
};
var ListGroupItem = ListGroupItemVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/messages/main.js
var _a;
var nodata = "dropdowns.nodata";
var expandButton = "dropdowns.expandbutton";
var clear = "dropdowns.clear";
var selectButton = "dropdowns.select";
var messages = (_a = {}, _a[clear] = "clear", _a[expandButton] = "expand button", _a[nodata] = "NO DATA FOUND.", _a[selectButton] = "Select", _a);

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/List.js
var allVue11 = vue_runtime_esm_bundler_exports;
var gh10 = allVue11.h;
var isV311 = allVue11.version && allVue11.version[0] === "3";
var ref2 = allVue11.ref;
var inject = allVue11.inject;
var ListVue2 = {
  name: "list",
  // @ts-ignore
  emits: {
    listclick: null,
    scroll: null
  },
  props: {
    id: String,
    show: Boolean,
    dataItems: Array,
    value: [Object, String, Number, Boolean, Array],
    textField: String,
    valueField: String,
    optionsGuid: String,
    wrapperCssClass: String,
    wrapperStyle: Object,
    listStyle: Object,
    skip: Number,
    focusedIndex: Number,
    highlightSelected: {
      type: Boolean,
      default: true
    },
    itemRender: [String, Function, Object],
    groupHeaderItemRender: [String, Function, Object],
    noDataRender: [String, Function, Object],
    scroller: Boolean,
    groupField: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV311 ? void 0 : function() {
    var v3 = !!isV311;
    var listRef = ref2(null);
    var kendoLocalizationService = inject("kendoLocalizationService", {});
    return {
      v3,
      listRef,
      kendoLocalizationService
    };
  },
  mounted: function mounted3() {
    this.list = getRef(this, "list");
  },
  methods: {
    handleClick: function handleClick5(index, e) {
      this.$emit("listclick", index, e);
    },
    handleScroll: function handleScroll(e) {
      this.$emit("scroll", e);
    }
  },
  // @ts-ignore
  render: function render10(createElement) {
    var h = gh10 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var localizationService = provideLocalizationService(this);
    var _a2 = this.$props, id = _a2.id, show = _a2.show, wrapperCssClass = _a2.wrapperCssClass, wrapperStyle = _a2.wrapperStyle, listStyle = _a2.listStyle, listRef = _a2.listRef;
    var renderNoValueElement = function renderNoValueElement2() {
      var noDataRender = this.$props.noDataRender;
      var noDataElement = h("div", {
        "class": "k-nodata"
      }, [h("div", [localizationService.toLanguageString(nodata, messages[nodata])])]);
      return getTemplate.call(this, {
        h,
        template: noDataRender,
        defaultRendering: noDataElement
      });
    };
    var renderItems = function renderItems2() {
      var _a3 = this.$props, textField = _a3.textField, valueField = _a3.valueField, optionsGuid = _a3.optionsGuid, _b = _a3.skip, skip = _b === void 0 ? 0 : _b, focusedIndex3 = _a3.focusedIndex, highlightSelected = _a3.highlightSelected, value2 = _a3.value, groupField = _a3.groupField, itemRender = _a3.itemRender, groupHeaderItemRender = _a3.groupHeaderItemRender, dataItems2 = _a3.dataItems;
      var isArray2 = Array.isArray(value2);
      var groupCounter = 0;
      return dataItems2.map(function(item2, index) {
        var realIndex = skip + index;
        var selected = highlightSelected && (!isArray2 && areSame(item2, value2, valueField) || isArray2 && value2.findIndex(function(i) {
          return areSame(i, item2, valueField);
        }) !== -1);
        var group = void 0;
        var current, previous;
        if (index > 0 && groupField !== void 0) {
          current = getItemValue(item2, groupField);
          previous = getItemValue(dataItems2[index - 1], groupField);
          if (current && previous && current !== previous !== void 0) {
            group = current;
          }
        }
        if (group !== void 0 && Object.keys(item2).length === 1) {
          groupCounter += 1;
        }
        return group !== void 0 && item2[groupField] !== void 0 && Object.keys(item2).length === 1 ? h(ListGroupItem, {
          id: "option-".concat(optionsGuid, "-").concat(realIndex),
          attrs: this.v3 ? void 0 : {
            id: "option-".concat(optionsGuid, "-").concat(realIndex),
            group,
            render: groupHeaderItemRender
          },
          key: realIndex + "-group-item",
          group,
          render: groupHeaderItemRender
        }) : h(ListItem, {
          id: "option-".concat(optionsGuid, "-").concat(realIndex),
          attrs: this.v3 ? void 0 : {
            id: "option-".concat(optionsGuid, "-").concat(realIndex),
            dataItem: item2,
            selected,
            focused: focusedIndex3 === realIndex - groupCounter,
            index: realIndex - groupCounter,
            textField,
            group,
            render: itemRender
          },
          dataItem: item2,
          selected,
          focused: focusedIndex3 === realIndex - groupCounter,
          index: realIndex - groupCounter,
          key: realIndex - groupCounter,
          onItemclick: this.handleClick,
          on: this.v3 ? void 0 : {
            "itemclick": this.handleClick
          },
          textField,
          group,
          render: itemRender
        });
      }, this);
    };
    var items = renderItems.call(this);
    return items.length ? h("div", {
      "class": wrapperCssClass,
      style: wrapperStyle,
      unselectable: "on",
      attrs: this.v3 ? void 0 : {
        unselectable: "on"
      },
      onScroll: this.handleScroll,
      on: this.v3 ? void 0 : {
        "scroll": this.handleScroll
      }
    }, [h("ul", {
      id,
      attrs: this.v3 ? void 0 : {
        id,
        role: "listbox",
        "aria-live": "polite",
        "aria-hidden": !show ? true : void 0
      },
      role: "listbox",
      "aria-live": "polite",
      "aria-hidden": !show ? true : void 0,
      "class": "k-list-ul",
      ref: setRef(this, "list"),
      style: listStyle
    }, [items]), defaultSlot]) : renderNoValueElement.call(this);
  }
};
var List = ListVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/VirtualScroll.js
var VirtualScroll = (
  /** @class */
  function() {
    function VirtualScroll2() {
      var _this = this;
      this.containerHeight = 0;
      this.skip = 0;
      this.total = 0;
      this.enabled = false;
      this.pageSize = 0;
      this.itemHeight = 0;
      this.prevScrollPos = 0;
      this.listTranslate = 0;
      this.scrollSyncing = false;
      this.scrollerRef = function(element) {
        var vs = _this;
        vs.container = element;
        if (element) {
          element.setAttribute("unselectable", "on");
          setTimeout(vs.calcScrollElementHeight.bind(vs), 0);
        }
      };
      this.calcScrollElementHeight = function() {
        _this.scrollSyncing = true;
        var heightChanged = false;
        var items = _this.list ? Array.from(_this.list.children) : [];
        _this.itemHeight = items[0] ? items[0].offsetHeight : _this.itemHeight;
        var totalHeight = _this.itemHeight * (_this.total - items.length);
        _this.containerHeight = firefox ? Math.min(firefoxMaxHeight, totalHeight) : totalHeight;
        var newHeight = _this.containerHeight;
        if (_this.scrollElement) {
          heightChanged = _this.scrollElement.style.height !== newHeight + "px";
          if (heightChanged) {
            _this.scrollElement.style.height = newHeight + "px";
          }
        }
        _this.scrollSyncing = false;
        return heightChanged;
      };
      this.scrollHandler = this.scrollHandler.bind(this);
    }
    Object.defineProperty(VirtualScroll2.prototype, "translate", {
      get: function get8() {
        return this.listTranslate;
      },
      enumerable: false,
      configurable: true
    });
    VirtualScroll2.prototype.changePage = function(skip, e) {
      var newSkip = Math.min(Math.max(0, skip), this.total - this.pageSize);
      if (newSkip !== this.skip) {
        this.PageChange({
          skip: newSkip,
          take: this.pageSize
        }, e);
      }
    };
    VirtualScroll2.prototype.translateTo = function(dY) {
      this.listTranslate = dY;
      if (this.list) {
        this.list.style.transform = "translateY(" + dY + "px)";
      }
    };
    VirtualScroll2.prototype.reset = function() {
      if (this.container) {
        this.calcScrollElementHeight();
        this.container.scrollTop = 0;
        this.translateTo(0);
      }
    };
    VirtualScroll2.prototype.scrollToEnd = function() {
      if (this.container && this.list) {
        this.calcScrollElementHeight();
        this.container.scrollTop = this.container.scrollHeight - this.container.offsetHeight;
        this.translateTo(Math.min(this.container.scrollHeight, this.containerHeight));
      }
    };
    VirtualScroll2.prototype.localScrollUp = function(e) {
      var height = this.itemHeight;
      var scrollTop = this.container.scrollTop;
      var targetTranslate = this.listTranslate;
      var items;
      var additionalOnTop = scrollTop - targetTranslate;
      if (additionalOnTop > height) {
        return;
      }
      for (items = 0; items < this.skip; items++) {
        if (targetTranslate + height + additionalOnTop <= scrollTop) {
          break;
        }
        targetTranslate -= height;
      }
      targetTranslate = this.validateTranslate(targetTranslate);
      if (this.skip - items <= 0 && targetTranslate >= scrollTop) {
        this.translateTo(0);
        this.changePage(0, e);
        this.container.scrollTop = 0;
        return;
      }
      if (targetTranslate !== this.listTranslate) {
        this.translateTo(targetTranslate);
        this.changePage(this.skip - items, e);
      }
    };
    VirtualScroll2.prototype.localScrollDown = function(e) {
      var height = this.itemHeight;
      var scrollTop = this.container.scrollTop;
      var targetTranslate = this.listTranslate;
      var itemsLenght = this.list.children.length;
      var items;
      for (items = 0; items < itemsLenght; items++) {
        if (targetTranslate + height >= scrollTop) {
          break;
        }
        targetTranslate += height;
      }
      targetTranslate = this.validateTranslate(targetTranslate);
      if (items >= itemsLenght && this.skip + items >= this.total) {
        this.translateTo(targetTranslate);
        this.changePage(this.total - 1, e);
      } else if (targetTranslate !== this.listTranslate) {
        this.translateTo(targetTranslate);
        this.changePage(this.skip + items, e);
      }
    };
    VirtualScroll2.prototype.scrollNonStrict = function(e) {
      var floatItemIndex = this.total * this.prevScrollPos / this.containerHeight;
      var itemIndex = Math.min(Math.floor(floatItemIndex), this.total - 1);
      var targetTranslate = this.containerHeight * floatItemIndex / this.total;
      targetTranslate = this.validateTranslate(targetTranslate);
      this.translateTo(targetTranslate);
      this.changePage(itemIndex, e);
    };
    VirtualScroll2.prototype.scrollHandler = function(e) {
      var scrollTop = this.container ? this.container.scrollTop : 0;
      var prev = this.prevScrollPos;
      this.prevScrollPos = scrollTop;
      this.ScrollChange(e);
      if (!this.enabled || !this.list || !this.container || this.scrollSyncing) {
        return;
      }
      if (scrollTop - prev <= 0 && scrollTop > this.listTranslate - this.list.scrollHeight / 10) {
        this.localScrollUp(e);
      } else if (scrollTop - prev > 0 && scrollTop < this.listTranslate + this.list.scrollHeight * 2 / 3) {
        this.localScrollDown(e);
      } else {
        this.scrollNonStrict(e);
      }
    };
    VirtualScroll2.prototype.validateTranslate = function(translate) {
      translate = Math.max(0, translate);
      translate = Math.min(this.containerHeight, translate);
      return translate;
    };
    return VirtualScroll2;
  }()
);
var VirtualScroll_default = VirtualScroll;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/Navigation.js
var Navigation2 = (
  /** @class */
  function() {
    function Navigation4() {
    }
    Navigation4.prototype.navigate = function(args) {
      var keyCode = args.keyCode;
      if (keyCode === Keys.up || keyCode === Keys.left) {
        return this.next({ current: args.current, min: args.min, max: args.max, step: -1 });
      } else if (keyCode === Keys.down || keyCode === Keys.right) {
        return this.next({ current: args.current, min: args.min, max: args.max, step: 1 });
      } else if (keyCode === Keys.home) {
        return 0;
      } else if (keyCode === Keys.end) {
        return args.max;
      }
    };
    Navigation4.prototype.next = function(args) {
      if (!isPresent(args.current)) {
        return args.min;
      } else {
        return Math.min(args.max, Math.max(args.current + args.step, args.min));
      }
    };
    return Navigation4;
  }()
);

// node_modules/@progress/kendo-vue-dropdowns/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-dropdowns",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693312607,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/DropDownBase.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var DropDownBase = (
  /** @class */
  function() {
    function DropDownBase2(component) {
      var _this = this;
      this.vs = new VirtualScroll_default();
      this.navigation = new Navigation2();
      this.handleItemClick = function(index, event) {
        var state = _this.initState();
        state.event = event;
        _this.component.handleItemSelect(index, state);
        _this.togglePopup(state);
        _this.applyState(state);
      };
      this.handleFocus = function(event) {
        if (!_this.component.currentFocused) {
          var state = _this.initState();
          state.data.currentFocused = true;
          state.events.push({
            type: "focus"
          });
          state.event = event;
          _this.applyState(state);
        }
      };
      this.filterChanged = function(text, state) {
        var component2 = _this.component;
        var _a2 = component2.$props, textField = _a2.textField, filterable = _a2.filterable;
        if (filterable) {
          state.events.push({
            type: "filterchange",
            filter: {
              field: textField,
              operator: "contains",
              ignoreCase: true,
              value: text
            }
          });
          _this.repositionPopup();
        }
      };
      this.togglePopup = function(state) {
        var props = _this.component.$props;
        var opened5 = props.opened !== void 0 ? props.opened : _this.component.currentOpened;
        if (props.opened === void 0) {
          state.data.currentOpened = !opened5;
        }
        if (opened5) {
          state.events.push({
            type: "close"
          });
        } else {
          state.events.push({
            type: "open"
          });
          _this.calculatePopupWidth();
        }
      };
      this.pageChange = function(page, event) {
        var state = _this.initState();
        state.event = event;
        _this.triggerOnPageChange(state, page.skip, page.take);
        _this.applyState(state);
      };
      this.scrollChange = function(event) {
        _this.component.$emit("scroll", event);
      };
      this.scrollToVirtualItem = function(virtual4, selectedItemIndex) {
        var vs = _this.vs;
        vs.enabled = false;
        if (virtual4.skip === 0) {
          vs.reset();
        } else if (virtual4.skip + virtual4.pageSize === virtual4.total) {
          vs.scrollToEnd();
        } else {
          var scrollTop = vs.translate;
          if (scrollTop === 0) {
            vs.calcScrollElementHeight();
            scrollTop = vs.itemHeight * virtual4.skip;
            vs.translateTo(scrollTop - vs.itemHeight);
          }
          if (vs.container) {
            vs.container.scrollTop = scrollTop;
          }
          _this.scrollToItem(selectedItemIndex, true);
        }
        setTimeout(function() {
          return vs.enabled = true;
        }, 10);
      };
      this.getGroupedDataModernMode = function(data10, groupField) {
        var newData = [];
        data10.forEach(function(el, index) {
          var _a2;
          if (data10[index - 1] && el[groupField] !== data10[index - 1][groupField]) {
            newData.push((_a2 = {}, _a2[groupField] = el[groupField], _a2));
            newData.push(data10[index]);
          } else {
            newData.push(data10[index]);
          }
        });
        return newData;
      };
      this.resetGroupStickyHeader = function(groupName, that) {
        var state = _this.initState();
        if (groupName !== that.group && that.state) {
          that.state.data.group = groupName;
          _this.applyState(state);
        }
      };
      validatePackage(packageMetadata);
      this.listBoxId = guid();
      this.guid = guid();
      this.component = component;
      this.vs.PageChange = this.pageChange;
      this.vs.ScrollChange = this.scrollChange;
    }
    DropDownBase2.prototype.didMount = function() {
      var props = this.component.$props;
      var popupSettings = props.popupSettings || {};
      var style = props.style || {};
      var popupWidth = popupSettings.width;
      var shouldUpdate = props.opened === true;
      if (popupWidth === void 0) {
        this.calculatePopupWidth();
      }
      if (props.dir === void 0 && style.direction === void 0) {
        this.calculateDir();
        shouldUpdate = true;
      }
      if (shouldUpdate) {
        this.component.$forceUpdate();
      }
    };
    DropDownBase2.prototype.calculateDir = function() {
      if (this.component.element) {
        this.dirCalculated = window.getComputedStyle(this.component.element).direction || void 0;
      }
    };
    DropDownBase2.prototype.calculatePopupWidth = function() {
      if (this.wrapper) {
        this.popupWidth = this.wrapper.offsetWidth + "px";
      }
    };
    DropDownBase2.prototype.scrollToItem = function(itemIndex, vsEnabled) {
      var list = this.list || this.vs.list;
      var item2 = list ? list.children[0] : void 0;
      if (item2 && itemIndex >= 0) {
        var vs = this.vs;
        var scrollElement = vs.container || list.parentNode;
        if (scrollElement) {
          var virtualScroll = vsEnabled !== void 0 ? vsEnabled : vs.enabled;
          scrollToItem(scrollElement, item2.offsetHeight, itemIndex, vs.translate, virtualScroll);
        }
      }
    };
    DropDownBase2.prototype.repositionPopup = function() {
      var component = this.component;
      setTimeout(function() {
        var lc = component.$refs.container;
        if (lc) {
          var popup = lc.$refs.popup;
          if (popup && popup.show) {
            popup.reposition();
          }
        }
      }, 5);
    };
    DropDownBase2.prototype.initState = function() {
      var state = {
        data: {},
        events: [],
        event: void 0
      };
      return state;
    };
    DropDownBase2.prototype.applyState = function(state) {
      var _this = this;
      if (Object.keys(state.data).length > 0) {
        Object.keys(state.data).forEach(function(key) {
          _this.component[key] = state.data[key];
        });
      }
      var newValue = this.component.primitiveValue();
      var eventArgs = {
        event: state.event,
        component: this.component,
        target: {
          // @ts-ignore
          name: this.component.$props.name,
          value: newValue
        },
        value: newValue
      };
      state.events.forEach(function(eventData) {
        var type = eventData.type;
        delete eventData.type;
        if (type) {
          if (type === "change") {
            _this.component.$emit("changemodel", newValue);
            _this.component.$emit("update:modelValue", newValue);
          }
          _this.component.$emit(type, __assign7(__assign7({}, eventArgs), eventData));
        }
      });
    };
    DropDownBase2.prototype.triggerOnPageChange = function(state, skip, take) {
      var virtual4 = this.component.$props.virtual;
      if (virtual4) {
        var newSkip = Math.min(Math.max(0, skip), Math.max(0, virtual4.total - take));
        if (newSkip !== virtual4.skip) {
          state.events.push({
            type: "pagechange",
            page: {
              skip: newSkip,
              take
            }
          });
        }
      }
    };
    DropDownBase2.prototype.triggerPageChangeCornerItems = function(item2, state) {
      var props = this.component.$props;
      var _a2 = props.dataItems, dataItems2 = _a2 === void 0 ? [] : _a2, dataItemKey = props.dataItemKey, virtual4 = props.virtual;
      var opened5 = props.opened !== void 0 ? props.opened : this.component.currentOpened;
      if (item2 && virtual4 && this.vs.enabled) {
        if (virtual4.skip > 0 && areSame(item2, dataItems2[0], dataItemKey)) {
          this.triggerOnPageChange(state, virtual4.skip - 1, virtual4.pageSize);
        } else if (virtual4.skip + virtual4.pageSize < virtual4.total && areSame(item2, dataItems2[dataItems2.length - 1], dataItemKey)) {
          this.triggerOnPageChange(state, virtual4.skip + 1, virtual4.pageSize);
        } else if (!opened5 && virtual4.skip + virtual4.pageSize < virtual4.total && areSame(item2, dataItems2[dataItems2.length - 1], dataItemKey)) {
          this.triggerOnPageChange(state, virtual4.skip + 1, virtual4.pageSize);
        }
      }
    };
    DropDownBase2.defaultProps = {
      popupSettings: {
        animate: true,
        height: "200px"
      },
      required: false,
      validityStyles: true
    };
    return DropDownBase2;
  }()
);
var DropDownBase_default = DropDownBase;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/GroupStickyHeader.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var allVue12 = vue_runtime_esm_bundler_exports;
var gh11 = allVue12.h;
var isV312 = allVue12.version && allVue12.version[0] === "3";
var ref3 = allVue12.ref;
var GroupStickyHeaderVue2 = {
  name: "KendoGroupStickyHeader",
  props: {
    group: String,
    render: Object
  },
  // @ts-ignore
  setup: !isV312 ? void 0 : function() {
    var v3 = !!isV312;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render11(createElement) {
    var h = gh11 || createElement;
    var _a2 = this.$props, group = _a2.group, render28 = _a2.render;
    var defaulGroupStickyHeader = h("div", {
      "class": "k-list-group-sticky-header"
    }, [h("div", {
      "class": "k-list-header-text"
    }, [group])]);
    return getTemplate.call(this, {
      h,
      template: render28,
      defaultRendering: defaulGroupStickyHeader,
      additionalProps: __assign8({}, this.$props)
    });
  }
};
var GroupStickyHeader = GroupStickyHeaderVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/DropDownList/DropDownList.js
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var allVue13 = vue_runtime_esm_bundler_exports;
var gh12 = allVue13.h;
var isV313 = allVue13.version && allVue13.version[0] === "3";
var ref4 = allVue13.ref;
var sizeMap2 = kendoThemeMaps.sizeMap;
var roundedMap2 = kendoThemeMaps.roundedMap;
var VALIDATION_MESSAGE = "Please select a value from the list!";
var DropDownListVue2 = {
  name: "KendoDropDownList",
  model: {
    event: "changemodel"
  },
  props: {
    id: String,
    title: String,
    dataItemKey: {
      type: [Object, String]
    },
    defaultValue: {
      type: [String, Object, Number, Boolean],
      default: void 0
    },
    name: String,
    modelValue: {
      type: [String, Object, Number, Boolean],
      default: void 0
    },
    value: {
      type: [String, Object, Number, Boolean],
      default: void 0
    },
    label: {
      type: String
    },
    required: {
      type: Boolean,
      default: false
    },
    leftRightKeysNavigation: {
      type: Boolean,
      default: true
    },
    valid: {
      type: Boolean,
      default: void 0
    },
    validate: {
      type: Boolean
    },
    validationMessage: {
      type: String,
      default: void 0
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    delay: {
      type: Number,
      default: 500
    },
    ignoreCase: {
      type: Boolean,
      default: true
    },
    icon: String,
    svgIcon: Object,
    iconClassName: String,
    defaultItem: [Object, String],
    valueRender: [String, Function, Object],
    valueMap: Function,
    opened: {
      type: Boolean,
      default: void 0
    },
    disabled: Boolean,
    dir: {
      type: String,
      default: void 0
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    accessKey: String,
    dataItems: Array,
    textField: String,
    valueField: String,
    valuePrimitive: Boolean,
    className: String,
    loading: Boolean,
    popupSettings: {
      type: Object,
      default: function _default2() {
        return {
          animate: true,
          height: "200px"
        };
      }
    },
    itemRender: [String, Function, Object],
    groupHeaderItemRender: [String, Function, Object],
    groupStickyHeaderItemRender: [String, Function, Object],
    listNoDataRender: [String, Function, Object],
    focusedItemIndex: Function,
    header: [String, Function, Object],
    footer: [String, Function, Object],
    filterable: Boolean,
    filter: {
      type: String,
      default: void 0
    },
    virtual: {
      type: Object,
      default: void 0
    },
    ariaLabelledBy: String,
    ariaLabel: String,
    ariaDescribedBy: String,
    rounded: {
      type: String,
      default: "medium",
      validator: function validator4(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator5(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator6(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    groupField: {
      type: String
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      hasMounted: false,
      currentText: "",
      currentValue: "",
      currentFocused: false,
      currentOpened: false,
      searchState: {
        word: "",
        last: ""
      },
      _skipFocusEvent: false,
      valueDuringOnChange: {},
      _navigated: false,
      group: void 0,
      isScrolling: false,
      itemHeight: 0
    };
  },
  watch: {
    currentOpened: function currentOpened(_, oldValue) {
      this.prevCurrentOpened = oldValue;
    },
    opened: function opened(_, oldValue) {
      this.prevOpened = oldValue;
    },
    virtual: function virtual(newValue, oldValue) {
      if (newValue && oldValue && newValue.total !== oldValue.total) {
        this.virtualTotalHasChanged = true;
      }
      this.virtualHasChanged = true;
    }
  },
  created: function created3() {
    this.valueDuringOnChange = void 0;
    this.currentText = void 0;
    this.currentValue = void 0;
    this.prevCurrentValue = this.computedValue();
    this.currentFocused = void 0;
    this.currentOpened = void 0;
    this.base = new DropDownBase_default(this);
    this.anchor = guid();
    this.inputId = guid();
  },
  // @ts-ignore
  setup: !isV313 ? void 0 : function() {
    var v3 = !!isV313;
    var selectRef = ref4(null);
    var baseWrapperRef = ref4(null);
    var kendoAnchorRef = ref4(null);
    return {
      v3,
      selectRef,
      baseWrapperRef,
      kendoAnchorRef
    };
  },
  mounted: function mounted4() {
    this.hasMounted = true;
    this.select = getRef(this, "select");
    this.base.wrapper = getRef(this, "kendoAnchor", this.anchor);
    this.base.didMount();
    this.setValidity();
  },
  updated: function updated() {
    var _a2;
    var _b = this.$props, _c = _b.dataItems, dataItems2 = _c === void 0 ? [] : _c, dataItemKey = _b.dataItemKey, virtual4 = _b.virtual, groupField = _b.groupField, textField = _b.textField;
    var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
    var prevOpened = this.prevOpened !== void 0 ? this.prevOpened : this.prevCurrentOpened;
    var opening = !prevOpened && opened5;
    var closing = prevOpened && !opened5;
    var list = this.$refs.list;
    var filterInput = this.$refs.filterInput;
    var scrollElement = this.$refs.scrollElement;
    var scroller = this.$refs.scroller;
    if (list) {
      this.base.vs.list = list.list;
      this.base.list = list.list;
    }
    if (scrollElement) {
      this.base.vs.scrollElement = scrollElement;
    }
    if (filterInput) {
      this.filterInput = filterInput;
    }
    if (list && dataItems2.length) {
      this.base.vs.scrollerRef(list.$el);
    }
    if (!this.$props.popupSettings.animate) {
      if (opening) {
        this.onPopupOpened();
      } else if (closing) {
      }
    }
    if (virtual4 && this.virtualTotalHasChanged) {
      this.base.vs.calcScrollElementHeight();
      this.base.vs.reset();
      this.virtualTotalHasChanged = false;
    } else {
      var selectedItem_1 = this.computedValue();
      var prevSelectedItem = this.prevCurrentValue;
      var selectedItemIndex = dataItems2.findIndex(function(i) {
        return areSame(i, selectedItem_1, dataItemKey);
      });
      if (groupField) {
        selectedItemIndex = (_a2 = this.base.getGroupedDataModernMode(dataItems2, groupField)) === null || _a2 === void 0 ? void 0 : _a2.indexOf(selectedItem_1);
      }
      var selectedItemChanged = !areSame(prevSelectedItem, selectedItem_1, dataItemKey);
      if (opening && virtual4) {
        this.base.scrollToVirtualItem(virtual4, selectedItemIndex);
        this.prevCurrentOpened = true;
      } else if (opening && !virtual4) {
        if (dataItems2 && dataItems2.length !== 0) {
          this.base.resetGroupStickyHeader(dataItems2[0][groupField], this);
        }
        this.base.scrollToItem(selectedItemIndex);
        this.prevCurrentOpened = true;
      } else if (opened5 && prevOpened && selectedItem_1 && selectedItemChanged && !this._navigated) {
        this.base.scrollToItem(selectedItemIndex);
      } else if (opened5 && prevOpened && this._navigated) {
        if (this._navigated && virtual4 && virtual4.skip === 0) {
          this.base.vs.reset();
        } else if (this._navigated && virtual4 && virtual4.skip === virtual4.total - virtual4.pageSize) {
          this.base.vs.scrollToEnd();
        }
      }
    }
    this._navigated = false;
    this.prevCurrentValue = this.computedValue();
    this.setValidity();
  },
  computed: {
    index: {
      get: function get() {
        var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey;
        var value2 = this.computedValue();
        return dataItems2.findIndex(function(i) {
          return areSame(i, value2, dataItemKey);
        });
      }
    },
    spanClassNames: {
      get: function get2() {
        var isValid = !this.hasMounted || !this.$props.validityStyles || this.validity().valid;
        return {
          "k-floating-label-container": true,
          "k-focus": this.currentFocused,
          "k-empty": !this.computedValue(),
          "k-invalid": !isValid && isValid !== void 0,
          "k-rtl": this.$props.dir === "rtl"
        };
      }
    },
    dropDownListId: {
      get: function get3() {
        return "value-".concat(this.base.guid).concat(this.$props.ariaDescribedBy ? " " + this.$props.ariaDescribedBy : "");
      }
    }
  },
  methods: {
    focus: function focus() {
      if (this.base.wrapper) {
        this.base.wrapper.focus();
      }
    },
    computedValue: function computedValue() {
      var value2;
      if (this.valueDuringOnChange !== void 0) {
        value2 = this.valueDuringOnChange;
      } else if (this.$props.value !== void 0) {
        value2 = this.$props.value;
      } else if (this.$props.modelValue !== void 0) {
        value2 = this.$props.modelValue;
      } else if (this.currentValue !== void 0) {
        value2 = this.currentValue;
      } else if (this.$props.defaultValue !== void 0) {
        value2 = this.$props.defaultValue;
      }
      if (!isPresent(value2) && this.$props.defaultItem !== void 0) {
        value2 = this.$props.defaultItem;
      }
      return this.valuePrimitive ? this.findByFieldValue(this.valueField, value2) || value2 : value2;
    },
    findByFieldValue: function findByFieldValue(field, value2) {
      var index = this.dataItems.findIndex(function(i) {
        return getItemValue(i, field) === value2;
      });
      return this.dataItems[index];
    },
    primitiveValue: function primitiveValue() {
      var value2 = this.computedValue();
      return this.valuePrimitive ? getItemValue(value2, this.valueField) : value2;
    },
    validity: function validity() {
      var customError = this.$props.validationMessage !== void 0;
      var isValid = !this.$props.required || this.computedValue() !== null && this.computedValue() !== "" && this.computedValue() !== void 0;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        valid,
        valueMissing: this.computedValue() === null
      };
    },
    handleItemSelect: function handleItemSelect(index, state) {
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, virtual4 = _a2.virtual, dataItemKey = _a2.dataItemKey, defaultItem = _a2.defaultItem;
      var skip = virtual4 ? virtual4.skip : 0;
      var item2 = index === -1 && defaultItem !== void 0 ? defaultItem : dataItems2[index - skip];
      var newSelected = !areSame(item2, this.computedValue(), dataItemKey);
      this.triggerOnChange(item2, state);
      if (newSelected) {
        this.base.triggerPageChangeCornerItems(item2, state);
      }
    },
    onNavigate: function onNavigate(state, keyCode) {
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, defaultItem = _a2.defaultItem, dataItemKey = _a2.dataItemKey, _c = _a2.virtual, virtual4 = _c === void 0 ? {
        skip: 0,
        total: 0,
        pageSize: 0
      } : _c;
      var vs = this.base.vs;
      var value2 = this.computedValue();
      var index = dataItems2.findIndex(function(i) {
        return areSame(i, value2, dataItemKey);
      });
      var newIndex = this.base.navigation.navigate({
        current: virtual4.skip + index,
        max: (vs.enabled ? virtual4.total : dataItems2.length) - 1,
        min: defaultItem !== void 0 ? -1 : 0,
        keyCode
      });
      if (newIndex !== void 0) {
        this.handleItemSelect(newIndex, state);
      }
      this.applyState(state);
    },
    search: function search(event) {
      var _this = this;
      clearTimeout(this.typingTimeout);
      if (!this.$props.filterable) {
        this.typingTimeout = setTimeout(function() {
          return _this.searchState.word = "";
        }, this.$props.delay);
        this.selectNext(event);
      }
    },
    selectNext: function selectNext(event) {
      var _this = this;
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey;
      var mappedData = dataItems2.map(function(item2, idx) {
        return {
          item: item2,
          itemIndex: idx
        };
      });
      var word = this.searchState.word;
      var last = this.searchState.last;
      var isInLoop = sameCharsOnly(word, last);
      var dataLength = mappedData.length;
      var startIndex = Math.max(0, dataItems2.findIndex(function(i) {
        return areSame(i, _this.computedValue(), dataItemKey);
      }));
      var defaultItem;
      if (this.$props.defaultItem) {
        defaultItem = {
          item: this.$props.defaultItem,
          itemIndex: -1
        };
        dataLength += 1;
        startIndex += 1;
      }
      startIndex += isInLoop ? 1 : 0;
      mappedData = shuffleData(mappedData, startIndex, defaultItem);
      var text, loopMatch, nextMatch, index = 0;
      var _c = this.$props, textField = _c.textField, ignoreCase = _c.ignoreCase;
      for (; index < dataLength; index++) {
        text = getItemValue(mappedData[index].item, textField);
        loopMatch = isInLoop && matchText(text, last, ignoreCase);
        nextMatch = matchText(text, word, ignoreCase);
        if (loopMatch || nextMatch) {
          index = mappedData[index].itemIndex;
          break;
        }
      }
      if (index !== dataLength) {
        var state = this.base.initState();
        state.event = event;
        this.handleItemSelect(index, state);
        this.applyState(state);
        this.valueDuringOnChange = void 0;
      }
    },
    handleKeyDown: function handleKeyDown(event) {
      if (this.isScrolling) {
        this.isScrolling = false;
      }
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, leftRightKeysNavigation = _a2.leftRightKeysNavigation, filterable = _a2.filterable, disabled = _a2.disabled, _c = _a2.virtual, virtual4 = _c === void 0 ? {
        skip: 0,
        total: 0,
        pageSize: 0
      } : _c;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var keyCode = event.keyCode;
      var homeOrEndKeys = keyCode === Keys.home || keyCode === Keys.end;
      var upOrDownKeys = keyCode === Keys.up || keyCode === Keys.down;
      var shouldOpen = !opened5 && (event.altKey && keyCode === Keys.down || keyCode === Keys.enter || keyCode === Keys.space);
      var shouldClose = opened5 && (event.altKey && keyCode === Keys.up || keyCode === Keys.esc);
      var leftOrRightKeys = leftRightKeysNavigation && (keyCode === Keys.left || keyCode === Keys.right);
      var shouldNavigate = upOrDownKeys || !filterable && (leftOrRightKeys || homeOrEndKeys);
      var state = this.base.initState();
      state.event = event;
      if (disabled) {
        return;
      } else if (homeOrEndKeys && this.base.vs.enabled) {
        if (keyCode === Keys.home) {
          if (virtual4.skip !== 0) {
            this.base.triggerOnPageChange(state, 0, virtual4.pageSize);
            this._navigated = true;
          } else {
            this.triggerOnChange(dataItems2[0], state);
          }
        } else {
          if (virtual4.skip < virtual4.total - virtual4.pageSize) {
            this.base.triggerOnPageChange(state, virtual4.total - virtual4.pageSize, virtual4.pageSize);
            this._navigated = true;
          } else {
            this.triggerOnChange(dataItems2[dataItems2.length - 1], state);
          }
        }
      } else if (opened5 && keyCode === Keys.enter) {
        var focusedIndex3 = this.focusedIndex();
        if (focusedIndex3 !== void 0) {
          this.handleItemSelect(focusedIndex3, state);
        }
        this.base.togglePopup(state);
        event.preventDefault();
      } else if (shouldOpen || shouldClose) {
        this.base.togglePopup(state);
        event.preventDefault();
      } else if (shouldNavigate) {
        this.onNavigate(state, keyCode);
        event.preventDefault();
      }
      this.applyState(state);
    },
    handleItemClick: function handleItemClick(index, event) {
      this.base.handleItemClick(index, event);
      this.valueDuringOnChange = void 0;
    },
    handleFocus: function handleFocus2(event) {
      if (this._skipFocusEvent) {
        return;
      }
      this.base.handleFocus(event);
    },
    handleBlur: function handleBlur2(event) {
      if (this._skipFocusEvent || !this.currentFocused) {
        return;
      }
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var state = this.base.initState();
      state.event = event;
      state.data.currentFocused = false;
      state.events.push({
        type: "blur"
      });
      if (opened5) {
        this.base.togglePopup(state);
      }
      this.applyState(state);
    },
    handleDefaultItemClick: function handleDefaultItemClick(event) {
      var state = this.base.initState();
      state.event = event;
      this.base.togglePopup(state);
      this.triggerOnChange(this.$props.defaultItem, state);
      this.applyState(state);
    },
    handleWrapperClick: function handleWrapperClick(event) {
      var state = this.base.initState();
      state.event = event;
      if (!this.currentFocused) {
        state.data.currentFocused = true;
      }
      this.base.togglePopup(state);
      this.applyState(state);
    },
    handleKeyPress: function handleKeyPress(event) {
      if (this.$props.filterable || event.keyCode === Keys.enter) {
        return;
      }
      var character = String.fromCharCode(event.charCode || event.keyCode);
      if (this.$props.ignoreCase) {
        character = character.toLowerCase();
      }
      if (character === " ") {
        event.preventDefault();
      }
      this.searchState = {
        word: this.searchState.word + character,
        last: this.searchState.last + character
      };
      this.search(event);
    },
    handleListFilterChange: function handleListFilterChange(event) {
      var state = this.base.initState();
      state.event = event;
      if (this.$props.filter === void 0) {
        state.data.currentText = event.target.value;
      }
      this.base.filterChanged(event.target.value, state);
      state.data.group = void 0;
      this.applyState(state);
    },
    onPopupOpened: function onPopupOpened() {
      if (this.filterInput) {
        this.focusElement(this.filterInput.input);
      }
    },
    onPopupClosed: function onPopupClosed() {
      var _this = this;
      if (this.currentFocused) {
        setTimeout(function() {
          if (_this.currentFocused && _this.base.wrapper) {
            _this.focusElement(_this.base.wrapper);
          }
        });
      }
    },
    focusedIndex: function focusedIndex() {
      var filterText = isPresent(this.$props.filter) ? this.$props.filter : this.currentText;
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, _c = _a2.virtual, virtual4 = _c === void 0 ? {
        skip: 0
      } : _c, dataItemKey = _a2.dataItemKey, textField = _a2.textField, focusedItemIndex = _a2.focusedItemIndex;
      var value2 = this.computedValue();
      var selectedIndex = dataItems2.findIndex(function(i) {
        return areSame(i, value2, dataItemKey);
      });
      var hasSelected = !(selectedIndex < 0 && !this.$props.defaultItem);
      if (!hasSelected && filterText && virtual4.skip === 0) {
        return focusedItemIndex ? focusedItemIndex(dataItems2, filterText, textField) : dataItems2.indexOf(getFocusedItem(dataItems2, filterText, textField));
      } else {
        return !hasSelected && virtual4.skip === 0 ? 0 : void 0;
      }
    },
    focusElement: function focusElement(element) {
      var _this = this;
      this._skipFocusEvent = true;
      element.focus();
      setTimeout(function() {
        return _this._skipFocusEvent = false;
      }, 30);
    },
    setValidity: function setValidity() {
      if (this.select && this.select.setCustomValidity) {
        this.select.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage || VALIDATION_MESSAGE);
      }
    },
    triggerOnChange: function triggerOnChange(item2, state) {
      if (areSame(this.computedValue(), item2, this.$props.dataItemKey)) {
        return;
      }
      if (this.$props.value === void 0) {
        this.currentValue = item2;
      }
      this.valueDuringOnChange = item2;
      state.events.push({
        type: "change"
      });
    },
    applyState: function applyState(state) {
      this.base.applyState(state);
      this.valueDuringOnChange = void 0;
    },
    repositionPopup: function repositionPopup() {
      this.base.repositionPopup();
    },
    onScroll: function onScroll(event) {
      this.isScrolling = true;
      var _a2 = this.base, vs = _a2.vs, list = _a2.list;
      vs.scrollHandler(event);
      var state = this.base.initState();
      var groupField = this.$props.groupField;
      var _b = this.$props.dataItems, dataItems2 = _b === void 0 ? [] : _b;
      if (!groupField || !dataItems2.length) {
        return;
      }
      var itemHeight = this.itemHeight = this.itemHeight || (vs.enabled ? vs.itemHeight : list ? list.children[0].offsetHeight : 0);
      var target = event.target;
      var scrollTop = target.scrollTop - vs.skip * itemHeight;
      if (groupField) {
        dataItems2 = this.base.getGroupedDataModernMode(dataItems2, groupField);
      }
      var group = dataItems2[0][groupField];
      for (var i = 1; i < dataItems2.length; i++) {
        if (itemHeight * i > scrollTop) {
          break;
        }
        if (dataItems2[i] && dataItems2[i][groupField]) {
          group = dataItems2[i][groupField];
        }
      }
      if (group !== this.group) {
        state.data.group = group;
        this.applyState(state);
      }
    }
  },
  render: function render12(createElement) {
    var _a2;
    var h = gh12 || createElement;
    var _b = this.$props, style = _b.style, className = _b.className, label = _b.label, dir = _b.dir, _c = _b.virtual, virtual4 = _c === void 0 ? {
      skip: 0
    } : _c, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode;
    var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
    var text = getItemValue(this.computedValue(), this.$props.textField);
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var base = this.base;
    var vs = base.vs;
    var id = this.$props.id || this.inputId;
    vs.enabled = this.$props.virtual !== void 0;
    var popupSettings = Object.assign({}, {
      animate: true,
      height: "200px"
    }, this.$props.popupSettings);
    var ariaLabelSelectButton = provideLocalizationService(this).toLanguageString(selectButton, messages[selectButton]);
    var _d = this.$props, dataItemKey = _d.dataItemKey, _e = _d.dataItems, dataItems2 = _e === void 0 ? [] : _e, disabled = _d.disabled, tabIndex = _d.tabIndex, loading = _d.loading, icon = _d.icon, svgIcon = _d.svgIcon, iconClassName = _d.iconClassName;
    var valueRender = templateRendering.call(this, this.$props.valueRender, getListeners.call(this));
    var focused = this.currentFocused;
    var value2 = this.primitiveValue();
    var selectedIndex = dataItems2.findIndex(function(i) {
      return areSame(i, value2, dataItemKey);
    });
    var valueDefaultRendering = h("span", {
      "class": "k-input-inner",
      id: this.dropDownListId,
      attrs: this.v3 ? void 0 : {
        id: this.dropDownListId
      }
    }, [h("span", {
      "class": "k-input-value-text"
    }, [text])]);
    var valueElement = getTemplate.call(this, {
      h,
      template: valueRender,
      defaultRendering: valueDefaultRendering,
      additionalProps: __assign9({
        value: this.computedValue()
      }, this.$data)
    });
    var dummySelect = function dummySelect2(cvalue) {
      return h("select", {
        name: this.$props.name,
        attrs: this.v3 ? void 0 : {
          name: this.$props.name,
          id,
          tabindex: -1,
          "aria-hidden": true,
          title: this.$props.label
        },
        id,
        ref: setRef(this, "select"),
        tabindex: -1,
        "aria-hidden": true,
        title: this.$props.label,
        style: {
          opacity: 0,
          width: 1,
          border: 0,
          zIndex: -1,
          position: "absolute",
          left: "50%"
        }
      }, [h("option", {
        value: this.v3 ? this.$props.valueMap ? this.$props.valueMap.call(void 0, cvalue) : cvalue : null,
        domProps: this.v3 ? void 0 : {
          "value": this.$props.valueMap ? this.$props.valueMap.call(void 0, cvalue) : cvalue
        }
      })]);
    };
    var renderDefaultItem = function renderDefaultItem2() {
      var _a3 = this.$props, textField = _a3.textField, defaultItem = _a3.defaultItem;
      return defaultItem !== void 0 && // @ts-ignore
      h(ListDefaultItem, {
        defaultItem,
        attrs: this.v3 ? void 0 : {
          defaultItem,
          textField,
          selected: areSame(this.computedValue(), defaultItem, dataItemKey)
        },
        textField,
        selected: areSame(this.computedValue(), defaultItem, dataItemKey),
        key: "defaultitemkey",
        onDefaultitemclick: this.handleDefaultItemClick,
        on: this.v3 ? void 0 : {
          "defaultitemclick": this.handleDefaultItemClick
        }
      });
    };
    var renderList = function renderList2() {
      var _this2 = this;
      var _a3 = this.$props, textField = _a3.textField, groupField = _a3.groupField;
      var dataItemsToRender = this.$props.dataItems || [];
      var itemRender = templateRendering.call(this, this.$props.itemRender, getListeners.call(this));
      var groupHeaderItemRender = templateRendering.call(this, this.$props.groupHeaderItemRender, getListeners.call(this));
      var listNoDataRender = templateRendering.call(this, this.$props.listNoDataRender, getListeners.call(this));
      var skip = virtual4.skip;
      var translate = "translateY(".concat(vs.translate, "px)");
      if (groupField) {
        dataItemsToRender = this.base.getGroupedDataModernMode(dataItemsToRender, groupField);
      }
      return (
        // @ts-ignore  function children
        h(List, {
          id: this.base.listBoxId,
          attrs: this.v3 ? void 0 : {
            id: this.base.listBoxId,
            show: opened5,
            dataItems: dataItemsToRender.slice(),
            focusedIndex: this.focusedIndex(),
            value: this.computedValue(),
            textField,
            valueField: dataItemKey,
            optionsGuid: this.base.guid,
            wrapperStyle: {
              maxHeight: popupSettings.height
            },
            wrapperCssClass: "k-list-content",
            listStyle: vs.enabled ? {
              transform: translate
            } : void 0,
            skip,
            itemRender,
            groupHeaderItemRender,
            noDataRender: listNoDataRender,
            groupField
          },
          show: opened5,
          dataItems: dataItemsToRender.slice(),
          focusedIndex: this.focusedIndex(),
          value: this.computedValue(),
          textField,
          valueField: dataItemKey,
          optionsGuid: this.base.guid,
          ref: "list",
          wrapperStyle: {
            maxHeight: popupSettings.height
          },
          wrapperCssClass: "k-list-content",
          listStyle: vs.enabled ? {
            transform: translate
          } : void 0,
          key: "listkey",
          skip,
          onListclick: this.handleItemClick,
          on: this.v3 ? void 0 : {
            "listclick": this.handleItemClick,
            "scroll": this.onScroll
          },
          itemRender,
          groupHeaderItemRender,
          noDataRender: listNoDataRender,
          groupField,
          onScroll: this.onScroll
        }, this.v3 ? function() {
          return [renderScrollElement.call(_this2)];
        } : [renderScrollElement.call(_this2)])
      );
    };
    var renderListFilter = function renderListFilter2() {
      var filterText = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
      return this.$props.filterable && // @ts-ignore
      h(ListFilter, {
        value: filterText,
        attrs: this.v3 ? void 0 : {
          value: filterText,
          size: this.$props.size,
          rounded: this.$props.rounded,
          fillMode: this.$props.fillMode
        },
        ref: "filterInput",
        onChange: this.handleListFilterChange,
        on: this.v3 ? void 0 : {
          "change": this.handleListFilterChange,
          "keydown": this.handleKeyDown
        },
        onKeydown: this.handleKeyDown,
        size: this.$props.size,
        rounded: this.$props.rounded,
        fillMode: this.$props.fillMode
      });
    };
    var renderScrollElement = function renderScrollElement2() {
      return vs.enabled && h("div", {
        ref: "scrollElement",
        key: "scrollElementKey"
      });
    };
    var renderListContainer = function renderListContainer2() {
      var _this3 = this;
      var _a3;
      var headerTemplate = templateRendering.call(this, this.$props.header, getListeners.call(this));
      var footerTemplate = templateRendering.call(this, this.$props.footer, getListeners.call(this));
      var groupStickyHeaderTemplate = templateRendering.call(this, this.$props.groupStickyHeaderItemRender, getListeners.call(this));
      var header = getTemplate.call(this, {
        h,
        template: headerTemplate
      });
      var footer = getTemplate.call(this, {
        h,
        template: footerTemplate
      });
      var popupWidth = popupSettings.width !== void 0 ? popupSettings.width : base.popupWidth;
      if (this.group === void 0 && this.$props.groupField !== void 0) {
        this.group = getItemValue(dataItems2[0], this.$props.groupField);
      }
      return (
        // @ts-ignore  function children
        h(ListContainer, {
          ref: "container",
          onMousedown: preventDefaultNonInputs,
          on: this.v3 ? void 0 : {
            "mousedown": preventDefaultNonInputs,
            "open": this.onPopupOpened,
            "close": this.onPopupClosed,
            "blur": this.handleBlur
          },
          dir: dir !== void 0 ? dir : base.dirCalculated,
          attrs: this.v3 ? void 0 : {
            dir: dir !== void 0 ? dir : base.dirCalculated,
            width: popupWidth,
            popupSettings: __assign9(__assign9({}, popupSettings), {
              popupClass: classNames(popupSettings.popupClass, "k-list", (_a3 = {}, _a3["k-list-".concat(sizeMap2[size] || size)] = size, _a3["k-virtual-list"] = this.base.vs.enabled, _a3)),
              className: classNames("k-list-container", popupSettings.className),
              anchor: this.anchor,
              show: opened5
            })
          },
          width: popupWidth,
          popupSettings: __assign9(__assign9({}, popupSettings), {
            popupClass: classNames(popupSettings.popupClass, "k-list", (_a3 = {}, _a3["k-list-".concat(sizeMap2[size] || size)] = size, _a3["k-virtual-list"] = this.base.vs.enabled, _a3)),
            className: classNames("k-list-container", popupSettings.className),
            anchor: this.anchor,
            show: opened5
          }),
          onOpen: this.onPopupOpened,
          onClose: this.onPopupClosed,
          onBlur: this.handleBlur
        }, this.v3 ? function() {
          return [renderListFilter.call(_this3), renderDefaultItem.call(_this3), _this3.group && dataItems2.length !== 0 && h(GroupStickyHeader, {
            group: _this3.group,
            attrs: _this3.v3 ? void 0 : {
              group: _this3.group,
              render: groupStickyHeaderTemplate
            },
            render: groupStickyHeaderTemplate
          }), header && h("div", {
            "class": "k-list-header"
          }, [header]), renderList.call(_this3), footer && h("div", {
            "class": "k-list-footer"
          }, [footer])];
        } : [renderListFilter.call(_this3), renderDefaultItem.call(_this3), _this3.group && dataItems2.length !== 0 && h(GroupStickyHeader, {
          group: _this3.group,
          attrs: _this3.v3 ? void 0 : {
            group: _this3.group,
            render: groupStickyHeaderTemplate
          },
          render: groupStickyHeaderTemplate
        }), header && h("div", {
          "class": "k-list-header"
        }, [header]), renderList.call(_this3), footer && h("div", {
          "class": "k-list-footer"
        }, [footer])])
      );
    };
    if (this.$props.virtual !== void 0) {
      base.vs.skip = virtual4.skip;
      base.vs.total = virtual4.total;
      base.vs.pageSize = virtual4.pageSize;
    }
    var dropdownlist = h("span", {
      ref: setRef(this, "kendoAnchor", this.anchor),
      "class": classNames("k-dropdownlist k-picker", className, (_a2 = {}, _a2["k-picker-".concat(sizeMap2[size] || size)] = size, _a2["k-rounded-".concat(roundedMap2[rounded] || rounded)] = rounded, _a2["k-picker-".concat(fillMode)] = fillMode, _a2["k-focus"] = focused, _a2["k-disabled"] = disabled, _a2["k-invalid"] = !isValid, _a2["k-loading"] = loading, _a2["k-required"] = this.required, _a2)),
      style: !label ? style : __assign9(__assign9({}, style), {
        width: void 0
      }),
      dir,
      attrs: this.v3 ? void 0 : {
        dir,
        tabindex: getTabIndex(tabIndex, disabled),
        accesskey: this.$props.accessKey,
        role: "combobox",
        "aria-disabled": disabled || void 0,
        "aria-haspopup": true,
        "aria-expanded": opened5 || false,
        "aria-owns": this.base.listBoxId,
        "aria-activedescendant": opened5 ? "option-" + this.base.guid + "-" + (selectedIndex + (virtual4 ? virtual4.skip : 0)) : void 0,
        "aria-label": this.$props.ariaLabel || this.$props.label,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedBy": this.dropDownListId,
        title: this.$props.title
      },
      onMousedown: opened5 ? preventDefaultNonInputs : noop,
      on: this.v3 ? void 0 : {
        "mousedown": opened5 ? preventDefaultNonInputs : noop,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur,
        "keydown": this.handleKeyDown,
        "keypress": this.handleKeyPress,
        "click": disabled ? noop : this.handleWrapperClick
      },
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur,
      tabindex: getTabIndex(tabIndex, disabled),
      accesskey: this.$props.accessKey,
      onKeydown: this.handleKeyDown,
      onKeypress: this.handleKeyPress,
      role: "combobox",
      onClick: disabled ? noop : this.handleWrapperClick,
      "aria-disabled": disabled || void 0,
      "aria-haspopup": true,
      "aria-expanded": opened5 || false,
      "aria-owns": this.base.listBoxId,
      "aria-activedescendant": opened5 ? "option-" + this.base.guid + "-" + (selectedIndex + (virtual4 ? virtual4.skip : 0)) : void 0,
      "aria-label": this.$props.ariaLabel || this.$props.label,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedBy": this.dropDownListId,
      title: this.$props.title
    }, [
      valueElement,
      loading && h(Icon, {
        name: "loading",
        attrs: this.v3 ? void 0 : {
          name: "loading"
        },
        "class": "k-input-loading-icon",
        key: "loading"
      }),
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          size,
          fillMode,
          rounded: null,
          ariaLabel: ariaLabelSelectButton,
          icon: icon || "caret-alt-down",
          svgIcon: svgIcon || caretAltDownIcon,
          iconClass: iconClassName,
          "aria-hidden": true
        },
        tabIndex: -1,
        size,
        fillMode,
        rounded: null,
        ariaLabel: ariaLabelSelectButton,
        "class": "k-input-button",
        icon: icon || "caret-alt-down",
        svgIcon: svgIcon || caretAltDownIcon,
        iconClass: iconClassName,
        "aria-hidden": true
      }),
      dummySelect.call(this, value2),
      renderListContainer.call(this)
    ]);
    return label ? h("span", {
      "class": this.spanClassNames,
      onFocusin: this.handleFocus,
      on: this.v3 ? void 0 : {
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusout: this.handleBlur,
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      }
    }, [dropdownlist, this.$props.label ? id ? h("label", {
      "for": id,
      attrs: this.v3 ? void 0 : {
        "for": id
      },
      "class": "k-label"
    }, [this.$props.label]) : h("span", {
      "class": "k-label"
    }, [this.$props.label]) : null]) : dropdownlist;
  }
};
var DropDownList = DropDownListVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/SearchBar.js
var allVue14 = vue_runtime_esm_bundler_exports;
var gh13 = allVue14.h;
var isV314 = allVue14.version && allVue14.version[0] === "3";
var ref5 = allVue14.ref;
var SearchBarVue2 = {
  name: "search-bar",
  // @ts-ignore
  emits: {
    "change": null,
    "keydown": null,
    "focus": null,
    "blur": null
  },
  props: {
    value: String,
    id: String,
    placeholder: String,
    tabIndex: Number,
    size: {
      type: Number,
      default: void 0
    },
    suggestedText: String,
    focused: Boolean,
    disabled: Boolean,
    readOnly: Boolean,
    expanded: Boolean,
    owns: String,
    name: String,
    activedescendant: String,
    describedby: String,
    clearButton: Boolean,
    accessKey: String,
    ariaLabelledBy: String,
    ariaLabel: {
      type: String,
      default: void 0
    }
  },
  data: function data2() {
    return {
      prevValue: void 0,
      prevSuggestedText: void 0
    };
  },
  watch: {
    suggestedText: function suggestedText(_, oldValue) {
      this.prevSuggestedText = oldValue;
    },
    value: function value(_, oldValue) {
      this.prevValue = oldValue;
    }
  },
  updated: function updated2() {
    var _a2 = this.$props, value2 = _a2.value, suggestedText2 = _a2.suggestedText, focused = _a2.focused;
    if (!this.input) {
      this.input = this.$refs.input;
    }
    var input = this.input;
    var valueChanged = this.$data.prevValue !== value2 || suggestedText2 !== this.prevSuggestedText;
    var deleting = valueChanged && this.$data.prevValue && this.$data.prevValue.startsWith(value2) && !(this.$data.prevSuggestedText && suggestedText2 && this.$data.prevSuggestedText.endsWith(suggestedText2));
    if (focused && input && canUseDOM && document.activeElement !== input) {
      input.focus();
    }
    if (suggestedText2 && valueChanged && !deleting && input) {
      input.setSelectionRange(value2.length - suggestedText2.length, value2.length);
    }
  },
  // @ts-ignore
  setup: !isV314 ? void 0 : function() {
    var v3 = !!isV314;
    var inputRef = ref5(null);
    return {
      v3,
      inputRef
    };
  },
  mounted: function mounted5() {
    this.input = getRef(this, "input");
  },
  methods: {
    onChange: function onChange2(e) {
      this.$emit("change", e);
    },
    onBlur: function onBlur2(e) {
      this.$emit("blur", e);
    },
    onFocus: function onFocus(e) {
      this.$emit("focus", e);
    },
    onKeyDown: function onKeyDown2(e) {
      this.$emit("keydown", e);
    },
    clearButtonClick: function clearButtonClick(e) {
      this.$emit("clearbuttonclick", e);
    }
  },
  // @ts-ignore
  render: function render13(createElement) {
    var h = gh13 || createElement;
    return h("input", {
      autocomplete: "off",
      attrs: this.v3 ? void 0 : {
        autocomplete: "off",
        id: this.$props.id,
        type: "text",
        placeholder: this.$props.placeholder,
        tabindex: this.$props.tabIndex,
        accesskey: this.$props.accessKey,
        role: "combobox",
        name: this.$props.name,
        size: this.$props.size ? this.$props.size : 20,
        "aria-disabled": this.$props.disabled || void 0,
        disabled: this.$props.disabled || void 0,
        readonly: this.$props.readOnly || void 0,
        "aria-autocomplete": this.$props.suggestedText ? "both" : "list",
        "aria-haspopup": "listbox",
        "aria-expanded": this.$props.expanded || false,
        "aria-controls": this.$props.owns,
        "aria-activedescendant": this.$props.expanded ? this.$props.activedescendant : void 0,
        "aria-describedby": this.$props.describedby,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-label": this.$props.ariaLabel
      },
      id: this.$props.id,
      type: "text",
      key: "searchbar",
      placeholder: this.$props.placeholder,
      "class": "k-input-inner",
      tabindex: this.$props.tabIndex,
      accesskey: this.$props.accessKey,
      role: "combobox",
      name: this.$props.name,
      value: this.v3 ? this.$props.value : null,
      domProps: this.v3 ? void 0 : {
        "value": this.$props.value
      },
      size: this.$props.size ? this.$props.size : 20,
      onInput: this.onChange,
      on: this.v3 ? void 0 : {
        "input": this.onChange,
        "keydown": this.onKeyDown,
        "focusin": this.onFocus,
        "blur": this.onBlur
      },
      ref: setRef(this, "input"),
      onKeydown: this.onKeyDown,
      onFocusin: this.onFocus,
      onBlur: this.onBlur,
      "aria-disabled": this.$props.disabled || void 0,
      disabled: this.$props.disabled || void 0,
      readonly: this.$props.readOnly || void 0,
      "aria-autocomplete": this.$props.suggestedText ? "both" : "list",
      "aria-haspopup": "listbox",
      "aria-expanded": this.$props.expanded || false,
      "aria-controls": this.$props.owns,
      "aria-activedescendant": this.$props.expanded ? this.$props.activedescendant : void 0,
      "aria-describedby": this.$props.describedby,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-label": this.$props.ariaLabel
    });
  }
};
var SearchBar = SearchBarVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/ClearButton.js
var allVue15 = vue_runtime_esm_bundler_exports;
var gh14 = allVue15.h;
var isV315 = allVue15.version && allVue15.version[0] === "3";
var inject2 = allVue15.inject;
var ClearButtonVue2 = {
  name: "clear-button",
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV315 ? void 0 : function() {
    var v3 = !!isV315;
    var kendoLocalizationService = inject2("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  methods: {
    onMouseDown: function onMouseDown3(e) {
      e.preventDefault();
    },
    onClickHandler: function onClickHandler(e) {
      this.$emit("clearclick", e);
    }
  },
  // @ts-ignore
  render: function render14(createElement) {
    var h = gh14 || createElement;
    var title = provideLocalizationService(this).toLanguageString(clear, messages[clear]);
    return h("span", {
      "class": "k-clear-value",
      role: "button",
      attrs: this.v3 ? void 0 : {
        role: "button",
        tabindex: -1,
        title
      },
      onClick: this.onClickHandler,
      on: this.v3 ? void 0 : {
        "click": this.onClickHandler,
        "mousedown": this.onMouseDown
      },
      onMousedown: this.onMouseDown,
      tabindex: -1,
      title,
      key: "clearbutton"
    }, [h(Icon, {
      name: "x",
      attrs: this.v3 ? void 0 : {
        name: "x",
        icon: xIcon
      },
      icon: xIcon
    })]);
  }
};
var ClearButton = ClearButtonVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/ComboBox/ComboBox.js
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
var allVue16 = vue_runtime_esm_bundler_exports;
var gh15 = allVue16.h;
var isV316 = allVue16.version && allVue16.version[0] === "3";
var ref6 = allVue16.ref;
var inject3 = allVue16.inject;
var sizeMap3 = kendoThemeMaps.sizeMap;
var roundedMap3 = kendoThemeMaps.roundedMap;
var VALIDATION_MESSAGE2 = "Please enter a valid value!";
var ComboBoxVue2 = {
  name: "KendoComboBox",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "changemodel": null,
    "update:modelValue": null,
    "filterchange": null,
    pagechange: null,
    change: null,
    focus: null,
    blur: null,
    open: null,
    close: null,
    scroll: null
  },
  props: {
    id: String,
    dataItemKey: {
      type: [Object, String]
    },
    defaultValue: {
      type: [String, Object, Number, Boolean],
      default: void 0
    },
    name: String,
    modelValue: {
      type: [String, Object, Number, Boolean],
      default: void 0
    },
    value: {
      type: [String, Object, Number, Boolean],
      default: void 0
    },
    label: {
      type: String
    },
    placeholder: String,
    required: {
      type: Boolean,
      default: false
    },
    valid: {
      type: Boolean,
      default: void 0
    },
    validationMessage: {
      type: String,
      default: void 0
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    iconClassName: String,
    opened: {
      type: Boolean,
      default: void 0
    },
    disabled: Boolean,
    dir: {
      type: String,
      default: void 0
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    accessKey: String,
    dataItems: Array,
    textField: String,
    className: String,
    loading: Boolean,
    popupSettings: {
      type: Object,
      default: function _default3() {
        return {
          animate: true,
          height: "200px"
        };
      }
    },
    itemRender: [String, Function, Object],
    groupHeaderItemRender: [String, Function, Object],
    groupStickyHeaderItemRender: [String, Function, Object],
    listNoDataRender: [String, Function, Object],
    focusedItemIndex: Function,
    header: [String, Function, Object],
    footer: [String, Function, Object],
    filterable: Boolean,
    filter: {
      type: String,
      default: void 0
    },
    virtual: {
      type: Object,
      default: void 0
    },
    suggest: {
      type: Boolean,
      default: false
    },
    allowCustom: {
      type: Boolean,
      default: false
    },
    clearButton: {
      type: Boolean,
      default: true
    },
    ariaLabel: {
      type: String,
      default: void 0
    },
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    valueField: String,
    valuePrimitive: Boolean,
    rounded: {
      type: String,
      default: "medium",
      validator: function validator7(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator8(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator9(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    groupField: {
      type: String
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data3() {
    return {
      hasMounted: false,
      currentText: "",
      currentValue: "",
      currentFocused: false,
      currentOpened: false,
      searchState: {
        word: "",
        last: ""
      },
      _skipFocusEvent: false,
      valueDuringOnChange: {},
      _navigated: false,
      suggested: "",
      group: void 0,
      isScrolling: false,
      itemHeight: 0
    };
  },
  created: function created4() {
    this.valueDuringOnChange = void 0;
    this.currentText = void 0;
    this.currentValue = void 0;
    this.currentFocused = void 0;
    this.currentOpened = void 0;
    this.prevCurrentValue = this.computedValue();
    this.base = new DropDownBase_default(this);
    this.anchor = guid();
    this.inputId = guid();
  },
  // @ts-ignore
  setup: !isV316 ? void 0 : function() {
    var v3 = !!isV316;
    var inputRef = ref6(null);
    var elementRef = ref6(null);
    var kendoAnchorRef = ref6(null);
    var kendoLocalizationService = inject3("kendoLocalizationService", {});
    return {
      v3,
      inputRef,
      elementRef,
      kendoAnchorRef,
      kendoLocalizationService
    };
  },
  mounted: function mounted6() {
    this.hasMounted = true;
    this.input = this.v3 ? this.inputRef.input : this.$refs.input.input;
    this.base.wrapper = getRef(this, "kendoAnchor", this.anchor);
    this.element = getRef(this, "kendoAnchor", this.anchor);
    this.base.didMount();
    this.setValidity();
  },
  updated: function updated3() {
    var _a2;
    var _b = this.$props, _c = _b.dataItems, dataItems2 = _c === void 0 ? [] : _c, dataItemKey = _b.dataItemKey, virtual4 = _b.virtual, groupField = _b.groupField, textField = _b.textField;
    var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
    var prevOpened = this.prevOpened !== void 0 ? this.prevOpened : this.prevCurrentOpened;
    var opening = !prevOpened && opened5;
    var closing = prevOpened && !opened5;
    var list = this.$refs.list;
    var scrollElement = this.$refs.scrollElement;
    var selectedItem = this.computedValue();
    this.valueOnDidUpdate = selectedItem;
    if (list) {
      this.base.vs.list = list.list;
      this.base.list = list.list;
    }
    if (scrollElement) {
      this.base.vs.scrollElement = scrollElement;
    }
    if (list && dataItems2.length) {
      this.base.vs.scrollerRef(list.$el);
    }
    if (virtual4 && this.virtualTotalHasChanged) {
      this.base.vs.calcScrollElementHeight();
      this.base.vs.reset();
      this.virtualTotalHasChanged = false;
    } else {
      var prevSelectedItem = this.prevCurrentValue;
      var selectedItemIndex = dataItems2.findIndex(function(i) {
        return areSame(i, selectedItem, dataItemKey);
      });
      if (groupField) {
        selectedItemIndex = (_a2 = this.base.getGroupedDataModernMode(dataItems2, groupField)) === null || _a2 === void 0 ? void 0 : _a2.indexOf(selectedItem);
      }
      var selectedItemChanged = !areSame(prevSelectedItem, selectedItem, dataItemKey);
      if (opening && virtual4) {
        this.base.scrollToVirtualItem(virtual4, selectedItemIndex);
        this.prevCurrentOpened = true;
      } else if (opening && !virtual4) {
        if (dataItems2 && dataItems2.length !== 0) {
          this.base.resetGroupStickyHeader(dataItems2[0][groupField], this);
        }
        this.base.scrollToItem(selectedItemIndex);
        this.prevCurrentOpened = true;
      } else if (opened5 && prevOpened && selectedItem && selectedItemChanged) {
        this.base.scrollToItem(selectedItemIndex);
      } else if (opened5 && !selectedItem && !this.isScrolling) {
        var groupHeadersBeforeFocus = 0;
        if (groupField && this.getFocusedIndex() !== -1 && dataItems2.length > 0) {
          var focusedElemBeforeGrouping_1 = dataItems2[this.getFocusedIndex()][textField];
          var gropedDataItems = this.base.getGroupedDataModernMode(dataItems2, groupField);
          var groupedDataIdex = gropedDataItems.findIndex(function(el) {
            return el[textField] === focusedElemBeforeGrouping_1;
          });
          groupHeadersBeforeFocus = gropedDataItems.slice(0, groupedDataIdex).filter(function(el) {
            return Object.keys(el).length === 1;
          }).length;
        }
        this.base.scrollToItem(this.getFocusedIndex() + groupHeadersBeforeFocus);
      }
    }
    if (opening && this.input) {
      this.input.focus();
    }
    this.prevCurrentValue = this.computedValue();
    this.setValidity();
  },
  watch: {
    currentOpened: function currentOpened2(_, oldValue) {
      this.prevCurrentOpened = oldValue;
    },
    opened: function opened2(_, oldValue) {
      this.prevOpened = oldValue;
    },
    virtual: function virtual2(newValue, oldValue) {
      if (newValue && oldValue && newValue.total !== oldValue.total) {
        this.virtualTotalHasChanged = true;
      }
      this.virtualHasChanged = true;
    }
  },
  computed: {
    index: {
      get: function get4() {
        var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey;
        var value2 = this.computedValue();
        return dataItems2.findIndex(function(i) {
          return areSame(i, value2, dataItemKey);
        });
      }
    },
    spanClassNames: {
      get: function get5() {
        var isValid = !this.hasMounted || !this.$props.validityStyles || this.validity().valid;
        return {
          "k-floating-label-container": true,
          "k-focus": this.currentFocused,
          "k-empty": !this.computedValue(),
          "k-invalid": !isValid && isValid !== void 0,
          "k-rtl": this.$props.dir === "rtl"
        };
      }
    }
  },
  methods: {
    focus: function focus2() {
      if (this.input) {
        this.input.focus();
      }
    },
    computedValue: function computedValue2() {
      var value2;
      if (this.valueDuringOnChange !== void 0) {
        value2 = this.valueDuringOnChange;
      } else if (this.$props.value !== void 0) {
        value2 = this.$props.value;
      } else if (this.$props.modelValue !== void 0) {
        value2 = this.$props.modelValue;
      } else if (this.currentValue !== void 0) {
        value2 = this.currentValue;
      } else if (this.$props.defaultValue !== void 0) {
        value2 = this.$props.defaultValue;
      }
      return this.valuePrimitive ? this.findByFieldValue(this.valueField, value2) || value2 : value2;
    },
    findByFieldValue: function findByFieldValue2(field, value2) {
      var index = this.dataItems.findIndex(function(i) {
        return getItemValue(i, field) === value2;
      });
      return this.dataItems[index];
    },
    primitiveValue: function primitiveValue2() {
      var value2 = this.computedValue();
      return this.valuePrimitive ? getItemValue(value2, this.valueField) : value2;
    },
    validity: function validity2() {
      var customError = this.$props.validationMessage !== void 0;
      var isValid = !this.$props.required || this.computedValue() !== null && this.computedValue() !== "" && this.computedValue() !== void 0;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        valid,
        valueMissing: this.computedValue() === null
      };
    },
    handleItemSelect: function handleItemSelect2(index, state) {
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, virtual4 = _a2.virtual, dataItemKey = _a2.dataItemKey;
      var skip = virtual4 ? virtual4.skip : 0;
      var item2 = dataItems2[index - skip];
      var newSelected = !areSame(item2, this.computedValue(), dataItemKey);
      this.triggerOnChange(item2, state);
      if (this.currentText !== void 0) {
        state.data.currentText = void 0;
      }
      if (newSelected) {
        this.base.triggerPageChangeCornerItems(item2, state);
      }
    },
    onNavigate: function onNavigate2(state, keyCode) {
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, _c = _a2.virtual, virtual4 = _c === void 0 ? {
        skip: 0
      } : _c;
      var text = this.$props.filter ? this.$props.filter : this.currentText;
      var focusedIndex3 = this.getFocusedIndex();
      var vs = this.base.vs;
      var value2 = this.computedValue();
      this.suggested = "";
      if (focusedIndex3 !== -1 && !isPresent(value2)) {
        this.handleItemSelect(focusedIndex3, state);
      } else if (text === "") {
        this.handleItemSelect(0, state);
      } else {
        var currentIndex = virtual4.skip + focusedIndex3;
        var newIndex = this.base.navigation.navigate({
          keyCode,
          current: currentIndex,
          max: (vs.enabled ? vs.total : dataItems2.length) - 1,
          min: 0
        });
        if (newIndex !== void 0) {
          this.handleItemSelect(newIndex, state);
        }
      }
    },
    toggleBtnClick: function toggleBtnClick(event) {
      var state = this.base.initState();
      state.event = event;
      this.base.togglePopup(state);
      this.applyState(state);
    },
    applyValueOnEnter: function applyValueOnEnter(value2, state) {
      var _a2;
      var _b = this.$props, _c = _b.dataItems, dataItems2 = _c === void 0 ? [] : _c, textField = _b.textField, allowCustom = _b.allowCustom;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var currentValueText2 = getItemValue(this.computedValue(), textField);
      var valueIndex = currentValueText2 === value2 ? this.index : getItemIndexByText(dataItems2, value2, textField);
      var itemSelected = valueIndex !== -1;
      var newSelected = void 0;
      this.suggested = "";
      if (itemSelected) {
        newSelected = dataItems2[valueIndex];
      } else {
        if (allowCustom) {
          newSelected = textField !== void 0 ? (_a2 = {}, _a2[textField] = value2, _a2) : value2;
        } else {
          return this.selectFocusedItem(value2, state);
        }
      }
      this.triggerOnChange(newSelected, state);
      if (opened5) {
        this.base.togglePopup(state);
      }
      if (this.$props.filter === void 0 && this.currentText !== void 0) {
        state.data.currentText = void 0;
      }
      this.applyState(state);
    },
    applyValueOnRejectSuggestions: function applyValueOnRejectSuggestions(text, state) {
      var _a2;
      var _b = this.$props, _c = _b.dataItems, dataItems2 = _c === void 0 ? [] : _c, textField = _b.textField, allowCustom = _b.allowCustom;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var valueItemText = getItemValue(this.computedValue(), textField);
      this.suggested = "";
      if (text === valueItemText || text === "" && !isPresent(valueItemText)) {
        if (opened5) {
          this.base.togglePopup(state);
        }
        return this.applyState(state);
      }
      var valueIndex = getItemIndexByText(dataItems2, text, textField, true);
      var itemSelected = valueIndex !== -1;
      var newSelected = null;
      if (itemSelected) {
        newSelected = dataItems2[valueIndex];
      } else if (allowCustom) {
        newSelected = text ? textField ? (_a2 = {}, _a2[textField] = text, _a2) : text : null;
      }
      this.triggerOnChange(newSelected, state);
      if (this.currentText !== void 0) {
        state.data.currentText = void 0;
        this.base.filterChanged("", state);
      }
      if (opened5) {
        this.base.togglePopup(state);
      }
      this.applyState(state);
    },
    selectFocusedItem: function selectFocusedItem(text, state) {
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, textField = _a2.textField, _c = _a2.virtual, virtual4 = _c === void 0 ? {
        skip: 0
      } : _c, _d = _a2.focusedItemIndex, focusedItemIndex = _d === void 0 ? itemIndexStartsWith : _d;
      var skip = virtual4.skip;
      var focusedIndex3 = text === "" && skip === 0 ? 0 : focusedItemIndex(dataItems2, text, textField);
      if (focusedIndex3 !== -1) {
        this.handleItemSelect(focusedIndex3 + skip, state);
      } else {
        this.triggerOnChange(null, state);
        if (this.currentText !== void 0) {
          state.data.currentText = void 0;
        }
      }
      if (opened5) {
        this.base.togglePopup(state);
      }
      return this.applyState(state);
    },
    handleItemClick: function handleItemClick2(index, event) {
      this.base.handleItemClick(index, event);
      this.valueDuringOnChange = void 0;
    },
    handleFocus: function handleFocus3(event) {
      this.$emit("focus", event);
    },
    handleBlur: function handleBlur3(event) {
      if (this.currentFocused) {
        var state = this.base.initState();
        state.data.currentFocused = false;
        state.events.push({
          type: "blur"
        });
        state.event = event;
        this.applyValueOnRejectSuggestions(event.currentTarget.value, state);
      }
    },
    onInputKeyDown: function onInputKeyDown(event) {
      var _this = this;
      if (this.isScrolling) {
        this.isScrolling = false;
      }
      var keyCode = event.keyCode;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var state = this.base.initState();
      state.event = event;
      if (!event.altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
        event.preventDefault();
        this.onNavigate(state, keyCode);
        this.applyState(state);
        return;
      }
      var togglePopup2 = function togglePopup3() {
        event.preventDefault();
        _this.base.togglePopup(state);
        _this.applyState(state);
      };
      if (opened5) {
        if (event.altKey && keyCode === Keys.up) {
          togglePopup2();
        } else if (keyCode === Keys.enter) {
          event.preventDefault();
          this.applyValueOnEnter(event.currentTarget.value, state);
        } else if (keyCode === Keys.esc) {
          togglePopup2();
        }
      } else {
        if (event.altKey && keyCode === Keys.down) {
          togglePopup2();
        } else if (keyCode === Keys.esc) {
          this.applyValueOnRejectSuggestions(event.currentTarget.value, state);
        }
      }
    },
    inputOnChange: function inputOnChange(event) {
      var state = this.base.initState();
      state.event = event;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var input = event.currentTarget;
      var value2 = input.value;
      if (this.$props.suggest) {
        var selectionAtEnd = input.selectionEnd === value2.length;
        var prevText = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
        if (!isPresent(prevText)) {
          prevText = getItemValue(this.computedValue(), this.$props.textField) || "";
        }
        var deletedSuggestion = prevText && prevText === value2;
        var deleting = prevText && prevText.length > value2.length;
        if (deletedSuggestion || deleting || !selectionAtEnd) {
          this.suggested = "";
        } else {
          this.suggestValue(value2);
        }
      }
      if (this.$props.filter === void 0) {
        state.data.currentText = value2;
      }
      if (this.currentFocusedItem !== void 0) {
        state.data.focusedItem = void 0;
      }
      if (!opened5) {
        this.base.togglePopup(state);
      }
      this.base.filterChanged(value2, state);
      if (this.$props.filterable) {
        state.data.group = void 0;
      }
      this.applyState(state);
    },
    clearButtonClick: function clearButtonClick2(event) {
      var state = this.base.initState();
      state.event = event;
      event.stopPropagation();
      this.suggested = "";
      this.base.filterChanged("", state);
      if (this.$props.filter === void 0 && this.currentText !== void 0) {
        state.data.currentText = void 0;
      }
      this.triggerOnChange(null, state);
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      if (opened5) {
        this.base.togglePopup(state);
      }
      this.applyState(state);
    },
    getFocusedIndex: function getFocusedIndex() {
      var value2 = this.computedValue();
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, textField = _a2.textField, dataItemKey = _a2.dataItemKey, _c = _a2.virtual, virtual4 = _c === void 0 ? {
        skip: 0
      } : _c, _d = _a2.focusedItemIndex, focusedItemIndex = _d === void 0 ? itemIndexStartsWith : _d;
      var text = this.$props.filter ? this.$props.filter : this.currentText;
      if (isPresent(value2) && text === void 0) {
        return dataItems2.findIndex(function(i) {
          return areSame(i, value2, dataItemKey);
        });
      } else if (text) {
        return focusedItemIndex(dataItems2, text, textField);
      } else {
        return virtual4.skip === 0 ? 0 : -1;
      }
    },
    suggestValue: function suggestValue2(value2) {
      var _a2 = this.$props, dataItems2 = _a2.dataItems, textField = _a2.textField;
      this.suggested = suggestValue(value2, dataItems2, textField);
    },
    setValidity: function setValidity2() {
      if (this.input && this.input.setCustomValidity) {
        this.input.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage || VALIDATION_MESSAGE2);
      }
    },
    triggerOnChange: function triggerOnChange2(item2, state) {
      var value2 = this.computedValue();
      if (!isPresent(value2) && !isPresent(item2) || areSame(value2, item2, this.$props.dataItemKey)) {
        return;
      }
      if (this.$props.value === void 0) {
        this.currentValue = item2;
      }
      this.valueDuringOnChange = item2;
      state.events.push({
        type: "change"
      });
    },
    applyState: function applyState2(state) {
      this.base.applyState(state);
      this.valueDuringOnChange = void 0;
    },
    repositionPopup: function repositionPopup2() {
      this.base.repositionPopup();
    },
    onScroll: function onScroll2(event) {
      this.isScrolling = true;
      var _a2 = this.base, vs = _a2.vs, list = _a2.list;
      vs.scrollHandler(event);
      var state = this.base.initState();
      var groupField = this.$props.groupField;
      var _b = this.$props.dataItems, dataItems2 = _b === void 0 ? [] : _b;
      if (!groupField || !dataItems2.length) {
        return;
      }
      var itemHeight = this.itemHeight = this.itemHeight || (vs.enabled ? vs.itemHeight : list ? list.children[0].offsetHeight : 0);
      var target = event.target;
      var scrollTop = target.scrollTop - vs.skip * itemHeight;
      if (groupField) {
        dataItems2 = this.base.getGroupedDataModernMode(dataItems2, groupField);
      }
      var group = dataItems2[0][groupField];
      for (var i = 1; i < dataItems2.length; i++) {
        if (itemHeight * i > scrollTop) {
          break;
        }
        if (dataItems2[i] && dataItems2[i][groupField]) {
          group = dataItems2[i][groupField];
        }
      }
      if (group !== this.group) {
        state.data.group = group;
        this.applyState(state);
      }
    }
  },
  render: function render15(createElement) {
    var _a2;
    var h = gh15 || createElement;
    var _b = this.$props, dir = _b.dir, disabled = _b.disabled, clearButton = _b.clearButton, label = _b.label, textField = _b.textField, className = _b.className, style = _b.style, loading = _b.loading, icon = _b.icon, svgIcon = _b.svgIcon, iconClassName = _b.iconClassName, virtual4 = _b.virtual, size = _b.size, fillMode = _b.fillMode, rounded = _b.rounded;
    var focused = this.currentFocused;
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var text = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
    var selectedItemText = getItemValue(this.computedValue(), textField);
    var inputText = isPresent(text) ? text : selectedItemText;
    var renderClearButton = clearButton && (!!inputText || isPresent(this.computedValue()));
    var base = this.base;
    var vs = base.vs;
    var id = this.$props.id || this.inputId;
    var popupSettings = Object.assign({}, {
      animate: true,
      height: "200px"
    }, this.$props.popupSettings);
    var ariaLabelExpandButton = provideLocalizationService(this).toLanguageString(expandButton, messages[expandButton]);
    vs.enabled = virtual4 !== void 0;
    if (virtual4 !== void 0) {
      vs.skip = virtual4.skip;
      vs.total = virtual4.total;
      vs.pageSize = virtual4.pageSize;
    }
    var renderList = function renderList2() {
      var _this2 = this;
      var _a3;
      var _b2 = this.$props, dataItemKey = _b2.dataItemKey, groupField = _b2.groupField;
      var dataItems2 = this.$props.dataItems || [];
      var itemRender = templateRendering.call(this, this.$props.itemRender, getListeners.call(this));
      var groupHeaderItemRender = templateRendering.call(this, this.$props.groupHeaderItemRender, getListeners.call(this));
      var listNoDataRender = templateRendering.call(this, this.$props.listNoDataRender, getListeners.call(this));
      if (!virtual4) {
        virtual4 = {
          skip: 0
        };
      }
      var skip = virtual4.skip;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var translate = "translateY(".concat(vs.translate, "px)");
      var focusedIndex3 = opened5 ? this.getFocusedIndex() : void 0;
      var value2 = isPresent(text) && text !== selectedItemText ? null : this.computedValue();
      if (groupField) {
        dataItems2 = this.base.getGroupedDataModernMode(dataItems2, groupField);
      }
      return (
        // @ts-ignore  function children
        h(List, {
          id: base.listBoxId,
          attrs: this.v3 ? void 0 : {
            id: base.listBoxId,
            show: opened5,
            dataItems: dataItems2,
            focusedIndex: focusedIndex3,
            value: value2,
            textField,
            valueField: dataItemKey,
            optionsGuid: base.guid,
            wrapperStyle: {
              maxHeight: popupSettings.height
            },
            wrapperCssClass: classNames("k-list-content", (_a3 = {}, _a3["k-list-scroller"] = !this.$props.virtual, _a3)),
            listStyle: vs.enabled ? {
              transform: translate
            } : void 0,
            skip,
            itemRender,
            groupHeaderItemRender,
            noDataRender: listNoDataRender,
            groupField
          },
          show: opened5,
          dataItems: dataItems2,
          focusedIndex: focusedIndex3,
          value: value2,
          textField,
          valueField: dataItemKey,
          optionsGuid: base.guid,
          ref: "list",
          wrapperStyle: {
            maxHeight: popupSettings.height
          },
          wrapperCssClass: classNames("k-list-content", (_a3 = {}, _a3["k-list-scroller"] = !this.$props.virtual, _a3)),
          listStyle: vs.enabled ? {
            transform: translate
          } : void 0,
          key: "listkey",
          skip,
          onListclick: this.handleItemClick,
          on: this.v3 ? void 0 : {
            "listclick": this.handleItemClick,
            "scroll": this.onScroll
          },
          itemRender,
          groupHeaderItemRender,
          noDataRender: listNoDataRender,
          groupField,
          onScroll: this.onScroll
        }, this.v3 ? function() {
          return [renderScrollElement.call(_this2)];
        } : [renderScrollElement.call(_this2)])
      );
    };
    var renderScrollElement = function renderScrollElement2() {
      return vs.enabled && h("div", {
        ref: "scrollElement",
        key: "scrollElementKey"
      });
    };
    var renderListContainer = function renderListContainer2() {
      var _this3 = this;
      var _a3;
      var headerTemplate = templateRendering.call(this, this.$props.header, getListeners.call(this));
      var footerTemplate = templateRendering.call(this, this.$props.footer, getListeners.call(this));
      var groupStickyHeaderTemplate = templateRendering.call(this, this.$props.groupStickyHeaderItemRender, getListeners.call(this));
      var header = getTemplate.call(this, {
        h,
        template: headerTemplate
      });
      var footer = getTemplate.call(this, {
        h,
        template: footerTemplate
      });
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var popupWidth = popupSettings.width !== void 0 ? popupSettings.width : base.popupWidth;
      var dataItems2 = this.$props.dataItems || [];
      if (this.group === void 0 && this.$props.groupField !== void 0) {
        this.group = getItemValue(dataItems2[0], this.$props.groupField);
      }
      return (
        // @ts-ignore  function children
        h(ListContainer, {
          ref: "container",
          onMousedown: function onMousedown(e) {
            return e.preventDefault();
          },
          on: this.v3 ? void 0 : {
            "mousedown": function onMousedown(e) {
              return e.preventDefault();
            }
          },
          width: popupWidth,
          attrs: this.v3 ? void 0 : {
            width: popupWidth,
            popupSettings: __assign10(__assign10({}, popupSettings), {
              anchor: this.anchor,
              show: opened5,
              popupClass: classNames(popupSettings.popupClass, "k-list", (_a3 = {}, _a3["k-list-".concat(sizeMap3[size] || size)] = size, _a3["k-virtual-list"] = this.base.vs.enabled, _a3)),
              className: classNames("k-list-container", popupSettings.className)
            }),
            dir: dir !== void 0 ? dir : this.base.dirCalculated
          },
          popupSettings: __assign10(__assign10({}, popupSettings), {
            anchor: this.anchor,
            show: opened5,
            popupClass: classNames(popupSettings.popupClass, "k-list", (_a3 = {}, _a3["k-list-".concat(sizeMap3[size] || size)] = size, _a3["k-virtual-list"] = this.base.vs.enabled, _a3)),
            className: classNames("k-list-container", popupSettings.className)
          }),
          dir: dir !== void 0 ? dir : this.base.dirCalculated
        }, this.v3 ? function() {
          return [header && h("div", {
            "class": "k-list-header"
          }, [header]), _this3.group && dataItems2.length !== 0 && h(GroupStickyHeader, {
            group: _this3.group,
            attrs: _this3.v3 ? void 0 : {
              group: _this3.group,
              render: groupStickyHeaderTemplate
            },
            render: groupStickyHeaderTemplate
          }), renderList.call(_this3), footer && h("div", {
            "class": "k-list-footer"
          }, [footer])];
        } : [header && h("div", {
          "class": "k-list-header"
        }, [header]), _this3.group && dataItems2.length !== 0 && h(GroupStickyHeader, {
          group: _this3.group,
          attrs: _this3.v3 ? void 0 : {
            group: _this3.group,
            render: groupStickyHeaderTemplate
          },
          render: groupStickyHeaderTemplate
        }), renderList.call(_this3), footer && h("div", {
          "class": "k-list-footer"
        }, [footer])])
      );
    };
    var renderSearchBar = function renderSearchBar2(searchText, searchId) {
      var _this = this;
      var _a3 = this.$props, placeholder = _a3.placeholder, tabIndex = _a3.tabIndex, _b2 = _a3.dataItems, dataItems2 = _b2 === void 0 ? [] : _b2, dataItemKey = _a3.dataItemKey;
      if (!virtual4) {
        virtual4 = {
          skip: 0
        };
      }
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var value2 = this.computedValue();
      var selectedIndex = Math.max(0, dataItems2.findIndex(function(i) {
        return areSame(i, value2, dataItemKey);
      }));
      if (this.suggested && !areSame(this.valueOnDidUpdate, value2, dataItemKey)) {
        this.suggested = "";
      }
      return (
        // @ts-ignore  function children
        h(SearchBar, {
          id: searchId,
          attrs: this.v3 ? void 0 : {
            id: searchId,
            placeholder,
            tabIndex: tabIndex || void 0,
            accessKey: this.$props.accessKey,
            value: searchText + this.suggested,
            suggestedText: this.suggested,
            disabled,
            expanded: opened5,
            owns: this.base.listBoxId,
            activedescendant: this.base.guid + "-" + (selectedIndex + virtual4.skip),
            ariaLabelledBy: this.$props.ariaLabelledBy,
            ariaDescribedBy: this.$props.ariaDescribedBy,
            ariaLabel: this.$props.ariaLabel
          },
          placeholder,
          tabIndex: tabIndex || void 0,
          accessKey: this.$props.accessKey,
          value: searchText + this.suggested,
          suggestedText: this.suggested,
          ref: this.v3 ? function(el) {
            _this.inputRef = el;
          } : "input",
          onKeydown: this.onInputKeyDown,
          on: this.v3 ? void 0 : {
            "keydown": this.onInputKeyDown,
            "change": this.inputOnChange,
            "focus": this.base.handleFocus,
            "blur": this.handleBlur
          },
          onChange: this.inputOnChange,
          onFocus: this.base.handleFocus,
          onBlur: this.handleBlur,
          disabled,
          expanded: opened5,
          owns: this.base.listBoxId,
          activedescendant: this.base.guid + "-" + (selectedIndex + virtual4.skip),
          ariaLabelledBy: this.$props.ariaLabelledBy,
          ariaDescribedBy: this.$props.ariaDescribedBy,
          ariaLabel: this.$props.ariaLabel
        })
      );
    };
    var combobox = h("span", {
      "class": classNames("k-combobox k-input", (_a2 = {}, _a2["k-input-".concat(sizeMap3[size] || size)] = size, _a2["k-rounded-".concat(roundedMap3[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2["k-invalid"] = !isValid, _a2["k-loading"] = loading, _a2["k-required"] = this.required, _a2["k-disabled"] = disabled, _a2["k-focus"] = focused && !disabled, _a2), className),
      ref: setRef(this, "kendoAnchor", this.anchor),
      style: !label ? style : __assign10(__assign10({}, style), {
        width: void 0
      }),
      dir,
      attrs: this.v3 ? void 0 : {
        dir
      }
    }, [
      renderSearchBar.call(this, inputText || "", id),
      renderClearButton && !loading && // @ts-ignore  function children
      h(ClearButton, {
        onClearclick: this.clearButtonClick,
        on: this.v3 ? void 0 : {
          "clearclick": this.clearButtonClick
        },
        key: "clearbutton"
      }),
      loading && h(Icon, {
        name: "loading",
        attrs: this.v3 ? void 0 : {
          name: "loading"
        },
        "class": "k-input-loading-icon",
        key: "loading"
      }),
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          "aria-label": ariaLabelExpandButton,
          size,
          fillMode,
          rounded: null,
          icon: icon || "caret-alt-down",
          svgIcon: svgIcon || caretAltDownIcon,
          iconClass: iconClassName
        },
        tabIndex: -1,
        "aria-label": ariaLabelExpandButton,
        size,
        fillMode,
        rounded: null,
        "class": "k-input-button",
        icon: icon || "caret-alt-down",
        svgIcon: svgIcon || caretAltDownIcon,
        iconClass: iconClassName,
        onClick: this.toggleBtnClick,
        on: this.v3 ? void 0 : {
          "click": this.toggleBtnClick,
          "mousedown": function mousedown(e) {
            return e.preventDefault();
          }
        },
        onMousedown: function mousedown(e) {
          return e.preventDefault();
        }
      }),
      renderListContainer.call(this)
    ]);
    return label ? h("span", {
      "class": this.spanClassNames,
      onFocusin: this.handleFocus,
      on: this.v3 ? void 0 : {
        "focusin": this.handleFocus
      },
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      }
    }, [combobox, this.$props.label ? id ? h("label", {
      "for": id,
      attrs: this.v3 ? void 0 : {
        "for": id
      },
      "class": "k-label"
    }, [this.$props.label]) : h("span", {
      "class": "k-label"
    }, [this.$props.label]) : null]) : combobox;
  }
};
var ComboBox = ComboBoxVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/AutoComplete/AutoComplete.js
var __assign11 = function() {
  __assign11 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign11.apply(this, arguments);
};
var allVue17 = vue_runtime_esm_bundler_exports;
var gh16 = allVue17.h;
var isV317 = allVue17.version && allVue17.version[0] === "3";
var ref7 = allVue17.ref;
var sizeMap4 = kendoThemeMaps.sizeMap;
var roundedMap4 = kendoThemeMaps.roundedMap;
var VALIDATION_MESSAGE3 = "Please enter a valid value!";
var AutoCompleteVue2 = {
  name: "KendoAutoComplete",
  model: {
    event: "changemodel"
  },
  props: {
    id: String,
    defaultValue: {
      type: [String],
      default: void 0
    },
    name: String,
    modelValue: {
      type: [String],
      default: void 0
    },
    value: {
      type: [String],
      default: void 0
    },
    label: {
      type: String
    },
    placeholder: String,
    required: {
      type: Boolean,
      default: false
    },
    valid: {
      type: Boolean,
      default: void 0
    },
    validationMessage: {
      type: String,
      default: void 0
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    opened: {
      type: Boolean,
      default: void 0
    },
    disabled: Boolean,
    dir: {
      type: String,
      default: void 0
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    readonly: Boolean,
    accessKey: String,
    dataItems: Array,
    textField: String,
    loading: Boolean,
    popupSettings: {
      type: Object,
      default: function _default4() {
        return {
          animate: true,
          height: "200px"
        };
      }
    },
    itemRender: [String, Function, Object],
    groupHeaderItemRender: [String, Function, Object],
    groupStickyHeaderItemRender: [String, Function, Object],
    listNoDataRender: [String, Function, Object],
    focusedItemIndex: Function,
    header: [String, Function, Object],
    footer: [String, Function, Object],
    suggest: {
      type: [Boolean, String],
      default: false
    },
    ariaLabel: {
      type: String,
      default: void 0
    },
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    rounded: {
      type: String,
      default: "medium",
      validator: function validator10(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator11(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator12(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    groupField: {
      type: String
    }
  },
  data: function data4() {
    return {
      hasMounted: false,
      currentText: "",
      currentValue: "",
      currentFocused: false,
      currentOpened: false,
      focusedItem: void 0,
      searchState: {
        word: "",
        last: ""
      },
      valueDuringOnChange: {},
      suggested: "",
      group: void 0,
      isScrolling: false,
      itemHeight: 0
    };
  },
  created: function created5() {
    this.valueDuringOnChange = void 0;
    this.currentText = void 0;
    this.currentValue = void 0;
    this.currentFocused = void 0;
    this.currentOpened = void 0;
    this.base = new DropDownBase_default(this);
    this.anchor = guid();
    this.inputId = guid();
  },
  // @ts-ignore
  setup: !isV317 ? void 0 : function() {
    var v3 = !!isV317;
    var inputRef = ref7(null);
    var kendoAnchorRef = ref7(null);
    return {
      v3,
      inputRef,
      kendoAnchorRef
    };
  },
  mounted: function mounted7() {
    this.hasMounted = true;
    this.input = this.v3 ? this.inputRef.input : this.$refs.input.input;
    this.base.wrapper = getRef(this, "kendoAnchor", this.anchor);
    this.element = getRef(this, "kendoAnchor", this.anchor);
    this.base.didMount();
    this.setValidity();
  },
  watch: {
    currentOpened: function currentOpened3(_, oldValue) {
      this.prevCurrentOpened = oldValue;
    },
    opened: function opened3(_, oldValue) {
      this.prevOpened = oldValue;
    },
    dataItems: function dataItems(_, oldValue) {
      this.prevData = oldValue;
    },
    focusedItem: function focusedItem(_, oldValue) {
      this.prevFocusedItem = oldValue;
    }
  },
  updated: function updated4() {
    var _a2;
    var _b = this.$props, _c = _b.groupField, groupField = _c === void 0 ? "" : _c, _d = _b.dataItems, dataItems2 = _d === void 0 ? [] : _d;
    var focusedIndex3 = this.focusedIndex();
    var focusedItem2 = dataItems2[focusedIndex3];
    var dataChanged = this.prevData !== dataItems2;
    var focusedItemChanged = focusedItem2 !== void 0 && this.prevFocusedItem !== focusedItem2;
    var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
    var prevOpened = this.prevOpened !== void 0 ? this.prevOpened : this.prevCurrentOpened;
    var opening = !prevOpened && opened5;
    var list = this.$refs.list;
    if (list) {
      this.base.vs.list = list.list;
      this.base.list = list.list;
    }
    if (groupField === "") {
      if (opened5 && (focusedItemChanged || dataChanged) || opening) {
        this.base.scrollToItem(focusedIndex3);
      }
    } else if (!this.isScrolling) {
      var focusedItemIndex = (_a2 = this.base.getGroupedDataModernMode(dataItems2, groupField)) === null || _a2 === void 0 ? void 0 : _a2.indexOf(focusedItem2);
      if (opening) {
        if (dataItems2 && dataItems2.length !== 0) {
          this.base.resetGroupStickyHeader(dataItems2[0][groupField], this);
        }
        this.base.scrollToItem(focusedItemIndex);
      }
      if (opened5 && prevOpened && focusedItemChanged) {
        this.base.scrollToItem(focusedItemIndex);
      }
    }
    this.setValidity();
  },
  computed: {
    spanClassNames: {
      get: function get6() {
        var isValid = !this.hasMounted || !this.$props.validityStyles || this.validity().valid;
        return {
          "k-floating-label-container": true,
          "k-focus": this.currentFocused,
          "k-empty": !this.computedValue(),
          "k-invalid": !isValid && isValid !== void 0,
          "k-rtl": this.$props.dir === "rtl"
        };
      }
    }
  },
  methods: {
    focus: function focus3() {
      if (this.input) {
        this.input.focus();
      }
    },
    computedValue: function computedValue3() {
      var value2;
      if (this.valueDuringOnChange !== void 0) {
        value2 = this.valueDuringOnChange;
      } else if (this.$props.value !== void 0) {
        value2 = this.$props.value;
      } else if (this.$props.modelValue !== void 0) {
        value2 = this.$props.modelValue;
      } else if (this.currentValue !== void 0) {
        value2 = this.currentValue;
      } else if (this.$props.defaultValue !== void 0) {
        value2 = this.$props.defaultValue;
      }
      return value2;
    },
    primitiveValue: function primitiveValue3() {
      var value2 = this.computedValue();
      return this.valuePrimitive ? getItemValue(value2, this.valueField) : value2;
    },
    validity: function validity3() {
      var customError = this.$props.validationMessage !== void 0;
      var isValid = !this.$props.required || this.computedValue() !== null && this.computedValue() !== "" && this.computedValue() !== void 0;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        valid,
        valueMissing: this.computedValue() === null
      };
    },
    handleItemSelect: function handleItemSelect3(index, state) {
      var _a2 = this.$props.dataItems, dataItems2 = _a2 === void 0 ? [] : _a2;
      var item2 = dataItems2[index];
      var newText = getItemValue(item2, this.$props.textField);
      this.triggerOnChange(newText, state, {
        item: item2
      });
      this.triggerOnSelect(state, {
        item: item2
      });
    },
    itemFocus: function itemFocus(index, state) {
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, textField = _a2.textField;
      var focusedItem2 = dataItems2[index];
      if (!areSame(this.$data.focusedItem, focusedItem2, textField)) {
        state.data.focusedItem = focusedItem2;
      }
    },
    togglePopup: function togglePopup(state) {
      this.base.togglePopup(state);
    },
    onNavigate: function onNavigate3(state, keyCode) {
      var _this = this;
      var typedText = this.computedValue();
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, textField = _a2.textField, focusedItemIndex = _a2.focusedItemIndex;
      var focusedIndex3 = this.$data.focusedItem !== void 0 ? dataItems2.findIndex(function(i) {
        return areSame(i, _this.$data.focusedItem, textField);
      }) : focusedItemIndex ? focusedItemIndex(dataItems2, typedText, textField) : dataItems2.indexOf(getFocusedItem(dataItems2, typedText, textField));
      var newFocused = this.base.navigation.navigate({
        keyCode,
        current: focusedIndex3,
        max: dataItems2.length - 1,
        min: 0
      });
      if (newFocused !== void 0) {
        this.itemFocus(newFocused, state);
      }
      this.applyState(state);
    },
    /**
     * @hidden
     */
    applyInputValue: function applyInputValue(value2, state, eventKey) {
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, textField = _a2.textField;
      this.suggested = "";
      if (opened5 && eventKey === Keys.enter) {
        var item2 = dataItems2[this.focusedIndex(value2)];
        var newValue = getItemValue(item2, textField);
        this.triggerOnChange(newValue, state, {
          item: item2
        });
        this.triggerOnSelect(state, {
          item: item2
        });
      }
      if (opened5) {
        this.togglePopup(state);
      }
      this.applyState(state);
    },
    setValidity: function setValidity3() {
      if (this.input && this.input.setCustomValidity) {
        this.input.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage || VALIDATION_MESSAGE3);
      }
    },
    handleItemClick: function handleItemClick3(index, event) {
      this.base.handleItemClick(index, event);
      this.valueDuringOnChange = void 0;
    },
    onChangeHandler: function onChangeHandler(event) {
      var base = this.base;
      var state = base.initState();
      var input = event.target;
      var value2 = input.value;
      var selectionAtEnd = input.selectionEnd === value2.length;
      state.event = event;
      var prevSuggestion = this.suggested;
      var prevValue = this.computedValue();
      var prevUserInput = prevValue && prevSuggestion && prevValue.substring(0, prevValue.length - prevSuggestion.length);
      var deletedSuggestion = prevUserInput && prevUserInput === value2;
      var deleting = prevUserInput && prevUserInput.length > value2.length;
      var suggest = this.$props.suggest;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      if (suggest !== void 0 && suggest !== false) {
        if (deletedSuggestion || deleting || !selectionAtEnd) {
          this.suggested = "";
        } else {
          this.suggestValue(value2);
        }
        var newValue = value2 + this.suggested;
        var suggestion = {
          userInput: value2,
          value: this.suggested
        };
        this.triggerOnChange(newValue, state, {
          suggestion
        });
      } else {
        this.suggested = "";
        this.triggerOnChange(value2, state);
      }
      if (!opened5 && value2 || opened5 && !value2) {
        this.togglePopup(state);
      }
      state.data.focusedItem = void 0;
      if (this.prevData && this.prevData.length !== this.$props.dataItems) {
        state.data.group = void 0;
      }
      this.applyState(state);
    },
    clearButtonClick: function clearButtonClick3(event) {
      var base = this.base;
      var state = base.initState();
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      state.event = event;
      var newValue = "";
      this.suggested = "";
      this.triggerOnChange(newValue, state);
      if (this.$data.focusedItem !== void 0) {
        state.data.focusedItem = void 0;
      }
      if (opened5) {
        this.togglePopup(state);
      }
      this.applyState(state);
    },
    onInputKeyDown: function onInputKeyDown2(event) {
      if (this.isScrolling) {
        this.isScrolling = false;
      }
      var keyCode = event.keyCode;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var state = this.base.initState();
      var value2 = this.computedValue();
      state.event = event;
      var preventDefault5 = function preventDefault6() {
        if (opened5) {
          event.preventDefault();
        }
      };
      if (keyCode === Keys.enter || opened5 && keyCode === Keys.esc || event.altKey && keyCode === Keys.up) {
        preventDefault5();
        this.applyInputValue(event.currentTarget.value, state, event.keyCode);
      } else if (!event.altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
        preventDefault5();
        this.onNavigate(state, keyCode);
      } else if (!opened5 && keyCode === Keys.esc) {
        this.clearButtonClick(event);
      } else if (!opened5 && value2 && event.altKey && keyCode === Keys.down) {
        this.togglePopup(state);
        this.applyState(state);
      }
    },
    handleBlur: function handleBlur4(event) {
      if (this.currentFocused) {
        var state = this.base.initState();
        state.data.focused = false;
        state.events.push({
          type: "blur"
        });
        state.event = event;
        this.applyInputValue(event.currentTarget.value, state);
        this.currentFocused = false;
      }
    },
    triggerOnChange: function triggerOnChange3(newValue, state, eventArgs) {
      if (this.computedValue() === newValue && !eventArgs) {
        return;
      }
      state.data.currentValue = newValue;
      this.valueDuringOnChange = newValue;
      state.events.push(__assign11({
        type: "change"
      }, eventArgs || {}));
    },
    triggerOnSelect: function triggerOnSelect(state, eventArgs) {
      state.events.push(__assign11({
        type: "select"
      }, eventArgs || {}));
    },
    applyState: function applyState3(state) {
      this.base.applyState(state);
      this.valueDuringOnChange = void 0;
    },
    suggestValue: function suggestValue3(value2) {
      this.suggested = "";
      if (value2) {
        var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, textField = _a2.textField;
        var suggestedItem = dataItems2[itemIndexStartsWith(dataItems2, value2, textField)];
        if (suggestedItem) {
          var suggestedText2 = getItemValue(suggestedItem, textField);
          if (value2.toLowerCase() !== suggestedText2.toLowerCase()) {
            this.suggested = suggestedText2.substring(value2.length);
          }
        }
      }
    },
    focusedIndex: function focusedIndex2(value2) {
      var _this = this;
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, textField = _a2.textField, focusedItemIndex = _a2.focusedItemIndex;
      var inputValue = value2 !== void 0 ? value2 : this.computedValue();
      return this.$data.focusedItem !== void 0 ? dataItems2.findIndex(function(i) {
        return areSame(i, _this.$data.focusedItem, textField);
      }) : focusedItemIndex ? focusedItemIndex(dataItems2, inputValue, textField) : Math.max(0, dataItems2.indexOf(getFocusedItem(dataItems2, inputValue, textField)));
    },
    repositionPopup: function repositionPopup3() {
      this.base.repositionPopup();
    },
    onScroll: function onScroll3(event) {
      this.isScrolling = true;
      var state = this.base.initState();
      var list = this.base.list;
      var groupField = this.$props.groupField;
      var _a2 = this.$props.dataItems, dataItems2 = _a2 === void 0 ? [] : _a2;
      if (!groupField || !dataItems2.length) {
        return;
      }
      var itemHeight = this.itemHeight || (list.children ? list.children[0].offsetHeight : 0);
      var target = event.target;
      var scrollTop = target.scrollTop;
      if (groupField) {
        dataItems2 = this.base.getGroupedDataModernMode(dataItems2, groupField);
      }
      var group = dataItems2[0][groupField];
      if (itemHeight === 0) {
        itemHeight = 28;
      }
      for (var i = 1; i < dataItems2.length; i++) {
        if (itemHeight * i > scrollTop) {
          break;
        }
        if (dataItems2[i] && dataItems2[i][groupField]) {
          group = dataItems2[i][groupField];
        }
      }
      if (group !== this.group) {
        state.data.group = group;
        this.applyState(state);
      }
    }
  },
  render: function render16(createElement) {
    var _a2;
    var h = gh16 || createElement;
    var _b = this.$props, dir = _b.dir, disabled = _b.disabled, label = _b.label, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode, style = _b.style, loading = _b.loading, suggest = _b.suggest;
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var focused = this.currentFocused;
    var base = this.base;
    var value2 = this.computedValue();
    var clearButton = !loading && !!value2;
    var id = this.$props.id || this.inputId;
    var popupSettings = Object.assign({}, {
      animate: true,
      height: "200px"
    }, this.$props.popupSettings);
    if (typeof suggest === "string") {
      this.suggested = suggest;
    }
    var renderSearchBar = function renderSearchBar2(searchValue, searchId) {
      var _this = this;
      var _a3 = this.$props, placeholder = _a3.placeholder, tabIndex = _a3.tabIndex, readonly = _a3.readonly;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      return (
        // @ts-ignore  function children
        h(SearchBar, {
          id: searchId,
          attrs: this.v3 ? void 0 : {
            id: searchId,
            placeholder,
            tabIndex: tabIndex || void 0,
            accessKey: this.$props.accessKey,
            value: searchValue,
            suggestedText: this.suggested,
            focused,
            name: this.$props.name,
            disabled,
            readOnly: readonly,
            expanded: opened5,
            owns: base.listBoxId,
            activedescendant: "option-" + base.guid + "-" + this.focusedIndex(),
            ariaLabelledBy: this.$props.ariaLabelledBy,
            ariaDescribedBy: this.$props.ariaDescribedBy,
            ariaLabel: this.$props.ariaLabel
          },
          placeholder,
          tabIndex: tabIndex || void 0,
          accessKey: this.$props.accessKey,
          value: searchValue,
          suggestedText: this.suggested,
          focused,
          name: this.$props.name,
          ref: this.v3 ? function(el) {
            _this.inputRef = el;
          } : "input",
          onKeydown: this.onInputKeyDown,
          on: this.v3 ? void 0 : {
            "keydown": this.onInputKeyDown,
            "change": this.onChangeHandler,
            "focus": base.handleFocus,
            "blur": this.handleBlur,
            "clearbuttonclick": this.clearButtonClick
          },
          onChange: this.onChangeHandler,
          onFocus: base.handleFocus,
          onBlur: this.handleBlur,
          disabled,
          readOnly: readonly,
          expanded: opened5,
          owns: base.listBoxId,
          activedescendant: "option-" + base.guid + "-" + this.focusedIndex(),
          onClearbuttonclick: this.clearButtonClick,
          ariaLabelledBy: this.$props.ariaLabelledBy,
          ariaDescribedBy: this.$props.ariaDescribedBy,
          ariaLabel: this.$props.ariaLabel
        })
      );
    };
    var renderList = function renderList2() {
      var _a3 = this.$props, textField = _a3.textField, groupField = _a3.groupField;
      var dataItems2 = this.$props.dataItems || [];
      var itemRender = templateRendering.call(this, this.$props.itemRender, getListeners.call(this));
      var groupHeaderItemRender = templateRendering.call(this, this.$props.groupHeaderItemRender, getListeners.call(this));
      var listNoDataRender = templateRendering.call(this, this.$props.listNoDataRender, getListeners.call(this));
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      if (groupField) {
        dataItems2 = this.base.getGroupedDataModernMode(dataItems2, groupField);
      }
      return (
        // @ts-ignore
        h(List, {
          id: base.listBoxId,
          attrs: this.v3 ? void 0 : {
            id: base.listBoxId,
            show: opened5,
            dataItems: dataItems2.slice(),
            focusedIndex: this.focusedIndex(),
            value: value2,
            textField,
            valueField: textField,
            highlightSelected: false,
            optionsGuid: base.guid,
            wrapperStyle: {
              maxHeight: popupSettings.height
            },
            wrapperCssClass: "k-list-content",
            itemRender,
            groupHeaderItemRender,
            noDataRender: listNoDataRender,
            groupField
          },
          show: opened5,
          dataItems: dataItems2.slice(),
          focusedIndex: this.focusedIndex(),
          value: value2,
          textField,
          valueField: textField,
          highlightSelected: false,
          optionsGuid: base.guid,
          ref: "list",
          wrapperStyle: {
            maxHeight: popupSettings.height
          },
          wrapperCssClass: "k-list-content",
          onListclick: this.handleItemClick,
          on: this.v3 ? void 0 : {
            "listclick": this.handleItemClick,
            "scroll": this.onScroll
          },
          itemRender,
          groupHeaderItemRender,
          noDataRender: listNoDataRender,
          groupField,
          onScroll: this.onScroll
        })
      );
    };
    var renderListContainer = function renderListContainer2() {
      var _this2 = this;
      var _a3;
      var headerTemplate = templateRendering.call(this, this.$props.header, getListeners.call(this));
      var footerTemplate = templateRendering.call(this, this.$props.footer, getListeners.call(this));
      var groupStickyHeaderTemplate = templateRendering.call(this, this.$props.groupStickyHeaderItemRender, getListeners.call(this));
      var header = getTemplate.call(this, {
        h,
        template: headerTemplate
      });
      var footer = getTemplate.call(this, {
        h,
        template: footerTemplate
      });
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var popupWidth = popupSettings.width !== void 0 ? popupSettings.width : base.popupWidth;
      var dataItems2 = this.$props.dataItems || [];
      if (this.group === void 0 && this.$props.groupField !== void 0) {
        this.group = getItemValue(dataItems2[0], this.$props.groupField);
      }
      return (
        // @ts-ignore  function children
        h(ListContainer, {
          onMousedown: function onMousedown(e) {
            return e.preventDefault();
          },
          on: this.v3 ? void 0 : {
            "mousedown": function onMousedown(e) {
              return e.preventDefault();
            }
          },
          width: popupWidth,
          attrs: this.v3 ? void 0 : {
            width: popupWidth,
            popupSettings: __assign11(__assign11({}, popupSettings), {
              anchor: this.anchor,
              show: opened5,
              popupClass: classNames(popupSettings.popupClass, "k-list", (_a3 = {}, _a3["k-list-".concat(sizeMap4[size] || size)] = size, _a3)),
              className: classNames("k-list-container", popupSettings.className)
            }),
            dir: dir !== void 0 ? dir : this.base.dirCalculated
          },
          ref: "container",
          popupSettings: __assign11(__assign11({}, popupSettings), {
            anchor: this.anchor,
            show: opened5,
            popupClass: classNames(popupSettings.popupClass, "k-list", (_a3 = {}, _a3["k-list-".concat(sizeMap4[size] || size)] = size, _a3)),
            className: classNames("k-list-container", popupSettings.className)
          }),
          dir: dir !== void 0 ? dir : this.base.dirCalculated
        }, this.v3 ? function() {
          return [header && h("div", {
            "class": "k-list-header"
          }, [header]), _this2.group && dataItems2.length !== 0 && h(GroupStickyHeader, {
            group: _this2.group,
            attrs: _this2.v3 ? void 0 : {
              group: _this2.group,
              render: groupStickyHeaderTemplate
            },
            render: groupStickyHeaderTemplate
          }), renderList.call(_this2), footer && h("div", {
            "class": "k-list-footer"
          }, [footer])];
        } : [header && h("div", {
          "class": "k-list-header"
        }, [header]), _this2.group && dataItems2.length !== 0 && h(GroupStickyHeader, {
          group: _this2.group,
          attrs: _this2.v3 ? void 0 : {
            group: _this2.group,
            render: groupStickyHeaderTemplate
          },
          render: groupStickyHeaderTemplate
        }), renderList.call(_this2), footer && h("div", {
          "class": "k-list-footer"
        }, [footer])])
      );
    };
    var autoComplete = h("span", {
      "class": classNames("k-autocomplete k-input", (_a2 = {}, _a2["k-input-".concat(sizeMap4[size] || size)] = size, _a2["k-rounded-".concat(roundedMap4[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2["k-invalid"] = !isValid, _a2["k-focus"] = focused && !disabled, _a2["k-loading"] = loading, _a2["k-required"] = this.required, _a2["k-disabled"] = disabled, _a2)),
      ref: setRef(this, "kendoAnchor", this.anchor),
      style: !label ? style : __assign11(__assign11({}, style), {
        width: void 0
      }),
      dir,
      attrs: this.v3 ? void 0 : {
        dir
      }
    }, [renderSearchBar.call(this, value2 || "", id), clearButton && !loading && // @ts-ignore  function children
    h(ClearButton, {
      onClearclick: this.clearButtonClick,
      on: this.v3 ? void 0 : {
        "clearclick": this.clearButtonClick
      }
    }), h("span", {
      "class": loading ? "k-input-loading-icon k-icon k-i-loading" : void 0
    }), renderListContainer.call(this)]);
    return label ? h("span", {
      "class": this.spanClassNames,
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      }
    }, [autoComplete, this.$props.label ? id ? h("label", {
      "for": id,
      attrs: this.v3 ? void 0 : {
        "for": id
      },
      "class": "k-label"
    }, [this.$props.label]) : h("span", {
      "class": "k-label"
    }, [this.$props.label]) : null]) : autoComplete;
  }
};
var AutoComplete = AutoCompleteVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/MultiSelect/TagList.js
var __assign12 = function() {
  __assign12 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign12.apply(this, arguments);
};
var allVue18 = vue_runtime_esm_bundler_exports;
var gh17 = allVue18.h;
var isV318 = allVue18.version && allVue18.version[0] === "3";
var ref8 = allVue18.ref;
var preventDefault = function preventDefault2(event) {
  return event.preventDefault();
};
var stopPropagation = function stopPropagation2(event) {
  return event.event.stopPropagation();
};
var TagListVue2 = {
  name: "TagList",
  inheritAttrs: false,
  props: {
    removeTagIcon: String,
    dataItems: Array,
    guid: String,
    focused: Object,
    tagRender: [String, Function, Object],
    tagsRounded: {
      type: String,
      default: "medium",
      validator: function validator13(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator14(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator15(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    }
  },
  computed: {
    wrapperClass: function wrapperClass2() {
      var _a2;
      var _b = this.$props, size = _b.size, disabled = _b.disabled;
      return _a2 = {
        "k-chip-list": true
      }, _a2["k-chip-list-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a2["k-disabled"] = disabled, _a2;
    }
  },
  // @ts-ignore
  setup: !isV318 ? void 0 : function() {
    var v3 = !!isV318;
    return {
      v3
    };
  },
  methods: {
    onTagDelete: function onTagDelete(tagData, event) {
      this.$emit("tagdelete", tagData, event);
    }
  },
  render: function render17(createElement) {
    var h = gh17 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a2 = this.$props, dataItems2 = _a2.dataItems, guid4 = _a2.guid, size = _a2.size, disabled = _a2.disabled, tagsRounded = _a2.tagsRounded, removeTagIcon = _a2.removeTagIcon;
    return h("div", {
      "class": "k-input-values",
      style: this.$attrs.style
    }, [h("div", {
      "class": this.wrapperClass,
      role: "listbox",
      attrs: this.v3 ? void 0 : {
        role: "listbox",
        id: "tagslist-" + guid4
      },
      id: "tagslist-" + guid4
    }, [dataItems2.map(function(tagData, index) {
      var _this = this;
      var uniqueId = "tag-".concat(guid4, "-").concat(tagData.text.toString().replace(/\s+/g, "-"));
      var isFocused = tagData === this.$props.focused;
      var defaultRendering = h(Chip, {
        id: uniqueId,
        attrs: this.v3 ? void 0 : {
          id: uniqueId,
          tabindex: -1,
          "aria-selected": isFocused,
          role: "option",
          "aria-setsize": dataItems2.length,
          text: tagData.text,
          disabled,
          removable: true,
          removeIcon: removeTagIcon,
          rounded: tagsRounded,
          size
        },
        tabindex: -1,
        "aria-selected": isFocused,
        role: "option",
        "aria-setsize": dataItems2.length,
        key: tagData.text + index,
        text: tagData.text,
        disabled,
        removable: true,
        onRemove: function onRemove(e) {
          return _this.onTagDelete(tagData.data, e);
        },
        on: this.v3 ? void 0 : {
          "remove": function onRemove(e) {
            return _this.onTagDelete(tagData.data, e);
          },
          "mousedown": preventDefault,
          "click": stopPropagation
        },
        removeIcon: removeTagIcon,
        onMousedown: preventDefault,
        onClick: stopPropagation,
        "class": isFocused ? "k-focus" : void 0,
        rounded: tagsRounded,
        size
      });
      return getTemplate.call(this, {
        h,
        template: this.$props.tagRender,
        defaultRendering,
        additionalProps: __assign12(__assign12({}, this.$props), {
          tagData,
          index
        }),
        additionalListeners: {
          tagdelete: this.onTagDelete
        }
      });
    }, this), defaultSlot])]);
  }
};
var TagList = TagListVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/common/settings.js
var ActiveDescendant;
(function(ActiveDescendant2) {
  ActiveDescendant2[ActiveDescendant2["PopupList"] = 0] = "PopupList";
  ActiveDescendant2[ActiveDescendant2["TagsList"] = 1] = "TagsList";
})(ActiveDescendant || (ActiveDescendant = {}));

// node_modules/@progress/kendo-vue-dropdowns/dist/es/MultiSelect/MultiSelect.js
var __assign13 = function() {
  __assign13 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign13.apply(this, arguments);
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue19 = vue_runtime_esm_bundler_exports;
var gh18 = allVue19.h;
var isV319 = allVue19.version && allVue19.version[0] === "3";
var ref9 = allVue19.ref;
var sizeMap5 = kendoThemeMaps.sizeMap;
var roundedMap5 = kendoThemeMaps.roundedMap;
var VALIDATION_MESSAGE4 = "Please enter a valid value!";
var preventDefault3 = function preventDefault4(event) {
  return event.preventDefault();
};
var matchTags2 = function matchTags3(tag1, tag2, key) {
  if (!!tag1 !== !!tag2 || tag1.text !== tag2.text) {
    return false;
  }
  return tag1 === tag2 || matchDataCollections(tag1.data, tag2.data, key);
};
var isCustom = function isCustom2(type) {
  return type === FocusedItemType.CustomItem;
};
var FocusedItemType;
(function(FocusedItemType2) {
  FocusedItemType2[FocusedItemType2["None"] = 0] = "None";
  FocusedItemType2[FocusedItemType2["ListItem"] = 1] = "ListItem";
  FocusedItemType2[FocusedItemType2["CustomItem"] = 2] = "CustomItem";
})(FocusedItemType || (FocusedItemType = {}));
var MultiSelectVue2 = {
  name: "KendoMultiSelect",
  // @ts-ignore
  emits: {
    "changemodel": null,
    "update:modelValue": null,
    "filterchange": null,
    change: null,
    pagechange: null,
    focus: null,
    blur: null,
    open: null,
    close: null,
    scroll: null
  },
  model: {
    event: "changemodel"
  },
  props: {
    autoClose: {
      type: Boolean,
      default: true
    },
    removeTagIcon: String,
    allowCustom: Boolean,
    modelValue: Array,
    opened: {
      type: Boolean,
      default: void 0
    },
    disabled: Boolean,
    dir: String,
    tabIndex: {
      type: Number,
      default: 0
    },
    accessKey: String,
    dataItems: Array,
    textField: String,
    label: String,
    loading: Boolean,
    name: String,
    value: Array,
    defaultValue: Array,
    valueField: String,
    valuePrimitive: Boolean,
    dataItemKey: String,
    placeholder: String,
    tags: Array,
    required: {
      type: Boolean,
      default: false
    },
    valid: {
      type: Boolean,
      default: void 0
    },
    validate: {
      type: Boolean
    },
    validationMessage: {
      type: String,
      default: void 0
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    tagRender: [String, Function, Object],
    id: String,
    popupSettings: {
      type: Object,
      default: function _default5() {
        return {
          animate: true,
          height: "200px"
        };
      }
    },
    itemRender: [String, Function, Object],
    groupHeaderItemRender: [String, Function, Object],
    groupStickyHeaderItemRender: [String, Function, Object],
    listNoDataRender: [String, Function, Object],
    focusedItemIndex: Function,
    virtual: {
      type: Object,
      default: void 0
    },
    header: [String, Function, Object],
    footer: [String, Function, Object],
    filterable: Boolean,
    filter: {
      type: String,
      default: void 0
    },
    ariaLabel: {
      type: String,
      default: void 0
    },
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    rounded: {
      type: String,
      default: "medium",
      validator: function validator16(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    tagsRounded: {
      type: String,
      default: "medium",
      validator: function validator17(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator18(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator19(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    groupField: {
      type: String
    }
  },
  // @ts-ignore
  setup: !isV319 ? void 0 : function() {
    var v3 = !!isV319;
    var inputRef = ref9(null);
    var kendoAnchorRef = ref9(null);
    return {
      v3,
      inputRef,
      kendoAnchorRef
    };
  },
  computed: {
    spanClassNames: {
      get: function get7() {
        var isValid = !this.hasMounted || !this.$props.validityStyles || this.validity().valid;
        var editorValue = this.currentText || getItemValue(this.computedValue()[0], this.$props.textField);
        return {
          "k-floating-label-container": true,
          "k-focus": this.currentFocused,
          "k-empty": !(editorValue && editorValue !== 0),
          "k-invalid": !isValid && isValid !== void 0,
          "k-rtl": this.$props.dir === "rtl"
        };
      }
    }
  },
  created: function created6() {
    this.valuesItemsDuringOnChange = null;
    this._tags = [];
    this._skipFocusEvent = false;
    this.scrollToFocused = false;
    this.base = new DropDownBase_default(this);
    this.anchor = guid();
    this.inputId = guid();
  },
  data: function data5() {
    return {
      hasMounted: false,
      currentText: "",
      currentValue: "",
      currentFocused: false,
      currentOpened: false,
      currentFocusedIndex: void 0,
      currentFocusedTag: void 0,
      searchState: {
        word: "",
        last: ""
      },
      suggested: "",
      activedescendant: ActiveDescendant.PopupList,
      group: void 0,
      isScrolling: false,
      itemHeight: 0
    };
  },
  watch: {
    currentOpened: function currentOpened4(_, oldValue) {
      this.prevCurrentOpened = oldValue;
    },
    opened: function opened4(_, oldValue) {
      this.prevOpened = oldValue;
    },
    virtual: function virtual3(newValue, oldValue) {
      if (newValue && oldValue && newValue.total !== oldValue.total) {
        this.virtualTotalHasChanged = true;
      }
    }
  },
  updated: function updated5() {
    var _a2;
    var _b = this.$props, virtual4 = _b.virtual, _c = _b.groupField, groupField = _c === void 0 ? "" : _c, _d = _b.dataItems, dataItems2 = _d === void 0 ? [] : _d;
    var skip = virtual4 ? virtual4.skip : 0;
    var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
    var prevOpened = this.prevOpened !== void 0 ? this.prevOpened : this.prevCurrentOpened;
    var opening = !prevOpened && opened5;
    var closing = prevOpened && !opened5;
    var popupSettings = Object.assign({}, {
      animate: true,
      height: "200px"
    }, this.$props.popupSettings);
    var list = this.$refs.list;
    var scrollElement = this.$refs.scrollElement;
    if (list) {
      this.base.vs.list = list.list;
      this.base.list = list.list;
    }
    if (scrollElement) {
      this.base.vs.scrollElement = scrollElement;
    }
    if (list && dataItems2.length) {
      this.base.vs.scrollerRef(list.$el);
    }
    if (!popupSettings.animate && closing) {
      this.onPopupClosed();
    }
    if (!this.isScrolling) {
      if (virtual4 && this.virtualTotalHasChanged) {
        this.base.vs.calcScrollElementHeight();
        this.base.vs.reset();
        this.virtualTotalHasChanged = false;
      } else {
        var _e = this.getFocusedState(), focusedItem2 = _e.focusedItem, focusedIndex3 = _e.focusedIndex;
        if (groupField !== "") {
          focusedIndex3 = (_a2 = this.base.getGroupedDataModernMode(dataItems2, groupField)) === null || _a2 === void 0 ? void 0 : _a2.indexOf(focusedItem2);
        }
        if (opening && virtual4) {
          this.base.scrollToVirtualItem(virtual4, focusedIndex3 - skip);
          this.prevCurrentOpened = true;
        } else if (opening && !virtual4) {
          if (dataItems2 && dataItems2.length !== 0) {
            this.base.resetGroupStickyHeader(dataItems2[0][groupField], this);
          }
          this.base.scrollToItem(focusedIndex3);
          this.prevCurrentOpened = true;
        } else if (opened5 && prevOpened && focusedItem2) {
          this.base.scrollToItem(focusedIndex3 - skip);
        }
      }
    }
    this.scrollToFocused = false;
    this.searchBarRef();
    this.setValidity();
  },
  mounted: function mounted8() {
    this.hasMounted = true;
    this.input = this.v3 ? this.inputRef.input : this.$refs.input.input;
    this.base.wrapper = getRef(this, "kendoAnchor", this.anchor);
    this.element = getRef(this, "kendoAnchor", this.anchor);
    this.base.didMount();
    this.searchBarRef();
    this.setValidity();
  },
  methods: {
    computedValue: function computedValue4() {
      var result = [];
      if (this.valuesItemsDuringOnChange) {
        result.push.apply(result, this.valuesItemsDuringOnChange);
      } else if (this.$props.value) {
        result.push.apply(result, this.$props.value);
      } else if (this.$props.modelValue !== void 0) {
        result.push.apply(result, this.$props.modelValue);
      } else if (this.currentValue) {
        result.push.apply(result, this.currentValue);
      } else if (this.$props.defaultValue) {
        result.push.apply(result, this.$props.defaultValue);
      }
      return this.valuePrimitive ? this.findByFieldValue(this.valueField, result) || result : result;
    },
    findByFieldValue: function findByFieldValue3(field, result) {
      var _this = this;
      var newResult = result.map(function(currentValue) {
        var index = _this.dataItems.findIndex(function(i) {
          return getItemValue(i, field) === currentValue;
        });
        return _this.dataItems[index] || currentValue;
      });
      return newResult;
    },
    primitiveValue: function primitiveValue4() {
      var _this = this;
      var computed = this.computedValue();
      var value2 = computed.map(function(v) {
        return getItemValue(v, _this.valueField);
      });
      return this.valuePrimitive ? value2 : computed;
    },
    validity: function validity4() {
      var customError = this.$props.validationMessage !== void 0;
      var value2 = this.computedValue();
      var isValid = !this.$props.required || value2 !== null && value2.length > 0 && value2 !== void 0;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        valid,
        valueMissing: value2 === null
      };
    },
    handleItemSelect: function handleItemSelect4(index, state) {
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey, virtual4 = _a2.virtual;
      var value2 = this.computedValue();
      var skip = virtual4 ? virtual4.skip : 0;
      var dataItem = dataItems2[index - skip];
      var indexInValue = value2.findIndex(function(i) {
        return areSame(i, dataItem, dataItemKey);
      });
      var newItems = [];
      if (indexInValue !== -1) {
        newItems = value2;
        newItems.splice(indexInValue, 1);
      } else {
        newItems = __spreadArray(__spreadArray([], value2, true), [dataItem], false);
      }
      var text = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
      if (text) {
        if (this.currentText) {
          state.data.currentText = "";
        }
        this.base.filterChanged("", state);
      }
      if (this.currentFocusedIndex !== void 0) {
        state.data.currentFocusedIndex = void 0;
      }
      this.triggerOnChange(newItems, state);
      this.base.triggerPageChangeCornerItems(dataItem, state);
    },
    onTagDelete: function onTagDelete2(itemsToRemove, event) {
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var state = this.base.initState();
      state.event = event;
      if (opened5) {
        this.base.togglePopup(state);
      }
      if (!this.currentFocused) {
        state.data.currentFocused = true;
      }
      var selected = this.computedValue();
      removeDataItems(selected, itemsToRemove, this.$props.dataItemKey);
      this.triggerOnChange(selected, state);
      this.applyState(state);
    },
    onNavigate: function onNavigate4(state, keyCode) {
      var _a2 = this.$props, allowCustom = _a2.allowCustom, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var text = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
      var _c = this.getFocusedState(), focusedType = _c.focusedType, focusedIndex3 = _c.focusedIndex;
      var customItem = allowCustom && text;
      var customItemFocused = isCustom(focusedType);
      var base = this.base;
      var vs = base.vs;
      if (opened5 && keyCode === Keys.up && customItemFocused) {
        if (this.currentFocusedIndex !== void 0) {
          state.data.currentFocusedIndex = void 0;
        }
      } else {
        var newFocused = base.navigation.navigate({
          keyCode,
          current: focusedIndex3,
          max: (vs.enabled ? vs.total : dataItems2.length) - 1,
          min: customItem ? -1 : 0
        });
        if (newFocused !== void 0) {
          this.itemFocus(newFocused, state);
          this.scrollToFocused = true;
        }
      }
      this.applyState(state);
    },
    itemFocus: function itemFocus2(index, state) {
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, allowCustom = _a2.allowCustom, virtual4 = _a2.virtual;
      var skip = virtual4 ? virtual4.skip : 0;
      var text = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
      var focusedIndex3 = this.getFocusedState().focusedIndex;
      var customItem = allowCustom && text;
      var nextFocusedItem = dataItems2[index - skip];
      if (nextFocusedItem && focusedIndex3 !== index) {
        if (this.currentFocusedIndex !== index) {
          state.data.currentFocusedIndex = index;
          state.data.activedescendant = ActiveDescendant.PopupList;
        }
      } else if (customItem && index === -1) {
        if (this.currentFocusedIndex !== void 0) {
          state.data.currentFocusedIndex = void 0;
        }
      }
      this.base.triggerPageChangeCornerItems(nextFocusedItem, state);
    },
    searchBarRef: function searchBarRef() {
      var _this = this;
      if (this.input && this.currentFocused) {
        setTimeout(function() {
          return _this.input.focus();
        }, 0);
      }
    },
    onChangeHandler: function onChangeHandler2(event) {
      var state = this.base.initState();
      var value2 = event.currentTarget.value;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      state.event = event;
      if (this.$props.filter === void 0) {
        state.data.currentText = value2;
      }
      state.data.currentFocusedIndex = void 0;
      if (!opened5) {
        this.base.togglePopup(state);
      }
      this.base.filterChanged(value2, state);
      if (this.$props.filterable) {
        state.data.group = void 0;
      }
      this.applyState(state);
    },
    clearButtonClick: function clearButtonClick4(event) {
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var state = this.base.initState();
      state.event = event;
      event.stopPropagation();
      if (this.computedValue().length > 0) {
        this.triggerOnChange([], state);
      }
      if (this.currentFocusedIndex !== void 0) {
        state.data.currentFocusedIndex = void 0;
      }
      if (opened5) {
        this.base.togglePopup(state);
      }
      var text = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
      if (isPresent(text) && text !== "") {
        this.base.filterChanged("", state);
      }
      if (this.currentText) {
        state.data.currentText = "";
      }
      this.applyState(state);
    },
    onInputKeyDown: function onInputKeyDown3(event) {
      var _this = this;
      if (this.isScrolling) {
        this.isScrolling = false;
      }
      var keyCode = event.keyCode;
      var text = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var focusedItem2 = this.getFocusedState().focusedItem;
      var state = this.base.initState();
      state.event = event;
      if (!text && this.computedValue().length > 0 && (keyCode === Keys.left || keyCode === Keys.right || keyCode === Keys.home || keyCode === Keys.end || keyCode === Keys.delete || keyCode === Keys.backspace)) {
        return this.onTagsNavigate(event, state);
      }
      var togglePopup2 = function togglePopup3() {
        event.preventDefault();
        _this.base.togglePopup(state);
        _this.applyState(state);
      };
      if (opened5) {
        if (event.altKey && keyCode === Keys.up) {
          togglePopup2();
        } else if (keyCode === Keys.up || keyCode === Keys.down) {
          event.preventDefault();
          this.onNavigate(state, keyCode);
        } else if (keyCode === Keys.enter) {
          event.preventDefault();
          if (this.$props.allowCustom && text && focusedItem2 === null) {
            this.customItemSelect(event);
          } else {
            this.selectFocusedItem(event);
          }
        } else if (keyCode === Keys.esc) {
          togglePopup2();
        }
      } else if (event.altKey && keyCode === Keys.down) {
        togglePopup2();
      }
    },
    onTagsNavigate: function onTagsNavigate(event, state) {
      var keyCode = event.keyCode;
      var focusedTag = this.currentFocusedTag;
      var tags = this._tags;
      var itemsKey = this.$props.dataItemKey;
      var focusedIndex3 = focusedTag ? tags.findIndex(function(t) {
        return matchTags2(t, focusedTag, itemsKey);
      }) : -1;
      var newFocusedTag = void 0;
      var hasFocused = focusedIndex3 !== -1;
      if (keyCode === Keys.left) {
        if (hasFocused) {
          focusedIndex3 = Math.max(0, focusedIndex3 - 1);
        } else {
          focusedIndex3 = tags.length - 1;
        }
        newFocusedTag = tags[focusedIndex3];
      } else if (keyCode === Keys.right) {
        if (focusedIndex3 === tags.length - 1) {
          newFocusedTag = void 0;
        } else if (hasFocused) {
          focusedIndex3 = Math.min(tags.length - 1, focusedIndex3 + 1);
          newFocusedTag = tags[focusedIndex3];
        }
      } else if (keyCode === Keys.home) {
        newFocusedTag = tags[0];
      } else if (keyCode === Keys.end) {
        newFocusedTag = tags[tags.length - 1];
      } else if (keyCode === Keys.delete) {
        if (hasFocused) {
          var items = this.computedValue();
          removeDataItems(items, tags[focusedIndex3].data, itemsKey);
          this.triggerOnChange(items, state);
        }
      } else if (keyCode === Keys.backspace) {
        var items = this.computedValue();
        if (hasFocused) {
          removeDataItems(items, tags[focusedIndex3].data, itemsKey);
          this.triggerOnChange(items, state);
        } else if (!hasFocused && tags.length) {
          var removed = tags.pop();
          removeDataItems(items, removed.data, itemsKey);
          this.triggerOnChange(items, state);
        }
      }
      if (newFocusedTag !== focusedTag) {
        state.data.currentFocusedTag = newFocusedTag;
        state.data.activedescendant = ActiveDescendant.TagsList;
      }
      this.applyState(state);
    },
    triggerOnChange: function triggerOnChange4(items, state) {
      if (this.$props.value === void 0) {
        state.data.currentValue = __spreadArray([], items, true);
      }
      this.valuesItemsDuringOnChange = [];
      this.setItems(items, this.valuesItemsDuringOnChange);
      state.events.push({
        type: "change"
      });
    },
    selectFocusedItem: function selectFocusedItem2(event) {
      var _a2 = this.$props, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, virtual4 = _a2.virtual;
      var focusedIndex3 = this.getFocusedState().focusedIndex;
      var skip = virtual4 ? virtual4.skip : 0;
      if (dataItems2[focusedIndex3 - skip] !== void 0) {
        this.handleItemClick(focusedIndex3, event);
      }
    },
    setItems: function setItems(srcItems, destItems) {
      destItems.length = 0;
      destItems.push.apply(destItems, srcItems);
    },
    getFocusedState: function getFocusedState() {
      var focusedIndex3 = this.currentFocusedIndex;
      var text = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
      var _a2 = this.$props, allowCustom = _a2.allowCustom, _b = _a2.dataItems, dataItems2 = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey, virtual4 = _a2.virtual, textField = _a2.textField, _c = _a2.focusedItemIndex, focusedItemIndex = _c === void 0 ? itemIndexStartsWith : _c;
      var skip = virtual4 && virtual4.skip || 0;
      var focusedInd;
      if (focusedIndex3 !== void 0) {
        return {
          focusedIndex: focusedIndex3,
          focusedItem: dataItems2[focusedIndex3 - skip],
          focusedType: FocusedItemType.ListItem
        };
      }
      var selected = this.computedValue();
      if (allowCustom && text) {
        return {
          focusedItem: null,
          focusedIndex: -1,
          focusedType: FocusedItemType.CustomItem
        };
      } else if (text) {
        focusedInd = focusedItemIndex(dataItems2, text, textField);
        return {
          focusedItem: dataItems2[focusedInd],
          focusedIndex: focusedInd + skip,
          focusedType: FocusedItemType.ListItem
        };
      } else if (selected.length) {
        var last_1 = selected[selected.length - 1];
        focusedInd = dataItems2.findIndex(function(i) {
          return areSame(i, last_1, dataItemKey);
        });
        if (dataItems2[focusedInd] !== void 0) {
          return {
            focusedIndex: focusedInd + skip,
            focusedItem: dataItems2[focusedInd],
            focusedType: FocusedItemType.ListItem
          };
        }
        return {
          focusedType: FocusedItemType.None,
          focusedIndex: -1
        };
      }
      return skip === 0 ? {
        focusedItem: dataItems2[0],
        focusedIndex: 0,
        focusedType: FocusedItemType.ListItem
      } : {
        focusedType: FocusedItemType.None,
        focusedIndex: -1
      };
    },
    customItemSelect: function customItemSelect(event) {
      var _a2;
      var itemText = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
      var textField = this.$props.textField;
      if (!itemText) {
        return;
      }
      var state = this.base.initState();
      state.event = event;
      var item2 = textField ? (_a2 = {}, _a2[textField] = itemText, _a2) : itemText;
      if (this.currentText !== void 0) {
        state.data.currentText = "";
      }
      state.data.currentFocusedIndex = void 0;
      this.base.filterChanged("", state);
      var newItems = __spreadArray(__spreadArray([], this.computedValue(), true), [item2], false);
      this.triggerOnChange(newItems, state);
      this.base.togglePopup(state);
      this.applyState(state);
    },
    handleWrapperClick: function handleWrapperClick2(event) {
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var input = this.input;
      if (!opened5 && input) {
        this.focusElement(input);
      }
      var state = this.base.initState();
      state.event = event;
      if (!this.currentFocused) {
        state.events.push({
          type: "focus"
        });
        state.data.currentFocused = true;
      }
      this.base.togglePopup(state);
      this.applyState(state);
    },
    handleItemClick: function handleItemClick4(index, event) {
      var state = this.base.initState();
      state.event = event;
      this.handleItemSelect(index, state);
      if (this.$props.autoClose) {
        this.base.togglePopup(state);
      }
      this.applyState(state);
    },
    handleBlur: function handleBlur5(event) {
      if (!this.currentFocused || this._skipFocusEvent) {
        return;
      }
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var state = this.base.initState();
      var _a2 = this.$props, allowCustom = _a2.allowCustom, filterable = _a2.filterable;
      state.event = event;
      state.data.currentFocused = false;
      state.events.push({
        type: "blur"
      });
      if (opened5) {
        if (this.currentOpened) {
          state.data.currentOpened = false;
        }
        state.events.push({
          type: "close"
        });
      }
      if (!allowCustom && !filterable && this.currentText) {
        state.data.currentText = "";
      }
      this.applyState(state);
    },
    handleFocus: function handleFocus4(event) {
      if (this._skipFocusEvent) {
        return;
      }
      this.base.handleFocus(event);
    },
    onPopupOpened: function onPopupOpened2() {
      if (this.input && this.currentFocused) {
        this.focusElement(this.input);
      }
    },
    onPopupClosed: function onPopupClosed2() {
      var _this = this;
      if (this.currentFocused) {
        setTimeout(function() {
          if (_this.currentFocused) {
            _this.focusElement(_this.input);
          }
        }, 0);
      }
    },
    focusElement: function focusElement2(element) {
      var _this = this;
      this._skipFocusEvent = true;
      element.focus();
      setTimeout(function() {
        return _this._skipFocusEvent = false;
      }, 30);
    },
    applyState: function applyState4(state) {
      this.base.applyState(state);
      this.valuesItemsDuringOnChange = null;
    },
    setValidity: function setValidity4() {
      if (this.input && this.input.setCustomValidity) {
        this.input.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage || VALIDATION_MESSAGE4);
      }
    },
    focus: function focus4() {
      if (this.input) {
        this.input.focus();
      }
    },
    repositionPopup: function repositionPopup4() {
      this.base.repositionPopup();
    },
    onScroll: function onScroll4(event) {
      this.isScrolling = true;
      var _a2 = this.base, vs = _a2.vs, list = _a2.list;
      vs.scrollHandler(event);
      var state = this.base.initState();
      var groupField = this.$props.groupField;
      var _b = this.$props.dataItems, dataItems2 = _b === void 0 ? [] : _b;
      if (!groupField || !dataItems2.length) {
        return;
      }
      var itemHeight = this.itemHeight = this.itemHeight || (vs.enabled ? vs.itemHeight : list ? list.children[0].offsetHeight : 0);
      var target = event.target;
      var scrollTop = target.scrollTop - vs.skip * itemHeight;
      if (groupField) {
        dataItems2 = this.base.getGroupedDataModernMode(dataItems2, groupField);
      }
      var group = dataItems2[0][groupField];
      for (var i = 1; i < dataItems2.length; i++) {
        if (itemHeight * i > scrollTop) {
          break;
        }
        if (dataItems2[i] && dataItems2[i][groupField]) {
          group = dataItems2[i][groupField];
        }
      }
      if (group !== this.group) {
        state.data.group = group;
        this.applyState(state);
      }
    }
  },
  render: function render18(createElement) {
    var _this4 = this;
    var _a2;
    var h = gh18 || createElement;
    var _b = this.$props, style = _b.style, label = _b.label, dir = _b.dir, disabled = _b.disabled, tags = _b.tags, textField = _b.textField, dataItemKey = _b.dataItemKey, virtual4 = _b.virtual, loading = _b.loading, size = _b.size, fillMode = _b.fillMode, rounded = _b.rounded, tagsRounded = _b.tagsRounded, removeTagIcon = _b.removeTagIcon;
    var focused = this.currentFocused;
    var popupSettings = Object.assign({}, {
      animate: true,
      height: "200px"
    }, this.$props.popupSettings);
    var focusedTag = this.currentFocusedTag;
    var value2 = this.computedValue();
    var searchText = (this.$props.filter !== void 0 ? this.$props.filter : this.currentText) || "";
    var clearButton = !loading && (!!searchText || value2.length > 0);
    var vs = this.base.vs;
    var id = this.$props.id || this.inputId;
    var tagRender = templateRendering.call(this, this.$props.tagRender, getListeners.call(this));
    vs.enabled = virtual4 !== void 0;
    if (virtual4 !== void 0) {
      vs.skip = virtual4.skip;
      vs.total = virtual4.total;
      vs.pageSize = virtual4.pageSize;
    }
    var tagsToRender = [];
    if (tags === void 0) {
      this.computedValue().forEach(function(item2) {
        tagsToRender.push({
          text: getItemValue(item2, textField),
          data: [item2]
        });
      });
    } else {
      tagsToRender.push.apply(tagsToRender, tags);
    }
    this.setItems(tagsToRender, this._tags);
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var renderSearchBar = function renderSearchBar2(searchId) {
      var _this = this;
      var activedescendant = this.activedescendant;
      var placeholder = this.$props.placeholder;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var focusedIndex3 = this.getFocusedState().focusedIndex;
      var placeholderToShow = value2.length === 0 && !searchText ? placeholder : void 0;
      var ariaActivedescendant = activedescendant === ActiveDescendant.TagsList && focusedTag !== void 0 ? "tag-".concat(this.base.guid, "-").concat(focusedTag.text.replace(/\s+/g, "-")) : "option-".concat(this.base.guid, "-").concat(focusedIndex3);
      return (
        // @ts-ignore  function children
        h(SearchBar, {
          id: searchId,
          attrs: this.v3 ? void 0 : {
            id: searchId,
            size: Math.max((placeholderToShow || "").length, searchText.length, 1),
            tabIndex: this.$props.tabIndex,
            accessKey: this.$props.accessKey,
            placeholder: placeholderToShow,
            value: searchText,
            disabled,
            expanded: opened5,
            owns: this.base.listBoxId,
            activedescendant: ariaActivedescendant,
            "aria-describedBy": "tagslist-".concat(this.base.guid).concat(this.$props.ariaDescribedBy ? " " + this.$props.ariaDescribedBy : ""),
            "aria-labelledBy": this.$props.ariaLabelledBy,
            "aria-label": this.$props.ariaLabel
          },
          size: Math.max((placeholderToShow || "").length, searchText.length, 1),
          tabIndex: this.$props.tabIndex,
          accessKey: this.$props.accessKey,
          placeholder: placeholderToShow,
          value: searchText,
          onChange: this.onChangeHandler,
          on: this.v3 ? void 0 : {
            "change": this.onChangeHandler,
            "blur": this.handleBlur,
            "keydown": this.onInputKeyDown
          },
          onBlur: this.handleBlur,
          onKeydown: this.onInputKeyDown,
          ref: this.v3 ? function(el) {
            _this.inputRef = el;
          } : "input",
          disabled,
          expanded: opened5,
          owns: this.base.listBoxId,
          activedescendant: ariaActivedescendant,
          "aria-describedBy": "tagslist-".concat(this.base.guid).concat(this.$props.ariaDescribedBy ? " " + this.$props.ariaDescribedBy : ""),
          "aria-labelledBy": this.$props.ariaLabelledBy,
          "aria-label": this.$props.ariaLabel
        })
      );
    };
    var renderList = function renderList2() {
      var _this2 = this;
      var groupField = this.$props.groupField;
      var dataItems2 = this.$props.dataItems || [];
      var itemRender = templateRendering.call(this, this.$props.itemRender, getListeners.call(this));
      var groupHeaderItemRender = templateRendering.call(this, this.$props.groupHeaderItemRender, getListeners.call(this));
      var listNoDataRender = templateRendering.call(this, this.$props.listNoDataRender, getListeners.call(this));
      var skip = virtual4 ? virtual4.skip : 0;
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var focusedIndex3 = this.getFocusedState().focusedIndex;
      var translate = "translateY(".concat(vs.translate, "px)");
      if (groupField) {
        dataItems2 = this.base.getGroupedDataModernMode(dataItems2, groupField);
      }
      return (
        // @ts-ignore  function children
        h(List, {
          id: this.base.listBoxId,
          attrs: this.v3 ? void 0 : {
            id: this.base.listBoxId,
            show: opened5,
            dataItems: dataItems2.slice(),
            focusedIndex: focusedIndex3 - skip,
            value: this.computedValue(),
            textField,
            valueField: dataItemKey,
            optionsGuid: this.base.guid,
            wrapperStyle: {
              maxHeight: popupSettings.height
            },
            wrapperCssClass: "k-list-content",
            listStyle: vs.enabled ? {
              transform: translate
            } : void 0,
            skip,
            itemRender,
            groupHeaderItemRender,
            noDataRender: listNoDataRender,
            groupField
          },
          show: opened5,
          dataItems: dataItems2.slice(),
          focusedIndex: focusedIndex3 - skip,
          value: this.computedValue(),
          textField,
          valueField: dataItemKey,
          optionsGuid: this.base.guid,
          ref: "list",
          wrapperStyle: {
            maxHeight: popupSettings.height
          },
          wrapperCssClass: "k-list-content",
          listStyle: vs.enabled ? {
            transform: translate
          } : void 0,
          key: "listKey",
          skip,
          onListclick: this.handleItemClick,
          on: this.v3 ? void 0 : {
            "listclick": this.handleItemClick,
            "scroll": this.onScroll
          },
          itemRender,
          groupHeaderItemRender,
          noDataRender: listNoDataRender,
          groupField,
          onScroll: this.onScroll
        }, this.v3 ? function() {
          return [renderScrollElement.call(_this2)];
        } : [renderScrollElement.call(_this2)])
      );
    };
    var renderScrollElement = function renderScrollElement2() {
      return vs.enabled && h("div", {
        ref: "scrollElement",
        key: "scrollElementKey"
      });
    };
    var renderListContainer = function renderListContainer2() {
      var _this3 = this;
      var _a3;
      var base = this.base;
      var _b2 = this.$props, allowCustom = _b2.allowCustom, _c = _b2.dataItems, dataItems2 = _c === void 0 ? [] : _c;
      var headerTemplate = templateRendering.call(this, this.$props.header, getListeners.call(this));
      var footerTemplate = templateRendering.call(this, this.$props.footer, getListeners.call(this));
      var groupStickyHeaderTemplate = templateRendering.call(this, this.$props.groupStickyHeaderItemRender, getListeners.call(this));
      var header = getTemplate.call(this, {
        h,
        template: headerTemplate
      });
      var footer = getTemplate.call(this, {
        h,
        template: footerTemplate
      });
      var opened5 = this.$props.opened !== void 0 ? this.$props.opened : this.currentOpened;
      var currentText = this.$props.filter !== void 0 ? this.$props.filter : this.currentText;
      var popupWidth = popupSettings.width !== void 0 ? popupSettings.width : base.popupWidth;
      var focusedType = this.getFocusedState().focusedType;
      var customItem = allowCustom && currentText && h("div", {
        "class": "k-list",
        key: "customitem",
        onClick: this.customItemSelect,
        on: this.v3 ? void 0 : {
          "click": this.customItemSelect
        }
      }, [h("div", {
        "class": classNames("k-item k-custom-item", {
          "k-focus": isCustom(focusedType)
        })
      }, [currentText, h(Icon, {
        name: "plus",
        attrs: this.v3 ? void 0 : {
          name: "plus",
          icon: plusIcon
        },
        icon: plusIcon,
        style: {
          float: "right"
        }
      })])]);
      if (this.group === void 0 && this.$props.groupField !== void 0) {
        this.group = getItemValue(dataItems2[0], this.$props.groupField);
      }
      return (
        // @ts-ignore  function children
        h(ListContainer, {
          ref: "container",
          onMousedown: preventDefault3,
          on: this.v3 ? void 0 : {
            "mousedown": preventDefault3,
            "blur": this.handleBlur
          },
          dir: dir !== void 0 ? dir : base.dirCalculated,
          attrs: this.v3 ? void 0 : {
            dir: dir !== void 0 ? dir : base.dirCalculated,
            width: popupWidth,
            popupSettings: __assign13(__assign13({}, popupSettings), {
              anchor: this.anchor,
              show: opened5,
              onOpen: this.onPopupOpened,
              onClose: this.onPopupClosed,
              popupClass: classNames(popupSettings.popupClass, "k-list", (_a3 = {}, _a3["k-list-".concat(sizeMap5[size] || size)] = size, _a3["k-virtual-list"] = this.base.vs.enabled, _a3)),
              className: classNames("k-list-container", popupSettings.className)
            }),
            itemsCount: dataItems2.length
          },
          onBlur: this.handleBlur,
          width: popupWidth,
          popupSettings: __assign13(__assign13({}, popupSettings), {
            anchor: this.anchor,
            show: opened5,
            onOpen: this.onPopupOpened,
            onClose: this.onPopupClosed,
            popupClass: classNames(popupSettings.popupClass, "k-list", (_a3 = {}, _a3["k-list-".concat(sizeMap5[size] || size)] = size, _a3["k-virtual-list"] = this.base.vs.enabled, _a3)),
            className: classNames("k-list-container", popupSettings.className)
          }),
          itemsCount: dataItems2.length
        }, this.v3 ? function() {
          return [header && h("div", {
            "class": "k-list-header"
          }, [header]), customItem, _this3.group && dataItems2.length !== 0 && h(GroupStickyHeader, {
            group: _this3.group,
            attrs: _this3.v3 ? void 0 : {
              group: _this3.group,
              render: groupStickyHeaderTemplate
            },
            render: groupStickyHeaderTemplate
          }), renderList.call(_this3), footer && h("div", {
            "class": "k-list-footer"
          }, [footer]), virtual4 && header];
        } : [header && h("div", {
          "class": "k-list-header"
        }, [header]), customItem, _this3.group && dataItems2.length !== 0 && h(GroupStickyHeader, {
          group: _this3.group,
          attrs: _this3.v3 ? void 0 : {
            group: _this3.group,
            render: groupStickyHeaderTemplate
          },
          render: groupStickyHeaderTemplate
        }), renderList.call(_this3), footer && h("div", {
          "class": "k-list-footer"
        }, [footer]), virtual4 && header])
      );
    };
    var component = h("span", {
      ref: setRef(this, "kendoAnchor", this.anchor),
      "class": classNames("k-multiselect", "k-input", (_a2 = {}, _a2["k-input-".concat(sizeMap5[size] || size)] = size, _a2["k-rounded-".concat(roundedMap5[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2["k-focus"] = focused && !disabled, _a2["k-disabled"] = disabled, _a2["k-invalid"] = !isValid, _a2["k-loading"] = loading, _a2["k-required"] = this.required, _a2)),
      style: !label ? style : __assign13(__assign13({}, style), {
        width: void 0
      }),
      dir,
      attrs: this.v3 ? void 0 : {
        dir
      },
      onFocusin: this.handleFocus,
      on: this.v3 ? void 0 : {
        "focusin": this.handleFocus,
        "click": this.handleWrapperClick,
        "mousedown": preventDefaultNonInputs
      },
      onClick: this.handleWrapperClick,
      onMousedown: preventDefaultNonInputs
    }, [
      // @ts-ignore  function children
      h(TagList, {
        removeTagIcon,
        attrs: this.v3 ? void 0 : {
          removeTagIcon,
          tagsRounded,
          size,
          fillMode,
          tagRender,
          dataItems: tagsToRender,
          guid: this.base.guid,
          focused: focusedTag ? tagsToRender.find(function(t) {
            return matchTags2(t, focusedTag, dataItemKey);
          }) : void 0
        },
        tagsRounded,
        size,
        fillMode,
        tagRender,
        onTagdelete: this.onTagDelete,
        on: this.v3 ? void 0 : {
          "tagdelete": this.onTagDelete
        },
        dataItems: tagsToRender,
        guid: this.base.guid,
        focused: focusedTag ? tagsToRender.find(function(t) {
          return matchTags2(t, focusedTag, dataItemKey);
        }) : void 0
      }, this.v3 ? function() {
        return [renderSearchBar.call(_this4, id)];
      } : [renderSearchBar.call(_this4, id)]),
      clearButton && // @ts-ignore  function children
      h(ClearButton, {
        onClearclick: this.clearButtonClick,
        on: this.v3 ? void 0 : {
          "clearclick": this.clearButtonClick
        }
      }),
      h("span", {
        "class": loading ? "k-input-loading-icon k-icon k-i-loading" : void 0
      }),
      renderListContainer.call(this)
    ]);
    return label ? h("span", {
      "class": this.spanClassNames,
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      }
    }, [component, this.$props.label ? id ? h("label", {
      "for": id,
      attrs: this.v3 ? void 0 : {
        "for": id
      },
      "class": "k-label"
    }, [this.$props.label]) : h("span", {
      "class": "k-label"
    }, [this.$props.label]) : null]) : component;
  }
};
var MultiSelect = MultiSelectVue2;

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/isObject.js
var isObject2 = function(value2) {
  return typeof value2 === "object";
};

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/classNames.js
var classNames2 = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.filter(function(arg) {
    return arg !== true && !!arg;
  }).map(function(arg) {
    return Array.isArray(arg) ? classNames2.apply(void 0, arg) : isObject2(arg) ? Object.keys(arg).map(function(key, idx) {
      return arg[idx] || arg[key] && key || null;
    }).filter(function(el) {
      return el !== null;
    }).join(" ") : arg;
  }).filter(function(arg) {
    return !!arg;
  }).join(" ");
};

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/guid.js
var guid2 = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/keys.js
var Keys2 = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  delete: 46
};

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/canUseDOM.js
var canUseDOM2 = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/refs.js
function getRef2(comp, refName, customRef) {
  return comp.v3 ? comp["".concat(refName, "Ref")] : comp.$refs["".concat(customRef || refName)];
}
function setRef2(comp, refName, customRef) {
  return comp.v3 ? function(el) {
    comp["".concat(refName, "Ref")] = el;
  } : customRef || refName;
}

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/defaultSlots.js
function getDefaultSlots2(component) {
  var defaultSlots = component.$slots.default;
  return component.v3 && defaultSlots && typeof defaultSlots === "function" ? defaultSlots() : defaultSlots;
}

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/Draggable.js
var _DraggableVue2;
function _typeof2(o) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof2(o);
}
function _defineProperty2(obj, key, value2) {
  key = _toPropertyKey2(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value2;
  }
  return obj;
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return (typeof key === "undefined" ? "undefined" : _typeof2(key)) === "symbol" ? key : String(key);
}
function _toPrimitive2(input, hint) {
  if ((typeof input === "undefined" ? "undefined" : _typeof2(input)) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if ((typeof res === "undefined" ? "undefined" : _typeof2(res)) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var allVue20 = vue_runtime_esm_bundler_exports;
var gh19 = allVue20.h;
var isV320 = allVue20.version && allVue20.version[0] === "3";
var DraggableVue22 = (_DraggableVue2 = {
  // @ts-ignore
  emits: {
    press: null,
    drag: null,
    release: null
  },
  inheritAttrs: false,
  created: function created7() {
    this.element = null;
    var draggable = main_exports;
    var dp = typeof draggable !== "undefined" && draggable.Draggable ? draggable : draggable.default;
    this.draggable = new dp.Draggable({
      press: this.press,
      drag: this.drag,
      release: this.release
    });
  },
  // @ts-ignore
  setup: !isV320 ? void 0 : function() {
    var v3 = !!isV320;
    return {
      v3
    };
  },
  mounted: function mounted9() {
    if (this.$el) {
      this.element = this.$el.nodeType === 3 ? this.$el.nextElementSibling : this.$el;
      this.draggable.bindTo(this.element);
    }
  },
  destroyed: !!isV320 ? void 0 : function() {
    this.draggable.destroy();
  },
  // @ts-ignore
  unmounted: function unmounted2() {
    this.draggable.destroy();
  },
  methods: {
    press: function press2(event) {
      if (this.element) {
        this.$emit("press", event, this.element);
      }
    },
    drag: function drag2(event) {
      if (this.element) {
        this.$emit("drag", event, this.element);
      }
    },
    release: function release2(event) {
      if (this.element) {
        this.$emit("release", event, this.element);
      }
    }
  }
}, _defineProperty2(_DraggableVue2, "setup", !isV320 ? void 0 : function() {
  var v3 = !!isV320;
  return {
    v3
  };
}), _defineProperty2(_DraggableVue2, "render", function render19(createElement) {
  var h = gh19 || createElement;
  return getDefaultSlots2(this);
}), _DraggableVue2);
var Draggable2 = DraggableVue22;

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/getter.js
var getterCache2 = {};
getterCache2.undefined = function() {
  return void 0;
};

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/setter.js
var setterCache2 = {};
setterCache2.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/listeners.js
function getListeners2() {
  if (this.v3) {
    var listeners = {};
    for (var key in this.$attrs) {
      if (key.startsWith("on")) {
        listeners[key] = this.$attrs[key];
      }
    }
    return listeners;
  } else {
    return this.$listeners;
  }
}

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/templateRendering.js
var __assign14 = function() {
  __assign14 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign14.apply(this, arguments);
};
var allVue21 = vue_runtime_esm_bundler_exports;
var isV321 = allVue21.version && allVue21.version[0] === "3";
function templateRendering2(template, listeners) {
  if (!template && template !== false) {
    return void 0;
  }
  if (template.kt) {
    return template;
  }
  var scopedSlot = isV321 ? this.$slots[template] || (template.toLowerCase ? this.$slots[template.toLowerCase()] : null) : this.$scopedSlots[template] || (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()] : null);
  if (typeof template === "string" && scopedSlot) {
    return { kt: true, type: "slot", render: scopedSlot, listeners };
  }
  if (typeof template === "string" || isObject2(template) || typeof template === "function" && template.component) {
    return { kt: true, type: "component", render: template, listeners };
  }
  return { kt: true, type: "renderFunction", render: template, listeners };
}
function getTemplate2(_a2) {
  var h = _a2.h, template = _a2.template, defaultRendering = _a2.defaultRendering, defaultSlots = _a2.defaultSlots, additionalProps = _a2.additionalProps, additionalListeners = _a2.additionalListeners, swapDefaultSlots = _a2.swapDefaultSlots;
  if (!template || template && template.render === true) {
    return defaultRendering;
  }
  var events;
  var props;
  var componentOptions;
  if (isV321) {
    var passedProps = defaultRendering ? defaultRendering.props : {};
    events = __assign14(__assign14({}, transformListeners2(additionalListeners)), template.listeners);
    props = __assign14(__assign14(__assign14({}, passedProps), additionalProps), events);
    componentOptions = __assign14(__assign14({}, props), events);
  } else {
    var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
    var defaultListeners = hasComponentOptions ? defaultRendering.componentOptions.listeners : {};
    var defaultProps = hasComponentOptions ? defaultRendering.componentOptions.propsData : {};
    events = __assign14(__assign14(__assign14(__assign14({}, defaultListeners), additionalListeners), transformListeners2(additionalListeners)), template.listeners);
    props = __assign14(__assign14(__assign14({}, defaultProps), additionalProps), events);
    componentOptions = { props, on: events };
  }
  if (template.type === "slot") {
    var slotTemplate = template.render({
      props,
      listeners: events,
      methods: events,
      defaultSlots
    });
    return isV321 ? slotTemplate : slotTemplate ? slotTemplate[0] : void 0;
  } else if (template.type === "renderFunction") {
    if (swapDefaultSlots) {
      return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : void 0;
    }
    return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : void 0;
  } else {
    return h(template.render, componentOptions, isV321 ? function() {
      return [defaultSlots];
    } : [defaultSlots]);
  }
}
function transformListeners2(listeners) {
  if (!listeners) {
    return listeners;
  }
  var newListeners = {};
  var listenersKeys = Object.keys(listeners);
  for (var i = 0; i < listenersKeys.length; i++) {
    var currentKey = listenersKeys[i];
    newListeners["on" + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] = listeners[currentKey];
  }
  return newListeners;
}

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/isRtl.js
function isRtl2(element) {
  return Boolean(canUseDOM2 && element && getComputedStyle(element).direction === "rtl");
}

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/validate-package.js
function validatePackage2(packageMetadata3) {
  var licensing = index_esm_exports;
  var ls = typeof licensing !== "undefined" && licensing.validatePackage ? licensing : licensing.default;
  if (ls && ls.validatePackage) {
    ls.validatePackage(packageMetadata3);
  } else {
    var message = "License activation failed for ".concat(packageMetadata3.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata3.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/theme.js
var kendoThemeMaps2 = {
  sizeMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  roundedMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  }
};

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/browser-support.service.js
var getDocument2 = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService2 = (
  /** @class */
  function() {
    function BrowserSupportService3() {
    }
    Object.defineProperty(BrowserSupportService3.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument2();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService3;
  }()
);

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/icons/constants.js
var SIZE_CLASSES2 = {
  "default": "",
  "xsmall": "k-icon-xs",
  "small": "k-icon-sm",
  "medium": "k-icon-md",
  "large": "k-icon-lg",
  "xlarge": "k-icon-xl",
  "xxlarge": "k-icon-xxl",
  "xxxlarge": "k-icon-xxxl"
};

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/icons/FontIcon.js
var allVue22 = vue_runtime_esm_bundler_exports;
var gh20 = allVue22.h;
var isV322 = allVue22.version && allVue22.version[0] === "3";
var FontIconVue22 = {
  name: "KendoFontIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    tabIndex: Number
  },
  computed: {
    fontClassNames: function fontClassNames2() {
      var _a2;
      var _b = this.$props, name = _b.name, flip = _b.flip, size = _b.size, themeColor = _b.themeColor;
      return _a2 = {
        "k-icon": true
      }, _a2["k-i-" + name] = name, _a2["k-color-" + themeColor] = themeColor, _a2["k-flip-h"] = flip === "horizontal" || flip === "both", _a2["k-flip-v"] = flip === "vertical" || flip === "both", _a2[SIZE_CLASSES2[size]] = size, _a2;
    }
  },
  // @ts-ignore
  setup: !isV322 ? void 0 : function() {
    var v3 = !!isV322;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render20(createElement) {
    var h = gh20 || createElement;
    var _a2 = this.$props, id = _a2.id, title = _a2.title, tabIndex = _a2.tabIndex, ariaLabel = _a2.ariaLabel;
    return h("span", {
      "class": this.fontClassNames,
      id,
      attrs: this.v3 ? void 0 : {
        id,
        title,
        "aria-label": ariaLabel,
        tabIndex,
        role: "presentation"
      },
      title,
      "aria-label": ariaLabel,
      tabIndex,
      role: "presentation",
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    });
  },
  methods: {
    handleClick: function handleClick6(e) {
      this.$emit("click", e);
    }
  }
};
var FontIcon2 = FontIconVue22;

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/icons/SvgIcon.js
var __assign15 = function() {
  __assign15 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign15.apply(this, arguments);
};
var allVue23 = vue_runtime_esm_bundler_exports;
var gh21 = allVue23.h;
var isV323 = allVue23.version && allVue23.version[0] === "3";
var SvgIconVue22 = {
  name: "KendoSvgIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    icon: Object,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number,
    svgClassName: String,
    svgStyle: Object
  },
  computed: {
    wrapperClass: function wrapperClass3() {
      var _a2;
      var _b = this.$props, name = _b.name, flip = _b.flip, size = _b.size, themeColor = _b.themeColor;
      return _a2 = {
        "k-svg-icon": true
      }, _a2["k-color-" + themeColor] = themeColor, _a2["k-svg-i-" + name] = name, _a2["k-flip-h"] = flip === "horizontal" || flip === "both", _a2["k-flip-v"] = flip === "vertical" || flip === "both", _a2[SIZE_CLASSES2[size]] = size, _a2;
    }
  },
  // @ts-ignore
  setup: !isV323 ? void 0 : function() {
    var v3 = !!isV323;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render21(createElement) {
    var h = gh21 || createElement;
    var defaultSlot = getDefaultSlots2(this);
    var _a2 = this.$props, svgClassName = _a2.svgClassName, icon = _a2.icon, id = _a2.id, tabIndex = _a2.tabIndex, svgStyle = _a2.svgStyle, viewBox = _a2.viewBox, title = _a2.title, ariaLabel = _a2.ariaLabel;
    var innerHTML = icon ? icon.content : void 0;
    var attrs = {
      id,
      title,
      "aria-hidden": true,
      tabIndex,
      ariaLabel,
      focusable: "false",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: icon ? icon.viewBox : viewBox
    };
    var svg = h("svg", __assign15(__assign15({}, attrs), {
      attrs: this.v3 ? void 0 : attrs,
      domProps: this.v3 ? void 0 : {
        innerHTML
      },
      innerHTML,
      "class": svgClassName,
      style: svgStyle
    }), icon ? [] : [defaultSlot]);
    return h("span", {
      "class": this.wrapperClass,
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }, [svg]);
  },
  methods: {
    handleClick: function handleClick7(e) {
      this.$emit("click", e);
    }
  }
};
var SvgIcon2 = SvgIconVue22;

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/icons/Icon.js
var __assign16 = function() {
  __assign16 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign16.apply(this, arguments);
};
var allVue24 = vue_runtime_esm_bundler_exports;
var gh22 = allVue24.h;
var isV324 = allVue24.version && allVue24.version[0] === "3";
var IconVue22 = {
  name: "KendoIcon",
  // @ts-ignore
  emits: {
    click: null
  },
  inject: {
    kendoIcons: {
      default: {
        type: "svg",
        icons: {}
      }
    }
  },
  props: {
    name: String,
    icon: Object,
    title: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    viewBox: {
      type: String,
      default: "0 0 24 24"
    },
    tabIndex: Number
  },
  // @ts-ignore
  setup: !isV324 ? void 0 : function() {
    var v3 = !!isV324;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render22(createElement) {
    var h = gh22 || createElement;
    var _a2 = this.$props, name = _a2.name, icon = _a2.icon, themeColor = _a2.themeColor, size = _a2.size, flip = _a2.flip, id = _a2.id, viewBox = _a2.viewBox, tabIndex = _a2.tabIndex, title = _a2.title, ariaLabel = _a2.ariaLabel;
    var svg = name && this.kendoIcons && this.kendoIcons.icons && this.kendoIcons.icons[name] || icon;
    var renderSVG = this.kendoIcons && this.kendoIcons.type === "svg" && svg !== void 0;
    var newSize = this.kendoIcons && this.kendoIcons.size ? this.kendoIcons.size : size;
    var newFlip = this.kendoIcons && this.kendoIcons.flip ? this.kendoIcons.flip : flip;
    var resolvedName = name || (icon && icon.name ? icon.name : void 0);
    var commonProps = {
      themeColor,
      size: newSize,
      flip: newFlip,
      id,
      tabIndex,
      title,
      ariaLabel
    };
    var fontIcon = h(FontIcon2, __assign16(__assign16({}, commonProps), {
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign16(__assign16({}, commonProps), {
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    var svgIcon = h(SvgIcon2, __assign16(__assign16({}, commonProps), {
      icon: svg,
      viewBox,
      name: resolvedName,
      attrs: this.v3 ? void 0 : __assign16(__assign16({}, commonProps), {
        icon: svg,
        viewBox,
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      }
    }));
    return renderSVG ? svgIcon : fontIcon;
  },
  methods: {
    handleClick: function handleClick8(e) {
      this.$emit("click", e);
    }
  }
};
var Icon2 = IconVue22;

// node_modules/@progress/kendo-vue-treeview/node_modules/@progress/kendo-vue-common/dist/es/navigation.js
var Navigation3 = (
  /** @class */
  function() {
    function Navigation4(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        _this.focusElement(all[index % all.length], target);
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation4.prototype, "elements", {
      get: function() {
        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation4.prototype, "first", {
      get: function() {
        return this.root && this.root.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation4.prototype, "last", {
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation4.prototype, "current", {
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation4.prototype.focusNext = function(target) {
      this.focusNextIndex(target, 1);
    };
    Navigation4.prototype.focusPrevious = function(target) {
      this.focusNextIndex(target, -1);
    };
    Navigation4.prototype.triggerKeyboardEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev);
      }
    };
    Navigation4.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation4.prototype.focusElement = function(element, previous) {
      if (element) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element.setAttribute("tabindex", String(this.tabIndex));
        }
        element.focus({ preventScroll: true });
      }
    };
    return Navigation4;
  }()
);

// node_modules/@progress/kendo-vue-treeview/dist/es/utils/itemIdUtils.js
var EMPTY_ID = "";
var ZERO_LEVEL_ZERO_NODE_ID = "0";
var SEPARATOR = "_";
function getItemById(itemId, items, childrenField) {
  if (isIdZeroLevel(itemId)) {
    return items[Number(itemId)];
  } else {
    var rootParentItem = items[Number(getRootParentId(itemId))];
    var subItems = rootParentItem && rootParentItem[childrenField] || [];
    return subItems.length ? getItemById(getIdWithoutRootParentId(itemId), subItems, childrenField) : void 0;
  }
}
function getRootParentId(itemId) {
  return isIdEmptyOrZeroLevel(itemId) ? itemId : itemId.split(SEPARATOR)[0];
}
function getIdWithoutRootParentId(itemId) {
  if (isIdEmptyOrZeroLevel(itemId)) {
    return itemId;
  } else {
    var firstSeparatorIndex = itemId.indexOf(SEPARATOR);
    return itemId.substring(firstSeparatorIndex + 1);
  }
}
function getFirstChildId(itemId) {
  return createId("0", itemId);
}
function createId(childId, parentId) {
  childId = childId.toString();
  return parentId ? parentId + SEPARATOR + childId : childId;
}
function getDirectParentId(itemId) {
  var lastSeparatorIndex = itemId.lastIndexOf(SEPARATOR);
  return lastSeparatorIndex < 0 ? EMPTY_ID : itemId.substring(0, lastSeparatorIndex);
}
function isIdEmptyOrZeroLevel(itemId) {
  return itemId === EMPTY_ID || itemId.indexOf(SEPARATOR) < 0;
}
function isIdZeroLevel(itemId) {
  return itemId !== EMPTY_ID && itemId.indexOf(SEPARATOR) < 0;
}
function getAllShortIds(itemId) {
  return itemId.split(SEPARATOR);
}
function getShortId(itemId) {
  var lastSeparatorIndex = itemId.lastIndexOf(SEPARATOR);
  return lastSeparatorIndex < 0 ? itemId : itemId.substring(lastSeparatorIndex + 1);
}

// node_modules/@progress/kendo-vue-treeview/dist/es/utils/SortedPublicItemIds.js
var PROPS_COUNT_LIMIT = 5e4;
var SortedPublicItemIds = (
  /** @class */
  function() {
    function SortedPublicItemIds2() {
      this.objects = [];
    }
    SortedPublicItemIds2.prototype.init = function(publicItemIds) {
      var currentObj;
      for (var i = 0; i < publicItemIds.length; i++) {
        if (i % PROPS_COUNT_LIMIT === 0) {
          currentObj = {};
          this.objects.push(currentObj);
        }
        currentObj[publicItemIds[i]] = true;
      }
    };
    SortedPublicItemIds2.prototype.hasId = function(publicItemId) {
      return this.objects.some(function(obj) {
        return obj[publicItemId];
      });
    };
    return SortedPublicItemIds2;
  }()
);
var SortedPublicItemIds_default = SortedPublicItemIds;

// node_modules/@progress/kendo-vue-treeview/dist/es/utils/misc.js
function getNestedValue(fieldName, dataItem) {
  var path = (fieldName || "").split(".");
  var data10 = dataItem;
  path.forEach(function(p) {
    data10 = data10 ? data10[p] : void 0;
  });
  return data10;
}

// node_modules/@progress/kendo-vue-treeview/dist/es/utils/itemUtils.js
function hasChildren(item2, childrenField) {
  var children = getNestedValue(childrenField, item2);
  return Boolean(children && children.length);
}
function isItemExpandedAndWithChildren(item2, fieldsSvc2) {
  return fieldsSvc2.expanded(item2) && hasChildren(item2, fieldsSvc2.getChildrenField());
}
function resolveItemId(publicId, idField, items, childrenField) {
  var resolvedIds = resolveItemsIds([publicId], idField, items, childrenField);
  return resolvedIds.length ? resolvedIds[0] : void 0;
}
function resolveItemsIds(publicIds, idField, items, childrenField) {
  var result = [];
  var sortedIds = new SortedPublicItemIds_default();
  sortedIds.init(publicIds);
  resolveItemsIdsHelper(sortedIds, idField, items, EMPTY_ID, result, childrenField);
  return result;
}
function isEnabledAndAllParentsEnabled(itemId, items, fieldsSvc2) {
  var ids = getAllShortIds(itemId);
  var currentItems = items;
  for (var i = 0; i < ids.length; i++) {
    var currentItem = currentItems[Number(ids[i])];
    if (fieldsSvc2.disabled(currentItem)) {
      return false;
    } else {
      currentItems = currentItem[fieldsSvc2.getChildrenField()];
    }
  }
  return true;
}
function resolveItemsIdsHelper(publicItemIds, idField, items, parentItemId, resolvedIds, childrenField) {
  for (var i = 0; i < items.length; i++) {
    var item2 = items[i];
    var id = createId(i, parentItemId);
    if (publicItemIds.hasId(getNestedValue(idField, item2))) {
      resolvedIds.push(id);
    }
    if (hasChildren(item2, childrenField)) {
      resolveItemsIdsHelper(publicItemIds, idField, getNestedValue(childrenField, item2), id, resolvedIds, childrenField);
    }
  }
}

// node_modules/@progress/kendo-vue-treeview/dist/es/utils/getItemIdUponKeyboardNavigation.js
function getItemIdUponKeyboardNavigation(item2, itemId, items, keyCode, fieldsSvc2) {
  switch (keyCode) {
    case Keys2.left:
      return getIdUponLeftKey();
    case Keys2.right:
      return getIdUponRightKey();
    case Keys2.up:
      return getIdUponUpKey();
    case Keys2.down:
      return getIdUponDownKey();
    case Keys2.home:
      return ZERO_LEVEL_ZERO_NODE_ID;
    case Keys2.end:
      return getIdUponEndKey();
    default:
      return itemId;
  }
  function getIdUponLeftKey() {
    return isIdZeroLevel(itemId) || fieldsSvc2.expanded(item2) && isEnabledAndAllParentsEnabled(itemId, items, fieldsSvc2) ? itemId : getDirectParentId(itemId);
  }
  function getIdUponRightKey() {
    return isItemExpandedAndWithChildren(item2, fieldsSvc2) ? getFirstChildId(itemId) : itemId;
  }
  function getIdUponUpKey() {
    var index = Number(getShortId(itemId));
    var parentId = getDirectParentId(itemId);
    return index ? getLastNotOpenedChildId(createId(index - 1, parentId), items, fieldsSvc2) : isIdZeroLevel(itemId) ? itemId : parentId;
  }
  function getIdUponDownKey() {
    if (isItemExpandedAndWithChildren(item2, fieldsSvc2)) {
      return getFirstChildId(itemId);
    } else {
      return getNextItemId(itemId, items, fieldsSvc2) || itemId;
    }
  }
  function getIdUponEndKey() {
    var result = (items.length - 1).toString();
    var currentItem = items[items.length - 1];
    var children;
    while (isItemExpandedAndWithChildren(currentItem, fieldsSvc2)) {
      children = currentItem[fieldsSvc2.getChildrenField()];
      result = createId(children.length - 1, result);
      currentItem = children[children.length - 1];
    }
    return result;
  }
}
function getNextItemId(itemId, items, fieldsSvc2) {
  var parentId = getDirectParentId(itemId);
  var parent = parentId ? getItemById(parentId, items, fieldsSvc2.getChildrenField()) : void 0;
  var siblings = parent ? parent[fieldsSvc2.getChildrenField()] : items;
  var index = Number(getShortId(itemId));
  return index < siblings.length - 1 ? createId(index + 1, parentId) : parent ? getNextItemId(parentId, items, fieldsSvc2) : void 0;
}
function getLastNotOpenedChildId(itemId, items, fieldsSvc2) {
  var item2 = getItemById(itemId, items, fieldsSvc2.getChildrenField());
  if (isItemExpandedAndWithChildren(item2, fieldsSvc2)) {
    return getLastNotOpenedChildId(createId(item2[fieldsSvc2.getChildrenField()].length - 1, itemId), items, fieldsSvc2);
  } else {
    return itemId;
  }
}

// node_modules/@progress/kendo-vue-treeview/dist/es/utils/consts.js
var EXPAND_FIELD = "expanded";
var TEXT_FIELD = "text";
var DISABLED_FIELD = "disabled";
var CHILDREN_FIELD = "items";
var HAS_CHILDREN_FIELD = "hasChildren";
var SELECT_FIELD = "selected";
var CHECK_FIELD = "checked";
var CHECK_INDETERMINATE_FIELD = "checkIndeterminate";
var DOM_KENDO_ITEM_ID_FIELD = "_kendoItemId";
var DOM_KENDO_TREEVIEW_GUID_FIELD = "_kendoTreeViewGuid";

// node_modules/@progress/kendo-vue-treeview/dist/es/TreeViewItem.js
var __assign17 = function() {
  __assign17 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign17.apply(this, arguments);
};
var allVue25 = vue_runtime_esm_bundler_exports;
var gh23 = allVue25.h;
var isV325 = allVue25.version && allVue25.version[0] === "3";
var sizeMap6 = kendoThemeMaps2.sizeMap;
var TreeViewItemVue2 = {
  name: "KendoTreeViewItem",
  props: {
    item: Object,
    itemId: String,
    treeGuid: String,
    animate: Boolean,
    focusedItemId: String,
    tabbableItemId: String,
    fieldsService: Object,
    itemUI: Object,
    ariaMultiSelectable: Boolean,
    expandIcons: Boolean,
    checkboxes: Boolean,
    onFocusDomElNeeded: Object,
    draggable: Boolean,
    isRtl: Boolean,
    size: {
      type: String,
      default: "medium",
      validator: function validator20(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    disabled: Boolean,
    ariaLevel: Number
  },
  computed: {
    fieldsSvc: function fieldsSvc() {
      return this.$props.fieldsService;
    },
    currentTabIndex: function currentTabIndex() {
      return (this.$props.focusedItemId || this.$props.tabbableItemId) === this.itemId ? 0 : -1;
    },
    ariaExpanded: function ariaExpanded() {
      return this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField()) ? Boolean(this.fieldsSvc.expanded(this.item)) : void 0;
    },
    ariaChecked: function ariaChecked() {
      if (this.$props.checkboxes) {
        if (this.fieldsSvc.checked(this.item)) {
          return "true";
        } else {
          return this.fieldsSvc.checkIndeterminate(this.item) ? "mixed" : "false";
        }
      } else {
        return void 0;
      }
    },
    ariaSelected: function ariaSelected() {
      if (this.fieldsSvc.selected(this.item)) {
        return true;
      } else if (this.$props.ariaMultiSelectable) {
        return this.computedDisabled ? void 0 : false;
      } else {
        return void 0;
      }
    },
    computedDisabled: function computedDisabled() {
      var itemDisabled = this.fieldsSvc.disabled(this.item);
      return itemDisabled !== void 0 ? itemDisabled : this.disabled;
    }
  },
  created: function created8() {
    this.itemGuid = guid2();
    this.prevFocusedItemId = this.focusedItemId;
    this.prevFieldsService = this.fieldsService;
    this.prevItem = this.item;
  },
  data: function data6() {
    return {
      isMounted: false
    };
  },
  watch: {
    focusedItemId: function focusedItemId(_, oldValue) {
      this.prevFocusedItemId = oldValue;
    },
    fieldsService: function fieldsService(_, oldValue) {
      this.prevFieldsService = oldValue;
    },
    item: function item(_, oldValue) {
      this.prevItem = oldValue;
    }
  },
  mounted: function mounted10() {
    var focusedItemId2 = this.$props.focusedItemId;
    var currentItemId = this.itemId;
    if (focusedItemId2 && focusedItemId2 === currentItemId) {
      this.$emit("focusdomelneeded", this.$el);
    }
    this.checkboxElement = getRef2(this, "checkboxElement");
    if (this.checkboxElement) {
      this.checkboxElement.indeterminate = this.fieldsSvc.checkIndeterminate(this.item);
    }
    this.assignDraggableMeta(this.$refs.treemid);
    this.isMounted = true;
  },
  updated: function updated6() {
    var focusedItemId2 = this.$props.focusedItemId;
    if (focusedItemId2 && focusedItemId2 !== this.prevFocusedItemId && focusedItemId2 === this.itemId) {
      this.$emit("focusdomelneeded", this.$el);
    }
    this.checkboxElement = getRef2(this, "checkboxElement");
    if (this.checkboxElement) {
      var indeterminate = this.fieldsSvc.checkIndeterminate(this.item);
      if (indeterminate !== this.prevFieldsService.checkIndeterminate(this.prevItem)) {
        this.checkboxElement.indeterminate = indeterminate;
      }
    }
    this.assignDraggableMeta(this.$refs.treemid);
  },
  // @ts-ignore
  setup: !isV325 ? void 0 : function() {
    var v3 = !!isV325;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render23(createElement) {
    var _this2 = this;
    var _this = this;
    var h = gh23 || createElement;
    var subitems = function subitems2() {
      return isItemExpandedAndWithChildren(this.item, this.fieldsSvc) ? h("ul", {
        "class": "k-treeview-group",
        role: "group",
        attrs: this.v3 ? void 0 : {
          role: "group"
        }
      }, [this.fieldsSvc.children(this.item).map(function(item2, index) {
        return h(TreeViewItem, {
          item: item2,
          attrs: this.v3 ? void 0 : {
            item: item2,
            itemId: createId(index, this.itemId),
            treeGuid: this.$props.treeGuid,
            animate: this.$props.animate,
            focusedItemId: this.$props.focusedItemId,
            tabbableItemId: this.$props.tabbableItemId,
            fieldsService: this.$props.fieldsService,
            itemUI: this.$props.itemUI,
            checkboxes: this.$props.checkboxes,
            ariaMultiSelectable: this.$props.ariaMultiSelectable,
            ariaLevel: this.$props.ariaLevel + 1,
            draggable: this.$props.draggable,
            expandIcons: this.$props.expandIcons,
            size: this.$props.size,
            disabled: this.computedDisabled,
            isRtl: this.$props.isRtl
          },
          itemId: createId(index, this.itemId),
          treeGuid: this.$props.treeGuid,
          animate: this.$props.animate,
          focusedItemId: this.$props.focusedItemId,
          tabbableItemId: this.$props.tabbableItemId,
          fieldsService: this.$props.fieldsService,
          itemUI: this.$props.itemUI,
          checkboxes: this.$props.checkboxes,
          ariaMultiSelectable: this.$props.ariaMultiSelectable,
          ariaLevel: this.$props.ariaLevel + 1,
          onItemclick: this.handleItemClick,
          on: this.v3 ? void 0 : {
            "itemclick": this.handleItemClick,
            "focusdomelneeded": this.handleFocusDomElNeeded,
            "press": this.handlePress,
            "drag": this.handleDrag,
            "release": this.handleRelease,
            "expandchange": this.handleExpandChange,
            "checkchange": this.handleCheckChange
          },
          onFocusdomelneeded: this.handleFocusDomElNeeded,
          draggable: this.$props.draggable,
          onPress: this.handlePress,
          onDrag: this.handleDrag,
          onRelease: this.handleRelease,
          expandIcons: this.$props.expandIcons,
          onExpandchange: this.handleExpandChange,
          onCheckchange: this.handleCheckChange,
          key: index,
          size: this.$props.size,
          disabled: this.computedDisabled,
          isRtl: this.$props.isRtl
        });
      }, this)]) : void 0;
    };
    var renderExpandIcon = function renderExpandIcon2() {
      var renderExpand = this.$props.expandIcons && // If it is explicitly said that the item has children (even not loaded yet)
      // or if the item actually has children, then render the icon.
      (this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField()));
      return renderExpand && h("span", {
        "class": classNames2("k-treeview-toggle", {
          "k-disabled": this.computedDisabled
        })
      }, [h(Icon2, {
        name: this.getIconClassName(),
        attrs: this.v3 ? void 0 : {
          name: this.getIconClassName(),
          icon: this.getIconSVG()
        },
        icon: this.getIconSVG(),
        onClick: this.handleExpandChange,
        on: this.v3 ? void 0 : {
          "click": this.handleExpandChange
        }
      })]);
    };
    var renderCheckbox = function renderCheckbox2() {
      var _a2;
      if (this.$props.checkboxes) {
        var size = this.$props.size;
        return h("div", {
          "class": "k-checkbox-wrap",
          role: "presentation",
          attrs: this.v3 ? void 0 : {
            role: "presentation"
          }
        }, [h("input", {
          type: "checkbox",
          attrs: this.v3 ? void 0 : {
            type: "checkbox",
            "aria-label": this.item.text,
            "aria-hidden": true,
            id: this.itemGuid,
            tabindex: -1
          },
          "class": classNames2("k-checkbox k-rounded-md", (_a2 = {}, _a2["k-checkbox-".concat(sizeMap6[size] || size)] = size, _a2["k-disabled"] = this.computedDisabled, _a2)),
          "aria-label": this.item.text,
          "aria-hidden": true,
          checked: this.v3 ? Boolean(this.fieldsSvc.checked(this.item)) : null,
          domProps: this.v3 ? void 0 : {
            "checked": Boolean(this.fieldsSvc.checked(this.item))
          },
          id: this.itemGuid,
          tabindex: -1,
          onChange: this.handleCheckChange,
          on: this.v3 ? void 0 : {
            "change": this.handleCheckChange
          },
          ref: setRef2(this, "checkboxElement")
        }), h("label", {
          "class": "k-checkbox-label",
          "for": this.itemGuid,
          attrs: this.v3 ? void 0 : {
            "for": this.itemGuid
          }
        })]);
      } else {
        return void 0;
      }
    };
    var itemRender = getTemplate2.call(this, {
      h,
      template: this.$props.itemUI,
      defaultRendering: this.fieldsSvc.text(this.item),
      additionalProps: {
        item: this.item,
        itemHierarchicalIndex: this.itemId
      }
    });
    var itemInPart = function itemInPart2() {
      return h("span", {
        "class": this.getContentClassName(),
        style: {
          touchAction: "none"
        },
        onClick: this.handleItemClick,
        on: this.v3 ? void 0 : {
          "click": this.handleItemClick
        }
      }, [h("span", {
        "class": "k-treeview-leaf-text"
      }, [itemRender])]);
    };
    return h("li", {
      "class": classNames2("k-treeview-item"),
      tabindex: this.currentTabIndex,
      attrs: this.v3 ? void 0 : {
        tabindex: this.currentTabIndex,
        role: "treeitem",
        "aria-level": this.$props.ariaLevel,
        "aria-expanded": this.ariaExpanded,
        "aria-selected": this.ariaSelected,
        "aria-checked": this.ariaChecked,
        "aria-disabled": this.computedDisabled ? true : void 0
      },
      role: "treeitem",
      "aria-level": this.$props.ariaLevel,
      "aria-expanded": this.ariaExpanded,
      "aria-selected": this.ariaSelected,
      "aria-checked": this.ariaChecked,
      "aria-disabled": this.computedDisabled ? true : void 0
    }, [h("div", {
      "class": "k-treeview-mid",
      ref: "treemid"
    }, [renderExpandIcon.call(this), renderCheckbox.call(this), this.$props.draggable ? (
      // @ts-ignore  function children
      h(Draggable2, {
        onPress: function onPress2(e) {
          return _this.handlePress(e);
        },
        on: this.v3 ? void 0 : {
          "press": function onPress2(e) {
            return _this.handlePress(e);
          },
          "drag": function drag3(e) {
            return _this.handleDrag(e);
          },
          "release": function release3(e) {
            return _this.handleRelease(e);
          }
        },
        onDrag: function drag3(e) {
          return _this.handleDrag(e);
        },
        onRelease: function release3(e) {
          return _this.handleRelease(e);
        }
      }, this.v3 ? function() {
        return [itemInPart.call(_this2)];
      } : [itemInPart.call(_this2)])
    ) : itemInPart.call(this)]), this.$props.animate && this.isMounted ? (
      // @ts-ignore  function children
      h(Reveal, {
        appear: this.ariaExpanded,
        attrs: this.v3 ? void 0 : {
          appear: this.ariaExpanded,
          transitionEnterDuration: 200,
          transitionExitDuration: 200
        },
        transitionEnterDuration: 200,
        transitionExitDuration: 200,
        key: this.itemGuid + "_animation",
        style: {
          display: "block"
        }
      }, this.v3 ? function() {
        return [subitems.call(_this2)];
      } : [subitems.call(_this2)])
    ) : subitems.call(this)]);
  },
  methods: {
    handleCheckChange: function handleCheckChange(e, subItem, subItemId) {
      this.$emit("checkchange", e, subItem || this.item, subItemId || this.itemId);
    },
    handleExpandChange: function handleExpandChange(e, subItem, subItemId) {
      this.$emit("expandchange", e, subItem || this.item, subItemId || this.itemId);
    },
    handleItemClick: function handleItemClick5(e, subItem, subItemId) {
      this.$emit("itemclick", e, subItem || this.item, subItemId || this.itemId);
    },
    handlePress: function handlePress(e, subItem, subItemId) {
      this.$emit("press", e, subItem || __assign17({}, this.item), subItemId || this.itemId);
    },
    handleDrag: function handleDrag(e, subItem, subItemId) {
      this.$emit("drag", e, subItem || this.item, subItemId || this.itemId);
    },
    handleRelease: function handleRelease(e, subItem, subItemId) {
      this.$emit("release", e, subItem || this.item, subItemId || this.itemId);
    },
    handleFocusDomElNeeded: function handleFocusDomElNeeded(e) {
      this.$emit("focusdomelneeded", e);
    },
    getIconClassName: function getIconClassName() {
      var expanded = this.fieldsSvc.expanded(this.item);
      return expanded && !hasChildren(this.item, this.fieldsSvc.getChildrenField()) ? "loading" : expanded ? "caret-alt-down" : this.$props.isRtl ? "caret-alt-left" : "caret-alt-right";
    },
    getIconSVG: function getIconSVG() {
      var expanded = this.fieldsSvc.expanded(this.item);
      return expanded ? caretAltDownIcon : this.$props.isRtl ? caretAltLeftIcon : caretAltRightIcon;
    },
    getContentClassName: function getContentClassName() {
      return classNames2("k-treeview-leaf", {
        "k-focus": this.$props.focusedItemId === this.itemId,
        "k-selected": this.fieldsSvc.selected(this.item),
        "k-disabled": this.computedDisabled
      });
    },
    assignDraggableMeta: function assignDraggableMeta(element) {
      if (element && !element[DOM_KENDO_ITEM_ID_FIELD]) {
        element[DOM_KENDO_ITEM_ID_FIELD] = this.$props.itemId;
        element[DOM_KENDO_TREEVIEW_GUID_FIELD] = this.$props.treeGuid;
      }
    }
  }
};
var TreeViewItem = TreeViewItemVue2;

// node_modules/@progress/kendo-vue-treeview/dist/es/utils/FieldsService.js
var FieldsService = (
  /** @class */
  function() {
    function FieldsService2(treeViewProps) {
      this.expandField = treeViewProps.expandField;
      this.selectField = treeViewProps.selectField;
      this.hasChildrenField = treeViewProps.hasChildrenField;
      this.childrenField = treeViewProps.childrenField;
      this.textField = treeViewProps.textField;
      this.disableField = treeViewProps.disableField;
      this.checkField = treeViewProps.checkField;
      this.checkIndeterminateField = treeViewProps.checkIndeterminateField;
      this.focusIdField = treeViewProps.focusIdField;
    }
    FieldsService2.prototype.expanded = function(item2) {
      return getNestedValue(this.expandField, item2);
    };
    FieldsService2.prototype.selected = function(item2) {
      return getNestedValue(this.selectField, item2);
    };
    FieldsService2.prototype.text = function(item2) {
      return getNestedValue(this.textField, item2);
    };
    FieldsService2.prototype.disabled = function(item2) {
      return getNestedValue(this.disableField, item2);
    };
    FieldsService2.prototype.hasChildren = function(item2) {
      return getNestedValue(this.hasChildrenField, item2);
    };
    FieldsService2.prototype.children = function(item2) {
      var children = getNestedValue(this.childrenField, item2);
      return children ? children : [];
    };
    FieldsService2.prototype.checked = function(item2) {
      return getNestedValue(this.checkField, item2);
    };
    FieldsService2.prototype.checkIndeterminate = function(item2) {
      return getNestedValue(this.checkIndeterminateField, item2);
    };
    FieldsService2.prototype.focusId = function(item2) {
      return this.focusIdField && getNestedValue(this.focusIdField, item2);
    };
    FieldsService2.prototype.getChildrenField = function() {
      return this.childrenField;
    };
    return FieldsService2;
  }()
);
var FieldsService_default = FieldsService;

// node_modules/@progress/kendo-vue-treeview/dist/es/package-metadata.js
var packageMetadata2 = {
  name: "@progress/kendo-vue-treeview",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1693312582,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-treeview/dist/es/TreeView.js
var allVue26 = vue_runtime_esm_bundler_exports;
var gh24 = allVue26.h;
var isV326 = allVue26.version && allVue26.version[0] === "3";
var sizeMap7 = kendoThemeMaps2.sizeMap;
var TreeViewVue2 = {
  name: "KendoTreeView",
  // @ts-ignore
  emits: {
    blur: null,
    focus: null,
    itemdragstart: null,
    itemdragover: null,
    itemdragend: null,
    keydown: null,
    itemclick: null,
    expandchange: null,
    checkchange: null
  },
  props: {
    dataItems: Array,
    animate: {
      type: Boolean,
      default: true
    },
    id: String,
    draggable: Boolean,
    tabIndex: Number,
    focusIdField: String,
    getFocusHierarchicalIndex: Function,
    expandField: {
      type: String,
      default: EXPAND_FIELD
    },
    selectField: {
      type: String,
      default: SELECT_FIELD
    },
    childrenField: {
      type: String,
      default: CHILDREN_FIELD
    },
    hasChildrenField: {
      type: String,
      default: HAS_CHILDREN_FIELD
    },
    expandIcons: Boolean,
    checkboxes: Boolean,
    textField: {
      type: String,
      default: TEXT_FIELD
    },
    disableField: {
      type: String,
      default: DISABLED_FIELD
    },
    checkField: {
      type: String,
      default: CHECK_FIELD
    },
    checkIndeterminateField: {
      type: String,
      default: CHECK_INDETERMINATE_FIELD
    },
    item: [Object, String, Function],
    ariaMultiSelectable: [String, Boolean],
    ariaLabel: String,
    ariaLabelledby: String,
    size: {
      type: String,
      default: "medium",
      validator: function validator21(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    }
  },
  data: function data7() {
    return {
      currentRtl: false,
      focusedItemId: void 0,
      focusedItemPublicId: void 0,
      tabbableItemId: ZERO_LEVEL_ZERO_NODE_ID
    };
  },
  mounted: function mounted11() {
    this.currentRtl = isRtl2(this.$el);
  },
  computed: {
    treeGuid: function treeGuid() {
      return this.id || this.innerId;
    }
  },
  created: function created9() {
    validatePackage2(packageMetadata2);
    this.allowExplicitFocus = false;
    this.innerId = guid2();
  },
  updated: function updated7() {
    this.allowExplicitFocus = false;
    this.refocusDueToFocusIdField();
  },
  // @ts-ignore
  setup: !isV326 ? void 0 : function() {
    var v3 = !!isV326;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render24(createElement) {
    var _a2;
    var h = gh24 || createElement;
    this.fieldsSvc = new FieldsService_default(this.$props);
    var size = this.$props.size;
    return h("div", {
      "class": classNames2("k-treeview", (_a2 = {}, _a2["k-treeview-".concat(sizeMap7[size] || size)] = size, _a2["k-user-select-none"] = this.draggable, _a2["k-rtl"] = this.currentRtl, _a2)),
      onKeydown: this.onKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onKeyDown,
        "focusin": this.onFocus,
        "focusout": this.onBlur
      },
      onFocusin: this.onFocus,
      onFocusout: this.onBlur,
      "aria-multiselectable": this.ariaMultiSelectable ? true : void 0,
      attrs: this.v3 ? void 0 : {
        "aria-multiselectable": this.ariaMultiSelectable ? true : void 0,
        "aria-label": this.$props["aria-label"],
        "aria-labelledby": this.$props["aria-labelledby"],
        tabindex: this.$props.tabIndex
      },
      "aria-label": this.$props["aria-label"],
      "aria-labelledby": this.$props["aria-labelledby"],
      tabindex: this.$props.tabIndex,
      style: {
        userSelect: this.draggable ? "none" : void 0
      }
    }, [h("ul", {
      "class": "k-treeview-lines k-treeview-group",
      role: "tree",
      attrs: this.v3 ? void 0 : {
        role: "tree"
      }
    }, [this.dataItems.map(function(item2, index) {
      var itemTemplate = templateRendering2.call(this, this.item, getListeners2.call(this));
      return h(TreeViewItem, {
        item: item2,
        attrs: this.v3 ? void 0 : {
          item: item2,
          itemId: index.toString(),
          treeGuid: this.treeGuid,
          animate: this.$props.animate,
          focusedItemId: this.focusedItemId,
          tabbableItemId: this.tabbableItemId,
          fieldsService: this.fieldsSvc,
          itemUI: itemTemplate,
          checkboxes: this.$props.checkboxes,
          ariaMultiSelectable: this.ariaMultiSelectable,
          draggable: this.$props.draggable,
          expandIcons: this.$props.expandIcons,
          size,
          ariaLevel: 1,
          isRtl: this.currentRtl
        },
        itemId: index.toString(),
        treeGuid: this.treeGuid,
        animate: this.$props.animate,
        focusedItemId: this.focusedItemId,
        tabbableItemId: this.tabbableItemId,
        fieldsService: this.fieldsSvc,
        itemUI: itemTemplate,
        checkboxes: this.$props.checkboxes,
        ariaMultiSelectable: this.ariaMultiSelectable,
        onItemclick: this.onItemClick,
        on: this.v3 ? void 0 : {
          "itemclick": this.onItemClick,
          "focusdomelneeded": this.onFocusDomElNeeded,
          "press": this.onPress,
          "drag": this.onDrag,
          "release": this.onRelease,
          "expandchange": this.onExpandChange,
          "checkchange": this.onCheckChange
        },
        onFocusdomelneeded: this.onFocusDomElNeeded,
        draggable: this.$props.draggable,
        onPress: this.onPress,
        onDrag: this.onDrag,
        onRelease: this.onRelease,
        expandIcons: this.$props.expandIcons,
        onExpandchange: this.onExpandChange,
        onCheckchange: this.onCheckChange,
        key: index,
        size,
        ariaLevel: 1,
        isRtl: this.currentRtl
      });
    }, this)])]);
  },
  methods: {
    onFocusDomElNeeded: function onFocusDomElNeeded(domItem) {
      if (this.allowExplicitFocus) {
        this.focusDomItem(domItem);
      }
    },
    onCheckChange: function onCheckChange(event, item2, itemId) {
      this.setFocus(itemId);
      this.dispatchCheckChange(event, item2, itemId);
    },
    onExpandChange: function onExpandChange(event, item2, itemId) {
      this.setFocus(itemId);
      this.dispatchExpandChange(event, item2, itemId);
    },
    onPress: function onPress(_event, item2, itemId) {
      this.$emit("itemdragstart", {
        target: this,
        item: item2,
        itemHierarchicalIndex: itemId
      });
    },
    onDrag: function onDrag(event, item2, itemId) {
      var pageX = event.pageX, pageY = event.pageY, clientX = event.clientX, clientY = event.clientY;
      this.$emit("itemdragover", {
        target: this,
        item: item2,
        itemHierarchicalIndex: itemId,
        pageX,
        pageY,
        clientX,
        clientY
      });
    },
    onRelease: function onRelease(event, item2, itemId) {
      var pageX = event.pageX, pageY = event.pageY, clientX = event.clientX, clientY = event.clientY;
      this.$emit("itemdragend", {
        target: this,
        item: item2,
        itemHierarchicalIndex: itemId,
        pageX,
        pageY,
        clientX,
        clientY
      });
    },
    onItemClick: function onItemClick(event, item2, itemId) {
      this.setFocus(itemId);
      this.dispatchItemClick(event, item2, itemId);
    },
    onFocus: function onFocus2(e) {
      clearTimeout(this.blurRequest);
      if (this.focusedItemId === void 0 && this.dataItems.length) {
        this.setFocus(this.tabbableItemId);
      }
      this.$emit("focus", e);
    },
    onBlur: function onBlur3(e) {
      var _this = this;
      clearTimeout(this.blurRequest);
      if (canUseDOM2) {
        this.blurRequest = window.setTimeout(function() {
          return _this.setFocus(void 0);
        }, 0);
      }
      this.$emit("blur", e);
    },
    onKeyDown: function onKeyDown3(event) {
      var focusedItem2 = this.getFocusedItem();
      if (focusedItem2) {
        var newItemId = getItemIdUponKeyboardNavigation(focusedItem2, this.focusedItemId, this.dataItems, event.keyCode, this.fieldsSvc);
        if (newItemId !== this.focusedItemId) {
          event.preventDefault();
          this.allowExplicitFocus = true;
          this.setFocus(newItemId);
        }
        this.dispatchEventsOnKeyDown(event, focusedItem2);
      }
      this.$emit("keydown", event);
    },
    dispatchEventsOnKeyDown: function dispatchEventsOnKeyDown(event, focusedItem2) {
      var _this = this;
      var isEnabled = function isEnabled2() {
        return isEnabledAndAllParentsEnabled(_this.focusedItemId, _this.dataItems, _this.fieldsSvc);
      };
      var currentDisabled = this.fieldsSvc.disabled(focusedItem2);
      if (event.keyCode === Keys2.left && this.fieldsSvc.expanded(focusedItem2) && isEnabled()) {
        this.dispatchExpandChange(event, focusedItem2, this.focusedItemId);
      } else if (event.keyCode === Keys2.right && !this.fieldsSvc.expanded(focusedItem2) && (this.fieldsSvc.hasChildren(focusedItem2) || hasChildren(focusedItem2, this.$props.childrenField)) && isEnabled()) {
        this.dispatchExpandChange(event, focusedItem2, this.focusedItemId);
      } else if (event.keyCode === Keys2.enter && !currentDisabled) {
        this.dispatchItemClick(event, focusedItem2, this.focusedItemId);
      } else if (event.keyCode === Keys2.space && !currentDisabled) {
        event.preventDefault();
        this.dispatchCheckChange(event, focusedItem2, this.focusedItemId);
      }
    },
    setFocus: function setFocus(focusedItemId2) {
      if (focusedItemId2) {
        if (this.fieldsSvc.focusIdField) {
          var item2 = this.getItemById(focusedItemId2);
          this.focusedItemId = focusedItemId2;
          this.focusedItemPublicId = this.fieldsSvc.focusId(item2);
        } else {
          this.focusedItemId = focusedItemId2;
        }
      } else {
        var tempId = this.focusedItemId;
        this.focusedItemId = void 0;
        this.focusedItemPublicId = void 0;
        this.tabbableItemId = tempId;
      }
    },
    getFocusedItem: function getFocusedItem2() {
      return this.focusedItemId ? this.getItemById(this.focusedItemId) : void 0;
    },
    getItemById: function getItemById2(itemId) {
      return getItemById(itemId, this.dataItems, this.$props.childrenField || CHILDREN_FIELD);
    },
    dispatchCheckChange: function dispatchCheckChange(dispatchedEvent, item2, itemId) {
      this.$emit("checkchange", {
        item: item2,
        itemHierarchicalIndex: itemId,
        event: dispatchedEvent
      });
    },
    dispatchExpandChange: function dispatchExpandChange(dispatchedEvent, item2, itemId) {
      this.$emit("expandchange", {
        item: item2,
        itemHierarchicalIndex: itemId,
        event: dispatchedEvent
      });
    },
    dispatchItemClick: function dispatchItemClick(dispatchedEvent, item2, itemId) {
      this.$emit("itemclick", {
        item: item2,
        itemHierarchicalIndex: itemId,
        event: dispatchedEvent
      });
    },
    refocusDueToFocusIdField: function refocusDueToFocusIdField() {
      if (this.fieldsSvc.focusIdField) {
        var focusedItemPublicId = this.focusedItemPublicId;
        if (focusedItemPublicId) {
          var focusedItemId2 = this.$props.getFocusHierarchicalIndex ? this.$props.getFocusHierarchicalIndex(focusedItemPublicId) : resolveItemId(focusedItemPublicId, this.fieldsSvc.focusIdField, this.dataItems, this.$props.childrenField);
          if (focusedItemId2 !== this.focusedItemId) {
            this.allowExplicitFocus = true;
            this.focusedItemId = focusedItemId2;
          }
        }
      }
    },
    // private get ariaMultiSelectable() {
    //     return this.$props['aria-multiselectable'] === true || this.$props['aria-multiselectable'] === 'true';
    // }
    focusDomItem: function focusDomItem(domItem) {
      domItem.focus();
    },
    guid: function guid3() {
      return this.treeGuid;
    }
  }
};
var TreeView = TreeViewVue2;

// node_modules/@progress/kendo-vue-treeview/dist/es/TreeViewDragClue.js
var allVue27 = vue_runtime_esm_bundler_exports;
var gh25 = allVue27.h;
var isV327 = allVue27.version && allVue27.version[0] === "3";

// node_modules/@progress/kendo-vue-treeview/dist/es/TreeViewDragAnalyzer.js
var DROPZONE_BOUNDARY_DELTA = 6;
var TreeViewDragAnalyzer = (
  /** @class */
  function() {
    function TreeViewDragAnalyzer2(event) {
      this.event = event;
      this.initialized = false;
      this.itemId = event.itemHierarchicalIndex;
      this.treeViewGuid = event.target.guid();
    }
    TreeViewDragAnalyzer2.prototype.init = function() {
      if (!this.initialized) {
        this.setDestimationMeta(document.elementFromPoint(this.event.clientX, this.event.clientY));
        this.initialized = true;
      }
      return this;
    };
    Object.defineProperty(TreeViewDragAnalyzer2.prototype, "isDropAllowed", {
      /**
       * Returns `true` if dropping is allowed. Otherwise, returns `false`.
       */
      get: function() {
        if (this.initialized && this.destItemId && this.destTreeViewGuid) {
          return !"".concat(this.destTreeViewGuid, "_").concat(this.destItemId, "_").startsWith("".concat(this.treeViewGuid, "_").concat(this.itemId, "_"));
        } else {
          return false;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeViewDragAnalyzer2.prototype, "destinationMeta", {
      /**
       * Returns an object which contains:
       * * The `itemHierarchicalIndex` of the destination item (the item below the dragged item) and
       * * The `guid` of the destination TreeView (the TreeView which renders the destination item).
       */
      get: function() {
        return { itemHierarchicalIndex: this.destItemId, treeViewGuid: this.destTreeViewGuid };
      },
      enumerable: false,
      configurable: true
    });
    TreeViewDragAnalyzer2.prototype.getDropOperation = function() {
      if (this.initialized && this.isDropAllowed) {
        var _a2 = this.destDomNodeWithMeta.getBoundingClientRect(), top_1 = _a2.top, height = _a2.height;
        if (top_1 + height - this.event.clientY < DROPZONE_BOUNDARY_DELTA) {
          return "after";
        } else if (this.event.clientY - top_1 < DROPZONE_BOUNDARY_DELTA) {
          return "before";
        } else {
          return "child";
        }
      } else {
        return void 0;
      }
    };
    TreeViewDragAnalyzer2.prototype.setDestimationMeta = function(element) {
      var node = element;
      while (node && !node[DOM_KENDO_ITEM_ID_FIELD]) {
        node = node.parentNode;
      }
      if (node && node[DOM_KENDO_ITEM_ID_FIELD]) {
        this.destDomNodeWithMeta = node;
        this.destItemId = node[DOM_KENDO_ITEM_ID_FIELD];
        this.destTreeViewGuid = node[DOM_KENDO_TREEVIEW_GUID_FIELD];
      }
    };
    return TreeViewDragAnalyzer2;
  }()
);

// node_modules/@progress/kendo-vue-dropdowns/dist/es/DropDownTree/ListNoData.js
var allVue28 = vue_runtime_esm_bundler_exports;
var gh26 = allVue28.h;
var isV328 = allVue28.version && allVue28.version[0] === "3";
var ListNoDataVue2 = {
  name: "KendoListNoData",
  // @ts-ignore
  setup: !isV328 ? void 0 : function() {
    var v3 = !!isV328;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render25(createElement) {
    var h = gh26 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("div", {
      "class": "k-nodata"
    }, [h("div", [defaultSlot])]);
  }
};
var ListNoData = ListNoDataVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/DropDownTree/DropDownTree.js
var __assign18 = function() {
  __assign18 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign18.apply(this, arguments);
};
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue29 = vue_runtime_esm_bundler_exports;
var gh27 = allVue29.h;
var isV329 = allVue29.version && allVue29.version[0] === "3";
var sizeMap8 = kendoThemeMaps.sizeMap;
var roundedMap6 = kendoThemeMaps.roundedMap;
var VALIDATION_MESSAGE5 = "Please select a value from the list!";
var toLevel = function toLevel2(hierarchicalIndex) {
  return hierarchicalIndex.split("_").map(function(i) {
    return parseInt(i, 10);
  });
};
var getValidity = function getValidity2(parameters, hasValue3) {
  var validationMessage = parameters.validationMessage, valid = parameters.valid, required = parameters.required;
  return {
    customError: validationMessage !== void 0,
    valid: Boolean(valid !== void 0 ? valid : !required || hasValue3),
    valueMissing: !hasValue3
  };
};
var DropDownTreeVue2 = {
  name: "KendoDropDownTree",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    open: null,
    close: null,
    focus: null,
    blur: null,
    change: null,
    filterchange: null,
    expandchange: null,
    "changemodel": null,
    "update:modelValue": null
  },
  props: {
    opened: {
      type: Boolean,
      default: void 0
    },
    disabled: Boolean,
    dir: String,
    tabIndex: Number,
    accessKey: String,
    dataItems: {
      type: Array,
      default: function _default6() {
        return [];
      }
    },
    value: {
      type: [Object, String, Number, Boolean],
      default: function _default7() {
        return void 0;
      }
    },
    modelValue: {
      type: [Object, String, Number, Boolean],
      default: function _default8() {
        return void 0;
      }
    },
    valueMap: Function,
    placeholder: String,
    dataItemKey: {
      type: String,
      required: true
    },
    textField: {
      type: String,
      required: true
    },
    selectField: {
      type: String,
      default: "selected"
    },
    expandField: String,
    subItemsField: {
      type: String,
      default: "items"
    },
    className: String,
    label: String,
    validationMessage: String,
    validityStyles: {
      type: Boolean,
      default: true
    },
    valid: {
      type: Boolean,
      default: void 0
    },
    required: Boolean,
    name: String,
    id: String,
    ariaLabel: {
      type: String,
      default: void 0
    },
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    filterable: Boolean,
    filter: String,
    loading: Boolean,
    popupSettings: {
      type: Object,
      default: function _default9() {
        return {
          animate: true,
          height: "200px"
        };
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator22(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator23(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator24(value2) {
        return [null, "flat", "outline", "solid"].includes(value2);
      }
    },
    item: [String, Function, Object],
    header: [String, Function, Object],
    footer: [String, Function, Object],
    valueRender: [String, Function, Object],
    listNoData: [String, Function, Object]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created10() {
    validatePackage(packageMetadata);
    this.componentGuid = guid();
    this.anchor = guid();
  },
  data: function data8() {
    return {
      currentOpened: false,
      focused: false,
      filterState: "",
      currentValue: void 0,
      popupWidth: "200px"
    };
  },
  computed: {
    wrapperClass: function wrapperClass4() {
      var _a2;
      var _b = this.$props, validationMessage = _b.validationMessage, valid = _b.valid, required = _b.required, validityStyles = _b.validityStyles;
      var validity5 = getValidity({
        validationMessage,
        valid,
        required
      }, this.hasValue);
      var isValid = !validityStyles || validity5.valid;
      var _c = this.$props, size = _c.size, rounded = _c.rounded, fillMode = _c.fillMode;
      return _a2 = {
        "k-dropdowntree": true,
        "k-picker": true
      }, _a2[this.$props.className] = this.$props.className, _a2["k-picker-".concat(sizeMap8[size] || size)] = size, _a2["k-rounded-".concat(roundedMap6[rounded] || rounded)] = rounded, _a2["k-picker-".concat(fillMode)] = fillMode, _a2["k-focus"] = this.focused, _a2["k-invalid"] = !isValid, _a2["k-loading"] = this.$props.loading, _a2["k-required"] = required, _a2["k-disabled"] = this.$props.disabled, _a2;
    },
    isOpen: function isOpen() {
      return this.opened !== void 0 ? this.opened : this.currentOpened;
    },
    computedValue: function computedValue5() {
      return this.value !== void 0 ? this.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.currentValue;
    },
    hasValue: function hasValue() {
      return isPresent(this.computedValue);
    },
    currentValueText: function currentValueText() {
      return this.hasValue ? getItemValue(this.computedValue, this.$props.textField) : "";
    }
  },
  mounted: function mounted12() {
    this.elementRef = getRef(this, "kendoAnchor", this.anchor);
    this.inputRef = getRef(this, "input");
    this.selectRef = getRef(this, "select");
    this.treeViewRef = getRef(this, "treeView");
    this.skipFocusRef = false;
    this.popupRef = getRef(this, "popup");
    this.calculatePopupWidth();
  },
  updated: function updated8() {
    this.inputRef = getRef(this, "input");
    this.treeViewRef = getRef(this, "treeView");
    if (this.popupRef && this.isOpen && this.hasValue) {
      this.popupRef.reposition();
    }
    this.setValidity();
    this.calculatePopupWidth();
  },
  // @ts-ignore
  setup: !isV329 ? void 0 : function() {
    var v3 = !!isV329;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render26(createElement) {
    var _this2 = this;
    var h = gh27 || createElement;
    var id = this.$props.id || this.componentGuid;
    var _a2 = this.$props, dataItems2 = _a2.dataItems, dataItemKey = _a2.dataItemKey, popupSettings = _a2.popupSettings, disabled = _a2.disabled, placeholder = _a2.placeholder, label = _a2.label, name = _a2.name, selectField = _a2.selectField, subItemsField = _a2.subItemsField, validationMessage = _a2.validationMessage, valid = _a2.valid, required = _a2.required, validityStyles = _a2.validityStyles;
    var tabIndex = getTabIndex(this.$props.tabIndex, disabled);
    var localization = provideLocalizationService(this);
    var validity5 = getValidity({
      validationMessage,
      valid,
      required
    }, this.hasValue);
    var dir = this.$props.dir;
    var itemTemplate = templateRendering.call(this, this.item, getListeners.call(this));
    var valueTemplate = templateRendering.call(this, this.valueRender, getListeners.call(this));
    var headerTemplate = templateRendering.call(this, this.$props.header, getListeners.call(this));
    var footerTemplate = templateRendering.call(this, this.$props.footer, getListeners.call(this));
    var header = getTemplate.call(this, {
      h,
      template: headerTemplate
    });
    var footer = getTemplate.call(this, {
      h,
      template: footerTemplate
    });
    var listNoDataRender = templateRendering.call(this, this.$props.listNoData, getListeners.call(this));
    var noDataDefault = (
      // @ts-ignore function children
      h(ListNoData, this.v3 ? function() {
        return [localization.toLanguageString(nodata, messages[nodata])];
      } : [localization.toLanguageString(nodata, messages[nodata])])
    );
    var noDataTemplate = getTemplate.call(this, {
      h,
      defaultRendering: noDataDefault,
      template: listNoDataRender
    });
    var valueDefault = h("span", {
      "class": "k-input-value-text"
    }, [this.currentValueText || placeholder]);
    var valueToRender = getTemplate.call(this, {
      h,
      defaultRendering: valueDefault,
      template: valueTemplate,
      additionalProps: {
        value: this.computedValue
      }
    });
    var isValid = !validityStyles || validity5.valid;
    var _b = this.$props, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode;
    var dropdowntree = h("span", {
      "class": this.wrapperClass,
      tabIndex,
      attrs: this.v3 ? void 0 : {
        tabIndex,
        accessKey: this.$props.accessKey,
        id,
        dir,
        role: "combobox",
        "aria-haspopup": "tree",
        "aria-expanded": this.isOpen,
        "aria-disabled": disabled,
        "aria-label": label || this.$props.ariaLabel,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaDescribedBy,
        "aria-required": required
      },
      accessKey: this.$props.accessKey,
      id,
      dir,
      ref: setRef(this, "kendoAnchor", this.anchor),
      onKeydown: this.onWrapperKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onWrapperKeyDown,
        "click": this.onWrapperClick,
        "mousedown": this.onWrapperMouseDown,
        "focusin": this.onFocus,
        "focusout": this.onBlur
      },
      onClick: this.onWrapperClick,
      onMousedown: this.onWrapperMouseDown,
      onFocusin: this.onFocus,
      onFocusout: this.onBlur,
      role: "combobox",
      "aria-haspopup": "tree",
      "aria-expanded": this.isOpen,
      "aria-disabled": disabled,
      "aria-label": label || this.$props.ariaLabel,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaDescribedBy,
      "aria-required": required
    }, [
      h("span", {
        "class": "k-input-inner"
      }, [valueToRender]),
      this.$props.loading && h(Icon, {
        "class": "k-input-loading-icon",
        name: "loading",
        attrs: this.v3 ? void 0 : {
          name: "loading"
        }
      }),
      this.hasValue && !disabled && h("span", {
        onClick: this.onClear,
        on: this.v3 ? void 0 : {
          "click": this.onClear,
          "mousedown": function mousedown(e) {
            return e.preventDefault();
          }
        },
        "class": "k-clear-value",
        title: localization.toLanguageString(clear, messages[clear]),
        attrs: this.v3 ? void 0 : {
          title: localization.toLanguageString(clear, messages[clear]),
          role: "button",
          tabIndex: -1
        },
        role: "button",
        tabIndex: -1,
        onMousedown: function mousedown(e) {
          return e.preventDefault();
        }
      }, [h(Icon, {
        name: "x",
        attrs: this.v3 ? void 0 : {
          name: "x",
          icon: xIcon
        },
        icon: xIcon
      })]),
      h(Button, {
        tabIndex: -1,
        attrs: this.v3 ? void 0 : {
          tabIndex: -1,
          type: "button",
          "aria-label": "select",
          size,
          fillMode,
          themeColor: "base",
          rounded: null,
          icon: "caret-alt-down",
          svgIcon: caretAltDownIcon
        },
        type: "button",
        "aria-label": "select",
        "class": "k-input-button",
        size,
        fillMode,
        themeColor: "base",
        rounded: null,
        icon: "caret-alt-down",
        svgIcon: caretAltDownIcon
      }),
      /* Dummy component to support forms */
      h("select", {
        name,
        attrs: this.v3 ? void 0 : {
          name,
          tabIndex: -1,
          "aria-hidden": true,
          title: label
        },
        ref: setRef(this, "select"),
        tabIndex: -1,
        "aria-hidden": true,
        title: label,
        style: {
          opacity: 0,
          width: 1,
          border: 0,
          zIndex: -1,
          position: "absolute",
          left: "50%"
        }
      }, [h("option", {
        value: this.v3 ? this.$props.valueMap ? this.$props.valueMap.call(void 0, this.computedValue) : this.computedValue : null,
        domProps: this.v3 ? void 0 : {
          "value": this.$props.valueMap ? this.$props.valueMap.call(void 0, this.computedValue) : this.computedValue
        }
      })]),
      // @ts-ignore function children
      h(Popup, {
        style: {
          width: this.popupWidth,
          direction: dir
        },
        ref: setRef(this, "popup"),
        "class": classNames(popupSettings.className, {
          "k-rtl": dir === "rtl"
        }),
        popupClass: classNames(popupSettings.popupClass, "k-dropdowntree-popup", "popup-" + this.componentGuid),
        attrs: this.v3 ? void 0 : {
          popupClass: classNames(popupSettings.popupClass, "k-dropdowntree-popup", "popup-" + this.componentGuid),
          animate: popupSettings.animate,
          anchor: this.anchor,
          show: this.isOpen,
          appendTo: popupSettings.appendTo
        },
        animate: popupSettings.animate,
        anchor: this.anchor,
        show: this.isOpen,
        onOpen: this.onPopupOpened,
        on: this.v3 ? void 0 : {
          "open": this.onPopupOpened,
          "close": this.onPopupClosed
        },
        onClose: this.onPopupClosed,
        appendTo: popupSettings.appendTo
      }, this.v3 ? function() {
        return [_this2.$props.filterable && // @ts-ignore
        h(ListFilter, {
          value: _this2.$props.filter === void 0 ? _this2.filterState : _this2.$props.filter,
          attrs: _this2.v3 ? void 0 : {
            value: _this2.$props.filter === void 0 ? _this2.filterState : _this2.$props.filter,
            size,
            rounded,
            fillMode
          },
          ref: setRef(_this2, "input"),
          onChange: _this2.onFilterChange,
          on: _this2.v3 ? void 0 : {
            "change": _this2.onFilterChange,
            "keydown": _this2.onInputKeyDown
          },
          onKeydown: _this2.onInputKeyDown,
          size,
          rounded,
          fillMode
        }), header && h("div", {
          "class": "k-list-header"
        }, [header]), dataItems2.length > 0 ? (
          // @ts-ignore
          h(TreeView, {
            ref: setRef(_this2, "treeView"),
            tabIndex,
            attrs: _this2.v3 ? void 0 : {
              tabIndex,
              dataItems: dataItems2,
              focusIdField: dataItemKey,
              textField: _this2.$props.textField,
              selectField,
              expandField: _this2.$props.expandField,
              childrenField: subItemsField,
              expandIcons: true,
              size,
              item: itemTemplate
            },
            dataItems: dataItems2,
            focusIdField: dataItemKey,
            textField: _this2.$props.textField,
            selectField,
            expandField: _this2.$props.expandField,
            childrenField: subItemsField,
            expandIcons: true,
            onItemclick: _this2.onChange,
            on: _this2.v3 ? void 0 : {
              "itemclick": _this2.onChange,
              "expandchange": _this2.onExpand,
              "focus": _this2.onFocus,
              "blur": _this2.onBlur,
              "keydown": _this2.onWrapperKeyDown
            },
            onExpandchange: _this2.onExpand,
            onFocus: _this2.onFocus,
            onBlur: _this2.onBlur,
            onKeydown: _this2.onWrapperKeyDown,
            size,
            item: itemTemplate
          })
        ) : noDataTemplate, footer && h("div", {
          "class": "k-list-footer"
        }, [footer])];
      } : [_this2.$props.filterable && h(ListFilter, {
        value: _this2.$props.filter === void 0 ? _this2.filterState : _this2.$props.filter,
        attrs: _this2.v3 ? void 0 : {
          value: _this2.$props.filter === void 0 ? _this2.filterState : _this2.$props.filter,
          size,
          rounded,
          fillMode
        },
        ref: setRef(_this2, "input"),
        onChange: _this2.onFilterChange,
        on: _this2.v3 ? void 0 : {
          "change": _this2.onFilterChange,
          "keydown": _this2.onInputKeyDown
        },
        onKeydown: _this2.onInputKeyDown,
        size,
        rounded,
        fillMode
      }), header && h("div", {
        "class": "k-list-header"
      }, [header]), dataItems2.length > 0 ? h(TreeView, {
        ref: setRef(_this2, "treeView"),
        tabIndex,
        attrs: _this2.v3 ? void 0 : {
          tabIndex,
          dataItems: dataItems2,
          focusIdField: dataItemKey,
          textField: _this2.$props.textField,
          selectField,
          expandField: _this2.$props.expandField,
          childrenField: subItemsField,
          expandIcons: true,
          size,
          item: itemTemplate
        },
        dataItems: dataItems2,
        focusIdField: dataItemKey,
        textField: _this2.$props.textField,
        selectField,
        expandField: _this2.$props.expandField,
        childrenField: subItemsField,
        expandIcons: true,
        onItemclick: _this2.onChange,
        on: _this2.v3 ? void 0 : {
          "itemclick": _this2.onChange,
          "expandchange": _this2.onExpand,
          "focus": _this2.onFocus,
          "blur": _this2.onBlur,
          "keydown": _this2.onWrapperKeyDown
        },
        onExpandchange: _this2.onExpand,
        onFocus: _this2.onFocus,
        onBlur: _this2.onBlur,
        onKeydown: _this2.onWrapperKeyDown,
        size,
        item: itemTemplate
      }) : noDataTemplate, footer && h("div", {
        "class": "k-list-footer"
      }, [footer])])
    ]);
    return label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label,
        attrs: this.v3 ? void 0 : {
          label,
          editorValue: this.currentValueText,
          editorPlaceholder: placeholder,
          editorValid: isValid,
          editorDisabled: disabled,
          editorId: id,
          focused: this.focused,
          dir
        },
        editorValue: this.currentValueText,
        editorPlaceholder: placeholder,
        editorValid: isValid,
        editorDisabled: disabled,
        editorId: id,
        focused: this.focused,
        dir
      }, this.v3 ? function() {
        return [dropdowntree];
      } : [dropdowntree])
    ) : dropdowntree;
  },
  methods: {
    calculatePopupWidth: function calculatePopupWidth() {
      if (this.elementRef) {
        this.popupWidth = this.popupSettings.width !== void 0 ? this.popupSettings.width : this.elementRef.offsetWidth + "px";
      }
    },
    focus: function focus5() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    setValidity: function setValidity5() {
      if (this.selectRef && this.selectRef.setCustomValidity) {
        var _a2 = this.$props, validationMessage = _a2.validationMessage, valid = _a2.valid, required = _a2.required;
        var validity5 = getValidity({
          validationMessage,
          valid,
          required
        }, this.hasValue);
        this.selectRef.setCustomValidity(validity5.valid ? "" : this.validationMessage === void 0 ? VALIDATION_MESSAGE5 : this.validationMessage);
      }
    },
    openPopup: function openPopup(event) {
      if (!this.isOpen) {
        var openEvent = __assign18({}, event);
        this.$emit("open", openEvent);
        this.currentOpened = true;
      }
    },
    closePopup: function closePopup(event) {
      if (this.isOpen) {
        var closeEvent = __assign18({}, event);
        this.$emit("close", closeEvent);
        this.currentOpened = false;
      }
    },
    onWrapperClick: function onWrapperClick(event) {
      if (!event.defaultPrevented && this.$el) {
        this.focused = true;
        var ev = {
          event,
          target: this
        };
        (this.isOpen ? this.closePopup : this.openPopup)(ev);
      }
    },
    switchFocus: function switchFocus(focusFn) {
      var _this = this;
      this.skipFocusRef = true;
      focusFn();
      window.setTimeout(function() {
        return _this.skipFocusRef = false;
      }, 0);
    },
    onWrapperKeyDown: function onWrapperKeyDown(event) {
      var _this = this;
      var keyCode = event.keyCode, altKey = event.altKey;
      var treeview = this.treeViewRef && this.treeViewRef.$el;
      var inputElement = this.inputRef && this.inputRef.input;
      if (this.$props.disabled || event.defaultPrevented && inputElement === event.target) {
        return;
      }
      var ev = {
        event,
        target: this
      };
      if (this.isOpen) {
        if (keyCode === Keys.esc || altKey && keyCode === Keys.up) {
          event.preventDefault();
          this.closePopup(ev);
        } else if (treeview && treeview.querySelector(".k-focus") && (keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.left || keyCode === Keys.right || keyCode === Keys.home || keyCode === Keys.end)) {
          if (keyCode === Keys.up && inputElement) {
            var items = Array.from(treeview.querySelectorAll(".k-treeview-item"));
            var focusedItem2 = __spreadArray2([], items, true).reverse().find(function(i) {
              return Boolean(i && i.querySelector(".k-focus"));
            });
            if (focusedItem2 && items.indexOf(focusedItem2) === 0) {
              return this.switchFocus(function() {
                _this.focusElement(inputElement);
              });
            }
          }
          this.switchFocus(noop);
        } else if (keyCode === Keys.down) {
          this.switchFocus(function() {
            _this.focusElement(inputElement || treeview);
          });
        }
      } else {
        if (altKey && keyCode === Keys.down) {
          event.preventDefault();
          this.openPopup(ev);
        }
      }
    },
    onInputKeyDown: function onInputKeyDown4(event) {
      var _this = this;
      var keyCode = event.keyCode, altKey = event.altKey;
      if (altKey || keyCode !== Keys.up && keyCode !== Keys.down) {
        return;
      }
      event.preventDefault();
      this.switchFocus(keyCode === Keys.up ? function() {
        _this.focusElement(_this.elementRef);
      } : function() {
        _this.focusElement(_this.treeViewRef && _this.treeViewRef.$el);
      });
    },
    focusElement: function focusElement3(element) {
      if (element) {
        this.switchFocus(function() {
          return element.focus();
        });
      }
    },
    onPopupOpened: function onPopupOpened3() {
      if (!this.focused && this.isOpen && !this.currentOpened) {
        this.closePopup({
          target: this
        });
      } else {
        if (this.$props.filterable) {
          var inputElement = this.inputRef && this.inputRef.input;
          this.focusElement(inputElement);
        } else {
          this.focusElement(this.treeViewRef && this.treeViewRef.$el);
        }
      }
    },
    onPopupClosed: function onPopupClosed3() {
      if (this.focused) {
        this.focusElement(this.elementRef);
      }
    },
    onFocus: function onFocus3(event) {
      if (!this.focused && !this.skipFocusRef) {
        this.focused = true;
        var focusEvent = {
          event,
          target: this
        };
        this.$emit("focus", focusEvent);
      }
    },
    onBlur: function onBlur4(event) {
      if (this.focused && !this.skipFocusRef) {
        this.focused = false;
        var ev = {
          event,
          target: this
        };
        var focusEvent = __assign18({}, ev);
        if (!event.relatedTarget || !event.relatedTarget.closest(".popup-" + this.componentGuid)) {
          this.$emit("blur", focusEvent);
          this.closePopup(ev);
        }
      }
    },
    onWrapperMouseDown: function onWrapperMouseDown() {
      if (this.focused) {
        this.switchFocus(noop);
      }
    },
    changeValue: function changeValue(event, newValue, hierarchicalIndex) {
      var changeEvent = __assign18({
        value: newValue,
        level: hierarchicalIndex ? toLevel(hierarchicalIndex) : []
      }, event);
      this.$emit("changemodel", newValue);
      this.$emit("update:modelValue", newValue);
      this.$emit("change", changeEvent);
      this.currentValue = newValue;
    },
    onChange: function onChange3(e) {
      if (areSame(e.item, this.computedValue, this.dataItemKey) || !this.$el) {
        return;
      }
      var item2 = e.item, itemHierarchicalIndex = e.itemHierarchicalIndex, event = e.event;
      var ev = {
        event,
        target: this
      };
      this.changeValue(ev, item2, itemHierarchicalIndex);
      this.closePopup(ev);
    },
    onClear: function onClear(event) {
      var ev = {
        event,
        target: this
      };
      this.changeValue(ev, null);
      this.closePopup(ev);
      event.preventDefault();
    },
    onExpand: function onExpand(e) {
      var item2 = e.item, itemHierarchicalIndex = e.itemHierarchicalIndex, event = e.event;
      var expandEvent = {
        level: toLevel(itemHierarchicalIndex),
        item: item2,
        event,
        target: this
      };
      this.$emit("expandchange", expandEvent);
    },
    onFilterChange: function onFilterChange(event) {
      var filterDesc = {
        field: this.$props.textField,
        operator: "contains",
        value: event.target.value
      };
      var ev = {
        filter: filterDesc,
        event,
        target: this
      };
      this.$emit("filterchange", ev);
      if (this.$props.filter === void 0) {
        this.filterState = event.target.value;
      }
    }
  }
};
var DropDownTree = DropDownTreeVue2;

// node_modules/@progress/kendo-vue-dropdowns/dist/es/MultiSelectTree/utils.js
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var getValueMap = function(value2, idGetter) {
  var map = {};
  if (value2 && value2.length) {
    value2.forEach(function(item2) {
      map[idGetter(item2)] = true;
    });
  }
  return map;
};
var getMultiSelectTreeValue = function(data10, options) {
  var items = options.items, dataItemKey = options.dataItemKey, value2 = options.value, _a2 = options.subItemsField, subItemsField = _a2 === void 0 ? "items" : _a2, operation = options.operation;
  var idGetter = getter(dataItemKey);
  var valueMap = getValueMap(value2, idGetter);
  if (operation === "clear") {
    return [];
  } else if (operation === "delete") {
    var deletedItemsMap_1 = getValueMap(items, idGetter);
    return value2.filter(function(item2) {
      return !deletedItemsMap_1[idGetter(item2)];
    });
  }
  var selectedItem = items[0];
  var selectedId = idGetter(selectedItem);
  var subItemGetter = getter(subItemsField);
  var stack = __spreadArray3([], data10, true);
  var context = [];
  var parents = [];
  var foundItem;
  while (stack.length) {
    var currentItem = stack.pop();
    if (selectedId === idGetter(currentItem)) {
      parents = context.map(function(contextItem) {
        return contextItem.item;
      });
      foundItem = currentItem;
      break;
    } else {
      if (context && context.length && context[context.length - 1].parentPosition === stack.length) {
        context.pop();
      }
      var subItems = subItemGetter(currentItem);
      if (subItems && subItems.length) {
        context.push({ item: currentItem, parentPosition: stack.length });
        stack.push.apply(stack, subItems);
      }
    }
  }
  var childrenStack = __spreadArray3([], subItemGetter(foundItem) || [], true);
  var children = [];
  while (childrenStack.length) {
    var currentItem = childrenStack.pop();
    children.push(currentItem);
    var subItems = subItemGetter(currentItem);
    if (subItems && subItems.length) {
      childrenStack.push.apply(childrenStack, subItems);
    }
  }
  var isChecked = !valueMap[selectedId];
  var newValue = [];
  if (isChecked) {
    newValue.push.apply(newValue, value2);
    newValue.push(foundItem);
    newValue.push.apply(newValue, children.filter(function(item2) {
      return !valueMap[idGetter(item2)];
    }));
    var parentCandidates = parents.filter(function(item2) {
      return !valueMap[idGetter(item2)];
    });
    var newValueMap_1 = getValueMap(newValue, idGetter);
    for (var i = parentCandidates.length - 1; i > -1; i--) {
      var candidate = parentCandidates[i];
      var subItems = subItemGetter(candidate);
      var checkedChildrenLength = subItems.filter(function(item2) {
        return newValueMap_1[idGetter(item2)];
      }).length;
      if (checkedChildrenLength < subItems.length) {
        break;
      } else {
        newValue.push(candidate);
        newValueMap_1[idGetter(candidate)] = true;
      }
    }
  } else {
    var foundId_1 = idGetter(foundItem);
    var childrenMap_1 = getValueMap(children, idGetter);
    var parentsMap_1 = getValueMap(parents, idGetter);
    newValue.push.apply(newValue, value2.filter(function(item2) {
      var itemId = idGetter(item2);
      return !childrenMap_1[itemId] && foundId_1 !== itemId && !parentsMap_1[itemId];
    }));
  }
  return newValue;
};

// node_modules/@progress/kendo-vue-dropdowns/dist/es/MultiSelectTree/MultiSelectTree.js
var __assign19 = function() {
  __assign19 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign19.apply(this, arguments);
};
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue30 = vue_runtime_esm_bundler_exports;
var gh28 = allVue30.h;
var isV330 = allVue30.version && allVue30.version[0] === "3";
var VALIDATION_MESSAGE6 = "Please select a value from the list!";
var sizeMap9 = kendoThemeMaps.sizeMap;
var roundedMap7 = kendoThemeMaps.roundedMap;
var toLevel3 = function toLevel4(hierarchicalIndex) {
  return hierarchicalIndex.split("_").map(function(i) {
    return parseInt(i, 10);
  });
};
var getValidity3 = function getValidity4(parameters, hasValue3) {
  var validationMessage = parameters.validationMessage, valid = parameters.valid, required = parameters.required;
  return {
    customError: validationMessage !== void 0,
    valid: Boolean(valid !== void 0 ? valid : !required || hasValue3),
    valueMissing: !hasValue3
  };
};
var MultiSelectTreeVue2 = {
  name: "KendoMultiSelectTree",
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    open: null,
    close: null,
    focus: null,
    blur: null,
    change: null,
    filterchange: null,
    expandchange: null,
    "changemodel": null,
    "update:modelValue": null
  },
  props: {
    opened: {
      type: Boolean,
      default: void 0
    },
    disabled: Boolean,
    dir: String,
    tabIndex: Number,
    accessKey: String,
    dataItems: {
      type: Array,
      default: function _default10() {
        return [];
      }
    },
    value: Array,
    modelValue: Array,
    valueMap: Function,
    placeholder: String,
    dataItemKey: {
      type: String,
      required: true
    },
    textField: {
      type: String,
      required: true
    },
    checkField: {
      type: String,
      default: "checkField"
    },
    checkIndeterminateField: {
      type: String,
      default: "checkIndeterminateField"
    },
    expandField: String,
    subItemsField: {
      type: String,
      default: "items"
    },
    className: String,
    label: String,
    validationMessage: String,
    validityStyles: {
      type: Boolean,
      default: true
    },
    valid: {
      type: Boolean,
      default: void 0
    },
    required: Boolean,
    name: String,
    id: String,
    ariaLabelledBy: String,
    ariaDescribedBy: String,
    filterable: Boolean,
    filter: String,
    loading: Boolean,
    tags: Array,
    popupSettings: {
      type: Object,
      default: function _default11() {
        return {
          animate: true,
          height: "200px"
        };
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator25(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator26(value2) {
        return [null, "small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator27(value2) {
        return [null, "flat", "outline", "solid"].includes(value2);
      }
    },
    item: [String, Function, Object],
    tag: [String, Function, Object],
    header: [String, Function, Object],
    footer: [String, Function, Object],
    listNoData: [String, Function, Object]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created11() {
    validatePackage(packageMetadata);
    this.componentGuid = guid();
    this.anchor = guid();
  },
  data: function data9() {
    return {
      focusedTagState: void 0,
      openState: false,
      focusedState: false,
      filterState: "",
      currentValue: [],
      popupWidth: "200px"
    };
  },
  computed: {
    isOpen: function isOpen2() {
      return this.opened !== void 0 ? this.opened : this.openState;
    },
    computedValue: function computedValue6() {
      return this.value !== void 0 ? this.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.currentValue;
    },
    hasValue: function hasValue2() {
      return !!this.computedValue.length;
    },
    tagsToRenderRef: function tagsToRenderRef() {
      var _this = this;
      return this.tags === void 0 ? this.computedValue.map(function(item2) {
        return {
          text: getItemValue(item2, _this.$props.textField),
          data: [item2]
        };
      }) : __spreadArray4([], this.tags, true);
    }
  },
  mounted: function mounted13() {
    this.elementRef = getRef(this, "kendoAnchor", this.anchor);
    this.inputRef = getRef(this, "input");
    this.selectRef = getRef(this, "select");
    this.treeViewRef = getRef(this, "treeView");
    this.skipFocusRef = false;
    this.popupRef = getRef(this, "popup");
    this.calculatePopupWidth();
  },
  updated: function updated9() {
    this.inputRef = getRef(this, "input");
    this.treeViewRef = getRef(this, "treeView");
    if (this.popupRef && this.isOpen && this.hasValue) {
      this.popupRef.reposition();
    }
    this.setValidity();
    this.calculatePopupWidth();
  },
  // @ts-ignore
  setup: !isV330 ? void 0 : function() {
    var v3 = !!isV330;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render27(createElement) {
    var _this2 = this;
    var _a2, _b;
    var _this = this;
    var h = gh28 || createElement;
    var id = this.$props.id || this.componentGuid;
    var _c = this.$props, dataItems2 = _c.dataItems, dataItemKey = _c.dataItemKey, _d = _c.popupSettings, popupSettings = _d === void 0 ? {} : _d, disabled = _c.disabled, placeholder = _c.placeholder, label = _c.label, name = _c.name, checkField = _c.checkField, checkIndeterminateField = _c.checkIndeterminateField, subItemsField = _c.subItemsField, validationMessage = _c.validationMessage, valid = _c.valid, value2 = _c.value, required = _c.required, validityStyles = _c.validityStyles;
    var tabIndex = getTabIndex(this.$props.tabIndex, disabled);
    var localization = provideLocalizationService(this);
    var validity5 = getValidity3({
      validationMessage,
      valid,
      required
    }, this.hasValue);
    var dir = this.$props.dir;
    var itemTemplate = templateRendering.call(this, this.item, getListeners.call(this));
    var tagTemplate = templateRendering.call(this, this.tag, getListeners.call(this));
    var headerTemplate = templateRendering.call(this, this.$props.header, getListeners.call(this));
    var footerTemplate = templateRendering.call(this, this.$props.footer, getListeners.call(this));
    var header = getTemplate.call(this, {
      h,
      template: headerTemplate
    });
    var footer = getTemplate.call(this, {
      h,
      template: footerTemplate
    });
    var listNoDataRender = templateRendering.call(this, this.$props.listNoData, getListeners.call(this));
    var noDataDefault = (
      // @ts-ignore function children
      h(ListNoData, this.v3 ? function() {
        return [localization.toLanguageString(nodata, messages[nodata])];
      } : [localization.toLanguageString(nodata, messages[nodata])])
    );
    var noDataTemplate = getTemplate.call(this, {
      h,
      defaultRendering: noDataDefault,
      template: listNoDataRender
    });
    var isValid = !validityStyles || validity5.valid;
    var _e = this.$props, size = _e.size, rounded = _e.rounded, fillMode = _e.fillMode;
    var multiselecttree = h("span", {
      ref: setRef(this, "kendoAnchor", this.anchor),
      "class": classNames("k-multiselecttree k-input", this.$props.className, (_a2 = {}, _a2["k-input-".concat(sizeMap9[size] || size)] = size, _a2["k-rounded-".concat(roundedMap7[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2["k-focus"] = this.focusedState && !disabled, _a2["k-invalid"] = !isValid, _a2["k-disabled"] = disabled, _a2["k-loading"] = this.$props.loading, _a2["k-required"] = required, _a2)),
      tabIndex,
      attrs: this.v3 ? void 0 : {
        tabIndex,
        accessKey: this.$props.accessKey,
        id,
        dir,
        role: "combobox",
        "aria-haspopup": "tree",
        "aria-expanded": this.isOpen,
        "aria-disabled": disabled,
        "aria-label": label,
        "aria-labelledby": this.$props.ariaLabelledBy,
        "aria-describedby": this.$props.ariaLabelledBy ? this.$props.ariaLabelledBy : "tagslist-" + id,
        "aria-required": this.$props.required
      },
      accessKey: this.$props.accessKey,
      id,
      dir,
      onKeydown: this.onWrapperKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onWrapperKeyDown,
        "mousedown": this.onWrapperMouseDown,
        "focusin": this.onFocus,
        "focusout": this.onBlur,
        "click": this.onWrapperClick
      },
      onMousedown: this.onWrapperMouseDown,
      onFocusin: this.onFocus,
      onFocusout: this.onBlur,
      role: "combobox",
      "aria-haspopup": "tree",
      "aria-expanded": this.isOpen,
      "aria-disabled": disabled,
      "aria-label": label,
      "aria-labelledby": this.$props.ariaLabelledBy,
      "aria-describedby": this.$props.ariaLabelledBy ? this.$props.ariaLabelledBy : "tagslist-" + id,
      "aria-required": this.$props.required,
      onClick: this.onWrapperClick
    }, [
      h("div", {
        id: "tagslist-" + id,
        attrs: this.v3 ? void 0 : {
          id: "tagslist-" + id
        },
        "class": classNames("k-input-values k-chip-list k-selection-multiple", (_b = {}, _b["k-chip-list-".concat(sizeMap9[size] || size)] = size, _b["k-readonly"] = this.hasValue, _b))
      }, [this.tagsToRenderRef.length > 0 ? h(TagList, {
        tagRender: tagTemplate,
        attrs: this.v3 ? void 0 : {
          tagRender: tagTemplate,
          dataItems: this.tagsToRenderRef,
          guid: id,
          focused: this.focusedTagState ? this.tagsToRenderRef.find(function(t) {
            return _this.focusedTagState && matchTags(t, _this.focusedTagState, dataItemKey);
          }) : void 0,
          tagsRounded: rounded,
          size,
          fillMode
        },
        onTagdelete: this.onTagDelete,
        on: this.v3 ? void 0 : {
          "tagdelete": this.onTagDelete
        },
        dataItems: this.tagsToRenderRef,
        guid: id,
        focused: this.focusedTagState ? this.tagsToRenderRef.find(function(t) {
          return _this.focusedTagState && matchTags(t, _this.focusedTagState, dataItemKey);
        }) : void 0,
        tagsRounded: rounded,
        size,
        fillMode
      }) : !this.hasValue && h("span", {
        "class": "k-input-inner",
        role: "combobox",
        attrs: this.v3 ? void 0 : {
          role: "combobox",
          tabIndex,
          "aria-expanded": this.isOpen,
          "aria-describedby": "tagslist-" + id,
          "aria-label": this.$props.ariaLabelledBy
        },
        tabIndex,
        "aria-expanded": this.isOpen,
        "aria-describedby": "tagslist-" + id,
        "aria-label": this.$props.ariaLabelledBy
      }, [h("span", {
        "class": "k-input-value-text"
      }, [placeholder])])]),
      this.$props.loading && h(Icon, {
        "class": "k-input-loading-icon",
        name: "loading",
        attrs: this.v3 ? void 0 : {
          name: "loading"
        }
      }),
      this.hasValue && !disabled && h(ClearButton, {
        onClearclick: this.onClear,
        on: this.v3 ? void 0 : {
          "clearclick": this.onClear
        }
      }),
      /* Dummy component to support forms */
      h("select", {
        name,
        attrs: this.v3 ? void 0 : {
          name,
          tabIndex: -1,
          "aria-hidden": true,
          required,
          title: label
        },
        ref: setRef(this, "select"),
        tabIndex: -1,
        "aria-hidden": true,
        required,
        title: label,
        style: {
          opacity: 0,
          width: 1,
          border: 0,
          zIndex: -1,
          position: "absolute",
          left: "50%"
        }
      }, [h("option", {
        value: this.v3 ? this.$props.valueMap ? this.$props.valueMap.call(void 0, value2) : value2 : null,
        domProps: this.v3 ? void 0 : {
          "value": this.$props.valueMap ? this.$props.valueMap.call(void 0, value2) : value2
        }
      })]),
      // @ts-ignore function children
      h(Popup, {
        style: {
          width: this.popupWidth,
          direction: dir
        },
        popupClass: classNames(popupSettings.popupClass, "k-multiselecttree-popup", "popup-" + this.componentGuid),
        attrs: this.v3 ? void 0 : {
          popupClass: classNames(popupSettings.popupClass, "k-multiselecttree-popup", "popup-" + this.componentGuid),
          animate: popupSettings.animate,
          anchor: this.anchor,
          show: this.isOpen,
          appendTo: popupSettings.appendTo
        },
        "class": classNames(popupSettings.className, {
          "k-rtl": dir === "rtl"
        }),
        animate: popupSettings.animate,
        anchor: this.anchor,
        show: this.isOpen,
        onOpen: this.onPopupOpened,
        on: this.v3 ? void 0 : {
          "open": this.onPopupOpened,
          "close": this.onPopupClosed
        },
        onClose: this.onPopupClosed,
        appendTo: popupSettings.appendTo,
        ref: setRef(this, "popup")
      }, this.v3 ? function() {
        return [_this2.$props.filterable && // @ts-ignore
        h(ListFilter, {
          value: _this2.$props.filter === void 0 ? _this2.filterState : _this2.$props.filter,
          attrs: _this2.v3 ? void 0 : {
            value: _this2.$props.filter === void 0 ? _this2.filterState : _this2.$props.filter,
            size,
            rounded,
            fillMode
          },
          ref: setRef(_this2, "input"),
          onChange: _this2.onFilterChange,
          on: _this2.v3 ? void 0 : {
            "change": _this2.onFilterChange,
            "keydown": _this2.onInputKeyDown,
            "focus": _this2.onFocus,
            "blur": _this2.onBlur
          },
          onKeydown: _this2.onInputKeyDown,
          size,
          rounded,
          fillMode,
          onFocus: _this2.onFocus,
          onBlur: _this2.onBlur
        }), header && h("div", {
          "class": "k-list-header"
        }, [header]), dataItems2.length > 0 ? (
          // @ts-ignore
          h(TreeView, {
            ref: setRef(_this2, "treeView"),
            tabIndex,
            attrs: _this2.v3 ? void 0 : {
              tabIndex,
              dataItems: dataItems2,
              focusIdField: dataItemKey,
              textField: _this2.$props.textField,
              checkField,
              checkIndeterminateField,
              expandField: _this2.$props.expandField,
              childrenField: subItemsField,
              expandIcons: true,
              checkboxes: true,
              size,
              item: itemTemplate
            },
            dataItems: dataItems2,
            focusIdField: dataItemKey,
            textField: _this2.$props.textField,
            checkField,
            checkIndeterminateField,
            expandField: _this2.$props.expandField,
            childrenField: subItemsField,
            expandIcons: true,
            onItemclick: _this2.onChange,
            on: _this2.v3 ? void 0 : {
              "itemclick": _this2.onChange,
              "checkchange": _this2.onChange,
              "expandchange": _this2.onExpand,
              "focus": _this2.onFocus,
              "blur": _this2.onBlur,
              "keydown": _this2.onWrapperKeyDown
            },
            onCheckchange: _this2.onChange,
            onExpandchange: _this2.onExpand,
            onFocus: _this2.onFocus,
            onBlur: _this2.onBlur,
            onKeydown: _this2.onWrapperKeyDown,
            checkboxes: true,
            size,
            item: itemTemplate
          })
        ) : noDataTemplate, footer && h("div", {
          "class": "k-list-footer"
        }, [footer])];
      } : [_this2.$props.filterable && h(ListFilter, {
        value: _this2.$props.filter === void 0 ? _this2.filterState : _this2.$props.filter,
        attrs: _this2.v3 ? void 0 : {
          value: _this2.$props.filter === void 0 ? _this2.filterState : _this2.$props.filter,
          size,
          rounded,
          fillMode
        },
        ref: setRef(_this2, "input"),
        onChange: _this2.onFilterChange,
        on: _this2.v3 ? void 0 : {
          "change": _this2.onFilterChange,
          "keydown": _this2.onInputKeyDown,
          "focus": _this2.onFocus,
          "blur": _this2.onBlur
        },
        onKeydown: _this2.onInputKeyDown,
        size,
        rounded,
        fillMode,
        onFocus: _this2.onFocus,
        onBlur: _this2.onBlur
      }), header && h("div", {
        "class": "k-list-header"
      }, [header]), dataItems2.length > 0 ? h(TreeView, {
        ref: setRef(_this2, "treeView"),
        tabIndex,
        attrs: _this2.v3 ? void 0 : {
          tabIndex,
          dataItems: dataItems2,
          focusIdField: dataItemKey,
          textField: _this2.$props.textField,
          checkField,
          checkIndeterminateField,
          expandField: _this2.$props.expandField,
          childrenField: subItemsField,
          expandIcons: true,
          checkboxes: true,
          size,
          item: itemTemplate
        },
        dataItems: dataItems2,
        focusIdField: dataItemKey,
        textField: _this2.$props.textField,
        checkField,
        checkIndeterminateField,
        expandField: _this2.$props.expandField,
        childrenField: subItemsField,
        expandIcons: true,
        onItemclick: _this2.onChange,
        on: _this2.v3 ? void 0 : {
          "itemclick": _this2.onChange,
          "checkchange": _this2.onChange,
          "expandchange": _this2.onExpand,
          "focus": _this2.onFocus,
          "blur": _this2.onBlur,
          "keydown": _this2.onWrapperKeyDown
        },
        onCheckchange: _this2.onChange,
        onExpandchange: _this2.onExpand,
        onFocus: _this2.onFocus,
        onBlur: _this2.onBlur,
        onKeydown: _this2.onWrapperKeyDown,
        checkboxes: true,
        size,
        item: itemTemplate
      }) : noDataTemplate, footer && h("div", {
        "class": "k-list-footer"
      }, [footer])])
    ]);
    return label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label,
        attrs: this.v3 ? void 0 : {
          label,
          editorValue: this.hasValue,
          editorPlaceholder: placeholder,
          editorValid: isValid,
          editorDisabled: disabled,
          editorId: id,
          dir
        },
        editorValue: this.hasValue,
        editorPlaceholder: placeholder,
        editorValid: isValid,
        editorDisabled: disabled,
        editorId: id,
        dir
      }, this.v3 ? function() {
        return [multiselecttree];
      } : [multiselecttree])
    ) : multiselecttree;
  },
  methods: {
    calculatePopupWidth: function calculatePopupWidth2() {
      if (this.elementRef) {
        this.popupWidth = this.popupSettings.width !== void 0 ? this.popupSettings.width : this.elementRef.offsetWidth + "px";
      }
    },
    focus: function focus6() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    setValidity: function setValidity6() {
      if (this.selectRef && this.selectRef.setCustomValidity) {
        var _a2 = this.$props, validationMessage = _a2.validationMessage, valid = _a2.valid, required = _a2.required;
        var validity5 = getValidity3({
          validationMessage,
          valid,
          required
        }, this.hasValue);
        this.selectRef.setCustomValidity(validity5.valid ? "" : this.validationMessage === void 0 ? VALIDATION_MESSAGE6 : this.validationMessage);
      }
    },
    changeValue: function changeValue2(event, items, operation) {
      var fields = {
        dataItemKey: this.dataItemKey,
        checkField: this.checkField,
        checkIndeterminateField: this.checkIndeterminateField,
        expandField: this.expandField,
        subItemsField: this.subItemsField
      };
      var value2 = getMultiSelectTreeValue(this.dataItems, __assign19(__assign19({}, fields), {
        items,
        operation,
        value: this.computedValue
      }));
      var changeEvent = __assign19({
        items,
        operation,
        value: value2
      }, event);
      this.$emit("changemodel", value2);
      this.$emit("update:modelValue", value2);
      this.$emit("change", changeEvent);
    },
    onChange: function onChange4(e) {
      if (areSame(e.item, this.computedValue, this.dataItemKey)) {
        return;
      }
      var item2 = e.item, event = e.event;
      var ev = {
        event,
        target: this
      };
      this.changeValue(ev, [item2], "toggle");
    },
    openPopup: function openPopup2(event) {
      if (!this.isOpen) {
        var openEvent = __assign19({}, event);
        this.$emit("open", openEvent);
        if (this.opened === void 0) {
          this.openState = true;
        }
      }
    },
    closePopup: function closePopup2(event) {
      if (this.isOpen) {
        var closeEvent = __assign19({}, event);
        this.$emit("close", closeEvent);
        if (this.opened === void 0) {
          this.openState = false;
        }
      }
    },
    switchFocus: function switchFocus2(focusFn) {
      var _this = this;
      this.skipFocusRef = true;
      focusFn();
      window.setTimeout(function() {
        return _this.skipFocusRef = false;
      }, 0);
    },
    focusElement: function focusElement4(element) {
      if (element) {
        this.switchFocus(function() {
          return element.focus();
        });
      }
    },
    onPopupOpened: function onPopupOpened4() {
      if (!this.focusedState && this.isOpen) {
        this.closePopup({
          target: this
        });
      } else {
        if (this.$props.filterable) {
          var inputElement = this.inputRef && this.inputRef.input;
          this.focusElement(inputElement);
        } else {
          this.focusElement(this.treeViewRef && this.treeViewRef.input);
        }
      }
    },
    onPopupClosed: function onPopupClosed4() {
      if (this.focusedState) {
        this.focusElement(this.elementRef);
      }
    },
    onFocus: function onFocus4(event) {
      if (!this.focusedState && !this.skipFocusRef) {
        this.focusedState = true;
        var focusEvent = {
          event,
          target: this
        };
        this.$emit("focus", focusEvent);
      }
    },
    onBlur: function onBlur5(event) {
      if (this.focusedState && !this.skipFocusRef) {
        this.focusedTagState = void 0;
        this.focusedState = false;
        var ev = {
          event,
          target: this
        };
        var focusEvent = __assign19({}, ev);
        if (!event.relatedTarget || !event.relatedTarget.closest(".popup-" + this.componentGuid)) {
          this.$emit("blur", focusEvent);
          this.closePopup(ev);
        }
      }
    },
    onWrapperMouseDown: function onWrapperMouseDown2() {
      if (this.focusedState) {
        this.switchFocus(noop);
      }
    },
    onWrapperClick: function onWrapperClick2(event) {
      if (!this.$props.disabled && !event.defaultPrevented) {
        this.focusedState = true;
        var ev = {
          event,
          target: this
        };
        if (!this.isOpen) {
          this.openPopup(ev);
        }
      }
    },
    onWrapperKeyDown: function onWrapperKeyDown2(event) {
      var _this = this;
      var keyCode = event.keyCode, altKey = event.altKey;
      var treeviewElement = this.treeViewRef && this.treeViewRef.$el;
      var inputElement = this.inputRef && this.inputRef.input;
      if (this.$props.disabled || event.defaultPrevented && inputElement === event.target) {
        return;
      }
      var ev = {
        event,
        target: this
      };
      if (this.computedValue && this.computedValue.length > 0 && (keyCode === Keys.left || keyCode === Keys.right || keyCode === Keys.home || keyCode === Keys.end || keyCode === Keys.delete || keyCode === Keys.backspace)) {
        var tagsToRender = this.tagsToRenderRef;
        var focusedIndex3 = this.focusedTagState ? tagsToRender.findIndex(function(t) {
          return matchTags(t, _this.focusedTagState, _this.dataItemKey);
        }) : -1;
        var newFocusedTag = void 0;
        var hasFocused = focusedIndex3 !== -1;
        if (keyCode === Keys.left) {
          if (hasFocused) {
            focusedIndex3 = Math.max(0, focusedIndex3 - 1);
          } else {
            focusedIndex3 = tagsToRender.length - 1;
          }
          newFocusedTag = tagsToRender[focusedIndex3];
        } else if (keyCode === Keys.right) {
          if (hasFocused) {
            focusedIndex3 = Math.min(tagsToRender.length - 1, focusedIndex3 + 1);
            newFocusedTag = tagsToRender[focusedIndex3];
          } else {
            newFocusedTag = tagsToRender[0];
          }
        } else if (keyCode === Keys.home) {
          newFocusedTag = tagsToRender[0];
        } else if (keyCode === Keys.end) {
          newFocusedTag = tagsToRender[tagsToRender.length - 1];
        } else if (keyCode === Keys.delete || keyCode === Keys.backspace) {
          if (hasFocused) {
            this.changeValue(ev, tagsToRender[focusedIndex3].data, "delete");
          }
        }
        if (newFocusedTag !== this.focusedTagState) {
          this.focusedTagState = newFocusedTag;
        }
      }
      if (this.isOpen) {
        if (keyCode === Keys.esc || altKey && keyCode === Keys.up) {
          event.preventDefault();
          this.switchFocus(function() {
            _this.focusElement(_this.elementRef);
          });
          this.closePopup(ev);
        } else if (treeviewElement && treeviewElement.querySelector(".k-focus") && (keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.left || keyCode === Keys.right || keyCode === Keys.home || keyCode === Keys.end)) {
          if (keyCode === Keys.up) {
            var items = Array.from(treeviewElement.querySelectorAll(".k-treeview-item"));
            var focusedItem2 = __spreadArray4([], items, true).reverse().find(function(i) {
              return Boolean(i && i.querySelector(".k-focus"));
            });
            if (focusedItem2 && items.indexOf(focusedItem2) === 0) {
              return this.switchFocus(function() {
                _this.focusElement(inputElement || _this.elementRef);
              });
            }
          }
          this.switchFocus(noop);
        } else if (keyCode === Keys.down) {
          this.switchFocus(function() {
            _this.focusElement(inputElement || treeviewElement);
          });
        }
      } else {
        if (altKey && keyCode === Keys.down) {
          event.preventDefault();
          this.openPopup(ev);
        }
      }
    },
    onInputKeyDown: function onInputKeyDown5(event) {
      var _this = this;
      var keyCode = event.keyCode, altKey = event.altKey;
      if (keyCode === Keys.esc || altKey && keyCode === Keys.up) {
        event.preventDefault();
        this.switchFocus(function() {
          _this.focusElement(_this.elementRef);
        });
        this.closePopup(event);
      }
      if (altKey || keyCode !== Keys.up && keyCode !== Keys.down) {
        return;
      }
      event.preventDefault();
      this.switchFocus(keyCode === Keys.up ? function() {
        _this.focusElement(_this.elementRef);
      } : function() {
        _this.focusElement(_this.treeViewRef && _this.treeViewRef.$el);
      });
    },
    onClear: function onClear2(event) {
      var ev = {
        event,
        target: this
      };
      this.changeValue(ev, [], "clear");
      this.closePopup(ev);
      event.preventDefault();
    },
    onTagDelete: function onTagDelete3(itemsToRemove, event) {
      this.closePopup({
        target: this
      });
      if (!this.focusedState) {
        var inputElement = this.inputRef && this.inputRef.input;
        this.focusElement(inputElement);
      }
      this.changeValue({
        event,
        target: this
      }, itemsToRemove, "delete");
    },
    onExpand: function onExpand2(e) {
      var item2 = e.item, itemHierarchicalIndex = e.itemHierarchicalIndex, event = e.event;
      var expandEvent = {
        level: toLevel3(itemHierarchicalIndex),
        item: item2,
        event,
        target: this
      };
      this.$emit("expandchange", expandEvent);
    },
    onFilterChange: function onFilterChange2(event) {
      var filterDesc = {
        field: this.$props.textField,
        operator: "contains",
        value: event.target.value
      };
      var ev = {
        filter: filterDesc,
        event,
        target: this
      };
      this.$emit("filterchange", ev);
      if (this.$props.filter === void 0) {
        this.filterState = event.target.value;
      }
    }
  }
};
var MultiSelectTree = MultiSelectTreeVue2;

export {
  DropDownListVue2,
  DropDownList,
  ComboBoxVue2,
  ComboBox,
  AutoCompleteVue2,
  AutoComplete,
  MultiSelectVue2,
  MultiSelect,
  DropDownTree,
  getValueMap,
  getMultiSelectTreeValue,
  MultiSelectTree
};
//# sourceMappingURL=chunk-IBGZHAYS.js.map
