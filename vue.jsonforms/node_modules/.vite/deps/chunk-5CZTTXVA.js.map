{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-undo/src/basecommand.js", "../../@ckeditor/ckeditor5-undo/src/undocommand.js", "../../@ckeditor/ckeditor5-undo/src/redocommand.js", "../../@ckeditor/ckeditor5-undo/src/undoediting.js", "../../@ckeditor/ckeditor5-undo/src/undoui.js", "../../@ckeditor/ckeditor5-undo/src/undo.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/basecommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\nimport { transformSets, NoOperation } from '@ckeditor/ckeditor5-engine';\n/**\n * Base class for the undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n */\nexport default class BaseCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * Stack of items stored by the command. These are pairs of:\n         *\n         * * {@link module:engine/model/batch~Batch batch} saved by the command,\n         * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n         */\n        this._stack = [];\n        /**\n         * Stores all batches that were created by this command.\n         *\n         * @internal\n         */\n        this._createdBatches = new WeakSet();\n        // Refresh state, so the command is inactive right after initialization.\n        this.refresh();\n        // This command should not depend on selection change.\n        this._isEnabledBasedOnSelection = false;\n        // Set the transparent batch for the `editor.data.set()` call if the\n        // batch type is not set already.\n        this.listenTo(editor.data, 'set', (evt, data) => {\n            // Create a shallow copy of the options to not change the original args.\n            // And make sure that an object is assigned to data[ 1 ].\n            data[1] = { ...data[1] };\n            const options = data[1];\n            // If batch type is not set, default to non-undoable batch.\n            if (!options.batchType) {\n                options.batchType = { isUndoable: false };\n            }\n        }, { priority: 'high' });\n        // Clear the stack for the `transparent` batches.\n        this.listenTo(editor.data, 'set', (evt, data) => {\n            // We can assume that the object exists and it has a `batchType` property.\n            // It was ensured with a higher priority listener before.\n            const options = data[1];\n            if (!options.batchType.isUndoable) {\n                this.clearStack();\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        this.isEnabled = this._stack.length > 0;\n    }\n    /**\n     * Returns all batches created by this command.\n     */\n    get createdBatches() {\n        return this._createdBatches;\n    }\n    /**\n     * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n     * created by the editor which this command is registered to.\n     *\n     * @param batch The batch to add.\n     */\n    addBatch(batch) {\n        const docSelection = this.editor.model.document.selection;\n        const selection = {\n            ranges: docSelection.hasOwnRange ? Array.from(docSelection.getRanges()) : [],\n            isBackward: docSelection.isBackward\n        };\n        this._stack.push({ batch, selection });\n        this.refresh();\n    }\n    /**\n     * Removes all items from the stack.\n     */\n    clearStack() {\n        this._stack = [];\n        this.refresh();\n    }\n    /**\n     * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n     *\n     * @param ranges Ranges to be restored.\n     * @param isBackward A flag describing whether the restored range was selected forward or backward.\n     * @param operations Operations which has been applied since selection has been stored.\n     */\n    _restoreSelection(ranges, isBackward, operations) {\n        const model = this.editor.model;\n        const document = model.document;\n        // This will keep the transformed selection ranges.\n        const selectionRanges = [];\n        // Transform all ranges from the restored selection.\n        const transformedRangeGroups = ranges.map(range => range.getTransformedByOperations(operations));\n        const allRanges = transformedRangeGroups.flat();\n        for (const rangeGroup of transformedRangeGroups) {\n            // While transforming there could appear ranges that are contained by other ranges, we shall ignore them.\n            const transformed = rangeGroup\n                .filter(range => range.root != document.graveyard)\n                .filter(range => !isRangeContainedByAnyOtherRange(range, allRanges));\n            // All the transformed ranges ended up in graveyard.\n            if (!transformed.length) {\n                continue;\n            }\n            // After the range got transformed, we have an array of ranges. Some of those\n            // ranges may be \"touching\" -- they can be next to each other and could be merged.\n            normalizeRanges(transformed);\n            // For each `range` from `ranges`, we take only one transformed range.\n            // This is because we want to prevent situation where single-range selection\n            // got transformed to multi-range selection.\n            selectionRanges.push(transformed[0]);\n        }\n        // @if CK_DEBUG_ENGINE // console.log( `Restored selection by undo: ${ selectionRanges.join( ', ' ) }` );\n        // `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n        if (selectionRanges.length) {\n            model.change(writer => {\n                writer.setSelection(selectionRanges, { backward: isBackward });\n            });\n        }\n    }\n    /**\n     * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n     * This is a helper method for {@link #execute}.\n     *\n     * @param batchToUndo The batch to be undone.\n     * @param undoingBatch The batch that will contain undoing changes.\n     */\n    _undo(batchToUndo, undoingBatch) {\n        const model = this.editor.model;\n        const document = model.document;\n        // All changes done by the command execution will be saved as one batch.\n        this._createdBatches.add(undoingBatch);\n        const operationsToUndo = batchToUndo.operations.slice().filter(operation => operation.isDocumentOperation);\n        operationsToUndo.reverse();\n        // We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n        // we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n        for (const operationToUndo of operationsToUndo) {\n            const nextBaseVersion = operationToUndo.baseVersion + 1;\n            const historyOperations = Array.from(document.history.getOperations(nextBaseVersion));\n            const transformedSets = transformSets([operationToUndo.getReversed()], historyOperations, {\n                useRelations: true,\n                document: this.editor.model.document,\n                padWithNoOps: false,\n                forceWeakRemove: true\n            });\n            const reversedOperations = transformedSets.operationsA;\n            // After reversed operation has been transformed by all history operations, apply it.\n            for (let operation of reversedOperations) {\n                // Do not apply any operation on non-editable space.\n                const affectedSelectable = operation.affectedSelectable;\n                if (affectedSelectable && !model.canEditAt(affectedSelectable)) {\n                    operation = new NoOperation(operation.baseVersion);\n                }\n                // Before applying, add the operation to the `undoingBatch`.\n                undoingBatch.addOperation(operation);\n                model.applyOperation(operation);\n                document.history.setOperationAsUndone(operationToUndo, operation);\n            }\n        }\n    }\n}\n/**\n * Normalizes list of ranges by joining intersecting or \"touching\" ranges.\n *\n * @param ranges Ranges to be normalized.\n */\nfunction normalizeRanges(ranges) {\n    ranges.sort((a, b) => a.start.isBefore(b.start) ? -1 : 1);\n    for (let i = 1; i < ranges.length; i++) {\n        const previousRange = ranges[i - 1];\n        const joinedRange = previousRange.getJoined(ranges[i], true);\n        if (joinedRange) {\n            // Replace the ranges on the list with the new joined range.\n            i--;\n            ranges.splice(i, 2, joinedRange);\n        }\n    }\n}\nfunction isRangeContainedByAnyOtherRange(range, ranges) {\n    return ranges.some(otherRange => otherRange !== range && otherRange.containsRange(range, true));\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undocommand\n */\nimport BaseCommand from './basecommand';\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n */\nexport default class UndoCommand extends BaseCommand {\n    /**\n     * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n     * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n     * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n     *\n     * @fires execute\n     * @fires revert\n     * @param batch A batch that should be undone. If not set, the last added batch will be undone.\n     */\n    execute(batch = null) {\n        // If batch is not given, set `batchIndex` to the last index in command stack.\n        const batchIndex = batch ? this._stack.findIndex(a => a.batch == batch) : this._stack.length - 1;\n        const item = this._stack.splice(batchIndex, 1)[0];\n        const undoingBatch = this.editor.model.createBatch({ isUndo: true });\n        // All changes have to be done in one `enqueueChange` callback so other listeners will not\n        // step between consecutive operations, or won't do changes to the document before selection is properly restored.\n        this.editor.model.enqueueChange(undoingBatch, () => {\n            this._undo(item.batch, undoingBatch);\n            const operations = this.editor.model.document.history.getOperations(item.batch.baseVersion);\n            this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n        });\n        // Firing `revert` event after the change block to make sure that it includes all changes from post-fixers\n        // and make sure that the selection is \"stabilized\" (the selection range is saved after undo is executed and then\n        // restored on redo, so it is important that the selection range is saved after post-fixers are done).\n        this.fire('revert', item.batch, undoingBatch);\n        this.refresh();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/redocommand\n */\nimport BaseCommand from './basecommand';\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n */\nexport default class RedoCommand extends BaseCommand {\n    /**\n     * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n     * the command's stack, applies the reverted and transformed version on the\n     * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n     * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n     *\n     * @fires execute\n     */\n    execute() {\n        const item = this._stack.pop();\n        const redoingBatch = this.editor.model.createBatch({ isUndo: true });\n        // All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n        // operations, or won't do changes to the document before selection is properly restored.\n        this.editor.model.enqueueChange(redoingBatch, () => {\n            const lastOperation = item.batch.operations[item.batch.operations.length - 1];\n            const nextBaseVersion = lastOperation.baseVersion + 1;\n            const operations = this.editor.model.document.history.getOperations(nextBaseVersion);\n            this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n            this._undo(item.batch, redoingBatch);\n        });\n        this.refresh();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undoediting\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n */\nexport default class UndoEditing extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * Keeps track of which batches were registered in undo.\n         */\n        this._batchRegistry = new WeakSet();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'UndoEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Create commands.\n        this._undoCommand = new UndoCommand(editor);\n        this._redoCommand = new RedoCommand(editor);\n        // Register command to the editor.\n        editor.commands.add('undo', this._undoCommand);\n        editor.commands.add('redo', this._redoCommand);\n        this.listenTo(editor.model, 'applyOperation', (evt, args) => {\n            const operation = args[0];\n            // Do not register batch if the operation is not a document operation.\n            // This prevents from creating empty undo steps, where all operations where non-document operations.\n            // Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n            // Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n            // Such operations should not be reversed.\n            if (!operation.isDocumentOperation) {\n                return;\n            }\n            const batch = operation.batch;\n            const isRedoBatch = this._redoCommand.createdBatches.has(batch);\n            const isUndoBatch = this._undoCommand.createdBatches.has(batch);\n            const wasProcessed = this._batchRegistry.has(batch);\n            // Skip the batch if it was already processed.\n            if (wasProcessed) {\n                return;\n            }\n            // Add the batch to the registry so it will not be processed again.\n            this._batchRegistry.add(batch);\n            if (!batch.isUndoable) {\n                return;\n            }\n            if (isRedoBatch) {\n                // If this batch comes from `redoCommand`, add it to the `undoCommand` stack.\n                this._undoCommand.addBatch(batch);\n            }\n            else if (!isUndoBatch) {\n                // If the batch comes neither  from `redoCommand` nor from `undoCommand` then it is a new, regular batch.\n                // Add the batch to the `undoCommand` stack and clear the `redoCommand` stack.\n                this._undoCommand.addBatch(batch);\n                this._redoCommand.clearStack();\n            }\n        }, { priority: 'highest' });\n        this.listenTo(this._undoCommand, 'revert', (evt, undoneBatch, undoingBatch) => {\n            this._redoCommand.addBatch(undoingBatch);\n        });\n        editor.keystrokes.set('CTRL+Z', 'undo');\n        editor.keystrokes.set('CTRL+Y', 'redo');\n        editor.keystrokes.set('CTRL+SHIFT+Z', 'redo');\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undoui\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { ButtonView } from '@ckeditor/ckeditor5-ui';\nimport undoIcon from '../theme/icons/undo.svg';\nimport redoIcon from '../theme/icons/redo.svg';\n/**\n * The undo UI feature. It introduces the `'undo'` and `'redo'` buttons to the editor.\n */\nexport default class UndoUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'UndoUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedUndoIcon = locale.uiLanguageDirection == 'ltr' ? undoIcon : redoIcon;\n        const localizedRedoIcon = locale.uiLanguageDirection == 'ltr' ? redoIcon : undoIcon;\n        this._addButton('undo', t('Undo'), 'CTRL+Z', localizedUndoIcon);\n        this._addButton('redo', t('Redo'), 'CTRL+Y', localizedRedoIcon);\n    }\n    /**\n     * Creates a button for the specified command.\n     *\n     * @param name Command name.\n     * @param label Button label.\n     * @param keystroke Command keystroke.\n     * @param Icon Source of the icon.\n     */\n    _addButton(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const command = editor.commands.get(name);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon: Icon,\n                keystroke,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => {\n                editor.execute(name);\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undo\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport UndoEditing from './undoediting';\nimport UndoUI from './undoui';\n/**\n * The undo feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and the {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is an explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever an {@link module:engine/model/operation/operation~Operation operation} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that operation is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * operation was applied. A batch is saved instead of the operation because changes are undone batch-by-batch, not operation-by-operation\n * and a batch is seen as one undo step.\n *\n * After changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n * ```\n *    History                            Undo stack\n * ==============             ==================================\n * [operation A1]                      [  batch A  ]\n * [operation B1]                      [  batch B  ]\n * [operation B2]                      [  batch C  ]\n * [operation C1]\n * [operation C2]\n * [operation B3]\n * [operation C3]\n * ```\n *\n * Where operations starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of operations which will reverse the effects of that batch needs to be generated.\n * For example, if a batch added several letters, undoing the batch should remove them. It is important to apply undoing\n * operations in the reversed order, so if a batch has operation `X`, `Y`, `Z`, reversed operations `Zr`, `Yr` and `Xr`\n * need to be applied. Otherwise reversed operation `Xr` would operate on a wrong document state, because operation `X`\n * does not know that operations `Y` and `Z` happened.\n *\n * After operations from an undone batch got {@link module:engine/model/operation/operation~Operation#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, operation `C3` is the last operation and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n * ```\n *      History                             Undo stack\n * =================             ==================================\n * [ operation A1  ]                      [  batch A  ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]             [   processing undoing batch C   ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * ```\n *\n * Next is operation `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by operations from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of operations from that batch are processed in the same fashion.\n *\n * ```\n *      History                             Undo stack                                      Redo stack\n * =================             ==================================             ==================================\n * [ operation A1  ]                      [  batch A  ]                                    [ batch Cr ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * [ operation C2' ]\n * [ operation C1' ]\n * ```\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: operations from a batch (i.e. `A1`) are reversed and then transformed by operations stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Operations from\n * the batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n * ```\n *      History                             Undo stack                                      Redo stack\n * =================             ==================================             ==================================\n * [ operation A1  ]                      [  batch A  ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]                      [ batch Crr ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * [ operation C2' ]\n * [ operation C1' ]\n * [ operation C1'r]\n * [ operation C2'r]\n * [ operation C3rr]\n * ```\n */\nexport default class Undo extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [UndoEditing, UndoUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Undo';\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYA,IAAqB,cAArB,cAAyC,QAAQ;AAAA;AAAA;AAAA;AAAA,EAI7C,YAAY,QAAQ;AAChB,UAAM,MAAM;AAOZ,SAAK,SAAS,CAAC;AAMf,SAAK,kBAAkB,oBAAI,QAAQ;AAEnC,SAAK,QAAQ;AAEb,SAAK,6BAA6B;AAGlC,SAAK,SAAS,OAAO,MAAM,OAAO,CAAC,KAAK,SAAS;AAG7C,WAAK,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,EAAE;AACvB,YAAM,UAAU,KAAK,CAAC;AAEtB,UAAI,CAAC,QAAQ,WAAW;AACpB,gBAAQ,YAAY,EAAE,YAAY,MAAM;AAAA,MAC5C;AAAA,IACJ,GAAG,EAAE,UAAU,OAAO,CAAC;AAEvB,SAAK,SAAS,OAAO,MAAM,OAAO,CAAC,KAAK,SAAS;AAG7C,YAAM,UAAU,KAAK,CAAC;AACtB,UAAI,CAAC,QAAQ,UAAU,YAAY;AAC/B,aAAK,WAAW;AAAA,MACpB;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACN,SAAK,YAAY,KAAK,OAAO,SAAS;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,iBAAiB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,OAAO;AACZ,UAAM,eAAe,KAAK,OAAO,MAAM,SAAS;AAChD,UAAM,YAAY;AAAA,MACd,QAAQ,aAAa,cAAc,MAAM,KAAK,aAAa,UAAU,CAAC,IAAI,CAAC;AAAA,MAC3E,YAAY,aAAa;AAAA,IAC7B;AACA,SAAK,OAAO,KAAK,EAAE,OAAO,UAAU,CAAC;AACrC,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa;AACT,SAAK,SAAS,CAAC;AACf,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,QAAQ,YAAY,YAAY;AAC9C,UAAM,QAAQ,KAAK,OAAO;AAC1B,UAAM,WAAW,MAAM;AAEvB,UAAM,kBAAkB,CAAC;AAEzB,UAAM,yBAAyB,OAAO,IAAI,WAAS,MAAM,2BAA2B,UAAU,CAAC;AAC/F,UAAM,YAAY,uBAAuB,KAAK;AAC9C,eAAW,cAAc,wBAAwB;AAE7C,YAAM,cAAc,WACf,OAAO,WAAS,MAAM,QAAQ,SAAS,SAAS,EAChD,OAAO,WAAS,CAAC,gCAAgC,OAAO,SAAS,CAAC;AAEvE,UAAI,CAAC,YAAY,QAAQ;AACrB;AAAA,MACJ;AAGA,sBAAgB,WAAW;AAI3B,sBAAgB,KAAK,YAAY,CAAC,CAAC;AAAA,IACvC;AAGA,QAAI,gBAAgB,QAAQ;AACxB,YAAM,OAAO,YAAU;AACnB,eAAO,aAAa,iBAAiB,EAAE,UAAU,WAAW,CAAC;AAAA,MACjE,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,aAAa,cAAc;AAC7B,UAAM,QAAQ,KAAK,OAAO;AAC1B,UAAM,WAAW,MAAM;AAEvB,SAAK,gBAAgB,IAAI,YAAY;AACrC,UAAM,mBAAmB,YAAY,WAAW,MAAM,EAAE,OAAO,eAAa,UAAU,mBAAmB;AACzG,qBAAiB,QAAQ;AAGzB,eAAW,mBAAmB,kBAAkB;AAC5C,YAAM,kBAAkB,gBAAgB,cAAc;AACtD,YAAM,oBAAoB,MAAM,KAAK,SAAS,QAAQ,cAAc,eAAe,CAAC;AACpF,YAAM,kBAAkB,cAAc,CAAC,gBAAgB,YAAY,CAAC,GAAG,mBAAmB;AAAA,QACtF,cAAc;AAAA,QACd,UAAU,KAAK,OAAO,MAAM;AAAA,QAC5B,cAAc;AAAA,QACd,iBAAiB;AAAA,MACrB,CAAC;AACD,YAAM,qBAAqB,gBAAgB;AAE3C,eAAS,aAAa,oBAAoB;AAEtC,cAAM,qBAAqB,UAAU;AACrC,YAAI,sBAAsB,CAAC,MAAM,UAAU,kBAAkB,GAAG;AAC5D,sBAAY,IAAI,YAAY,UAAU,WAAW;AAAA,QACrD;AAEA,qBAAa,aAAa,SAAS;AACnC,cAAM,eAAe,SAAS;AAC9B,iBAAS,QAAQ,qBAAqB,iBAAiB,SAAS;AAAA,MACpE;AAAA,IACJ;AAAA,EACJ;AACJ;AAMA,SAAS,gBAAgB,QAAQ;AAC7B,SAAO,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,SAAS,EAAE,KAAK,IAAI,KAAK,CAAC;AACxD,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,UAAM,gBAAgB,OAAO,IAAI,CAAC;AAClC,UAAM,cAAc,cAAc,UAAU,OAAO,CAAC,GAAG,IAAI;AAC3D,QAAI,aAAa;AAEb;AACA,aAAO,OAAO,GAAG,GAAG,WAAW;AAAA,IACnC;AAAA,EACJ;AACJ;AACA,SAAS,gCAAgC,OAAO,QAAQ;AACpD,SAAO,OAAO,KAAK,gBAAc,eAAe,SAAS,WAAW,cAAc,OAAO,IAAI,CAAC;AAClG;;;AChLA,IAAqB,cAArB,cAAyC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUjD,QAAQ,QAAQ,MAAM;AAElB,UAAM,aAAa,QAAQ,KAAK,OAAO,UAAU,OAAK,EAAE,SAAS,KAAK,IAAI,KAAK,OAAO,SAAS;AAC/F,UAAM,OAAO,KAAK,OAAO,OAAO,YAAY,CAAC,EAAE,CAAC;AAChD,UAAM,eAAe,KAAK,OAAO,MAAM,YAAY,EAAE,QAAQ,KAAK,CAAC;AAGnE,SAAK,OAAO,MAAM,cAAc,cAAc,MAAM;AAChD,WAAK,MAAM,KAAK,OAAO,YAAY;AACnC,YAAM,aAAa,KAAK,OAAO,MAAM,SAAS,QAAQ,cAAc,KAAK,MAAM,WAAW;AAC1F,WAAK,kBAAkB,KAAK,UAAU,QAAQ,KAAK,UAAU,YAAY,UAAU;AAAA,IACvF,CAAC;AAID,SAAK,KAAK,UAAU,KAAK,OAAO,YAAY;AAC5C,SAAK,QAAQ;AAAA,EACjB;AACJ;;;AC3BA,IAAqB,cAArB,cAAyC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASjD,UAAU;AACN,UAAM,OAAO,KAAK,OAAO,IAAI;AAC7B,UAAM,eAAe,KAAK,OAAO,MAAM,YAAY,EAAE,QAAQ,KAAK,CAAC;AAGnE,SAAK,OAAO,MAAM,cAAc,cAAc,MAAM;AAChD,YAAM,gBAAgB,KAAK,MAAM,WAAW,KAAK,MAAM,WAAW,SAAS,CAAC;AAC5E,YAAM,kBAAkB,cAAc,cAAc;AACpD,YAAM,aAAa,KAAK,OAAO,MAAM,SAAS,QAAQ,cAAc,eAAe;AACnF,WAAK,kBAAkB,KAAK,UAAU,QAAQ,KAAK,UAAU,YAAY,UAAU;AACnF,WAAK,MAAM,KAAK,OAAO,YAAY;AAAA,IACvC,CAAC;AACD,SAAK,QAAQ;AAAA,EACjB;AACJ;;;ACxBA,IAAqB,cAArB,cAAyC,OAAO;AAAA,EAC5C,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,iBAAiB,oBAAI,QAAQ;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AAEpB,SAAK,eAAe,IAAI,YAAY,MAAM;AAC1C,SAAK,eAAe,IAAI,YAAY,MAAM;AAE1C,WAAO,SAAS,IAAI,QAAQ,KAAK,YAAY;AAC7C,WAAO,SAAS,IAAI,QAAQ,KAAK,YAAY;AAC7C,SAAK,SAAS,OAAO,OAAO,kBAAkB,CAAC,KAAK,SAAS;AACzD,YAAM,YAAY,KAAK,CAAC;AAMxB,UAAI,CAAC,UAAU,qBAAqB;AAChC;AAAA,MACJ;AACA,YAAM,QAAQ,UAAU;AACxB,YAAM,cAAc,KAAK,aAAa,eAAe,IAAI,KAAK;AAC9D,YAAM,cAAc,KAAK,aAAa,eAAe,IAAI,KAAK;AAC9D,YAAM,eAAe,KAAK,eAAe,IAAI,KAAK;AAElD,UAAI,cAAc;AACd;AAAA,MACJ;AAEA,WAAK,eAAe,IAAI,KAAK;AAC7B,UAAI,CAAC,MAAM,YAAY;AACnB;AAAA,MACJ;AACA,UAAI,aAAa;AAEb,aAAK,aAAa,SAAS,KAAK;AAAA,MACpC,WACS,CAAC,aAAa;AAGnB,aAAK,aAAa,SAAS,KAAK;AAChC,aAAK,aAAa,WAAW;AAAA,MACjC;AAAA,IACJ,GAAG,EAAE,UAAU,UAAU,CAAC;AAC1B,SAAK,SAAS,KAAK,cAAc,UAAU,CAAC,KAAK,aAAa,iBAAiB;AAC3E,WAAK,aAAa,SAAS,YAAY;AAAA,IAC3C,CAAC;AACD,WAAO,WAAW,IAAI,UAAU,MAAM;AACtC,WAAO,WAAW,IAAI,UAAU,MAAM;AACtC,WAAO,WAAW,IAAI,gBAAgB,MAAM;AAAA,EAChD;AACJ;;;ACxEA,OAAO,cAAc;AACrB,OAAO,cAAc;AAIrB,IAAqB,SAArB,cAAoC,OAAO;AAAA;AAAA;AAAA;AAAA,EAIvC,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AACpB,UAAM,SAAS,OAAO;AACtB,UAAM,IAAI,OAAO;AACjB,UAAM,oBAAoB,OAAO,uBAAuB,QAAQ,WAAW;AAC3E,UAAM,oBAAoB,OAAO,uBAAuB,QAAQ,WAAW;AAC3E,SAAK,WAAW,QAAQ,EAAE,MAAM,GAAG,UAAU,iBAAiB;AAC9D,SAAK,WAAW,QAAQ,EAAE,MAAM,GAAG,UAAU,iBAAiB;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,MAAM,OAAO,WAAW,MAAM;AACrC,UAAM,SAAS,KAAK;AACpB,WAAO,GAAG,iBAAiB,IAAI,MAAM,YAAU;AAC3C,YAAM,UAAU,OAAO,SAAS,IAAI,IAAI;AACxC,YAAM,OAAO,IAAI,WAAW,MAAM;AAClC,WAAK,IAAI;AAAA,QACL;AAAA,QACA,MAAM;AAAA,QACN;AAAA,QACA,SAAS;AAAA,MACb,CAAC;AACD,WAAK,KAAK,WAAW,EAAE,GAAG,SAAS,WAAW;AAC9C,WAAK,SAAS,MAAM,WAAW,MAAM;AACjC,eAAO,QAAQ,IAAI;AACnB,eAAO,QAAQ,KAAK,MAAM;AAAA,MAC9B,CAAC;AACD,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;;;AC+CA,IAAqB,OAArB,cAAkC,OAAO;AAAA;AAAA;AAAA;AAAA,EAIrC,WAAW,WAAW;AAClB,WAAO,CAAC,aAAa,MAAM;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
