{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-upload/src/filereader.js", "../../@ckeditor/ckeditor5-upload/src/filerepository.js", "../../@ckeditor/ckeditor5-upload/src/ui/filedialogbuttonview.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module upload/filereader\n */\n/* globals window */\nimport { ObservableMixin } from '@ckeditor/ckeditor5-utils';\n/**\n * Wrapper over the native `FileReader`.\n */\nexport default class FileReader extends ObservableMixin() {\n    /**\n     * Creates an instance of the FileReader.\n     */\n    constructor() {\n        super();\n        const reader = new window.FileReader();\n        this._reader = reader;\n        this._data = undefined;\n        this.set('loaded', 0);\n        reader.onprogress = evt => {\n            this.loaded = evt.loaded;\n        };\n    }\n    /**\n     * Returns error that occurred during file reading.\n     */\n    get error() {\n        return this._reader.error;\n    }\n    /**\n     * Holds the data of an already loaded file. The file must be first loaded\n     * by using {@link module:upload/filereader~FileReader#read `read()`}.\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * Reads the provided file.\n     *\n     * @param file Native File object.\n     * @returns Returns a promise that will be resolved with file's content.\n     * The promise will be rejected in case of an error or when the reading process is aborted.\n     */\n    read(file) {\n        const reader = this._reader;\n        this.total = file.size;\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                const result = reader.result;\n                this._data = result;\n                resolve(result);\n            };\n            reader.onerror = () => {\n                reject('error');\n            };\n            reader.onabort = () => {\n                reject('aborted');\n            };\n            this._reader.readAsDataURL(file);\n        });\n    }\n    /**\n     * Aborts file reader.\n     */\n    abort() {\n        this._reader.abort();\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module upload/filerepository\n */\nimport { Plugin, PendingActions } from '@ckeditor/ckeditor5-core';\nimport { CKEditorError, Collection, ObservableMixin, logWarning, uid } from '@ckeditor/ckeditor5-utils';\nimport FileReader from './filereader';\n/**\n * File repository plugin. A central point for managing file upload.\n *\n * To use it, first you need an upload adapter. Upload adapter's job is to handle communication with the server\n * (sending the file and handling server's response). You can use one of the existing plugins introducing upload adapters\n * (e.g. {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter} or\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}) or write your own one â€“ see\n * the {@glink framework/deep-dive/upload-adapter Custom image upload adapter deep-dive} guide.\n *\n * Then, you can use {@link module:upload/filerepository~FileRepository#createLoader `createLoader()`} and the returned\n * {@link module:upload/filerepository~FileLoader} instance to load and upload files.\n */\nexport default class FileRepository extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * Collection of loaders associated with this repository.\n         */\n        this.loaders = new Collection();\n        /**\n         * Loaders mappings used to retrieve loaders references.\n         */\n        this._loadersMap = new Map();\n        /**\n         * Reference to a pending action registered in a {@link module:core/pendingactions~PendingActions} plugin\n         * while upload is in progress. When there is no upload then value is `null`.\n         */\n        this._pendingAction = null;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FileRepository';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [PendingActions];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        // Keeps upload in a sync with pending actions.\n        this.loaders.on('change', () => this._updatePendingAction());\n        this.set('uploaded', 0);\n        this.set('uploadTotal', null);\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total) => {\n            return total ? (uploaded / total * 100) : 0;\n        });\n    }\n    /**\n     * Returns the loader associated with specified file or promise.\n     *\n     * To get loader by id use `fileRepository.loaders.get( id )`.\n     *\n     * @param fileOrPromise Native file or promise handle.\n     */\n    getLoader(fileOrPromise) {\n        return this._loadersMap.get(fileOrPromise) || null;\n    }\n    /**\n     * Creates a loader instance for the given file.\n     *\n     * Requires {@link #createUploadAdapter} factory to be defined.\n     *\n     * @param fileOrPromise Native File object or native Promise object which resolves to a File.\n     */\n    createLoader(fileOrPromise) {\n        if (!this.createUploadAdapter) {\n            /**\n             * You need to enable an upload adapter in order to be able to upload files.\n             *\n             * This warning shows up when {@link module:upload/filerepository~FileRepository} is being used\n             * without {@link module:upload/filerepository~FileRepository#createUploadAdapter defining an upload adapter}.\n             *\n             * **If you see this warning when using one of the {@glink installation/getting-started/predefined-builds\n             * CKEditor 5 Builds}**\n             * it means that you did not configure any of the upload adapters available by default in those builds.\n             *\n             * See the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn which upload\n             * adapters are available in the builds and how to configure them.\n             *\n             * **If you see this warning when using a custom build** there is a chance that you enabled\n             * a feature like {@link module:image/imageupload~ImageUpload},\n             * or {@link module:image/imageupload/imageuploadui~ImageUploadUI} but you did not enable any upload adapter.\n             * You can choose one of the existing upload adapters listed in the\n             * {@glink features/images/image-upload/image-upload \"Image upload overview\"}.\n             *\n             * You can also implement your {@glink framework/deep-dive/upload-adapter own image upload adapter}.\n             *\n             * @error filerepository-no-upload-adapter\n             */\n            logWarning('filerepository-no-upload-adapter');\n            return null;\n        }\n        const loader = new FileLoader(Promise.resolve(fileOrPromise), this.createUploadAdapter);\n        this.loaders.add(loader);\n        this._loadersMap.set(fileOrPromise, loader);\n        // Store also file => loader mapping so loader can be retrieved by file instance returned upon Promise resolution.\n        if (fileOrPromise instanceof Promise) {\n            loader.file\n                .then(file => {\n                this._loadersMap.set(file, loader);\n            })\n                // Every then() must have a catch().\n                // File loader state (and rejections) are handled in read() and upload().\n                // Also, see the \"does not swallow the file promise rejection\" test.\n                .catch(() => { });\n        }\n        loader.on('change:uploaded', () => {\n            let aggregatedUploaded = 0;\n            for (const loader of this.loaders) {\n                aggregatedUploaded += loader.uploaded;\n            }\n            this.uploaded = aggregatedUploaded;\n        });\n        loader.on('change:uploadTotal', () => {\n            let aggregatedTotal = 0;\n            for (const loader of this.loaders) {\n                if (loader.uploadTotal) {\n                    aggregatedTotal += loader.uploadTotal;\n                }\n            }\n            this.uploadTotal = aggregatedTotal;\n        });\n        return loader;\n    }\n    /**\n     * Destroys the given loader.\n     *\n     * @param fileOrPromiseOrLoader File or Promise associated with that loader or loader itself.\n     */\n    destroyLoader(fileOrPromiseOrLoader) {\n        const loader = fileOrPromiseOrLoader instanceof FileLoader ? fileOrPromiseOrLoader : this.getLoader(fileOrPromiseOrLoader);\n        loader._destroy();\n        this.loaders.remove(loader);\n        this._loadersMap.forEach((value, key) => {\n            if (value === loader) {\n                this._loadersMap.delete(key);\n            }\n        });\n    }\n    /**\n     * Registers or deregisters pending action bound with upload progress.\n     */\n    _updatePendingAction() {\n        const pendingActions = this.editor.plugins.get(PendingActions);\n        if (this.loaders.length) {\n            if (!this._pendingAction) {\n                const t = this.editor.t;\n                const getMessage = (value) => `${t('Upload in progress')} ${parseInt(value)}%.`;\n                this._pendingAction = pendingActions.add(getMessage(this.uploadedPercent));\n                this._pendingAction.bind('message').to(this, 'uploadedPercent', getMessage);\n            }\n        }\n        else {\n            pendingActions.remove(this._pendingAction);\n            this._pendingAction = null;\n        }\n    }\n}\n/**\n * File loader class.\n *\n * It is used to control the process of reading the file and uploading it using the specified upload adapter.\n */\nclass FileLoader extends ObservableMixin() {\n    /**\n     * Creates a new instance of `FileLoader`.\n     *\n     * @param filePromise A promise which resolves to a file instance.\n     * @param uploadAdapterCreator The function which returns {@link module:upload/filerepository~UploadAdapter} instance.\n     */\n    constructor(filePromise, uploadAdapterCreator) {\n        super();\n        this.id = uid();\n        this._filePromiseWrapper = this._createFilePromiseWrapper(filePromise);\n        this._adapter = uploadAdapterCreator(this);\n        this._reader = new FileReader();\n        this.set('status', 'idle');\n        this.set('uploaded', 0);\n        this.set('uploadTotal', null);\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total) => {\n            return total ? (uploaded / total * 100) : 0;\n        });\n        this.set('uploadResponse', null);\n    }\n    /**\n     * A `Promise` which resolves to a `File` instance associated with this file loader.\n     */\n    get file() {\n        if (!this._filePromiseWrapper) {\n            // Loader was destroyed, return promise which resolves to null.\n            return Promise.resolve(null);\n        }\n        else {\n            // The `this._filePromiseWrapper.promise` is chained and not simply returned to handle a case when:\n            //\n            //\t\t* The `loader.file.then( ... )` is called by external code (returned promise is pending).\n            //\t\t* Then `loader._destroy()` is called (call is synchronous) which destroys the `loader`.\n            //\t\t* Promise returned by the first `loader.file.then( ... )` call is resolved.\n            //\n            // Returning `this._filePromiseWrapper.promise` will still resolve to a `File` instance so there\n            // is an additional check needed in the chain to see if `loader` was destroyed in the meantime.\n            return this._filePromiseWrapper.promise.then(file => this._filePromiseWrapper ? file : null);\n        }\n    }\n    /**\n     * Returns the file data. To read its data, you need for first load the file\n     * by using the {@link module:upload/filerepository~FileLoader#read `read()`} method.\n     */\n    get data() {\n        return this._reader.data;\n    }\n    /**\n     * Reads file using {@link module:upload/filereader~FileReader}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-read-wrong-status` when status\n     * is different than `idle`.\n     *\n     * Example usage:\n     *\n     * ```ts\n     * fileLoader.read()\n     * \t.then( data => { ... } )\n     * \t.catch( err => {\n     * \t\tif ( err === 'aborted' ) {\n     * \t\t\tconsole.log( 'Reading aborted.' );\n     * \t\t} else {\n     * \t\t\tconsole.log( 'Reading error.', err );\n     * \t\t}\n     * \t} );\n     * ```\n     *\n     * @returns Returns promise that will be resolved with read data. Promise will be rejected if error\n     * occurs or if read process is aborted.\n     */\n    read() {\n        if (this.status != 'idle') {\n            /**\n             * You cannot call read if the status is different than idle.\n             *\n             * @error filerepository-read-wrong-status\n             */\n            throw new CKEditorError('filerepository-read-wrong-status', this);\n        }\n        this.status = 'reading';\n        return this.file\n            .then(file => this._reader.read(file))\n            .then(data => {\n            // Edge case: reader was aborted after file was read - double check for proper status.\n            // It can happen when image was deleted during its upload.\n            if (this.status !== 'reading') {\n                throw this.status;\n            }\n            this.status = 'idle';\n            return data;\n        })\n            .catch(err => {\n            if (err === 'aborted') {\n                this.status = 'aborted';\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw this._reader.error ? this._reader.error : err;\n        });\n    }\n    /**\n     * Reads file using the provided {@link module:upload/filerepository~UploadAdapter}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-upload-wrong-status` when status\n     * is different than `idle`.\n     * Example usage:\n     *\n     * ```ts\n     * fileLoader.upload()\n     * \t.then( data => { ... } )\n     * \t.catch( e => {\n     * \t\tif ( e === 'aborted' ) {\n     * \t\t\tconsole.log( 'Uploading aborted.' );\n     * \t\t} else {\n     * \t\t\tconsole.log( 'Uploading error.', e );\n     * \t\t}\n     * \t} );\n     * ```\n     *\n     * @returns Returns promise that will be resolved with response data. Promise will be rejected if error\n     * occurs or if read process is aborted.\n     */\n    upload() {\n        if (this.status != 'idle') {\n            /**\n             * You cannot call upload if the status is different than idle.\n             *\n             * @error filerepository-upload-wrong-status\n             */\n            throw new CKEditorError('filerepository-upload-wrong-status', this);\n        }\n        this.status = 'uploading';\n        return this.file\n            .then(() => this._adapter.upload())\n            .then(data => {\n            this.uploadResponse = data;\n            this.status = 'idle';\n            return data;\n        })\n            .catch(err => {\n            if (this.status === 'aborted') {\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw err;\n        });\n    }\n    /**\n     * Aborts loading process.\n     */\n    abort() {\n        const status = this.status;\n        this.status = 'aborted';\n        if (!this._filePromiseWrapper.isFulfilled) {\n            // Edge case: file loader is aborted before read() is called\n            // so it might happen that no one handled the rejection of this promise.\n            // See https://github.com/ckeditor/ckeditor5-upload/pull/100\n            this._filePromiseWrapper.promise.catch(() => { });\n            this._filePromiseWrapper.rejecter('aborted');\n        }\n        else if (status == 'reading') {\n            this._reader.abort();\n        }\n        else if (status == 'uploading' && this._adapter.abort) {\n            this._adapter.abort();\n        }\n        this._destroy();\n    }\n    /**\n     * Performs cleanup.\n     *\n     * @internal\n     */\n    _destroy() {\n        this._filePromiseWrapper = undefined;\n        this._reader = undefined;\n        this._adapter = undefined;\n        this.uploadResponse = undefined;\n    }\n    /**\n     * Wraps a given file promise into another promise giving additional\n     * control (resolving, rejecting, checking if fulfilled) over it.\n     *\n     * @param filePromise The initial file promise to be wrapped.\n     */\n    _createFilePromiseWrapper(filePromise) {\n        const wrapper = {};\n        wrapper.promise = new Promise((resolve, reject) => {\n            wrapper.rejecter = reject;\n            wrapper.isFulfilled = false;\n            filePromise\n                .then(file => {\n                wrapper.isFulfilled = true;\n                resolve(file);\n            })\n                .catch(err => {\n                wrapper.isFulfilled = true;\n                reject(err);\n            });\n        });\n        return wrapper;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module upload/ui/filedialogbuttonview\n */\nimport { ButtonView, View } from '@ckeditor/ckeditor5-ui';\n/**\n * The file dialog button view.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n * ```ts\n * const view = new FileDialogButtonView( locale );\n *\n * view.set( {\n * \tacceptedType: 'image/*',\n * \tallowMultipleFiles: true\n * } );\n *\n * view.buttonView.set( {\n * \tlabel: t( 'Insert image' ),\n * \ticon: imageIcon,\n * \ttooltip: true\n * } );\n *\n * view.on( 'done', ( evt, files ) => {\n * \tfor ( const file of Array.from( files ) ) {\n * \t\tconsole.log( 'Selected file', file );\n * \t}\n * } );\n * ```\n */\nexport default class FileDialogButtonView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.buttonView = new ButtonView(locale);\n        this._fileInputView = new FileInputView(locale);\n        this._fileInputView.bind('acceptedType').to(this);\n        this._fileInputView.bind('allowMultipleFiles').to(this);\n        this._fileInputView.delegate('done').to(this);\n        this.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: 'ck-file-dialog-button'\n            },\n            children: [\n                this.buttonView,\n                this._fileInputView\n            ]\n        });\n        this.buttonView.on('execute', () => {\n            this._fileInputView.open();\n        });\n    }\n    /**\n     * Focuses the {@link #buttonView}.\n     */\n    focus() {\n        this.buttonView.focus();\n    }\n}\n/**\n * The hidden file input view class.\n */\nclass FileInputView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        this.set('acceptedType', undefined);\n        this.set('allowMultipleFiles', false);\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'input',\n            attributes: {\n                class: [\n                    'ck-hidden'\n                ],\n                type: 'file',\n                tabindex: '-1',\n                accept: bind.to('acceptedType'),\n                multiple: bind.to('allowMultipleFiles')\n            },\n            on: {\n                // Removing from code coverage since we cannot programmatically set input element files.\n                change: bind.to(/* istanbul ignore next -- @preserve */ () => {\n                    if (this.element && this.element.files && this.element.files.length) {\n                        this.fire('done', this.element.files);\n                    }\n                    this.element.value = '';\n                })\n            }\n        });\n    }\n    /**\n     * Opens file dialog.\n     */\n    open() {\n        this.element.click();\n    }\n}\n"],
  "mappings": "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",
  "names": ["loader"]
}
