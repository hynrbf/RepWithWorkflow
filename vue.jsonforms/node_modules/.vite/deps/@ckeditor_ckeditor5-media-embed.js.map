{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-media-embed/src/converters.js", "../../@ckeditor/ckeditor5-media-embed/src/utils.js", "../../@ckeditor/ckeditor5-media-embed/src/mediaembedcommand.js", "../../@ckeditor/ckeditor5-media-embed/src/mediaregistry.js", "../../@ckeditor/ckeditor5-media-embed/src/mediaembedediting.js", "../../@ckeditor/ckeditor5-media-embed/src/automediaembed.js", "../../@ckeditor/ckeditor5-media-embed/src/ui/mediaformview.js", "../../@ckeditor/ckeditor5-media-embed/src/mediaembedui.js", "../../@ckeditor/ckeditor5-media-embed/src/mediaembed.js", "../../@ckeditor/ckeditor5-media-embed/src/mediaembedtoolbar.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Returns a function that converts the model \"url\" attribute to the view representation.\n *\n * Depending on the configuration, the view representation can be \"semantic\" (for the data pipeline):\n *\n * ```html\n * <figure class=\"media\">\n * \t<oembed url=\"foo\"></oembed>\n * </figure>\n * ```\n *\n * or \"non-semantic\" (for the editing view pipeline):\n *\n * ```html\n * <figure class=\"media\">\n * \t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n * </figure>\n * ```\n *\n * **Note:** Changing the model \"url\" attribute replaces the entire content of the\n * `<figure>` in the view.\n *\n * @param registry The registry providing\n * the media and their content.\n * @param options options object with following properties:\n * - elementName When set, overrides the default element name for semantic media embeds.\n * - renderMediaPreview When `true`, the converter will create the view in the non-semantic form.\n * - renderForEditingView When `true`, the converter will create a view specific for the\n * editing pipeline (e.g. including CSS classes, content placeholders).\n */\nexport function modelToViewUrlAttributeConverter(registry, options) {\n    const converter = (evt, data, conversionApi) => {\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const url = data.attributeNewValue;\n        const viewWriter = conversionApi.writer;\n        const figure = conversionApi.mapper.toViewElement(data.item);\n        const mediaContentElement = [...figure.getChildren()]\n            .find(child => child.getCustomProperty('media-content'));\n        // TODO: removing the wrapper and creating it from scratch is a hack. We can do better than that.\n        viewWriter.remove(mediaContentElement);\n        const mediaViewElement = registry.getMediaViewElement(viewWriter, url, options);\n        viewWriter.insert(viewWriter.createPositionAt(figure, 0), mediaViewElement);\n    };\n    return dispatcher => {\n        dispatcher.on('attribute:url:media', converter);\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { isWidget, toWidget } from 'ckeditor5/src/widget';\n/**\n * Converts a given {@link module:engine/view/element~Element} to a media embed widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the media widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param writer An instance of the view writer.\n * @param label The element's label.\n */\nexport function toMediaWidget(viewElement, writer, label) {\n    writer.setCustomProperty('media', true, viewElement);\n    return toWidget(viewElement, writer, { label });\n}\n/**\n * Returns a media widget editing view element if one is selected.\n */\nexport function getSelectedMediaViewWidget(selection) {\n    const viewElement = selection.getSelectedElement();\n    if (viewElement && isMediaWidget(viewElement)) {\n        return viewElement;\n    }\n    return null;\n}\n/**\n * Checks if a given view element is a media widget.\n */\nexport function isMediaWidget(viewElement) {\n    return !!viewElement.getCustomProperty('media') && isWidget(viewElement);\n}\n/**\n * Creates a view element representing the media. Either a \"semantic\" one for the data pipeline:\n *\n * ```html\n * <figure class=\"media\">\n * \t<oembed url=\"foo\"></oembed>\n * </figure>\n * ```\n *\n * or a \"non-semantic\" (for the editing view pipeline):\n *\n * ```html\n * <figure class=\"media\">\n * \t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n * </figure>\n * ```\n */\nexport function createMediaFigureElement(writer, registry, url, options) {\n    return writer.createContainerElement('figure', { class: 'media' }, [\n        registry.getMediaViewElement(writer, url, options),\n        writer.createSlot()\n    ]);\n}\n/**\n * Returns a selected media element in the model, if any.\n */\nexport function getSelectedMediaModelWidget(selection) {\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement && selectedElement.is('element', 'media')) {\n        return selectedElement;\n    }\n    return null;\n}\n/**\n * Creates a media element and inserts it into the model.\n *\n * **Note**: This method will use {@link module:engine/model/model~Model#insertContent `model.insertContent()`} logic of inserting content\n * if no `insertPosition` is passed.\n *\n * @param url An URL of an embeddable media.\n * @param findOptimalPosition If true it will try to find optimal position to insert media without breaking content\n * in which a selection is.\n */\nexport function insertMedia(model, url, selectable, findOptimalPosition) {\n    model.change(writer => {\n        const mediaElement = writer.createElement('media', { url });\n        model.insertObject(mediaElement, selectable, null, {\n            setSelection: 'on',\n            findOptimalPosition: findOptimalPosition ? 'auto' : undefined\n        });\n    });\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { findOptimalInsertionRange } from 'ckeditor5/src/widget';\nimport { getSelectedMediaModelWidget, insertMedia } from './utils';\n/**\n * The insert media command.\n *\n * The command is registered by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} as `'mediaEmbed'`.\n *\n * To insert media at the current selection, execute the command and specify the URL:\n *\n * ```ts\n * editor.execute( 'mediaEmbed', 'http://url.to.the/media' );\n * ```\n */\nexport default class MediaEmbedCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedMedia = getSelectedMediaModelWidget(selection);\n        this.value = selectedMedia ? selectedMedia.getAttribute('url') : undefined;\n        this.isEnabled = isMediaSelected(selection) || isAllowedInParent(selection, model);\n    }\n    /**\n     * Executes the command, which either:\n     *\n     * * updates the URL of the selected media,\n     * * inserts the new media into the editor and puts the selection around it.\n     *\n     * @fires execute\n     * @param url The URL of the media.\n     */\n    execute(url) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedMedia = getSelectedMediaModelWidget(selection);\n        if (selectedMedia) {\n            model.change(writer => {\n                writer.setAttribute('url', url, selectedMedia);\n            });\n        }\n        else {\n            insertMedia(model, url, selection, true);\n        }\n    }\n}\n/**\n * Checks if the media embed is allowed in the parent.\n */\nfunction isAllowedInParent(selection, model) {\n    const insertionRange = findOptimalInsertionRange(selection, model);\n    let parent = insertionRange.start.parent;\n    // The model.insertContent() will remove empty parent (unless it is a $root or a limit).\n    if (parent.isEmpty && !model.schema.isLimit(parent)) {\n        parent = parent.parent;\n    }\n    return model.schema.checkChild(parent, 'media');\n}\n/**\n * Checks if the media object is selected.\n */\nfunction isMediaSelected(selection) {\n    const element = selection.getSelectedElement();\n    return !!element && element.name === 'media';\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { IconView, Template } from 'ckeditor5/src/ui';\nimport { logWarning, toArray } from 'ckeditor5/src/utils';\nimport mediaPlaceholderIcon from '../theme/icons/media-placeholder.svg';\nconst mediaPlaceholderIconViewBox = '0 0 64 42';\n/**\n * A bridge between the raw media content provider definitions and the editor view content.\n *\n * It helps translating media URLs to corresponding {@link module:engine/view/element~Element view elements}.\n *\n * Mostly used by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} plugin.\n */\nexport default class MediaRegistry {\n    /**\n     * Creates an instance of the {@link module:media-embed/mediaregistry~MediaRegistry} class.\n     *\n     * @param locale The localization services instance.\n     * @param config The configuration of the media embed feature.\n     */\n    constructor(locale, config) {\n        const providers = config.providers;\n        const extraProviders = config.extraProviders || [];\n        const removedProviders = new Set(config.removeProviders);\n        const providerDefinitions = providers\n            .concat(extraProviders)\n            .filter(provider => {\n            const name = provider.name;\n            if (!name) {\n                /**\n                 * One of the providers (or extra providers) specified in the media embed configuration\n                 * has no name and will not be used by the editor. In order to get this media\n                 * provider working, double check your editor configuration.\n                 *\n                 * @error media-embed-no-provider-name\n                 */\n                logWarning('media-embed-no-provider-name', { provider });\n                return false;\n            }\n            return !removedProviders.has(name);\n        });\n        this.locale = locale;\n        this.providerDefinitions = providerDefinitions;\n    }\n    /**\n     * Checks whether the passed URL is representing a certain media type allowed in the editor.\n     *\n     * @param url The URL to be checked\n     */\n    hasMedia(url) {\n        return !!this._getMedia(url);\n    }\n    /**\n     * For the given media URL string and options, it returns the {@link module:engine/view/element~Element view element}\n     * representing that media.\n     *\n     * **Note:** If no URL is specified, an empty view element is returned.\n     *\n     * @param writer The view writer used to produce a view element.\n     * @param url The URL to be translated into a view element.\n     */\n    getMediaViewElement(writer, url, options) {\n        return this._getMedia(url).getViewElement(writer, options);\n    }\n    /**\n     * Returns a `Media` instance for the given URL.\n     *\n     * @param url The URL of the media.\n     * @returns The `Media` instance or `null` when there is none.\n     */\n    _getMedia(url) {\n        if (!url) {\n            return new Media(this.locale);\n        }\n        url = url.trim();\n        for (const definition of this.providerDefinitions) {\n            const previewRenderer = definition.html;\n            const pattern = toArray(definition.url);\n            for (const subPattern of pattern) {\n                const match = this._getUrlMatches(url, subPattern);\n                if (match) {\n                    return new Media(this.locale, url, match, previewRenderer);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Tries to match `url` to `pattern`.\n     *\n     * @param url The URL of the media.\n     * @param pattern The pattern that should accept the media URL.\n     */\n    _getUrlMatches(url, pattern) {\n        // 1. Try to match without stripping the protocol and \"www\" subdomain.\n        let match = url.match(pattern);\n        if (match) {\n            return match;\n        }\n        // 2. Try to match after stripping the protocol.\n        let rawUrl = url.replace(/^https?:\\/\\//, '');\n        match = rawUrl.match(pattern);\n        if (match) {\n            return match;\n        }\n        // 3. Try to match after stripping the \"www\" subdomain.\n        rawUrl = rawUrl.replace(/^www\\./, '');\n        match = rawUrl.match(pattern);\n        if (match) {\n            return match;\n        }\n        return null;\n    }\n}\n/**\n * Represents media defined by the provider configuration.\n *\n * It can be rendered to the {@link module:engine/view/element~Element view element} and used in the editing or data pipeline.\n */\nclass Media {\n    constructor(locale, url, match, previewRenderer) {\n        this.url = this._getValidUrl(url);\n        this._locale = locale;\n        this._match = match;\n        this._previewRenderer = previewRenderer;\n    }\n    /**\n     * Returns the view element representation of the media.\n     *\n     * @param writer The view writer used to produce a view element.\n     */\n    getViewElement(writer, options) {\n        const attributes = {};\n        let viewElement;\n        if (options.renderForEditingView || (options.renderMediaPreview && this.url && this._previewRenderer)) {\n            if (this.url) {\n                attributes['data-oembed-url'] = this.url;\n            }\n            if (options.renderForEditingView) {\n                attributes.class = 'ck-media__wrapper';\n            }\n            const mediaHtml = this._getPreviewHtml(options);\n            viewElement = writer.createRawElement('div', attributes, (domElement, domConverter) => {\n                domConverter.setContentOf(domElement, mediaHtml);\n            });\n        }\n        else {\n            if (this.url) {\n                attributes.url = this.url;\n            }\n            viewElement = writer.createEmptyElement(options.elementName, attributes);\n        }\n        writer.setCustomProperty('media-content', true, viewElement);\n        return viewElement;\n    }\n    /**\n     * Returns the HTML string of the media content preview.\n     */\n    _getPreviewHtml(options) {\n        if (this._previewRenderer) {\n            return this._previewRenderer(this._match);\n        }\n        else {\n            // The placeholder only makes sense for editing view and media which have URLs.\n            // Placeholder is never displayed in data and URL-less media have no content.\n            if (this.url && options.renderForEditingView) {\n                return this._getPlaceholderHtml();\n            }\n            return '';\n        }\n    }\n    /**\n     * Returns the placeholder HTML when the media has no content preview.\n     */\n    _getPlaceholderHtml() {\n        const icon = new IconView();\n        const t = this._locale.t;\n        icon.content = mediaPlaceholderIcon;\n        icon.viewBox = mediaPlaceholderIconViewBox;\n        const placeholder = new Template({\n            tag: 'div',\n            attributes: {\n                class: 'ck ck-reset_all ck-media__placeholder'\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: 'ck-media__placeholder__icon'\n                    },\n                    children: [icon]\n                },\n                {\n                    tag: 'a',\n                    attributes: {\n                        class: 'ck-media__placeholder__url',\n                        target: '_blank',\n                        rel: 'noopener noreferrer',\n                        href: this.url,\n                        'data-cke-tooltip-text': t('Open media in new tab')\n                    },\n                    children: [\n                        {\n                            tag: 'span',\n                            attributes: {\n                                class: 'ck-media__placeholder__url__text'\n                            },\n                            children: [this.url]\n                        }\n                    ]\n                }\n            ]\n        }).render();\n        return placeholder.outerHTML;\n    }\n    /**\n     * Returns the full URL to the specified media.\n     *\n     * @param url The URL of the media.\n     */\n    _getValidUrl(url) {\n        if (!url) {\n            return null;\n        }\n        if (url.match(/^https?/)) {\n            return url;\n        }\n        return 'https://' + url;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module media-embed/mediaembedediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\nimport { modelToViewUrlAttributeConverter } from './converters';\nimport MediaEmbedCommand from './mediaembedcommand';\nimport MediaRegistry from './mediaregistry';\nimport { toMediaWidget, createMediaFigureElement } from './utils';\nimport '../theme/mediaembedediting.css';\n/**\n * The media embed editing feature.\n */\nexport default class MediaEmbedEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'MediaEmbedEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('mediaEmbed', {\n            elementName: 'oembed',\n            providers: [\n                {\n                    name: 'dailymotion',\n                    url: /^dailymotion\\.com\\/video\\/(\\w+)/,\n                    html: match => {\n                        const id = match[1];\n                        return ('<div style=\"position: relative; padding-bottom: 100%; height: 0; \">' +\n                            `<iframe src=\"https://www.dailymotion.com/embed/video/${id}\" ` +\n                            'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' +\n                            'frameborder=\"0\" width=\"480\" height=\"270\" allowfullscreen allow=\"autoplay\">' +\n                            '</iframe>' +\n                            '</div>');\n                    }\n                },\n                {\n                    name: 'spotify',\n                    url: [\n                        /^open\\.spotify\\.com\\/(artist\\/\\w+)/,\n                        /^open\\.spotify\\.com\\/(album\\/\\w+)/,\n                        /^open\\.spotify\\.com\\/(track\\/\\w+)/\n                    ],\n                    html: match => {\n                        const id = match[1];\n                        return ('<div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 126%;\">' +\n                            `<iframe src=\"https://open.spotify.com/embed/${id}\" ` +\n                            'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' +\n                            'frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\">' +\n                            '</iframe>' +\n                            '</div>');\n                    }\n                },\n                {\n                    name: 'youtube',\n                    url: [\n                        /^(?:m\\.)?youtube\\.com\\/watch\\?v=([\\w-]+)(?:&t=(\\d+))?/,\n                        /^(?:m\\.)?youtube\\.com\\/v\\/([\\w-]+)(?:\\?t=(\\d+))?/,\n                        /^youtube\\.com\\/embed\\/([\\w-]+)(?:\\?start=(\\d+))?/,\n                        /^youtu\\.be\\/([\\w-]+)(?:\\?t=(\\d+))?/\n                    ],\n                    html: match => {\n                        const id = match[1];\n                        const time = match[2];\n                        return ('<div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;\">' +\n                            `<iframe src=\"https://www.youtube.com/embed/${id}${time ? `?start=${time}` : ''}\" ` +\n                            'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' +\n                            'frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen>' +\n                            '</iframe>' +\n                            '</div>');\n                    }\n                },\n                {\n                    name: 'vimeo',\n                    url: [\n                        /^vimeo\\.com\\/(\\d+)/,\n                        /^vimeo\\.com\\/[^/]+\\/[^/]+\\/video\\/(\\d+)/,\n                        /^vimeo\\.com\\/album\\/[^/]+\\/video\\/(\\d+)/,\n                        /^vimeo\\.com\\/channels\\/[^/]+\\/(\\d+)/,\n                        /^vimeo\\.com\\/groups\\/[^/]+\\/videos\\/(\\d+)/,\n                        /^vimeo\\.com\\/ondemand\\/[^/]+\\/(\\d+)/,\n                        /^player\\.vimeo\\.com\\/video\\/(\\d+)/\n                    ],\n                    html: match => {\n                        const id = match[1];\n                        return ('<div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;\">' +\n                            `<iframe src=\"https://player.vimeo.com/video/${id}\" ` +\n                            'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' +\n                            'frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen>' +\n                            '</iframe>' +\n                            '</div>');\n                    }\n                },\n                {\n                    name: 'instagram',\n                    url: /^instagram\\.com\\/p\\/(\\w+)/\n                },\n                {\n                    name: 'twitter',\n                    url: /^twitter\\.com/\n                },\n                {\n                    name: 'googleMaps',\n                    url: [\n                        /^google\\.com\\/maps/,\n                        /^goo\\.gl\\/maps/,\n                        /^maps\\.google\\.com/,\n                        /^maps\\.app\\.goo\\.gl/\n                    ]\n                },\n                {\n                    name: 'flickr',\n                    url: /^flickr\\.com/\n                },\n                {\n                    name: 'facebook',\n                    url: /^facebook\\.com/\n                }\n            ]\n        });\n        this.registry = new MediaRegistry(editor.locale, editor.config.get('mediaEmbed'));\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        const renderMediaPreview = editor.config.get('mediaEmbed.previewsInData');\n        const elementName = editor.config.get('mediaEmbed.elementName');\n        const registry = this.registry;\n        editor.commands.add('mediaEmbed', new MediaEmbedCommand(editor));\n        // Configure the schema.\n        schema.register('media', {\n            inheritAllFrom: '$blockObject',\n            allowAttributes: ['url']\n        });\n        // Model -> Data\n        conversion.for('dataDowncast').elementToStructure({\n            model: 'media',\n            view: (modelElement, { writer }) => {\n                const url = modelElement.getAttribute('url');\n                return createMediaFigureElement(writer, registry, url, {\n                    elementName,\n                    renderMediaPreview: !!url && renderMediaPreview\n                });\n            }\n        });\n        // Model -> Data (url -> data-oembed-url)\n        conversion.for('dataDowncast').add(modelToViewUrlAttributeConverter(registry, {\n            elementName,\n            renderMediaPreview\n        }));\n        // Model -> View (element)\n        conversion.for('editingDowncast').elementToStructure({\n            model: 'media',\n            view: (modelElement, { writer }) => {\n                const url = modelElement.getAttribute('url');\n                const figure = createMediaFigureElement(writer, registry, url, {\n                    elementName,\n                    renderForEditingView: true\n                });\n                return toMediaWidget(figure, writer, t('media widget'));\n            }\n        });\n        // Model -> View (url -> data-oembed-url)\n        conversion.for('editingDowncast').add(modelToViewUrlAttributeConverter(registry, {\n            elementName,\n            renderForEditingView: true\n        }));\n        // View -> Model (data-oembed-url -> url)\n        conversion.for('upcast')\n            // Upcast semantic media.\n            .elementToElement({\n            view: element => ['oembed', elementName].includes(element.name) && element.getAttribute('url') ?\n                { name: true } :\n                null,\n            model: (viewMedia, { writer }) => {\n                const url = viewMedia.getAttribute('url');\n                if (registry.hasMedia(url)) {\n                    return writer.createElement('media', { url });\n                }\n                return null;\n            }\n        })\n            // Upcast non-semantic media.\n            .elementToElement({\n            view: {\n                name: 'div',\n                attributes: {\n                    'data-oembed-url': true\n                }\n            },\n            model: (viewMedia, { writer }) => {\n                const url = viewMedia.getAttribute('data-oembed-url');\n                if (registry.hasMedia(url)) {\n                    return writer.createElement('media', { url });\n                }\n                return null;\n            }\n        })\n            // Consume `<figure class=\"media\">` elements, that were left after upcast.\n            .add(dispatcher => {\n            const converter = (evt, data, conversionApi) => {\n                if (!conversionApi.consumable.consume(data.viewItem, { name: true, classes: 'media' })) {\n                    return;\n                }\n                const { modelRange, modelCursor } = conversionApi.convertChildren(data.viewItem, data.modelCursor);\n                data.modelRange = modelRange;\n                data.modelCursor = modelCursor;\n                const modelElement = first(modelRange.getItems());\n                if (!modelElement) {\n                    // Revert consumed figure so other features can convert it.\n                    conversionApi.consumable.revert(data.viewItem, { name: true, classes: 'media' });\n                }\n            };\n            dispatcher.on('element:figure', converter);\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module media-embed/automediaembed\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { LiveRange, LivePosition } from 'ckeditor5/src/engine';\nimport { Clipboard } from 'ckeditor5/src/clipboard';\nimport { Delete } from 'ckeditor5/src/typing';\nimport { Undo } from 'ckeditor5/src/undo';\nimport { global } from 'ckeditor5/src/utils';\nimport MediaEmbedEditing from './mediaembedediting';\nimport { insertMedia } from './utils';\nconst URL_REGEXP = /^(?:http(s)?:\\/\\/)?[\\w-]+\\.[\\w-.~:/?#[\\]@!$&'()*+,;=%]+$/;\n/**\n * The auto-media embed plugin. It recognizes media links in the pasted content and embeds\n * them shortly after they are injected into the document.\n */\nexport default class AutoMediaEmbed extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [Clipboard, Delete, Undo];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'AutoMediaEmbed';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this._timeoutId = null;\n        this._positionToInsert = null;\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const modelDocument = editor.model.document;\n        // We need to listen on `Clipboard#inputTransformation` because we need to save positions of selection.\n        // After pasting, the content between those positions will be checked for a URL that could be transformed\n        // into media.\n        const clipboardPipeline = editor.plugins.get('ClipboardPipeline');\n        this.listenTo(clipboardPipeline, 'inputTransformation', () => {\n            const firstRange = modelDocument.selection.getFirstRange();\n            const leftLivePosition = LivePosition.fromPosition(firstRange.start);\n            leftLivePosition.stickiness = 'toPrevious';\n            const rightLivePosition = LivePosition.fromPosition(firstRange.end);\n            rightLivePosition.stickiness = 'toNext';\n            modelDocument.once('change:data', () => {\n                this._embedMediaBetweenPositions(leftLivePosition, rightLivePosition);\n                leftLivePosition.detach();\n                rightLivePosition.detach();\n            }, { priority: 'high' });\n        });\n        const undoCommand = editor.commands.get('undo');\n        undoCommand.on('execute', () => {\n            if (this._timeoutId) {\n                global.window.clearTimeout(this._timeoutId);\n                this._positionToInsert.detach();\n                this._timeoutId = null;\n                this._positionToInsert = null;\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * Analyzes the part of the document between provided positions in search for a URL representing media.\n     * When the URL is found, it is automatically converted into media.\n     *\n     * @param leftPosition Left position of the selection.\n     * @param rightPosition Right position of the selection.\n     */\n    _embedMediaBetweenPositions(leftPosition, rightPosition) {\n        const editor = this.editor;\n        const mediaRegistry = editor.plugins.get(MediaEmbedEditing).registry;\n        // TODO: Use marker instead of LiveRange & LivePositions.\n        const urlRange = new LiveRange(leftPosition, rightPosition);\n        const walker = urlRange.getWalker({ ignoreElementEnd: true });\n        let url = '';\n        for (const node of walker) {\n            if (node.item.is('$textProxy')) {\n                url += node.item.data;\n            }\n        }\n        url = url.trim();\n        // If the URL does not match to universal URL regexp, let's skip that.\n        if (!url.match(URL_REGEXP)) {\n            urlRange.detach();\n            return;\n        }\n        // If the URL represents a media, let's use it.\n        if (!mediaRegistry.hasMedia(url)) {\n            urlRange.detach();\n            return;\n        }\n        const mediaEmbedCommand = editor.commands.get('mediaEmbed');\n        // Do not anything if media element cannot be inserted at the current position (#47).\n        if (!mediaEmbedCommand.isEnabled) {\n            urlRange.detach();\n            return;\n        }\n        // Position won't be available in the `setTimeout` function so let's clone it.\n        this._positionToInsert = LivePosition.fromPosition(leftPosition);\n        // This action mustn't be executed if undo was called between pasting and auto-embedding.\n        this._timeoutId = global.window.setTimeout(() => {\n            editor.model.change(writer => {\n                this._timeoutId = null;\n                writer.remove(urlRange);\n                urlRange.detach();\n                let insertionPosition = null;\n                // Check if position where the media element should be inserted is still valid.\n                // Otherwise leave it as undefined to use document.selection - default behavior of model.insertContent().\n                if (this._positionToInsert.root.rootName !== '$graveyard') {\n                    insertionPosition = this._positionToInsert;\n                }\n                insertMedia(editor.model, url, insertionPosition, false);\n                this._positionToInsert.detach();\n                this._positionToInsert = null;\n            });\n            editor.plugins.get(Delete).requestUndoOnBackspace();\n        }, 100);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module media-embed/ui/mediaformview\n */\nimport { ButtonView, FocusCycler, LabeledFieldView, View, ViewCollection, createLabeledInputText, submitHandler } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\n// See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\nimport '../../theme/mediaform.css';\n/**\n * The media form view controller class.\n *\n * See {@link module:media-embed/ui/mediaformview~MediaFormView}.\n */\nexport default class MediaFormView extends View {\n    /**\n     * @param validators Form validators used by {@link #isValid}.\n     * @param locale The localization services instance.\n     */\n    constructor(validators, locale) {\n        super(locale);\n        const t = locale.t;\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.set('mediaURLInputValue', '');\n        this.urlInputView = this._createUrlInput();\n        this.saveButtonView = this._createButton(t('Save'), icons.check, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        this.saveButtonView.bind('isEnabled').to(this, 'mediaURLInputValue', value => !!value);\n        this.cancelButtonView = this._createButton(t('Cancel'), icons.cancel, 'ck-button-cancel', 'cancel');\n        this._focusables = new ViewCollection();\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        this._validators = validators;\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-media-form',\n                    'ck-responsive-form'\n                ],\n                tabindex: '-1'\n            },\n            children: [\n                this.urlInputView,\n                this.saveButtonView,\n                this.cancelButtonView\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        submitHandler({\n            view: this\n        });\n        const childViews = [\n            this.urlInputView,\n            this.saveButtonView,\n            this.cancelButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        const stopPropagation = (data) => data.stopPropagation();\n        // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n        // keystroke handler would take over the key management in the URL input. We need to prevent\n        // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n        this.keystrokes.set('arrowright', stopPropagation);\n        this.keystrokes.set('arrowleft', stopPropagation);\n        this.keystrokes.set('arrowup', stopPropagation);\n        this.keystrokes.set('arrowdown', stopPropagation);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the fist {@link #_focusables} in the form.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * The native DOM `value` of the {@link #urlInputView} element.\n     *\n     * **Note**: Do not confuse it with the {@link module:ui/inputtext/inputtextview~InputTextView#value}\n     * which works one way only and may not represent the actual state of the component in the DOM.\n     */\n    get url() {\n        return this.urlInputView.fieldView.element.value.trim();\n    }\n    set url(url) {\n        this.urlInputView.fieldView.element.value = url.trim();\n    }\n    /**\n     * Validates the form and returns `false` when some fields are invalid.\n     */\n    isValid() {\n        this.resetFormStatus();\n        for (const validator of this._validators) {\n            const errorText = validator(this);\n            // One error per field is enough.\n            if (errorText) {\n                // Apply updated error.\n                this.urlInputView.errorText = errorText;\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Cleans up the supplementary error and information text of the {@link #urlInputView}\n     * bringing them back to the state when the form has been displayed for the first time.\n     *\n     * See {@link #isValid}.\n     */\n    resetFormStatus() {\n        this.urlInputView.errorText = null;\n        this.urlInputView.infoText = this._urlInputViewInfoDefault;\n    }\n    /**\n     * Creates a labeled input view.\n     *\n     * @returns Labeled input view instance.\n     */\n    _createUrlInput() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n        const inputField = labeledInput.fieldView;\n        this._urlInputViewInfoDefault = t('Paste the media URL in the input.');\n        this._urlInputViewInfoTip = t('Tip: Paste the URL into the content to embed faster.');\n        labeledInput.label = t('Media URL');\n        labeledInput.infoText = this._urlInputViewInfoDefault;\n        inputField.on('input', () => {\n            // Display the tip text only when there is some value. Otherwise fall back to the default info text.\n            labeledInput.infoText = inputField.element.value ? this._urlInputViewInfoTip : this._urlInputViewInfoDefault;\n            this.mediaURLInputValue = inputField.element.value.trim();\n        });\n        return labeledInput;\n    }\n    /**\n     * Creates a button view.\n     *\n     * @param label The button label.\n     * @param icon The button icon.\n     * @param className The additional button CSS class name.\n     * @param eventName An event name that the `ButtonView#execute` event will be delegated to.\n     * @returns The button view instance.\n     */\n    _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({\n            attributes: {\n                class: className\n            }\n        });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module media-embed/mediaembedui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { createDropdown, CssTransitionDisablerMixin } from 'ckeditor5/src/ui';\nimport MediaFormView from './ui/mediaformview';\nimport MediaEmbedEditing from './mediaembedediting';\nimport mediaIcon from '../theme/icons/media.svg';\n/**\n * The media embed UI plugin.\n */\nexport default class MediaEmbedUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [MediaEmbedEditing];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'MediaEmbedUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const command = editor.commands.get('mediaEmbed');\n        editor.ui.componentFactory.add('mediaEmbed', locale => {\n            const dropdown = createDropdown(locale);\n            this._setUpDropdown(dropdown, command);\n            return dropdown;\n        });\n    }\n    _setUpDropdown(dropdown, command) {\n        const editor = this.editor;\n        const t = editor.t;\n        const button = dropdown.buttonView;\n        const registry = editor.plugins.get(MediaEmbedEditing).registry;\n        dropdown.once('change:isOpen', () => {\n            const form = new (CssTransitionDisablerMixin(MediaFormView))(getFormValidators(editor.t, registry), editor.locale);\n            dropdown.panelView.children.add(form);\n            // Note: Use the low priority to make sure the following listener starts working after the\n            // default action of the drop-down is executed (i.e. the panel showed up). Otherwise, the\n            // invisible form/input cannot be focused/selected.\n            button.on('open', () => {\n                form.disableCssTransitions();\n                // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n                // the command. If the user typed in the input, then canceled (`urlInputView#fieldView#value` stays\n                // unaltered) and re-opened it without changing the value of the media command (e.g. because they\n                // didn't change the selection), they would see the old value instead of the actual value of the\n                // command.\n                form.url = command.value || '';\n                form.urlInputView.fieldView.select();\n                form.enableCssTransitions();\n            }, { priority: 'low' });\n            dropdown.on('submit', () => {\n                if (form.isValid()) {\n                    editor.execute('mediaEmbed', form.url);\n                    editor.editing.view.focus();\n                }\n            });\n            dropdown.on('change:isOpen', () => form.resetFormStatus());\n            dropdown.on('cancel', () => {\n                editor.editing.view.focus();\n            });\n            form.delegate('submit', 'cancel').to(dropdown);\n            form.urlInputView.fieldView.bind('value').to(command, 'value');\n            // Form elements should be read-only when corresponding commands are disabled.\n            form.urlInputView.bind('isEnabled').to(command, 'isEnabled');\n        });\n        dropdown.bind('isEnabled').to(command);\n        button.set({\n            label: t('Insert media'),\n            icon: mediaIcon,\n            tooltip: true\n        });\n    }\n}\nfunction getFormValidators(t, registry) {\n    return [\n        form => {\n            if (!form.url.length) {\n                return t('The URL must not be empty.');\n            }\n        },\n        form => {\n            if (!registry.hasMedia(form.url)) {\n                return t('This media URL is not supported.');\n            }\n        }\n    ];\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module media-embed/mediaembed\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Widget } from 'ckeditor5/src/widget';\nimport MediaEmbedEditing from './mediaembedediting';\nimport AutoMediaEmbed from './automediaembed';\nimport MediaEmbedUI from './mediaembedui';\nimport '../theme/mediaembed.css';\n/**\n * The media embed plugin.\n *\n * For a detailed overview, check the {@glink features/media-embed Media Embed feature documentation}.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * The {@link module:media-embed/mediaembedediting~MediaEmbedEditing media embed editing feature},\n * * The {@link module:media-embed/mediaembedui~MediaEmbedUI media embed UI feature} and\n * * The {@link module:media-embed/automediaembed~AutoMediaEmbed auto-media embed feature}.\n */\nexport default class MediaEmbed extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [MediaEmbedEditing, MediaEmbedUI, AutoMediaEmbed, Widget];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'MediaEmbed';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module media-embed/mediaembedtoolbar\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { WidgetToolbarRepository } from 'ckeditor5/src/widget';\nimport { getSelectedMediaViewWidget } from './utils';\nimport './mediaembedconfig';\n/**\n * The media embed toolbar plugin. It creates a toolbar for media embed that shows up when the media element is selected.\n *\n * Instances of toolbar components (e.g. buttons) are created based on the\n * {@link module:media-embed/mediaembedconfig~MediaEmbedConfig#toolbar `media.toolbar` configuration option}.\n */\nexport default class MediaEmbedToolbar extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [WidgetToolbarRepository];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'MediaEmbedToolbar';\n    }\n    /**\n     * @inheritDoc\n     */\n    afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        widgetToolbarRepository.register('mediaEmbed', {\n            ariaLabel: t('Media toolbar'),\n            items: editor.config.get('mediaEmbed.toolbar') || [],\n            getRelatedElement: getSelectedMediaViewWidget\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
