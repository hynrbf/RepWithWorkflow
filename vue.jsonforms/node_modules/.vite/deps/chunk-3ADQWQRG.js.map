{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-paragraph/src/paragraphcommand.js", "../../@ckeditor/ckeditor5-paragraph/src/insertparagraphcommand.js", "../../@ckeditor/ckeditor5-paragraph/src/paragraph.js", "../../@ckeditor/ckeditor5-paragraph/src/paragraphbuttonui.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module paragraph/paragraphcommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\nimport { first } from '@ckeditor/ckeditor5-utils';\n/**\n * The paragraph command.\n */\nexport default class ParagraphCommand extends Command {\n    constructor(editor) {\n        super(editor);\n        // Since this command may pass selection in execution block, it should be checked directly.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const document = model.document;\n        const block = first(document.selection.getSelectedBlocks());\n        this.value = !!block && block.is('element', 'paragraph');\n        this.isEnabled = !!block && checkCanBecomeParagraph(block, model.schema);\n    }\n    /**\n     * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n     * will be turned to paragraphs.\n     *\n     * @fires execute\n     * @param options Options for the executed command.\n     * @param options.selection The selection that the command should be applied to. By default,\n     * if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = options.selection || document.selection;\n        // Don't execute command if selection is in non-editable place.\n        if (!model.canEditAt(selection)) {\n            return;\n        }\n        model.change(writer => {\n            const blocks = selection.getSelectedBlocks();\n            for (const block of blocks) {\n                if (!block.is('element', 'paragraph') && checkCanBecomeParagraph(block, model.schema)) {\n                    writer.rename(block, 'paragraph');\n                }\n            }\n        });\n    }\n}\n/**\n * Checks whether the given block can be replaced by a paragraph.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n */\nfunction checkCanBecomeParagraph(block, schema) {\n    return schema.checkChild(block.parent, 'paragraph') && !schema.isObject(block);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module paragraph/insertparagraphcommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\n/**\n * The insert paragraph command. It inserts a new paragraph at a specific\n * {@link module:engine/model/position~Position document position}.\n *\n * ```ts\n * // Insert a new paragraph before an element in the document.\n * editor.execute( 'insertParagraph', {\n *   position: editor.model.createPositionBefore( element )\n * } );\n * ```\n *\n * If a paragraph is disallowed in the context of the specific position, the command\n * will attempt to split position ancestors to find a place where it is possible\n * to insert a paragraph.\n *\n * **Note**: This command moves the selection to the inserted paragraph.\n */\nexport default class InsertParagraphCommand extends Command {\n    constructor(editor) {\n        super(editor);\n        // Since this command passes position in execution block instead of selection, it should be checked directly.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n     * Executes the command.\n     *\n     * @param options Options for the executed command.\n     * @param options.position The model position at which the new paragraph will be inserted.\n     * @param options.attributes Attributes keys and values to set on a inserted paragraph.\n     * @fires execute\n     */\n    execute(options) {\n        const model = this.editor.model;\n        const attributes = options.attributes;\n        let position = options.position;\n        // Don't execute command if position is in non-editable place.\n        if (!model.canEditAt(position)) {\n            return;\n        }\n        model.change(writer => {\n            position = this._findPositionToInsertParagraph(position, writer);\n            if (!position) {\n                return;\n            }\n            const paragraph = writer.createElement('paragraph');\n            if (attributes) {\n                model.schema.setAllowedAttributes(paragraph, attributes, writer);\n            }\n            model.insertContent(paragraph, position);\n            writer.setSelection(paragraph, 'in');\n        });\n    }\n    /**\n     * Returns the best position to insert a new paragraph.\n     */\n    _findPositionToInsertParagraph(position, writer) {\n        const model = this.editor.model;\n        if (model.schema.checkChild(position, 'paragraph')) {\n            return position;\n        }\n        const allowedParent = model.schema.findAllowedParent(position, 'paragraph');\n        // It could be there's no ancestor limit that would allow paragraph.\n        // In theory, \"paragraph\" could be disallowed even in the \"$root\".\n        if (!allowedParent) {\n            return null;\n        }\n        const positionParent = position.parent;\n        const isTextAllowed = model.schema.checkChild(positionParent, '$text');\n        // At empty $block or at the end of $block.\n        // <paragraph>[]</paragraph> ---> <paragraph></paragraph><paragraph>[]</paragraph>\n        // <paragraph>foo[]</paragraph> ---> <paragraph>foo</paragraph><paragraph>[]</paragraph>\n        if (positionParent.isEmpty || isTextAllowed && position.isAtEnd) {\n            return model.createPositionAfter(positionParent);\n        }\n        // At the start of $block with text.\n        // <paragraph>[]foo</paragraph> ---> <paragraph>[]</paragraph><paragraph>foo</paragraph>\n        if (!positionParent.isEmpty && isTextAllowed && position.isAtStart) {\n            return model.createPositionBefore(positionParent);\n        }\n        return writer.split(position, allowedParent).position;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module paragraph/paragraph\n */\nimport ParagraphCommand from './paragraphcommand';\nimport InsertParagraphCommand from './insertparagraphcommand';\nimport { Plugin } from '@ckeditor/ckeditor5-core';\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * It also brings two editors commands:\n *\n * * The {@link module:paragraph/paragraphcommand~ParagraphCommand `'paragraph'`} command that converts all\n * blocks in the model selection into paragraphs.\n * * The {@link module:paragraph/insertparagraphcommand~InsertParagraphCommand `'insertParagraph'`} command\n * that inserts a new paragraph at a specified location in the model.\n */\nexport default class Paragraph extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Paragraph';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const model = editor.model;\n        editor.commands.add('paragraph', new ParagraphCommand(editor));\n        editor.commands.add('insertParagraph', new InsertParagraphCommand(editor));\n        // Schema.\n        model.schema.register('paragraph', { inheritAllFrom: '$block' });\n        editor.conversion.elementToElement({ model: 'paragraph', view: 'p' });\n        // Conversion for paragraph-like elements which has not been converted by any plugin.\n        editor.conversion.for('upcast').elementToElement({\n            model: (viewElement, { writer }) => {\n                if (!Paragraph.paragraphLikeElements.has(viewElement.name)) {\n                    return null;\n                }\n                // Do not auto-paragraph empty elements.\n                if (viewElement.isEmpty) {\n                    return null;\n                }\n                return writer.createElement('paragraph');\n            },\n            view: /.+/,\n            converterPriority: 'low'\n        });\n    }\n}\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n * ```html\n * <h1>Foo</h1>\n * <table>\n *   <tr>\n *     <td>X</td>\n *     <td>\n *       <ul>\n *         <li>Y</li>\n *         <li>Z</li>\n *       </ul>\n *     </td>\n *   </tr>\n * </table>\n * ```\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n * ```html\n * <p>Foo</p>\n * <p>X</p>\n * <p>Y</p>\n * <p>Z</p>\n * ```\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n */\nParagraph.paragraphLikeElements = new Set([\n    'blockquote',\n    'dd',\n    'div',\n    'dt',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'li',\n    'p',\n    'td',\n    'th'\n]);\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module paragraph/paragraphbuttonui\n */\nimport { Plugin, icons } from '@ckeditor/ckeditor5-core';\nimport { ButtonView } from '@ckeditor/ckeditor5-ui';\nimport Paragraph from './paragraph';\nconst icon = icons.paragraph;\n/**\n * This plugin defines the `'paragraph'` button. It can be used together with\n * {@link module:heading/headingbuttonsui~HeadingButtonsUI} to replace the standard heading dropdown.\n *\n * This plugin is not loaded automatically by the {@link module:paragraph/paragraph~Paragraph} plugin. It must\n * be added manually.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., Heading, Paragraph, HeadingButtonsUI, ParagraphButtonUI ]\n *     toolbar: [ 'paragraph', 'heading1', 'heading2', 'heading3' ]\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n */\nexport default class ParagraphButtonUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [Paragraph];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('paragraph', locale => {\n            const view = new ButtonView(locale);\n            const command = editor.commands.get('paragraph');\n            view.label = t('Paragraph');\n            view.icon = icon;\n            view.tooltip = true;\n            view.isToggleable = true;\n            view.bind('isEnabled').to(command);\n            view.bind('isOn').to(command, 'value');\n            view.on('execute', () => {\n                editor.execute('paragraph');\n            });\n            return view;\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
