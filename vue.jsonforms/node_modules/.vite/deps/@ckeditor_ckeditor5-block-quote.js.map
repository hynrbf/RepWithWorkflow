{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-block-quote/src/blockquotecommand.js", "../../@ckeditor/ckeditor5-block-quote/src/blockquoteediting.js", "../../@ckeditor/ckeditor5-block-quote/src/blockquoteui.js", "../../@ckeditor/ckeditor5-block-quote/src/blockquote.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module block-quote/blockquotecommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n/**\n * The block quote command plugin.\n *\n * @extends module:core/command~Command\n */\nexport default class BlockQuoteCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n     * Executes the command. When the command {@link #value is on}, all top-most block quotes within\n     * the selection will be removed. If it is off, all selected blocks will be wrapped with\n     * a block quote.\n     *\n     * @fires execute\n     * @param options Command options.\n     * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply a block quote,\n     * otherwise the command will remove the block quote. If not set, the command will act basing on its current value.\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        const blocks = Array.from(selection.getSelectedBlocks());\n        const value = (options.forceValue === undefined) ? !this.value : options.forceValue;\n        model.change(writer => {\n            if (!value) {\n                this._removeQuote(writer, blocks.filter(findQuote));\n            }\n            else {\n                const blocksToQuote = blocks.filter(block => {\n                    // Already quoted blocks needs to be considered while quoting too\n                    // in order to reuse their <bQ> elements.\n                    return findQuote(block) || checkCanBeQuoted(schema, block);\n                });\n                this._applyQuote(writer, blocksToQuote);\n            }\n        });\n    }\n    /**\n     * Checks the command's {@link #value}.\n     */\n    _getValue() {\n        const selection = this.editor.model.document.selection;\n        const firstBlock = first(selection.getSelectedBlocks());\n        // In the current implementation, the block quote must be an immediate parent of a block element.\n        return !!(firstBlock && findQuote(firstBlock));\n    }\n    /**\n     * Checks whether the command can be enabled in the current context.\n     *\n     * @returns Whether the command should be enabled.\n     */\n    _checkEnabled() {\n        if (this.value) {\n            return true;\n        }\n        const selection = this.editor.model.document.selection;\n        const schema = this.editor.model.schema;\n        const firstBlock = first(selection.getSelectedBlocks());\n        if (!firstBlock) {\n            return false;\n        }\n        return checkCanBeQuoted(schema, firstBlock);\n    }\n    /**\n     * Removes the quote from given blocks.\n     *\n     * If blocks which are supposed to be \"unquoted\" are in the middle of a quote,\n     * start it or end it, then the quote will be split (if needed) and the blocks\n     * will be moved out of it, so other quoted blocks remained quoted.\n     */\n    _removeQuote(writer, blocks) {\n        // Unquote all groups of block. Iterate in the reverse order to not break following ranges.\n        getRangesOfBlockGroups(writer, blocks).reverse().forEach(groupRange => {\n            if (groupRange.start.isAtStart && groupRange.end.isAtEnd) {\n                writer.unwrap(groupRange.start.parent);\n                return;\n            }\n            // The group of blocks are at the beginning of an <bQ> so let's move them left (out of the <bQ>).\n            if (groupRange.start.isAtStart) {\n                const positionBefore = writer.createPositionBefore(groupRange.start.parent);\n                writer.move(groupRange, positionBefore);\n                return;\n            }\n            // The blocks are in the middle of an <bQ> so we need to split the <bQ> after the last block\n            // so we move the items there.\n            if (!groupRange.end.isAtEnd) {\n                writer.split(groupRange.end);\n            }\n            // Now we are sure that groupRange.end.isAtEnd is true, so let's move the blocks right.\n            const positionAfter = writer.createPositionAfter(groupRange.end.parent);\n            writer.move(groupRange, positionAfter);\n        });\n    }\n    /**\n     * Applies the quote to given blocks.\n     */\n    _applyQuote(writer, blocks) {\n        const quotesToMerge = [];\n        // Quote all groups of block. Iterate in the reverse order to not break following ranges.\n        getRangesOfBlockGroups(writer, blocks).reverse().forEach(groupRange => {\n            let quote = findQuote(groupRange.start);\n            if (!quote) {\n                quote = writer.createElement('blockQuote');\n                writer.wrap(groupRange, quote);\n            }\n            quotesToMerge.push(quote);\n        });\n        // Merge subsequent <bQ> elements. Reverse the order again because this time we want to go through\n        // the <bQ> elements in the source order (due to how merge works â€“ it moves the right element's content\n        // to the first element and removes the right one. Since we may need to merge a couple of subsequent `<bQ>` elements\n        // we want to keep the reference to the first (furthest left) one.\n        quotesToMerge.reverse().reduce((currentQuote, nextQuote) => {\n            if (currentQuote.nextSibling == nextQuote) {\n                writer.merge(writer.createPositionAfter(currentQuote));\n                return currentQuote;\n            }\n            return nextQuote;\n        });\n    }\n}\nfunction findQuote(elementOrPosition) {\n    return elementOrPosition.parent.name == 'blockQuote' ? elementOrPosition.parent : null;\n}\n/**\n * Returns a minimal array of ranges containing groups of subsequent blocks.\n *\n * content:         abcdefgh\n * blocks:          [ a, b, d, f, g, h ]\n * output ranges:   [ab]c[d]e[fgh]\n */\nfunction getRangesOfBlockGroups(writer, blocks) {\n    let startPosition;\n    let i = 0;\n    const ranges = [];\n    while (i < blocks.length) {\n        const block = blocks[i];\n        const nextBlock = blocks[i + 1];\n        if (!startPosition) {\n            startPosition = writer.createPositionBefore(block);\n        }\n        if (!nextBlock || block.nextSibling != nextBlock) {\n            ranges.push(writer.createRange(startPosition, writer.createPositionAfter(block)));\n            startPosition = null;\n        }\n        i++;\n    }\n    return ranges;\n}\n/**\n * Checks whether <bQ> can wrap the block.\n */\nfunction checkCanBeQuoted(schema, block) {\n    // TMP will be replaced with schema.checkWrap().\n    const isBQAllowed = schema.checkChild(block.parent, 'blockQuote');\n    const isBlockAllowedInBQ = schema.checkChild(['$root', 'blockQuote'], block);\n    return isBQAllowed && isBlockAllowedInBQ;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module block-quote/blockquoteediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Enter } from 'ckeditor5/src/enter';\nimport { Delete } from 'ckeditor5/src/typing';\nimport BlockQuoteCommand from './blockquotecommand';\n/**\n * The block quote editing.\n *\n * Introduces the `'blockQuote'` command and the `'blockQuote'` model element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BlockQuoteEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [Enter, Delete];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        editor.commands.add('blockQuote', new BlockQuoteCommand(editor));\n        schema.register('blockQuote', {\n            inheritAllFrom: '$container'\n        });\n        editor.conversion.elementToElement({ model: 'blockQuote', view: 'blockquote' });\n        // Postfixer which cleans incorrect model states connected with block quotes.\n        editor.model.document.registerPostFixer(writer => {\n            const changes = editor.model.document.differ.getChanges();\n            for (const entry of changes) {\n                if (entry.type == 'insert') {\n                    const element = entry.position.nodeAfter;\n                    if (!element) {\n                        // We are inside a text node.\n                        continue;\n                    }\n                    if (element.is('element', 'blockQuote') && element.isEmpty) {\n                        // Added an empty blockQuote - remove it.\n                        writer.remove(element);\n                        return true;\n                    }\n                    else if (element.is('element', 'blockQuote') && !schema.checkChild(entry.position, element)) {\n                        // Added a blockQuote in incorrect place. Unwrap it so the content inside is not lost.\n                        writer.unwrap(element);\n                        return true;\n                    }\n                    else if (element.is('element')) {\n                        // Just added an element. Check that all children meet the scheme rules.\n                        const range = writer.createRangeIn(element);\n                        for (const child of range.getItems()) {\n                            if (child.is('element', 'blockQuote') &&\n                                !schema.checkChild(writer.createPositionBefore(child), child)) {\n                                writer.unwrap(child);\n                                return true;\n                            }\n                        }\n                    }\n                }\n                else if (entry.type == 'remove') {\n                    const parent = entry.position.parent;\n                    if (parent.is('element', 'blockQuote') && parent.isEmpty) {\n                        // Something got removed and now blockQuote is empty. Remove the blockQuote as well.\n                        writer.remove(parent);\n                        return true;\n                    }\n                }\n            }\n            return false;\n        });\n        const viewDocument = this.editor.editing.view.document;\n        const selection = editor.model.document.selection;\n        const blockQuoteCommand = editor.commands.get('blockQuote');\n        // Overwrite default Enter key behavior.\n        // If Enter key is pressed with selection collapsed in empty block inside a quote, break the quote.\n        this.listenTo(viewDocument, 'enter', (evt, data) => {\n            if (!selection.isCollapsed || !blockQuoteCommand.value) {\n                return;\n            }\n            const positionParent = selection.getLastPosition().parent;\n            if (positionParent.isEmpty) {\n                editor.execute('blockQuote');\n                editor.editing.view.scrollToTheSelection();\n                data.preventDefault();\n                evt.stop();\n            }\n        }, { context: 'blockquote' });\n        // Overwrite default Backspace key behavior.\n        // If Backspace key is pressed with selection collapsed in first empty block inside a quote, break the quote.\n        this.listenTo(viewDocument, 'delete', (evt, data) => {\n            if (data.direction != 'backward' || !selection.isCollapsed || !blockQuoteCommand.value) {\n                return;\n            }\n            const positionParent = selection.getLastPosition().parent;\n            if (positionParent.isEmpty && !positionParent.previousSibling) {\n                editor.execute('blockQuote');\n                editor.editing.view.scrollToTheSelection();\n                data.preventDefault();\n                evt.stop();\n            }\n        }, { context: 'blockquote' });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module block-quote/blockquoteui\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport '../theme/blockquote.css';\n/**\n * The block quote UI plugin.\n *\n * It introduces the `'blockQuote'` button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BlockQuoteUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('blockQuote', locale => {\n            const command = editor.commands.get('blockQuote');\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label: t('Block quote'),\n                icon: icons.quote,\n                tooltip: true,\n                isToggleable: true\n            });\n            // Bind button model to command.\n            buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(buttonView, 'execute', () => {\n                editor.execute('blockQuote');\n                editor.editing.view.focus();\n            });\n            return buttonView;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module block-quote/blockquote\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport BlockQuoteEditing from './blockquoteediting';\nimport BlockQuoteUI from './blockquoteui';\n/**\n * The block quote plugin.\n *\n * For more information about this feature check the {@glink api/block-quote package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:block-quote/blockquoteediting~BlockQuoteEditing block quote editing feature}\n * and {@link module:block-quote/blockquoteui~BlockQuoteUI block quote UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuote extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [BlockQuoteEditing, BlockQuoteUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'BlockQuote';\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
