{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-link/src/utils/automaticdecorators.js", "../../@ckeditor/ckeditor5-link/src/utils.js", "../../@ckeditor/ckeditor5-link/src/linkcommand.js", "../../@ckeditor/ckeditor5-link/src/unlinkcommand.js", "../../@ckeditor/ckeditor5-link/src/utils/manualdecorator.js", "../../@ckeditor/ckeditor5-link/src/linkediting.js", "../../@ckeditor/ckeditor5-link/src/ui/linkformview.js", "../../@ckeditor/ckeditor5-link/src/ui/linkactionsview.js", "../../@ckeditor/ckeditor5-link/src/linkui.js", "../../@ckeditor/ckeditor5-link/src/autolink.js", "../../@ckeditor/ckeditor5-link/src/link.js", "../../@ckeditor/ckeditor5-link/src/linkimageediting.js", "../../@ckeditor/ckeditor5-link/src/linkimageui.js", "../../@ckeditor/ckeditor5-link/src/linkimage.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/utils/automaticdecorators\n */\nimport { toMap } from 'ckeditor5/src/utils';\n/**\n * Helper class that ties together all {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition} and provides\n * the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement downcast dispatchers} for them.\n */\nexport default class AutomaticDecorators {\n    constructor() {\n        /**\n         * Stores the definition of {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition automatic decorators}.\n         * This data is used as a source for a downcast dispatcher to create a proper conversion to output data.\n         */\n        this._definitions = new Set();\n    }\n    /**\n     * Gives information about the number of decorators stored in the {@link module:link/utils/automaticdecorators~AutomaticDecorators}\n     * instance.\n     */\n    get length() {\n        return this._definitions.size;\n    }\n    /**\n     * Adds automatic decorator objects or an array with them to be used during downcasting.\n     *\n     * @param item A configuration object of automatic rules for decorating links. It might also be an array of such objects.\n     */\n    add(item) {\n        if (Array.isArray(item)) {\n            item.forEach(item => this._definitions.add(item));\n        }\n        else {\n            this._definitions.add(item);\n        }\n    }\n    /**\n     * Provides the conversion helper used in the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add} method.\n     *\n     * @returns A dispatcher function used as conversion helper in {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add}.\n     */\n    getDispatcher() {\n        return dispatcher => {\n            dispatcher.on('attribute:linkHref', (evt, data, conversionApi) => {\n                // There is only test as this behavior decorates links and\n                // it is run before dispatcher which actually consumes this node.\n                // This allows on writing own dispatcher with highest priority,\n                // which blocks both native converter and this additional decoration.\n                if (!conversionApi.consumable.test(data.item, 'attribute:linkHref')) {\n                    return;\n                }\n                // Automatic decorators for block links are handled e.g. in LinkImageEditing.\n                if (!(data.item.is('selection') || conversionApi.schema.isInline(data.item))) {\n                    return;\n                }\n                const viewWriter = conversionApi.writer;\n                const viewSelection = viewWriter.document.selection;\n                for (const item of this._definitions) {\n                    const viewElement = viewWriter.createAttributeElement('a', item.attributes, {\n                        priority: 5\n                    });\n                    if (item.classes) {\n                        viewWriter.addClass(item.classes, viewElement);\n                    }\n                    for (const key in item.styles) {\n                        viewWriter.setStyle(key, item.styles[key], viewElement);\n                    }\n                    viewWriter.setCustomProperty('link', true, viewElement);\n                    if (item.callback(data.attributeNewValue)) {\n                        if (data.item.is('selection')) {\n                            viewWriter.wrap(viewSelection.getFirstRange(), viewElement);\n                        }\n                        else {\n                            viewWriter.wrap(conversionApi.mapper.toViewRange(data.range), viewElement);\n                        }\n                    }\n                    else {\n                        viewWriter.unwrap(conversionApi.mapper.toViewRange(data.range), viewElement);\n                    }\n                }\n            }, { priority: 'high' });\n        };\n    }\n    /**\n     * Provides the conversion helper used in the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add} method\n     * when linking images.\n     *\n     * @returns A dispatcher function used as conversion helper in {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add}.\n     */\n    getDispatcherForLinkedImage() {\n        return dispatcher => {\n            dispatcher.on('attribute:linkHref:imageBlock', (evt, data, { writer, mapper }) => {\n                const viewFigure = mapper.toViewElement(data.item);\n                const linkInImage = Array.from(viewFigure.getChildren())\n                    .find((child) => child.is('element', 'a'));\n                for (const item of this._definitions) {\n                    const attributes = toMap(item.attributes);\n                    if (item.callback(data.attributeNewValue)) {\n                        for (const [key, val] of attributes) {\n                            // Left for backward compatibility. Since v30 decorator should\n                            // accept `classes` and `styles` separately from `attributes`.\n                            if (key === 'class') {\n                                writer.addClass(val, linkInImage);\n                            }\n                            else {\n                                writer.setAttribute(key, val, linkInImage);\n                            }\n                        }\n                        if (item.classes) {\n                            writer.addClass(item.classes, linkInImage);\n                        }\n                        for (const key in item.styles) {\n                            writer.setStyle(key, item.styles[key], linkInImage);\n                        }\n                    }\n                    else {\n                        for (const [key, val] of attributes) {\n                            if (key === 'class') {\n                                writer.removeClass(val, linkInImage);\n                            }\n                            else {\n                                writer.removeAttribute(key, linkInImage);\n                            }\n                        }\n                        if (item.classes) {\n                            writer.removeClass(item.classes, linkInImage);\n                        }\n                        for (const key in item.styles) {\n                            writer.removeStyle(key, linkInImage);\n                        }\n                    }\n                }\n            });\n        };\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { upperFirst } from 'lodash-es';\nconst ATTRIBUTE_WHITESPACES = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g; // eslint-disable-line no-control-regex\nconst SAFE_URL = /^(?:(?:https?|ftps?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.:-]|$))/i;\n// Simplified email test - should be run over previously found URL.\nconst EMAIL_REG_EXP = /^[\\S]+@((?![-_])(?:[-\\w\\u00a1-\\uffff]{0,63}[^-_]\\.))+(?:[a-z\\u00a1-\\uffff]{2,})$/i;\n// The regex checks for the protocol syntax ('xxxx://' or 'xxxx:')\n// or non-word characters at the beginning of the link ('/', '#' etc.).\nconst PROTOCOL_REG_EXP = /^((\\w+:(\\/{2,})?)|(\\W))/i;\n/**\n * A keystroke used by the {@link module:link/linkui~LinkUI link UI feature}.\n */\nexport const LINK_KEYSTROKE = 'Ctrl+K';\n/**\n * Returns `true` if a given view node is the link element.\n */\nexport function isLinkElement(node) {\n    return node.is('attributeElement') && !!node.getCustomProperty('link');\n}\n/**\n * Creates a link {@link module:engine/view/attributeelement~AttributeElement} with the provided `href` attribute.\n */\nexport function createLinkElement(href, { writer }) {\n    // Priority 5 - https://github.com/ckeditor/ckeditor5-link/issues/121.\n    const linkElement = writer.createAttributeElement('a', { href }, { priority: 5 });\n    writer.setCustomProperty('link', true, linkElement);\n    return linkElement;\n}\n/**\n * Returns a safe URL based on a given value.\n *\n * A URL is considered safe if it is safe for the user (does not contain any malicious code).\n *\n * If a URL is considered unsafe, a simple `\"#\"` is returned.\n *\n * @internal\n */\nexport function ensureSafeUrl(url) {\n    const urlString = String(url);\n    return isSafeUrl(urlString) ? urlString : '#';\n}\n/**\n * Checks whether the given URL is safe for the user (does not contain any malicious code).\n */\nfunction isSafeUrl(url) {\n    const normalizedUrl = url.replace(ATTRIBUTE_WHITESPACES, '');\n    return !!normalizedUrl.match(SAFE_URL);\n}\n/**\n * Returns the {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`} configuration processed\n * to respect the locale of the editor, i.e. to display the {@link module:link/linkconfig~LinkDecoratorManualDefinition label}\n * in the correct language.\n *\n * **Note**: Only the few most commonly used labels are translated automatically. Other labels should be manually\n * translated in the {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`} configuration.\n *\n * @param t Shorthand for {@link module:utils/locale~Locale#t Locale#t}.\n * @param decorators The decorator reference where the label values should be localized.\n */\nexport function getLocalizedDecorators(t, decorators) {\n    const localizedDecoratorsLabels = {\n        'Open in a new tab': t('Open in a new tab'),\n        'Downloadable': t('Downloadable')\n    };\n    decorators.forEach(decorator => {\n        if ('label' in decorator && localizedDecoratorsLabels[decorator.label]) {\n            decorator.label = localizedDecoratorsLabels[decorator.label];\n        }\n        return decorator;\n    });\n    return decorators;\n}\n/**\n * Converts an object with defined decorators to a normalized array of decorators. The `id` key is added for each decorator and\n * is used as the attribute's name in the model.\n */\nexport function normalizeDecorators(decorators) {\n    const retArray = [];\n    if (decorators) {\n        for (const [key, value] of Object.entries(decorators)) {\n            const decorator = Object.assign({}, value, { id: `link${upperFirst(key)}` });\n            retArray.push(decorator);\n        }\n    }\n    return retArray;\n}\n/**\n * Returns `true` if the specified `element` can be linked (the element allows the `linkHref` attribute).\n */\nexport function isLinkableElement(element, schema) {\n    if (!element) {\n        return false;\n    }\n    return schema.checkAttribute(element.name, 'linkHref');\n}\n/**\n * Returns `true` if the specified `value` is an email.\n */\nexport function isEmail(value) {\n    return EMAIL_REG_EXP.test(value);\n}\n/**\n * Adds the protocol prefix to the specified `link` when:\n *\n * * it does not contain it already, and there is a {@link module:link/linkconfig~LinkConfig#defaultProtocol `defaultProtocol` }\n * configuration value provided,\n * * or the link is an email address.\n */\nexport function addLinkProtocolIfApplicable(link, defaultProtocol) {\n    const protocol = isEmail(link) ? 'mailto:' : defaultProtocol;\n    const isProtocolNeeded = !!protocol && !linkHasProtocol(link);\n    return link && isProtocolNeeded ? protocol + link : link;\n}\n/**\n * Checks if protocol is already included in the link.\n */\nexport function linkHasProtocol(link) {\n    return PROTOCOL_REG_EXP.test(link);\n}\n/**\n * Opens the link in a new browser tab.\n */\nexport function openLink(link) {\n    window.open(link, '_blank', 'noopener');\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/linkcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { findAttributeRange } from 'ckeditor5/src/typing';\nimport { Collection, first, toMap } from 'ckeditor5/src/utils';\nimport AutomaticDecorators from './utils/automaticdecorators';\nimport { isLinkableElement } from './utils';\n/**\n * The link command. It is used by the {@link module:link/link~Link link feature}.\n */\nexport default class LinkCommand extends Command {\n    constructor() {\n        super(...arguments);\n        /**\n         * A collection of {@link module:link/utils/manualdecorator~ManualDecorator manual decorators}\n         * corresponding to the {@link module:link/linkconfig~LinkConfig#decorators decorator configuration}.\n         *\n         * You can consider it a model with states of manual decorators added to the currently selected link.\n         */\n        this.manualDecorators = new Collection();\n        /**\n         * An instance of the helper that ties together all {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition}\n         * that are used by the {@glink features/link link} and the {@glink features/images/images-linking linking images} features.\n         */\n        this.automaticDecorators = new AutomaticDecorators();\n    }\n    /**\n     * Synchronizes the state of {@link #manualDecorators} with the currently present elements in the model.\n     */\n    restoreManualDecoratorStates() {\n        for (const manualDecorator of this.manualDecorators) {\n            manualDecorator.value = this._getDecoratorStateFromModel(manualDecorator.id);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedElement = selection.getSelectedElement() || first(selection.getSelectedBlocks());\n        // A check for any integration that allows linking elements (e.g. `LinkImage`).\n        // Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n        if (isLinkableElement(selectedElement, model.schema)) {\n            this.value = selectedElement.getAttribute('linkHref');\n            this.isEnabled = model.schema.checkAttribute(selectedElement, 'linkHref');\n        }\n        else {\n            this.value = selection.getAttribute('linkHref');\n            this.isEnabled = model.schema.checkAttributeInSelection(selection, 'linkHref');\n        }\n        for (const manualDecorator of this.manualDecorators) {\n            manualDecorator.value = this._getDecoratorStateFromModel(manualDecorator.id);\n        }\n    }\n    /**\n     * Executes the command.\n     *\n     * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to\n     * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).\n     *\n     * When the selection is collapsed and is not inside the text with the `linkHref` attribute, a\n     * new {@link module:engine/model/text~Text text node} with the `linkHref` attribute will be inserted in place of the caret, but\n     * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.\n     * The selection will be updated to wrap the just inserted text node.\n     *\n     * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.\n     *\n     * # Decorators and model attribute management\n     *\n     * There is an optional argument to this command that applies or removes model\n     * {@glink framework/architecture/editing-engine#text-attributes text attributes} brought by\n     * {@link module:link/utils/manualdecorator~ManualDecorator manual link decorators}.\n     *\n     * Text attribute names in the model correspond to the entries in the {@link module:link/linkconfig~LinkConfig#decorators\n     * configuration}.\n     * For every decorator configured, a model text attribute exists with the \"link\" prefix. For example, a `'linkMyDecorator'` attribute\n     * corresponds to `'myDecorator'` in the configuration.\n     *\n     * To learn more about link decorators, check out the {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`}\n     * documentation.\n     *\n     * Here is how to manage decorator attributes with the link command:\n     *\n     * ```ts\n     * const linkCommand = editor.commands.get( 'link' );\n     *\n     * // Adding a new decorator attribute.\n     * linkCommand.execute( 'http://example.com', {\n     * \tlinkIsExternal: true\n     * } );\n     *\n     * // Removing a decorator attribute from the selection.\n     * linkCommand.execute( 'http://example.com', {\n     * \tlinkIsExternal: false\n     * } );\n     *\n     * // Adding multiple decorator attributes at the same time.\n     * linkCommand.execute( 'http://example.com', {\n     * \tlinkIsExternal: true,\n     * \tlinkIsDownloadable: true,\n     * } );\n     *\n     * // Removing and adding decorator attributes at the same time.\n     * linkCommand.execute( 'http://example.com', {\n     * \tlinkIsExternal: false,\n     * \tlinkFoo: true,\n     * \tlinkIsDownloadable: false,\n     * } );\n     * ```\n     *\n     * **Note**: If the decorator attribute name is not specified, its state remains untouched.\n     *\n     * **Note**: {@link module:link/unlinkcommand~UnlinkCommand#execute `UnlinkCommand#execute()`} removes all\n     * decorator attributes.\n     *\n     * @fires execute\n     * @param href Link destination.\n     * @param manualDecoratorIds The information about manual decorator attributes to be applied or removed upon execution.\n     */\n    execute(href, manualDecoratorIds = {}) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        // Stores information about manual decorators to turn them on/off when command is applied.\n        const truthyManualDecorators = [];\n        const falsyManualDecorators = [];\n        for (const name in manualDecoratorIds) {\n            if (manualDecoratorIds[name]) {\n                truthyManualDecorators.push(name);\n            }\n            else {\n                falsyManualDecorators.push(name);\n            }\n        }\n        model.change(writer => {\n            // If selection is collapsed then update selected link or insert new one at the place of caret.\n            if (selection.isCollapsed) {\n                const position = selection.getFirstPosition();\n                // When selection is inside text with `linkHref` attribute.\n                if (selection.hasAttribute('linkHref')) {\n                    const linkText = extractTextFromSelection(selection);\n                    // Then update `linkHref` value.\n                    let linkRange = findAttributeRange(position, 'linkHref', selection.getAttribute('linkHref'), model);\n                    if (selection.getAttribute('linkHref') === linkText) {\n                        linkRange = this._updateLinkContent(model, writer, linkRange, href);\n                    }\n                    writer.setAttribute('linkHref', href, linkRange);\n                    truthyManualDecorators.forEach(item => {\n                        writer.setAttribute(item, true, linkRange);\n                    });\n                    falsyManualDecorators.forEach(item => {\n                        writer.removeAttribute(item, linkRange);\n                    });\n                    // Put the selection at the end of the updated link.\n                    writer.setSelection(writer.createPositionAfter(linkRange.end.nodeBefore));\n                }\n                // If not then insert text node with `linkHref` attribute in place of caret.\n                // However, since selection is collapsed, attribute value will be used as data for text node.\n                // So, if `href` is empty, do not create text node.\n                else if (href !== '') {\n                    const attributes = toMap(selection.getAttributes());\n                    attributes.set('linkHref', href);\n                    truthyManualDecorators.forEach(item => {\n                        attributes.set(item, true);\n                    });\n                    const { end: positionAfter } = model.insertContent(writer.createText(href, attributes), position);\n                    // Put the selection at the end of the inserted link.\n                    // Using end of range returned from insertContent in case nodes with the same attributes got merged.\n                    writer.setSelection(positionAfter);\n                }\n                // Remove the `linkHref` attribute and all link decorators from the selection.\n                // It stops adding a new content into the link element.\n                ['linkHref', ...truthyManualDecorators, ...falsyManualDecorators].forEach(item => {\n                    writer.removeSelectionAttribute(item);\n                });\n            }\n            else {\n                // If selection has non-collapsed ranges, we change attribute on nodes inside those ranges\n                // omitting nodes where the `linkHref` attribute is disallowed.\n                const ranges = model.schema.getValidRanges(selection.getRanges(), 'linkHref');\n                // But for the first, check whether the `linkHref` attribute is allowed on selected blocks (e.g. the \"image\" element).\n                const allowedRanges = [];\n                for (const element of selection.getSelectedBlocks()) {\n                    if (model.schema.checkAttribute(element, 'linkHref')) {\n                        allowedRanges.push(writer.createRangeOn(element));\n                    }\n                }\n                // Ranges that accept the `linkHref` attribute. Since we will iterate over `allowedRanges`, let's clone it.\n                const rangesToUpdate = allowedRanges.slice();\n                // For all selection ranges we want to check whether given range is inside an element that accepts the `linkHref` attribute.\n                // If so, we don't want to propagate applying the attribute to its children.\n                for (const range of ranges) {\n                    if (this._isRangeToUpdate(range, allowedRanges)) {\n                        rangesToUpdate.push(range);\n                    }\n                }\n                for (const range of rangesToUpdate) {\n                    let linkRange = range;\n                    if (rangesToUpdate.length === 1) {\n                        // Current text of the link in the document.\n                        const linkText = extractTextFromSelection(selection);\n                        if (selection.getAttribute('linkHref') === linkText) {\n                            linkRange = this._updateLinkContent(model, writer, range, href);\n                            writer.setSelection(writer.createSelection(linkRange));\n                        }\n                    }\n                    writer.setAttribute('linkHref', href, linkRange);\n                    truthyManualDecorators.forEach(item => {\n                        writer.setAttribute(item, true, linkRange);\n                    });\n                    falsyManualDecorators.forEach(item => {\n                        writer.removeAttribute(item, linkRange);\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * Provides information whether a decorator with a given name is present in the currently processed selection.\n     *\n     * @param decoratorName The name of the manual decorator used in the model\n     * @returns The information whether a given decorator is currently present in the selection.\n     */\n    _getDecoratorStateFromModel(decoratorName) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        // A check for the `LinkImage` plugin. If the selection contains an element, get values from the element.\n        // Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n        if (isLinkableElement(selectedElement, model.schema)) {\n            return selectedElement.getAttribute(decoratorName);\n        }\n        return selection.getAttribute(decoratorName);\n    }\n    /**\n     * Checks whether specified `range` is inside an element that accepts the `linkHref` attribute.\n     *\n     * @param range A range to check.\n     * @param allowedRanges An array of ranges created on elements where the attribute is accepted.\n     */\n    _isRangeToUpdate(range, allowedRanges) {\n        for (const allowedRange of allowedRanges) {\n            // A range is inside an element that will have the `linkHref` attribute. Do not modify its nodes.\n            if (allowedRange.containsRange(range)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Updates selected link with a new value as its content and as its href attribute.\n     *\n     * @param model Model is need to insert content.\n     * @param writer Writer is need to create text element in model.\n     * @param range A range where should be inserted content.\n     * @param href A link value which should be in the href attribute and in the content.\n     */\n    _updateLinkContent(model, writer, range, href) {\n        const text = writer.createText(href, { linkHref: href });\n        return model.insertContent(text, range);\n    }\n}\n// Returns a text of a link under the collapsed selection or a selection that contains the entire link.\nfunction extractTextFromSelection(selection) {\n    if (selection.isCollapsed) {\n        const firstPosition = selection.getFirstPosition();\n        return firstPosition.textNode && firstPosition.textNode.data;\n    }\n    else {\n        const rangeItems = Array.from(selection.getFirstRange().getItems());\n        if (rangeItems.length > 1) {\n            return null;\n        }\n        const firstNode = rangeItems[0];\n        if (firstNode.is('$text') || firstNode.is('$textProxy')) {\n            return firstNode.data;\n        }\n        return null;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/unlinkcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { findAttributeRange } from 'ckeditor5/src/typing';\nimport { isLinkableElement } from './utils';\n/**\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\n */\nexport default class UnlinkCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        // A check for any integration that allows linking elements (e.g. `LinkImage`).\n        // Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n        if (isLinkableElement(selectedElement, model.schema)) {\n            this.isEnabled = model.schema.checkAttribute(selectedElement, 'linkHref');\n        }\n        else {\n            this.isEnabled = model.schema.checkAttributeInSelection(selection, 'linkHref');\n        }\n    }\n    /**\n     * Executes the command.\n     *\n     * When the selection is collapsed, it removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\n     * When the selection is non-collapsed, it removes the `linkHref` attribute from each node in selected ranges.\n     *\n     * # Decorators\n     *\n     * If {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`} is specified,\n     * all configured decorators are removed together with the `linkHref` attribute.\n     *\n     * @fires execute\n     */\n    execute() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const linkCommand = editor.commands.get('link');\n        model.change(writer => {\n            // Get ranges to unlink.\n            const rangesToUnlink = selection.isCollapsed ?\n                [findAttributeRange(selection.getFirstPosition(), 'linkHref', selection.getAttribute('linkHref'), model)] :\n                model.schema.getValidRanges(selection.getRanges(), 'linkHref');\n            // Remove `linkHref` attribute from specified ranges.\n            for (const range of rangesToUnlink) {\n                writer.removeAttribute('linkHref', range);\n                // If there are registered custom attributes, then remove them during unlink.\n                if (linkCommand) {\n                    for (const manualDecorator of linkCommand.manualDecorators) {\n                        writer.removeAttribute(manualDecorator.id, range);\n                    }\n                }\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/utils/manualdecorator\n */\nimport { ObservableMixin } from 'ckeditor5/src/utils';\n/**\n * Helper class that stores manual decorators with observable {@link module:link/utils/manualdecorator~ManualDecorator#value}\n * to support integration with the UI state. An instance of this class is a model with the state of individual manual decorators.\n * These decorators are kept as collections in {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n */\nexport default class ManualDecorator extends ObservableMixin() {\n    /**\n     * Creates a new instance of {@link module:link/utils/manualdecorator~ManualDecorator}.\n     *\n     * @param config.id The name of the attribute used in the model that represents a given manual decorator.\n     * For example: `'linkIsExternal'`.\n     * @param config.label The label used in the user interface to toggle the manual decorator.\n     * @param config.attributes A set of attributes added to output data when the decorator is active for a specific link.\n     * Attributes should keep the format of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n     * @param [config.defaultValue] Controls whether the decorator is \"on\" by default.\n     */\n    constructor({ id, label, attributes, classes, styles, defaultValue }) {\n        super();\n        this.id = id;\n        this.set('value', undefined);\n        this.defaultValue = defaultValue;\n        this.label = label;\n        this.attributes = attributes;\n        this.classes = classes;\n        this.styles = styles;\n    }\n    /**\n     * Returns {@link module:engine/view/matcher~MatcherPattern} with decorator attributes.\n     *\n     * @internal\n     */\n    _createPattern() {\n        return {\n            attributes: this.attributes,\n            classes: this.classes,\n            styles: this.styles\n        };\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/linkediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { MouseObserver } from 'ckeditor5/src/engine';\nimport { Input, TwoStepCaretMovement, inlineHighlight, findAttributeRange } from 'ckeditor5/src/typing';\nimport { ClipboardPipeline } from 'ckeditor5/src/clipboard';\nimport { keyCodes, env } from 'ckeditor5/src/utils';\nimport LinkCommand from './linkcommand';\nimport UnlinkCommand from './unlinkcommand';\nimport ManualDecorator from './utils/manualdecorator';\nimport { createLinkElement, ensureSafeUrl, getLocalizedDecorators, normalizeDecorators, openLink, addLinkProtocolIfApplicable } from './utils';\nimport '../theme/link.css';\nconst HIGHLIGHT_CLASS = 'ck-link_selected';\nconst DECORATOR_AUTOMATIC = 'automatic';\nconst DECORATOR_MANUAL = 'manual';\nconst EXTERNAL_LINKS_REGEXP = /^(https?:)?\\/\\//;\n/**\n * The link engine feature.\n *\n * It introduces the `linkHref=\"url\"` attribute in the model which renders to the view as a `<a href=\"url\">` element\n * as well as `'link'` and `'unlink'` commands.\n */\nexport default class LinkEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'LinkEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        // Clipboard is required for handling cut and paste events while typing over the link.\n        return [TwoStepCaretMovement, Input, ClipboardPipeline];\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('link', {\n            addTargetToExternalLinks: false\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Allow link attribute on all inline nodes.\n        editor.model.schema.extend('$text', { allowAttributes: 'linkHref' });\n        editor.conversion.for('dataDowncast')\n            .attributeToElement({ model: 'linkHref', view: createLinkElement });\n        editor.conversion.for('editingDowncast')\n            .attributeToElement({ model: 'linkHref', view: (href, conversionApi) => {\n                return createLinkElement(ensureSafeUrl(href), conversionApi);\n            } });\n        editor.conversion.for('upcast')\n            .elementToAttribute({\n            view: {\n                name: 'a',\n                attributes: {\n                    href: true\n                }\n            },\n            model: {\n                key: 'linkHref',\n                value: (viewElement) => viewElement.getAttribute('href')\n            }\n        });\n        // Create linking commands.\n        editor.commands.add('link', new LinkCommand(editor));\n        editor.commands.add('unlink', new UnlinkCommand(editor));\n        const linkDecorators = getLocalizedDecorators(editor.t, normalizeDecorators(editor.config.get('link.decorators')));\n        this._enableAutomaticDecorators(linkDecorators\n            .filter((item) => item.mode === DECORATOR_AUTOMATIC));\n        this._enableManualDecorators(linkDecorators\n            .filter((item) => item.mode === DECORATOR_MANUAL));\n        // Enable two-step caret movement for `linkHref` attribute.\n        const twoStepCaretMovementPlugin = editor.plugins.get(TwoStepCaretMovement);\n        twoStepCaretMovementPlugin.registerAttribute('linkHref');\n        // Setup highlight over selected link.\n        inlineHighlight(editor, 'linkHref', 'a', HIGHLIGHT_CLASS);\n        // Handle link following by CTRL+click or ALT+ENTER\n        this._enableLinkOpen();\n        // Change the attributes of the selection in certain situations after the link was inserted into the document.\n        this._enableInsertContentSelectionAttributesFixer();\n        // Handle a click at the beginning/end of a link element.\n        this._enableClickingAfterLink();\n        // Handle typing over the link.\n        this._enableTypingOverLink();\n        // Handle removing the content after the link element.\n        this._handleDeleteContentAfterLink();\n        // Handle adding default protocol to pasted links.\n        this._enableClipboardIntegration();\n    }\n    /**\n     * Processes an array of configured {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition automatic decorators}\n     * and registers a {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast dispatcher}\n     * for each one of them. Downcast dispatchers are obtained using the\n     * {@link module:link/utils/automaticdecorators~AutomaticDecorators#getDispatcher} method.\n     *\n     * **Note**: This method also activates the automatic external link decorator if enabled with\n     * {@link module:link/linkconfig~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}.\n     */\n    _enableAutomaticDecorators(automaticDecoratorDefinitions) {\n        const editor = this.editor;\n        // Store automatic decorators in the command instance as we do the same with manual decorators.\n        // Thanks to that, `LinkImageEditing` plugin can re-use the same definitions.\n        const command = editor.commands.get('link');\n        const automaticDecorators = command.automaticDecorators;\n        // Adds a default decorator for external links.\n        if (editor.config.get('link.addTargetToExternalLinks')) {\n            automaticDecorators.add({\n                id: 'linkIsExternal',\n                mode: DECORATOR_AUTOMATIC,\n                callback: url => !!url && EXTERNAL_LINKS_REGEXP.test(url),\n                attributes: {\n                    target: '_blank',\n                    rel: 'noopener noreferrer'\n                }\n            });\n        }\n        automaticDecorators.add(automaticDecoratorDefinitions);\n        if (automaticDecorators.length) {\n            editor.conversion.for('downcast').add(automaticDecorators.getDispatcher());\n        }\n    }\n    /**\n     * Processes an array of configured {@link module:link/linkconfig~LinkDecoratorManualDefinition manual decorators},\n     * transforms them into {@link module:link/utils/manualdecorator~ManualDecorator} instances and stores them in the\n     * {@link module:link/linkcommand~LinkCommand#manualDecorators} collection (a model for manual decorators state).\n     *\n     * Also registers an {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement attribute-to-element}\n     * converter for each manual decorator and extends the {@link module:engine/model/schema~Schema model's schema}\n     * with adequate model attributes.\n     */\n    _enableManualDecorators(manualDecoratorDefinitions) {\n        if (!manualDecoratorDefinitions.length) {\n            return;\n        }\n        const editor = this.editor;\n        const command = editor.commands.get('link');\n        const manualDecorators = command.manualDecorators;\n        manualDecoratorDefinitions.forEach(decoratorDefinition => {\n            editor.model.schema.extend('$text', { allowAttributes: decoratorDefinition.id });\n            // Keeps reference to manual decorator to decode its name to attributes during downcast.\n            const decorator = new ManualDecorator(decoratorDefinition);\n            manualDecorators.add(decorator);\n            editor.conversion.for('downcast').attributeToElement({\n                model: decorator.id,\n                view: (manualDecoratorValue, { writer, schema }, { item }) => {\n                    // Manual decorators for block links are handled e.g. in LinkImageEditing.\n                    if (!(item.is('selection') || schema.isInline(item))) {\n                        return;\n                    }\n                    if (manualDecoratorValue) {\n                        const element = writer.createAttributeElement('a', decorator.attributes, { priority: 5 });\n                        if (decorator.classes) {\n                            writer.addClass(decorator.classes, element);\n                        }\n                        for (const key in decorator.styles) {\n                            writer.setStyle(key, decorator.styles[key], element);\n                        }\n                        writer.setCustomProperty('link', true, element);\n                        return element;\n                    }\n                }\n            });\n            editor.conversion.for('upcast').elementToAttribute({\n                view: {\n                    name: 'a',\n                    ...decorator._createPattern()\n                },\n                model: {\n                    key: decorator.id\n                }\n            });\n        });\n    }\n    /**\n     * Attaches handlers for {@link module:engine/view/document~Document#event:enter} and\n     * {@link module:engine/view/document~Document#event:click} to enable link following.\n     */\n    _enableLinkOpen() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        this.listenTo(viewDocument, 'click', (evt, data) => {\n            const shouldOpen = env.isMac ? data.domEvent.metaKey : data.domEvent.ctrlKey;\n            if (!shouldOpen) {\n                return;\n            }\n            let clickedElement = data.domTarget;\n            if (clickedElement.tagName.toLowerCase() != 'a') {\n                clickedElement = clickedElement.closest('a');\n            }\n            if (!clickedElement) {\n                return;\n            }\n            const url = clickedElement.getAttribute('href');\n            if (!url) {\n                return;\n            }\n            evt.stop();\n            data.preventDefault();\n            openLink(url);\n        }, { context: '$capture' });\n        // Open link on Alt+Enter.\n        this.listenTo(viewDocument, 'keydown', (evt, data) => {\n            const linkCommand = editor.commands.get('link');\n            const url = linkCommand.value;\n            const shouldOpen = !!url && data.keyCode === keyCodes.enter && data.altKey;\n            if (!shouldOpen) {\n                return;\n            }\n            evt.stop();\n            openLink(url);\n        });\n    }\n    /**\n     * Starts listening to {@link module:engine/model/model~Model#event:insertContent} and corrects the model\n     * selection attributes if the selection is at the end of a link after inserting the content.\n     *\n     * The purpose of this action is to improve the overall UX because the user is no longer \"trapped\" by the\n     * `linkHref` attribute of the selection and they can type a \"clean\" (`linkHref`–less) text right away.\n     *\n     * See https://github.com/ckeditor/ckeditor5/issues/6053.\n     */\n    _enableInsertContentSelectionAttributesFixer() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        this.listenTo(model, 'insertContent', () => {\n            const nodeBefore = selection.anchor.nodeBefore;\n            const nodeAfter = selection.anchor.nodeAfter;\n            // NOTE: ↰ and ↱ represent the gravity of the selection.\n            // The only truly valid case is:\n            //\n            //\t\t                                 ↰\n            //\t\t...<$text linkHref=\"foo\">INSERTED[]</$text>\n            //\n            // If the selection is not \"trapped\" by the `linkHref` attribute after inserting, there's nothing\n            // to fix there.\n            if (!selection.hasAttribute('linkHref')) {\n                return;\n            }\n            // Filter out the following case where a link with the same href (e.g. <a href=\"foo\">INSERTED</a>) is inserted\n            // in the middle of an existing link:\n            //\n            // Before insertion:\n            //\t\t                       ↰\n            //\t\t<$text linkHref=\"foo\">l[]ink</$text>\n            //\n            // Expected after insertion:\n            //\t\t                               ↰\n            //\t\t<$text linkHref=\"foo\">lINSERTED[]ink</$text>\n            //\n            if (!nodeBefore) {\n                return;\n            }\n            // Filter out the following case where the selection has the \"linkHref\" attribute because the\n            // gravity is overridden and some text with another attribute (e.g. <b>INSERTED</b>) is inserted:\n            //\n            // Before insertion:\n            //\n            //\t\t                       ↱\n            //\t\t<$text linkHref=\"foo\">[]link</$text>\n            //\n            // Expected after insertion:\n            //\n            //\t\t                                                          ↱\n            //\t\t<$text bold=\"true\">INSERTED</$text><$text linkHref=\"foo\">[]link</$text>\n            //\n            if (!nodeBefore.hasAttribute('linkHref')) {\n                return;\n            }\n            // Filter out the following case where a link is a inserted in the middle (or before) another link\n            // (different URLs, so they will not merge). In this (let's say weird) case, we can leave the selection\n            // attributes as they are because the user will end up writing in one link or another anyway.\n            //\n            // Before insertion:\n            //\n            //\t\t                       ↰\n            //\t\t<$text linkHref=\"foo\">l[]ink</$text>\n            //\n            // Expected after insertion:\n            //\n            //\t\t                                                             ↰\n            //\t\t<$text linkHref=\"foo\">l</$text><$text linkHref=\"bar\">INSERTED[]</$text><$text linkHref=\"foo\">ink</$text>\n            //\n            if (nodeAfter && nodeAfter.hasAttribute('linkHref')) {\n                return;\n            }\n            model.change(writer => {\n                removeLinkAttributesFromSelection(writer, getLinkAttributesAllowedOnText(model.schema));\n            });\n        }, { priority: 'low' });\n    }\n    /**\n     * Starts listening to {@link module:engine/view/document~Document#event:mousedown} and\n     * {@link module:engine/view/document~Document#event:selectionChange} and puts the selection before/after a link node\n     * if clicked at the beginning/ending of the link.\n     *\n     * The purpose of this action is to allow typing around the link node directly after a click.\n     *\n     * See https://github.com/ckeditor/ckeditor5/issues/1016.\n     */\n    _enableClickingAfterLink() {\n        const editor = this.editor;\n        const model = editor.model;\n        editor.editing.view.addObserver(MouseObserver);\n        let clicked = false;\n        // Detect the click.\n        this.listenTo(editor.editing.view.document, 'mousedown', () => {\n            clicked = true;\n        });\n        // When the selection has changed...\n        this.listenTo(editor.editing.view.document, 'selectionChange', () => {\n            if (!clicked) {\n                return;\n            }\n            // ...and it was caused by the click...\n            clicked = false;\n            const selection = model.document.selection;\n            // ...and no text is selected...\n            if (!selection.isCollapsed) {\n                return;\n            }\n            // ...and clicked text is the link...\n            if (!selection.hasAttribute('linkHref')) {\n                return;\n            }\n            const position = selection.getFirstPosition();\n            const linkRange = findAttributeRange(position, 'linkHref', selection.getAttribute('linkHref'), model);\n            // ...check whether clicked start/end boundary of the link.\n            // If so, remove the `linkHref` attribute.\n            if (position.isTouching(linkRange.start) || position.isTouching(linkRange.end)) {\n                model.change(writer => {\n                    removeLinkAttributesFromSelection(writer, getLinkAttributesAllowedOnText(model.schema));\n                });\n            }\n        });\n    }\n    /**\n     * Starts listening to {@link module:engine/model/model~Model#deleteContent} and {@link module:engine/model/model~Model#insertContent}\n     * and checks whether typing over the link. If so, attributes of removed text are preserved and applied to the inserted text.\n     *\n     * The purpose of this action is to allow modifying a text without loosing the `linkHref` attribute (and other).\n     *\n     * See https://github.com/ckeditor/ckeditor5/issues/4762.\n     */\n    _enableTypingOverLink() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        // Selection attributes when started typing over the link.\n        let selectionAttributes = null;\n        // Whether pressed `Backspace` or `Delete`. If so, attributes should not be preserved.\n        let deletedContent = false;\n        // Detect pressing `Backspace` / `Delete`.\n        this.listenTo(view.document, 'delete', () => {\n            deletedContent = true;\n        }, { priority: 'high' });\n        // Listening to `model#deleteContent` allows detecting whether selected content was a link.\n        // If so, before removing the element, we will copy its attributes.\n        this.listenTo(editor.model, 'deleteContent', () => {\n            const selection = editor.model.document.selection;\n            // Copy attributes only if anything is selected.\n            if (selection.isCollapsed) {\n                return;\n            }\n            // When the content was deleted, do not preserve attributes.\n            if (deletedContent) {\n                deletedContent = false;\n                return;\n            }\n            // Enabled only when typing.\n            if (!isTyping(editor)) {\n                return;\n            }\n            if (shouldCopyAttributes(editor.model)) {\n                selectionAttributes = selection.getAttributes();\n            }\n        }, { priority: 'high' });\n        // Listening to `model#insertContent` allows detecting the content insertion.\n        // We want to apply attributes that were removed while typing over the link.\n        this.listenTo(editor.model, 'insertContent', (evt, [element]) => {\n            deletedContent = false;\n            // Enabled only when typing.\n            if (!isTyping(editor)) {\n                return;\n            }\n            if (!selectionAttributes) {\n                return;\n            }\n            editor.model.change(writer => {\n                for (const [attribute, value] of selectionAttributes) {\n                    writer.setAttribute(attribute, value, element);\n                }\n            });\n            selectionAttributes = null;\n        }, { priority: 'high' });\n    }\n    /**\n     * Starts listening to {@link module:engine/model/model~Model#deleteContent} and checks whether\n     * removing a content right after the \"linkHref\" attribute.\n     *\n     * If so, the selection should not preserve the `linkHref` attribute. However, if\n     * the {@link module:typing/twostepcaretmovement~TwoStepCaretMovement} plugin is active and\n     * the selection has the \"linkHref\" attribute due to overriden gravity (at the end), the `linkHref` attribute should stay untouched.\n     *\n     * The purpose of this action is to allow removing the link text and keep the selection outside the link.\n     *\n     * See https://github.com/ckeditor/ckeditor5/issues/7521.\n     */\n    _handleDeleteContentAfterLink() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const view = editor.editing.view;\n        // A flag whether attributes `linkHref` attribute should be preserved.\n        let shouldPreserveAttributes = false;\n        // A flag whether the `Backspace` key was pressed.\n        let hasBackspacePressed = false;\n        // Detect pressing `Backspace`.\n        this.listenTo(view.document, 'delete', (evt, data) => {\n            hasBackspacePressed = data.direction === 'backward';\n        }, { priority: 'high' });\n        // Before removing the content, check whether the selection is inside a link or at the end of link but with 2-SCM enabled.\n        // If so, we want to preserve link attributes.\n        this.listenTo(model, 'deleteContent', () => {\n            // Reset the state.\n            shouldPreserveAttributes = false;\n            const position = selection.getFirstPosition();\n            const linkHref = selection.getAttribute('linkHref');\n            if (!linkHref) {\n                return;\n            }\n            const linkRange = findAttributeRange(position, 'linkHref', linkHref, model);\n            // Preserve `linkHref` attribute if the selection is in the middle of the link or\n            // the selection is at the end of the link and 2-SCM is activated.\n            shouldPreserveAttributes = linkRange.containsPosition(position) || linkRange.end.isEqual(position);\n        }, { priority: 'high' });\n        // After removing the content, check whether the current selection should preserve the `linkHref` attribute.\n        this.listenTo(model, 'deleteContent', () => {\n            // If didn't press `Backspace`.\n            if (!hasBackspacePressed) {\n                return;\n            }\n            hasBackspacePressed = false;\n            // Disable the mechanism if inside a link (`<$text url=\"foo\">F[]oo</$text>` or <$text url=\"foo\">Foo[]</$text>`).\n            if (shouldPreserveAttributes) {\n                return;\n            }\n            // Use `model.enqueueChange()` in order to execute the callback at the end of the changes process.\n            editor.model.enqueueChange(writer => {\n                removeLinkAttributesFromSelection(writer, getLinkAttributesAllowedOnText(model.schema));\n            });\n        }, { priority: 'low' });\n    }\n    /**\n     * Enables URL fixing on pasting.\n     */\n    _enableClipboardIntegration() {\n        const editor = this.editor;\n        const model = editor.model;\n        const defaultProtocol = this.editor.config.get('link.defaultProtocol');\n        if (!defaultProtocol) {\n            return;\n        }\n        this.listenTo(editor.plugins.get('ClipboardPipeline'), 'contentInsertion', (evt, data) => {\n            model.change(writer => {\n                const range = writer.createRangeIn(data.content);\n                for (const item of range.getItems()) {\n                    if (item.hasAttribute('linkHref')) {\n                        const newLink = addLinkProtocolIfApplicable(item.getAttribute('linkHref'), defaultProtocol);\n                        writer.setAttribute('linkHref', newLink, item);\n                    }\n                }\n            });\n        });\n    }\n}\n/**\n * Make the selection free of link-related model attributes.\n * All link-related model attributes start with \"link\". That includes not only \"linkHref\"\n * but also all decorator attributes (they have dynamic names), or even custom plugins.\n */\nfunction removeLinkAttributesFromSelection(writer, linkAttributes) {\n    writer.removeSelectionAttribute('linkHref');\n    for (const attribute of linkAttributes) {\n        writer.removeSelectionAttribute(attribute);\n    }\n}\n/**\n * Checks whether selection's attributes should be copied to the new inserted text.\n */\nfunction shouldCopyAttributes(model) {\n    const selection = model.document.selection;\n    const firstPosition = selection.getFirstPosition();\n    const lastPosition = selection.getLastPosition();\n    const nodeAtFirstPosition = firstPosition.nodeAfter;\n    // The text link node does not exist...\n    if (!nodeAtFirstPosition) {\n        return false;\n    }\n    // ...or it isn't the text node...\n    if (!nodeAtFirstPosition.is('$text')) {\n        return false;\n    }\n    // ...or isn't the link.\n    if (!nodeAtFirstPosition.hasAttribute('linkHref')) {\n        return false;\n    }\n    // `textNode` = the position is inside the link element.\n    // `nodeBefore` = the position is at the end of the link element.\n    const nodeAtLastPosition = lastPosition.textNode || lastPosition.nodeBefore;\n    // If both references the same node selection contains a single text node.\n    if (nodeAtFirstPosition === nodeAtLastPosition) {\n        return true;\n    }\n    // If nodes are not equal, maybe the link nodes has defined additional attributes inside.\n    // First, we need to find the entire link range.\n    const linkRange = findAttributeRange(firstPosition, 'linkHref', nodeAtFirstPosition.getAttribute('linkHref'), model);\n    // Then we can check whether selected range is inside the found link range. If so, attributes should be preserved.\n    return linkRange.containsRange(model.createRange(firstPosition, lastPosition), true);\n}\n/**\n * Checks whether provided changes were caused by typing.\n */\nfunction isTyping(editor) {\n    const currentBatch = editor.model.change(writer => writer.batch);\n    return currentBatch.isTyping;\n}\n/**\n * Returns an array containing names of the attributes allowed on `$text` that describes the link item.\n */\nfunction getLinkAttributesAllowedOnText(schema) {\n    const textAttributes = schema.getDefinition('$text').allowAttributes;\n    return textAttributes.filter(attribute => attribute.startsWith('link'));\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/ui/linkformview\n */\nimport { ButtonView, FocusCycler, LabeledFieldView, SwitchButtonView, View, ViewCollection, createLabeledInputText, submitHandler } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\n// See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\nimport '../../theme/linkform.css';\n/**\n * The link form view controller class.\n *\n * See {@link module:link/ui/linkformview~LinkFormView}.\n */\nexport default class LinkFormView extends View {\n    /**\n     * Creates an instance of the {@link module:link/ui/linkformview~LinkFormView} class.\n     *\n     * Also see {@link #render}.\n     *\n     * @param locale The localization services instance.\n     * @param linkCommand Reference to {@link module:link/linkcommand~LinkCommand}.\n     */\n    constructor(locale, linkCommand) {\n        super(locale);\n        /**\n         * Tracks information about DOM focus in the form.\n         */\n        this.focusTracker = new FocusTracker();\n        /**\n         * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n         */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n         * A collection of views that can be focused in the form.\n         */\n        this._focusables = new ViewCollection();\n        const t = locale.t;\n        this.urlInputView = this._createUrlInput();\n        this.saveButtonView = this._createButton(t('Save'), icons.check, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        this.cancelButtonView = this._createButton(t('Cancel'), icons.cancel, 'ck-button-cancel', 'cancel');\n        this._manualDecoratorSwitches = this._createManualDecoratorSwitches(linkCommand);\n        this.children = this._createFormChildren(linkCommand.manualDecorators);\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        const classList = ['ck', 'ck-link-form', 'ck-responsive-form'];\n        if (linkCommand.manualDecorators.length) {\n            classList.push('ck-link-form_layout-vertical', 'ck-vertical-form');\n        }\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: classList,\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n     * Obtains the state of the {@link module:ui/button/switchbuttonview~SwitchButtonView switch buttons} representing\n     * {@link module:link/linkcommand~LinkCommand#manualDecorators manual link decorators}\n     * in the {@link module:link/ui/linkformview~LinkFormView}.\n     *\n     * @returns Key-value pairs, where the key is the name of the decorator and the value is its state.\n     */\n    getDecoratorSwitchesState() {\n        return Array\n            .from(this._manualDecoratorSwitches)\n            .reduce((accumulator, switchButton) => {\n            accumulator[switchButton.name] = switchButton.isOn;\n            return accumulator;\n        }, {});\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        submitHandler({\n            view: this\n        });\n        const childViews = [\n            this.urlInputView,\n            ...this._manualDecoratorSwitches,\n            this.saveButtonView,\n            this.cancelButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the fist {@link #_focusables} in the form.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Creates a labeled input view.\n     *\n     * @returns Labeled field view instance.\n     */\n    _createUrlInput() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n        labeledInput.label = t('Link URL');\n        return labeledInput;\n    }\n    /**\n     * Creates a button view.\n     *\n     * @param label The button label.\n     * @param icon The button icon.\n     * @param className The additional button CSS class name.\n     * @param eventName An event name that the `ButtonView#execute` event will be delegated to.\n     * @returns The button view instance.\n     */\n    _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({\n            attributes: {\n                class: className\n            }\n        });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n    /**\n     * Populates {@link module:ui/viewcollection~ViewCollection} of {@link module:ui/button/switchbuttonview~SwitchButtonView}\n     * made based on {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n     *\n     * @param linkCommand A reference to the link command.\n     * @returns ViewCollection of switch buttons.\n     */\n    _createManualDecoratorSwitches(linkCommand) {\n        const switches = this.createCollection();\n        for (const manualDecorator of linkCommand.manualDecorators) {\n            const switchButton = new SwitchButtonView(this.locale);\n            switchButton.set({\n                name: manualDecorator.id,\n                label: manualDecorator.label,\n                withText: true\n            });\n            switchButton.bind('isOn').toMany([manualDecorator, linkCommand], 'value', (decoratorValue, commandValue) => {\n                return commandValue === undefined && decoratorValue === undefined ? !!manualDecorator.defaultValue : !!decoratorValue;\n            });\n            switchButton.on('execute', () => {\n                manualDecorator.set('value', !switchButton.isOn);\n            });\n            switches.add(switchButton);\n        }\n        return switches;\n    }\n    /**\n     * Populates the {@link #children} collection of the form.\n     *\n     * If {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators} are configured in the editor, it creates an\n     * additional `View` wrapping all {@link #_manualDecoratorSwitches} switch buttons corresponding\n     * to these decorators.\n     *\n     * @param manualDecorators A reference to\n     * the collection of manual decorators stored in the link command.\n     * @returns The children of link form view.\n     */\n    _createFormChildren(manualDecorators) {\n        const children = this.createCollection();\n        children.add(this.urlInputView);\n        if (manualDecorators.length) {\n            const additionalButtonsView = new View();\n            additionalButtonsView.setTemplate({\n                tag: 'ul',\n                children: this._manualDecoratorSwitches.map(switchButton => ({\n                    tag: 'li',\n                    children: [switchButton],\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-list__item'\n                        ]\n                    }\n                })),\n                attributes: {\n                    class: [\n                        'ck',\n                        'ck-reset',\n                        'ck-list'\n                    ]\n                }\n            });\n            children.add(additionalButtonsView);\n        }\n        children.add(this.saveButtonView);\n        children.add(this.cancelButtonView);\n        return children;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/ui/linkactionsview\n */\nimport { ButtonView, View, ViewCollection, FocusCycler } from 'ckeditor5/src/ui';\nimport { FocusTracker, KeystrokeHandler } from 'ckeditor5/src/utils';\nimport { icons } from 'ckeditor5/src/core';\nimport { ensureSafeUrl } from '../utils';\n// See: #8833.\n// eslint-disable-next-line ckeditor5-rules/ckeditor-imports\nimport '@ckeditor/ckeditor5-ui/theme/components/responsive-form/responsiveform.css';\nimport '../../theme/linkactions.css';\nimport unlinkIcon from '../../theme/icons/unlink.svg';\n/**\n * The link actions view class. This view displays the link preview, allows\n * unlinking or editing the link.\n */\nexport default class LinkActionsView extends View {\n    /**\n     * @inheritDoc\n     */\n    constructor(locale) {\n        super(locale);\n        /**\n         * Tracks information about DOM focus in the actions.\n         */\n        this.focusTracker = new FocusTracker();\n        /**\n         * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n         */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n         * A collection of views that can be focused in the view.\n         */\n        this._focusables = new ViewCollection();\n        const t = locale.t;\n        this.previewButtonView = this._createPreviewButton();\n        this.unlinkButtonView = this._createButton(t('Unlink'), unlinkIcon, 'unlink');\n        this.editButtonView = this._createButton(t('Edit link'), icons.pencil, 'edit');\n        this.set('href', undefined);\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions',\n                    'ck-responsive-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: [\n                this.previewButtonView,\n                this.editButtonView,\n                this.unlinkButtonView\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    render() {\n        super.render();\n        const childViews = [\n            this.previewButtonView,\n            this.editButtonView,\n            this.unlinkButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n     * Focuses the fist {@link #_focusables} in the actions.\n     */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n     * Creates a button view.\n     *\n     * @param label The button label.\n     * @param icon The button icon.\n     * @param eventName An event name that the `ButtonView#execute` event will be delegated to.\n     * @returns The button view instance.\n     */\n    _createButton(label, icon, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.delegate('execute').to(this, eventName);\n        return button;\n    }\n    /**\n     * Creates a link href preview button.\n     *\n     * @returns The button view instance.\n     */\n    _createPreviewButton() {\n        const button = new ButtonView(this.locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        button.set({\n            withText: true,\n            tooltip: t('Open link in new tab')\n        });\n        button.extendTemplate({\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions__preview'\n                ],\n                href: bind.to('href', href => href && ensureSafeUrl(href)),\n                target: '_blank',\n                rel: 'noopener noreferrer'\n            }\n        });\n        button.bind('label').to(this, 'href', href => {\n            return href || t('This link has no URL');\n        });\n        button.bind('isEnabled').to(this, 'href', href => !!href);\n        button.template.tag = 'a';\n        button.template.eventListeners = {};\n        return button;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/linkui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { ClickObserver } from 'ckeditor5/src/engine';\nimport { ButtonView, ContextualBalloon, clickOutsideHandler, CssTransitionDisablerMixin } from 'ckeditor5/src/ui';\nimport { isWidget } from 'ckeditor5/src/widget';\nimport LinkFormView from './ui/linkformview';\nimport LinkActionsView from './ui/linkactionsview';\nimport { addLinkProtocolIfApplicable, isLinkElement, LINK_KEYSTROKE } from './utils';\nimport linkIcon from '../theme/icons/link.svg';\nconst VISUAL_SELECTION_MARKER_NAME = 'link-ui';\n/**\n * The link UI plugin. It introduces the `'link'` and `'unlink'` buttons and support for the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport default class LinkUI extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * The actions view displayed inside of the balloon.\n         */\n        this.actionsView = null;\n        /**\n         * The form view displayed inside the balloon.\n         */\n        this.formView = null;\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'LinkUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        editor.editing.view.addObserver(ClickObserver);\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        // Create toolbar buttons.\n        this._createToolbarLinkButton();\n        this._enableBalloonActivators();\n        // Renders a fake visual selection marker on an expanded selection.\n        editor.conversion.for('editingDowncast').markerToHighlight({\n            model: VISUAL_SELECTION_MARKER_NAME,\n            view: {\n                classes: ['ck-fake-link-selection']\n            }\n        });\n        // Renders a fake visual selection marker on a collapsed selection.\n        editor.conversion.for('editingDowncast').markerToElement({\n            model: VISUAL_SELECTION_MARKER_NAME,\n            view: {\n                name: 'span',\n                classes: ['ck-fake-link-selection', 'ck-fake-link-selection_collapsed']\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        if (this.formView) {\n            this.formView.destroy();\n        }\n        if (this.actionsView) {\n            this.actionsView.destroy();\n        }\n    }\n    /**\n     * Creates views.\n     */\n    _createViews() {\n        this.actionsView = this._createActionsView();\n        this.formView = this._createFormView();\n        // Attach lifecycle actions to the the balloon.\n        this._enableUserBalloonInteractions();\n    }\n    /**\n     * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n     */\n    _createActionsView() {\n        const editor = this.editor;\n        const actionsView = new LinkActionsView(editor.locale);\n        const linkCommand = editor.commands.get('link');\n        const unlinkCommand = editor.commands.get('unlink');\n        actionsView.bind('href').to(linkCommand, 'value');\n        actionsView.editButtonView.bind('isEnabled').to(linkCommand);\n        actionsView.unlinkButtonView.bind('isEnabled').to(unlinkCommand);\n        // Execute unlink command after clicking on the \"Edit\" button.\n        this.listenTo(actionsView, 'edit', () => {\n            this._addFormView();\n        });\n        // Execute unlink command after clicking on the \"Unlink\" button.\n        this.listenTo(actionsView, 'unlink', () => {\n            editor.execute('unlink');\n            this._hideUI();\n        });\n        // Close the panel on esc key press when the **actions have focus**.\n        actionsView.keystrokes.set('Esc', (data, cancel) => {\n            this._hideUI();\n            cancel();\n        });\n        // Open the form view on Ctrl+K when the **actions have focus**..\n        actionsView.keystrokes.set(LINK_KEYSTROKE, (data, cancel) => {\n            this._addFormView();\n            cancel();\n        });\n        return actionsView;\n    }\n    /**\n     * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n     */\n    _createFormView() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        const defaultProtocol = editor.config.get('link.defaultProtocol');\n        const formView = new (CssTransitionDisablerMixin(LinkFormView))(editor.locale, linkCommand);\n        formView.urlInputView.fieldView.bind('value').to(linkCommand, 'value');\n        // Form elements should be read-only when corresponding commands are disabled.\n        formView.urlInputView.bind('isEnabled').to(linkCommand, 'isEnabled');\n        formView.saveButtonView.bind('isEnabled').to(linkCommand);\n        // Execute link command after clicking the \"Save\" button.\n        this.listenTo(formView, 'submit', () => {\n            const { value } = formView.urlInputView.fieldView.element;\n            const parsedUrl = addLinkProtocolIfApplicable(value, defaultProtocol);\n            editor.execute('link', parsedUrl, formView.getDecoratorSwitchesState());\n            this._closeFormView();\n        });\n        // Hide the panel after clicking the \"Cancel\" button.\n        this.listenTo(formView, 'cancel', () => {\n            this._closeFormView();\n        });\n        // Close the panel on esc key press when the **form has focus**.\n        formView.keystrokes.set('Esc', (data, cancel) => {\n            this._closeFormView();\n            cancel();\n        });\n        return formView;\n    }\n    /**\n     * Creates a toolbar Link button. Clicking this button will show\n     * a {@link #_balloon} attached to the selection.\n     */\n    _createToolbarLinkButton() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        const t = editor.t;\n        editor.ui.componentFactory.add('link', locale => {\n            const button = new ButtonView(locale);\n            button.isEnabled = true;\n            button.label = t('Link');\n            button.icon = linkIcon;\n            button.keystroke = LINK_KEYSTROKE;\n            button.tooltip = true;\n            button.isToggleable = true;\n            // Bind button to the command.\n            button.bind('isEnabled').to(linkCommand, 'isEnabled');\n            button.bind('isOn').to(linkCommand, 'value', value => !!value);\n            // Show the panel on button click.\n            this.listenTo(button, 'execute', () => this._showUI(true));\n            return button;\n        });\n    }\n    /**\n     * Attaches actions that control whether the balloon panel containing the\n     * {@link #formView} should be displayed.\n     */\n    _enableBalloonActivators() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        // Handle click on view document and show panel when selection is placed inside the link element.\n        // Keep panel open until selection will be inside the same link element.\n        this.listenTo(viewDocument, 'click', () => {\n            const parentLink = this._getSelectedLinkElement();\n            if (parentLink) {\n                // Then show panel but keep focus inside editor editable.\n                this._showUI();\n            }\n        });\n        // Handle the `Ctrl+K` keystroke and show the panel.\n        editor.keystrokes.set(LINK_KEYSTROKE, (keyEvtData, cancel) => {\n            // Prevent focusing the search bar in FF, Chrome and Edge. See https://github.com/ckeditor/ckeditor5/issues/4811.\n            cancel();\n            if (editor.commands.get('link').isEnabled) {\n                this._showUI(true);\n            }\n        });\n    }\n    /**\n     * Attaches actions that control whether the balloon panel containing the\n     * {@link #formView} is visible or not.\n     */\n    _enableUserBalloonInteractions() {\n        // Focus the form if the balloon is visible and the Tab key has been pressed.\n        this.editor.keystrokes.set('Tab', (data, cancel) => {\n            if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {\n                this.actionsView.focus();\n                cancel();\n            }\n        }, {\n            // Use the high priority because the link UI navigation is more important\n            // than other feature's actions, e.g. list indentation.\n            // https://github.com/ckeditor/ckeditor5-link/issues/146\n            priority: 'high'\n        });\n        // Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n        this.editor.keystrokes.set('Esc', (data, cancel) => {\n            if (this._isUIVisible) {\n                this._hideUI();\n                cancel();\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this.formView,\n            activator: () => this._isUIInPanel,\n            contextElements: () => [this._balloon.view.element],\n            callback: () => this._hideUI()\n        });\n    }\n    /**\n     * Adds the {@link #actionsView} to the {@link #_balloon}.\n     *\n     * @internal\n     */\n    _addActionsView() {\n        if (!this.actionsView) {\n            this._createViews();\n        }\n        if (this._areActionsInPanel) {\n            return;\n        }\n        this._balloon.add({\n            view: this.actionsView,\n            position: this._getBalloonPositionData()\n        });\n    }\n    /**\n     * Adds the {@link #formView} to the {@link #_balloon}.\n     */\n    _addFormView() {\n        if (!this.formView) {\n            this._createViews();\n        }\n        if (this._isFormInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        this.formView.disableCssTransitions();\n        this._balloon.add({\n            view: this.formView,\n            position: this._getBalloonPositionData()\n        });\n        // Select input when form view is currently visible.\n        if (this._balloon.visibleView === this.formView) {\n            this.formView.urlInputView.fieldView.select();\n        }\n        this.formView.enableCssTransitions();\n        // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`urlInputView.fieldView#value` stays\n        // unaltered) and re-opened it without changing the value of the link command (e.g. because they\n        // clicked the same link), they would see the old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-link/issues/78\n        // https://github.com/ckeditor/ckeditor5-link/issues/123\n        this.formView.urlInputView.fieldView.element.value = linkCommand.value || '';\n    }\n    /**\n     * Closes the form view. Decides whether the balloon should be hidden completely or if the action view should be shown. This is\n     * decided upon the link command value (which has a value if the document selection is in the link).\n     *\n     * Additionally, if any {@link module:link/linkconfig~LinkConfig#decorators} are defined in the editor configuration, the state of\n     * switch buttons responsible for manual decorator handling is restored.\n     */\n    _closeFormView() {\n        const linkCommand = this.editor.commands.get('link');\n        // Restore manual decorator states to represent the current model state. This case is important to reset the switch buttons\n        // when the user cancels the editing form.\n        linkCommand.restoreManualDecoratorStates();\n        if (linkCommand.value !== undefined) {\n            this._removeFormView();\n        }\n        else {\n            this._hideUI();\n        }\n    }\n    /**\n     * Removes the {@link #formView} from the {@link #_balloon}.\n     */\n    _removeFormView() {\n        if (this._isFormInPanel) {\n            // Blur the input element before removing it from DOM to prevent issues in some browsers.\n            // See https://github.com/ckeditor/ckeditor5/issues/1501.\n            this.formView.saveButtonView.focus();\n            this._balloon.remove(this.formView);\n            // Because the form has an input which has focus, the focus must be brought back\n            // to the editor. Otherwise, it would be lost.\n            this.editor.editing.view.focus();\n            this._hideFakeVisualSelection();\n        }\n    }\n    /**\n     * Shows the correct UI type. It is either {@link #formView} or {@link #actionsView}.\n     *\n     * @internal\n     */\n    _showUI(forceVisible = false) {\n        if (!this.formView) {\n            this._createViews();\n        }\n        // When there's no link under the selection, go straight to the editing UI.\n        if (!this._getSelectedLinkElement()) {\n            // Show visual selection on a text without a link when the contextual balloon is displayed.\n            // See https://github.com/ckeditor/ckeditor5/issues/4721.\n            this._showFakeVisualSelection();\n            this._addActionsView();\n            // Be sure panel with link is visible.\n            if (forceVisible) {\n                this._balloon.showStack('main');\n            }\n            this._addFormView();\n        }\n        // If there's a link under the selection...\n        else {\n            // Go to the editing UI if actions are already visible.\n            if (this._areActionsVisible) {\n                this._addFormView();\n            }\n            // Otherwise display just the actions UI.\n            else {\n                this._addActionsView();\n            }\n            // Be sure panel with link is visible.\n            if (forceVisible) {\n                this._balloon.showStack('main');\n            }\n        }\n        // Begin responding to ui#update once the UI is added.\n        this._startUpdatingUI();\n    }\n    /**\n     * Removes the {@link #formView} from the {@link #_balloon}.\n     *\n     * See {@link #_addFormView}, {@link #_addActionsView}.\n     */\n    _hideUI() {\n        if (!this._isUIInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this.stopListening(this._balloon, 'change:visibleView');\n        // Make sure the focus always gets back to the editable _before_ removing the focused form view.\n        // Doing otherwise causes issues in some browsers. See https://github.com/ckeditor/ckeditor5-link/issues/193.\n        editor.editing.view.focus();\n        // Remove form first because it's on top of the stack.\n        this._removeFormView();\n        // Then remove the actions view because it's beneath the form.\n        this._balloon.remove(this.actionsView);\n        this._hideFakeVisualSelection();\n    }\n    /**\n     * Makes the UI react to the {@link module:ui/editorui/editorui~EditorUI#event:update} event to\n     * reposition itself when the editor UI should be refreshed.\n     *\n     * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n     */\n    _startUpdatingUI() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        let prevSelectedLink = this._getSelectedLinkElement();\n        let prevSelectionParent = getSelectionParent();\n        const update = () => {\n            const selectedLink = this._getSelectedLinkElement();\n            const selectionParent = getSelectionParent();\n            // Hide the panel if:\n            //\n            // * the selection went out of the EXISTING link element. E.g. user moved the caret out\n            //   of the link,\n            // * the selection went to a different parent when creating a NEW link. E.g. someone\n            //   else modified the document.\n            // * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n            //\n            // Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n            // when fully selected.\n            if ((prevSelectedLink && !selectedLink) ||\n                (!prevSelectedLink && selectionParent !== prevSelectionParent)) {\n                this._hideUI();\n            }\n            // Update the position of the panel when:\n            //  * link panel is in the visible stack\n            //  * the selection remains in the original link element,\n            //  * there was no link element in the first place, i.e. creating a new link\n            else if (this._isUIVisible) {\n                // If still in a link element, simply update the position of the balloon.\n                // If there was no link (e.g. inserting one), the balloon must be moved\n                // to the new position in the editing view (a new native DOM range).\n                this._balloon.updatePosition(this._getBalloonPositionData());\n            }\n            prevSelectedLink = selectedLink;\n            prevSelectionParent = selectionParent;\n        };\n        function getSelectionParent() {\n            return viewDocument.selection.focus.getAncestors()\n                .reverse()\n                .find((node) => node.is('element'));\n        }\n        this.listenTo(editor.ui, 'update', update);\n        this.listenTo(this._balloon, 'change:visibleView', update);\n    }\n    /**\n     * Returns `true` when {@link #formView} is in the {@link #_balloon}.\n     */\n    get _isFormInPanel() {\n        return !!this.formView && this._balloon.hasView(this.formView);\n    }\n    /**\n     * Returns `true` when {@link #actionsView} is in the {@link #_balloon}.\n     */\n    get _areActionsInPanel() {\n        return !!this.actionsView && this._balloon.hasView(this.actionsView);\n    }\n    /**\n     * Returns `true` when {@link #actionsView} is in the {@link #_balloon} and it is\n     * currently visible.\n     */\n    get _areActionsVisible() {\n        return !!this.actionsView && this._balloon.visibleView === this.actionsView;\n    }\n    /**\n     * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n     */\n    get _isUIInPanel() {\n        return this._isFormInPanel || this._areActionsInPanel;\n    }\n    /**\n     * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n     * currently visible.\n     */\n    get _isUIVisible() {\n        const visibleView = this._balloon.visibleView;\n        return !!this.formView && visibleView == this.formView || this._areActionsVisible;\n    }\n    /**\n     * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n     * to the target element or selection.\n     *\n     * If the selection is collapsed and inside a link element, the panel will be attached to the\n     * entire link element. Otherwise, it will be attached to the selection.\n     */\n    _getBalloonPositionData() {\n        const view = this.editor.editing.view;\n        const model = this.editor.model;\n        const viewDocument = view.document;\n        let target;\n        if (model.markers.has(VISUAL_SELECTION_MARKER_NAME)) {\n            // There are cases when we highlight selection using a marker (#7705, #4721).\n            const markerViewElements = Array.from(this.editor.editing.mapper.markerNameToElements(VISUAL_SELECTION_MARKER_NAME));\n            const newRange = view.createRange(view.createPositionBefore(markerViewElements[0]), view.createPositionAfter(markerViewElements[markerViewElements.length - 1]));\n            target = view.domConverter.viewRangeToDom(newRange);\n        }\n        else {\n            // Make sure the target is calculated on demand at the last moment because a cached DOM range\n            // (which is very fragile) can desynchronize with the state of the editing view if there was\n            // any rendering done in the meantime. This can happen, for instance, when an inline widget\n            // gets unlinked.\n            target = () => {\n                const targetLink = this._getSelectedLinkElement();\n                return targetLink ?\n                    // When selection is inside link element, then attach panel to this element.\n                    view.domConverter.mapViewToDom(targetLink) :\n                    // Otherwise attach panel to the selection.\n                    view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n            };\n        }\n        return { target };\n    }\n    /**\n     * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n     * the {@link module:engine/view/document~Document editing view's} selection or `null`\n     * if there is none.\n     *\n     * **Note**: For a non–collapsed selection, the link element is returned when **fully**\n     * selected and the **only** element within the selection boundaries, or when\n     * a linked widget is selected.\n     */\n    _getSelectedLinkElement() {\n        const view = this.editor.editing.view;\n        const selection = view.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        // The selection is collapsed or some widget is selected (especially inline widget).\n        if (selection.isCollapsed || selectedElement && isWidget(selectedElement)) {\n            return findLinkElementAncestor(selection.getFirstPosition());\n        }\n        else {\n            // The range for fully selected link is usually anchored in adjacent text nodes.\n            // Trim it to get closer to the actual link element.\n            const range = selection.getFirstRange().getTrimmed();\n            const startLink = findLinkElementAncestor(range.start);\n            const endLink = findLinkElementAncestor(range.end);\n            if (!startLink || startLink != endLink) {\n                return null;\n            }\n            // Check if the link element is fully selected.\n            if (view.createRangeIn(startLink).getTrimmed().isEqual(range)) {\n                return startLink;\n            }\n            else {\n                return null;\n            }\n        }\n    }\n    /**\n     * Displays a fake visual selection when the contextual balloon is displayed.\n     *\n     * This adds a 'link-ui' marker into the document that is rendered as a highlight on selected text fragment.\n     */\n    _showFakeVisualSelection() {\n        const model = this.editor.model;\n        model.change(writer => {\n            const range = model.document.selection.getFirstRange();\n            if (model.markers.has(VISUAL_SELECTION_MARKER_NAME)) {\n                writer.updateMarker(VISUAL_SELECTION_MARKER_NAME, { range });\n            }\n            else {\n                if (range.start.isAtEnd) {\n                    const startPosition = range.start.getLastMatchingPosition(({ item }) => !model.schema.isContent(item), { boundaries: range });\n                    writer.addMarker(VISUAL_SELECTION_MARKER_NAME, {\n                        usingOperation: false,\n                        affectsData: false,\n                        range: writer.createRange(startPosition, range.end)\n                    });\n                }\n                else {\n                    writer.addMarker(VISUAL_SELECTION_MARKER_NAME, {\n                        usingOperation: false,\n                        affectsData: false,\n                        range\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * Hides the fake visual selection created in {@link #_showFakeVisualSelection}.\n     */\n    _hideFakeVisualSelection() {\n        const model = this.editor.model;\n        if (model.markers.has(VISUAL_SELECTION_MARKER_NAME)) {\n            model.change(writer => {\n                writer.removeMarker(VISUAL_SELECTION_MARKER_NAME);\n            });\n        }\n    }\n}\n/**\n * Returns a link element if there's one among the ancestors of the provided `Position`.\n *\n * @param View position to analyze.\n * @returns Link element at the position or null.\n */\nfunction findLinkElementAncestor(position) {\n    return position.getAncestors().find((ancestor) => isLinkElement(ancestor)) || null;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/autolink\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Delete, TextWatcher, getLastTextLine } from 'ckeditor5/src/typing';\nimport { addLinkProtocolIfApplicable, linkHasProtocol } from './utils';\nconst MIN_LINK_LENGTH_WITH_SPACE_AT_END = 4; // Ie: \"t.co \" (length 5).\n// This was a tweak from https://gist.github.com/dperini/729294.\nconst URL_REG_EXP = new RegExp(\n// Group 1: Line start or after a space.\n'(^|\\\\s)' +\n    // Group 2: Detected URL (or e-mail).\n    '(' +\n    // Protocol identifier or short syntax \"//\"\n    // a. Full form http://user@foo.bar.baz:8080/foo/bar.html#baz?foo=bar\n    '(' +\n    '(?:(?:(?:https?|ftp):)?\\\\/\\\\/)' +\n    // BasicAuth using user:pass (optional)\n    '(?:\\\\S+(?::\\\\S*)?@)?' +\n    '(?:' +\n    // IP address dotted notation octets\n    // excludes loopback network 0.0.0.0\n    // excludes reserved space >= 224.0.0.0\n    // excludes network & broadcast addresses\n    // (first & last IP address of each class)\n    '(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n    '(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n    '(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n    '|' +\n    '(' +\n    // Do not allow `www.foo` - see https://github.com/ckeditor/ckeditor5/issues/8050.\n    '((?!www\\\\.)|(www\\\\.))' +\n    // Host & domain names.\n    '(?![-_])(?:[-_a-z0-9\\\\u00a1-\\\\uffff]{1,63}\\\\.)+' +\n    // TLD identifier name.\n    '(?:[a-z\\\\u00a1-\\\\uffff]{2,63})' +\n    ')' +\n    ')' +\n    // port number (optional)\n    '(?::\\\\d{2,5})?' +\n    // resource path (optional)\n    '(?:[/?#]\\\\S*)?' +\n    ')' +\n    '|' +\n    // b. Short form (either www.example.com or example@example.com)\n    '(' +\n    '(www.|(\\\\S+@))' +\n    // Host & domain names.\n    '((?![-_])(?:[-_a-z0-9\\\\u00a1-\\\\uffff]{1,63}\\\\.))+' +\n    // TLD identifier name.\n    '(?:[a-z\\\\u00a1-\\\\uffff]{2,63})' +\n    ')' +\n    ')$', 'i');\nconst URL_GROUP_IN_MATCH = 2;\n/**\n * The autolink plugin.\n */\nexport default class AutoLink extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [Delete];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'AutoLink';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        selection.on('change:range', () => {\n            // Disable plugin when selection is inside a code block.\n            this.isEnabled = !selection.anchor.parent.is('element', 'codeBlock');\n        });\n        this._enableTypingHandling();\n    }\n    /**\n     * @inheritDoc\n     */\n    afterInit() {\n        this._enableEnterHandling();\n        this._enableShiftEnterHandling();\n    }\n    /**\n     * Enables autolinking on typing.\n     */\n    _enableTypingHandling() {\n        const editor = this.editor;\n        const watcher = new TextWatcher(editor.model, text => {\n            // 1. Detect <kbd>Space</kbd> after a text with a potential link.\n            if (!isSingleSpaceAtTheEnd(text)) {\n                return;\n            }\n            // 2. Check text before last typed <kbd>Space</kbd>.\n            const url = getUrlAtTextEnd(text.substr(0, text.length - 1));\n            if (url) {\n                return { url };\n            }\n        });\n        watcher.on('matched:data', (evt, data) => {\n            const { batch, range, url } = data;\n            if (!batch.isTyping) {\n                return;\n            }\n            const linkEnd = range.end.getShiftedBy(-1); // Executed after a space character.\n            const linkStart = linkEnd.getShiftedBy(-url.length);\n            const linkRange = editor.model.createRange(linkStart, linkEnd);\n            this._applyAutoLink(url, linkRange);\n        });\n        watcher.bind('isEnabled').to(this);\n    }\n    /**\n     * Enables autolinking on the <kbd>Enter</kbd> key.\n     */\n    _enableEnterHandling() {\n        const editor = this.editor;\n        const model = editor.model;\n        const enterCommand = editor.commands.get('enter');\n        if (!enterCommand) {\n            return;\n        }\n        enterCommand.on('execute', () => {\n            const position = model.document.selection.getFirstPosition();\n            if (!position.parent.previousSibling) {\n                return;\n            }\n            const rangeToCheck = model.createRangeIn(position.parent.previousSibling);\n            this._checkAndApplyAutoLinkOnRange(rangeToCheck);\n        });\n    }\n    /**\n     * Enables autolinking on the <kbd>Shift</kbd>+<kbd>Enter</kbd> keyboard shortcut.\n     */\n    _enableShiftEnterHandling() {\n        const editor = this.editor;\n        const model = editor.model;\n        const shiftEnterCommand = editor.commands.get('shiftEnter');\n        if (!shiftEnterCommand) {\n            return;\n        }\n        shiftEnterCommand.on('execute', () => {\n            const position = model.document.selection.getFirstPosition();\n            const rangeToCheck = model.createRange(model.createPositionAt(position.parent, 0), position.getShiftedBy(-1));\n            this._checkAndApplyAutoLinkOnRange(rangeToCheck);\n        });\n    }\n    /**\n     * Checks if the passed range contains a linkable text.\n     */\n    _checkAndApplyAutoLinkOnRange(rangeToCheck) {\n        const model = this.editor.model;\n        const { text, range } = getLastTextLine(rangeToCheck, model);\n        const url = getUrlAtTextEnd(text);\n        if (url) {\n            const linkRange = model.createRange(range.end.getShiftedBy(-url.length), range.end);\n            this._applyAutoLink(url, linkRange);\n        }\n    }\n    /**\n     * Applies a link on a given range if the link should be applied.\n     *\n     * @param url The URL to link.\n     * @param range The text range to apply the link attribute to.\n     */\n    _applyAutoLink(url, range) {\n        const model = this.editor.model;\n        const defaultProtocol = this.editor.config.get('link.defaultProtocol');\n        const fullUrl = addLinkProtocolIfApplicable(url, defaultProtocol);\n        if (!this.isEnabled || !isLinkAllowedOnRange(range, model) || !linkHasProtocol(fullUrl) || linkIsAlreadySet(range)) {\n            return;\n        }\n        this._persistAutoLink(fullUrl, range);\n    }\n    /**\n     * Enqueues autolink changes in the model.\n     *\n     * @param url The URL to link.\n     * @param range The text range to apply the link attribute to.\n     */\n    _persistAutoLink(url, range) {\n        const model = this.editor.model;\n        const deletePlugin = this.editor.plugins.get('Delete');\n        // Enqueue change to make undo step.\n        model.enqueueChange(writer => {\n            writer.setAttribute('linkHref', url, range);\n            model.enqueueChange(() => {\n                deletePlugin.requestUndoOnBackspace();\n            });\n        });\n    }\n}\n// Check if text should be evaluated by the plugin in order to reduce number of RegExp checks on whole text.\nfunction isSingleSpaceAtTheEnd(text) {\n    return text.length > MIN_LINK_LENGTH_WITH_SPACE_AT_END && text[text.length - 1] === ' ' && text[text.length - 2] !== ' ';\n}\nfunction getUrlAtTextEnd(text) {\n    const match = URL_REG_EXP.exec(text);\n    return match ? match[URL_GROUP_IN_MATCH] : null;\n}\nfunction isLinkAllowedOnRange(range, model) {\n    return model.schema.checkAttributeInSelection(model.createSelection(range), 'linkHref');\n}\nfunction linkIsAlreadySet(range) {\n    const item = range.start.nodeAfter;\n    return !!item && item.hasAttribute('linkHref');\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/link\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport LinkEditing from './linkediting';\nimport LinkUI from './linkui';\nimport AutoLink from './autolink';\n/**\n * The link plugin.\n *\n * This is a \"glue\" plugin that loads the {@link module:link/linkediting~LinkEditing link editing feature}\n * and {@link module:link/linkui~LinkUI link UI feature}.\n */\nexport default class Link extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [LinkEditing, LinkUI, AutoLink];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Link';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/linkimageediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Matcher } from 'ckeditor5/src/engine';\nimport { toMap } from 'ckeditor5/src/utils';\nimport LinkEditing from './linkediting';\n/**\n * The link image engine feature.\n *\n * It accepts the `linkHref=\"url\"` attribute in the model for the {@link module:image/image~Image `<imageBlock>`} element\n * which allows linking images.\n */\nexport default class LinkImageEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return ['ImageEditing', 'ImageUtils', LinkEditing];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'LinkImageEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        if (editor.plugins.has('ImageBlockEditing')) {\n            schema.extend('imageBlock', { allowAttributes: ['linkHref'] });\n        }\n        editor.conversion.for('upcast').add(upcastLink(editor));\n        editor.conversion.for('downcast').add(downcastImageLink(editor));\n        // Definitions for decorators are provided by the `link` command and the `LinkEditing` plugin.\n        this._enableAutomaticDecorators();\n        this._enableManualDecorators();\n    }\n    /**\n     * Processes {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition automatic decorators} definitions and\n     * attaches proper converters that will work when linking an image.`\n     */\n    _enableAutomaticDecorators() {\n        const editor = this.editor;\n        const command = editor.commands.get('link');\n        const automaticDecorators = command.automaticDecorators;\n        if (automaticDecorators.length) {\n            editor.conversion.for('downcast').add(automaticDecorators.getDispatcherForLinkedImage());\n        }\n    }\n    /**\n     * Processes transformed {@link module:link/utils/manualdecorator~ManualDecorator} instances and attaches proper converters\n     * that will work when linking an image.\n     */\n    _enableManualDecorators() {\n        const editor = this.editor;\n        const command = editor.commands.get('link');\n        for (const decorator of command.manualDecorators) {\n            if (editor.plugins.has('ImageBlockEditing')) {\n                editor.model.schema.extend('imageBlock', { allowAttributes: decorator.id });\n            }\n            if (editor.plugins.has('ImageInlineEditing')) {\n                editor.model.schema.extend('imageInline', { allowAttributes: decorator.id });\n            }\n            editor.conversion.for('downcast').add(downcastImageLinkManualDecorator(decorator));\n            editor.conversion.for('upcast').add(upcastImageLinkManualDecorator(editor, decorator));\n        }\n    }\n}\n/**\n * Returns a converter for linked block images that consumes the \"href\" attribute\n * if a link contains an image.\n *\n * @param editor The editor instance.\n */\nfunction upcastLink(editor) {\n    const isImageInlinePluginLoaded = editor.plugins.has('ImageInlineEditing');\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return dispatcher => {\n        dispatcher.on('element:a', (evt, data, conversionApi) => {\n            const viewLink = data.viewItem;\n            const imageInLink = imageUtils.findViewImgElement(viewLink);\n            if (!imageInLink) {\n                return;\n            }\n            const blockImageView = imageInLink.findAncestor(element => imageUtils.isBlockImageView(element));\n            // There are four possible cases to consider here\n            //\n            // 1. A \"root > ... > figure.image > a > img\" structure.\n            // 2. A \"root > ... > figure.image > a > picture > img\" structure.\n            // 3. A \"root > ... > block > a > img\" structure.\n            // 4. A \"root > ... > block > a > picture > img\" structure.\n            //\n            // but the last 2 cases should only be considered by this converter when the inline image plugin\n            // is NOT loaded in the editor (because otherwise, that would be a plain, linked inline image).\n            if (isImageInlinePluginLoaded && !blockImageView) {\n                return;\n            }\n            // There's an image inside an <a> element - we consume it so it won't be picked up by the Link plugin.\n            const consumableAttributes = { attributes: ['href'] };\n            // Consume the `href` attribute so the default one will not convert it to $text attribute.\n            if (!conversionApi.consumable.consume(viewLink, consumableAttributes)) {\n                // Might be consumed by something else - i.e. other converter with priority=highest - a standard check.\n                return;\n            }\n            const linkHref = viewLink.getAttribute('href');\n            // Missing the 'href' attribute.\n            if (!linkHref) {\n                return;\n            }\n            // A full definition of the image feature.\n            // figure > a > img: parent of the view link element is an image element (figure).\n            let modelElement = data.modelCursor.parent;\n            if (!modelElement.is('element', 'imageBlock')) {\n                // a > img: parent of the view link is not the image (figure) element. We need to convert it manually.\n                const conversionResult = conversionApi.convertItem(imageInLink, data.modelCursor);\n                // Set image range as conversion result.\n                data.modelRange = conversionResult.modelRange;\n                // Continue conversion where image conversion ends.\n                data.modelCursor = conversionResult.modelCursor;\n                modelElement = data.modelCursor.nodeBefore;\n            }\n            if (modelElement && modelElement.is('element', 'imageBlock')) {\n                // Set the linkHref attribute from link element on model image element.\n                conversionApi.writer.setAttribute('linkHref', linkHref, modelElement);\n            }\n        }, { priority: 'high' });\n        // Using the same priority that `upcastImageLinkManualDecorator()` converter guarantees\n        // that manual decorators will decorate the proper element.\n    };\n}\n/**\n * Creates a converter that adds `<a>` to linked block image view elements.\n */\nfunction downcastImageLink(editor) {\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return dispatcher => {\n        dispatcher.on('attribute:linkHref:imageBlock', (evt, data, conversionApi) => {\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            // The image will be already converted - so it will be present in the view.\n            const viewFigure = conversionApi.mapper.toViewElement(data.item);\n            const writer = conversionApi.writer;\n            // But we need to check whether the link element exists.\n            const linkInImage = Array.from(viewFigure.getChildren())\n                .find((child) => child.is('element', 'a'));\n            const viewImage = imageUtils.findViewImgElement(viewFigure);\n            // <picture>...<img/></picture> or <img/>\n            const viewImgOrPicture = viewImage.parent.is('element', 'picture') ? viewImage.parent : viewImage;\n            // If so, update the attribute if it's defined or remove the entire link if the attribute is empty.\n            if (linkInImage) {\n                if (data.attributeNewValue) {\n                    writer.setAttribute('href', data.attributeNewValue, linkInImage);\n                }\n                else {\n                    writer.move(writer.createRangeOn(viewImgOrPicture), writer.createPositionAt(viewFigure, 0));\n                    writer.remove(linkInImage);\n                }\n            }\n            else {\n                // But if it does not exist. Let's wrap already converted image by newly created link element.\n                // 1. Create an empty link element.\n                const linkElement = writer.createContainerElement('a', { href: data.attributeNewValue });\n                // 2. Insert link inside the associated image.\n                writer.insert(writer.createPositionAt(viewFigure, 0), linkElement);\n                // 3. Move the image to the link.\n                writer.move(writer.createRangeOn(viewImgOrPicture), writer.createPositionAt(linkElement, 0));\n            }\n        }, { priority: 'high' });\n    };\n}\n/**\n * Returns a converter that decorates the `<a>` element when the image is the link label.\n */\nfunction downcastImageLinkManualDecorator(decorator) {\n    return dispatcher => {\n        dispatcher.on(`attribute:${decorator.id}:imageBlock`, (evt, data, conversionApi) => {\n            const viewFigure = conversionApi.mapper.toViewElement(data.item);\n            const linkInImage = Array.from(viewFigure.getChildren())\n                .find((child) => child.is('element', 'a'));\n            // The <a> element was removed by the time this converter is executed.\n            // It may happen when the base `linkHref` and decorator attributes are removed\n            // at the same time (see #8401).\n            if (!linkInImage) {\n                return;\n            }\n            for (const [key, val] of toMap(decorator.attributes)) {\n                conversionApi.writer.setAttribute(key, val, linkInImage);\n            }\n            if (decorator.classes) {\n                conversionApi.writer.addClass(decorator.classes, linkInImage);\n            }\n            for (const key in decorator.styles) {\n                conversionApi.writer.setStyle(key, decorator.styles[key], linkInImage);\n            }\n        });\n    };\n}\n/**\n * Returns a converter that checks whether manual decorators should be applied to the link.\n */\nfunction upcastImageLinkManualDecorator(editor, decorator) {\n    const isImageInlinePluginLoaded = editor.plugins.has('ImageInlineEditing');\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return dispatcher => {\n        dispatcher.on('element:a', (evt, data, conversionApi) => {\n            const viewLink = data.viewItem;\n            const imageInLink = imageUtils.findViewImgElement(viewLink);\n            // We need to check whether an image is inside a link because the converter handles\n            // only manual decorators for linked images. See #7975.\n            if (!imageInLink) {\n                return;\n            }\n            const blockImageView = imageInLink.findAncestor(element => imageUtils.isBlockImageView(element));\n            if (isImageInlinePluginLoaded && !blockImageView) {\n                return;\n            }\n            const matcher = new Matcher(decorator._createPattern());\n            const result = matcher.match(viewLink);\n            // The link element does not have required attributes or/and proper values.\n            if (!result) {\n                return;\n            }\n            // Check whether we can consume those attributes.\n            if (!conversionApi.consumable.consume(viewLink, result.match)) {\n                return;\n            }\n            // At this stage we can assume that we have the `<imageBlock>` element.\n            // `nodeBefore` comes after conversion: `<a><img></a>`.\n            // `parent` comes with full image definition: `<figure><a><img></a></figure>.\n            // See the body of the `upcastLink()` function.\n            const modelElement = data.modelCursor.nodeBefore || data.modelCursor.parent;\n            conversionApi.writer.setAttribute(decorator.id, true, modelElement);\n        }, { priority: 'high' });\n        // Using the same priority that `upcastLink()` converter guarantees that the linked image was properly converted.\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/linkimageui\n */\nimport { ButtonView } from 'ckeditor5/src/ui';\nimport { Plugin } from 'ckeditor5/src/core';\nimport LinkUI from './linkui';\nimport LinkEditing from './linkediting';\nimport { LINK_KEYSTROKE } from './utils';\nimport linkIcon from '../theme/icons/link.svg';\n/**\n * The link image UI plugin.\n *\n * This plugin provides the `'linkImage'` button that can be displayed in the {@link module:image/imagetoolbar~ImageToolbar}.\n * It can be used to wrap images in links.\n */\nexport default class LinkImageUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [LinkEditing, LinkUI, 'ImageBlockEditing'];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'LinkImageUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        this.listenTo(viewDocument, 'click', (evt, data) => {\n            if (this._isSelectedLinkedImage(editor.model.document.selection)) {\n                // Prevent browser navigation when clicking a linked image.\n                data.preventDefault();\n                // Block the `LinkUI` plugin when an image was clicked.\n                // In such a case, we'd like to display the image toolbar.\n                evt.stop();\n            }\n        }, { priority: 'high' });\n        this._createToolbarLinkImageButton();\n    }\n    /**\n     * Creates a `LinkImageUI` button view.\n     *\n     * Clicking this button shows a {@link module:link/linkui~LinkUI#_balloon} attached to the selection.\n     * When an image is already linked, the view shows {@link module:link/linkui~LinkUI#actionsView} or\n     * {@link module:link/linkui~LinkUI#formView} if it is not.\n     */\n    _createToolbarLinkImageButton() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('linkImage', locale => {\n            const button = new ButtonView(locale);\n            const plugin = editor.plugins.get('LinkUI');\n            const linkCommand = editor.commands.get('link');\n            button.set({\n                isEnabled: true,\n                label: t('Link image'),\n                icon: linkIcon,\n                keystroke: LINK_KEYSTROKE,\n                tooltip: true,\n                isToggleable: true\n            });\n            // Bind button to the command.\n            button.bind('isEnabled').to(linkCommand, 'isEnabled');\n            button.bind('isOn').to(linkCommand, 'value', value => !!value);\n            // Show the actionsView or formView (both from LinkUI) on button click depending on whether the image is linked already.\n            this.listenTo(button, 'execute', () => {\n                if (this._isSelectedLinkedImage(editor.model.document.selection)) {\n                    plugin._addActionsView();\n                }\n                else {\n                    plugin._showUI(true);\n                }\n            });\n            return button;\n        });\n    }\n    /**\n     * Returns true if a linked image (either block or inline) is the only selected element\n     * in the model document.\n     */\n    _isSelectedLinkedImage(selection) {\n        const selectedModelElement = selection.getSelectedElement();\n        const imageUtils = this.editor.plugins.get('ImageUtils');\n        return imageUtils.isImage(selectedModelElement) && selectedModelElement.hasAttribute('linkHref');\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/linkimage\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport LinkImageEditing from './linkimageediting';\nimport LinkImageUI from './linkimageui';\nimport '../theme/linkimage.css';\n/**\n * The `LinkImage` plugin.\n *\n * This is a \"glue\" plugin that loads the {@link module:link/linkimageediting~LinkImageEditing link image editing feature}\n * and {@link module:link/linkimageui~LinkImageUI link image UI feature}.\n */\nexport default class LinkImage extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [LinkImageEditing, LinkImageUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'LinkImage';\n    }\n}\n"],
  "mappings": "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",
  "names": ["item", "linkIcon"]
}
