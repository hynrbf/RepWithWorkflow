{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-enter/src/utils.js", "../../@ckeditor/ckeditor5-enter/src/entercommand.js", "../../@ckeditor/ckeditor5-enter/src/enterobserver.js", "../../@ckeditor/ckeditor5-enter/src/enter.js", "../../@ckeditor/ckeditor5-enter/src/shiftentercommand.js", "../../@ckeditor/ckeditor5-enter/src/shiftenter.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * Returns attributes that should be preserved on the enter keystroke.\n *\n * Filtering is realized based on `copyOnEnter` attribute property. Read more about attribute properties\n * {@link module:engine/model/schema~Schema#setAttributeProperties here}.\n *\n * @param schema Model's schema.\n * @param allAttributes Attributes to filter.\n */\nexport function* getCopyOnEnterAttributes(schema, allAttributes) {\n    for (const attribute of allAttributes) {\n        if (attribute && schema.getAttributeProperties(attribute[0]).copyOnEnter) {\n            yield attribute;\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/entercommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\nimport { getCopyOnEnterAttributes } from './utils';\n/**\n * Enter command used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> keystroke.\n */\nexport default class EnterCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        this.editor.model.change(writer => {\n            this.enterBlock(writer);\n            this.fire('afterExecute', { writer });\n        });\n    }\n    /**\n     * Splits a block where the document selection is placed, in the way how the <kbd>Enter</kbd> key is expected to work:\n     *\n     * ```\n     * <p>Foo[]bar</p>   ->   <p>Foo</p><p>[]bar</p>\n     * <p>Foobar[]</p>   ->   <p>Foobar</p><p>[]</p>\n     * <p>Fo[ob]ar</p>   ->   <p>Fo</p><p>[]ar</p>\n     * ```\n     *\n     * In some cases, the split will not happen:\n     *\n     * ```\n     * // The selection parent is a limit element:\n     * <figcaption>A[bc]d</figcaption>   ->   <figcaption>A[]d</figcaption>\n     *\n     * // The selection spans over multiple elements:\n     * <h>x[x</h><p>y]y<p>   ->   <h>x</h><p>[]y</p>\n     * ```\n     *\n     * @param writer Writer to use when performing the enter action.\n     * @returns Boolean indicating if the block was split.\n     */\n    enterBlock(writer) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const schema = model.schema;\n        const isSelectionEmpty = selection.isCollapsed;\n        const range = selection.getFirstRange();\n        const startElement = range.start.parent;\n        const endElement = range.end.parent;\n        // Don't touch the roots and other limit elements.\n        if (schema.isLimit(startElement) || schema.isLimit(endElement)) {\n            // Delete the selected content but only if inside a single limit element.\n            // Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\n            // This is an edge case and it's hard to tell what should actually happen because such a selection\n            // is not entirely valid.\n            if (!isSelectionEmpty && startElement == endElement) {\n                model.deleteContent(selection);\n            }\n            return false;\n        }\n        if (isSelectionEmpty) {\n            const attributesToCopy = getCopyOnEnterAttributes(writer.model.schema, selection.getAttributes());\n            splitBlock(writer, range.start);\n            writer.setSelectionAttribute(attributesToCopy);\n            return true;\n        }\n        else {\n            const leaveUnmerged = !(range.start.isAtStart && range.end.isAtEnd);\n            const isContainedWithinOneElement = (startElement == endElement);\n            model.deleteContent(selection, { leaveUnmerged });\n            if (leaveUnmerged) {\n                // Partially selected elements.\n                //\n                // <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x</h><h>^x</h>\n                if (isContainedWithinOneElement) {\n                    splitBlock(writer, selection.focus);\n                    return true;\n                }\n                // Selection over multiple elements.\n                //\n                // <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n                else {\n                    writer.setSelection(endElement, 0);\n                }\n            }\n        }\n        return false;\n    }\n}\nfunction splitBlock(writer, splitPos) {\n    writer.split(splitPos);\n    writer.setSelection(splitPos.parent.nextSibling, 0);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/enterobserver\n */\nimport { Observer, DomEventData, BubblingEventInfo } from '@ckeditor/ckeditor5-engine';\nimport { env } from '@ckeditor/ckeditor5-utils';\nconst ENTER_EVENT_TYPES = {\n    insertParagraph: { isSoft: false },\n    insertLineBreak: { isSoft: true }\n};\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter `Document#enter`} event.\n */\nexport default class EnterObserver extends Observer {\n    /**\n     * @inheritDoc\n     */\n    constructor(view) {\n        super(view);\n        const doc = this.document;\n        let shiftPressed = false;\n        doc.on('keydown', (evt, data) => {\n            shiftPressed = data.shiftKey;\n        });\n        doc.on('beforeinput', (evt, data) => {\n            if (!this.isEnabled) {\n                return;\n            }\n            let inputType = data.inputType;\n            // See https://github.com/ckeditor/ckeditor5/issues/13321.\n            if (env.isSafari && shiftPressed && inputType == 'insertParagraph') {\n                inputType = 'insertLineBreak';\n            }\n            const domEvent = data.domEvent;\n            const enterEventSpec = ENTER_EVENT_TYPES[inputType];\n            if (!enterEventSpec) {\n                return;\n            }\n            const event = new BubblingEventInfo(doc, 'enter', data.targetRanges[0]);\n            doc.fire(event, new DomEventData(view, domEvent, {\n                isSoft: enterEventSpec.isSoft\n            }));\n            // Stop `beforeinput` event if `enter` event was stopped.\n            // https://github.com/ckeditor/ckeditor5/issues/753\n            if (event.stop.called) {\n                evt.stop();\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    observe() { }\n    /**\n     * @inheritDoc\n     */\n    stopObserving() { }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/enter\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport EnterCommand from './entercommand';\nimport EnterObserver from './enterobserver';\n/**\n * This plugin handles the <kbd>Enter</kbd> keystroke (hard line break) in the editor.\n *\n * See also the {@link module:enter/shiftenter~ShiftEnter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n */\nexport default class Enter extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Enter';\n    }\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        view.addObserver(EnterObserver);\n        editor.commands.add('enter', new EnterCommand(editor));\n        this.listenTo(viewDocument, 'enter', (evt, data) => {\n            // When not in composition, we handle the action, so prevent the default one.\n            // When in composition, it's the browser who modify the DOM (renderer is disabled).\n            if (!viewDocument.isComposing) {\n                data.preventDefault();\n            }\n            // The soft enter key is handled by the ShiftEnter plugin.\n            if (data.isSoft) {\n                return;\n            }\n            editor.execute('enter');\n            view.scrollToTheSelection();\n        }, { priority: 'low' });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/shiftentercommand\n */\nimport { Command } from '@ckeditor/ckeditor5-core';\nimport { getCopyOnEnterAttributes } from './utils';\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n */\nexport default class ShiftEnterCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    execute() {\n        const model = this.editor.model;\n        const doc = model.document;\n        model.change(writer => {\n            softBreakAction(model, writer, doc.selection);\n            this.fire('afterExecute', { writer });\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.isEnabled = isEnabled(model.schema, doc.selection);\n    }\n}\n/**\n * Checks whether the ShiftEnter command should be enabled in the specified selection.\n */\nfunction isEnabled(schema, selection) {\n    // At this moment it is okay to support single range selections only.\n    // But in the future we may need to change that.\n    if (selection.rangeCount > 1) {\n        return false;\n    }\n    const anchorPos = selection.anchor;\n    // Check whether the break element can be inserted in the current selection anchor.\n    if (!anchorPos || !schema.checkChild(anchorPos, 'softBreak')) {\n        return false;\n    }\n    const range = selection.getFirstRange();\n    const startElement = range.start.parent;\n    const endElement = range.end.parent;\n    // Do not modify the content if selection is cross-limit elements.\n    if ((isInsideLimitElement(startElement, schema) || isInsideLimitElement(endElement, schema)) && startElement !== endElement) {\n        return false;\n    }\n    return true;\n}\n/**\n * Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n */\nfunction softBreakAction(model, writer, selection) {\n    const isSelectionEmpty = selection.isCollapsed;\n    const range = selection.getFirstRange();\n    const startElement = range.start.parent;\n    const endElement = range.end.parent;\n    const isContainedWithinOneElement = (startElement == endElement);\n    if (isSelectionEmpty) {\n        const attributesToCopy = getCopyOnEnterAttributes(model.schema, selection.getAttributes());\n        insertBreak(model, writer, range.end);\n        writer.removeSelectionAttribute(selection.getAttributeKeys());\n        writer.setSelectionAttribute(attributesToCopy);\n    }\n    else {\n        const leaveUnmerged = !(range.start.isAtStart && range.end.isAtEnd);\n        model.deleteContent(selection, { leaveUnmerged });\n        // Selection within one element:\n        //\n        // <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n        if (isContainedWithinOneElement) {\n            insertBreak(model, writer, selection.focus);\n        }\n        // Selection over multiple elements.\n        //\n        // <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n        //\n        // We chose not to insert a line break in this case because:\n        //\n        // * it's not a very common scenario,\n        // * it actually surprised me when I saw the \"expected behavior\" in real life.\n        //\n        // It's ok if the user will need to be more specific where they want the <br> to be inserted.\n        else {\n            // Move the selection to the 2nd element (last step of the example above).\n            if (leaveUnmerged) {\n                writer.setSelection(endElement, 0);\n            }\n        }\n    }\n}\nfunction insertBreak(model, writer, position) {\n    const breakLineElement = writer.createElement('softBreak');\n    model.insertContent(breakLineElement, position);\n    writer.setSelection(breakLineElement, 'after');\n}\n/**\n * Checks whether the specified `element` is a child of the limit element.\n *\n * Checking whether the `<p>` element is inside a limit element:\n *   - `<$root><p>Text.</p></$root> => false`\n *   - `<$root><limitElement><p>Text</p></limitElement></$root> => true`\n */\nfunction isInsideLimitElement(element, schema) {\n    // `$root` is a limit element but in this case is an invalid element.\n    if (element.is('rootElement')) {\n        return false;\n    }\n    return schema.isLimit(element) || isInsideLimitElement(element.parent, schema);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module enter/shiftenter\n */\nimport ShiftEnterCommand from './shiftentercommand';\nimport EnterObserver from './enterobserver';\nimport { Plugin } from '@ckeditor/ckeditor5-core';\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n */\nexport default class ShiftEnter extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ShiftEnter';\n    }\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        // Configure the schema.\n        schema.register('softBreak', {\n            allowWhere: '$text',\n            isInline: true\n        });\n        // Configure converters.\n        conversion.for('upcast')\n            .elementToElement({\n            model: 'softBreak',\n            view: 'br'\n        });\n        conversion.for('downcast')\n            .elementToElement({\n            model: 'softBreak',\n            view: (modelElement, { writer }) => writer.createEmptyElement('br')\n        });\n        view.addObserver(EnterObserver);\n        editor.commands.add('shiftEnter', new ShiftEnterCommand(editor));\n        this.listenTo(viewDocument, 'enter', (evt, data) => {\n            // When not in composition, we handle the action, so prevent the default one.\n            // When in composition, it's the browser who modify the DOM (renderer is disabled).\n            if (!viewDocument.isComposing) {\n                data.preventDefault();\n            }\n            // The hard enter key is handled by the Enter plugin.\n            if (!data.isSoft) {\n                return;\n            }\n            editor.execute('shiftEnter');\n            view.scrollToTheSelection();\n        }, { priority: 'low' });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
