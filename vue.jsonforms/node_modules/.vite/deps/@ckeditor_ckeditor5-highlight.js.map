{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-highlight/src/highlightcommand.js", "../../@ckeditor/ckeditor5-highlight/src/highlightediting.js", "../../@ckeditor/ckeditor5-highlight/src/highlightui.js", "../../@ckeditor/ckeditor5-highlight/src/highlight.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module highlight/highlightcommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The highlight command. It is used by the {@link module:highlight/highlightediting~HighlightEditing highlight feature}\n * to apply the text highlighting.\n *\n * ```ts\n * editor.execute( 'highlight', { value: 'greenMarker' } );\n * ```\n *\n * **Note**: Executing the command without a value removes the attribute from the model. If the selection is collapsed\n * inside a text with the highlight attribute, the command will remove the attribute from the entire range\n * of that text.\n */\nexport default class HighlightCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = doc.selection.getAttribute('highlight');\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, 'highlight');\n    }\n    /**\n     * Executes the command.\n     *\n     * @param options Options for the executed command.\n     * @param options.value The value to apply.\n     *\n     * @fires execute\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = document.selection;\n        const highlighter = options.value;\n        model.change(writer => {\n            if (selection.isCollapsed) {\n                const position = selection.getFirstPosition();\n                // When selection is inside text with `highlight` attribute.\n                if (selection.hasAttribute('highlight')) {\n                    // Find the full highlighted range.\n                    const isSameHighlight = (value) => {\n                        return value.item.hasAttribute('highlight') && value.item.getAttribute('highlight') === this.value;\n                    };\n                    const highlightStart = position.getLastMatchingPosition(isSameHighlight, { direction: 'backward' });\n                    const highlightEnd = position.getLastMatchingPosition(isSameHighlight);\n                    const highlightRange = writer.createRange(highlightStart, highlightEnd);\n                    // Then depending on current value...\n                    if (!highlighter || this.value === highlighter) {\n                        // ...remove attribute when passing highlighter different then current or executing \"eraser\".\n                        // If we're at the end of the highlighted range, we don't want to remove highlight of the range.\n                        if (!position.isEqual(highlightEnd)) {\n                            writer.removeAttribute('highlight', highlightRange);\n                        }\n                        writer.removeSelectionAttribute('highlight');\n                    }\n                    else {\n                        // ...update `highlight` value.\n                        // If we're at the end of the highlighted range, we don't want to change the highlight of the range.\n                        if (!position.isEqual(highlightEnd)) {\n                            writer.setAttribute('highlight', highlighter, highlightRange);\n                        }\n                        writer.setSelectionAttribute('highlight', highlighter);\n                    }\n                }\n                else if (highlighter) {\n                    writer.setSelectionAttribute('highlight', highlighter);\n                }\n            }\n            else {\n                const ranges = model.schema.getValidRanges(selection.getRanges(), 'highlight');\n                for (const range of ranges) {\n                    if (highlighter) {\n                        writer.setAttribute('highlight', highlighter, range);\n                    }\n                    else {\n                        writer.removeAttribute('highlight', range);\n                    }\n                }\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module highlight/highlightediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport HighlightCommand from './highlightcommand';\n/**\n * The highlight editing feature. It introduces the {@link module:highlight/highlightcommand~HighlightCommand command} and the `highlight`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<mark>` element with a `class` attribute (`<mark class=\"marker-green\">...</mark>`) depending\n * on the {@link module:highlight/highlightconfig~HighlightConfig configuration}.\n */\nexport default class HighlightEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'HighlightEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('highlight', {\n            options: [\n                {\n                    model: 'yellowMarker',\n                    class: 'marker-yellow',\n                    title: 'Yellow marker',\n                    color: 'var(--ck-highlight-marker-yellow)',\n                    type: 'marker'\n                },\n                {\n                    model: 'greenMarker',\n                    class: 'marker-green',\n                    title: 'Green marker',\n                    color: 'var(--ck-highlight-marker-green)',\n                    type: 'marker'\n                },\n                {\n                    model: 'pinkMarker',\n                    class: 'marker-pink',\n                    title: 'Pink marker',\n                    color: 'var(--ck-highlight-marker-pink)',\n                    type: 'marker'\n                },\n                {\n                    model: 'blueMarker',\n                    class: 'marker-blue',\n                    title: 'Blue marker',\n                    color: 'var(--ck-highlight-marker-blue)',\n                    type: 'marker'\n                },\n                {\n                    model: 'redPen',\n                    class: 'pen-red',\n                    title: 'Red pen',\n                    color: 'var(--ck-highlight-pen-red)',\n                    type: 'pen'\n                },\n                {\n                    model: 'greenPen',\n                    class: 'pen-green',\n                    title: 'Green pen',\n                    color: 'var(--ck-highlight-pen-green)',\n                    type: 'pen'\n                }\n            ]\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Allow highlight attribute on text nodes.\n        editor.model.schema.extend('$text', { allowAttributes: 'highlight' });\n        const options = editor.config.get('highlight.options');\n        // Set-up the two-way conversion.\n        editor.conversion.attributeToElement(_buildDefinition(options));\n        editor.commands.add('highlight', new HighlightCommand(editor));\n    }\n}\n/**\n * Converts the options array to a converter definition.\n *\n * @param options An array with configured options.\n */\nfunction _buildDefinition(options) {\n    const definition = {\n        model: {\n            key: 'highlight',\n            values: []\n        },\n        view: {}\n    };\n    for (const option of options) {\n        definition.model.values.push(option.model);\n        definition.view[option.model] = {\n            name: 'mark',\n            classes: option.class\n        };\n    }\n    return definition;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module highlight/highlightui\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, SplitButtonView, ToolbarSeparatorView, createDropdown, addToolbarToDropdown } from 'ckeditor5/src/ui';\nimport markerIcon from './../theme/icons/marker.svg';\nimport penIcon from './../theme/icons/pen.svg';\nimport './../theme/highlight.css';\n/**\n * The default highlight UI plugin. It introduces:\n *\n * * The `'highlight'` dropdown,\n * * The `'removeHighlight'` and `'highlight:*'` buttons.\n *\n * The default configuration includes the following buttons:\n *\n * * `'highlight:yellowMarker'`\n * * `'highlight:greenMarker'`\n * * `'highlight:pinkMarker'`\n * * `'highlight:blueMarker'`\n * * `'highlight:redPen'`\n * * `'highlight:greenPen'`\n *\n * See the {@link module:highlight/highlightconfig~HighlightConfig#options configuration} to learn more\n * about the defaults.\n */\nexport default class HighlightUI extends Plugin {\n    /**\n     * Returns the localized option titles provided by the plugin.\n     *\n     * The following localized titles corresponding with default\n     * {@link module:highlight/highlightconfig~HighlightConfig#options} are available:\n     *\n     * * `'Yellow marker'`,\n     * * `'Green marker'`,\n     * * `'Pink marker'`,\n     * * `'Blue marker'`,\n     * * `'Red pen'`,\n     * * `'Green pen'`.\n     */\n    get localizedOptionTitles() {\n        const t = this.editor.t;\n        return {\n            'Yellow marker': t('Yellow marker'),\n            'Green marker': t('Green marker'),\n            'Pink marker': t('Pink marker'),\n            'Blue marker': t('Blue marker'),\n            'Red pen': t('Red pen'),\n            'Green pen': t('Green pen')\n        };\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'HighlightUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const options = this.editor.config.get('highlight.options');\n        for (const option of options) {\n            this._addHighlighterButton(option);\n        }\n        this._addRemoveHighlightButton();\n        this._addDropdown(options);\n    }\n    /**\n     * Creates the \"Remove highlight\" button.\n     */\n    _addRemoveHighlightButton() {\n        const t = this.editor.t;\n        const command = this.editor.commands.get('highlight');\n        this._addButton('removeHighlight', t('Remove highlight'), icons.eraser, null, button => {\n            button.bind('isEnabled').to(command, 'isEnabled');\n        });\n    }\n    /**\n     * Creates a toolbar button from the provided highlight option.\n     */\n    _addHighlighterButton(option) {\n        const command = this.editor.commands.get('highlight');\n        // TODO: change naming\n        this._addButton('highlight:' + option.model, option.title, getIconForType(option.type), option.model, decorateHighlightButton);\n        function decorateHighlightButton(button) {\n            button.bind('isEnabled').to(command, 'isEnabled');\n            button.bind('isOn').to(command, 'value', value => value === option.model);\n            button.iconView.fillColor = option.color;\n            button.isToggleable = true;\n        }\n    }\n    /**\n     * Internal method for creating highlight buttons.\n     *\n     * @param name The name of the button.\n     * @param label The label for the button.\n     * @param icon The button icon.\n     * @param value The `value` property passed to the executed command.\n     * @param decorateButton A callback getting ButtonView instance so that it can be further customized.\n     */\n    _addButton(name, label, icon, value, decorateButton) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const buttonView = new ButtonView(locale);\n            const localized = this.localizedOptionTitles[label] ? this.localizedOptionTitles[label] : label;\n            buttonView.set({\n                label: localized,\n                icon,\n                tooltip: true\n            });\n            buttonView.on('execute', () => {\n                editor.execute('highlight', { value });\n                editor.editing.view.focus();\n            });\n            // Add additional behavior for buttonView.\n            decorateButton(buttonView);\n            return buttonView;\n        });\n    }\n    /**\n     * Creates the split button dropdown UI from the provided highlight options.\n     */\n    _addDropdown(options) {\n        const editor = this.editor;\n        const t = editor.t;\n        const componentFactory = editor.ui.componentFactory;\n        const startingHighlighter = options[0];\n        const optionsMap = options.reduce((retVal, option) => {\n            retVal[option.model] = option;\n            return retVal;\n        }, {});\n        componentFactory.add('highlight', locale => {\n            const command = editor.commands.get('highlight');\n            const dropdownView = createDropdown(locale, SplitButtonView);\n            const splitButtonView = dropdownView.buttonView;\n            splitButtonView.set({\n                label: t('Highlight'),\n                tooltip: true,\n                // Holds last executed highlighter.\n                lastExecuted: startingHighlighter.model,\n                // Holds current highlighter to execute (might be different then last used).\n                commandValue: startingHighlighter.model,\n                isToggleable: true\n            });\n            // Dropdown button changes to selection (command.value):\n            // - If selection is in highlight it get active highlight appearance (icon, color) and is activated.\n            // - Otherwise it gets appearance (icon, color) of last executed highlight.\n            splitButtonView.bind('icon').to(command, 'value', value => getIconForType(getActiveOption(value, 'type')));\n            splitButtonView.bind('color').to(command, 'value', value => getActiveOption(value, 'color'));\n            splitButtonView.bind('commandValue').to(command, 'value', value => getActiveOption(value, 'model'));\n            splitButtonView.bind('isOn').to(command, 'value', value => !!value);\n            splitButtonView.delegate('execute').to(dropdownView);\n            // Create buttons array.\n            const buttonsCreator = () => {\n                const buttons = options.map(option => {\n                    // Get existing highlighter button.\n                    const buttonView = componentFactory.create('highlight:' + option.model);\n                    // Update lastExecutedHighlight on execute.\n                    this.listenTo(buttonView, 'execute', () => {\n                        dropdownView.buttonView.set({ lastExecuted: option.model });\n                    });\n                    return buttonView;\n                });\n                // Add separator and eraser buttons to dropdown.\n                buttons.push(new ToolbarSeparatorView());\n                buttons.push(componentFactory.create('removeHighlight'));\n                return buttons;\n            };\n            // Make toolbar button enabled when any button in dropdown is enabled before adding separator and eraser.\n            dropdownView.bind('isEnabled').to(command, 'isEnabled');\n            addToolbarToDropdown(dropdownView, buttonsCreator, {\n                enableActiveItemFocusOnDropdownOpen: true,\n                ariaLabel: t('Text highlight toolbar')\n            });\n            bindToolbarIconStyleToActiveColor(dropdownView);\n            // Execute current action from dropdown's split button action button.\n            splitButtonView.on('execute', () => {\n                editor.execute('highlight', { value: splitButtonView.commandValue });\n            });\n            // Focus the editable after executing the command.\n            // It overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n            this.listenTo(dropdownView, 'execute', () => {\n                editor.editing.view.focus();\n            });\n            /**\n             * Returns active highlighter option depending on current command value.\n             * If current is not set or it is the same as last execute this method will return the option key (like icon or color)\n             * of last executed highlighter. Otherwise it will return option key for current one.\n             */\n            function getActiveOption(current, key) {\n                const whichHighlighter = !current ||\n                    current === splitButtonView.lastExecuted ? splitButtonView.lastExecuted : current;\n                return optionsMap[whichHighlighter][key];\n            }\n            return dropdownView;\n        });\n    }\n}\n/**\n * Extends split button icon style to reflect last used button style.\n */\nfunction bindToolbarIconStyleToActiveColor(dropdownView) {\n    const actionView = dropdownView.buttonView.actionView;\n    actionView.iconView.bind('fillColor').to(dropdownView.buttonView, 'color');\n}\n/**\n * Returns icon for given highlighter type.\n */\nfunction getIconForType(type) {\n    return type === 'marker' ? markerIcon : penIcon;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module highlight/highlight\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport HighlightEditing from './highlightediting';\nimport HighlightUI from './highlightui';\n/**\n * The highlight plugin.\n *\n * For a detailed overview, check the {@glink features/highlight Highlight feature} documentation.\n *\n * This is a \"glue\" plugin which loads the {@link module:highlight/highlightediting~HighlightEditing} and\n * {@link module:highlight/highlightui~HighlightUI} plugins.\n */\nexport default class Highlight extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [HighlightEditing, HighlightUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Highlight';\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
