{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-font/src/fontcommand.js", "../../@ckeditor/ckeditor5-font/src/utils.js", "../../@ckeditor/ckeditor5-font/src/fontfamily/fontfamilycommand.js", "../../@ckeditor/ckeditor5-font/src/fontfamily/utils.js", "../../@ckeditor/ckeditor5-font/src/fontfamily/fontfamilyediting.js", "../../@ckeditor/ckeditor5-font/src/fontfamily/fontfamilyui.js", "../../@ckeditor/ckeditor5-font/src/fontfamily.js", "../../@ckeditor/ckeditor5-font/src/fontsize/fontsizecommand.js", "../../@ckeditor/ckeditor5-font/src/fontsize/utils.js", "../../@ckeditor/ckeditor5-font/src/fontsize/fontsizeediting.js", "../../@ckeditor/ckeditor5-font/src/fontsize/fontsizeui.js", "../../@ckeditor/ckeditor5-font/src/fontsize.js", "../../@ckeditor/ckeditor5-font/src/fontcolor/fontcolorcommand.js", "../../@ckeditor/ckeditor5-font/src/fontcolor/fontcolorediting.js", "../../@ckeditor/ckeditor5-font/src/ui/colorui.js", "../../@ckeditor/ckeditor5-font/src/fontcolor/fontcolorui.js", "../../@ckeditor/ckeditor5-font/src/fontcolor.js", "../../@ckeditor/ckeditor5-font/src/fontbackgroundcolor/fontbackgroundcolorcommand.js", "../../@ckeditor/ckeditor5-font/src/fontbackgroundcolor/fontbackgroundcolorediting.js", "../../@ckeditor/ckeditor5-font/src/fontbackgroundcolor/fontbackgroundcolorui.js", "../../@ckeditor/ckeditor5-font/src/fontbackgroundcolor.js", "../../@ckeditor/ckeditor5-font/src/font.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontcommand\n */\nimport { Command } from 'ckeditor5/src/core';\n/**\n * The base font command.\n */\nexport default class FontCommand extends Command {\n    /**\n     * Creates an instance of the command.\n     *\n     * @param editor Editor instance.\n     * @param attributeKey The name of a model attribute on which this command operates.\n     */\n    constructor(editor, attributeKey) {\n        super(editor);\n        this.attributeKey = attributeKey;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = doc.selection.getAttribute(this.attributeKey);\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);\n    }\n    /**\n     * Executes the command. Applies the `value` of the {@link #attributeKey} to the selection.\n     * If no `value` is passed, it removes the attribute from the selection.\n     *\n     * @param options Options for the executed command.\n     * @param options.value The value to apply.\n     * @fires execute\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = document.selection;\n        const value = options.value;\n        const batch = options.batch;\n        const updateAttribute = (writer) => {\n            if (selection.isCollapsed) {\n                if (value) {\n                    writer.setSelectionAttribute(this.attributeKey, value);\n                }\n                else {\n                    writer.removeSelectionAttribute(this.attributeKey);\n                }\n            }\n            else {\n                const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);\n                for (const range of ranges) {\n                    if (value) {\n                        writer.setAttribute(this.attributeKey, value, range);\n                    }\n                    else {\n                        writer.removeAttribute(this.attributeKey, range);\n                    }\n                }\n            }\n        };\n        // In some scenarios, you may want to use a single undo step for multiple changes (e.g. in color picker).\n        if (batch) {\n            model.enqueueChange(batch, writer => {\n                updateAttribute(writer);\n            });\n        }\n        else {\n            model.change(writer => {\n                updateAttribute(writer);\n            });\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { ColorSelectorView } from 'ckeditor5/src/ui';\n/**\n * The name of the font size plugin.\n */\nexport const FONT_SIZE = 'fontSize';\n/**\n * The name of the font family plugin.\n */\nexport const FONT_FAMILY = 'fontFamily';\n/**\n * The name of the font color plugin.\n */\nexport const FONT_COLOR = 'fontColor';\n/**\n * The name of the font background color plugin.\n */\nexport const FONT_BACKGROUND_COLOR = 'fontBackgroundColor';\n/**\n * Builds a proper converter definition out of input data.\n */\nexport function buildDefinition(modelAttributeKey, options) {\n    const definition = {\n        model: {\n            key: modelAttributeKey,\n            values: []\n        },\n        view: {},\n        upcastAlso: {}\n    };\n    for (const option of options) {\n        definition.model.values.push(option.model);\n        definition.view[option.model] = option.view;\n        if (option.upcastAlso) {\n            definition.upcastAlso[option.model] = option.upcastAlso;\n        }\n    }\n    return definition;\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for upcasting data to the model.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n */\nexport function renderUpcastAttribute(styleAttr) {\n    return (viewElement) => normalizeColorCode(viewElement.getStyle(styleAttr));\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for downcasting a color attribute to a `<span>` element.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n */\nexport function renderDowncastElement(styleAttr) {\n    return (modelAttributeValue, { writer }) => writer.createAttributeElement('span', {\n        style: `${styleAttr}:${modelAttributeValue}`\n    }, { priority: 7 });\n}\n/**\n * A helper that adds {@link module:ui/colorselector/colorselectorview~ColorSelectorView} to the color dropdown with proper initial values.\n *\n * @param config.dropdownView The dropdown view to which a {@link module:ui/colorselector/colorselectorview~ColorSelectorView}\n * will be added.\n * @param config.colors An array with definitions representing colors to be displayed in the color selector.\n * @param config.removeButtonLabel The label for the button responsible for removing the color.\n * @param config.documentColorsLabel The label for the section with document colors.\n * @param config.documentColorsCount The number of document colors inside the dropdown.\n * @param config.colorPickerViewConfig Configuration of the color picker view.\n * @returns The new color selector view.\n */\nexport function addColorSelectorToDropdown({ dropdownView, colors, columns, removeButtonLabel, colorPickerLabel, documentColorsLabel, documentColorsCount, colorPickerViewConfig }) {\n    const locale = dropdownView.locale;\n    const colorSelectorView = new ColorSelectorView(locale, {\n        colors,\n        columns,\n        removeButtonLabel,\n        colorPickerLabel,\n        documentColorsLabel,\n        documentColorsCount,\n        colorPickerViewConfig\n    });\n    dropdownView.colorSelectorView = colorSelectorView;\n    dropdownView.panelView.children.add(colorSelectorView);\n    return colorSelectorView;\n}\n/**\n * Fixes the color value string.\n */\nfunction normalizeColorCode(value) {\n    return value.replace(/\\s/g, '');\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport FontCommand from '../fontcommand';\nimport { FONT_FAMILY } from '../utils';\n/**\n * The font family command. It is used by {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing}\n * to apply the font family.\n *\n * ```ts\n * editor.execute( 'fontFamily', { value: 'Arial' } );\n * ```\n *\n * **Note**: Executing the command without the value removes the attribute from the model.\n */\nexport default class FontFamilyCommand extends FontCommand {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor, FONT_FAMILY);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontfamily/utils\n */\n/**\n * Normalizes the {@link module:font/fontconfig~FontFamilyConfig#options configuration options}\n * to the {@link module:font/fontconfig~FontFamilyOption} format.\n *\n * @param configuredOptions An array of options taken from the configuration.\n */\nexport function normalizeOptions(configuredOptions) {\n    // Convert options to objects.\n    return configuredOptions\n        .map(getOptionDefinition)\n        // Filter out undefined values that `getOptionDefinition` might return.\n        .filter(option => option !== undefined);\n}\n/**\n * Returns an option definition either created from string shortcut.\n * If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n *\n */\nfunction getOptionDefinition(option) {\n    // Treat any object as full item definition provided by user in configuration.\n    if (typeof option === 'object') {\n        return option;\n    }\n    // Handle 'default' string as a special case. It will be used to remove the fontFamily attribute.\n    if (option === 'default') {\n        return {\n            title: 'Default',\n            model: undefined\n        };\n    }\n    // Ignore values that we cannot parse to a definition.\n    if (typeof option !== 'string') {\n        return undefined;\n    }\n    // Return font family definition from font string.\n    return generateFontPreset(option);\n}\n/**\n * Creates a predefined preset for pixel size. It deconstructs font-family like string into full configuration option.\n * A font definition is passed as coma delimited set of font family names. Font names might be quoted.\n *\n * @param fontDefinition A font definition form configuration.\n */\nfunction generateFontPreset(fontDefinition) {\n    // Remove quotes from font names. They will be normalized later.\n    const fontNames = fontDefinition.replace(/\"|'/g, '').split(',');\n    // The first matched font name will be used as dropdown list item title and as model value.\n    const firstFontName = fontNames[0];\n    // CSS-compatible font names.\n    const cssFontNames = fontNames.map(normalizeFontNameForCSS).join(', ');\n    return {\n        title: firstFontName,\n        model: cssFontNames,\n        view: {\n            name: 'span',\n            styles: {\n                'font-family': cssFontNames\n            },\n            priority: 7\n        }\n    };\n}\n/**\n * Normalizes font name for the style attribute. It adds braces (') if font name contains spaces.\n */\nfunction normalizeFontNameForCSS(fontName) {\n    fontName = fontName.trim();\n    // Compound font names should be quoted.\n    if (fontName.indexOf(' ') > 0) {\n        fontName = `'${fontName}'`;\n    }\n    return fontName;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontfamily/fontfamilyediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport FontFamilyCommand from './fontfamilycommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_FAMILY } from '../utils';\n/**\n * The font family editing feature.\n *\n * It introduces the {@link module:font/fontfamily/fontfamilycommand~FontFamilyCommand command} and\n * the `fontFamily` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as an inline `<span>` element (`<span style=\"font-family: Arial\">`),\n * depending on the {@link module:font/fontconfig~FontFamilyConfig configuration}.\n */\nexport default class FontFamilyEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontFamilyEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        // Define default configuration using font families shortcuts.\n        editor.config.define(FONT_FAMILY, {\n            options: [\n                'default',\n                'Arial, Helvetica, sans-serif',\n                'Courier New, Courier, monospace',\n                'Georgia, serif',\n                'Lucida Sans Unicode, Lucida Grande, sans-serif',\n                'Tahoma, Geneva, sans-serif',\n                'Times New Roman, Times, serif',\n                'Trebuchet MS, Helvetica, sans-serif',\n                'Verdana, Geneva, sans-serif'\n            ],\n            supportAllValues: false\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Allow fontFamily attribute on text nodes.\n        editor.model.schema.extend('$text', { allowAttributes: FONT_FAMILY });\n        editor.model.schema.setAttributeProperties(FONT_FAMILY, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        // Get configured font family options without \"default\" option.\n        const options = normalizeOptions(editor.config.get('fontFamily.options')).filter(item => item.model);\n        const definition = buildDefinition(FONT_FAMILY, options);\n        // Set-up the two-way conversion.\n        if (editor.config.get('fontFamily.supportAllValues')) {\n            this._prepareAnyValueConverters();\n            this._prepareCompatibilityConverter();\n        }\n        else {\n            editor.conversion.attributeToElement(definition);\n        }\n        editor.commands.add(FONT_FAMILY, new FontFamilyCommand(editor));\n    }\n    /**\n     * These converters enable keeping any value found as `style=\"font-family: *\"` as a value of an attribute on a text even\n     * if it is not defined in the plugin configuration.\n     */\n    _prepareAnyValueConverters() {\n        const editor = this.editor;\n        editor.conversion.for('downcast').attributeToElement({\n            model: FONT_FAMILY,\n            view: (attributeValue, { writer }) => {\n                return writer.createAttributeElement('span', { style: 'font-family:' + attributeValue }, { priority: 7 });\n            }\n        });\n        editor.conversion.for('upcast').elementToAttribute({\n            model: {\n                key: FONT_FAMILY,\n                value: (viewElement) => viewElement.getStyle('font-family')\n            },\n            view: {\n                name: 'span',\n                styles: {\n                    'font-family': /.*/\n                }\n            }\n        });\n    }\n    /**\n     * Adds support for legacy `<font face=\"..\">` formatting.\n     */\n    _prepareCompatibilityConverter() {\n        const editor = this.editor;\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'font',\n                attributes: {\n                    'face': /.*/\n                }\n            },\n            model: {\n                key: FONT_FAMILY,\n                value: (viewElement) => viewElement.getAttribute('face')\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontfamily/fontfamilyui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { normalizeOptions } from './utils';\nimport { FONT_FAMILY } from '../utils';\nimport fontFamilyIcon from '../../theme/icons/font-family.svg';\n/**\n * The font family UI plugin. It introduces the `'fontFamily'` dropdown.\n */\nexport default class FontFamilyUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontFamilyUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = this._getLocalizedOptions();\n        const command = editor.commands.get(FONT_FAMILY);\n        const accessibleLabel = t('Font Family');\n        // Register UI component.\n        editor.ui.componentFactory.add(FONT_FAMILY, locale => {\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, () => _prepareListOptions(options, command), {\n                role: 'menu',\n                ariaLabel: accessibleLabel\n            });\n            dropdownView.buttonView.set({\n                label: accessibleLabel,\n                icon: fontFamilyIcon,\n                tooltip: true\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: 'ck-font-family-dropdown'\n                }\n            });\n            dropdownView.bind('isEnabled').to(command);\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName, { value: evt.source.commandParam });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n    /**\n     * Returns options as defined in `config.fontFamily.options` but processed to account for\n     * editor localization, i.e. to display {@link module:font/fontconfig~FontFamilyOption}\n     * in the correct language.\n     *\n     * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n     * when the user configuration is defined because the editor does not exist yet.\n     */\n    _getLocalizedOptions() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = normalizeOptions((editor.config.get(FONT_FAMILY)).options);\n        return options.map(option => {\n            // The only title to localize is \"Default\" others are font names.\n            if (option.title === 'Default') {\n                option.title = t('Default');\n            }\n            return option;\n        });\n    }\n}\n/**\n * Prepares FontFamily dropdown items.\n */\nfunction _prepareListOptions(options, command) {\n    const itemDefinitions = new Collection();\n    // Create dropdown items.\n    for (const option of options) {\n        const def = {\n            type: 'button',\n            model: new Model({\n                commandName: FONT_FAMILY,\n                commandParam: option.model,\n                label: option.title,\n                role: 'menuitemradio',\n                withText: true\n            })\n        };\n        def.model.bind('isOn').to(command, 'value', value => {\n            // \"Default\" or check in strict font-family converters mode.\n            if (value === option.model) {\n                return true;\n            }\n            if (!value || !option.model) {\n                return false;\n            }\n            return value.split(',')[0].replace(/'/g, '').toLowerCase() === option.model.toLowerCase();\n        });\n        // Try to set a dropdown list item style.\n        if (option.view && typeof option.view !== 'string' && option.view.styles) {\n            def.model.set('labelStyle', `font-family: ${option.view.styles['font-family']}`);\n        }\n        itemDefinitions.add(def);\n    }\n    return itemDefinitions;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontfamily\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport FontFamilyEditing from './fontfamily/fontfamilyediting';\nimport FontFamilyUI from './fontfamily/fontfamilyui';\n/**\n * The font family plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentatiom\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing} and\n * {@link module:font/fontfamily/fontfamilyui~FontFamilyUI} features in the editor.\n */\nexport default class FontFamily extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [FontFamilyEditing, FontFamilyUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontFamily';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport FontCommand from '../fontcommand';\nimport { FONT_SIZE } from '../utils';\n/**\n * The font size command. It is used by {@link module:font/fontsize/fontsizeediting~FontSizeEditing}\n * to apply the font size.\n *\n * ```ts\n * editor.execute( 'fontSize', { value: 'small' } );\n * ```\n *\n * **Note**: Executing the command without the value removes the attribute from the model.\n */\nexport default class FontSizeCommand extends FontCommand {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor, FONT_SIZE);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontsize/utils\n */\nimport { CKEditorError } from 'ckeditor5/src/utils';\n/**\n * Normalizes and translates the {@link module:font/fontconfig~FontSizeConfig#options configuration options}\n * to the {@link module:font/fontconfig~FontSizeOption} format.\n *\n * @param configuredOptions An array of options taken from the configuration.\n */\nexport function normalizeOptions(configuredOptions) {\n    // Convert options to objects.\n    return configuredOptions\n        .map(item => getOptionDefinition(item))\n        // Filter out undefined values that `getOptionDefinition` might return.\n        .filter((option) => option !== undefined);\n}\n// Default named presets map. Always create a new instance of the preset object in order to avoid modifying references.\nconst namedPresets = {\n    get tiny() {\n        return {\n            title: 'Tiny',\n            model: 'tiny',\n            view: {\n                name: 'span',\n                classes: 'text-tiny',\n                priority: 7\n            }\n        };\n    },\n    get small() {\n        return {\n            title: 'Small',\n            model: 'small',\n            view: {\n                name: 'span',\n                classes: 'text-small',\n                priority: 7\n            }\n        };\n    },\n    get big() {\n        return {\n            title: 'Big',\n            model: 'big',\n            view: {\n                name: 'span',\n                classes: 'text-big',\n                priority: 7\n            }\n        };\n    },\n    get huge() {\n        return {\n            title: 'Huge',\n            model: 'huge',\n            view: {\n                name: 'span',\n                classes: 'text-huge',\n                priority: 7\n            }\n        };\n    }\n};\n/**\n * Returns an option definition either from preset or creates one from number shortcut.\n * If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n */\nfunction getOptionDefinition(option) {\n    if (typeof option === 'number') {\n        option = String(option);\n    }\n    // Check whether passed option is a full item definition provided by user in configuration.\n    if (typeof option === 'object' && isFullItemDefinition(option)) {\n        return attachPriority(option);\n    }\n    const preset = findPreset(option);\n    // Item is a named preset.\n    if (preset) {\n        return attachPriority(preset);\n    }\n    // 'Default' font size. It will be used to remove the fontSize attribute.\n    if (option === 'default') {\n        return {\n            model: undefined,\n            title: 'Default'\n        };\n    }\n    // At this stage we probably have numerical value to generate a preset so parse it's value.\n    // Discard any faulty values.\n    if (isNumericalDefinition(option)) {\n        return undefined;\n    }\n    // Return font size definition from size value.\n    return generatePixelPreset(option);\n}\n/**\n * Creates a predefined preset for pixel size.\n * @param definition Font size in pixels.\n * @returns\n */\nfunction generatePixelPreset(definition) {\n    // Extend a short (numeric value) definition.\n    if (typeof definition === 'string') {\n        definition = {\n            title: definition,\n            model: `${parseFloat(definition)}px`\n        };\n    }\n    definition.view = {\n        name: 'span',\n        styles: {\n            'font-size': definition.model\n        }\n    };\n    return attachPriority(definition);\n}\n/**\n * Adds the priority to the view element definition if missing. It's required due to ckeditor/ckeditor5#2291\n */\nfunction attachPriority(definition) {\n    if (definition.view && typeof definition.view !== 'string' && !definition.view.priority) {\n        definition.view.priority = 7;\n    }\n    return definition;\n}\n/**\n * Returns a prepared preset definition. If passed an object, a name of preset should be defined as `model` value.\n *\n * @param definition.model A preset name.\n */\nfunction findPreset(definition) {\n    return typeof definition === 'string' ? namedPresets[definition] : namedPresets[definition.model];\n}\n/**\n * We treat `definition` as completed if it is an object that contains `title`, `model` and `view` values.\n */\nfunction isFullItemDefinition(definition) {\n    return definition.title && definition.model && definition.view;\n}\nfunction isNumericalDefinition(definition) {\n    let numberValue;\n    if (typeof definition === 'object') {\n        if (!definition.model) {\n            /**\n             * Provided value as an option for {@link module:font/fontsize~FontSize} seems to invalid.\n             *\n             * See valid examples described in the {@link module:font/fontconfig~FontSizeConfig#options plugin configuration}.\n             *\n             * @error font-size-invalid-definition\n             */\n            throw new CKEditorError('font-size-invalid-definition', null, definition);\n        }\n        else {\n            numberValue = parseFloat(definition.model);\n        }\n    }\n    else {\n        numberValue = parseFloat(definition);\n    }\n    return isNaN(numberValue);\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontsize/fontsizeediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { CKEditorError } from 'ckeditor5/src/utils';\nimport { isLength, isPercentage } from 'ckeditor5/src/engine';\nimport FontSizeCommand from './fontsizecommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_SIZE } from '../utils';\n// Mapping of `<font size=\"..\">` styling to CSS's `font-size` values.\nconst styleFontSize = [\n    'x-small',\n    'x-small',\n    'small',\n    'medium',\n    'large',\n    'x-large',\n    'xx-large',\n    'xxx-large'\n];\n/**\n * The font size editing feature.\n *\n * It introduces the {@link module:font/fontsize/fontsizecommand~FontSizeCommand command} and the `fontSize`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<span>` element with either:\n * * a style attribute (`<span style=\"font-size:12px\">...</span>`),\n * * or a class attribute (`<span class=\"text-small\">...</span>`)\n *\n * depending on the {@link module:font/fontconfig~FontSizeConfig configuration}.\n */\nexport default class FontSizeEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontSizeEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        // Define default configuration using named presets.\n        editor.config.define(FONT_SIZE, {\n            options: [\n                'tiny',\n                'small',\n                'default',\n                'big',\n                'huge'\n            ],\n            supportAllValues: false\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Allow fontSize attribute on text nodes.\n        editor.model.schema.extend('$text', { allowAttributes: FONT_SIZE });\n        editor.model.schema.setAttributeProperties(FONT_SIZE, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        const supportAllValues = editor.config.get('fontSize.supportAllValues');\n        // Define view to model conversion.\n        const options = normalizeOptions(this.editor.config.get('fontSize.options'))\n            .filter(item => item.model);\n        const definition = buildDefinition(FONT_SIZE, options);\n        // Set-up the two-way conversion.\n        if (supportAllValues) {\n            this._prepareAnyValueConverters(definition);\n            this._prepareCompatibilityConverter();\n        }\n        else {\n            editor.conversion.attributeToElement(definition);\n        }\n        // Add FontSize command.\n        editor.commands.add(FONT_SIZE, new FontSizeCommand(editor));\n    }\n    /**\n     * These converters enable keeping any value found as `style=\"font-size: *\"` as a value of an attribute on a text even\n     * if it is not defined in the plugin configuration.\n     *\n     * @param definition Converter definition out of input data.\n     */\n    _prepareAnyValueConverters(definition) {\n        const editor = this.editor;\n        // If `fontSize.supportAllValues=true`, we do not allow to use named presets in the plugin's configuration.\n        const presets = definition.model.values.filter((value) => {\n            return !isLength(String(value)) && !isPercentage(String(value));\n        });\n        if (presets.length) {\n            /**\n             * If {@link module:font/fontconfig~FontSizeConfig#supportAllValues `config.fontSize.supportAllValues`} is `true`,\n             * you need to use numerical values as font size options.\n             *\n             * See valid examples described in the {@link module:font/fontconfig~FontSizeConfig#options plugin configuration}.\n             *\n             * @error font-size-invalid-use-of-named-presets\n             * @param {Array.<String>} presets Invalid values.\n             */\n            throw new CKEditorError('font-size-invalid-use-of-named-presets', null, { presets });\n        }\n        editor.conversion.for('downcast').attributeToElement({\n            model: FONT_SIZE,\n            view: (attributeValue, { writer }) => {\n                if (!attributeValue) {\n                    return;\n                }\n                return writer.createAttributeElement('span', { style: 'font-size:' + attributeValue }, { priority: 7 });\n            }\n        });\n        editor.conversion.for('upcast').elementToAttribute({\n            model: {\n                key: FONT_SIZE,\n                value: (viewElement) => viewElement.getStyle('font-size')\n            },\n            view: {\n                name: 'span',\n                styles: {\n                    'font-size': /.*/\n                }\n            }\n        });\n    }\n    /**\n     * Adds support for legacy `<font size=\"..\">` formatting.\n     */\n    _prepareCompatibilityConverter() {\n        const editor = this.editor;\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'font',\n                attributes: {\n                    // Documentation mentions sizes from 1 to 7. To handle old content we support all values\n                    // up to 999 but clamp it to the valid range. Why 999? It should cover accidental values\n                    // similar to percentage, e.g. 100%, 200% which could be the usual mistake for font size.\n                    'size': /^[+-]?\\d{1,3}$/\n                }\n            },\n            model: {\n                key: FONT_SIZE,\n                value: (viewElement) => {\n                    const value = viewElement.getAttribute('size');\n                    const isRelative = value[0] === '-' || value[0] === '+';\n                    let size = parseInt(value, 10);\n                    if (isRelative) {\n                        // Add relative size (which can be negative) to the default size = 3.\n                        size = 3 + size;\n                    }\n                    const maxSize = styleFontSize.length - 1;\n                    const clampedSize = Math.min(Math.max(size, 0), maxSize);\n                    return styleFontSize[clampedSize];\n                }\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontsize/fontsizeui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { normalizeOptions } from './utils';\nimport { FONT_SIZE } from '../utils';\nimport '../../theme/fontsize.css';\nimport fontSizeIcon from '../../theme/icons/font-size.svg';\n/**\n * The font size UI plugin. It introduces the `'fontSize'` dropdown.\n */\nexport default class FontSizeUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontSizeUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = this._getLocalizedOptions();\n        const command = editor.commands.get(FONT_SIZE);\n        const accessibleLabel = t('Font Size');\n        // Register UI component.\n        editor.ui.componentFactory.add(FONT_SIZE, locale => {\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, () => _prepareListOptions(options, command), {\n                role: 'menu',\n                ariaLabel: accessibleLabel\n            });\n            // Create dropdown model.\n            dropdownView.buttonView.set({\n                label: accessibleLabel,\n                icon: fontSizeIcon,\n                tooltip: true\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: [\n                        'ck-font-size-dropdown'\n                    ]\n                }\n            });\n            dropdownView.bind('isEnabled').to(command);\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName, { value: evt.source.commandParam });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n    /**\n     * Returns options as defined in `config.fontSize.options` but processed to account for\n     * editor localization, i.e. to display {@link module:font/fontconfig~FontSizeOption}\n     * in the correct language.\n     *\n     * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n     * when the user configuration is defined because the editor does not exist yet.\n     */\n    _getLocalizedOptions() {\n        const editor = this.editor;\n        const t = editor.t;\n        const localizedTitles = {\n            Default: t('Default'),\n            Tiny: t('Tiny'),\n            Small: t('Small'),\n            Big: t('Big'),\n            Huge: t('Huge')\n        };\n        const options = normalizeOptions((editor.config.get(FONT_SIZE)).options);\n        return options.map(option => {\n            const title = localizedTitles[option.title];\n            if (title && title != option.title) {\n                // Clone the option to avoid altering the original `namedPresets` from `./utils.js`.\n                option = Object.assign({}, option, { title });\n            }\n            return option;\n        });\n    }\n}\n/**\n * Prepares FontSize dropdown items.\n */\nfunction _prepareListOptions(options, command) {\n    const itemDefinitions = new Collection();\n    for (const option of options) {\n        const def = {\n            type: 'button',\n            model: new Model({\n                commandName: FONT_SIZE,\n                commandParam: option.model,\n                label: option.title,\n                class: 'ck-fontsize-option',\n                role: 'menuitemradio',\n                withText: true\n            })\n        };\n        if (option.view && typeof option.view !== 'string') {\n            if (option.view.styles) {\n                def.model.set('labelStyle', `font-size:${option.view.styles['font-size']}`);\n            }\n            if (option.view.classes) {\n                def.model.set('class', `${def.model.class} ${option.view.classes}`);\n            }\n        }\n        def.model.bind('isOn').to(command, 'value', value => value === option.model);\n        // Add the option to the collection.\n        itemDefinitions.add(def);\n    }\n    return itemDefinitions;\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontsize\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport FontSizeEditing from './fontsize/fontsizeediting';\nimport FontSizeUI from './fontsize/fontsizeui';\nimport { normalizeOptions } from './fontsize/utils';\n/**\n * The font size plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentation\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:font/fontsize/fontsizeediting~FontSizeEditing} and\n * {@link module:font/fontsize/fontsizeui~FontSizeUI} features in the editor.\n */\nexport default class FontSize extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [FontSizeEditing, FontSizeUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontSize';\n    }\n    /**\n     * Normalizes and translates the {@link module:font/fontconfig~FontSizeConfig#options configuration options}\n     * to the {@link module:font/fontconfig~FontSizeOption} format.\n     *\n     * @param configuredOptions An array of options taken from the configuration.\n     */\n    normalizeSizeOptions(options) {\n        return normalizeOptions(options);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport FontCommand from '../fontcommand';\nimport { FONT_COLOR } from '../utils';\n/**\n * The font color command. It is used by {@link module:font/fontcolor/fontcolorediting~FontColorEditing}\n * to apply the font color.\n *\n * ```ts\n * editor.execute( 'fontColor', { value: 'rgb(250, 20, 20)' } );\n * ```\n *\n * **Note**: Executing the command with the `null` value removes the attribute from the model.\n */\nexport default class FontColorCommand extends FontCommand {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor, FONT_COLOR);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontcolor/fontcolorediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport FontColorCommand from './fontcolorcommand';\nimport { FONT_COLOR, renderDowncastElement, renderUpcastAttribute } from '../utils';\n/**\n * The font color editing feature.\n *\n * It introduces the {@link module:font/fontcolor/fontcolorcommand~FontColorCommand command} and\n * the `fontColor` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as a `<span>` element (`<span style=\"color: ...\">`),\n * depending on the {@link module:font/fontconfig~FontColorConfig configuration}.\n */\nexport default class FontColorEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontColorEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define(FONT_COLOR, {\n            colors: [\n                {\n                    color: 'hsl(0, 0%, 0%)',\n                    label: 'Black'\n                },\n                {\n                    color: 'hsl(0, 0%, 30%)',\n                    label: 'Dim grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 60%)',\n                    label: 'Grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 90%)',\n                    label: 'Light grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 100%)',\n                    label: 'White',\n                    hasBorder: true\n                },\n                {\n                    color: 'hsl(0, 75%, 60%)',\n                    label: 'Red'\n                },\n                {\n                    color: 'hsl(30, 75%, 60%)',\n                    label: 'Orange'\n                },\n                {\n                    color: 'hsl(60, 75%, 60%)',\n                    label: 'Yellow'\n                },\n                {\n                    color: 'hsl(90, 75%, 60%)',\n                    label: 'Light green'\n                },\n                {\n                    color: 'hsl(120, 75%, 60%)',\n                    label: 'Green'\n                },\n                {\n                    color: 'hsl(150, 75%, 60%)',\n                    label: 'Aquamarine'\n                },\n                {\n                    color: 'hsl(180, 75%, 60%)',\n                    label: 'Turquoise'\n                },\n                {\n                    color: 'hsl(210, 75%, 60%)',\n                    label: 'Light blue'\n                },\n                {\n                    color: 'hsl(240, 75%, 60%)',\n                    label: 'Blue'\n                },\n                {\n                    color: 'hsl(270, 75%, 60%)',\n                    label: 'Purple'\n                }\n            ],\n            columns: 5\n        });\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'span',\n                styles: {\n                    'color': /[\\s\\S]+/\n                }\n            },\n            model: {\n                key: FONT_COLOR,\n                value: renderUpcastAttribute('color')\n            }\n        });\n        // Support legacy `<font color=\"..\">` formatting.\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'font',\n                attributes: {\n                    'color': /^#?\\w+$/\n                }\n            },\n            model: {\n                key: FONT_COLOR,\n                value: (viewElement) => viewElement.getAttribute('color')\n            }\n        });\n        editor.conversion.for('downcast').attributeToElement({\n            model: FONT_COLOR,\n            view: renderDowncastElement('color')\n        });\n        editor.commands.add(FONT_COLOR, new FontColorCommand(editor));\n        // Allow the font color attribute on text nodes.\n        editor.model.schema.extend('$text', { allowAttributes: FONT_COLOR });\n        editor.model.schema.setAttributeProperties(FONT_COLOR, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/ui/colorui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { createDropdown, normalizeColorOptions, getLocalizedColorOptions, focusChildOnDropdownOpen } from 'ckeditor5/src/ui';\nimport { addColorSelectorToDropdown } from '../utils';\n/**\n * The color UI plugin which isolates the common logic responsible for displaying dropdowns with color grids.\n *\n * It is used to create the `'fontBackgroundColor'` and `'fontColor'` dropdowns, each hosting\n * a {@link module:ui/colorselector/colorselectorview~ColorSelectorView}.\n */\nexport default class ColorUI extends Plugin {\n    /**\n     * Creates a plugin which introduces a dropdown with a pre–configured\n     * {@link module:ui/colorselector/colorselectorview~ColorSelectorView}.\n     *\n     * @param config The configuration object.\n     * @param config.commandName The name of the command which will be executed when a color tile is clicked.\n     * @param config.componentName The name of the dropdown in the {@link module:ui/componentfactory~ComponentFactory}\n     * and the configuration scope name in `editor.config`.\n     * @param config.icon The SVG icon used by the dropdown.\n     * @param config.dropdownLabel The label used by the dropdown.\n     */\n    constructor(editor, { commandName, componentName, icon, dropdownLabel }) {\n        super(editor);\n        this.commandName = commandName;\n        this.componentName = componentName;\n        this.icon = icon;\n        this.dropdownLabel = dropdownLabel;\n        this.columns = editor.config.get(`${this.componentName}.columns`);\n        this.colorSelectorView = undefined;\n    }\n    /**\n    * @inheritDoc\n    */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = locale.t;\n        const command = editor.commands.get(this.commandName);\n        const componentConfig = editor.config.get(this.componentName);\n        const colorsConfig = normalizeColorOptions(componentConfig.colors);\n        const localizedColors = getLocalizedColorOptions(locale, colorsConfig);\n        const documentColorsCount = componentConfig.documentColors;\n        const hasColorPicker = componentConfig.colorPicker !== false;\n        // Register the UI component.\n        editor.ui.componentFactory.add(this.componentName, locale => {\n            const dropdownView = createDropdown(locale);\n            // Font color dropdown rendering is deferred once it gets open to improve performance (#6192).\n            let dropdownContentRendered = false;\n            this.colorSelectorView = addColorSelectorToDropdown({\n                dropdownView,\n                colors: localizedColors.map(option => ({\n                    label: option.label,\n                    color: option.model,\n                    options: {\n                        hasBorder: option.hasBorder\n                    }\n                })),\n                columns: this.columns,\n                removeButtonLabel: t('Remove color'),\n                colorPickerLabel: t('Color picker'),\n                documentColorsLabel: documentColorsCount !== 0 ? t('Document colors') : '',\n                documentColorsCount: documentColorsCount === undefined ? this.columns : documentColorsCount,\n                colorPickerViewConfig: hasColorPicker ? (componentConfig.colorPicker || {}) : false\n            });\n            this.colorSelectorView.bind('selectedColor').to(command, 'value');\n            dropdownView.buttonView.set({\n                label: this.dropdownLabel,\n                icon: this.icon,\n                tooltip: true\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: 'ck-color-ui-dropdown'\n                }\n            });\n            dropdownView.bind('isEnabled').to(command);\n            this.colorSelectorView.on('execute', (evt, data) => {\n                if (dropdownView.isOpen) {\n                    editor.execute(this.commandName, {\n                        value: data.value,\n                        batch: this._undoStepBatch\n                    });\n                }\n                if (data.source !== 'colorPicker') {\n                    editor.editing.view.focus();\n                }\n                if (data.source === 'colorPickerSaveButton') {\n                    dropdownView.isOpen = false;\n                }\n            });\n            this.colorSelectorView.on('colorPicker:show', () => {\n                this._undoStepBatch = editor.model.createBatch();\n            });\n            this.colorSelectorView.on('colorPicker:cancel', () => {\n                if (this._undoStepBatch.operations.length) {\n                    // We need to close the dropdown before the undo batch.\n                    // Otherwise, ColorUI treats undo as a selected color change,\n                    // propagating the update to the whole selection.\n                    // That's an issue if spans with various colors were selected.\n                    dropdownView.isOpen = false;\n                    editor.execute('undo', this._undoStepBatch);\n                }\n                editor.editing.view.focus();\n            });\n            dropdownView.on('change:isOpen', (evt, name, isVisible) => {\n                if (!dropdownContentRendered) {\n                    dropdownContentRendered = true;\n                    dropdownView.colorSelectorView.appendUI();\n                }\n                if (isVisible) {\n                    if (documentColorsCount !== 0) {\n                        this.colorSelectorView.updateDocumentColors(editor.model, this.componentName);\n                    }\n                    this.colorSelectorView.updateSelectedColors();\n                    this.colorSelectorView.showColorGridsFragment();\n                }\n            });\n            // Accessibility: focus the first active color when opening the dropdown.\n            focusChildOnDropdownOpen(dropdownView, () => dropdownView.colorSelectorView.colorGridsFragmentView.staticColorsGrid.items.find((item) => item.isOn));\n            return dropdownView;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontcolor/fontcolorui\n */\nimport ColorUI from '../ui/colorui';\nimport { FONT_COLOR } from '../utils';\nimport fontColorIcon from '../../theme/icons/font-color.svg';\n/**\n * The font color UI plugin. It introduces the `'fontColor'` dropdown.\n */\nexport default class FontColorUI extends ColorUI {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        const t = editor.locale.t;\n        super(editor, {\n            commandName: FONT_COLOR,\n            componentName: FONT_COLOR,\n            icon: fontColorIcon,\n            dropdownLabel: t('Font Color')\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontColorUI';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontcolor\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport FontColorEditing from './fontcolor/fontcolorediting';\nimport FontColorUI from './fontcolor/fontcolorui';\n/**\n * The font color plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentation\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:font/fontcolor/fontcolorediting~FontColorEditing} and\n * {@link module:font/fontcolor/fontcolorui~FontColorUI} features in the editor.\n */\nexport default class FontColor extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [FontColorEditing, FontColorUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontColor';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport FontCommand from '../fontcommand';\nimport { FONT_BACKGROUND_COLOR } from '../utils';\n/**\n * The font background color command. It is used by\n * {@link module:font/fontbackgroundcolor/fontbackgroundcolorediting~FontBackgroundColorEditing}\n * to apply the font background color.\n *\n * ```ts\n * editor.execute( 'fontBackgroundColor', { value: 'rgb(250, 20, 20)' } );\n * ```\n *\n * **Note**: Executing the command with the `null` value removes the attribute from the model.\n */\nexport default class FontBackgroundColorCommand extends FontCommand {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor, FONT_BACKGROUND_COLOR);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontbackgroundcolor/fontbackgroundcolorediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { addBackgroundRules } from 'ckeditor5/src/engine';\nimport FontBackgroundColorCommand from './fontbackgroundcolorcommand';\nimport { FONT_BACKGROUND_COLOR, renderDowncastElement, renderUpcastAttribute } from '../utils';\n/**\n * The font background color editing feature.\n *\n * It introduces the {@link module:font/fontbackgroundcolor/fontbackgroundcolorcommand~FontBackgroundColorCommand command} and\n * the `fontBackgroundColor` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as a `<span>` element (`<span style=\"background-color: ...\">`),\n * depending on the {@link module:font/fontconfig~FontColorConfig configuration}.\n */\nexport default class FontBackgroundColorEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontBackgroundColorEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define(FONT_BACKGROUND_COLOR, {\n            colors: [\n                {\n                    color: 'hsl(0, 0%, 0%)',\n                    label: 'Black'\n                },\n                {\n                    color: 'hsl(0, 0%, 30%)',\n                    label: 'Dim grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 60%)',\n                    label: 'Grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 90%)',\n                    label: 'Light grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 100%)',\n                    label: 'White',\n                    hasBorder: true\n                },\n                {\n                    color: 'hsl(0, 75%, 60%)',\n                    label: 'Red'\n                },\n                {\n                    color: 'hsl(30, 75%, 60%)',\n                    label: 'Orange'\n                },\n                {\n                    color: 'hsl(60, 75%, 60%)',\n                    label: 'Yellow'\n                },\n                {\n                    color: 'hsl(90, 75%, 60%)',\n                    label: 'Light green'\n                },\n                {\n                    color: 'hsl(120, 75%, 60%)',\n                    label: 'Green'\n                },\n                {\n                    color: 'hsl(150, 75%, 60%)',\n                    label: 'Aquamarine'\n                },\n                {\n                    color: 'hsl(180, 75%, 60%)',\n                    label: 'Turquoise'\n                },\n                {\n                    color: 'hsl(210, 75%, 60%)',\n                    label: 'Light blue'\n                },\n                {\n                    color: 'hsl(240, 75%, 60%)',\n                    label: 'Blue'\n                },\n                {\n                    color: 'hsl(270, 75%, 60%)',\n                    label: 'Purple'\n                }\n            ],\n            columns: 5\n        });\n        editor.data.addStyleProcessorRules(addBackgroundRules);\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'span',\n                styles: {\n                    'background-color': /[\\s\\S]+/\n                }\n            },\n            model: {\n                key: FONT_BACKGROUND_COLOR,\n                value: renderUpcastAttribute('background-color')\n            }\n        });\n        editor.conversion.for('downcast').attributeToElement({\n            model: FONT_BACKGROUND_COLOR,\n            view: renderDowncastElement('background-color')\n        });\n        editor.commands.add(FONT_BACKGROUND_COLOR, new FontBackgroundColorCommand(editor));\n        // Allow the font backgroundColor attribute on text nodes.\n        editor.model.schema.extend('$text', { allowAttributes: FONT_BACKGROUND_COLOR });\n        editor.model.schema.setAttributeProperties(FONT_BACKGROUND_COLOR, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontbackgroundcolor/fontbackgroundcolorui\n */\nimport ColorUI from '../ui/colorui';\nimport { FONT_BACKGROUND_COLOR } from '../utils';\nimport fontBackgroundColorIcon from '../../theme/icons/font-background.svg';\n/**\n * The font background color UI plugin. It introduces the `'fontBackgroundColor'` dropdown.\n */\nexport default class FontBackgroundColorUI extends ColorUI {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        const t = editor.locale.t;\n        super(editor, {\n            commandName: FONT_BACKGROUND_COLOR,\n            componentName: FONT_BACKGROUND_COLOR,\n            icon: fontBackgroundColorIcon,\n            dropdownLabel: t('Font Background Color')\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontBackgroundColorUI';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontbackgroundcolor\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport FontBackgroundColorEditing from './fontbackgroundcolor/fontbackgroundcolorediting';\nimport FontBackgroundColorUI from './fontbackgroundcolor/fontbackgroundcolorui';\n/**\n * The font background color plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentation\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads\n * the {@link module:font/fontbackgroundcolor/fontbackgroundcolorediting~FontBackgroundColorEditing} and\n * {@link module:font/fontbackgroundcolor/fontbackgroundcolorui~FontBackgroundColorUI} features in the editor.\n */\nexport default class FontBackgroundColor extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [FontBackgroundColorEditing, FontBackgroundColorUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FontBackgroundColor';\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/font\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport FontFamily from './fontfamily';\nimport FontSize from './fontsize';\nimport FontColor from './fontcolor';\nimport FontBackgroundColor from './fontbackgroundcolor';\n/**\n * A plugin that enables a set of text styling features:\n *\n * * {@link module:font/fontsize~FontSize},\n * * {@link module:font/fontfamily~FontFamily}.\n * * {@link module:font/fontcolor~FontColor},\n * * {@link module:font/fontbackgroundcolor~FontBackgroundColor}.\n *\n * For a detailed overview, check the {@glink features/font Font feature} documentation\n * and the {@glink api/font package page}.\n */\nexport default class Font extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [FontFamily, FontSize, FontColor, FontBackgroundColor];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'Font';\n    }\n}\n"],
  "mappings": "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",
  "names": ["normalizeOptions", "getOptionDefinition", "normalizeOptions", "_prepareListOptions", "normalizeOptions", "normalizeOptions", "locale"]
}
