// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { packageMetadata } from './package-metadata';
import { checkOutlineIcon, exclamationCircleIcon, infoCircleIcon, xIcon, xOutlineIcon } from '@progress/kendo-svg-icons';
import { validatePackage, getDefaultSlots, Icon, guid } from '@progress/kendo-vue-common';
var buttonTitle = 'Close';
/**
 * @hidden
 */
var NotificationVue2 = {
  name: 'KendoNotification',
  props: {
    closable: {
      type: [Object, Boolean],
      default: function _default() {
        return false;
      }
    },
    dir: String,
    type: {
      type: Object,
      default: function _default() {
        return {
          style: 'none',
          icon: true
        };
      },
      validator: function validator(value) {
        return ['none', 'success', 'error', 'warning', 'info'].includes(value.style);
      }
    },
    themeColor: {
      type: String,
      default: 'base',
      validator: function validator(value) {
        return [null, 'base', 'error', 'info', 'success', 'warning'].includes(value);
      }
    },
    ariaLabel: {
      type: String,
      default: undefined
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.notificationContentId = guid();
  },
  computed: {
    computedTheme: function computedTheme() {
      var _a = this.$props,
        type = _a.type,
        themeColor = _a.themeColor;
      return type.style !== 'none' ? type.style : themeColor;
    },
    computedSvg: function computedSvg() {
      switch (this.computedTheme) {
        case 'success':
          return {
            name: 'check-outline',
            icon: checkOutlineIcon
          };
        case 'error':
          return {
            name: 'x-outline',
            icon: xOutlineIcon
          };
        case 'info':
          return {
            name: 'info-circle',
            icon: infoCircleIcon
          };
        case 'warning':
          return {
            name: 'exclamation-circle',
            icon: exclamationCircleIcon
          };
        default:
          return {};
      }
    },
    wrapperClass: function wrapperClass() {
      var _a;
      var closable = this.$props.closable;
      return _a = {
        'k-notification': true
      }, _a["k-notification-".concat(this.computedTheme)] = this.computedTheme, _a['k-notification-closable'] = closable, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a = this.$props,
      closable = _a.closable,
      type = _a.type;
    return h("div", {
      "class": "k-notification-container"
    }, [h("div", {
      role: 'alert',
      attrs: this.v3 ? undefined : {
        role: 'alert',
        "aria-live": 'polite',
        "aria-label": this.$props.ariaLabel,
        "aria-describedby": this.notificationContentId
      },
      "class": this.wrapperClass,
      style: this.$props.style,
      "aria-live": 'polite',
      "aria-label": this.$props.ariaLabel,
      "aria-describedby": this.notificationContentId
    }, [type.icon && this.computedSvg.name && h(Icon, {
      name: this.computedSvg.name,
      attrs: this.v3 ? undefined : {
        name: this.computedSvg.name,
        icon: this.computedSvg.icon
      },
      icon: this.computedSvg.icon,
      "class": 'k-notification-status'
    }), h("div", {
      "class": "k-notification-content",
      id: this.notificationContentId,
      attrs: this.v3 ? undefined : {
        id: this.notificationContentId
      }
    }, [defaultSlot]), closable && h("span", {
      "class": "k-notification-actions"
    }, [h("span", {
      "class": "k-notification-action k-notification-close-action",
      "aria-hidden": true,
      attrs: this.v3 ? undefined : {
        "aria-hidden": true
      }
    }, [h(Icon, {
      name: "x",
      attrs: this.v3 ? undefined : {
        name: "x",
        icon: xIcon,
        title: buttonTitle
      },
      icon: xIcon,
      title: buttonTitle,
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick
      }
    })])])])]);
  },
  methods: {
    handleClick: function handleClick(event) {
      this.$emit('close', {
        component: this,
        event: event
      });
    }
  }
};
/**
 * Represents the [Kendo UI for Vue Native Notification component]({% slug overview_notification %}).
 *
 *
 * ### props <span class='code'>Readonly&lt;[NotificationProps]({% slug api_notification_notificationprops %})</span>
 * The props of the Notification component.
 *
 */
var Notification = NotificationVue2;
export { Notification, NotificationVue2 };