import { DefineComponent } from './additionalTypes';
import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * The `close` event object of the Notification.
 */
export interface NotificationEvent {
    /**
     * A native DOM event.
     */
    event: Event;
    /**
     * An event target.
     */
    target: Notification;
}
/**
 * Represents the props of the [Kendo UI for Vue Notification component]({% slug overview_notification %}).
 */
export interface NotificationProps {
    /**
     * Specifies if the Notification will require a user action to hide.
     * If the property is set to `true`, the Notification renders a **Close** button.
     * If the property is set to `object`, the Notification renders a **Close** button
     * by extending the default props with the provided object.
     *
     * The possible values are:
     * * (Default) `false`
     * * `true`
     * * `{ title: 'Hide', ... }`
     */
    closable?: boolean | any;
    /**
     * The `dir` HTML attribute.
     */
    dir?: string;
    /**
     * The Notification type
     * ([see example]({% slug types_notification %})).
     *
     * The possible values are:
     * * `style: 'none'|'success'|'error'|'warning'|'info'`. Defaults to `none`.
     * * `icon?: 'true'|'false'`. Defaults to `true`.
     */
    type?: {
        style?: 'none' | 'success' | 'error' | 'warning' | 'info';
        icon?: boolean;
    };
    /**
     * Configures the `themeColor` of the Notification.
     */
    themeColor?: string;
    /**
     * The `close` event which will be triggered when the **Close** button is clicked.
     */
    onClose?: (event: NotificationEvent) => void;
    /**
     * Defines the aria-label attribute of the Notification component. Defaults to `undefined`.
     */
    ariaLabel?: string;
}
/**
 * @hidden
 */
export interface NotificationState {
}
/**
 * @hidden
 */
export interface NotificationComputed {
    [key: string]: any;
    wrapperClass: object;
}
/**
 * @hidden
 */
export interface NotificationMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface NotificationData {
}
/**
 * @hidden
 */
export interface NotificationAll extends Vue, NotificationMethods, NotificationData, NotificationComputed, NotificationState {
}
/**
 * @hidden
 */
declare let NotificationVue2: ComponentOptions<NotificationAll, DefaultData<NotificationData>, DefaultMethods<NotificationAll>, NotificationComputed, RecordPropsDefinition<NotificationProps>>;
/**
 * Represents the [Kendo UI for Vue Native Notification component]({% slug overview_notification %}).
 *
 *
 * ### props <span class='code'>Readonly&lt;[NotificationProps]({% slug api_notification_notificationprops %})</span>
 * The props of the Notification component.
 *
 */
declare const Notification: DefineComponent<NotificationProps, any, NotificationData, NotificationComputed, NotificationMethods, {}, {}, {}, string, NotificationProps, NotificationProps, {}>;
export { Notification, NotificationVue2 };
