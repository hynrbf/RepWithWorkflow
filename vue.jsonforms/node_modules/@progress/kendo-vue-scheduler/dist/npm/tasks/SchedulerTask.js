"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchedulerTaskVue2 = exports.SchedulerTask = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("../messages/main");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var main_2 = require("../hooks/main");
var SchedulerOccurrenceDialog_1 = require("../components/SchedulerOccurrenceDialog");
var SchedulerRemoveDialog_1 = require("../components/SchedulerRemoveDialog");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var SchedulerTaskVue2 = {
  name: 'KendoSchedulerTask',
  props: {
    refTo: [Function, Object],
    id: String,
    tabIndex: Number,
    head: Boolean,
    tail: Boolean,
    order: Number,
    zonedStart: Object,
    zonedEnd: Object,
    slots: Array,
    group: Object,
    range: Object,
    isException: Boolean,
    isRecurring: Boolean,
    isAllDay: Boolean,
    uid: [String, Number],
    start: Date,
    end: Date,
    originalStart: Date,
    startTimezone: String,
    endTimezone: String,
    title: String,
    description: String,
    occurrenceId: String,
    recurrenceExceptions: Array,
    recurrenceRule: String,
    recurrenceId: [String, Number],
    dataItem: Object,
    removeItem: Object,
    editable: [Object, Boolean],
    showOccurrenceDialog: {
      type: Boolean,
      default: undefined
    },
    showRemoveDialog: {
      type: Boolean,
      default: undefined
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    taskClick: {
      default: null
    },
    taskDoubleClick: {
      default: null
    },
    ksCancel: {
      default: null
    },
    ksSeriesClick: {
      default: null
    },
    ksOccurrenceClick: {
      default: null
    },
    ksRemoveConfirm: {
      default: null
    }
  },
  created: function created() {
    this.task = null;
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = (0, kendo_vue_common_1.getDefaultSlots)(this);
    var editable = (0, main_2.useEditable)(this.$props.editable);
    var localization = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    var deleteMessage = localization.toLanguageString(main_1.deleteTitle, main_1.messages[main_1.deleteTitle]);
    var resource = this.$props.group.resources.find(function (r) {
      return Boolean(r.colorField && r[r.colorField] !== undefined);
    });
    var color = resource && resource.colorField && resource[resource.colorField];
    return h("div", {
      id: this.$props.id,
      attrs: this.v3 ? undefined : {
        id: this.$props.id,
        tabindex: this.$props.tabIndex || undefined
        // Mouse
      },
      "class": 'k-task',
      tabindex: this.$props.tabIndex || undefined,
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick,
        "dblclick": this.handleDoubleClick
      },
      onDblclick: this.handleDoubleClick
    }, [color && h("span", {
      "class": "k-scheduler-mark",
      style: {
        color: color,
        backgroundColor: color
      }
    }), this.$props.isRecurring && h(kendo_vue_common_1.Icon, {
      name: "arrow-rotate-cw",
      attrs: this.v3 ? undefined : {
        name: "arrow-rotate-cw",
        icon: kendo_svg_icons_1.arrowRotateCwIcon
      },
      icon: kendo_svg_icons_1.arrowRotateCwIcon
    }), this.$props.isException && h(kendo_vue_common_1.Icon, {
      name: "arrows-no-repeat",
      attrs: this.v3 ? undefined : {
        name: "arrows-no-repeat",
        icon: kendo_svg_icons_1.arrowsNoRepeatIcon
      },
      icon: kendo_svg_icons_1.arrowsNoRepeatIcon
    }), this.$props.title, defaultSlot, editable.remove && h("a", {
      "class": "k-link k-event-delete",
      title: deleteMessage,
      attrs: this.v3 ? undefined : {
        title: deleteMessage,
        "aria-label": deleteMessage
      },
      "aria-label": deleteMessage,
      onClick: this.handleRemoveClick,
      on: this.v3 ? undefined : {
        "click": this.handleRemoveClick
      }
    }, [h(kendo_vue_common_1.Icon, {
      name: "x",
      attrs: this.v3 ? undefined : {
        name: "x",
        icon: kendo_svg_icons_1.xIcon
      },
      icon: kendo_svg_icons_1.xIcon
    })]), this.showOccurrenceDialog && h(SchedulerOccurrenceDialog_1.SchedulerOccurrenceDialog, {
      dataItem: this.removeItem,
      attrs: this.v3 ? undefined : {
        dataItem: this.removeItem,
        isRemove: this.removeItem !== null
      },
      isRemove: this.removeItem !== null,
      onClose: this.ksCancel,
      on: this.v3 ? undefined : {
        "close": this.ksCancel,
        "occurrenceclose": this.ksOccurrenceClick,
        "seriesclose": this.ksSeriesClick
      },
      onOccurrenceclose: this.ksOccurrenceClick,
      onSeriesclose: this.ksSeriesClick
    }), this.showRemoveDialog && h(SchedulerRemoveDialog_1.SchedulerRemoveDialog, {
      dataItem: this.removeItem,
      attrs: this.v3 ? undefined : {
        dataItem: this.removeItem
      },
      onClose: this.ksCancel,
      on: this.v3 ? undefined : {
        "close": this.ksCancel,
        "cancel": this.ksCancel,
        "confirm": this.ksRemoveConfirm
      },
      onCancel: this.ksCancel,
      onConfirm: this.ksRemoveConfirm
    })]);
  },
  methods: {
    handleRemoveClick: function handleRemoveClick(event) {
      this.$emit('removeclick', {
        event: event,
        target: this.task
      });
    },
    handleClick: function handleClick(event) {
      var args = {
        event: event,
        target: {
          props: __assign({}, this.$props),
          element: this.$el
        }
      };
      this.$emit('click', args);
      this.taskClick(args);
    },
    handleDoubleClick: function handleDoubleClick(event) {
      var args = {
        event: event,
        target: {
          props: __assign({}, this.$props),
          element: this.$el
        }
      };
      this.$emit('doubleclick', args);
      this.taskDoubleClick(args);
    }
  }
};
exports.SchedulerTaskVue2 = SchedulerTaskVue2;
/**
 * @hidden
 */
var SchedulerTask = SchedulerTaskVue2;
exports.SchedulerTask = SchedulerTask;