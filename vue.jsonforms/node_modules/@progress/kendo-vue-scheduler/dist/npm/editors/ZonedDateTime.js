"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZonedDateTimeVue2 = exports.ZonedDateTime = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var kendo_vue_dateinputs_1 = require("@progress/kendo-vue-dateinputs");
var kendo_date_math_1 = require("@progress/kendo-date-math");
/**
 * @hidden
 */
var ZonedDateTimeVue2 = {
  name: 'KendoZonedDateTime',
  // @ts-ignore
  emits: {
    change: null
  },
  props: __assign(__assign({}, kendo_vue_dateinputs_1.DateTimePicker.props), {
    value: [String, Date],
    isAllDay: Boolean,
    as: [String, Function, Object]
  }),
  inject: {
    ks: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      Component = _a.as,
      other = __rest(_a, ["as"]);
    var timezone = this.ks.timezone;
    var dtpProps = __assign(__assign({}, other), {
      format: this.isAllDay ? 'd' : 'g',
      value: this.readDateAsLocal(other.value, timezone)
    });
    var NeededPicker = this.isAllDay ? kendo_vue_dateinputs_1.DatePicker : kendo_vue_dateinputs_1.DateTimePicker;
    var dtp = h(NeededPicker, __assign({
      onChange: this.handleChange,
      on: this.v3 ? undefined : {
        'change': this.handleChange
      },
      attrs: this.v3 ? undefined : dtpProps
    }, dtpProps));
    return dtp;
  },
  methods: {
    handleChange: function handleChange(event) {
      this.$emit('change', {
        value: this.readDateWithTimezone(event.target.value, this.ks.timezone)
      });
    },
    readDateAsLocal: function readDateAsLocal(value, timezone) {
      if (value) {
        return (0, kendo_date_math_1.toLocalDate)(kendo_date_math_1.ZonedDate.fromLocalDate(value, timezone).toUTCDate());
      }
      return value;
    },
    readDateWithTimezone: function readDateWithTimezone(value, timezone) {
      if (value) {
        return kendo_date_math_1.ZonedDate.fromUTCDate(new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds())), timezone).toLocalDate();
      }
      return value;
    }
  }
};
exports.ZonedDateTimeVue2 = ZonedDateTimeVue2;
/**
 * @hidden
 */
var ZonedDateTime = ZonedDateTimeVue2;
exports.ZonedDateTime = ZonedDateTime;