"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchedulerFormVue2 = exports.SchedulerForm = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var SchedulerActionButtons_1 = require("./SchedulerActionButtons");
var kendo_vue_form_1 = require("@progress/kendo-vue-form");
var kendo_vue_dialogs_1 = require("@progress/kendo-vue-dialogs");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var SchedulerFormEditor_1 = require("../editors/SchedulerFormEditor");
var main_1 = require("../messages/main");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */
var SchedulerFormVue2 = {
  name: 'KendoSchedulerForm',
  // @ts-ignore
  emits: {
    cancel: null,
    close: null,
    submit: null
  },
  props: {
    dataItem: Object
  },
  inject: {
    ks: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    },
    ksValidator: {
      default: null
    },
    ksModifyInitialFormValues: {
      default: null
    }
  },
  created: function created() {
    this.dialogId = (0, kendo_vue_common_1.guid)();
  },
  data: function data() {
    return {
      media: 'desktop'
    };
  },
  mounted: function mounted() {
    var that = this;
    that.calculateMedia();
    setTimeout(function () {
      var dialogWrapper = document.getElementById(that.dialogId);
      if (dialogWrapper) {
        dialogWrapper.focus();
      }
    }, 10);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var that = this;
    var localization = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    this.requiredValidationMessage = localization.toLanguageString(main_1.editorValidationRequired, main_1.messages[main_1.editorValidationRequired]);
    this.endValidationMessage = localization.toLanguageString(main_1.editorValidationEnd, main_1.messages[main_1.editorValidationEnd]);
    var editSaveMessage = localization.toLanguageString(main_1.editorSave, main_1.messages[main_1.editorSave]);
    var editCancelMessage = localization.toLanguageString(main_1.editorCancel, main_1.messages[main_1.editorCancel]);
    var editorTitleMessage = localization.toLanguageString(main_1.editorTitle, main_1.messages[main_1.editorTitle]);
    this.startValidationMessage = localization.toLanguageString(main_1.editorValidationStart, main_1.messages[main_1.editorValidationStart]);
    var renderAs;
    var defaultRendering =
    // @ts-ignore  function children
    h(SchedulerFormEditor_1.SchedulerFormEditor, this.v3 ? function () {
      return [h(SchedulerActionButtons_1.SchedulerActionButtons, {
        editSaveMessage: editSaveMessage,
        attrs: _this.v3 ? undefined : {
          editSaveMessage: editSaveMessage,
          editCancelMessage: editCancelMessage
        },
        editCancelMessage: editCancelMessage,
        onCancel: _this.handleCancel,
        on: _this.v3 ? undefined : {
          "cancel": _this.handleCancel
        }
      })];
    } : [h(SchedulerActionButtons_1.SchedulerActionButtons, {
      editSaveMessage: editSaveMessage,
      attrs: _this.v3 ? undefined : {
        editSaveMessage: editSaveMessage,
        editCancelMessage: editCancelMessage
      },
      editCancelMessage: editCancelMessage,
      onCancel: _this.handleCancel,
      on: _this.v3 ? undefined : {
        "cancel": _this.handleCancel
      }
    })]);
    renderAs = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: this.ks.form,
      defaultRendering: defaultRendering,
      additionalProps: {
        dataItem: this.dataItem,
        editSaveMessage: editSaveMessage,
        editCancelMessage: editCancelMessage
      },
      additionalListeners: {
        cancel: this.handleCancel
      }
    });
    var dialogProps = __assign({
      title: editorTitleMessage,
      appendTo: 'body',
      minWidth: this.media === 'desktop' ? 400 : '85%',
      wrapperId: this.dialogId
    }, this.ks.dialogProps);
    var formProps = __assign({
      initialValues: that.ksModifyInitialFormValues(that.$props.dataItem),
      validator: that.formValidator
    }, this.ks.formProps);
    return h(kendo_vue_dialogs_1.Dialog, __assign({
      attrs: this.v3 ? undefined : dialogProps,
      onClose: this.handleClose,
      on: this.v3 ? undefined : {
        'close': this.handleClose
      },
      'class': 'k-scheduler-edit-dialog'
    }, dialogProps), this.v3 ? function () {
      return [h(kendo_vue_form_1.Form, __assign({
        attrs: that.v3 ? undefined : formProps,
        onSubmit: that.handleSubmit,
        on: that.v3 ? undefined : {
          'submit': that.handleSubmit
        }
      }, formProps), that.v3 ? function () {
        return [renderAs];
      } : [renderAs])];
    } : [h(kendo_vue_form_1.Form, __assign({
      attrs: this.v3 ? undefined : formProps,
      onSubmit: this.handleSubmit,
      on: this.v3 ? undefined : {
        'submit': this.handleSubmit
      }
    }, formProps), this.v3 ? function () {
      return [renderAs];
    } : [renderAs])]);
  },
  methods: {
    calculateMedia: function calculateMedia() {
      this.media = window.matchMedia('(min-width: 600px)').matches ? 'desktop' : 'mobile';
    },
    handleCancel: function handleCancel(event) {
      this.$emit('cancel', {
        value: null,
        event: event,
        target: this.form
      });
    },
    handleClose: function handleClose(_a) {
      var event = _a.event;
      this.$emit('close', {
        value: null,
        event: event,
        target: this.form
      });
    },
    handleSubmit: function handleSubmit(dataItem, event) {
      this.$emit('submit', {
        value: dataItem,
        event: event,
        target: this.form
      });
    },
    startAfterEndValidator: function startAfterEndValidator(value, formValueGetter) {
      return Boolean(value && formValueGetter(this.ks.fields.end) && value.getTime() > formValueGetter(this.ks.fields.end).getTime()) ? this.startValidationMessage : undefined;
    },
    endAfterStartValidator: function endAfterStartValidator(value, formValueGetter) {
      return Boolean(value && formValueGetter(this.ks.fields.start) && value.getTime() < formValueGetter(this.ks.fields.start).getTime()) ? this.endValidationMessage : undefined;
    },
    requiredValidator: function requiredValidator(value) {
      return value ? undefined : this.requiredValidationMessage;
    },
    formValidator: function formValidator(_dataItem, formValueGetter) {
      var result = {};
      result[this.ks.fields.start] = [this.requiredValidator(formValueGetter(this.ks.fields.start)), this.startAfterEndValidator(formValueGetter(this.ks.fields.start), formValueGetter)].filter(Boolean).reduce(function (current, acc) {
        return current || acc;
      }, '');
      result[this.ks.fields.end] = [this.requiredValidator(formValueGetter(this.ks.fields.start)), this.endAfterStartValidator(formValueGetter(this.ks.fields.start), formValueGetter)].filter(Boolean).reduce(function (current, acc) {
        return current || acc;
      }, '');
      var additionalValidator = this.ksValidator(formValueGetter);
      return __assign(__assign({}, result), additionalValidator);
    }
  }
};
exports.SchedulerFormVue2 = SchedulerFormVue2;
/**
 * @hidden
 */
var SchedulerForm = SchedulerFormVue2;
exports.SchedulerForm = SchedulerForm;