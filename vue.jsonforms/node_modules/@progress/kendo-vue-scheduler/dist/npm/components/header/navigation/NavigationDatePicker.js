"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavigationDatePickerVue2 = exports.NavigationDatePicker = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_dateinputs_1 = require("@progress/kendo-vue-dateinputs");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var kendo_vue_popup_1 = require("@progress/kendo-vue-popup");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("../../../constants/main");
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
var main_2 = require("../../../utils/main");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var EMPTY_DATE_INPUT = function EMPTY_DATE_INPUT() {
  return null;
};
/**
 * @hidden
 */
var NavigationDatePickerVue2 = {
  name: 'KendoNavigationDatePicker',
  props: {
    value: [Date, Object]
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    ks: {
      default: null
    }
  },
  created: function created() {
    this.buttonId = (0, kendo_vue_common_1.guid)();
    this._popupId = 'popup' + (0, kendo_vue_common_1.guid)();
  },
  data: function data() {
    return {
      hasMounted: false,
      show: false,
      focused: false,
      media: 'desktop'
    };
  },
  mounted: function mounted() {
    this.buttonRef = this.$refs.button;
    this.calculateMedia();
    this.observer = new window.ResizeObserver(this.calculateMedia);
    this.observer.observe(this.ks.scheduler.$el);
    this.hasMounted = true;
  },
  destroyed: !!isV3 ? undefined : function () {
    if (this.observer) {
      this.observer.disconnect();
    }
  },
  // @ts-ignore
  unmounted: function unmounted() {
    if (this.observer) {
      this.observer.disconnect();
    }
  },
  updated: function updated() {
    if (this.show && this.focused) {
      if (this.$refs.calendar) {
        this.$refs.calendar.focus();
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;
    var h = gh || createElement;
    var normalized = kendo_date_math_1.ZonedDate.fromLocalDate(this.$props.value || this.ks.currentDate, this.ks.timezone);
    var value = (0, kendo_date_math_1.getDate)(normalized);
    var show = this.show;
    var isMonthView = this.ks.dateRange.end.getTime() - this.ks.dateRange.start.getTime() > main_1.MS_PER_DAY * 27;
    var intl = (0, kendo_vue_intl_1.provideIntlService)(this);
    var text = intl.format(this.ks.dateFormat, isMonthView ? this.ks.currentDate : this.ks.dateRange.zonedStart, isMonthView ? this.ks.currentDate : this.ks.dateRange.zonedEnd.addDays(-1));
    var shortText = intl.format(this.ks.shortDateFormat, isMonthView ? this.ks.currentDate : this.ks.dateRange.zonedStart, isMonthView ? this.ks.currentDate : this.ks.dateRange.zonedEnd.addDays(-1));
    return (
      // @ts-ignore function children
      h(kendo_vue_buttons_1.Button, {
        ref: 'button',
        id: this.buttonId,
        attrs: this.v3 ? undefined : {
          id: this.buttonId,
          fillMode: 'flat',
          "aria-live": 'polite',
          tabIndex: -1,
          icon: "calendar",
          svgIcon: kendo_svg_icons_1.calendarIcon
        },
        onFocus: this.onFocus,
        on: this.v3 ? undefined : {
          "focus": this.onFocus,
          "blur": this.onBlur,
          "click": this.handleClick
        },
        onBlur: this.onBlur,
        fillMode: 'flat',
        "class": 'k-nav-current',
        "aria-live": 'polite',
        tabIndex: -1,
        icon: "calendar",
        svgIcon: kendo_svg_icons_1.calendarIcon,
        onClick: this.handleClick
      }, this.v3 ? function () {
        return [_this2.media === 'desktop' ? text : shortText,
        // @ts-ignore function children
        h(kendo_vue_popup_1.Popup, {
          id: _this2._popupId,
          attrs: _this2.v3 ? undefined : {
            id: _this2._popupId,
            anchor: _this2.buttonId,
            show: show
          },
          anchor: _this2.buttonId,
          show: show
        }, _this2.v3 ? function () {
          return [_this2.hasMounted && h(kendo_vue_dateinputs_1.Calendar, {
            ref: 'calendar',
            onBlur: _this2.onCalendarBlur,
            on: _this2.v3 ? undefined : {
              "blur": _this2.onCalendarBlur,
              "change": _this2.handleChange,
              "keydown": _this2.calendarKeydown
            },
            onChange: _this2.handleChange,
            onKeydown: _this2.calendarKeydown,
            value: value,
            attrs: _this2.v3 ? undefined : {
              value: value
            }
          })];
        } : [_this2.hasMounted && h(kendo_vue_dateinputs_1.Calendar, {
          ref: 'calendar',
          onBlur: _this2.onCalendarBlur,
          on: _this2.v3 ? undefined : {
            "blur": _this2.onCalendarBlur,
            "change": _this2.handleChange,
            "keydown": _this2.calendarKeydown
          },
          onChange: _this2.handleChange,
          onKeydown: _this2.calendarKeydown,
          value: value,
          attrs: _this2.v3 ? undefined : {
            value: value
          }
        })])];
      } : [_this2.media === 'desktop' ? text : shortText, h(kendo_vue_popup_1.Popup, {
        id: _this2._popupId,
        attrs: _this2.v3 ? undefined : {
          id: _this2._popupId,
          anchor: _this2.buttonId,
          show: show
        },
        anchor: _this2.buttonId,
        show: show
      }, _this2.v3 ? function () {
        return [_this2.hasMounted && h(kendo_vue_dateinputs_1.Calendar, {
          ref: 'calendar',
          onBlur: _this2.onCalendarBlur,
          on: _this2.v3 ? undefined : {
            "blur": _this2.onCalendarBlur,
            "change": _this2.handleChange,
            "keydown": _this2.calendarKeydown
          },
          onChange: _this2.handleChange,
          onKeydown: _this2.calendarKeydown,
          value: value,
          attrs: _this2.v3 ? undefined : {
            value: value
          }
        })];
      } : [_this2.hasMounted && h(kendo_vue_dateinputs_1.Calendar, {
        ref: 'calendar',
        onBlur: _this2.onCalendarBlur,
        on: _this2.v3 ? undefined : {
          "blur": _this2.onCalendarBlur,
          "change": _this2.handleChange,
          "keydown": _this2.calendarKeydown
        },
        onChange: _this2.handleChange,
        onKeydown: _this2.calendarKeydown,
        value: value,
        attrs: _this2.v3 ? undefined : {
          value: value
        }
      })])])
    );
  },
  methods: {
    handleChange: function handleChange(event) {
      var normalizedValue = kendo_date_math_1.ZonedDate.fromUTCDate((0, main_2.toUTCDateTime)(event.value), this.ks.timezone);
      this.$emit('change', __assign(__assign({}, event), {
        value: normalizedValue
      }));
      this.hideAndFocusButton();
    },
    handleClick: function handleClick() {
      this.show = !this.show;
    },
    onFocus: function onFocus() {
      clearTimeout(this._blurTimeout);
      this.focused = true;
    },
    onBlur: function onBlur() {
      this.focused = false;
    },
    onCalendarBlur: function onCalendarBlur() {
      clearTimeout(this._blurTimeout);
      this.createBlurTimeout();
    },
    createBlurTimeout: function createBlurTimeout() {
      var _this = this;
      var that = this;
      this._blurTimeout = setTimeout(function () {
        _this.focused = false;
        var isInPopup = document.activeElement && document.activeElement.closest("#".concat(that._popupId));
        var isButtonActive = kendo_vue_common_1.canUseDOM && document.activeElement !== that.$refs.button.$el;
        if (isButtonActive && !isInPopup) {
          that.show = false;
        }
      }, 200);
    },
    calendarKeydown: function calendarKeydown(e) {
      if (e.keyCode === kendo_vue_common_1.Keys.esc) {
        this.hideAndFocusButton();
      }
    },
    hideAndFocusButton: function hideAndFocusButton() {
      this.show = false;
      this.$refs.button.focus();
    },
    calculateMedia: function calculateMedia() {
      this.media = window.matchMedia('(min-width: 1024px)').matches ? 'desktop' : 'mobile';
    }
  }
};
exports.NavigationDatePickerVue2 = NavigationDatePickerVue2;
/**
 * @hidden
 */
var NavigationDatePicker = NavigationDatePickerVue2;
exports.NavigationDatePicker = NavigationDatePicker;