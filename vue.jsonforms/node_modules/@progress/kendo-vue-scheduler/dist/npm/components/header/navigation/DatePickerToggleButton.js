"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePickerToggleButtonVue2 = exports.DatePickerToggleButton = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("../../../constants/main");
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var DatePickerToggleButtonVue2 = {
  name: 'KendoDatePickerToggleButton',
  props: __assign({}, kendo_vue_buttons_1.Button.props),
  inheritAttrs: false,
  inject: {
    kendoIntlService: {
      default: null
    },
    ks: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var intl = (0, kendo_vue_intl_1.provideIntlService)(this);
    // const { dateFormat, shortDateFormat } = useSchedulerDateFormatContext();
    // const dateRange = useSchedulerDateRangeContext();
    // const [date] = useSchedulerDateContext();
    var isMonthView = this.ks.dateRange.end.getTime() - this.ks.dateRange.start.getTime() > main_1.MS_PER_DAY * 27;
    var text = intl.format(this.ks.dateFormat, isMonthView ? this.ks.currentDate : this.ks.dateRange.zonedStart, isMonthView ? this.ks.currentDate : this.ks.dateRange.zonedEnd.addDays(-1));
    var shortText = intl.format(this.ks.shortDateFormat, isMonthView ? this.ks.currentDate : this.ks.dateRange.zonedStart, isMonthView ? this.ks.currentDate : this.ks.dateRange.zonedEnd.addDays(-1));
    return (
      // @ts-ignore  function children
      h(kendo_vue_buttons_1.Button, {
        onClick: this.handleClick
        // {...props} 
        ,
        on: this.v3 ? undefined : {
          "click": this.handleClick
        },
        icon: "calendar",
        attrs: this.v3 ? undefined : {
          icon: "calendar",
          svgIcon: kendo_svg_icons_1.calendarIcon,
          tabIndex: -1,
          fillMode: 'flat'
        },
        svgIcon: kendo_svg_icons_1.calendarIcon,
        "class": "k-nav-current",
        tabIndex: -1,
        fillMode: 'flat'
      }, this.v3 ? function () {
        return [h("span", {
          "class": "k-button-text"
        }, [h("span", {
          "class": "k-sm-date-format"
        }, [shortText]), h("span", {
          "class": "k-lg-date-format"
        }, [text])])];
      } : [h("span", {
        "class": "k-button-text"
      }, [h("span", {
        "class": "k-sm-date-format"
      }, [shortText]), h("span", {
        "class": "k-lg-date-format"
      }, [text])])])
    );
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit('click', e);
    }
  }
};
exports.DatePickerToggleButtonVue2 = DatePickerToggleButtonVue2;
/**
 * @hidden
 */
var DatePickerToggleButton = DatePickerToggleButtonVue2;
exports.DatePickerToggleButton = DatePickerToggleButton;