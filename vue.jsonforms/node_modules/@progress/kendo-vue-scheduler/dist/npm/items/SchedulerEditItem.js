"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchedulerEditItemVue2 = exports.SchedulerEditItem = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var Scheduler_1 = require("../Scheduler");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var SchedulerViewItem_1 = require("./SchedulerViewItem");
var main_1 = require("../hooks/main");
var use_form_item_1 = require("./hooks/use-form-item");
var use_show_occurrence_dialog_1 = require("./hooks/use-show-occurrence-dialog");
var use_remove_item_1 = require("./hooks/use-remove-item");
var use_show_remove_item_dialog_1 = require("./hooks/use-show-remove-item-dialog");
var use_drag_item_1 = require("./hooks/use-drag-item");
var use_resize_item_1 = require("./hooks/use-resize-item");
var use_series_1 = require("./hooks/use-series");
var use_items_selection_1 = require("../hooks/use-items-selection");
var main_2 = require("../utils/main");
/**
 * @hidden
 */
var SchedulerEditItemVue2 = {
  name: 'KendoSchedulerEditItem',
  inheritAttrs: false,
  props: {
    tabIndex: {
      type: Number,
      default: undefined
    },
    item: [String, Function, Object],
    viewItem: [String, Function, Object],
    drag: [String, Function, Object],
    resize: [String, Function, Object],
    form: [String, Function, Object],
    removeDialog: [String, Function, Object],
    occurrenceDialog: [String, Function, Object],
    formItem: Object,
    dragItem: Object,
    resizeItem: Object,
    removeItem: Object,
    showOccurrenceDialog: {
      type: Boolean,
      default: undefined
    },
    showRemoveDialog: {
      type: Boolean,
      default: undefined
    },
    series: {
      type: Boolean,
      default: undefined
    },
    uid: [String, Number],
    start: Date,
    end: Date,
    originalStart: Date,
    startTimezone: String,
    endTimezone: String,
    isAllDay: Boolean,
    title: String,
    description: String,
    occurrenceId: String,
    recurrenceExceptions: Array,
    recurrenceRule: String,
    recurrenceId: [String, Number],
    dataItem: Object,
    head: Boolean,
    tail: Boolean,
    order: Number,
    zonedStart: Object,
    zonedEnd: Object,
    slots: Array,
    group: Object,
    range: Object,
    isException: Boolean,
    isRecurring: Boolean,
    id: String,
    className: String,
    itemStyle: Object,
    editable: [Object, Boolean],
    selected: Boolean,
    vertical: Boolean,
    dragHint: Boolean,
    resizeHint: Boolean,
    format: String,
    ignoreIsAllDay: Boolean
  },
  inject: {
    bv: {
      default: null
    },
    ks: {
      default: null
    },
    dispatchFocusedItems: {
      default: null
    },
    dispatchFocusedSlots: {
      default: null
    },
    dispatchSelectedItems: {
      default: null
    }
  },
  provide: function provide() {
    return {
      ei: this.ei,
      ksCancel: this.handleCancel,
      ksFormSubmit: this.handleFormSubmit,
      ksOccurrenceClick: this.handleOccurrenceClick,
      ksSeriesClick: this.handleSeriesClick,
      ksRemoveConfirm: this.handleRemoveConfirm
    };
  },
  data: function data() {
    return {
      ei: {
        props: this.$props,
        form: this.$props.formItem,
        drag: this.drag,
        resize: this.resize,
        remove: this.remove,
        showRemoveDialog: this.showRemoveDialog,
        showOccurrenceDialog: this.showOccurrenceDialog
      },
      currentFormItem: null,
      currentSelected: null,
      currentSeries: null,
      currentRemoveItem: null,
      currentDragItem: null,
      currentResizeItem: null,
      currentShowRemoveDialog: null,
      currentShowOccurrenceDialog: null
      //    item: null
    };
  },

  computed: {
    currentTabIndex: function currentTabIndex() {
      var isFirst = this.bv.items.length && this.bv.items[0].dataItem.id === this.dataItem.id;
      return this.$props.tabIndex !== undefined ? this.$props.tabIndex === null ? undefined : this.$props.tabIndex : this.bv.selectedItems.length === 0 ? isFirst ? 0 : undefined : undefined;
    },
    compSelected: function compSelected() {
      return this.selected !== undefined ? this.selected : this.currentSelected;
    },
    compSeries: function compSeries() {
      return this.series !== undefined ? this.series : this.currentSeries;
    },
    compFormItem: function compFormItem() {
      return this.formItem !== undefined ? this.formItem : this.currentFormItem;
    },
    compRemoveItem: function compRemoveItem() {
      return this.removeItem !== undefined ? this.removeItem : this.currentRemoveItem;
    },
    compDragItem: function compDragItem() {
      return this.dragItem !== undefined ? this.dragItem : this.currentDragItem;
    },
    compResizeItem: function compResizeItem() {
      return this.resizeItem !== undefined ? this.resizeItem : this.currentResizeItem;
    },
    compShowRemoveDialog: function compShowRemoveDialog() {
      return this.showRemoveDialog !== undefined ? this.showRemoveDialog : this.currentShowRemoveDialog;
    },
    compShowOccurrenceDialog: function compShowOccurrenceDialog() {
      return this.showOccurrenceDialog !== undefined ? this.showOccurrenceDialog : this.currentShowOccurrenceDialog;
    },
    actionsReducerMap: function actionsReducerMap() {
      var _a;
      return _a = {}, _a[use_series_1.SERIES_ACTION.set] = this.dispatchSeries, _a[use_series_1.SERIES_ACTION.toggle] = this.dispatchSeries, _a[use_series_1.SERIES_ACTION.reset] = this.dispatchSeries, _a[use_items_selection_1.ITEMS_SELECT_ACTION.select] = this.dispatchItemSelection, _a[use_items_selection_1.ITEMS_SELECT_ACTION.add] = this.dispatchItemSelection, _a[use_items_selection_1.ITEMS_SELECT_ACTION.remove] = this.dispatchItemSelection, _a[use_items_selection_1.ITEMS_SELECT_ACTION.reset] = this.dispatchItemSelection, _a[use_items_selection_1.ITEMS_SELECT_ACTION.selectNext] = this.dispatchItemSelection, _a[use_items_selection_1.ITEMS_SELECT_ACTION.selectPrev] = this.dispatchItemSelection, _a[use_form_item_1.FORM_ITEM_ACTION.set] = this.dispatchFormItem, _a[use_form_item_1.FORM_ITEM_ACTION.setMaster] = this.dispatchFormItem, _a[use_form_item_1.FORM_ITEM_ACTION.reset] = this.dispatchFormItem, _a[use_form_item_1.FORM_ITEM_ACTION.complete] = this.dispatchFormItem, _a[use_remove_item_1.REMOVE_ITEM_ACTION.set] = this.dispatchRemoveItem, _a[use_remove_item_1.REMOVE_ITEM_ACTION.reset] = this.dispatchRemoveItem, _a[use_remove_item_1.REMOVE_ITEM_ACTION.complete] = this.dispatchRemoveItem, _a[use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close] = this.dispatchShowOccurrenceDialog, _a[use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.open] = this.dispatchShowOccurrenceDialog, _a[use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.set] = this.dispatchShowOccurrenceDialog, _a[use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.toggle] = this.dispatchShowOccurrenceDialog, _a[use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.reset] = this.dispatchShowOccurrenceDialog, _a[use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.close] = this.dispatchShowRemoveDialog, _a[use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.open] = this.dispatchShowRemoveDialog, _a[use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.set] = this.dispatchShowRemoveDialog, _a[use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.toggle] = this.dispatchShowRemoveDialog, _a[use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.reset] = this.dispatchShowRemoveDialog, _a[use_drag_item_1.DRAG_ITEM_ACTION.start] = this.dispatchDragItem, _a[use_drag_item_1.DRAG_ITEM_ACTION.drag] = this.dispatchDragItem, _a[use_drag_item_1.DRAG_ITEM_ACTION.complete] = this.dispatchDragItem, _a[use_drag_item_1.DRAG_ITEM_ACTION.completeOccurrence] = this.dispatchDragItem, _a[use_drag_item_1.DRAG_ITEM_ACTION.completeSeries] = this.dispatchDragItem, _a[use_drag_item_1.DRAG_ITEM_ACTION.set] = this.dispatchDragItem, _a[use_drag_item_1.DRAG_ITEM_ACTION.reset] = this.dispatchDragItem, _a[use_drag_item_1.DRAG_ITEM_ACTION.dragSelected] = this.dispatchDragItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.start] = this.dispatchResizeItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.startDrag] = this.dispatchResizeItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.startDragSelected] = this.dispatchResizeItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.endDrag] = this.dispatchResizeItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.endDragSelected] = this.dispatchResizeItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.complete] = this.dispatchResizeItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.completeOccurrence] = this.dispatchResizeItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.completeSeries] = this.dispatchResizeItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.set] = this.dispatchResizeItem, _a[use_resize_item_1.RESIZE_ITEM_ACTION.reset] = this.dispatchResizeItem, _a[main_1.ITEMS_FOCUS_ACTION.next] = this.dispatchViewItemsFocus, _a[main_1.ITEMS_FOCUS_ACTION.prev] = this.dispatchViewItemsFocus, _a[main_1.SLOTS_FOCUS_ACTION.left] = this.dispatchViewSlotsFocus, _a[main_1.SLOTS_FOCUS_ACTION.right] = this.dispatchViewSlotsFocus, _a[main_1.SLOTS_FOCUS_ACTION.up] = this.dispatchViewSlotsFocus, _a[main_1.SLOTS_FOCUS_ACTION.down] = this.dispatchViewSlotsFocus, _a.null = function () {}, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var defaultSlot = (0, kendo_vue_common_1.getDefaultSlots)(this);
    // tslint:enable:max-line-length
    var selected = Boolean(this.bv.selectedItems && this.bv.selectedItems.some(function (si) {
      return (0, main_2.compareItems)(si, _this, _this.ignoreIsAllDay);
    }));
    var itemRender;
    var itemRenderDefaultRendering =
    // @ts-ignore  function children
    h(SchedulerViewItem_1.SchedulerViewItem, {
      ignoreIsAllDay: this.ignoreIsAllDay,
      attrs: this.v3 ? undefined : {
        ignoreIsAllDay: this.ignoreIsAllDay,
        item: this.item,
        uid: this.uid,
        start: this.start,
        end: this.end,
        originalStart: this.originalStart,
        startTimezone: this.startTimezone,
        endTimezone: this.endTimezone,
        isAllDay: this.isAllDay,
        title: this.title,
        description: this.description,
        occurrenceId: this.occurrenceId,
        recurrenceExceptions: this.recurrenceExceptions,
        recurrenceRule: this.recurrenceRule,
        recurrenceId: this.recurrenceId,
        dataItem: this.dataItem,
        head: this.head,
        tail: this.tail,
        order: this.order,
        zonedStart: this.zonedStart,
        zonedEnd: this.zonedEnd,
        slots: this.slots,
        group: this.group,
        range: this.range,
        isException: this.isException,
        isRecurring: this.isRecurring,
        id: this.id,
        className: this.className,
        itemStyle: this.itemStyle,
        editable: this.editable,
        vertical: this.vertical,
        dragHint: this.dragHint,
        resizeHint: this.resizeHint,
        format: this.format,
        showOccurrenceDialog: this.compShowOccurrenceDialog,
        showRemoveDialog: this.compShowRemoveDialog,
        formItem: this.compFormItem,
        dragItem: this.compDragItem,
        resizeItem: this.compResizeItem,
        removeItem: this.compRemoveItem,
        itemRef: this.item,
        selected: selected,
        tabIndex: this.currentTabIndex
        // Keyboard
      },
      item: this.item,
      uid: this.uid,
      start: this.start,
      end: this.end,
      originalStart: this.originalStart,
      startTimezone: this.startTimezone,
      endTimezone: this.endTimezone,
      isAllDay: this.isAllDay,
      title: this.title,
      description: this.description,
      occurrenceId: this.occurrenceId,
      recurrenceExceptions: this.recurrenceExceptions,
      recurrenceRule: this.recurrenceRule,
      recurrenceId: this.recurrenceId,
      dataItem: this.dataItem,
      head: this.head,
      tail: this.tail,
      order: this.order,
      zonedStart: this.zonedStart,
      zonedEnd: this.zonedEnd,
      slots: this.slots,
      group: this.group,
      range: this.range,
      isException: this.isException,
      isRecurring: this.isRecurring,
      id: this.id,
      className: this.className,
      itemStyle: this.itemStyle,
      editable: this.editable,
      vertical: this.vertical,
      dragHint: this.dragHint,
      resizeHint: this.resizeHint,
      format: this.format,
      showOccurrenceDialog: this.compShowOccurrenceDialog,
      showRemoveDialog: this.compShowRemoveDialog,
      formItem: this.compFormItem,
      dragItem: this.compDragItem,
      resizeItem: this.compResizeItem,
      removeItem: this.compRemoveItem,
      itemRef: this.item,
      selected: selected,
      tabIndex: this.currentTabIndex,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown,
        "keyup": this.handleKeyUp,
        "focus": this.handleFocus,
        "mouseup": this.handleMouseUp,
        "mousedown": this.handleMouseDown,
        "click": this.handleClick,
        "doubleclick": this.handleDoubleClick,
        "removeclick": this.handleRemoveClick,
        "press": this.handlePress,
        "drag": this.handleDrag,
        "release": this.handleRelease,
        "resizepress": this.handleResizePress,
        "resizeenddrag": this.handleResizeEndDrag,
        "resizestartdrag": this.handleResizeStartDrag,
        "resizerelease": this.handleResizeRelease
      },
      onKeyup: this.handleKeyUp
      // Focus
      ,
      onFocus: this.handleFocus
      // Mouse
      ,
      onMouseup: this.handleMouseUp,
      onMousedown: this.handleMouseDown,
      onClick: this.handleClick,
      onDoubleclick: this.handleDoubleClick,
      onRemoveclick: this.handleRemoveClick
      // Drag
      ,
      onPress: this.handlePress,
      onDrag: this.handleDrag,
      onRelease: this.handleRelease
      // Resize
      ,
      onResizepress: this.handleResizePress,
      onResizeenddrag: this.handleResizeEndDrag,
      onResizestartdrag: this.handleResizeStartDrag,
      onResizerelease: this.handleResizeRelease
    });
    itemRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: this.$props.viewItem,
      defaultRendering: itemRenderDefaultRendering,
      defaultSlots: defaultSlot,
      additionalListeners: {
        //   keydown: this.handleKeyDown,
        // keyup: this.handleKeyUp,
        // Focus
        //  focus: this.handleFocus,
        // Mouse
        // mouseup: this.handleMouseUp,
        // mousedown: this.handleMouseDown,
        //  click: this.handleClick,
        doubleclick: this.handleDoubleClick,
        removeclick: this.handleRemoveClick,
        // Drag
        press: this.handlePress,
        drag: this.handleDrag,
        release: this.handleRelease,
        // Resize
        resizepress: this.handleResizePress,
        resizeenddrag: this.handleResizeEndDrag,
        resizestartdrag: this.handleResizeStartDrag,
        resizerelease: this.handleResizeRelease
      }
    });
    return itemRender;
  },
  methods: {
    dispatchSeries: function dispatchSeries(action, _event) {
      var newSeries = (0, use_series_1.seriesReducer)(this.compSeries, action);
      this.currentSeries = newSeries;
      this.$emit('serieschange', newSeries);
    },
    dispatchItemSelection: function dispatchItemSelection(action, event) {
      this.dispatchSelectedItems(action, event);
    },
    dispatchRemoveItem: function dispatchRemoveItem(action, _event) {
      var newRemoveItem;
      switch (action.type) {
        case use_remove_item_1.REMOVE_ITEM_ACTION.set:
          newRemoveItem = action.payload;
          break;
        case use_remove_item_1.REMOVE_ITEM_ACTION.reset:
          newRemoveItem = null;
          break;
        case use_remove_item_1.REMOVE_ITEM_ACTION.complete:
          if (this.compRemoveItem) {
            this.$emit('dataaction', {
              type: Scheduler_1.DATA_ACTION.remove,
              series: this.compSeries,
              dataItem: this.compRemoveItem
            });
          }
          newRemoveItem = null;
          break;
        default:
          newRemoveItem = this.compRemoveItem;
          break;
      }
      this.currentRemoveItem = newRemoveItem;
      this.$emit('removeitemchange', newRemoveItem);
    },
    dispatchShowOccurrenceDialog: function dispatchShowOccurrenceDialog(action, _event) {
      var newShowOccurrenceDialog = (0, use_show_occurrence_dialog_1.showOccurrenceDialogReducer)(this.compShowOccurrenceDialog, action);
      this.currentShowOccurrenceDialog = newShowOccurrenceDialog;
      this.$emit('showremovedialogchange', newShowOccurrenceDialog);
    },
    dispatchShowRemoveDialog: function dispatchShowRemoveDialog(action, _event) {
      var newShowRemoveDialog = (0, use_show_remove_item_dialog_1.showRemoveDialogReducer)(this.compShowRemoveDialog, action);
      this.currentShowRemoveDialog = newShowRemoveDialog;
      this.$emit('showremovedialogchange', newShowRemoveDialog);
    },
    dispatchDragItem: function dispatchDragItem(action, _event) {
      use_drag_item_1.useDragItem.call(this, action);
    },
    dispatchResizeItem: function dispatchResizeItem(action, event) {
      use_resize_item_1.useResizeItem.call(this, action, event);
    },
    dispatchViewSlotsFocus: function dispatchViewSlotsFocus(action, event) {
      this.dispatchFocusedSlots(action, event);
    },
    dispatchViewItemsFocus: function dispatchViewItemsFocus(action, event) {
      this.dispatchFocusedItems(action, event);
    },
    dispatchFormItem: function dispatchFormItem(action, _event) {
      var newFormItem;
      switch (action.type) {
        case use_form_item_1.FORM_ITEM_ACTION.set:
          newFormItem = action.payload;
          break;
        case use_form_item_1.FORM_ITEM_ACTION.reset:
          newFormItem = null;
          break;
        case use_form_item_1.FORM_ITEM_ACTION.setMaster:
          newFormItem = (0, kendo_vue_common_1.clone)((0, main_2.findMaster)(action.payload, this.ks.fields, this.ks.dataItems));
          break;
        case use_form_item_1.FORM_ITEM_ACTION.complete:
          if (this.compFormItem) {
            this.$emit('dataaction', {
              type: Scheduler_1.DATA_ACTION.update,
              series: this.compSeries,
              dataItem: action.payload
            });
            newFormItem = null;
          }
          break;
        default:
          newFormItem = this.compFormItem;
          break;
      }
      this.currentFormItem = newFormItem;
      this.$emit('formitemchange', newFormItem);
    },
    handleFocus: function handleFocus(event) {
      var _this = this;
      if (this.onFocusAction) {
        var actions = this.onFocusAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }));
        }
      }
      this.$emit('focus', event);
    },
    handleMouseDown: function handleMouseDown(event) {
      var _this = this;
      if (this.onMouseDownAction) {
        var actions = this.onMouseDownAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }));
        }
      }
      this.$emit('mousedown', event);
    },
    handleMouseUp: function handleMouseUp(event) {
      var _this = this;
      if (this.onMouseUpAction) {
        var actions = this.onMouseUpAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }));
        }
      }
      this.$emit('mouseup', event);
    },
    handleClick: function handleClick(event) {
      var _this = this;
      if (this.onClickAction) {
        var actions = this.onClickAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }));
        }
      }
      this.$emit('click', event);
    },
    handleDoubleClick: function handleDoubleClick(event) {
      if (this.onDoubleClickAction) {
        var actions = this.onDoubleClickAction(event, this.$props);
        var that_1 = this;
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && that_1.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: that_1.dataItem
            }), event);
          }) : that_1.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: that_1.dataItem
          }));
        }
      }
      this.$emit('doubleclick', event);
    },
    handleRemoveClick: function handleRemoveClick(event) {
      var _this = this;
      if (this.onRemoveClickAction) {
        var actions = this.onRemoveClickAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }));
        }
      }
      this.$emit('removeclick', event);
    },
    handlePress: function handlePress(event) {
      var _this = this;
      if (this.onPressAction) {
        var actions = this.onPressAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event);
        }
      }
      this.$emit('press', event);
    },
    handleDrag: function handleDrag(event) {
      var _this = this;
      if (this.onDragAction) {
        var actions = this.onDragAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event.dragEvent.originalEvent);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event.dragEvent.originalEvent);
        }
      }
      this.$emit('drag', event);
    },
    handleRelease: function handleRelease(event) {
      var _this = this;
      if (this.onReleaseAction) {
        var actions = this.onReleaseAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event.dragEvent.originalEvent);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event.dragEvent.originalEvent);
        }
      }
      this.$emit('release', event);
    },
    handleResizePress: function handleResizePress(event) {
      var _this = this;
      if (this.onResizePressAction) {
        var actions = this.onResizePressAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event.dragEvent.originalEvent);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event.dragEvent.originalEvent);
        }
      }
      this.$emit('resizepress', event);
    },
    handleResizeStartDrag: function handleResizeStartDrag(event) {
      var _this = this;
      if (this.onResizeStartDragAction) {
        var actions = this.onResizeStartDragAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event.dragEvent.originalEvent);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event.dragEvent.originalEvent);
        }
      }
      this.$emit('resizestartdrag', event);
    },
    handleResizeEndDrag: function handleResizeEndDrag(event) {
      var _this = this;
      if (this.onResizeEndDragAction) {
        var actions = this.onResizeEndDragAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event.dragEvent.originalEvent);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event.dragEvent.originalEvent);
        }
      }
      this.$emit('resizeenddrag', event);
    },
    handleResizeRelease: function handleResizeRelease(event) {
      var _this = this;
      if (this.onResizeReleaseAction) {
        var actions = this.onResizeReleaseAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event.dragEvent.originalEvent);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event.dragEvent.originalEvent);
        }
      }
      this.$emit('resizerelease', event);
    },
    handleFormSubmit: function handleFormSubmit(event) {
      var _this = this;
      if (this.onFormSubmitAction) {
        var actions = this.onFormSubmitAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event);
        }
      }
      this.$emit('formsubmit', event);
    },
    handleCancel: function handleCancel(event) {
      var _this = this;
      if (this.onCancelAction) {
        var actions = this.onCancelAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event);
        }
      }
      this.$emit('cancel', event);
    },
    handleOccurrenceClick: function handleOccurrenceClick(event) {
      var _this = this;
      if (this.onOccurrenceClickAction) {
        var actions = this.onOccurrenceClickAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event);
        }
      }
      this.$emit('occurrenceclick', event);
    },
    handleSeriesClick: function handleSeriesClick(event) {
      var _this = this;
      if (this.onSeriesClickAction) {
        var actions = this.onSeriesClickAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event);
        }
      }
      this.$emit('seriesclick', event);
    },
    handleKeyDown: function handleKeyDown(event) {
      var _this = this;
      if (this.onKeyDownAction) {
        var actions = this.onKeyDownAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this
            }), event.event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this
          }), event.event);
        }
      }
      this.$emit('keydown', event);
    },
    handleKeyUp: function handleKeyUp(event) {
      var _this = this;
      if (this.onKeyUpAction) {
        var actions = this.onKeyUpAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event.event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event.event);
        }
      }
      this.$emit('keyup', event);
    },
    handleRemoveConfirm: function handleRemoveConfirm(event) {
      var _this = this;
      if (this.onRemoveConfirmAction) {
        var actions = this.onRemoveConfirmAction(event, this.$props);
        if (actions) {
          Array.isArray(actions) ? actions.filter(Boolean).map(function (action) {
            return action && _this.actionsReducerMap[action.type](__assign(__assign({}, action), {
              item: _this.dataItem
            }), event.event);
          }) : this.actionsReducerMap[actions.type](__assign(__assign({}, actions), {
            item: this.dataItem
          }), event.event);
        }
      }
      this.$emit('removeconfirm', event);
    },
    onClickAction: function onClickAction(event, _) {
      return [{
        type: event.event.metaKey || event.event.ctrlKey ? this.compSelected && !this.compDragItem && !this.compResizeItem ? use_items_selection_1.ITEMS_SELECT_ACTION.remove : use_items_selection_1.ITEMS_SELECT_ACTION.add : use_items_selection_1.ITEMS_SELECT_ACTION.select
      }];
    },
    onDoubleClickAction: function onDoubleClickAction(_, props) {
      return props.editable ? [{
        type: use_form_item_1.FORM_ITEM_ACTION.set,
        payload: props.dataItem
      }, props.isRecurring && {
        type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.open
      }].filter(Boolean) : [];
    },
    onRemoveClickAction: function onRemoveClickAction(_, props) {
      return props.editable ? [{
        type: use_remove_item_1.REMOVE_ITEM_ACTION.set,
        payload: props.dataItem
      }, props.isRecurring ? {
        type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.open
      } : {
        type: use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.open
      }] : [];
    },
    onPressAction: function onPressAction(event, props) {
      return props.editable ? {
        type: use_drag_item_1.DRAG_ITEM_ACTION.start,
        payload: {
          x: event.dragEvent.clientX,
          y: event.dragEvent.clientY
        }
      } : [];
    },
    onDragAction: function onDragAction(event, props) {
      return props.editable ? {
        type: event.dragEvent.originalEvent.metaKey || event.dragEvent.originalEvent.ctrlKey ? use_drag_item_1.DRAG_ITEM_ACTION.dragSelected : use_drag_item_1.DRAG_ITEM_ACTION.drag,
        payload: {
          x: event.dragEvent.clientX,
          y: event.dragEvent.clientY
        }
      } : [];
    },
    onReleaseAction: function onReleaseAction(event, props) {
      return props.editable && this.compDragItem ? props.isRecurring && !props.isException && this.compSeries === null ? {
        type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.open
      } : {
        type: props.isRecurring ? this.compSeries ? use_drag_item_1.DRAG_ITEM_ACTION.completeSeries : use_drag_item_1.DRAG_ITEM_ACTION.completeOccurrence : use_drag_item_1.DRAG_ITEM_ACTION.complete,
        payload: {
          x: event.dragEvent.clientX,
          y: event.dragEvent.clientY
        }
      } : [];
    },
    onResizePressAction: function onResizePressAction(event, props) {
      return props.editable ? {
        type: use_resize_item_1.RESIZE_ITEM_ACTION.start,
        payload: {
          x: event.dragEvent.clientX,
          y: event.dragEvent.clientY
        }
      } : [];
    },
    onResizeStartDragAction: function onResizeStartDragAction(event, props) {
      return props.editable ? {
        type: event.dragEvent.originalEvent.metaKey || event.dragEvent.originalEvent.ctrlKey ? use_resize_item_1.RESIZE_ITEM_ACTION.startDragSelected : use_resize_item_1.RESIZE_ITEM_ACTION.startDrag,
        payload: {
          x: event.dragEvent.clientX,
          y: event.dragEvent.clientY
        }
      } : [];
    },
    onResizeEndDragAction: function onResizeEndDragAction(event, props) {
      return props.editable ? {
        type: event.dragEvent.originalEvent.metaKey || event.dragEvent.originalEvent.ctrlKey ? use_resize_item_1.RESIZE_ITEM_ACTION.endDragSelected : use_resize_item_1.RESIZE_ITEM_ACTION.endDrag,
        payload: {
          x: event.dragEvent.clientX,
          y: event.dragEvent.clientY
        }
      } : [];
    },
    onResizeReleaseAction: function onResizeReleaseAction(event, props) {
      return props.editable && this.compResizeItem ? props.isRecurring && !props.isException && this.compSeries === null ? {
        type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.open
      } : {
        type: props.isRecurring ? this.compSeries ? use_resize_item_1.RESIZE_ITEM_ACTION.completeSeries : use_resize_item_1.RESIZE_ITEM_ACTION.completeOccurrence : use_resize_item_1.RESIZE_ITEM_ACTION.complete,
        payload: {
          x: event.dragEvent.clientX,
          y: event.dragEvent.clientY
        }
      } : [];
    },
    onOccurrenceClickAction: function onOccurrenceClickAction(_event, props) {
      if (this.compDragItem) {
        return [{
          type: use_drag_item_1.DRAG_ITEM_ACTION.completeOccurrence
        }, {
          type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close
        }];
      }
      if (this.compResizeItem) {
        return [{
          type: use_resize_item_1.RESIZE_ITEM_ACTION.completeOccurrence
        }, {
          type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close
        }];
      }
      if (this.compFormItem) {
        return [{
          type: use_series_1.SERIES_ACTION.set,
          payload: false
        }, {
          type: use_form_item_1.FORM_ITEM_ACTION.set,
          payload: props.dataItem
        }, {
          type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close
        }];
      }
      if (this.compRemoveItem) {
        return [{
          type: use_series_1.SERIES_ACTION.set,
          payload: false
        }, {
          type: use_remove_item_1.REMOVE_ITEM_ACTION.set,
          payload: props.dataItem
        }, {
          type: use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.open
        }, {
          type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close
        }];
      }
    },
    onSeriesClickAction: function onSeriesClickAction(_event, props) {
      if (this.compDragItem) {
        return [{
          type: use_drag_item_1.DRAG_ITEM_ACTION.completeSeries
        }, {
          type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close
        }];
      }
      if (this.compResizeItem) {
        return [{
          type: use_resize_item_1.RESIZE_ITEM_ACTION.completeSeries
        }, {
          type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close
        }];
      }
      if (this.compFormItem) {
        return [{
          type: use_series_1.SERIES_ACTION.set,
          payload: true
        }, {
          type: use_form_item_1.FORM_ITEM_ACTION.setMaster,
          payload: props.dataItem
        }, {
          type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close
        }];
      }
      if (this.compRemoveItem) {
        return [{
          type: use_series_1.SERIES_ACTION.set,
          payload: true
        }, {
          type: use_remove_item_1.REMOVE_ITEM_ACTION.set,
          payload: props.dataItem
        }, {
          type: use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.open
        }, {
          type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close
        }];
      }
    },
    onKeyDownAction: function onKeyDownAction(event, props) {
      var nextSlot;
      switch (event.event.keyCode) {
        case kendo_vue_common_1.Keys.enter:
          return [{
            type: use_form_item_1.FORM_ITEM_ACTION.set,
            payload: props.dataItem
          }, props.isRecurring && {
            type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.open
          }];
        case kendo_vue_common_1.Keys.tab:
          return [{
            type: event.event.shiftKey ? main_1.ITEMS_FOCUS_ACTION.prev : main_1.ITEMS_FOCUS_ACTION.next,
            ignoreIsAllDay: props.ignoreIsAllDay
          }, {
            type: event.event.shiftKey ? use_items_selection_1.ITEMS_SELECT_ACTION.selectPrev : use_items_selection_1.ITEMS_SELECT_ACTION.selectNext,
            ignoreIsAllDay: props.ignoreIsAllDay
          }];
        case kendo_vue_common_1.Keys.up:
          nextSlot = this.bv.slots.find(function (s) {
            return (0, main_2.compareSlots)(s.cSlot, props.slots[0]);
          });
          return [Boolean(props.slots.length && nextSlot) && {
            type: main_1.SLOTS_FOCUS_ACTION.up,
            slot: nextSlot
          }];
        case kendo_vue_common_1.Keys.right:
          nextSlot = this.bv.slots.find(function (s) {
            return (0, main_2.compareSlots)(s.cSlot, props.slots[0]);
          });
          return [Boolean(props.slots.length && nextSlot) && {
            type: main_1.SLOTS_FOCUS_ACTION.right,
            slot: nextSlot
          }];
        case kendo_vue_common_1.Keys.down:
          nextSlot = this.bv.slots.find(function (s) {
            return (0, main_2.compareSlots)(s.cSlot, props.slots[props.slots.length - 1]);
          });
          return [Boolean(props.slots.length && nextSlot) && {
            type: main_1.SLOTS_FOCUS_ACTION.down,
            slot: nextSlot
          }];
        case kendo_vue_common_1.Keys.left:
          nextSlot = this.bv.slots.find(function (s) {
            return (0, main_2.compareSlots)(s.cSlot.cSlot, props.slots[0]);
          });
          return [Boolean(props.slots.length && nextSlot) && {
            type: main_1.SLOTS_FOCUS_ACTION.left,
            slot: nextSlot
          }];
        case kendo_vue_common_1.Keys.delete:
        case kendo_vue_common_1.Keys.backspace:
          return [{
            type: use_remove_item_1.REMOVE_ITEM_ACTION.set,
            payload: props.dataItem
          }, props.isRecurring ? {
            type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.open
          } : {
            type: use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.open
          }];
        default:
          return;
      }
    },
    onFormSubmitAction: function onFormSubmitAction(event) {
      return {
        type: use_form_item_1.FORM_ITEM_ACTION.complete,
        payload: event.value
      };
    },
    onRemoveConfirmAction: function onRemoveConfirmAction() {
      return [{
        type: use_remove_item_1.REMOVE_ITEM_ACTION.complete
      }, {
        type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.close
      }];
    },
    onCancelAction: function onCancelAction() {
      return [{
        type: use_series_1.SERIES_ACTION.reset
      }, {
        type: use_remove_item_1.REMOVE_ITEM_ACTION.reset
      }, {
        type: use_form_item_1.FORM_ITEM_ACTION.reset
      }, {
        type: use_drag_item_1.DRAG_ITEM_ACTION.reset
      }, {
        type: use_resize_item_1.RESIZE_ITEM_ACTION.reset
      }, {
        type: use_show_remove_item_dialog_1.SHOW_REMOVE_DIALOG_ACTION.reset
      }, {
        type: use_show_occurrence_dialog_1.SHOW_OCCURRENCE_DIALOG_ACTION.reset
      }];
    }
  }
};
exports.SchedulerEditItemVue2 = SchedulerEditItemVue2;
/**
 * @hidden
 */
var SchedulerEditItem = SchedulerEditItemVue2;
exports.SchedulerEditItem = SchedulerEditItem;