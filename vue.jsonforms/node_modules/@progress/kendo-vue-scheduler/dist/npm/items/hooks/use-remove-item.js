"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRemoveItem = exports.REMOVE_ITEM_ACTION = void 0;
/**
 * Represents the available `action` types for the `SchedulerItemRemoveItemAction` objects.
 *
 * The available types are:
 * - `REMOVE_ITEM_SET`
 * - `REMOVE_ITEM_RESET`
 * - `REMOVE_ITEM_COMPLETE`
 */
var REMOVE_ITEM_ACTION;
(function (REMOVE_ITEM_ACTION) {
  REMOVE_ITEM_ACTION["set"] = "REMOVE_ITEM_SET";
  REMOVE_ITEM_ACTION["reset"] = "REMOVE_ITEM_RESET";
  REMOVE_ITEM_ACTION["complete"] = "REMOVE_ITEM_COMPLETE";
})(REMOVE_ITEM_ACTION = exports.REMOVE_ITEM_ACTION || (exports.REMOVE_ITEM_ACTION = {}));
/** @hidden */
var useRemoveItem = function useRemoveItem(_config, _state) {
  // const [removeItem, setRemoveItem] = useControlledState<DataItem | null>(...state);
  // const handleRemoveItemAction = (action: SchedulerItemRemoveItemAction) => {
  //     let newRemoveItem;
  //     switch(action.type) {
  //         case REMOVE_ITEM_ACTION.set:
  //             newRemoveItem = action.payload;
  //             break;
  //         case REMOVE_ITEM_ACTION.reset:
  //             newRemoveItem = null;
  //             break;
  //         case REMOVE_ITEM_ACTION.complete:
  //             if(config.onDataAction && removeItem) {
  //                 config.onDataAction.call(undefined,{
  //                     type: DATA_ACTION.remove,
  //                     series: config.series,
  //                     dataItem: removeItem
  //                 });
  //             }
  //             newRemoveItem = null;
  //             break;
  //         default:
  //             newRemoveItem = removeItem;
  //             break;
  //     }
  //     setRemoveItem(newRemoveItem);
  // };
  // return [removeItem, setRemoveItem, handleRemoveItemAction];
  return [];
};
exports.useRemoveItem = useRemoveItem;