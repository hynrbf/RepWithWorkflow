"use strict";

var __spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDragItem = exports.DRAG_ITEM_ACTION = void 0;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var main_1 = require("../../main");
var main_2 = require("../../utils/main");
/**
 * Represents the available `action` types for the `SchedulerItemDragItemAction` objects.
 *
 * The available types are:
 * - `DRAG_ITEM_SET'`
 * - `DRAG_ITEM_START'`
 * - `DRAG_ITEM_DRAG'`
 * - `DRAG_ITEM_COMPLETE'`
 * - `DRAG_ITEM_COMPLETE_OCCURRENCE'`
 * - `DRAG_ITEM_COMPLETE_SERIES'`
 * - `DRAG_ITEM_RESET'`
 * - `DRAG_ITEM_DRAG_SELECTED`
 */
var DRAG_ITEM_ACTION;
(function (DRAG_ITEM_ACTION) {
  DRAG_ITEM_ACTION["set"] = "DRAG_ITEM_SET";
  DRAG_ITEM_ACTION["start"] = "DRAG_ITEM_START";
  DRAG_ITEM_ACTION["drag"] = "DRAG_ITEM_DRAG";
  DRAG_ITEM_ACTION["complete"] = "DRAG_ITEM_COMPLETE";
  DRAG_ITEM_ACTION["completeOccurrence"] = "DRAG_ITEM_COMPLETE_OCCURRENCE";
  DRAG_ITEM_ACTION["completeSeries"] = "DRAG_ITEM_COMPLETE_SERIES";
  DRAG_ITEM_ACTION["reset"] = "DRAG_ITEM_RESET";
  DRAG_ITEM_ACTION["dragSelected"] = "DRAG_ITEM_DRAG_SELECTED";
})(DRAG_ITEM_ACTION = exports.DRAG_ITEM_ACTION || (exports.DRAG_ITEM_ACTION = {}));
var offset = 0;
var initialXRef = 0;
var initialYRef = 0;
var oldSlot = null;
/** @hidden */
var useDragItem = function useDragItem(action) {
  var _this = this;
  var dataItem = (0, kendo_vue_common_1.clone)(this.dataItem);
  switch (action.type) {
    case DRAG_ITEM_ACTION.set:
      {
        this.currentDragItem = action.payload;
        break;
      }
    case DRAG_ITEM_ACTION.reset:
      {
        this.currentDragItem = null;
        break;
      }
    case DRAG_ITEM_ACTION.dragSelected:
      {
        if (Math.abs(initialXRef - action.payload.x) < 10 && Math.abs(initialYRef - action.payload.y) < 10) {
          return;
        }
        var slot = (0, main_2.slotDive)(action.payload.x, action.payload.y, 7);
        if (!slot) {
          return;
        }
        if (slot === oldSlot) {
          return;
        }
        var slotStart = slot.getAttribute('data-slot-start');
        var slotIsAllDay = slot.getAttribute('data-slot-allday') === 'true';
        if (!this.ignoreIsAllDay && slotIsAllDay !== this.isAllDay) {
          return;
        }
        var itemStart = new Date((0, main_2.getField)(dataItem, this.ks.fields.start));
        var distance_1 = Number(slotStart) - itemStart.getTime();
        var newDragItems = this.bv.selectedItems.map(function (si) {
          if (!si) {
            return null;
          }
          var selectedDataItem = (0, kendo_vue_common_1.clone)(si.props.dataItem);
          var selectedStart = new Date(si.props.start.getTime() + distance_1);
          var selectedEnd = new Date(si.props.end.getTime() + distance_1);
          (0, main_2.setField)(selectedDataItem, _this.ks.fields.start, selectedStart);
          (0, main_2.setField)(selectedDataItem, _this.ks.fields.end, selectedEnd);
          return selectedDataItem;
        }).filter(Boolean);
        oldSlot = slot;
        this.currentDragItem = __spreadArray([], newDragItems, true);
        break;
      }
    case DRAG_ITEM_ACTION.start:
      {
        var clientX = action.payload.x;
        var clientY = action.payload.y;
        initialXRef = clientX;
        initialYRef = clientY;
        var slot = (0, main_2.slotDive)(clientX, clientY, 7);
        if (!slot) {
          return;
        }
        var slotStart = slot.getAttribute('data-slot-start');
        var itemStart = (0, main_2.getField)(dataItem, this.ks.fields.start);
        if (slotStart === null) {
          return;
        }
        offset = Number(slotStart) - new Date(itemStart).getTime();
        break;
      }
    case DRAG_ITEM_ACTION.drag:
      {
        if (Math.abs(initialXRef - action.payload.x) < 10 && Math.abs(initialYRef - action.payload.y) < 10) {
          return;
        }
        var slot = (0, main_2.slotDive)(action.payload.x, action.payload.y, 7);
        if (!slot) {
          return;
        }
        if (slot === oldSlot) {
          return;
        }
        var slotStart = slot.getAttribute('data-slot-start');
        var slotGroupIndex_1 = slot.getAttribute('data-slot-group');
        var slotIsAllDay = slot.getAttribute('data-slot-allday') === 'true';
        if (!this.ignoreIsAllDay && slotIsAllDay !== this.isAllDay) {
          return;
        }
        var itemStart = new Date((0, main_2.getField)(dataItem, this.ks.fields.start));
        var itemEnd = new Date((0, main_2.getField)(dataItem, this.ks.fields.end));
        var duration = itemEnd.getTime() - itemStart.getTime();
        var start = new Date(Number(slotStart) - Number(offset));
        var end = new Date(Number(slotStart) - Number(offset) + duration);
        var group = this.ks.groups.find(function (g) {
          return g.index === Number(slotGroupIndex_1);
        });
        (0, main_2.setField)(dataItem, this.ks.fields.start, start);
        (0, main_2.setField)(dataItem, this.ks.fields.end, end);
        if (group && this.ks.groups.length > 1) {
          group.resources.forEach(function (resource) {
            if (!resource.multiple) {
              (0, main_2.setField)(dataItem, resource.field, resource[resource.valueField]);
            }
          });
        }
        oldSlot = slot;
        if (dataItem) {
          this.currentDragItem = dataItem;
        }
        break;
      }
    case DRAG_ITEM_ACTION.complete:
      {
        var currentDataItem = this.compDragItem;
        this.currentDragItem = null;
        if (currentDataItem) {
          this.$emit('dataaction', {
            type: main_1.DATA_ACTION.update,
            series: false,
            dataItem: currentDataItem
          });
        }
        break;
      }
    case DRAG_ITEM_ACTION.completeOccurrence:
      {
        var newDataItem = Array.isArray(this.compDragItem) ? this.compDragItem.slice() : (0, kendo_vue_common_1.clone)(this.compDragItem);
        var currentDataItem = this.compDragItem;
        this.currentDragItem = null;
        if (currentDataItem) {
          this.$emit('dataaction', {
            type: main_1.DATA_ACTION.update,
            series: false,
            dataItem: newDataItem
          });
        }
        break;
      }
    case DRAG_ITEM_ACTION.completeSeries:
      {
        var newDataItems = void 0;
        if (Array.isArray(this.compDragItem)) {
          newDataItems = this.compDragItem.map(function (di) {
            var updated = (0, kendo_vue_common_1.clone)(di);
            (0, main_2.setField)(updated, _this.ks.fields.start, (0, main_2.getField)(di, _this.ks.fields.start));
            (0, main_2.setField)(updated, _this.ks.fields.end, (0, main_2.getField)(di, _this.ks.fields.end));
            return updated;
          });
        } else {
          var updated = (0, kendo_vue_common_1.clone)(this.compDragItem);
          (0, main_2.setField)(updated, this.ks.fields.start, (0, main_2.getField)(this.compDragItem, this.ks.fields.start));
          (0, main_2.setField)(updated, this.ks.fields.end, (0, main_2.getField)(this.compDragItem, this.ks.fields.end));
          newDataItems = updated;
        }
        this.currentDragItem = null;
        if (newDataItems) {
          this.$emit('dataaction', {
            type: main_1.DATA_ACTION.update,
            series: true,
            dataItem: newDataItems
          });
        }
        break;
      }
    default:
      this.currentDragItem = this.compDragItem;
      break;
  }
  this.$emit('dragitemchange', this.currentDragItem);
};
exports.useDragItem = useDragItem;