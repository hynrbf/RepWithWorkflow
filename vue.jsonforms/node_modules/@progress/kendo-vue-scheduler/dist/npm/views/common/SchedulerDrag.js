"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchedulerDragVue2 = exports.SchedulerDrag = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var main_1 = require("../../services/main");
var SchedulerItem_1 = require("../../items/SchedulerItem");
var SchedulerViewItem_1 = require("../../items/SchedulerViewItem");
var main_2 = require("../../utils/main");
/** @hidden */
var SchedulerDragVue2 = {
  name: 'KendoSchedulerDrag',
  inheritAttrs: false,
  props: {
    ignoreIsAllDay: Boolean,
    dataItem: Object,
    vertical: Boolean,
    viewItem: [String, Function, Object],
    item: {
      type: Object,
      default: function _default() {
        return SchedulerItem_1.SchedulerItem;
      }
    }
  },
  inject: {
    ks: {
      default: null
    },
    bv: {
      default: null
    }
  },
  computed: {
    occurrences: function occurrences() {
      return (0, main_1.toOccurrences)([this.$props.dataItem], {
        dateRange: this.ks.dateRange,
        fields: this.ks.fields,
        timezone: this.ks.timezone
      });
    },
    items: function items() {
      return (0, main_1.toItems)(this.occurrences, {
        timezone: this.ks.timezone
      }, {
        groups: this.ks.groups,
        ranges: this.bv.ranges
      });
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var slots = (this.bv.slots || []).map(function (s) {
      return s;
    });
    (0, main_2.mapItemsToSlots)(this.items, slots);
    var itemsToRender = this.v3 ? this.items : this.items && this.items.length ? [this.items[0]] : [];
    if (!itemsToRender.length) {
      return null;
    }
    return itemsToRender.map(function (item, idx) {
      return h(SchedulerViewItem_1.SchedulerViewItem, {
        key: idx,
        uid: item.uid,
        attrs: this.v3 ? undefined : {
          uid: item.uid,
          start: item.start,
          end: item.end,
          originalStart: item.originalStart,
          startTimezone: item.startTimezone,
          endTimezone: item.endTimezone,
          isAllDay: item.isAllDay,
          title: item.title,
          description: item.description,
          occurrenceId: item.occurrenceId,
          recurrenceExceptions: item.recurrenceExceptions,
          recurrenceRule: item.recurrenceRule,
          recurrenceId: item.recurrenceId,
          dataItem: item.dataItem,
          itemRef: item.itemRef,
          head: item.head,
          tail: item.tail,
          order: item.order,
          zonedStart: item.zonedStart,
          zonedEnd: item.zonedEnd,
          slots: item.slots,
          group: item.group,
          range: item.range,
          isException: item.isException,
          isRecurring: item.isRecurring
          //   item={this.$props.item}
          ,
          dragHint: true,
          vertical: this.$props.vertical,
          ignoreIsAllDay: this.$props.ignoreIsAllDay
        },
        start: item.start,
        end: item.end,
        originalStart: item.originalStart,
        startTimezone: item.startTimezone,
        endTimezone: item.endTimezone,
        isAllDay: item.isAllDay,
        title: item.title,
        description: item.description,
        occurrenceId: item.occurrenceId,
        recurrenceExceptions: item.recurrenceExceptions,
        recurrenceRule: item.recurrenceRule,
        recurrenceId: item.recurrenceId,
        dataItem: item.dataItem,
        itemRef: item.itemRef,
        head: item.head,
        tail: item.tail,
        order: item.order,
        zonedStart: item.zonedStart,
        zonedEnd: item.zonedEnd,
        slots: item.slots,
        group: item.group,
        range: item.range,
        isException: item.isException,
        isRecurring: item.isRecurring,
        dragHint: true,
        vertical: this.$props.vertical,
        ignoreIsAllDay: this.$props.ignoreIsAllDay
      });
    }, this);
  }
};
exports.SchedulerDragVue2 = SchedulerDragVue2;
var SchedulerDrag = SchedulerDragVue2;
exports.SchedulerDrag = SchedulerDrag;