"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimelineViewBodyVue2 = exports.TimelineViewBody = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var SchedulerEditSlot_1 = require("../../slots/SchedulerEditSlot");
var main_1 = require("../../utils/main");
var CurrentTimeMarker_1 = require("../../components/CurrentTimeMarker");
/** @hidden */
var TimelineViewBodyVue2 = {
  name: 'KendoTimelineViewBody',
  props: {
    currentTimeMarker: {
      type: Boolean,
      default: true
    },
    groupIndex: Number,
    timelineSlots: Array,
    ranges: Array,
    workDayStart: Date,
    workDayEnd: Date,
    editable: [Object, Boolean],
    slotRender: [String, Function, Object],
    viewSlot: [String, Function, Object]
  },
  inject: {
    ri: {
      default: null
    },
    ks: {
      default: null
    },
    setSlots: {
      default: null
    }
  },
  provide: function provide() {
    return {
      ksSlots: this.ksSlots
    };
  },
  data: function data() {
    var timelineSlots = this.timelineSlots;
    var groupIndex = this.groupIndex !== undefined ? this.groupIndex : this.ri.groupIndex;
    return {
      ksSlots: {
        cSlots: this.calculateRanges(timelineSlots, groupIndex, this.ranges)
      }
    };
  },
  watch: {
    currentCellSlots: function currentCellSlots(newValue) {
      this.ksSlots.cSlots = newValue;
    }
  },
  computed: {
    currentCellSlots: function currentCellSlots() {
      var timelineSlots = this.timelineSlots;
      var groupIndex = this.groupIndex !== undefined ? this.groupIndex : this.ri.groupIndex;
      return this.calculateRanges(timelineSlots, groupIndex, this.ranges);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var that = this;
    var orientation = this.ks.orientation;
    var ranges = this.ranges;
    var groupIndex = this.groupIndex !== undefined ? this.groupIndex : this.ri.groupIndex;
    var editable = this.$props.editable;
    return h("div", {
      "class": "k-scheduler-row"
    }, [this.currentCellSlots.map(function (cSlot, slotIndex, filtered) {
      return h(SchedulerEditSlot_1.SchedulerEditSlot, {
        slotRender: that.$props.slotRender,
        attrs: this.v3 ? undefined : {
          slotRender: that.$props.slotRender,
          viewSlot: that.$props.viewSlot,
          index: slotIndex,
          form: that.$props.form,
          isWorkHour: (0, main_1.isInTimeRange)(cSlot.zonedStart, that.workDayStart, that.workDayEnd),
          col: orientation === 'horizontal' ? cSlot.range.index * filtered.length + slotIndex + filtered.length * ranges.length * (groupIndex || 0) : cSlot.range.index * filtered.length + slotIndex,
          row: orientation === 'horizontal' ? 0 : groupIndex || 0,
          expandable: true,
          editable: editable
        },
        viewSlot: that.$props.viewSlot,
        index: slotIndex,
        form: that.$props.form,
        onDataaction: that.handleDataAction,
        on: this.v3 ? undefined : {
          "dataaction": that.handleDataAction
        },
        isWorkHour: (0, main_1.isInTimeRange)(cSlot.zonedStart, that.workDayStart, that.workDayEnd),
        col: orientation === 'horizontal' ? cSlot.range.index * filtered.length + slotIndex + filtered.length * ranges.length * (groupIndex || 0) : cSlot.range.index * filtered.length + slotIndex,
        row: orientation === 'horizontal' ? 0 : groupIndex || 0,
        expandable: true,
        editable: editable
      });
    }, this), this.$props.currentTimeMarker && (0, main_1.intersects)((0, main_1.first)(ranges).start, (0, main_1.last)(ranges).end, new Date(), new Date(), true) && h(CurrentTimeMarker_1.CurrentTimeMarker, {
      groupIndex: groupIndex,
      attrs: this.v3 ? undefined : {
        groupIndex: groupIndex,
        vertical: true
      },
      vertical: true
    })]);
  },
  methods: {
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    },
    calculateRanges: function calculateRanges(timelineSlots, groupIndex, ranges) {
      return ranges.map(function (_, rangeIndex) {
        return timelineSlots.filter(function (s) {
          return s.group.index === groupIndex && s.range.index === rangeIndex;
        });
      }).flat();
    }
  }
};
exports.TimelineViewBodyVue2 = TimelineViewBodyVue2;
/** @hidden */
var TimelineViewBody = TimelineViewBodyVue2;
exports.TimelineViewBody = TimelineViewBody;