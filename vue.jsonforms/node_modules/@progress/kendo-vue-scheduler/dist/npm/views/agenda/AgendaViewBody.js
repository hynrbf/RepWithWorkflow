"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AgendaViewBodyVue2 = exports.AgendaViewBody = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var SchedulerEditSlot_1 = require("../../slots/SchedulerEditSlot");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var SchedulerEditTask_1 = require("../../tasks/SchedulerEditTask");
var main_1 = require("../../messages/main");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * @hidden
 */
var AgendaViewBodyVue2 = {
  name: 'KendoAgendaViewBody',
  props: {
    items: Array,
    rangeIndex: Number,
    itemsPerSlot: Number,
    agendaSlots: Array,
    task: [String, Function, Object],
    editable: [Object, Boolean]
  },
  inject: {
    ri: {
      default: null
    },
    ks: {
      default: null
    },
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    },
    setSlots: {
      default: null
    }
  },
  provide: function provide() {
    return {
      ksSlots: this.ksSlots
    };
  },
  data: function data() {
    var _this = this;
    return {
      hasMounted: false,
      ksSlots: {
        cSlots: this.agendaSlots.filter(function (slot) {
          return slot.group.index === (_this.ri.groupIndex || 0);
        })
      }
    };
  },
  watch: {
    currentCellSlots: function currentCellSlots(newValue) {
      this.ksSlots.cSlots = newValue;
    }
  },
  computed: {
    currentCellSlots: function currentCellSlots() {
      var _this = this;
      return this.agendaSlots.filter(function (slot) {
        return slot.group.index === (_this.ri.groupIndex || 0);
      });
    }
  },
  mounted: function mounted() {
    this.hasMounted = true;
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    this.intl = (0, kendo_vue_intl_1.provideIntlService)(this);
    var EditSlot = this.$props.editSlot || SchedulerEditSlot_1.SchedulerEditSlot;
    var EditTask = this.$props.editTask || SchedulerEditTask_1.SchedulerEditTask;
    var localization = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    return h("div", {
      "class": "k-scheduler-body"
    }, [this.currentCellSlots.map(function (slot, slotIndex, filtered) {
      var _this2 = this;
      return h("div", {
        "class": "k-scheduler-row  k-scheduler-content",
        key: "".concat(this.ri.groupIndex, ":").concat(slotIndex)
      }, [
      // @ts-ignore  function children
      h(EditSlot, {
        index: slotIndex,
        attrs: this.v3 ? undefined : {
          index: slotIndex,
          editable: this.$props.editable,
          row: filtered.length * (this.ri.groupIndex || 0) + slotIndex,
          col: 0,
          viewSlot: this.$props.viewSlot
        },
        editable: this.$props.editable,
        row: filtered.length * (this.ri.groupIndex || 0) + slotIndex,
        col: 0,
        viewSlot: this.$props.viewSlot,
        onDataaction: this.handleDataAction,
        on: this.v3 ? undefined : {
          "dataaction": this.handleDataAction
        },
        "class": "k-scheduler-datecolumn k-group-cell"
      }, this.v3 ? function () {
        return [h("div", [h("strong", {
          "class": "k-scheduler-agendaday"
        }, [_this2.intl.formatDate(slot.zonedStart, 'dd')]), h("em", {
          "class": "k-scheduler-agendaweek"
        }, [_this2.intl.formatDate(slot.zonedStart, 'EEEE')]), h("span", {
          "class": "k-scheduler-agendadate"
        }, [_this2.intl.formatDate(slot.zonedStart, 'y')])])];
      } : [h("div", [h("strong", {
        "class": "k-scheduler-agendaday"
      }, [_this2.intl.formatDate(slot.zonedStart, 'dd')]), h("em", {
        "class": "k-scheduler-agendaweek"
      }, [_this2.intl.formatDate(slot.zonedStart, 'EEEE')]), h("span", {
        "class": "k-scheduler-agendadate"
      }, [_this2.intl.formatDate(slot.zonedStart, 'y')])])]), h("div", {
        "class": "k-scheduler-cell k-group-content"
      }, [this.hasMounted && slot.items.length ? slot.items.map(function (item, itemIndex) {
        return h("div", {
          "class": "k-scheduler-row",
          key: itemIndex
        }, [h("div", {
          "class": "k-scheduler-cell k-scheduler-timecolumn"
        }, [h("div", [item.tail && h(kendo_vue_common_1.Icon, {
          name: this.ks.isRtl ? 'caret-alt-right' : 'caret-alt-left',
          attrs: this.v3 ? undefined : {
            name: this.ks.isRtl ? 'caret-alt-right' : 'caret-alt-left',
            icon: this.ks.isRtl ? kendo_svg_icons_1.caretAltRightIcon : kendo_svg_icons_1.caretAltLeftIcon
          },
          icon: this.ks.isRtl ? kendo_svg_icons_1.caretAltRightIcon : kendo_svg_icons_1.caretAltLeftIcon
        }), item.isAllDay ? localization.toLanguageString(main_1.allDay, main_1.messages[main_1.allDay]) : getTimeFormat(this.intl, item), item.head && h(kendo_vue_common_1.Icon, {
          name: this.ks.isRtl ? 'caret-alt-left' : 'caret-alt-right',
          attrs: this.v3 ? undefined : {
            name: this.ks.isRtl ? 'caret-alt-left' : 'caret-alt-right',
            icon: this.ks.isRtl ? kendo_svg_icons_1.caretAltLeftIcon : kendo_svg_icons_1.caretAltRightIcon
          },
          icon: this.ks.isRtl ? kendo_svg_icons_1.caretAltLeftIcon : kendo_svg_icons_1.caretAltRightIcon
        })])]), h("div", {
          "class": "k-scheduler-cell"
        }, [h(EditTask, {
          key: "".concat(slotIndex, ":").concat(itemIndex),
          uid: item.uid,
          attrs: this.v3 ? undefined : {
            uid: item.uid,
            start: item.start,
            end: item.end,
            originalStart: item.originalStart,
            startTimezone: item.startTimezone,
            endTimezone: item.endTimezone,
            isAllDay: item.isAllDay,
            title: item.title,
            description: item.description,
            occurrenceId: item.occurrenceId,
            recurrenceExceptions: item.recurrenceExceptions,
            recurrenceRule: item.recurrenceRule,
            recurrenceId: item.recurrenceId,
            dataItem: item.dataItem,
            itemRef: item.itemRef,
            head: item.head,
            tail: item.tail,
            order: item.order,
            zonedStart: item.zonedStart,
            zonedEnd: item.zonedEnd,
            slots: item.slots,
            group: item.group,
            range: item.range,
            isException: item.isException,
            isRecurring: item.isRecurring,
            task: this.$props.task,
            viewTask: this.$props.viewTask,
            editable: this.$props.editable
          },
          start: item.start,
          end: item.end,
          originalStart: item.originalStart,
          startTimezone: item.startTimezone,
          endTimezone: item.endTimezone,
          isAllDay: item.isAllDay,
          title: item.title,
          description: item.description,
          occurrenceId: item.occurrenceId,
          recurrenceExceptions: item.recurrenceExceptions,
          recurrenceRule: item.recurrenceRule,
          recurrenceId: item.recurrenceId,
          dataItem: item.dataItem,
          itemRef: item.itemRef,
          head: item.head,
          tail: item.tail,
          order: item.order,
          zonedStart: item.zonedStart,
          zonedEnd: item.zonedEnd,
          slots: item.slots,
          group: item.group,
          range: item.range,
          isException: item.isException,
          isRecurring: item.isRecurring,
          onDataaction: this.handleDataAction,
          on: this.v3 ? undefined : {
            "dataaction": this.handleDataAction
          },
          task: this.$props.task,
          viewTask: this.$props.viewTask,
          editable: this.$props.editable
        })])]);
      }, this) : h("div", {
        "class": "k-scheduler-cell k-heading-cell k-group-cell"
      }, [localization.toLanguageString(main_1.noEvents, main_1.messages[main_1.noEvents])])])]);
    }, this)]);
  },
  methods: {
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    }
  }
};
exports.AgendaViewBodyVue2 = AgendaViewBodyVue2;
var getTimeFormat = function getTimeFormat(intl, props) {
  var format = '{0:t}-{1:t}';
  if (props.head) {
    format = '{0:t}';
  } else if (props.tail) {
    format = '{1:t}';
  }
  return intl.format(format, props.zonedStart, props.zonedEnd);
};
/**
 * @hidden
 */
var AgendaViewBody = AgendaViewBodyVue2;
exports.AgendaViewBody = AgendaViewBody;