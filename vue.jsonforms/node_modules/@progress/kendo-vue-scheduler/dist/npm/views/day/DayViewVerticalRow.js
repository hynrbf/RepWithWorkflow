"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DayViewVerticalRowVue2 = exports.DayViewVerticalRow = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var MultiDayView_1 = require("./MultiDayView");
var SchedulerEditSlot_1 = require("../../slots/SchedulerEditSlot");
var DayViewAllDayRowContent_1 = require("./DayViewAllDayRowContent");
var FIRST_INDEX = 0;
/** @hidden */
var DayViewVerticalRowVue2 = {
  name: 'KendoDayViewVerticalRow',
  props: {
    editable: [Object, Boolean],
    dayRanges: Array,
    daySlots: Array,
    timeSlots: Array
  },
  inject: {
    ri: {
      default: null
    },
    setSlots: {
      default: null
    }
  },
  provide: function provide() {
    return {
      ksSlots: this.ksSlots
    };
  },
  data: function data() {
    var daySlots = this.daySlots;
    var groupIndex = this.ri.groupIndex;
    return {
      ksSlots: {
        cSlots: this.calculateRanges(daySlots, groupIndex, this.dayRanges)
      }
    };
  },
  watch: {
    currentCellSlots: function currentCellSlots(newValue) {
      this.ksSlots.cSlots = newValue;
    }
  },
  computed: {
    currentCellSlots: function currentCellSlots() {
      var daySlots = this.daySlots;
      var groupIndex = this.ri.groupIndex;
      return this.calculateRanges(daySlots, groupIndex, this.dayRanges);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var EditSlot = this.$props.editSlot || SchedulerEditSlot_1.SchedulerEditSlot;
    var groupIndex = this.ri.groupIndex;
    var timeSlots = this.$props.timeSlots;
    return h("div", {
      "class": "k-scheduler-row"
    }, [h(DayViewAllDayRowContent_1.DayViewAllDayRowContent, {
      groupIndex: groupIndex,
      attrs: this.v3 ? undefined : {
        groupIndex: groupIndex
      }
    }), this.currentCellSlots.map(function (_slot, slotIndex) {
      var groupOffset = timeSlots.filter(function (s) {
        return s.group.index === groupIndex && s.range.index === FIRST_INDEX;
      }).length;
      return h(EditSlot, {
        slotRender: this.$props.slotRender,
        attrs: this.v3 ? undefined : {
          slotRender: this.$props.slotRender,
          viewSlot: this.$props.viewSlot,
          form: this.$props.form,
          index: slotIndex,
          row: groupOffset * (groupIndex || 0) + (groupIndex || 0) * MultiDayView_1.GRID_OFFSET,
          col: slotIndex,
          expandable: true,
          editable: this.$props.editable
        },
        viewSlot: this.$props.viewSlot,
        form: this.$props.form,
        index: slotIndex,
        onDataaction: this.handleDataAction,
        on: this.v3 ? undefined : {
          "dataaction": this.handleDataAction
        },
        "class": 'k-scheduler-alldays-slot',
        row: groupOffset * (groupIndex || 0) + (groupIndex || 0) * MultiDayView_1.GRID_OFFSET,
        col: slotIndex,
        expandable: true,
        editable: this.$props.editable
      });
    }, this)]);
  },
  methods: {
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    },
    calculateRanges: function calculateRanges(daySlots, groupIndex, dayRanges) {
      return dayRanges.map(function (_, rangeIndex) {
        return daySlots.filter(function (s) {
          return s.group.index === groupIndex && s.range.index === rangeIndex;
        });
      }).flat();
    }
  }
};
exports.DayViewVerticalRowVue2 = DayViewVerticalRowVue2;
/** @hidden */
var DayViewVerticalRow = DayViewVerticalRowVue2;
exports.DayViewVerticalRow = DayViewVerticalRow;