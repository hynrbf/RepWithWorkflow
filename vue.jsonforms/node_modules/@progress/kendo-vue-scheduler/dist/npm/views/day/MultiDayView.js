"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiDayViewDateRange = exports.MultiDayViewVue2 = exports.MultiDayView = exports.GRID_OFFSET = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_date_math_1 = require("@progress/kendo-date-math");
var BaseView_1 = require("../../components/BaseView");
var HorizontalResourceIterator_1 = require("../common/HorizontalResourceIterator");
var DayViewGroupRowContent_1 = require("./DayViewGroupRowContent");
var VerticalResourceIterator_1 = require("../common/VerticalResourceIterator");
var DayViewAllDayRowContent_1 = require("./DayViewAllDayRowContent");
var DayViewRowContent_1 = require("./DayViewRowContent");
var DayViewMiddleRow_1 = require("./DayViewMiddleRow");
var DayViewVerticalRow_1 = require("./DayViewVerticalRow");
var DayViewHead_1 = require("./DayViewHead");
var DayViewAllDaySlots_1 = require("./DayViewAllDaySlots");
var main_1 = require("../../utils/main");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_2 = require("../../constants/main");
var main_3 = require("../../services/main");
var SchedulerDrag_1 = require("../../views/common/SchedulerDrag");
var SchedulerEditSlot_1 = require("../../slots/SchedulerEditSlot");
var SchedulerEditItem_1 = require("../../items/SchedulerEditItem");
var CurrentTimeMarker_1 = require("../../components/CurrentTimeMarker");
var CurrentTimeMarkerArrow_1 = require("../../components/CurrentTimeMarkerArrow");
var SchedulerResize_1 = require("../common/SchedulerResize");
var FIRST_INDEX = 0;
/** @hidden */
exports.GRID_OFFSET = 1;
/** @hidden */
var MultiDayViewVue2 = {
  name: 'KendoMultiDayView',
  props: {
    name: {
      type: String,
      default: 'multi-day'
    },
    title: {
      type: String,
      default: 'Multi Day'
    },
    currentTimeMarker: {
      type: Boolean,
      default: true
    },
    dateRange: {
      type: [Function, Object],
      default: function _default() {
        return multiDayViewDateRange;
      }
    },
    numberOfDays: {
      type: Number,
      default: 1
    },
    startTime: {
      type: String,
      default: '00:00'
    },
    endTime: {
      type: String,
      default: '23:59'
    },
    workDayStart: {
      type: String,
      default: '08:00'
    },
    workDayEnd: {
      type: String,
      default: '17:00'
    },
    workWeekStart: {
      type: Number,
      default: kendo_date_math_1.Day.Monday
    },
    workWeekEnd: {
      type: Number,
      default: kendo_date_math_1.Day.Friday
    },
    step: {
      type: Number,
      default: 1
    },
    slotDivisions: {
      type: Number,
      default: 2
    },
    slotDuration: {
      type: Number,
      default: 60
    },
    showWorkHours: {
      type: Boolean,
      default: true
    },
    selectedDateFormat: {
      type: String,
      default: '{0:D} - {1:D}'
    },
    selectedShortDateFormat: {
      type: String,
      default: '{0:d} - {1:d}'
    },
    dragItem: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    resizeItem: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    format: {
      type: String,
      default: 't'
    },
    defaultShowWorkHours: {
      type: Boolean,
      default: true
    },
    dateHeaderCell: [String, Function, Object],
    timeHeaderCell: [String, Function, Object],
    slotRender: [String, Function, Object],
    viewSlot: [String, Function, Object],
    resizeHint: [String, Function, Object],
    item: [String, Function, Object],
    viewItem: [String, Function, Object],
    editable: {
      type: [Boolean, Object],
      default: false
    }
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    ks: {
      default: null
    }
  },
  computed: {
    viewStart: function viewStart() {
      this.intl = (0, kendo_vue_intl_1.provideIntlService)(this);
      var workDayStart = this.intl.parseDate(this.$props.workDayStart);
      var startTime = this.intl.parseDate(this.$props.startTime);
      return (this.ks.showWorkHours !== undefined ? this.ks.showWorkHours : this.showWorkHours) ? workDayStart : startTime;
    },
    viewEnd: function viewEnd() {
      this.intl = (0, kendo_vue_intl_1.provideIntlService)(this);
      var workDayEnd = this.intl.parseDate(this.$props.workDayEnd);
      var endTime = this.intl.parseDate(this.$props.endTime);
      return (this.ks.showWorkHours !== undefined ? this.ks.showWorkHours : this.showWorkHours) ? workDayEnd : endTime;
    },
    dayRanges: function dayRanges() {
      return (0, main_3.toRanges)(this.ks.dateRange, {
        step: kendo_date_math_1.MS_PER_DAY * this.numberOfDays,
        timezone: this.ks.timezone
      }).map(function (r) {
        return __assign(__assign({}, r), {
          isAllDay: true
        });
      });
    },
    timeRanges: function timeRanges() {
      return (0, main_3.toRanges)(this.ks.dateRange, {
        step: kendo_date_math_1.MS_PER_DAY,
        timezone: this.ks.timezone
      }).map(function (r) {
        return __assign(__assign({}, r), {
          isAllDay: false
        });
      });
    },
    daySlots: function daySlots() {
      return (0, main_3.toSlots)(this.ks.dateRange, {
        step: kendo_date_math_1.MS_PER_DAY
      }, {
        groups: this.ks.groups,
        ranges: this.dayRanges
      });
    },
    timeSlots: function timeSlots() {
      var that = this;
      return (0, main_3.toSlots)(this.ks.dateRange, {
        step: this.slotDuration * main_2.MS_PER_MINUTE / this.slotDivisions
      }, {
        groups: this.ks.groups,
        ranges: this.timeRanges
      }).filter(function (slot) {
        return that.viewEnd.getTime() === that.viewStart.getTime() || (0, main_1.isInTimeRange)(slot.zonedStart, that.viewStart, that.viewEnd);
      });
    },
    occurrences: function occurrences() {
      return (0, main_3.toOccurrences)(this.ks.dataItems, {
        dateRange: this.ks.dateRange,
        fields: this.ks.fields,
        timezone: this.ks.timezone
      });
    },
    dayOccurrences: function dayOccurrences() {
      return this.occurrences.filter(function (o) {
        return o.isAllDay;
      });
    },
    timeOccurrences: function timeOccurrences() {
      return this.occurrences.filter(function (o) {
        return !o.isAllDay;
      });
    },
    dayItems: function dayItems() {
      var dayItems = (0, main_3.toItems)(this.dayOccurrences, {
        timezone: this.ks.timezone
      }, {
        groups: this.ks.groups,
        ranges: this.dayRanges
      });
      (0, main_1.mapItemsToSlots)(dayItems, this.daySlots, false);
      (0, main_1.mapSlotsToItems)(dayItems, this.daySlots, false);
      return dayItems;
    },
    timeItems: function timeItems() {
      var _this = this;
      var timeItems = (0, main_3.toItems)(this.timeOccurrences, {
        timezone: this.ks.timezone
      }, {
        groups: this.ks.groups,
        ranges: this.timeRanges
      }).filter(function (item) {
        return _this.viewStart.getTime() === _this.viewEnd.getTime() || (0, main_1.isInTimeRange)(item.zonedStart, _this.viewStart, _this.viewEnd) || (0, main_1.isInTimeRange)(item.zonedEnd, _this.viewStart, _this.viewEnd) || (0, main_1.isInTimeRange)(new Date(item.zonedEnd.getTime() - (item.zonedEnd.getTime() - item.zonedStart.getTime()) / 2), _this.viewStart, _this.viewEnd);
      });
      (0, main_1.mapItemsToSlots)(timeItems, this.timeSlots, false);
      (0, main_1.mapSlotsToItems)(timeItems, this.timeSlots, false);
      return timeItems;
    },
    compDragItem: function compDragItem() {
      return this.dragItem !== undefined ? this.dragItem : this.currentDragItem;
    },
    compResizeItem: function compResizeItem() {
      return this.resizeItem !== undefined ? this.resizeItem : this.currentResizeItem;
    }
  },
  data: function data() {
    return {
      hasMounted: false,
      currentDragItem: undefined,
      currentResizeItem: undefined
    };
  },
  mounted: function mounted() {
    this.hasMounted = true;
  },
  created: function created() {
    this.intl = (0, kendo_vue_intl_1.provideIntlService)(this);
  },
  beforeUpdate: function beforeUpdate() {
    this.intl = (0, kendo_vue_intl_1.provideIntlService)(this);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;
    var h = gh || createElement;
    this.intl = (0, kendo_vue_intl_1.provideIntlService)(this);
    var EditItem = this.$props.editItem || SchedulerEditItem_1.SchedulerEditItem;
    var EditSlot = this.$props.editSlot || SchedulerEditSlot_1.SchedulerEditSlot;
    var showWorkHours = this.$props.showWorkHours;
    var numberOfDays = this.$props.numberOfDays;
    var slotDivisions = this.$props.slotDivisions;
    var slotDuration = this.$props.slotDuration;
    var workWeekStart = this.$props.workWeekStart;
    var workWeekEnd = this.$props.workWeekEnd;
    var workDayStart = this.intl.parseDate(this.$props.workDayStart);
    var workDayEnd = this.intl.parseDate(this.$props.workDayEnd);
    var dayItems = this.dayItems;
    var timeItems = this.timeItems;
    var daySlots = this.daySlots;
    var timeSlots = this.timeSlots;
    var dragItemClue = function dragItemClue(vertical) {
      return this.compDragItem && this.$props.editable.drag && (Array.isArray(this.compDragItem) ? this.compDragItem.map(function (di, idx) {
        return h(SchedulerDrag_1.SchedulerDrag, {
          key: idx
          //   ignoreIsAllDay={ignoreIsAllDay}
          ,
          dataItem: di,
          attrs: this.v3 ? undefined : {
            dataItem: di,
            vertical: vertical,
            item: this.$props.dataItem
          },
          vertical: vertical,
          item: this.$props.dataItem
        });
      }, this) : h(SchedulerDrag_1.SchedulerDrag, {
        //    ignoreIsAllDay={ignoreIsAllDay}
        dataItem: this.compDragItem,
        attrs: this.v3 ? undefined : {
          dataItem: this.compDragItem,
          vertical: vertical,
          item: this.$props.dataItem
        },
        vertical: vertical,
        item: this.$props.dataItem
      }));
    };
    var resizeItemClue = function resizeItemClue(vertical) {
      return this.compResizeItem && this.editable.resize && (Array.isArray(this.compResizeItem) ? this.compResizeItem.map(function (ri, idx) {
        return h(SchedulerResize_1.SchedulerResize, {
          key: idx,
          format: this.$props.format
          //   ignoreIsAllDay={ignoreIsAllDay}
          ,
          attrs: this.v3 ? undefined : {
            format: this.$props.format,
            dataItem: ri,
            viewItem: this.$props.viewItem,
            item: this.$props.item,
            vertical: vertical
          },
          dataItem: ri,
          viewItem: this.$props.viewItem,
          item: this.$props.item,
          vertical: vertical
        });
      }, this) : h(SchedulerResize_1.SchedulerResize, {
        format: this.$props.format
        //   ignoreIsAllDay={ignoreIsAllDay}
        ,
        attrs: this.v3 ? undefined : {
          format: this.$props.format,
          dataItem: this.compResizeItem,
          viewItem: this.$props.viewItem,
          item: this.$props.item,
          vertical: vertical
        },
        dataItem: this.compResizeItem,
        viewItem: this.$props.viewItem,
        item: this.$props.item,
        vertical: vertical
      }));
    };
    return (
      // @ts-ignore  function children
      h(BaseView_1.BaseView, {
        id: this.$props.id,
        attrs: this.v3 ? undefined : {
          id: this.$props.id,
          viewProps: __assign({}, this.$props),
          ranges: __spreadArray(__spreadArray([], this.dayRanges, true), this.timeRanges, true),
          baseSlots: __spreadArray(__spreadArray([], daySlots, true), timeSlots, true)
        },
        viewProps: __assign({}, this.$props),
        "class": 'k-scheduler-day-view',
        ranges: __spreadArray(__spreadArray([], this.dayRanges, true), this.timeRanges, true),
        baseSlots: __spreadArray(__spreadArray([], daySlots, true), timeSlots, true)
      }, this.v3 ? function () {
        return [h("div", {
          "class": "k-scheduler-head"
        }, [_this2.ks.orientation === 'horizontal' ? [
        // @ts-ignore  function children
        h(HorizontalResourceIterator_1.HorizontalResourceIterator, {
          nested: true,
          attrs: _this2.v3 ? undefined : {
            nested: true,
            group: _this2.ks.props.group,
            resources: _this2.ks.props.resources,
            rowContent: DayViewGroupRowContent_1.DayViewGroupRowContent,
            childRowContent: DayViewGroupRowContent_1.DayViewGroupRowContent
          },
          group: _this2.ks.props.group,
          resources: _this2.ks.props.resources,
          rowContent: DayViewGroupRowContent_1.DayViewGroupRowContent,
          childRowContent: DayViewGroupRowContent_1.DayViewGroupRowContent
        }, _this2.v3 ? function () {
          return [h(DayViewHead_1.DayViewHead, {
            timeRanges: _this2.timeRanges,
            attrs: _this2.v3 ? undefined : {
              timeRanges: _this2.timeRanges,
              dateHeaderCell: _this2.$props.dateHeaderCell
            },
            dateHeaderCell: _this2.$props.dateHeaderCell
          })];
        } : [h(DayViewHead_1.DayViewHead, {
          timeRanges: _this2.timeRanges,
          attrs: _this2.v3 ? undefined : {
            timeRanges: _this2.timeRanges,
            dateHeaderCell: _this2.$props.dateHeaderCell
          },
          dateHeaderCell: _this2.$props.dateHeaderCell
        })]),
        // @ts-ignore  function children
        h(HorizontalResourceIterator_1.HorizontalResourceIterator, {
          group: _this2.ks.props.group,
          attrs: _this2.v3 ? undefined : {
            group: _this2.ks.props.group,
            resources: _this2.ks.props.resources,
            rowContent: DayViewAllDayRowContent_1.DayViewAllDayRowContent,
            childRowContent: DayViewAllDayRowContent_1.DayViewAllDayRowContent
          },
          resources: _this2.ks.props.resources,
          rowContent: DayViewAllDayRowContent_1.DayViewAllDayRowContent,
          childRowContent: DayViewAllDayRowContent_1.DayViewAllDayRowContent
        }, _this2.v3 ? function () {
          return [h(DayViewAllDaySlots_1.DayViewAllDaySlots, {
            editable: _this2.$props.editable,
            attrs: _this2.v3 ? undefined : {
              editable: _this2.$props.editable,
              dayRanges: _this2.dayRanges,
              daySlots: daySlots,
              slotRender: _this2.$props.slotRender,
              viewSlot: _this2.$props.viewSlot,
              numberOfDays: numberOfDays,
              workWeekStart: workWeekStart,
              workWeekEnd: workWeekEnd
            },
            dayRanges: _this2.dayRanges,
            daySlots: daySlots,
            slotRender: _this2.$props.slotRender,
            viewSlot: _this2.$props.viewSlot,
            numberOfDays: numberOfDays,
            workWeekStart: workWeekStart,
            workWeekEnd: workWeekEnd,
            onDataaction: _this2.handleDataAction,
            on: _this2.v3 ? undefined : {
              "dataaction": _this2.handleDataAction
            }
          })];
        } : [h(DayViewAllDaySlots_1.DayViewAllDaySlots, {
          editable: _this2.$props.editable,
          attrs: _this2.v3 ? undefined : {
            editable: _this2.$props.editable,
            dayRanges: _this2.dayRanges,
            daySlots: daySlots,
            slotRender: _this2.$props.slotRender,
            viewSlot: _this2.$props.viewSlot,
            numberOfDays: numberOfDays,
            workWeekStart: workWeekStart,
            workWeekEnd: workWeekEnd
          },
          dayRanges: _this2.dayRanges,
          daySlots: daySlots,
          slotRender: _this2.$props.slotRender,
          viewSlot: _this2.$props.viewSlot,
          numberOfDays: numberOfDays,
          workWeekStart: workWeekStart,
          workWeekEnd: workWeekEnd,
          onDataaction: _this2.handleDataAction,
          on: _this2.v3 ? undefined : {
            "dataaction": _this2.handleDataAction
          }
        })]), _this2.hasMounted && dayItems.map(function (item) {
          return h(EditItem, {
            key: item.isRecurring ? "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index, ":").concat(item.originalStart) : "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index),
            uid: item.uid,
            attrs: this.v3 ? undefined : {
              uid: item.uid,
              start: item.start,
              end: item.end,
              originalStart: item.originalStart,
              startTimezone: item.startTimezone,
              endTimezone: item.endTimezone,
              isAllDay: item.isAllDay,
              title: item.title,
              description: item.description,
              occurrenceId: item.occurrenceId,
              recurrenceExceptions: item.recurrenceExceptions,
              recurrenceRule: item.recurrenceRule,
              recurrenceId: item.recurrenceId,
              dataItem: item.dataItem,
              itemRef: item.itemRef,
              head: item.head,
              tail: item.tail,
              order: item.order,
              zonedStart: item.zonedStart,
              zonedEnd: item.zonedEnd,
              slots: item.slots,
              group: item.group,
              range: item.range,
              isException: item.isException,
              isRecurring: item.isRecurring,
              form: this.$props.form,
              item: this.$props.item,
              viewItem: this.$props.viewItem,
              editable: this.$props.editable,
              vertical: false
            },
            start: item.start,
            end: item.end,
            originalStart: item.originalStart,
            startTimezone: item.startTimezone,
            endTimezone: item.endTimezone,
            isAllDay: item.isAllDay,
            title: item.title,
            description: item.description,
            occurrenceId: item.occurrenceId,
            recurrenceExceptions: item.recurrenceExceptions,
            recurrenceRule: item.recurrenceRule,
            recurrenceId: item.recurrenceId,
            dataItem: item.dataItem,
            itemRef: item.itemRef,
            head: item.head,
            tail: item.tail,
            order: item.order,
            zonedStart: item.zonedStart,
            zonedEnd: item.zonedEnd,
            slots: item.slots,
            group: item.group,
            range: item.range,
            isException: item.isException,
            isRecurring: item.isRecurring,
            form: this.$props.form,
            onDataaction: this.handleDataAction,
            on: this.v3 ? undefined : {
              "dataaction": this.handleDataAction,
              "dragitemchange": this.handleDragItemChange,
              "resizeitemchange": this.handleResizeItemChange
            },
            onDragitemchange: this.handleDragItemChange,
            onResizeitemchange: this.handleResizeItemChange,
            item: this.$props.item,
            viewItem: this.$props.viewItem,
            editable: this.$props.editable,
            vertical: false
          });
        }, _this2), _this2.compDragItem && _this2.compDragItem.isAllDay && dragItemClue.call(_this2, false), _this2.compResizeItem && _this2.compResizeItem.isAllDay && resizeItemClue.call(_this2, false)] :
        // @ts-ignore  function children
        h(VerticalResourceIterator_1.VerticalResourceIterator, {
          group: _this2.ks.props.group,
          attrs: _this2.v3 ? undefined : {
            group: _this2.ks.props.group,
            resources: _this2.ks.props.resources,
            emptyCell: true,
            editable: _this2.$props.editable
          },
          resources: _this2.ks.props.resources,
          emptyCell: true,
          editable: _this2.$props.editable
        }, _this2.v3 ? function () {
          return [h(DayViewHead_1.DayViewHead, {
            timeRanges: _this2.timeRanges,
            attrs: _this2.v3 ? undefined : {
              timeRanges: _this2.timeRanges,
              dateHeaderCell: _this2.$props.dateHeaderCell
            },
            dateHeaderCell: _this2.$props.dateHeaderCell
          })];
        } : [h(DayViewHead_1.DayViewHead, {
          timeRanges: _this2.timeRanges,
          attrs: _this2.v3 ? undefined : {
            timeRanges: _this2.timeRanges,
            dateHeaderCell: _this2.$props.dateHeaderCell
          },
          dateHeaderCell: _this2.$props.dateHeaderCell
        })])]), h("div", {
          "class": "k-scheduler-body"
        }, [_this2.ks.orientation === 'horizontal' ? [timeSlots.filter(function (slot) {
          return slot.group.index === FIRST_INDEX && slot.range.index === FIRST_INDEX;
        }).map(function (root, rootIndex) {
          var _this3 = this;
          return (
            // @ts-ignore  function children
            h(HorizontalResourceIterator_1.HorizontalResourceIterator, {
              key: root.index,
              nested: false,
              attrs: this.v3 ? undefined : {
                nested: false,
                group: this.ks.props.group,
                resources: this.ks.props.resources,
                rowContent: DayViewRowContent_1.DayViewRowContent,
                rowContentProps: {
                  timeHeaderCell: this.$props.timeHeaderCell,
                  isMaster: rootIndex % slotDivisions === 0,
                  isLast: (rootIndex + 1) % slotDivisions === 0,
                  contentSlot: root
                }
              },
              group: this.ks.props.group,
              resources: this.ks.props.resources,
              rowContent: DayViewRowContent_1.DayViewRowContent,
              rowContentProps: {
                timeHeaderCell: this.$props.timeHeaderCell,
                isMaster: rootIndex % slotDivisions === 0,
                isLast: (rootIndex + 1) % slotDivisions === 0,
                contentSlot: root
              }
            }, this.v3 ? function () {
              return [h(DayViewMiddleRow_1.DayViewMiddleRow, {
                slotRender: _this3.$props.slotRender,
                attrs: _this3.v3 ? undefined : {
                  slotRender: _this3.$props.slotRender,
                  viewSlot: _this3.$props.viewSlot,
                  timeRanges: _this3.timeRanges,
                  timeSlots: timeSlots,
                  slotDivisions: slotDivisions,
                  rootIndex: rootIndex,
                  root: root,
                  numberOfDays: numberOfDays,
                  workDayStart: workDayStart,
                  workDayEnd: workDayEnd,
                  workWeekStart: workWeekStart,
                  workWeekEnd: workWeekEnd,
                  editable: _this3.$props.editable
                },
                viewSlot: _this3.$props.viewSlot,
                timeRanges: _this3.timeRanges,
                timeSlots: timeSlots,
                slotDivisions: slotDivisions,
                rootIndex: rootIndex,
                root: root,
                numberOfDays: numberOfDays,
                workDayStart: workDayStart,
                workDayEnd: workDayEnd,
                workWeekStart: workWeekStart,
                workWeekEnd: workWeekEnd,
                onDataaction: _this3.handleDataAction,
                on: _this3.v3 ? undefined : {
                  "dataaction": _this3.handleDataAction
                },
                editable: _this3.$props.editable
              })];
            } : [h(DayViewMiddleRow_1.DayViewMiddleRow, {
              slotRender: _this3.$props.slotRender,
              attrs: _this3.v3 ? undefined : {
                slotRender: _this3.$props.slotRender,
                viewSlot: _this3.$props.viewSlot,
                timeRanges: _this3.timeRanges,
                timeSlots: timeSlots,
                slotDivisions: slotDivisions,
                rootIndex: rootIndex,
                root: root,
                numberOfDays: numberOfDays,
                workDayStart: workDayStart,
                workDayEnd: workDayEnd,
                workWeekStart: workWeekStart,
                workWeekEnd: workWeekEnd,
                editable: _this3.$props.editable
              },
              viewSlot: _this3.$props.viewSlot,
              timeRanges: _this3.timeRanges,
              timeSlots: timeSlots,
              slotDivisions: slotDivisions,
              rootIndex: rootIndex,
              root: root,
              numberOfDays: numberOfDays,
              workDayStart: workDayStart,
              workDayEnd: workDayEnd,
              workWeekStart: workWeekStart,
              workWeekEnd: workWeekEnd,
              onDataaction: _this3.handleDataAction,
              on: _this3.v3 ? undefined : {
                "dataaction": _this3.handleDataAction
              },
              editable: _this3.$props.editable
            })])
          );
        }, _this2), _this2.$props.currentTimeMarker && (0, main_1.intersects)((0, main_1.first)(_this2.timeRanges).start, (0, main_1.last)(_this2.timeRanges).end, new Date(), new Date(), true) && [h(CurrentTimeMarkerArrow_1.CurrentTimeMarkerArrow), h(CurrentTimeMarker_1.CurrentTimeMarker)]] : [
        // @ts-ignore  function children
        h(VerticalResourceIterator_1.VerticalResourceIterator, {
          nested: true,
          attrs: _this2.v3 ? undefined : {
            nested: true,
            group: _this2.ks.props.group,
            resources: _this2.ks.props.resources,
            more: {
              timeRanges: _this2.timeRanges,
              timeSlots: timeSlots,
              workDayStart: workDayStart,
              workDayEnd: workDayEnd,
              numberOfDays: numberOfDays,
              workWeekStart: workWeekStart,
              workWeekEnd: workWeekEnd,
              slotRender: _this2.$props.slotRender,
              viewSlot: _this2.$props.viewSlot,
              editable: _this2.$props.editable,
              currentTimeMarker: _this2.$props.currentTimeMarker
            }
          },
          group: _this2.ks.props.group,
          resources: _this2.ks.props.resources,
          onDataaction: _this2.handleDataAction,
          on: _this2.v3 ? undefined : {
            "dataaction": _this2.handleDataAction
          },
          more: {
            timeRanges: _this2.timeRanges,
            timeSlots: timeSlots,
            workDayStart: workDayStart,
            workDayEnd: workDayEnd,
            numberOfDays: numberOfDays,
            workWeekStart: workWeekStart,
            workWeekEnd: workWeekEnd,
            slotRender: _this2.$props.slotRender,
            viewSlot: _this2.$props.viewSlot,
            editable: _this2.$props.editable,
            currentTimeMarker: _this2.$props.currentTimeMarker
          }
        }, _this2.v3 ? function () {
          return [h(DayViewVerticalRow_1.DayViewVerticalRow, {
            onDataaction: _this2.handleDataAction,
            on: _this2.v3 ? undefined : {
              "dataaction": _this2.handleDataAction
            },
            daySlots: daySlots,
            attrs: _this2.v3 ? undefined : {
              daySlots: daySlots,
              timeSlots: timeSlots,
              dayRanges: _this2.dayRanges,
              editable: _this2.$props.editable
            },
            timeSlots: timeSlots,
            dayRanges: _this2.dayRanges,
            editable: _this2.$props.editable
          })];
        } : [h(DayViewVerticalRow_1.DayViewVerticalRow, {
          onDataaction: _this2.handleDataAction,
          on: _this2.v3 ? undefined : {
            "dataaction": _this2.handleDataAction
          },
          daySlots: daySlots,
          attrs: _this2.v3 ? undefined : {
            daySlots: daySlots,
            timeSlots: timeSlots,
            dayRanges: _this2.dayRanges,
            editable: _this2.$props.editable
          },
          timeSlots: timeSlots,
          dayRanges: _this2.dayRanges,
          editable: _this2.$props.editable
        })]), _this2.hasMounted && dayItems.map(function (item) {
          return h(EditItem, {
            key: item.isRecurring ? "".concat(item.uid, ":").concat(item.group.index, " : ").concat(item.range.index, " : ").concat(item.originalStart) : "".concat(item.uid, ":").concat(item.group.index, " : ").concat(item.range.index),
            uid: item.uid,
            attrs: this.v3 ? undefined : {
              uid: item.uid,
              start: item.start,
              end: item.end,
              originalStart: item.originalStart,
              startTimezone: item.startTimezone,
              endTimezone: item.endTimezone,
              isAllDay: item.isAllDay,
              title: item.title,
              description: item.description,
              occurrenceId: item.occurrenceId,
              recurrenceExceptions: item.recurrenceExceptions,
              recurrenceRule: item.recurrenceRule,
              recurrenceId: item.recurrenceId,
              dataItem: item.dataItem,
              itemRef: item.itemRef,
              head: item.head,
              tail: item.tail,
              order: item.order,
              zonedStart: item.zonedStart,
              zonedEnd: item.zonedEnd,
              slots: item.slots,
              group: item.group,
              range: item.range,
              isException: item.isException,
              isRecurring: item.isRecurring,
              viewItem: this.$props.viewItem,
              item: this.$props.item,
              form: this.$props.form,
              editable: this.$props.editable,
              vertical: false
            },
            start: item.start,
            end: item.end,
            originalStart: item.originalStart,
            startTimezone: item.startTimezone,
            endTimezone: item.endTimezone,
            isAllDay: item.isAllDay,
            title: item.title,
            description: item.description,
            occurrenceId: item.occurrenceId,
            recurrenceExceptions: item.recurrenceExceptions,
            recurrenceRule: item.recurrenceRule,
            recurrenceId: item.recurrenceId,
            dataItem: item.dataItem,
            itemRef: item.itemRef,
            head: item.head,
            tail: item.tail,
            order: item.order,
            zonedStart: item.zonedStart,
            zonedEnd: item.zonedEnd,
            slots: item.slots,
            group: item.group,
            range: item.range,
            isException: item.isException,
            isRecurring: item.isRecurring,
            onDataaction: this.handleDataAction,
            on: this.v3 ? undefined : {
              "dataaction": this.handleDataAction,
              "dragitemchange": this.handleDragItemChange,
              "resizeitemchange": this.handleResizeItemChange
            },
            onDragitemchange: this.handleDragItemChange,
            onResizeitemchange: this.handleResizeItemChange,
            viewItem: this.$props.viewItem,
            item: this.$props.item,
            form: this.$props.form,
            editable: this.$props.editable,
            vertical: false
          });
        }, _this2), _this2.compDragItem && _this2.compDragItem.isAllDay && dragItemClue.call(_this2, true), _this2.compResizeItem && _this2.compResizeItem.isAllDay && resizeItemClue.call(_this2, true)], _this2.hasMounted && timeItems.map(function (item) {
          return h(EditItem, {
            key: item.isRecurring ? "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index, ":").concat(item.originalStart) : "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index),
            uid: item.uid,
            attrs: this.v3 ? undefined : {
              uid: item.uid,
              start: item.start,
              end: item.end,
              originalStart: item.originalStart,
              startTimezone: item.startTimezone,
              endTimezone: item.endTimezone,
              isAllDay: item.isAllDay,
              title: item.title,
              description: item.description,
              occurrenceId: item.occurrenceId,
              recurrenceExceptions: item.recurrenceExceptions,
              recurrenceRule: item.recurrenceRule,
              recurrenceId: item.recurrenceId,
              dataItem: item.dataItem,
              itemRef: item.itemRef,
              head: item.head,
              tail: item.tail,
              order: item.order,
              zonedStart: item.zonedStart,
              zonedEnd: item.zonedEnd,
              slots: item.slots,
              group: item.group,
              range: item.range,
              isException: item.isException,
              isRecurring: item.isRecurring,
              format: 't',
              viewItem: this.$props.viewItem,
              item: this.$props.item,
              form: this.$props.form,
              editable: this.$props.editable,
              vertical: true
            },
            start: item.start,
            end: item.end,
            originalStart: item.originalStart,
            startTimezone: item.startTimezone,
            endTimezone: item.endTimezone,
            isAllDay: item.isAllDay,
            title: item.title,
            description: item.description,
            occurrenceId: item.occurrenceId,
            recurrenceExceptions: item.recurrenceExceptions,
            recurrenceRule: item.recurrenceRule,
            recurrenceId: item.recurrenceId,
            dataItem: item.dataItem,
            itemRef: item.itemRef,
            head: item.head,
            tail: item.tail,
            order: item.order,
            zonedStart: item.zonedStart,
            zonedEnd: item.zonedEnd,
            slots: item.slots,
            group: item.group,
            range: item.range,
            isException: item.isException,
            isRecurring: item.isRecurring,
            format: 't',
            onDataaction: this.handleDataAction,
            on: this.v3 ? undefined : {
              "dataaction": this.handleDataAction,
              "dragitemchange": this.handleDragItemChange,
              "resizeitemchange": this.handleResizeItemChange
            },
            onDragitemchange: this.handleDragItemChange,
            onResizeitemchange: this.handleResizeItemChange,
            viewItem: this.$props.viewItem,
            item: this.$props.item,
            form: this.$props.form,
            editable: this.$props.editable,
            vertical: true
          });
        }, _this2), _this2.compDragItem && !_this2.compDragItem.isAllDay && dragItemClue.call(_this2, true), _this2.compResizeItem && !_this2.compResizeItem.isAllDay && resizeItemClue.call(_this2, true)])];
      } : [h("div", {
        "class": "k-scheduler-head"
      }, [_this2.ks.orientation === 'horizontal' ? [h(HorizontalResourceIterator_1.HorizontalResourceIterator, {
        nested: true,
        attrs: _this2.v3 ? undefined : {
          nested: true,
          group: _this2.ks.props.group,
          resources: _this2.ks.props.resources,
          rowContent: DayViewGroupRowContent_1.DayViewGroupRowContent,
          childRowContent: DayViewGroupRowContent_1.DayViewGroupRowContent
        },
        group: _this2.ks.props.group,
        resources: _this2.ks.props.resources,
        rowContent: DayViewGroupRowContent_1.DayViewGroupRowContent,
        childRowContent: DayViewGroupRowContent_1.DayViewGroupRowContent
      }, _this2.v3 ? function () {
        return [h(DayViewHead_1.DayViewHead, {
          timeRanges: _this2.timeRanges,
          attrs: _this2.v3 ? undefined : {
            timeRanges: _this2.timeRanges,
            dateHeaderCell: _this2.$props.dateHeaderCell
          },
          dateHeaderCell: _this2.$props.dateHeaderCell
        })];
      } : [h(DayViewHead_1.DayViewHead, {
        timeRanges: _this2.timeRanges,
        attrs: _this2.v3 ? undefined : {
          timeRanges: _this2.timeRanges,
          dateHeaderCell: _this2.$props.dateHeaderCell
        },
        dateHeaderCell: _this2.$props.dateHeaderCell
      })]), h(HorizontalResourceIterator_1.HorizontalResourceIterator, {
        group: _this2.ks.props.group,
        attrs: _this2.v3 ? undefined : {
          group: _this2.ks.props.group,
          resources: _this2.ks.props.resources,
          rowContent: DayViewAllDayRowContent_1.DayViewAllDayRowContent,
          childRowContent: DayViewAllDayRowContent_1.DayViewAllDayRowContent
        },
        resources: _this2.ks.props.resources,
        rowContent: DayViewAllDayRowContent_1.DayViewAllDayRowContent,
        childRowContent: DayViewAllDayRowContent_1.DayViewAllDayRowContent
      }, _this2.v3 ? function () {
        return [h(DayViewAllDaySlots_1.DayViewAllDaySlots, {
          editable: _this2.$props.editable,
          attrs: _this2.v3 ? undefined : {
            editable: _this2.$props.editable,
            dayRanges: _this2.dayRanges,
            daySlots: daySlots,
            slotRender: _this2.$props.slotRender,
            viewSlot: _this2.$props.viewSlot,
            numberOfDays: numberOfDays,
            workWeekStart: workWeekStart,
            workWeekEnd: workWeekEnd
          },
          dayRanges: _this2.dayRanges,
          daySlots: daySlots,
          slotRender: _this2.$props.slotRender,
          viewSlot: _this2.$props.viewSlot,
          numberOfDays: numberOfDays,
          workWeekStart: workWeekStart,
          workWeekEnd: workWeekEnd,
          onDataaction: _this2.handleDataAction,
          on: _this2.v3 ? undefined : {
            "dataaction": _this2.handleDataAction
          }
        })];
      } : [h(DayViewAllDaySlots_1.DayViewAllDaySlots, {
        editable: _this2.$props.editable,
        attrs: _this2.v3 ? undefined : {
          editable: _this2.$props.editable,
          dayRanges: _this2.dayRanges,
          daySlots: daySlots,
          slotRender: _this2.$props.slotRender,
          viewSlot: _this2.$props.viewSlot,
          numberOfDays: numberOfDays,
          workWeekStart: workWeekStart,
          workWeekEnd: workWeekEnd
        },
        dayRanges: _this2.dayRanges,
        daySlots: daySlots,
        slotRender: _this2.$props.slotRender,
        viewSlot: _this2.$props.viewSlot,
        numberOfDays: numberOfDays,
        workWeekStart: workWeekStart,
        workWeekEnd: workWeekEnd,
        onDataaction: _this2.handleDataAction,
        on: _this2.v3 ? undefined : {
          "dataaction": _this2.handleDataAction
        }
      })]), _this2.hasMounted && dayItems.map(function (item) {
        return h(EditItem, {
          key: item.isRecurring ? "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index, ":").concat(item.originalStart) : "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index),
          uid: item.uid,
          attrs: this.v3 ? undefined : {
            uid: item.uid,
            start: item.start,
            end: item.end,
            originalStart: item.originalStart,
            startTimezone: item.startTimezone,
            endTimezone: item.endTimezone,
            isAllDay: item.isAllDay,
            title: item.title,
            description: item.description,
            occurrenceId: item.occurrenceId,
            recurrenceExceptions: item.recurrenceExceptions,
            recurrenceRule: item.recurrenceRule,
            recurrenceId: item.recurrenceId,
            dataItem: item.dataItem,
            itemRef: item.itemRef,
            head: item.head,
            tail: item.tail,
            order: item.order,
            zonedStart: item.zonedStart,
            zonedEnd: item.zonedEnd,
            slots: item.slots,
            group: item.group,
            range: item.range,
            isException: item.isException,
            isRecurring: item.isRecurring,
            form: this.$props.form,
            item: this.$props.item,
            viewItem: this.$props.viewItem,
            editable: this.$props.editable,
            vertical: false
          },
          start: item.start,
          end: item.end,
          originalStart: item.originalStart,
          startTimezone: item.startTimezone,
          endTimezone: item.endTimezone,
          isAllDay: item.isAllDay,
          title: item.title,
          description: item.description,
          occurrenceId: item.occurrenceId,
          recurrenceExceptions: item.recurrenceExceptions,
          recurrenceRule: item.recurrenceRule,
          recurrenceId: item.recurrenceId,
          dataItem: item.dataItem,
          itemRef: item.itemRef,
          head: item.head,
          tail: item.tail,
          order: item.order,
          zonedStart: item.zonedStart,
          zonedEnd: item.zonedEnd,
          slots: item.slots,
          group: item.group,
          range: item.range,
          isException: item.isException,
          isRecurring: item.isRecurring,
          form: this.$props.form,
          onDataaction: this.handleDataAction,
          on: this.v3 ? undefined : {
            "dataaction": this.handleDataAction,
            "dragitemchange": this.handleDragItemChange,
            "resizeitemchange": this.handleResizeItemChange
          },
          onDragitemchange: this.handleDragItemChange,
          onResizeitemchange: this.handleResizeItemChange,
          item: this.$props.item,
          viewItem: this.$props.viewItem,
          editable: this.$props.editable,
          vertical: false
        });
      }, _this2), _this2.compDragItem && _this2.compDragItem.isAllDay && dragItemClue.call(_this2, false), _this2.compResizeItem && _this2.compResizeItem.isAllDay && resizeItemClue.call(_this2, false)] : h(VerticalResourceIterator_1.VerticalResourceIterator, {
        group: _this2.ks.props.group,
        attrs: _this2.v3 ? undefined : {
          group: _this2.ks.props.group,
          resources: _this2.ks.props.resources,
          emptyCell: true,
          editable: _this2.$props.editable
        },
        resources: _this2.ks.props.resources,
        emptyCell: true,
        editable: _this2.$props.editable
      }, _this2.v3 ? function () {
        return [h(DayViewHead_1.DayViewHead, {
          timeRanges: _this2.timeRanges,
          attrs: _this2.v3 ? undefined : {
            timeRanges: _this2.timeRanges,
            dateHeaderCell: _this2.$props.dateHeaderCell
          },
          dateHeaderCell: _this2.$props.dateHeaderCell
        })];
      } : [h(DayViewHead_1.DayViewHead, {
        timeRanges: _this2.timeRanges,
        attrs: _this2.v3 ? undefined : {
          timeRanges: _this2.timeRanges,
          dateHeaderCell: _this2.$props.dateHeaderCell
        },
        dateHeaderCell: _this2.$props.dateHeaderCell
      })])]), h("div", {
        "class": "k-scheduler-body"
      }, [_this2.ks.orientation === 'horizontal' ? [timeSlots.filter(function (slot) {
        return slot.group.index === FIRST_INDEX && slot.range.index === FIRST_INDEX;
      }).map(function (root, rootIndex) {
        var _this3 = this;
        return h(HorizontalResourceIterator_1.HorizontalResourceIterator, {
          key: root.index,
          nested: false,
          attrs: this.v3 ? undefined : {
            nested: false,
            group: this.ks.props.group,
            resources: this.ks.props.resources,
            rowContent: DayViewRowContent_1.DayViewRowContent,
            rowContentProps: {
              timeHeaderCell: this.$props.timeHeaderCell,
              isMaster: rootIndex % slotDivisions === 0,
              isLast: (rootIndex + 1) % slotDivisions === 0,
              contentSlot: root
            }
          },
          group: this.ks.props.group,
          resources: this.ks.props.resources,
          rowContent: DayViewRowContent_1.DayViewRowContent,
          rowContentProps: {
            timeHeaderCell: this.$props.timeHeaderCell,
            isMaster: rootIndex % slotDivisions === 0,
            isLast: (rootIndex + 1) % slotDivisions === 0,
            contentSlot: root
          }
        }, this.v3 ? function () {
          return [h(DayViewMiddleRow_1.DayViewMiddleRow, {
            slotRender: _this3.$props.slotRender,
            attrs: _this3.v3 ? undefined : {
              slotRender: _this3.$props.slotRender,
              viewSlot: _this3.$props.viewSlot,
              timeRanges: _this3.timeRanges,
              timeSlots: timeSlots,
              slotDivisions: slotDivisions,
              rootIndex: rootIndex,
              root: root,
              numberOfDays: numberOfDays,
              workDayStart: workDayStart,
              workDayEnd: workDayEnd,
              workWeekStart: workWeekStart,
              workWeekEnd: workWeekEnd,
              editable: _this3.$props.editable
            },
            viewSlot: _this3.$props.viewSlot,
            timeRanges: _this3.timeRanges,
            timeSlots: timeSlots,
            slotDivisions: slotDivisions,
            rootIndex: rootIndex,
            root: root,
            numberOfDays: numberOfDays,
            workDayStart: workDayStart,
            workDayEnd: workDayEnd,
            workWeekStart: workWeekStart,
            workWeekEnd: workWeekEnd,
            onDataaction: _this3.handleDataAction,
            on: _this3.v3 ? undefined : {
              "dataaction": _this3.handleDataAction
            },
            editable: _this3.$props.editable
          })];
        } : [h(DayViewMiddleRow_1.DayViewMiddleRow, {
          slotRender: _this3.$props.slotRender,
          attrs: _this3.v3 ? undefined : {
            slotRender: _this3.$props.slotRender,
            viewSlot: _this3.$props.viewSlot,
            timeRanges: _this3.timeRanges,
            timeSlots: timeSlots,
            slotDivisions: slotDivisions,
            rootIndex: rootIndex,
            root: root,
            numberOfDays: numberOfDays,
            workDayStart: workDayStart,
            workDayEnd: workDayEnd,
            workWeekStart: workWeekStart,
            workWeekEnd: workWeekEnd,
            editable: _this3.$props.editable
          },
          viewSlot: _this3.$props.viewSlot,
          timeRanges: _this3.timeRanges,
          timeSlots: timeSlots,
          slotDivisions: slotDivisions,
          rootIndex: rootIndex,
          root: root,
          numberOfDays: numberOfDays,
          workDayStart: workDayStart,
          workDayEnd: workDayEnd,
          workWeekStart: workWeekStart,
          workWeekEnd: workWeekEnd,
          onDataaction: _this3.handleDataAction,
          on: _this3.v3 ? undefined : {
            "dataaction": _this3.handleDataAction
          },
          editable: _this3.$props.editable
        })]);
      }, _this2), _this2.$props.currentTimeMarker && (0, main_1.intersects)((0, main_1.first)(_this2.timeRanges).start, (0, main_1.last)(_this2.timeRanges).end, new Date(), new Date(), true) && [h(CurrentTimeMarkerArrow_1.CurrentTimeMarkerArrow), h(CurrentTimeMarker_1.CurrentTimeMarker)]] : [h(VerticalResourceIterator_1.VerticalResourceIterator, {
        nested: true,
        attrs: _this2.v3 ? undefined : {
          nested: true,
          group: _this2.ks.props.group,
          resources: _this2.ks.props.resources,
          more: {
            timeRanges: _this2.timeRanges,
            timeSlots: timeSlots,
            workDayStart: workDayStart,
            workDayEnd: workDayEnd,
            numberOfDays: numberOfDays,
            workWeekStart: workWeekStart,
            workWeekEnd: workWeekEnd,
            slotRender: _this2.$props.slotRender,
            viewSlot: _this2.$props.viewSlot,
            editable: _this2.$props.editable,
            currentTimeMarker: _this2.$props.currentTimeMarker
          }
        },
        group: _this2.ks.props.group,
        resources: _this2.ks.props.resources,
        onDataaction: _this2.handleDataAction,
        on: _this2.v3 ? undefined : {
          "dataaction": _this2.handleDataAction
        },
        more: {
          timeRanges: _this2.timeRanges,
          timeSlots: timeSlots,
          workDayStart: workDayStart,
          workDayEnd: workDayEnd,
          numberOfDays: numberOfDays,
          workWeekStart: workWeekStart,
          workWeekEnd: workWeekEnd,
          slotRender: _this2.$props.slotRender,
          viewSlot: _this2.$props.viewSlot,
          editable: _this2.$props.editable,
          currentTimeMarker: _this2.$props.currentTimeMarker
        }
      }, _this2.v3 ? function () {
        return [h(DayViewVerticalRow_1.DayViewVerticalRow, {
          onDataaction: _this2.handleDataAction,
          on: _this2.v3 ? undefined : {
            "dataaction": _this2.handleDataAction
          },
          daySlots: daySlots,
          attrs: _this2.v3 ? undefined : {
            daySlots: daySlots,
            timeSlots: timeSlots,
            dayRanges: _this2.dayRanges,
            editable: _this2.$props.editable
          },
          timeSlots: timeSlots,
          dayRanges: _this2.dayRanges,
          editable: _this2.$props.editable
        })];
      } : [h(DayViewVerticalRow_1.DayViewVerticalRow, {
        onDataaction: _this2.handleDataAction,
        on: _this2.v3 ? undefined : {
          "dataaction": _this2.handleDataAction
        },
        daySlots: daySlots,
        attrs: _this2.v3 ? undefined : {
          daySlots: daySlots,
          timeSlots: timeSlots,
          dayRanges: _this2.dayRanges,
          editable: _this2.$props.editable
        },
        timeSlots: timeSlots,
        dayRanges: _this2.dayRanges,
        editable: _this2.$props.editable
      })]), _this2.hasMounted && dayItems.map(function (item) {
        return h(EditItem, {
          key: item.isRecurring ? "".concat(item.uid, ":").concat(item.group.index, " : ").concat(item.range.index, " : ").concat(item.originalStart) : "".concat(item.uid, ":").concat(item.group.index, " : ").concat(item.range.index),
          uid: item.uid,
          attrs: this.v3 ? undefined : {
            uid: item.uid,
            start: item.start,
            end: item.end,
            originalStart: item.originalStart,
            startTimezone: item.startTimezone,
            endTimezone: item.endTimezone,
            isAllDay: item.isAllDay,
            title: item.title,
            description: item.description,
            occurrenceId: item.occurrenceId,
            recurrenceExceptions: item.recurrenceExceptions,
            recurrenceRule: item.recurrenceRule,
            recurrenceId: item.recurrenceId,
            dataItem: item.dataItem,
            itemRef: item.itemRef,
            head: item.head,
            tail: item.tail,
            order: item.order,
            zonedStart: item.zonedStart,
            zonedEnd: item.zonedEnd,
            slots: item.slots,
            group: item.group,
            range: item.range,
            isException: item.isException,
            isRecurring: item.isRecurring,
            viewItem: this.$props.viewItem,
            item: this.$props.item,
            form: this.$props.form,
            editable: this.$props.editable,
            vertical: false
          },
          start: item.start,
          end: item.end,
          originalStart: item.originalStart,
          startTimezone: item.startTimezone,
          endTimezone: item.endTimezone,
          isAllDay: item.isAllDay,
          title: item.title,
          description: item.description,
          occurrenceId: item.occurrenceId,
          recurrenceExceptions: item.recurrenceExceptions,
          recurrenceRule: item.recurrenceRule,
          recurrenceId: item.recurrenceId,
          dataItem: item.dataItem,
          itemRef: item.itemRef,
          head: item.head,
          tail: item.tail,
          order: item.order,
          zonedStart: item.zonedStart,
          zonedEnd: item.zonedEnd,
          slots: item.slots,
          group: item.group,
          range: item.range,
          isException: item.isException,
          isRecurring: item.isRecurring,
          onDataaction: this.handleDataAction,
          on: this.v3 ? undefined : {
            "dataaction": this.handleDataAction,
            "dragitemchange": this.handleDragItemChange,
            "resizeitemchange": this.handleResizeItemChange
          },
          onDragitemchange: this.handleDragItemChange,
          onResizeitemchange: this.handleResizeItemChange,
          viewItem: this.$props.viewItem,
          item: this.$props.item,
          form: this.$props.form,
          editable: this.$props.editable,
          vertical: false
        });
      }, _this2), _this2.compDragItem && _this2.compDragItem.isAllDay && dragItemClue.call(_this2, true), _this2.compResizeItem && _this2.compResizeItem.isAllDay && resizeItemClue.call(_this2, true)], _this2.hasMounted && timeItems.map(function (item) {
        return h(EditItem, {
          key: item.isRecurring ? "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index, ":").concat(item.originalStart) : "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index),
          uid: item.uid,
          attrs: this.v3 ? undefined : {
            uid: item.uid,
            start: item.start,
            end: item.end,
            originalStart: item.originalStart,
            startTimezone: item.startTimezone,
            endTimezone: item.endTimezone,
            isAllDay: item.isAllDay,
            title: item.title,
            description: item.description,
            occurrenceId: item.occurrenceId,
            recurrenceExceptions: item.recurrenceExceptions,
            recurrenceRule: item.recurrenceRule,
            recurrenceId: item.recurrenceId,
            dataItem: item.dataItem,
            itemRef: item.itemRef,
            head: item.head,
            tail: item.tail,
            order: item.order,
            zonedStart: item.zonedStart,
            zonedEnd: item.zonedEnd,
            slots: item.slots,
            group: item.group,
            range: item.range,
            isException: item.isException,
            isRecurring: item.isRecurring,
            format: 't',
            viewItem: this.$props.viewItem,
            item: this.$props.item,
            form: this.$props.form,
            editable: this.$props.editable,
            vertical: true
          },
          start: item.start,
          end: item.end,
          originalStart: item.originalStart,
          startTimezone: item.startTimezone,
          endTimezone: item.endTimezone,
          isAllDay: item.isAllDay,
          title: item.title,
          description: item.description,
          occurrenceId: item.occurrenceId,
          recurrenceExceptions: item.recurrenceExceptions,
          recurrenceRule: item.recurrenceRule,
          recurrenceId: item.recurrenceId,
          dataItem: item.dataItem,
          itemRef: item.itemRef,
          head: item.head,
          tail: item.tail,
          order: item.order,
          zonedStart: item.zonedStart,
          zonedEnd: item.zonedEnd,
          slots: item.slots,
          group: item.group,
          range: item.range,
          isException: item.isException,
          isRecurring: item.isRecurring,
          format: 't',
          onDataaction: this.handleDataAction,
          on: this.v3 ? undefined : {
            "dataaction": this.handleDataAction,
            "dragitemchange": this.handleDragItemChange,
            "resizeitemchange": this.handleResizeItemChange
          },
          onDragitemchange: this.handleDragItemChange,
          onResizeitemchange: this.handleResizeItemChange,
          viewItem: this.$props.viewItem,
          item: this.$props.item,
          form: this.$props.form,
          editable: this.$props.editable,
          vertical: true
        });
      }, _this2), _this2.compDragItem && !_this2.compDragItem.isAllDay && dragItemClue.call(_this2, true), _this2.compResizeItem && !_this2.compResizeItem.isAllDay && resizeItemClue.call(_this2, true)])])
    );
  },
  methods: {
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    },
    handleDragItemChange: function handleDragItemChange(item) {
      this.currentDragItem = item;
    },
    handleResizeItemChange: function handleResizeItemChange(item) {
      this.currentResizeItem = item;
    }
  }
};
exports.MultiDayViewVue2 = MultiDayViewVue2;
/** @hidden */
var multiDayViewDateRange = function multiDayViewDateRange(_a) {
  var date = _a.date,
    _b = _a.numberOfDays,
    numberOfDays = _b === void 0 ? 1 : _b,
    timezone = _a.timezone;
  var normalized = kendo_date_math_1.ZonedDate.fromLocalDate(date, timezone);
  var firstDay = (0, kendo_date_math_1.getDate)(normalized);
  var lastDay = (0, kendo_date_math_1.addDays)(firstDay, numberOfDays);
  var zonedStart = kendo_date_math_1.ZonedDate.fromUTCDate((0, main_1.toUTCDateTime)(firstDay), timezone);
  var zonedEnd = kendo_date_math_1.ZonedDate.fromUTCDate((0, main_1.toUTCDateTime)(lastDay), timezone);
  var start = new Date(zonedStart.getTime());
  var end = new Date(zonedEnd.getTime());
  return {
    start: start,
    end: end,
    zonedStart: zonedStart,
    zonedEnd: zonedEnd
  };
};
exports.multiDayViewDateRange = multiDayViewDateRange;
/** @hidden */
var MultiDayView = MultiDayViewVue2;
exports.MultiDayView = MultiDayView;