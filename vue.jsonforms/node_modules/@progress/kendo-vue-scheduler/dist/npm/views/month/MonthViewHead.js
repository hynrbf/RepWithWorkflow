"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonthViewHeadVue2 = exports.MonthViewHead = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
var DateHeaderCell_1 = require("../../components/DateHeaderCell");
var kendo_date_math_1 = require("@progress/kendo-date-math");
/** @hidden */
var MonthViewHeadVue2 = {
  name: 'KendoMonthViewHead',
  props: {
    monthSlots: Array,
    dateHeaderCell: [String, Function, Object]
  },
  inject: {
    ri: {
      default: null
    },
    ks: {
      default: null
    }
  },
  provide: function provide() {
    return {
      ksSlots: this.ksSlots
    };
  },
  data: function data() {
    var _this = this;
    return {
      ksSlots: {
        cSlots: this.monthSlots.filter(function (slot) {
          return slot.group.index === _this.ri.groupIndex && slot.range.index === 0;
        })
      }
    };
  },
  watch: {
    currentCellSlots: function currentCellSlots(newValue) {
      this.ksSlots.cSlots = newValue;
    }
  },
  computed: {
    currentCellSlots: function currentCellSlots() {
      var _this = this;
      return this.monthSlots.filter(function (slot) {
        return slot.group.index === _this.ri.groupIndex && slot.range.index === 0;
      });
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    return h("div", {
      "class": "k-scheduler-row",
      key: this.ri.groupIndex
    }, [this.currentCellSlots.map(function (slot, slotIndex) {
      return (
        // @ts-ignore  function children
        h(DateHeaderCell_1.DateHeaderCell, {
          as: this.$props.dateHeaderCell,
          attrs: this.v3 ? undefined : {
            as: this.$props.dateHeaderCell,
            "data-dayslot-index": slotIndex,
            date: kendo_date_math_1.ZonedDate.fromLocalDate(new Date(slot.zonedEnd.getTime() - (slot.zonedEnd.getTime() - slot.zonedStart.getTime()) / 2), this.ks.timezone),
            start: slot.start,
            end: slot.end,
            format: {
              skeleton: 'EEEE'
            }
          },
          key: slotIndex,
          "data-dayslot-index": slotIndex,
          date: kendo_date_math_1.ZonedDate.fromLocalDate(new Date(slot.zonedEnd.getTime() - (slot.zonedEnd.getTime() - slot.zonedStart.getTime()) / 2), this.ks.timezone),
          start: slot.start,
          end: slot.end,
          format: {
            skeleton: 'EEEE'
          }
        })
      );
    }, this)]);
  }
};
exports.MonthViewHeadVue2 = MonthViewHeadVue2;
/** @hidden */
var MonthViewHead = MonthViewHeadVue2;
exports.MonthViewHead = MonthViewHead;