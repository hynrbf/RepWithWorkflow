"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSlotExpand = void 0;
var utils_1 = require("../views/common/utils");
var main_1 = require("../constants/main");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/** @hidden */
var useSlotExpand = function useSlotExpand(slot, _scheduler, config) {
  var timeout = undefined;
  var initialHeight = 0;
  var getElement = function getElement(el) {
    return el.nodeType === 8 ? el.parentElement : el.nodeType === 3 ? el.nextElementSibling : el;
  };
  var getInitialHeight = function getInitialHeight() {
    if (!slot) {
      return;
    }
    var element = getElement(slot.$el);
    if (!element) {
      return;
    }
    element.style.minHeight = slot.$props.slotStyle && slot.$props.slotStyle.minHeight ? slot.$props.slotStyle.minHeight : null;
    initialHeight = element.clientHeight;
  };
  var expand = function expand() {
    if (!config || !slot) {
      return;
    }
    var element = getElement(slot.$el);
    if (!element || !slot.bv.items.length) {
      return;
    }
    var slotPadding = (0, utils_1.getPadding)(element);
    var highest = 0;
    var existing = slot.cSlot.items.filter(function (i) {
      return i.refTo;
    });
    existing.forEach(function (item) {
      var currentItem = slot.bv.items.find(function (i) {
        return i.uid === item.uid;
      });
      if (!currentItem) {
        return;
      }
      var height = (0, utils_1.getRect)(currentItem.getElement()).height;
      highest += height;
    });
    var minHeight = existing.length * main_1.BORDER_WIDTH * 2 + highest - (slotPadding || 0) + ((0, kendo_vue_common_1.isObject)(config) && config.offsetTop ? config.offsetTop : 0) + ((0, kendo_vue_common_1.isObject)(config) && config.offsetBottom ? config.offsetBottom : 0);
    if (existing.length) {
      if (minHeight > initialHeight - slotPadding) {
        (0, utils_1.setRect)(element, {
          height: minHeight
        }, true);
      }
    } else if (element) {
      element.style.minHeight = slot.$props.slotStyle && slot.$props.slotStyle.minHeight ? slot.$props.slotStyle.minHeight : null;
    }
  };
  getInitialHeight();
  expand();
};
exports.useSlotExpand = useSlotExpand;