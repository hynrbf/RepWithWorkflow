"use strict";

var __spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchSelectedSlots = exports.SLOTS_SELECT_ACTION = void 0;
/**
 * Represents the available `action` types for the `SchedulerSlotsSelectAction` objects.
 *
 * The available actions are:
 * - `SLOTS_SELECT_SELECT`
 * - `SLOTS_SELECT_RESET`
 * - `SLOTS_SELECT_ADD`
 */
var SLOTS_SELECT_ACTION;
(function (SLOTS_SELECT_ACTION) {
  SLOTS_SELECT_ACTION["select"] = "SLOTS_SELECT_SELECT";
  SLOTS_SELECT_ACTION["reset"] = "SLOTS_SELECT_RESET";
  SLOTS_SELECT_ACTION["add"] = "SLOTS_SELECT_ADD";
})(SLOTS_SELECT_ACTION = exports.SLOTS_SELECT_ACTION || (exports.SLOTS_SELECT_ACTION = {}));
/** @hidden */
var dispatchSelectedSlots = function dispatchSelectedSlots(action) {
  switch (action.type) {
    case SLOTS_SELECT_ACTION.select:
      if (!action.slot) {
        return;
      }
      this.bv.selectedSlots = [action.slot];
      break;
    case SLOTS_SELECT_ACTION.reset:
      this.bv.selectedSlots = [];
      break;
    case SLOTS_SELECT_ACTION.add:
      if (!action.slot) {
        return;
      }
      if (!this.bv.selectedSlots.some(function (ss) {
        return ss === action.slot;
      })) {
        this.bv.selectedSlots = __spreadArray(__spreadArray([], this.bv.selectedSlots, true), [action.slot], false);
      }
      break;
    default:
      break;
  }
};
exports.dispatchSelectedSlots = dispatchSelectedSlots;