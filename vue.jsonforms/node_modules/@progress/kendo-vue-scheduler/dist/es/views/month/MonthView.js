var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { BaseView } from '../../components/BaseView';
import { MS_PER_DAY, firstDayInWeek, firstDayOfMonth, getDate, addDays, lastDayOfMonth, ZonedDate } from '@progress/kendo-date-math';
import { VerticalResourceIterator } from '../common/VerticalResourceIterator';
import { HorizontalResourceIterator } from '../common/HorizontalResourceIterator';
import { mapItemsToSlots, mapSlotsToItems, toUTCDateTime, orderSort } from '../../utils/main';
import { monthViewTitle, messages } from '../../messages/main';
import { SchedulerEditSlot } from '../../slots/SchedulerEditSlot';
import { provideIntlService, provideLocalizationService } from '@progress/kendo-vue-intl';
import { DAYS_IN_WEEK_COUNT } from '../../constants/main';
import { toRanges } from '../../services/rangeService';
import { toSlots } from '../../services/slotsService';
import { toOccurrences } from '../../services/occurrenceService';
import { toItems } from '../../services/itemsService';
import { MonthViewHead } from './MonthViewHead';
import { MonthViewBody } from './MonthViewBody';
import { SchedulerEditItem } from '../../items/SchedulerEditItem';
import { SchedulerResize } from '../common/SchedulerResize';
import { SchedulerDrag } from '../../views/common/SchedulerDrag';
/** @hidden */
var MonthViewVue2 = {
  name: 'KendoMonthView',
  props: {
    itemsPerSlot: {
      type: Number,
      default: 2
    },
    name: {
      type: String,
      default: 'month'
    },
    dateRange: {
      type: [Function, Object],
      default: function _default() {
        return monthViewDateRange;
      }
    },
    slotDuration: {
      type: Number,
      default: 24 * 60
    },
    slotDivisions: {
      type: Number,
      default: 1
    },
    numberOfDays: {
      type: Number,
      default: 31
    },
    dragItem: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    resizeItem: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    title: String,
    selectedDateFormat: {
      type: String,
      default: '{0:Y}'
    },
    selectedShortDateFormat: {
      type: String,
      default: '{0:Y}'
    },
    dateHeaderCell: [String, Function, Object],
    slotRender: [String, Function, Object],
    viewSlot: [String, Function, Object],
    resizeHint: [String, Function, Object],
    item: [String, Function, Object],
    viewItem: [String, Function, Object],
    editable: {
      type: [Boolean, Object],
      default: false
    }
  },
  inject: {
    ks: {
      default: {}
    },
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  created: function created() {
    this.intl = provideIntlService(this);
  },
  mounted: function mounted() {
    this.hasMounted = true;
  },
  data: function data() {
    return {
      hasMounted: false,
      currentDragItem: undefined,
      currentResizeItem: undefined
    };
  },
  computed: {
    ranges: function ranges() {
      return toRanges(this.ks.dateRange, {
        step: MS_PER_DAY * DAYS_IN_WEEK_COUNT,
        timezone: this.ks.timezone
      });
    },
    monthSlots: function monthSlots() {
      return toSlots(this.ks.dateRange, {
        step: MS_PER_DAY
      }, {
        groups: this.ks.groups,
        ranges: this.ranges
      });
    },
    occurrences: function occurrences() {
      return toOccurrences(this.ks.dataItems, {
        dateRange: this.ks.dateRange,
        fields: this.ks.fields,
        timezone: this.ks.timezone
      });
    },
    items: function items() {
      var items = toItems(this.occurrences, {
        timezone: this.ks.timezone
      }, {
        groups: this.ks.groups,
        ranges: this.ranges
      });
      mapItemsToSlots(items, this.monthSlots, true);
      mapSlotsToItems(items, this.monthSlots, true);
      return items;
    },
    compDragItem: function compDragItem() {
      return this.dragItem !== undefined ? this.dragItem : this.currentDragItem;
    },
    compResizeItem: function compResizeItem() {
      return this.resizeItem !== undefined ? this.resizeItem : this.currentResizeItem;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;
    var h = gh || createElement;
    this.localization = provideLocalizationService(this);
    var title = this.localization.toLanguageString(monthViewTitle, messages[monthViewTitle]);
    var EditItem = this.$props.editItem || SchedulerEditItem;
    var EditSlot = this.$props.editSlot || SchedulerEditSlot;
    var items = this.items;
    var monthSlots = this.monthSlots;
    var dragItemClue = function dragItemClue(vertical) {
      return this.compDragItem && this.$props.editable.drag && (Array.isArray(this.compDragItem) ? this.compDragItem.map(function (di, idx) {
        return h(SchedulerDrag, {
          key: idx,
          ignoreIsAllDay: true,
          attrs: this.v3 ? undefined : {
            ignoreIsAllDay: true,
            dataItem: di,
            vertical: vertical,
            item: this.$props.dataItem
          },
          dataItem: di,
          vertical: vertical,
          item: this.$props.dataItem
        });
      }, this) : h(SchedulerDrag, {
        ignoreIsAllDay: true,
        attrs: this.v3 ? undefined : {
          ignoreIsAllDay: true,
          dataItem: this.compDragItem,
          vertical: vertical,
          item: this.$props.dataItem
        },
        dataItem: this.compDragItem,
        vertical: vertical,
        item: this.$props.dataItem
      }));
    };
    var resizeItemClue = function resizeItemClue(vertical) {
      return this.compResizeItem && this.editable.resize && (Array.isArray(this.compResizeItem) ? this.compResizeItem.map(function (ri, idx) {
        return h(SchedulerResize, {
          key: idx,
          format: this.$props.format,
          attrs: this.v3 ? undefined : {
            format: this.$props.format,
            ignoreIsAllDay: true,
            dataItem: ri,
            viewItem: this.$props.viewItem,
            item: this.$props.item,
            vertical: vertical
          },
          ignoreIsAllDay: true,
          dataItem: ri,
          viewItem: this.$props.viewItem,
          item: this.$props.item,
          vertical: vertical
        });
      }, this) : h(SchedulerResize, {
        format: this.$props.format,
        attrs: this.v3 ? undefined : {
          format: this.$props.format,
          ignoreIsAllDay: true,
          dataItem: this.compResizeItem,
          viewItem: this.$props.viewItem,
          item: this.$props.item,
          vertical: vertical
        },
        ignoreIsAllDay: true,
        dataItem: this.compResizeItem,
        viewItem: this.$props.viewItem,
        item: this.$props.item,
        vertical: vertical
      }));
    };
    this.intl = provideIntlService(this);
    var itemsPerSlot = this.$props.itemsPerSlot;
    var body = this.ks.orientation === 'horizontal' ? this.ranges.map(function (_, rangeIndex) {
      var _this = this;
      return (
        // @ts-ignore  function children
        h(HorizontalResourceIterator, {
          resources: this.ks.props.resources,
          attrs: this.v3 ? undefined : {
            resources: this.ks.props.resources,
            group: this.ks.props.group
          },
          group: this.ks.props.group
        }, this.v3 ? function () {
          return [h(MonthViewBody, {
            editable: _this.$props.editable,
            attrs: _this.v3 ? undefined : {
              editable: _this.$props.editable,
              slotRender: _this.$props.slotRender,
              viewSlot: _this.$props.viewSlot,
              monthSlots: monthSlots,
              rangeIndex: rangeIndex,
              itemsPerSlot: itemsPerSlot
            },
            slotRender: _this.$props.slotRender,
            viewSlot: _this.$props.viewSlot,
            monthSlots: monthSlots,
            rangeIndex: rangeIndex,
            itemsPerSlot: itemsPerSlot,
            onDataaction: _this.handleDataAction,
            on: _this.v3 ? undefined : {
              "dataaction": _this.handleDataAction
            }
          })];
        } : [h(MonthViewBody, {
          editable: _this.$props.editable,
          attrs: _this.v3 ? undefined : {
            editable: _this.$props.editable,
            slotRender: _this.$props.slotRender,
            viewSlot: _this.$props.viewSlot,
            monthSlots: monthSlots,
            rangeIndex: rangeIndex,
            itemsPerSlot: itemsPerSlot
          },
          slotRender: _this.$props.slotRender,
          viewSlot: _this.$props.viewSlot,
          monthSlots: monthSlots,
          rangeIndex: rangeIndex,
          itemsPerSlot: itemsPerSlot,
          onDataaction: _this.handleDataAction,
          on: _this.v3 ? undefined : {
            "dataaction": _this.handleDataAction
          }
        })])
      );
    }, this) :
    // @ts-ignore  function children
    h(VerticalResourceIterator, {
      nested: true,
      attrs: this.v3 ? undefined : {
        nested: true,
        resources: this.ks.props.resources,
        group: this.ks.props.group,
        more: {
          slotRender: this.$props.slotRender,
          viewSlot: this.$props.viewSlot,
          monthSlots: monthSlots,
          ranges: this.ranges,
          itemsPerSlot: itemsPerSlot,
          editable: this.$props.editable
        }
      },
      resources: this.ks.props.resources,
      group: this.ks.props.group,
      onDataaction: this.handleDataAction,
      on: this.v3 ? undefined : {
        "dataaction": this.handleDataAction
      },
      more: {
        slotRender: this.$props.slotRender,
        viewSlot: this.$props.viewSlot,
        monthSlots: monthSlots,
        ranges: this.ranges,
        itemsPerSlot: itemsPerSlot,
        editable: this.$props.editable
      }
    });
    return (
      // @ts-ignore  function children
      h(BaseView, {
        viewProps: __assign({}, this.$props),
        attrs: this.v3 ? undefined : {
          viewProps: __assign({}, this.$props),
          baseSlots: monthSlots,
          ranges: this.ranges
        },
        baseSlots: monthSlots,
        ranges: this.ranges,
        "class": 'k-scheduler-monthview'
      }, this.v3 ? function () {
        return [h("div", {
          "class": "k-scheduler-head"
        }, [_this2.ks.orientation === 'horizontal' ?
        // @ts-ignore  function children
        h(HorizontalResourceIterator, {
          nested: true,
          attrs: _this2.v3 ? undefined : {
            nested: true,
            resources: _this2.ks.props.resources,
            group: _this2.ks.props.group
          },
          resources: _this2.ks.props.resources,
          group: _this2.ks.props.group
        }, _this2.v3 ? function () {
          return [h(MonthViewHead, {
            monthSlots: monthSlots,
            attrs: _this2.v3 ? undefined : {
              monthSlots: monthSlots,
              dateHeaderCell: _this2.$props.dateHeaderCell
            },
            dateHeaderCell: _this2.$props.dateHeaderCell
          })];
        } : [h(MonthViewHead, {
          monthSlots: monthSlots,
          attrs: _this2.v3 ? undefined : {
            monthSlots: monthSlots,
            dateHeaderCell: _this2.$props.dateHeaderCell
          },
          dateHeaderCell: _this2.$props.dateHeaderCell
        })]) :
        // @ts-ignore  function children
        h(VerticalResourceIterator, {
          resources: _this2.ks.props.resources,
          attrs: _this2.v3 ? undefined : {
            resources: _this2.ks.props.resources,
            group: _this2.ks.props.group
          },
          group: _this2.ks.props.group
        }, _this2.v3 ? function () {
          return [h(MonthViewHead, {
            monthSlots: monthSlots,
            attrs: _this2.v3 ? undefined : {
              monthSlots: monthSlots,
              dateHeaderCell: _this2.$props.dateHeaderCell
            },
            dateHeaderCell: _this2.$props.dateHeaderCell
          })];
        } : [h(MonthViewHead, {
          monthSlots: monthSlots,
          attrs: _this2.v3 ? undefined : {
            monthSlots: monthSlots,
            dateHeaderCell: _this2.$props.dateHeaderCell
          },
          dateHeaderCell: _this2.$props.dateHeaderCell
        })])]), h("div", {
          "class": "k-scheduler-body"
        }, [body, _this2.hasMounted && items.filter(function (item) {
          return item.order === null || item.order < itemsPerSlot;
        }).sort(orderSort).map(function (item) {
          return h(EditItem, {
            item: this.$props.item,
            attrs: this.v3 ? undefined : {
              item: this.$props.item,
              viewItem: this.$props.viewItem,
              form: this.$props.form,
              uid: item.uid,
              start: item.start,
              end: item.end,
              originalStart: item.originalStart,
              startTimezone: item.startTimezone,
              endTimezone: item.endTimezone,
              isAllDay: item.isAllDay,
              title: item.title,
              description: item.description,
              occurrenceId: item.occurrenceId,
              recurrenceExceptions: item.recurrenceExceptions,
              recurrenceRule: item.recurrenceRule,
              recurrenceId: item.recurrenceId,
              dataItem: item.dataItem,
              itemRef: item.itemRef,
              head: item.head,
              tail: item.tail,
              order: item.order,
              zonedStart: item.zonedStart,
              zonedEnd: item.zonedEnd,
              slots: item.slots,
              group: item.group,
              range: item.range,
              isException: item.isException,
              isRecurring: item.isRecurring,
              vertical: false,
              editable: this.$props.editable,
              ignoreIsAllDay: true
            },
            viewItem: this.$props.viewItem,
            form: this.$props.form,
            key: item.isRecurring ? "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index, ":").concat(item.originalStart) : "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index),
            uid: item.uid,
            start: item.start,
            end: item.end,
            originalStart: item.originalStart,
            startTimezone: item.startTimezone,
            endTimezone: item.endTimezone,
            isAllDay: item.isAllDay,
            title: item.title,
            description: item.description,
            occurrenceId: item.occurrenceId,
            recurrenceExceptions: item.recurrenceExceptions,
            recurrenceRule: item.recurrenceRule,
            recurrenceId: item.recurrenceId,
            dataItem: item.dataItem,
            itemRef: item.itemRef,
            head: item.head,
            tail: item.tail,
            order: item.order,
            zonedStart: item.zonedStart,
            zonedEnd: item.zonedEnd,
            slots: item.slots,
            group: item.group,
            range: item.range,
            isException: item.isException,
            isRecurring: item.isRecurring,
            onDragitemchange: this.handleDragItemChange,
            on: this.v3 ? undefined : {
              "dragitemchange": this.handleDragItemChange,
              "resizeitemchange": this.handleResizeItemChange,
              "dataaction": this.handleDataAction
            },
            onResizeitemchange: this.handleResizeItemChange,
            onDataaction: this.handleDataAction,
            style: {
              transform: 'translateY(30px)'
            },
            vertical: false,
            editable: this.$props.editable,
            ignoreIsAllDay: true
          });
        }, _this2), _this2.compDragItem && dragItemClue.call(_this2, false), _this2.compResizeItem && resizeItemClue.call(_this2, false)])];
      } : [h("div", {
        "class": "k-scheduler-head"
      }, [_this2.ks.orientation === 'horizontal' ? h(HorizontalResourceIterator, {
        nested: true,
        attrs: _this2.v3 ? undefined : {
          nested: true,
          resources: _this2.ks.props.resources,
          group: _this2.ks.props.group
        },
        resources: _this2.ks.props.resources,
        group: _this2.ks.props.group
      }, _this2.v3 ? function () {
        return [h(MonthViewHead, {
          monthSlots: monthSlots,
          attrs: _this2.v3 ? undefined : {
            monthSlots: monthSlots,
            dateHeaderCell: _this2.$props.dateHeaderCell
          },
          dateHeaderCell: _this2.$props.dateHeaderCell
        })];
      } : [h(MonthViewHead, {
        monthSlots: monthSlots,
        attrs: _this2.v3 ? undefined : {
          monthSlots: monthSlots,
          dateHeaderCell: _this2.$props.dateHeaderCell
        },
        dateHeaderCell: _this2.$props.dateHeaderCell
      })]) : h(VerticalResourceIterator, {
        resources: _this2.ks.props.resources,
        attrs: _this2.v3 ? undefined : {
          resources: _this2.ks.props.resources,
          group: _this2.ks.props.group
        },
        group: _this2.ks.props.group
      }, _this2.v3 ? function () {
        return [h(MonthViewHead, {
          monthSlots: monthSlots,
          attrs: _this2.v3 ? undefined : {
            monthSlots: monthSlots,
            dateHeaderCell: _this2.$props.dateHeaderCell
          },
          dateHeaderCell: _this2.$props.dateHeaderCell
        })];
      } : [h(MonthViewHead, {
        monthSlots: monthSlots,
        attrs: _this2.v3 ? undefined : {
          monthSlots: monthSlots,
          dateHeaderCell: _this2.$props.dateHeaderCell
        },
        dateHeaderCell: _this2.$props.dateHeaderCell
      })])]), h("div", {
        "class": "k-scheduler-body"
      }, [body, _this2.hasMounted && items.filter(function (item) {
        return item.order === null || item.order < itemsPerSlot;
      }).sort(orderSort).map(function (item) {
        return h(EditItem, {
          item: this.$props.item,
          attrs: this.v3 ? undefined : {
            item: this.$props.item,
            viewItem: this.$props.viewItem,
            form: this.$props.form,
            uid: item.uid,
            start: item.start,
            end: item.end,
            originalStart: item.originalStart,
            startTimezone: item.startTimezone,
            endTimezone: item.endTimezone,
            isAllDay: item.isAllDay,
            title: item.title,
            description: item.description,
            occurrenceId: item.occurrenceId,
            recurrenceExceptions: item.recurrenceExceptions,
            recurrenceRule: item.recurrenceRule,
            recurrenceId: item.recurrenceId,
            dataItem: item.dataItem,
            itemRef: item.itemRef,
            head: item.head,
            tail: item.tail,
            order: item.order,
            zonedStart: item.zonedStart,
            zonedEnd: item.zonedEnd,
            slots: item.slots,
            group: item.group,
            range: item.range,
            isException: item.isException,
            isRecurring: item.isRecurring,
            vertical: false,
            editable: this.$props.editable,
            ignoreIsAllDay: true
          },
          viewItem: this.$props.viewItem,
          form: this.$props.form,
          key: item.isRecurring ? "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index, ":").concat(item.originalStart) : "".concat(item.uid, ":").concat(item.group.index, ":").concat(item.range.index),
          uid: item.uid,
          start: item.start,
          end: item.end,
          originalStart: item.originalStart,
          startTimezone: item.startTimezone,
          endTimezone: item.endTimezone,
          isAllDay: item.isAllDay,
          title: item.title,
          description: item.description,
          occurrenceId: item.occurrenceId,
          recurrenceExceptions: item.recurrenceExceptions,
          recurrenceRule: item.recurrenceRule,
          recurrenceId: item.recurrenceId,
          dataItem: item.dataItem,
          itemRef: item.itemRef,
          head: item.head,
          tail: item.tail,
          order: item.order,
          zonedStart: item.zonedStart,
          zonedEnd: item.zonedEnd,
          slots: item.slots,
          group: item.group,
          range: item.range,
          isException: item.isException,
          isRecurring: item.isRecurring,
          onDragitemchange: this.handleDragItemChange,
          on: this.v3 ? undefined : {
            "dragitemchange": this.handleDragItemChange,
            "resizeitemchange": this.handleResizeItemChange,
            "dataaction": this.handleDataAction
          },
          onResizeitemchange: this.handleResizeItemChange,
          onDataaction: this.handleDataAction,
          style: {
            transform: 'translateY(30px)'
          },
          vertical: false,
          editable: this.$props.editable,
          ignoreIsAllDay: true
        });
      }, _this2), _this2.compDragItem && dragItemClue.call(_this2, false), _this2.compResizeItem && resizeItemClue.call(_this2, false)])])
    );
  },
  methods: {
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    },
    handleDragItemChange: function handleDragItemChange(item) {
      this.currentDragItem = item;
    },
    handleResizeItemChange: function handleResizeItemChange(item) {
      this.currentResizeItem = item;
    }
  }
};
var monthViewDateRange = function monthViewDateRange(_a) {
  var intl = _a.intl,
    date = _a.date,
    timezone = _a.timezone;
  // The DateRange start from the first day of the week containing the first day of the month.
  // I know it sounds strange, but take a look and a wall-calendar!
  var firstDay = firstDayInWeek(firstDayOfMonth(getDate(date)), intl.firstDay());
  var lastDay = addDays(firstDayInWeek(lastDayOfMonth(getDate(date)), intl.firstDay()), DAYS_IN_WEEK_COUNT);
  var zonedStart = ZonedDate.fromUTCDate(toUTCDateTime(firstDay), timezone);
  var zonedEnd = ZonedDate.fromUTCDate(toUTCDateTime(lastDay), timezone);
  var start = new Date(zonedStart.getTime());
  var end = new Date(zonedEnd.getTime());
  return {
    start: start,
    end: end,
    zonedStart: zonedStart,
    zonedEnd: zonedEnd
  };
};
/** @hidden */
var MonthView = MonthViewVue2;
export { MonthView, MonthViewVue2 };