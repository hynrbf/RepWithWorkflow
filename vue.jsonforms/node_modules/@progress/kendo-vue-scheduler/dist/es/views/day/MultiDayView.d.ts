import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { Day } from '@progress/kendo-date-math';
import { DateRange, SchedulerViewProps, SchedulerViewDateRangeArgs } from '../../models/main';
/** @hidden */
export declare const GRID_OFFSET = 1;
/**
 * @hidden
 */
export interface MultiDayViewProps extends SchedulerViewProps {
    /**
     * The long-date format for displaying the
     * selected date in the Scheduler toolbar.
     * Defaults to `{0:D} - {1:D}`
     * ([more information](https://www.github.com/telerik/kendo-intl/blob/develop/docs/date-formatting/index.md))
     */
    selectedDateFormat?: string;
    /**
     * The short-date format for displaying the
     * selected date in the Scheduler toolbar.
     * Defaults to `{0:d} - {1-d}`
     * ([more information](https://www.github.com/telerik/kendo-intl/blob/develop/docs/date-formatting/index.md))
     */
    selectedShortDateFormat?: string;
    /**
     * Overrides the general `editable` prop of the Scheduler for the specified view only.
     */
    editable?: boolean;
    /**
     * Specifies the number of days that the view will render.
     * Defaults to `1`.
     */
    numberOfDays?: number;
    /**
     * The start time of the view. The MultiDayView displays events which are visible after the start time.
     * Accepts string values in the `HH:mm` format.
     */
    startTime?: string;
    /**
     * The end time of the view. The MultiDayView displays events which are visible before the end time.
     * Accepts string values in the `HH:mm` format.
     */
    endTime?: string;
    /**
     * The number of steps (in days) to change, when using the back and forwards buttons in the toolbar navigation.
     * The default value is 1 days.
     */
    step?: number;
    /**
     * The start time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format.
     */
    workDayStart?: string | any;
    /** @hidden */
    isWorkDayStart?: string;
    /**
     * The end time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format.
     */
    workDayEnd?: string | any;
    /** @hidden */
    isWorkDayEnd?: string;
    /**
     * The start of the work week.
     */
    workWeekStart?: Day;
    /**
     * The end of the work week.
     */
    workWeekEnd?: Day;
    /**
     * The number of divisions of the time slots.
     */
    slotDivisions?: number;
    /**
     * The duration (in minutes) of the time slots.
     */
    slotDuration?: number;
    /**
     * If set to `true`, the view will be shown in the business-hours mode only.
     *
     * This will always override the internal `showWorkHours` state.
     */
    showWorkHours?: boolean;
    /**
     * Sets the initial business-hour mode. Default `true`.
     *
     * This option applies only the initial `showWorkHours` state.
     */
    defaultShowWorkHours?: boolean;
    /**
     * Sets a custom `id` to the wrapping element of the `DayView`.
     */
    id?: string;
    /**
     * Overrides the `item` prop of the Scheduler for the specified view only.
     */
    item?: any;
    /**
     * Overrides the `dragItem` prop of the Scheduler for the specified view only.
     */
    dragItem?: any;
    /**
     * Overrides the `resizeItem` prop of the Scheduler for the specified view only.
     */
    resizeItem?: any;
    /**
     * Overrides the `viewItem` prop of the Scheduler for the specified view only.
     */
    viewItem?: any;
    /**
     * Overrides the `editableItem` prop of the Scheduler for the specified view only.
     */
    editItem?: any;
    /**
     * Overrides the `slot` prop of the Scheduler for the specified view only.
     */
    slotRender?: any;
    /**
     * Overrides the `viewSlot` prop of the Scheduler for the specified view only.
     */
    viewSlot?: any;
    /**
     * Overrides the `editSlot` prop of the Scheduler for the specified view only.
     */
    editSlot?: any;
    /**
     * Overrides the `resizeHint` of the event.
     */
    resizeHint?: any;
    form?: any;
    /**
     * If set to `false` the "current time" marker of the scheduler would not be displayed.
     */
    currentTimeMarker?: boolean;
    /**
     * Represents component based on the DateHeaderCellProps.
     */
    dateHeaderCell?: any;
    /**
     * Represents component based on the TimeHeaderCellProps.
     */
    timeHeaderCell?: any;
}
/**
 * @hidden
 */
export interface MultiDayViewState {
}
/**
 * @hidden
 */
export interface MultiDayViewComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface MultiDayViewMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface MultiDayViewData {
}
/**
 * @hidden
 */
export interface MultiDayViewAll extends Vue2type, MultiDayViewMethods, MultiDayViewData, MultiDayViewComputed, MultiDayViewState {
}
/** @hidden */
declare let MultiDayViewVue2: ComponentOptions<MultiDayViewAll, DefaultData<MultiDayViewData>, DefaultMethods<MultiDayViewAll>, MultiDayViewComputed, RecordPropsDefinition<MultiDayViewProps>>;
/** @hidden */
declare const multiDayViewDateRange: ({ date, numberOfDays, timezone }: SchedulerViewDateRangeArgs) => DateRange;
/** @hidden */
declare const MultiDayView: DefineComponent<MultiDayViewProps, any, MultiDayViewData, MultiDayViewComputed, MultiDayViewMethods, {}, {}, {}, string, MultiDayViewProps, MultiDayViewProps, {}>;
export { MultiDayView, MultiDayViewVue2, multiDayViewDateRange };
