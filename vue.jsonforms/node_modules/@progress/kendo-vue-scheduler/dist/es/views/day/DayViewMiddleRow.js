// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { classNames } from '@progress/kendo-vue-common';
import { GRID_OFFSET } from './MultiDayView';
import { SchedulerEditSlot } from '../../slots/SchedulerEditSlot';
import { isInTimeRange } from '../../utils/main';
/** @hidden */
var DayViewMiddleRowVue2 = {
  name: 'KendoDayViewMiddleRow',
  props: {
    editable: [Object, Boolean],
    slotRender: [String, Function, Object],
    viewSlot: [String, Function, Object],
    timeRanges: Array,
    timeSlots: Array,
    slotDivisions: {
      type: Number,
      default: 2
    },
    rootIndex: {
      type: Number
    },
    root: Object,
    numberOfDays: Number,
    workDayStart: Date,
    workDayEnd: Date,
    workWeekStart: Number,
    workWeekEnd: Number
  },
  inject: {
    ri: {
      default: null
    },
    setSlots: {
      default: null
    }
  },
  provide: function provide() {
    return {
      ksSlots: this.ksSlots
    };
  },
  data: function data() {
    var timeSlots = this.timeSlots;
    var groupIndex = this.ri.groupIndex;
    var root = this.root;
    return {
      ksSlots: {
        cSlots: this.calculateRanges(timeSlots, groupIndex, this.timeRanges, root)
      }
    };
  },
  watch: {
    currentCellSlots: function currentCellSlots(newValue) {
      this.ksSlots.cSlots = newValue;
    }
  },
  computed: {
    currentCellSlots: function currentCellSlots() {
      var timeSlots = this.timeSlots;
      var groupIndex = this.ri.groupIndex;
      var root = this.root;
      return this.calculateRanges(timeSlots, groupIndex, this.timeRanges, root);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var EditSlot = this.$props.editSlot || SchedulerEditSlot;
    var that = this;
    var workWeekStart = that.numberOfDays + that.workWeekStart;
    return h("div", {
      "class": classNames('k-scheduler-row', {
        'k-middle-row': !((this.rootIndex + 1) % this.slotDivisions === 0)
      })
    }, [this.currentCellSlots.map(function (slot, slotIndex) {
      return h(EditSlot, {
        index: slotIndex,
        attrs: this.v3 ? undefined : {
          index: slotIndex,
          slotRender: this.$props.slotRender,
          viewSlot: this.$props.viewSlot,
          form: this.$props.form,
          row: this.rootIndex + GRID_OFFSET,
          col: this.timeRanges.length * (this.ri.groupIndex || 0) + slot.range.index,
          isWorkHour: isInTimeRange(slot.zonedStart, that.workDayStart, that.workDayEnd),
          isWorkDay: 0 <= slot.zonedStart.getDay() + (that.numberOfDays - workWeekStart) && (slot.zonedStart.getDay() + (that.numberOfDays - workWeekStart)) % that.numberOfDays <= that.workWeekEnd + (that.numberOfDays - workWeekStart),
          editable: that.$props.editable
        },
        onDataaction: this.handleDataAction,
        on: this.v3 ? undefined : {
          "dataaction": this.handleDataAction
        },
        slotRender: this.$props.slotRender,
        viewSlot: this.$props.viewSlot,
        form: this.$props.form,
        row: this.rootIndex + GRID_OFFSET,
        col: this.timeRanges.length * (this.ri.groupIndex || 0) + slot.range.index,
        isWorkHour: isInTimeRange(slot.zonedStart, that.workDayStart, that.workDayEnd),
        isWorkDay: 0 <= slot.zonedStart.getDay() + (that.numberOfDays - workWeekStart) && (slot.zonedStart.getDay() + (that.numberOfDays - workWeekStart)) % that.numberOfDays <= that.workWeekEnd + (that.numberOfDays - workWeekStart),
        editable: that.$props.editable
      });
    }, that)]);
  },
  methods: {
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    },
    calculateRanges: function calculateRanges(timeSlots, groupIndex, timeRanges, root) {
      return timeRanges.map(function (_range, rangeIndex) {
        return timeSlots.filter(function (s) {
          return s.index === root.index && s.range.index === rangeIndex && s.group.index === groupIndex;
        });
      }).flat();
    }
  }
};
/** @hidden */
var DayViewMiddleRow = DayViewMiddleRowVue2;
export { DayViewMiddleRow, DayViewMiddleRowVue2 };