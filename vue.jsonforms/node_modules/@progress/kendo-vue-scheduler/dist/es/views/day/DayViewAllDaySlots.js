// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { SchedulerEditSlot } from '../../slots/SchedulerEditSlot';
/** @hidden */
var DayViewAllDaySlotsVue2 = {
  name: 'KendoDayViewAllDaySlots',
  props: {
    slotRender: [String, Function, Object],
    viewSlot: [String, Function, Object],
    dayRanges: Array,
    daySlots: Array,
    numberOfDays: Number,
    workWeekStart: Number,
    workWeekEnd: Number,
    editable: {
      type: [Boolean, Object],
      default: false
    }
  },
  inject: {
    ri: {
      default: null
    },
    ks: {
      default: null
    },
    setSlots: {
      default: null
    }
  },
  provide: function provide() {
    return {
      ksSlots: this.ksSlots
    };
  },
  data: function data() {
    var daySlots = this.daySlots;
    var groupIndex = this.groupIndex !== undefined ? this.groupIndex : this.ri.groupIndex;
    return {
      ksSlots: {
        cSlots: this.calculateRanges(daySlots, groupIndex, this.dayRanges)
      }
    };
  },
  watch: {
    currentCellSlots: function currentCellSlots(newValue) {
      this.ksSlots.cSlots = newValue;
    }
  },
  computed: {
    currentCellSlots: function currentCellSlots() {
      var daySlots = this.daySlots;
      var groupIndex = this.groupIndex !== undefined ? this.groupIndex : this.ri.groupIndex;
      return this.calculateRanges(daySlots, groupIndex, this.dayRanges);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      numberOfDays = _a.numberOfDays,
      workWeekStart = _a.workWeekStart,
      workWeekEnd = _a.workWeekEnd;
    var groupIndex = this.ri.groupIndex;
    return h("div", {
      key: groupIndex,
      "class": "k-scheduler-row"
    }, [this.currentCellSlots.map(function (slot, slotIndex, filtered) {
      return h(SchedulerEditSlot, {
        index: slotIndex,
        attrs: this.v3 ? undefined : {
          index: slotIndex,
          form: this.$props.form,
          slotRender: this.$props.slotRender,
          viewSlot: this.$props.viewSlot
          //      key={`${slot.start.getTime()}:${slot.group.index}`}
          ,
          row: 0,
          col: this.ks.orientation === 'horizontal' ? filtered.length * (groupIndex || 0) + slotIndex : slotIndex,
          isWorkDay: 0 <= slot.zonedStart.getDay() + (numberOfDays - workWeekStart) && (slot.zonedStart.getDay() + (numberOfDays - workWeekStart)) % numberOfDays <= workWeekEnd + (numberOfDays - workWeekStart),
          expandable: true,
          editable: this.$props.editable
        },
        onDataaction: this.handleDataAction,
        on: this.v3 ? undefined : {
          "dataaction": this.handleDataAction
        },
        form: this.$props.form,
        slotRender: this.$props.slotRender,
        viewSlot: this.$props.viewSlot,
        row: 0,
        col: this.ks.orientation === 'horizontal' ? filtered.length * (groupIndex || 0) + slotIndex : slotIndex,
        isWorkDay: 0 <= slot.zonedStart.getDay() + (numberOfDays - workWeekStart) && (slot.zonedStart.getDay() + (numberOfDays - workWeekStart)) % numberOfDays <= workWeekEnd + (numberOfDays - workWeekStart),
        expandable: true,
        editable: this.$props.editable
      });
    }, this)]);
  },
  methods: {
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    },
    calculateRanges: function calculateRanges(daySlots, groupIndex, dayRanges) {
      return dayRanges.map(function (_, rangeIndex) {
        return daySlots.filter(function (s) {
          return s.group.index === groupIndex && s.range.index === rangeIndex;
        });
      }).flat();
    }
  }
};
/** @hidden */
var DayViewAllDaySlots = DayViewAllDaySlotsVue2;
export { DayViewAllDaySlots, DayViewAllDaySlotsVue2 };