// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { ButtonGroup } from '@progress/kendo-vue-buttons';
import { ViewSelectorItem } from './ViewSelectorItem';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, dropdownlistSelectViewAriaLabel } from '../../../messages/main';
/**
 * @hidden
 */
var ViewSelectorListVue2 = {
  name: 'KendoViewSelectorList',
  inject: {
    kendoLocalizationService: {
      default: null
    },
    ks: {
      default: null
    },
    setActiveViewName: {
      default: null
    }
  },
  mounted: function mounted() {
    this.calculateMedia();
    this.observer = new window.ResizeObserver(this.calculateMedia);
    if (this.ks.scheduler) {
      this.observer.observe(this.ks.scheduler.$el);
    }
  },
  destroyed: !!isV3 ? undefined : function () {
    if (this.observer) {
      this.observer.disconnect();
    }
  },
  // @ts-ignore
  unmounted: function unmounted() {
    if (this.observer) {
      this.observer.disconnect();
    }
  },
  data: function data() {
    return {
      media: 'desktop'
    };
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;
    var _this = this;
    var h = gh || createElement;
    var views = this.ks.views;
    this.localization = provideLocalizationService(this);
    var activeView = views.find(function (v) {
      return v.name === _this.ks.activeViewName;
    });
    var activeNameTitle = 'scheduler.' + activeView.name + 'ViewTitle';
    var activeName = this.localization.toLanguageString(activeNameTitle, messages[activeNameTitle]) || activeView.name;
    var dropdown = function dropdown() {
      return h("select", {
        tabIndex: -1,
        attrs: this.v3 ? undefined : {
          tabIndex: -1,
          ariaLabel: this.localization.toLanguageString(dropdownlistSelectViewAriaLabel, messages[dropdownlistSelectViewAriaLabel])
        },
        "class": 'k-views-dropdown k-dropdown k-picker k-picker-solid k-rounded-md k-picker-md',
        ariaLabel: this.localization.toLanguageString(dropdownlistSelectViewAriaLabel, messages[dropdownlistSelectViewAriaLabel]),
        onChange: this.ddlChange,
        on: this.v3 ? undefined : {
          "change": this.ddlChange
        }
      }, [views.map(function (v) {
        var nameTitle = 'scheduler.' + v.name + 'ViewTitle';
        var name = this.localization.toLanguageString(nameTitle, messages[nameTitle]) || v.name;
        return h("option", {
          value: this.v3 ? v.name || v.title || name : null,
          domProps: this.v3 ? undefined : {
            "value": v.name || v.title || name,
            "selected": v.name === this.ks.activeViewName
          },
          selected: this.v3 ? v.name === this.ks.activeViewName : null
        }, [v.title || name]);
      }, this)]);
    };
    return activeView && this.media === 'mobile' ? dropdown.call(this) :
    // @ts-ignore  function children
    h(ButtonGroup, {
      "class": "k-toolbar-button-group k-scheduler-views"
    }, this.v3 ? function () {
      return [views.map(function (view) {
        return h(ViewSelectorItem, {
          key: view.name,
          view: view,
          attrs: this.v3 ? undefined : {
            view: view
          }
        });
      }, _this2)];
    } : [views.map(function (view) {
      return h(ViewSelectorItem, {
        key: view.name,
        view: view,
        attrs: this.v3 ? undefined : {
          view: view
        }
      });
    }, _this2)]);
  },
  methods: {
    ddlChange: function ddlChange(event) {
      this.setActiveViewName(event.target.value);
    },
    calculateMedia: function calculateMedia() {
      this.media = window.matchMedia('(min-width: 1024px)').matches ? 'desktop' : 'mobile';
    }
  }
};
/**
 * @hidden
 */
var ViewSelectorList = ViewSelectorListVue2;
export { ViewSelectorList, ViewSelectorListVue2 };