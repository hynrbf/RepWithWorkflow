var __spreadArray = this && this.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { ButtonGroup, Button } from '@progress/kendo-vue-buttons';
import { capitalize } from './common';
/**
 * @hidden
 */
var RecurrenceRepeatOnWeekEditorVue2 = {
  name: 'KendoRecurrenceRepeatOnWeekEditor',
  // @ts-ignore
  emits: {
    change: null
  },
  props: {
    dataItems: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    value: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      value = _a.value,
      dataItems = _a.dataItems;
    return (
      // @ts-ignore  function children
      h(ButtonGroup, {
        width: 'auto',
        attrs: this.v3 ? undefined : {
          width: 'auto'
        }
      }, this.v3 ? function () {
        return [dataItems.map(function (item) {
          return (
            // @ts-ignore  function children
            h(Button, {
              type: "button",
              attrs: this.v3 ? undefined : {
                type: "button",
                "data-key": item.value,
                selected: value.some(function (v) {
                  return v === item.value;
                }),
                togglable: true
              },
              key: item.value,
              "data-key": item.value,
              selected: value.some(function (v) {
                return v === item.value;
              }),
              togglable: true,
              onClick: this.handleClick,
              on: this.v3 ? undefined : {
                "click": this.handleClick
              }
            }, this.v3 ? function () {
              return [capitalize(item.text)];
            } : [capitalize(item.text)])
          );
        }, _this)];
      } : [dataItems.map(function (item) {
        return h(Button, {
          type: "button",
          attrs: this.v3 ? undefined : {
            type: "button",
            "data-key": item.value,
            selected: value.some(function (v) {
              return v === item.value;
            }),
            togglable: true
          },
          key: item.value,
          "data-key": item.value,
          selected: value.some(function (v) {
            return v === item.value;
          }),
          togglable: true,
          onClick: this.handleClick,
          on: this.v3 ? undefined : {
            "click": this.handleClick
          }
        }, this.v3 ? function () {
          return [capitalize(item.text)];
        } : [capitalize(item.text)]);
      }, _this)])
    );
  },
  methods: {
    handleClick: function handleClick(event) {
      var newValue = Number(event.currentTarget.dataset.key);
      this.$emit('change', this.value.some(function (i) {
        return i === newValue;
      }) ? this.value.filter(function (i) {
        return i !== newValue;
      }) : __spreadArray(__spreadArray([], this.value, true), [newValue], false));
    }
  }
};
/**
 * @hidden
 */
var RecurrenceRepeatOnWeekEditor = RecurrenceRepeatOnWeekEditorVue2;
export { RecurrenceRepeatOnWeekEditor, RecurrenceRepeatOnWeekEditorVue2 };