// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { ButtonGroup, Button } from '@progress/kendo-vue-buttons';
/**
 * @hidden
 */
var RecurrenceFrequencyEditorVue2 = {
  name: 'KendoRecurrenceFrequencyEditor',
  // @ts-ignore
  emits: {
    change: null
  },
  props: {
    value: String,
    dataItems: Array
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      value = _a.value,
      dataItems = _a.dataItems;
    return (
      // @ts-ignore  function children
      h(ButtonGroup, {
        "class": 'k-scheduler-recurrence-repeat',
        width: '100%',
        attrs: this.v3 ? undefined : {
          width: '100%'
        }
      }, this.v3 ? function () {
        return [dataItems.map(function (item) {
          return (
            // @ts-ignore  function children
            h(Button, {
              type: "button",
              attrs: this.v3 ? undefined : {
                type: "button",
                selected: item.value === value,
                "data-value": item.value,
                togglable: true
              },
              key: item.value,
              selected: item.value === value,
              onClick: this.handleClick,
              on: this.v3 ? undefined : {
                "click": this.handleClick
              },
              "data-value": item.value,
              togglable: true
            }, this.v3 ? function () {
              return [item.text];
            } : [item.text])
          );
        }, _this)];
      } : [dataItems.map(function (item) {
        return h(Button, {
          type: "button",
          attrs: this.v3 ? undefined : {
            type: "button",
            selected: item.value === value,
            "data-value": item.value,
            togglable: true
          },
          key: item.value,
          selected: item.value === value,
          onClick: this.handleClick,
          on: this.v3 ? undefined : {
            "click": this.handleClick
          },
          "data-value": item.value,
          togglable: true
        }, this.v3 ? function () {
          return [item.text];
        } : [item.text]);
      }, _this)])
    );
  },
  methods: {
    handleClick: function handleClick(event) {
      this.$emit('change', event.currentTarget.dataset.value);
    }
  }
};
/**
 * @hidden
 */
var RecurrenceFrequencyEditor = RecurrenceFrequencyEditorVue2;
export { RecurrenceFrequencyEditor, RecurrenceFrequencyEditorVue2 };