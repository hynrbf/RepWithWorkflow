var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { getDefaultSlots } from '@progress/kendo-vue-common';
import { COLLECTION_ACTION, formatEventTime } from '../utils/main';
import { provideIntlService } from '@progress/kendo-vue-intl';
import { ShowMoreItemsButton } from '../components/ShowMoreItemsButton';
import { SchedulerForm } from '../components/SchedulerForm';
var DAY_FORMAT = {
  skeleton: 'dd'
};
/**
 * @hidden
 */
var SchedulerSlotVue2 = {
  name: 'KendoSchedulerSlot',
  inheritAttrs: false,
  // @ts-ignore
  emits: {
    focus: null,
    blur: null,
    click: null,
    showmoreitems: null,
    mouseover: null,
    mouseout: null,
    mouseenter: null,
    mouseleave: null,
    doubleclick: null,
    keydown: null,
    keypress: null,
    keyup: null
  },
  props: {
    refTo: [Function, Object],
    items: Array,
    row: Number,
    group: Object,
    range: Object,
    isWorkDay: {
      type: Boolean,
      default: true
    },
    isWorkHour: {
      type: Boolean,
      default: true
    },
    selected: Boolean,
    tabIndex: {
      type: Number,
      default: undefined
    },
    col: Number,
    index: Number,
    start: Date,
    end: Date,
    zonedStart: Object,
    zonedEnd: Object,
    isAllDay: Boolean,
    navDay: Boolean,
    editable: [Object, Boolean],
    itemsPerSlot: Number,
    formItem: Object,
    slotStyle: Object,
    viewSlot: Object
  },
  computed: {
    cSlot: function cSlot() {
      var slots = this.ksSlots.cSlots;
      return slots ? slots[this.index] ? slots[this.index] : slots.length ? slots[0] : {} : {};
    },
    currentTabIndex: function currentTabIndex() {
      return this.$props.tabIndex !== undefined ? this.$props.tabIndex === null ? undefined : this.$props.tabIndex : this.$props.selected ? 0 : -1;
    },
    slotClass: function slotClass() {
      return {
        'k-scheduler-cell k-slot-cell': true,
        'k-nonwork-hour': !this.$props.isWorkHour || !this.$props.isWorkDay,
        'k-selected': this.$props.selected
      };
    },
    slotLabel: function slotLabel() {
      return "".concat(formatEventTime(this.intl, this.$props.zonedStart, this.$props.zonedEnd, this.$props.isAllDay || false));
    }
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    setSlots: {
      default: null
    },
    slotClick: {
      default: null
    },
    slotDoubleClick: {
      default: null
    },
    ksEditFormSubmit: {
      default: null
    },
    ksEditFormCancel: {
      default: null
    },
    ksEditFormClose: {
      default: null
    },
    ksSlots: {
      default: {}
    }
  },
  data: function data() {
    return {
      hasMounted: false
    };
  },
  mounted: function mounted() {
    this.hasMounted = true;
    this.setSlots({
      type: COLLECTION_ACTION.add,
      item: this
    });
  },
  destroyed: !!isV3 ? undefined : function () {
    this.setSlots({
      type: COLLECTION_ACTION.remove,
      item: this
    });
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.setSlots({
      type: COLLECTION_ACTION.remove,
      item: this
    });
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    this.intl = provideIntlService(this);
    var defaultSlot = getDefaultSlots(this);
    var slotStyle = Object.assign({
      userSelect: 'none'
    }, this.$props.slotStyle, this.$attrs.style);
    return h("div", {
      //   key={`${this.cSlot.start.getTime()}:${this.cSlot.group.index}`}
      id: this.$props.id,
      attrs: this.v3 ? undefined : {
        id: this.$props.id,
        tabindex: this.currentTabIndex
        // Focus
        ,

        "data-slot": true,
        "data-slot-allday": this.cSlot.isAllDay,
        "data-slot-start": this.cSlot.start.getTime(),
        "data-slot-end": this.cSlot.end.getTime(),
        "data-slot-group": this.cSlot.group.index,
        "data-slot-range": this.cSlot.range.index,
        "data-slot-index": this.cSlot.index
      },
      style: slotStyle,
      "class": this.slotClass,
      tabindex: this.currentTabIndex,
      onFocus: this.handleFocus,
      on: this.v3 ? undefined : {
        "focus": this.handleFocus,
        "blur": this.handleBlur,
        "click": this.handleClick,
        "mouseenter": this.handleMouseEnter,
        "mouseleave": this.handleMouseLeave,
        "mouseover": this.handleMouseOver,
        "mouseout": this.handleMouseOut,
        "dblclick": this.handleDoubleClick,
        "keydown": this.handleKeyDown,
        "keypress": this.handleKeyPress,
        "keyup": this.handleKeyUp
      },
      onBlur: this.handleBlur
      // Mouse
      ,
      onClick: this.handleClick,
      onMouseenter: this.handleMouseEnter,
      onMouseleave: this.handleMouseLeave,
      onMouseover: this.handleMouseOver,
      onMouseout: this.handleMouseOut,
      onDblclick: this.handleDoubleClick
      // Keyboard
      ,
      onKeydown: this.handleKeyDown,
      onKeypress: this.handleKeyPress,
      onKeyup: this.handleKeyUp,
      "data-slot": true,
      "data-slot-allday": this.cSlot.isAllDay,
      "data-slot-start": this.cSlot.start.getTime(),
      "data-slot-end": this.cSlot.end.getTime(),
      "data-slot-group": this.cSlot.group.index,
      "data-slot-range": this.cSlot.range.index,
      "data-slot-index": this.cSlot.index
    }, [this.navDay && h("span", {
      "class": "k-link k-nav-day"
    }, [this.intl.formatDate(new Date(this.cSlot.end.getTime() - (this.cSlot.end.getTime() - this.cSlot.start.getTime()) / 2), DAY_FORMAT)]), this.hasMounted && this.itemsPerSlot < this.cSlot.items.length && h(ShowMoreItemsButton, {
      onClick: this.handleShowMoreItemsClick,
      on: this.v3 ? undefined : {
        "click": this.handleShowMoreItemsClick
      }
    }), defaultSlot, this.formItem && h(SchedulerForm, {
      dataItem: this.formItem,
      attrs: this.v3 ? undefined : {
        dataItem: this.formItem
      },
      onSubmit: this.ksEditFormSubmit,
      on: this.v3 ? undefined : {
        "submit": this.ksEditFormSubmit,
        "close": this.ksEditFormClose,
        "cancel": this.ksEditFormCancel
      },
      onClose: this.ksEditFormClose,
      onCancel: this.ksEditFormCancel
    })]);
  },
  methods: {
    handleShowMoreItemsClick: function handleShowMoreItemsClick(event) {
      this.$emit('showmoreitems', event);
    },
    handleFocus: function handleFocus(event) {
      this.$emit('focus', {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      });
    },
    handleBlur: function handleBlur(event) {
      this.$emit('blur', {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      });
    },
    handleClick: function handleClick(event) {
      var args = {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      };
      this.$emit('click', args);
      this.slotClick(args);
    },
    handleMouseOver: function handleMouseOver(event) {
      this.$emit('mouseover', {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      });
    },
    handleMouseOut: function handleMouseOut(event) {
      this.$emit('mouseout', {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      });
    },
    handleMouseEnter: function handleMouseEnter(event) {
      this.$emit('mouseenter', {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      });
    },
    handleMouseLeave: function handleMouseLeave(event) {
      this.$emit('mouseleave', {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      });
    },
    handleDoubleClick: function handleDoubleClick(event) {
      var args = {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      };
      this.$emit('doubleclick', args);
      this.slotDoubleClick(args);
    },
    handleKeyDown: function handleKeyDown(event) {
      this.$emit('keydown', {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      });
    },
    handleKeyPress: function handleKeyPress(event) {
      this.$emit('keypress', {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      });
    },
    handleKeyUp: function handleKeyUp(event) {
      this.$emit('keyup', {
        event: event,
        target: {
          props: __assign({}, this.cSlot),
          element: this.$el
        }
      });
    }
  }
};
/**
 * @hidden
 */
var SchedulerSlot = SchedulerSlotVue2;
export { SchedulerSlot, SchedulerSlotVue2 };