var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { SchedulerViewTask } from './SchedulerViewTask';
import { useEditable } from '../hooks/main';
import { findMaster } from '../utils/main';
import { DATA_ACTION } from '../Scheduler';
import { getDefaultSlots } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var SchedulerEditTaskVue2 = {
  name: 'KendoSchedulerEditTask',
  props: {
    viewTask: [String, Function, Object],
    removeDialog: [String, Function, Object],
    removeItem: [String, Function, Object],
    occurrenceDialog: [String, Function, Object],
    task: [String, Function, Object],
    showOccurrenceDialog: {
      type: Boolean,
      default: undefined
    },
    showRemoveDialog: {
      type: Boolean,
      default: undefined
    },
    series: {
      type: Boolean,
      default: undefined
    },
    refTo: [Function, Object],
    id: String,
    tabIndex: Number,
    editable: [Object, Boolean],
    head: Boolean,
    tail: Boolean,
    order: Number,
    zonedStart: Object,
    zonedEnd: Object,
    slots: Array,
    group: Object,
    range: Object,
    isException: Boolean,
    isRecurring: Boolean,
    isAllDay: Boolean,
    uid: [String, Number],
    start: Date,
    end: Date,
    originalStart: Date,
    startTimezone: String,
    endTimezone: String,
    title: String,
    description: String,
    occurrenceId: String,
    recurrenceExceptions: Array,
    recurrenceRule: String,
    recurrenceId: [String, Number],
    dataItem: Object
  },
  created: function created() {
    // this.viewTask = null;
  },
  inject: {
    bv: {
      default: null
    },
    ks: {
      default: null
    }
  },
  provide: function provide() {
    return {
      et: this.et,
      removeTask: this.handleRemoveItemChange,
      removeDialog: this.handleRemoveDialogChange,
      occurrenceDialog: this.handleOccurrenceDialogChange,
      ksCancel: this.handleCancel,
      ksSeriesClick: this.handleSeriesClick,
      ksOccurrenceClick: this.handleOccurrenceClick,
      ksRemoveConfirm: this.handleRemoveConfirm
    };
  },
  data: function data() {
    return {
      et: {
        removeItem: null,
        showRemoveDialog: false,
        showOccurrenceDialog: false
      },
      currentSeries: null,
      currentRemoveItem: null,
      currentShowRemoveDialog: null,
      currentShowOccurrenceDialog: null
    };
  },
  computed: {
    compSeries: function compSeries() {
      return this.series !== undefined ? this.series : this.currentSeries;
    },
    compRemoveItem: function compRemoveItem() {
      return this.removeItem !== undefined ? this.removeItem : this.currentRemoveItem;
    },
    compShowRemoveDialog: function compShowRemoveDialog() {
      return this.showRemoveDialog !== undefined ? this.showRemoveDialog : this.currentShowRemoveDialog;
    },
    compShowOccurrenceDialog: function compShowOccurrenceDialog() {
      return this.showOccurrenceDialog !== undefined ? this.showOccurrenceDialog : this.currentShowOccurrenceDialog;
    },
    currentEditable: function currentEditable() {
      return useEditable(this.$props.editable);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a = this.$props,
      refTo = _a.refTo,
      viewTaskProp = _a.viewTask,
      propRemoveDialog = _a.removeDialog,
      propRemoveItem = _a.removeItem,
      onRemoveItemChange = _a.onRemoveItemChange,
      propOccurrenceDialog = _a.occurrenceDialog,
      propShowOccurrenceDialog = _a.showOccurrenceDialog,
      onShowOccurrenceDialogChange = _a.onShowOccurrenceDialogChange,
      propShowRemoveDialog = _a.showRemoveDialog,
      onShowRemoveDialogChange = _a.onShowRemoveDialogChange,
      taskProps = __rest(_a, ["refTo", "viewTask", "removeDialog", "removeItem", "onRemoveItemChange", "occurrenceDialog", "showOccurrenceDialog", "onShowOccurrenceDialogChange", "showRemoveDialog", "onShowRemoveDialogChange"]);
    return (
      // @ts-ignore  function children
      h(SchedulerViewTask, {
        id: this.$props.id,
        attrs: this.v3 ? undefined : {
          id: this.$props.id,
          tabIndex: this.$props.tabIndex,
          head: this.$props.head,
          tail: this.$props.tail,
          order: this.$props.order,
          zonedStart: this.$props.zonedStart,
          zonedEnd: this.$props.zonedEnd,
          slots: this.$props.slots,
          group: this.$props.group,
          range: this.$props.range,
          isException: this.$props.isException,
          isRecurring: this.$props.isRecurring,
          isAllDay: this.$props.isAllDay,
          uid: this.$props.uid,
          start: this.$props.start,
          end: this.$props.end,
          originalStart: this.$props.originalStart,
          startTimezone: this.$props.startTimezone,
          endTimezone: this.$props.endTimezone,
          title: this.$props.title,
          description: this.$props.description,
          occurrenceId: this.$props.occurrenceId,
          recurrenceExceptions: this.$props.recurrenceExceptions,
          recurrenceRule: this.$props.recurrenceRule,
          recurrenceId: this.$props.recurrenceId,
          dataItem: this.$props.dataItem,
          removeItem: this.compRemoveItem,
          task: this.$props.task,
          editable: this.$props.editable,
          showOccurrenceDialog: this.compShowOccurrenceDialog,
          showRemoveDialog: this.compShowRemoveDialog
        },
        tabIndex: this.$props.tabIndex,
        head: this.$props.head,
        tail: this.$props.tail,
        order: this.$props.order,
        zonedStart: this.$props.zonedStart,
        zonedEnd: this.$props.zonedEnd,
        slots: this.$props.slots,
        group: this.$props.group,
        range: this.$props.range,
        isException: this.$props.isException,
        isRecurring: this.$props.isRecurring,
        isAllDay: this.$props.isAllDay,
        uid: this.$props.uid,
        start: this.$props.start,
        end: this.$props.end,
        originalStart: this.$props.originalStart,
        startTimezone: this.$props.startTimezone,
        endTimezone: this.$props.endTimezone,
        title: this.$props.title,
        description: this.$props.description,
        occurrenceId: this.$props.occurrenceId,
        recurrenceExceptions: this.$props.recurrenceExceptions,
        recurrenceRule: this.$props.recurrenceRule,
        recurrenceId: this.$props.recurrenceId,
        dataItem: this.$props.dataItem,
        removeItem: this.compRemoveItem,
        task: this.$props.task,
        editable: this.$props.editable,
        showOccurrenceDialog: this.compShowOccurrenceDialog,
        showRemoveDialog: this.compShowRemoveDialog,
        onRemoveclick: this.handleRemoveClick,
        on: this.v3 ? undefined : {
          "removeclick": this.handleRemoveClick
        }
      }, this.v3 ? function () {
        return [defaultSlot];
      } : [defaultSlot])
    );
  },
  methods: {
    setRemoveItem: function setRemoveItem(item, event) {
      this.currentRemoveItem = item;
      this.$emit('removeitemchange', {
        item: item,
        event: event
      });
    },
    setShowRemoveDialog: function setShowRemoveDialog(show, event) {
      this.currentShowRemoveDialog = show;
      this.$emit('showremovedialogchange', {
        show: show,
        event: event
      });
    },
    setShowOccurrenceDialog: function setShowOccurrenceDialog(show, event) {
      this.currentShowOccurrenceDialog = show;
      this.$emit('showoccurrencedialogchange', {
        show: show,
        event: event
      });
    },
    handleRemoveClick: function handleRemoveClick(event) {
      if (!this.currentEditable.remove) {
        return;
      }
      this.setRemoveItem(this.$props.dataItem, event);
      if (this.$props.isRecurring) {
        this.setShowOccurrenceDialog(true, event);
      } else {
        this.setShowRemoveDialog(true, event);
      }
    },
    handleCancel: function handleCancel(event) {
      this.currentSeries = null;
      this.setRemoveItem(null, event);
      this.setShowRemoveDialog(false, event);
      this.setShowOccurrenceDialog(false, event);
    },
    handleRemoveConfirm: function handleRemoveConfirm(event) {
      if (this.compRemoveItem) {
        this.$emit('dataaction', {
          type: DATA_ACTION.remove,
          series: this.compSeries,
          dataItem: this.compRemoveItem
        });
      }
      this.setRemoveItem(null, event);
      this.setShowRemoveDialog(false, event);
    },
    handleRemoveItemChange: function handleRemoveItemChange(value, event) {
      if (!this.setRemoveItem) {
        return;
      }
      this.setRemoveItem(value, event);
    },
    handleRemoveDialogChange: function handleRemoveDialogChange(value, event) {
      if (!this.setShowRemoveDialog) {
        return;
      }
      this.setShowRemoveDialog(value, event);
    },
    handleOccurrenceDialogChange: function handleOccurrenceDialogChange(value, event) {
      if (!this.setShowOccurrenceDialog) {
        return;
      }
      this.setShowOccurrenceDialog(value, event);
    },
    handleOccurrenceClick: function handleOccurrenceClick(event) {
      if (this.compRemoveItem) {
        this.currentSeries = false;
        this.setRemoveItem(this.$props.dataItem, event);
        this.setShowRemoveDialog(true, event);
      }
      this.setShowOccurrenceDialog(false, event);
    },
    handleSeriesClick: function handleSeriesClick(event) {
      if (this.compRemoveItem) {
        this.currentSeries = true;
        var dataItem = findMaster(this.compRemoveItem, this.ks.fields, this.ks.dataItems);
        this.setRemoveItem(dataItem, event);
        this.setShowRemoveDialog(true, event);
      }
      this.setShowOccurrenceDialog(false, event);
    }
  }
};
/**
 * @hidden
 */
var SchedulerEditTask = SchedulerEditTaskVue2;
export { SchedulerEditTask, SchedulerEditTaskVue2 };