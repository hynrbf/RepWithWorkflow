// @ts-ignore
import { getDefaultSlots, getTemplate } from '@progress/kendo-vue-common';
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { SchedulerTask } from './SchedulerTask';
/**
 * @hidden
 */
var SchedulerViewTaskVue2 = {
  name: 'KendoSchedulerViewTask',
  props: {
    refTo: [Function, Object],
    id: String,
    tabIndex: Number,
    head: Boolean,
    tail: Boolean,
    order: Number,
    zonedStart: Object,
    zonedEnd: Object,
    slots: Array,
    group: Object,
    range: Object,
    isException: Boolean,
    isRecurring: Boolean,
    isAllDay: Boolean,
    uid: [String, Number],
    start: Date,
    end: Date,
    originalStart: Date,
    startTimezone: String,
    endTimezone: String,
    title: String,
    description: String,
    occurrenceId: String,
    recurrenceExceptions: Array,
    recurrenceRule: String,
    recurrenceId: [String, Number],
    dataItem: Object,
    removeItem: Object,
    task: [String, Function, Object],
    editable: [Object, Boolean],
    showOccurrenceDialog: {
      type: Boolean,
      default: undefined
    },
    showRemoveDialog: {
      type: Boolean,
      default: undefined
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var taskRender;
    var taskRenderDefaultRendering =
    // @ts-ignore  function children
    h(SchedulerTask, {
      id: this.$props.id,
      attrs: this.v3 ? undefined : {
        id: this.$props.id,
        tabIndex: this.$props.tabIndex,
        head: this.$props.head,
        tail: this.$props.tail,
        order: this.$props.order,
        zonedStart: this.$props.zonedStart,
        zonedEnd: this.$props.zonedEnd,
        slots: this.$props.slots,
        group: this.$props.group,
        range: this.$props.range,
        isException: this.$props.isException,
        isRecurring: this.$props.isRecurring,
        isAllDay: this.$props.isAllDay,
        uid: this.$props.uid,
        start: this.$props.start,
        end: this.$props.end,
        originalStart: this.$props.originalStart,
        startTimezone: this.$props.startTimezone,
        endTimezone: this.$props.endTimezone,
        title: this.$props.title,
        description: this.$props.description,
        occurrenceId: this.$props.occurrenceId,
        recurrenceExceptions: this.$props.recurrenceExceptions,
        recurrenceRule: this.$props.recurrenceRule,
        recurrenceId: this.$props.recurrenceId,
        dataItem: this.$props.dataItem,
        removeItem: this.removeItem,
        editable: this.$props.editable,
        showOccurrenceDialog: this.showOccurrenceDialog,
        showRemoveDialog: this.showRemoveDialog
      },
      tabIndex: this.$props.tabIndex,
      head: this.$props.head,
      tail: this.$props.tail,
      order: this.$props.order,
      zonedStart: this.$props.zonedStart,
      zonedEnd: this.$props.zonedEnd,
      slots: this.$props.slots,
      group: this.$props.group,
      range: this.$props.range,
      isException: this.$props.isException,
      isRecurring: this.$props.isRecurring,
      isAllDay: this.$props.isAllDay,
      uid: this.$props.uid,
      start: this.$props.start,
      end: this.$props.end,
      originalStart: this.$props.originalStart,
      startTimezone: this.$props.startTimezone,
      endTimezone: this.$props.endTimezone,
      title: this.$props.title,
      description: this.$props.description,
      occurrenceId: this.$props.occurrenceId,
      recurrenceExceptions: this.$props.recurrenceExceptions,
      recurrenceRule: this.$props.recurrenceRule,
      recurrenceId: this.$props.recurrenceId,
      dataItem: this.$props.dataItem,
      removeItem: this.removeItem,
      editable: this.$props.editable,
      showOccurrenceDialog: this.showOccurrenceDialog,
      showRemoveDialog: this.showRemoveDialog,
      onRemoveclick: this.handleRemoveClick,
      on: this.v3 ? undefined : {
        "removeclick": this.handleRemoveClick
      }
    }, this.v3 ? function () {
      return [defaultSlot];
    } : [defaultSlot]);
    taskRender = getTemplate.call(this, {
      h: h,
      template: this.$props.task,
      defaultRendering: taskRenderDefaultRendering,
      defaultSlots: defaultSlot,
      additionalListeners: {
        'removeclick': this.handleRemoveClick
      }
    });
    return taskRender;
  },
  methods: {
    handleRemoveClick: function handleRemoveClick(event) {
      this.$emit('removeclick', event);
    }
  }
};
/**
 * @hidden
 */
var SchedulerViewTask = SchedulerViewTaskVue2;
export { SchedulerViewTask, SchedulerViewTaskVue2 };