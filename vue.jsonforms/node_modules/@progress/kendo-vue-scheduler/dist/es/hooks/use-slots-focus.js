/**
 * Represents the available `action` types for the `SchedulerSlotsFocusAction` objects.
 *
 * The available actions are:
 * - `SLOT_FOCUS_UP`
 * - `SLOT_FOCUS_DOWN`
 * - `SLOT_FOCUS_LEFT`
 * - `SLOT_FOCUS_RIGHT`
 */
export var SLOTS_FOCUS_ACTION;
(function (SLOTS_FOCUS_ACTION) {
  SLOTS_FOCUS_ACTION["up"] = "SLOT_FOCUS_UP";
  SLOTS_FOCUS_ACTION["down"] = "SLOT_FOCUS_DOWN";
  SLOTS_FOCUS_ACTION["left"] = "SLOT_FOCUS_LEFT";
  SLOTS_FOCUS_ACTION["right"] = "SLOT_FOCUS_RIGHT";
})(SLOTS_FOCUS_ACTION || (SLOTS_FOCUS_ACTION = {}));
/** @hidden */
export var dispatchFocusedSlots = function dispatchFocusedSlots(action, event) {
  switch (action.type) {
    case SLOTS_FOCUS_ACTION.up:
      {
        if (!action.slot || !this.bv.slots) {
          return;
        }
        var next = findUpSlot(action.slot, this.bv.slots);
        if (next && next.$el) {
          event.preventDefault();
          next.$el.focus();
        }
        break;
      }
    case SLOTS_FOCUS_ACTION.down:
      {
        if (!action.slot || !this.bv.slots) {
          return;
        }
        var next = findDownSlot(action.slot, this.bv.slots);
        if (next && next.$el) {
          event.preventDefault();
          next.$el.focus();
        }
        break;
      }
    case SLOTS_FOCUS_ACTION.left:
      {
        if (!action.slot || !this.bv.slots) {
          return;
        }
        var next = findLeftSlot(action.slot, this.bv.slots);
        if (next && next.$el) {
          event.preventDefault();
          next.$el.focus();
        }
        break;
      }
    case SLOTS_FOCUS_ACTION.right:
      {
        if (!action.slot || !this.bv.slots) {
          return;
        }
        var next = findRightSlot(action.slot, this.bv.slots);
        if (next && next.$el) {
          event.preventDefault();
          next.$el.focus();
        }
        break;
      }
    default:
      break;
  }
};
/** @hidden */
export var findUpSlot = function findUpSlot(target, all) {
  return all.find(function (slot) {
    return slot !== null && target !== null && slot.cSlot.row === target.$props.row - 1 && slot.cSlot.col === target.$props.col;
  });
};
/** @hidden */
export var findLeftSlot = function findLeftSlot(target, all) {
  return all.find(function (slot) {
    return slot !== null && target !== null && slot.cSlot.row === target.$props.row && slot.cSlot.col === target.$props.col - 1;
  });
};
/** @hidden */
export var findRightSlot = function findRightSlot(target, all) {
  return all.find(function (slot) {
    return slot !== null && target !== null && slot.cSlot.row === target.$props.row && slot.cSlot.col === target.$props.col + 1;
  });
};
/** @hidden */
export var findDownSlot = function findDownSlot(target, all) {
  return all.find(function (slot) {
    return slot !== null && target !== null && slot.cSlot.row === target.$props.row + 1 && slot.cSlot.col === target.$props.col;
  });
};