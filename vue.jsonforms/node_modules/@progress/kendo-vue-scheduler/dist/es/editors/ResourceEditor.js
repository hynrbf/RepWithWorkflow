var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { DropDownList, MultiSelect } from '@progress/kendo-vue-dropdowns';
import { isPresent } from '../utils/main';
/**
 * @hidden
 */
var ResourceEditorVue2 = {
  name: 'KendoResourceEditor',
  // @ts-ignore
  emits: {
    change: null
  },
  props: {
    resource: Object,
    dataItems: Array,
    textField: String,
    valueField: String,
    colorField: String,
    multiple: Boolean,
    validationMessage: String,
    value: [String, Number, Object],
    touched: Boolean,
    modified: Boolean,
    visited: Boolean,
    valid: Boolean,
    name: String
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      colorField = _a.colorField,
      textField = _a.textField,
      valueField = _a.valueField;
    var value = Array.isArray(this.$props.value) ? this.$props.dataItems.filter(function (item) {
      return _this.$props.value.some(function (val) {
        return item[_this.$props.valueField] === val;
      });
    }) : this.$props.dataItems.find(function (item) {
      return item[_this.$props.valueField] === _this.$props.value;
    });
    var DropDownEditor = this.$props.multiple ? MultiSelect : DropDownList;
    var valueRender = function valueRender(_h, _tdElement, props) {
      return h("span", {
        "class": "k-input-inner"
      }, [colorField && props.value && h("span", {
        key: 1,
        "class": 'k-scheduler-mark',
        style: {
          backgroundColor: props.value[colorField],
          marginRight: props.value[valueField] ? '8px' : '4px'
        }
      }), props.value && props.value[textField]]);
    };
    var itemRender = function itemRender(_h, _tdElement, props, listeners) {
      return h("li", {
        "class": __assign({
          'k-item': true
        }, props.itemClass),
        onClick: listeners.onClick,
        on: this.v3 ? undefined : {
          "click": listeners.onClick
        }
      }, [colorField && h("span", {
        key: 1,
        "class": 'k-scheduler-mark',
        style: {
          backgroundColor: props.dataItem[colorField],
          marginRight: isPresent(props.dataItem[valueField]) ? '8px' : '4px'
        }
      }), props.dataItem[textField]]);
    };
    return h(DropDownEditor, {
      value: value,
      attrs: this.v3 ? undefined : {
        value: value,
        dataItems: this.$props.dataItems,
        textField: this.$props.textField,
        dataItemKey: this.$props.valueField,
        valid: this.$props.valid,
        validationMessage: this.$props.validationMessage,
        itemRender: itemRender,
        valueRender: valueRender
      },
      onChange: this.handleChange,
      on: this.v3 ? undefined : {
        "change": this.handleChange
      },
      dataItems: this.$props.dataItems,
      textField: this.$props.textField,
      dataItemKey: this.$props.valueField,
      valid: this.$props.valid,
      validationMessage: this.$props.validationMessage,
      itemRender: itemRender,
      valueRender: valueRender
    });
  },
  methods: {
    handleChange: function handleChange(event) {
      var valueField = event.component.$props.dataItemKey;
      var newValue = this.$props.multiple ? (event.value || []).map(function (item) {
        return item[valueField];
      }) : event.value[valueField];
      this.$emit('change', {
        value: newValue
      });
    }
  }
};
/**
 * @hidden
 */
var ResourceEditor = ResourceEditorVue2;
export { ResourceEditor, ResourceEditorVue2 };