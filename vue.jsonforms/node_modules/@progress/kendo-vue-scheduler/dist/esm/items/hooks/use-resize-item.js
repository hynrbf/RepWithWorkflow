var __spreadArray = this && this.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
import { clone } from '@progress/kendo-vue-common';
import { DATA_ACTION } from '../../Scheduler.js';
import { getField, setField, slotDive } from '../../utils/main.js';
/**
 * Represents the available `action` types for the `SchedulerItemResizeItemAction` objects.
 *
 * The available types are:
 * - `RESIZE_ITEM_SET`
 * - `RESIZE_ITEM_START`
 * - `RESIZE_ITEM_START_DRAG`
 * - `RESIZE_ITEM_START_DRAG_SELECTED`
 * - `RESIZE_ITEM_END_DRAG`
 * - `RESIZE_ITEM_END_DRAG_SELECTED`
 * - `RESIZE_ITEM_COMPLETE`
 * - `RESIZE_ITEM_COMPLETE_OCCURRENCE`
 * - `RESIZE_ITEM_COMPLETE_SERIES`
 * - `RESIZE_ITEM_RESET`
 */
export var RESIZE_ITEM_ACTION;
(function (RESIZE_ITEM_ACTION) {
  RESIZE_ITEM_ACTION["set"] = "RESIZE_ITEM_SET";
  RESIZE_ITEM_ACTION["start"] = "RESIZE_ITEM_START";
  RESIZE_ITEM_ACTION["startDrag"] = "RESIZE_ITEM_START_DRAG";
  RESIZE_ITEM_ACTION["startDragSelected"] = "RESIZE_ITEM_START_DRAG_SELECTED";
  RESIZE_ITEM_ACTION["endDrag"] = "RESIZE_ITEM_END_DRAG";
  RESIZE_ITEM_ACTION["endDragSelected"] = "RESIZE_ITEM_END_DRAG_SELECTED";
  RESIZE_ITEM_ACTION["complete"] = "RESIZE_ITEM_COMPLETE";
  RESIZE_ITEM_ACTION["completeOccurrence"] = "RESIZE_ITEM_COMPLETE_OCCURRENCE";
  RESIZE_ITEM_ACTION["completeSeries"] = "RESIZE_ITEM_COMPLETE_SERIES";
  RESIZE_ITEM_ACTION["reset"] = "RESIZE_ITEM_RESET";
})(RESIZE_ITEM_ACTION || (RESIZE_ITEM_ACTION = {}));
var oldSlot = null;
/** @hidden */
export var useResizeItem = function useResizeItem(action, event) {
  var _this = this;
  var newResizeItem = this.compResizeItem;
  switch (action.type) {
    case RESIZE_ITEM_ACTION.set:
      newResizeItem = action.payload;
      break;
    case RESIZE_ITEM_ACTION.reset:
      newResizeItem = null;
      break;
    case RESIZE_ITEM_ACTION.start:
      {
        event.stopPropagation();
        event.preventDefault();
        var clientX = action.payload.x;
        var clientY = action.payload.y;
        var slot = slotDive(clientX, clientY, 7);
        if (!slot) {
          return;
        }
        if (slot === oldSlot) {
          return;
        }
        var slotStart = slot.getAttribute('data-slot-start');
        var newStart = new Date(Number(slotStart));
        var dataItem = clone(this.dataItem);
        if (newStart >= getField(dataItem, this.ks.fields.end)) {
          return;
        }
        setField(dataItem, this.ks.fields.start, newStart);
        oldSlot = slot;
        newResizeItem = dataItem;
        break;
      }
    case RESIZE_ITEM_ACTION.startDragSelected:
      {
        event.stopPropagation();
        event.preventDefault();
        var clientX = action.payload.x;
        var clientY = action.payload.y;
        var dataItem = clone(this.dataItem);
        var slot = slotDive(clientX, clientY, 7);
        if (!slot) {
          return;
        }
        if (slot === oldSlot) {
          return;
        }
        var slotStart = slot.getAttribute('data-slot-start');
        var itemStart = new Date(getField(dataItem, this.ks.fields.start));
        var newStart = new Date(Number(slotStart));
        var distance_1 = newStart.getTime() - itemStart.getTime();
        var unreachable_1 = false;
        var newResizeItems = this.bv.selectedItems.map(function (si) {
          if (!si) {
            return null;
          }
          var selectedDataItem = clone(si.props.dataItem);
          var selectedStart = new Date(si.props.start.getTime() + distance_1);
          if (selectedStart >= getField(selectedDataItem, _this.ks.fields.end)) {
            unreachable_1 = true;
            return;
          }
          setField(selectedDataItem, _this.ks.fields.start, selectedStart);
          return selectedDataItem;
        }).filter(Boolean);
        if (!unreachable_1) {
          newResizeItem = __spreadArray([], newResizeItems, true);
        }
        break;
      }
    case RESIZE_ITEM_ACTION.startDrag:
      {
        var clientX = action.payload.x;
        var clientY = action.payload.y;
        var slot = slotDive(clientX, clientY, 7);
        if (!slot) {
          return;
        }
        if (slot === oldSlot) {
          return;
        }
        var slotStart = slot.getAttribute('data-slot-start');
        var newStart = new Date(Number(slotStart));
        var dataItem = clone(this.dataItem);
        if (newStart >= dataItem.end) {
          return;
        }
        setField(dataItem, this.ks.fields.start, newStart);
        oldSlot = slot;
        newResizeItem = dataItem;
        break;
      }
    case RESIZE_ITEM_ACTION.endDrag:
      {
        var clientX = action.payload.x;
        var clientY = action.payload.y;
        var slot = slotDive(clientX, clientY, 7);
        if (!slot) {
          return;
        }
        if (slot === oldSlot) {
          return;
        }
        var slotEnd = slot.getAttribute('data-slot-end');
        var newEnd = new Date(Number(slotEnd));
        var dataItem = clone(this.dataItem);
        if (newEnd <= dataItem.start) {
          return;
        }
        setField(dataItem, this.ks.fields.end, newEnd);
        oldSlot = slot;
        newResizeItem = dataItem;
        break;
      }
    case RESIZE_ITEM_ACTION.endDragSelected:
      {
        event.stopPropagation();
        event.preventDefault();
        var clientX = action.payload.x;
        var clientY = action.payload.y;
        var dataItem = clone(this.dataItem);
        var slot = slotDive(clientX, clientY, 7);
        if (!slot) {
          return;
        }
        if (slot === oldSlot) {
          return;
        }
        var slotEnd = slot.getAttribute('data-slot-start');
        var itemEnd = new Date(getField(dataItem, this.ks.fields.end));
        var newEnd = new Date(Number(slotEnd));
        var distance_2 = newEnd.getTime() - itemEnd.getTime();
        var unreachable_2;
        var newResizeItems = this.bv.selectedItems.map(function (si) {
          if (!si) {
            return null;
          }
          var selectedDataItem = clone(si.props.dataItem);
          var selectedEnd = new Date(si.props.end.getTime() + distance_2);
          if (selectedEnd <= getField(selectedDataItem, _this.ks.fields.start)) {
            unreachable_2 = true;
            return;
          }
          setField(selectedDataItem, _this.ks.fields.end, selectedEnd);
          return selectedDataItem;
        }).filter(Boolean);
        if (!unreachable_2) {
          newResizeItem = __spreadArray([], newResizeItems, true);
        }
        break;
      }
    case RESIZE_ITEM_ACTION.complete:
      {
        newResizeItem = null;
        if (this.compResizeItem) {
          this.$emit('dataaction', {
            type: DATA_ACTION.update,
            series: false,
            dataItem: this.compResizeItem
          });
        }
        break;
      }
    case RESIZE_ITEM_ACTION.completeOccurrence:
      {
        newResizeItem = null;
        if (this.compResizeItem) {
          this.$emit('dataaction', {
            type: DATA_ACTION.update,
            series: false,
            dataItem: this.compResizeItem
          });
        }
        break;
      }
    case RESIZE_ITEM_ACTION.completeSeries:
      {
        newResizeItem = null;
        var newDataItem = void 0;
        if (Array.isArray(this.compResizeItem)) {
          newDataItem = this.compResizeItem.map(function (item) {
            var newItem = clone(item);
            setField(newItem, _this.ks.fields.start, getField(item, _this.ks.fields.start));
            setField(newItem, _this.ks.fields.end, getField(item, _this.ks.fields.end));
            return newItem;
          });
        } else {
          var newItem = clone(this.compResizeItem);
          setField(newItem, this.ks.fields.start, getField(this.compResizeItem, this.ks.fields.start));
          setField(newItem, this.ks.fields.end, getField(this.compResizeItem, this.ks.fields.end));
          newDataItem = newItem;
        }
        if (newDataItem) {
          this.$emit('dataaction', {
            type: DATA_ACTION.update,
            series: true,
            dataItem: newDataItem
          });
        }
        break;
      }
    default:
      newResizeItem = null;
      break;
  }
  this.currentResizeItem = newResizeItem;
  this.$emit('resizeitemchange', newResizeItem);
};