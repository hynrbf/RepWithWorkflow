// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { SchedulerSlot } from './SchedulerSlot.js';
import { useSlotExpand } from '../hooks/main.js';
import { canUseDOM, getDefaultSlots, getTemplate } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var SchedulerViewSlotVue2 = {
  name: 'KendoSchedulerViewSlot',
  inheritAttrs: false,
  // @ts-ignore
  emits: {
    focus: null,
    showmoreitems: null,
    doubleclick: null,
    keydown: null
  },
  props: {
    refTo: [Function, Object],
    items: Array,
    row: Number,
    group: Object,
    range: Object,
    isWorkDay: {
      type: Boolean,
      default: true
    },
    isWorkHour: {
      type: Boolean,
      default: true
    },
    selected: Boolean,
    col: Number,
    index: Number,
    start: Date,
    end: Date,
    zonedStart: Object,
    zonedEnd: Object,
    slotRender: [String, Function, Object],
    expandable: [Boolean, Object],
    isAllDay: Boolean,
    navDay: Boolean,
    editable: [Object, Boolean],
    itemsPerSlot: Number,
    formItem: Object,
    tabIndex: {
      type: Number,
      default: undefined
    },
    slotStyle: Object
  },
  created: function created() {
    this.viewSlot = null;
    this.slot = null;
  },
  inject: {
    ks: {
      default: null
    },
    bv: {
      default: null
    },
    ksSlots: {
      default: {}
    }
  },
  data: function data() {
    return {
      timeout: undefined
    };
  },
  computed: {
    cSlot: function cSlot() {
      return this.ksSlots.cSlots ? this.ksSlots.cSlots[this.index] : {};
    }
  },
  updated: function updated() {
    var that = this;
    this.$nextTick(function () {
      useSlotExpand(that, that.ks.scheduler.$el, that.$props.expandable);
    });
  },
  mounted: function mounted() {
    var that = this;
    this.$nextTick(function () {
      useSlotExpand(that, that.ks.scheduler.$el, that.$props.expandable);
    });
    if (!this.ks.scheduler || !this.ks.scheduler.$el) {
      return;
    }
    if (canUseDOM) {
      this.observer = new window.ResizeObserver(this.handleResize);
      this.observer.observe(this.ks.scheduler.$el);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a = this.$props,
      refTo = _a.refTo,
      items = _a.items,
      row = _a.row,
      group = _a.group,
      range = _a.range,
      isWorkDay = _a.isWorkDay,
      isWorkHour = _a.isWorkHour,
      col = _a.col,
      index = _a.index,
      start = _a.start,
      end = _a.end,
      zonedStart = _a.zonedStart,
      zonedEnd = _a.zonedEnd,
      navDay = _a.navDay,
      itemsPerSlot = _a.itemsPerSlot,
      editable = _a.editable;
    var slotRender;
    var slotRenderDefaultRendering =
    // @ts-ignore  function children
    h(SchedulerSlot, {
      tabIndex: this.tabIndex,
      attrs: this.v3 ? undefined : {
        tabIndex: this.tabIndex,
        isAllDay: this.isAllDay,
        items: items,
        row: row,
        group: group,
        range: range,
        isWorkDay: isWorkDay,
        isWorkHour: isWorkHour,
        col: col,
        index: index,
        start: start,
        end: end,
        zonedStart: zonedStart,
        zonedEnd: zonedEnd,
        navDay: navDay,
        itemsPerSlot: itemsPerSlot,
        editable: editable,
        formItem: this.formItem,
        selected: this.selected,
        slotStyle: this.$props.slotStyle
      },
      isAllDay: this.isAllDay,
      items: items,
      row: row,
      group: group,
      range: range,
      isWorkDay: isWorkDay,
      isWorkHour: isWorkHour,
      col: col,
      index: index,
      start: start,
      end: end,
      zonedStart: zonedStart,
      zonedEnd: zonedEnd,
      navDay: navDay,
      itemsPerSlot: itemsPerSlot,
      editable: editable,
      formItem: this.formItem,
      onShowmoreitems: this.handleShowMoreItemsClick,
      on: this.v3 ? undefined : {
        "showmoreitems": this.handleShowMoreItemsClick,
        "doubleclick": this.handleDoubleClick,
        "keydown": this.handleKeyDown,
        "focus": this.handleFocus
      },
      onDoubleclick: this.handleDoubleClick,
      onKeydown: this.handleKeyDown,
      onFocus: this.handleFocus,
      selected: this.selected,
      slotStyle: this.$props.slotStyle
    }, this.v3 ? function () {
      return [defaultSlot];
    } : [defaultSlot]);
    slotRender = getTemplate.call(this, {
      h: h,
      template: this.$props.slotRender,
      defaultRendering: slotRenderDefaultRendering,
      defaultSlots: defaultSlot,
      additionalProps: this.cSlot,
      additionalListeners: {
        showmoreitems: this.handleShowMoreItemsClick
      }
    });
    return slotRender;
  },
  methods: {
    handleShowMoreItemsClick: function handleShowMoreItemsClick(event) {
      this.$emit('showmoreitems', event);
    },
    handleDoubleClick: function handleDoubleClick(args) {
      this.$emit('doubleclick', args);
    },
    handleKeyDown: function handleKeyDown(args) {
      this.$emit('keydown', args);
    },
    handleFocus: function handleFocus(args) {
      this.$emit('focus', args);
    },
    handleResize: function handleResize() {
      var that = this;
      if (this.timeout !== undefined) {
        window.cancelAnimationFrame(this.timeout);
      }
      this.timeout = window.requestAnimationFrame(function () {
        useSlotExpand(that, that.ks.scheduler.$el, that.$props.expandable);
      });
    }
  }
};
/**
 * @hidden
 */
var SchedulerViewSlot = SchedulerViewSlotVue2;
export { SchedulerViewSlot, SchedulerViewSlotVue2 };