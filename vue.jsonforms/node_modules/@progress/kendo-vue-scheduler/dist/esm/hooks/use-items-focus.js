import { findCurrentItem, findNextItem } from '../utils/main.js';
/**
 * Represents the available `action` types for the `SchedulerItemsFocusAction` objects.
 *
 * The available types are:
 * - `ITEMS_FOCUS_NEXT`
 * - `ITEMS_FOCUS_PREV`
 */
export var ITEMS_FOCUS_ACTION;
(function (ITEMS_FOCUS_ACTION) {
  ITEMS_FOCUS_ACTION["current"] = "ITEMS_FOCUS_CURRENT";
  ITEMS_FOCUS_ACTION["next"] = "ITEMS_FOCUS_NEXT";
  ITEMS_FOCUS_ACTION["prev"] = "ITEMS_FOCUS_PREV";
})(ITEMS_FOCUS_ACTION || (ITEMS_FOCUS_ACTION = {}));
/** @hidden */
export var dispatchFocusedItems = function dispatchFocusedItems(action, event) {
  switch (action.type) {
    case ITEMS_FOCUS_ACTION.current:
      {
        if (!action.item || !this.bv.items) {
          return;
        }
        var next = findCurrentItem(action.item, this.bv.items, action.ignoreIsAllDay);
        if (next && next.element) {
          event.preventDefault();
          next.element.focus();
        }
        break;
      }
    case ITEMS_FOCUS_ACTION.next:
      {
        if (!action.item || !this.bv.items) {
          return;
        }
        var next = findNextItem(action.item, this.bv.items, action.ignoreIsAllDay, false);
        if (next && next.element) {
          event.preventDefault();
          next.element.focus();
        }
        break;
      }
    case ITEMS_FOCUS_ACTION.prev:
      {
        if (!action.item || !this.bv.items) {
          return;
        }
        var next = findNextItem(action.item, this.bv.items, action.ignoreIsAllDay, true);
        if (next && next.element) {
          event.preventDefault();
          next.element.focus();
        }
        break;
      }
    default:
      break;
  }
};