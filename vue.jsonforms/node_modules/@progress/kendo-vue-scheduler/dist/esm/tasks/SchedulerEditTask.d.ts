import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { SchedulerViewTaskProps } from './SchedulerViewTask';
import { DataItem } from '../models/main';
import { DataAction } from '../Scheduler';
/**
 * Represents the props of the Kendo UI for Vue [SchedulerEditTask]({% slug api_scheduler_scheduleredittaskprops %}) component.
 */
export interface SchedulerEditTaskProps extends SchedulerViewTaskProps {
    /**
     * Overrides the default component responsible for positioning the task inside the view.
     *
     * The default Component is: [SchedulerViewTask]({% slug api_scheduler_schedulerviewtask %}).
     */
    viewTask?: any;
    /**
     * Overrides the default component responsible for visualizing the `removeItem` and confirming the `remove` action.
     *
     * The default Component is: [SchedulerRemoveDialog]({% slug api_scheduler_schedulerremovedialog %}).
     */
    removeDialog?: any;
    /**
     * Setting this property will force the `showRemoveDialog` to be in controlled state, allowing further control over the display of the `removeDialog` component.
     */
    showRemoveDialog?: boolean;
    /**
     * Indicates if the editing should be applied to the whole `series` or to a single `occurrence` when the item is recurring.
     *
     * By default, the `series` prop is set to `null` and additional selection is done through the `occurrence` dialog.
     * If set ot either `true` or `false`:
     * - `true` &mdash; indicates that the editing should always be applied to the whole `series`
     * - `false` &mdash; indicates that the editing should always be applied to a single `occurrence`.
     */
    series?: boolean | null;
    /**
     * Called every time the `showRemoveDialog` changes.
     */
    onShowRemoveDialogChange?: (event: any) => void;
    /**
     * Setting this property will force the `removeItem` to be in controlled state, allowing further customization.
     *
     * Specifies the DataItem which should be removed from the `data` set.
     * The `removeItem` is passed as property to the `removeDialog` component;
     */
    removeItem?: DataItem | null;
    /**
     * Called every time the `removeItem` changes.
     */
    onRemoveItemChange?: (event: any) => void;
    /**
     * Overrides the default component responsible for the selection between `occurrence` and `series` delete.
     *
     * The default Component is: [SchedulerOccurrenceDialog]({% slug api_scheduler_scheduleroccurrencedialog %}).
     */
    occurrenceDialog?: any;
    /**
     * Setting this property will force the `showOccurrenceDialog` to be in controlled state, allowing further control over the display of the `occurrenceDialog` component.
     */
    showOccurrenceDialog?: boolean;
    /**
     * Called every time the `showOccurrenceDialog` changes.
     */
    onShowOccurrenceDialogChange?: (event: any) => void;
    /**
     * Called when the item has been removed.
     */
    onDataaction?: (action: DataAction, event?: any) => void;
}
/** @hidden */
export interface SchedulerEditTaskHandle {
    element: HTMLDivElement | null;
    props: SchedulerEditTaskProps;
}
/**
 * @hidden
 */
export interface SchedulerEditTaskState {
    viewTask: SchedulerEditTaskHandle | null;
}
/**
 * @hidden
 */
export interface SchedulerEditTaskComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface SchedulerEditTaskMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface SchedulerEditTaskData {
}
/**
 * @hidden
 */
export interface SchedulerEditTaskAll extends Vue2type, SchedulerEditTaskMethods, SchedulerEditTaskData, SchedulerEditTaskComputed, SchedulerEditTaskState {
}
/**
 * @hidden
 */
declare let SchedulerEditTaskVue2: ComponentOptions<SchedulerEditTaskAll, DefaultData<SchedulerEditTaskData>, DefaultMethods<SchedulerEditTaskAll>, SchedulerEditTaskComputed, RecordPropsDefinition<SchedulerEditTaskProps>>;
/**
 * @hidden
 */
declare const SchedulerEditTask: DefineComponent<SchedulerEditTaskProps, any, SchedulerEditTaskData, SchedulerEditTaskComputed, SchedulerEditTaskMethods, {}, {}, {}, string, SchedulerEditTaskProps, SchedulerEditTaskProps, {}>;
export { SchedulerEditTask, SchedulerEditTaskVue2 };
