var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { Day, getDate, addDays, ZonedDate, MS_PER_DAY } from '@progress/kendo-date-math';
import { DAYS_IN_WEEK_COUNT } from '../../constants/main.js';
import { MultiDayView } from '../day/MultiDayView.js';
import { workWeekViewTitle, messages } from '../../messages/main.js';
import { toUTCDateTime } from '../../utils/main.js';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
/** @hidden */
var WorkWeekViewVue2 = {
  name: 'KendoWorkWeekView',
  // @ts-ignore
  emits: {
    dataaction: null
  },
  props: {
    name: {
      type: String,
      default: 'work-week'
    },
    slotDuration: {
      type: Number,
      default: 60
    },
    slotDivisions: {
      type: Number,
      default: 2
    },
    numberOfDays: {
      type: Number,
      default: 7
    },
    dateRange: {
      type: [Function, Object],
      default: function _default() {
        return workWeekViewDateRange;
      }
    },
    title: String,
    workWeekStart: {
      type: Number,
      default: Day.Monday
    },
    workWeekEnd: {
      type: Number,
      default: Day.Friday
    },
    selectedDateFormat: {
      type: String,
      default: '{0:D} - {1:D}'
    },
    selectedShortDateFormat: {
      type: String,
      default: '{0:d} - {1:d}'
    },
    showWorkHours: {
      type: Boolean,
      default: true
    },
    dateHeaderCell: [String, Function, Object],
    timeHeaderCell: [String, Function, Object],
    slotRender: [String, Function, Object],
    viewSlot: [String, Function, Object],
    resizeHint: [String, Function, Object],
    item: [String, Function, Object],
    viewItem: [String, Function, Object],
    editable: {
      type: [Boolean, Object],
      default: false
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    ks: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var localization = provideLocalizationService(this);
    var title = localization.toLanguageString(workWeekViewTitle, messages[workWeekViewTitle]);
    var dateRange = this.dateRange;
    var numberOfDays = Math.round((dateRange.end.getTime() - dateRange.start.getTime()) / MS_PER_DAY);
    return h(MultiDayView, {
      name: this.$props.name,
      attrs: this.v3 ? undefined : {
        name: this.$props.name,
        dateRange: this.$props.dateRange,
        numberOfDays: numberOfDays,
        slotDuration: this.$props.slotDuration,
        slotDivisions: this.$props.slotDivisions,
        selectedDateFormat: this.$props.selectedDateFormat,
        selectedShortDateFormat: this.$props.selectedShortDateFormat,
        showWorkHours: this.$props.showWorkHours,
        title: title,
        step: DAYS_IN_WEEK_COUNT,
        slotRender: this.$props.slotRender,
        viewSlot: this.$props.viewSlot,
        resizeHint: this.$props.resizeHint,
        slotItem: this.$props.slotItem,
        item: this.$props.item,
        viewItem: this.$props.viewItem,
        editable: this.$props.editable,
        dateHeaderCell: this.$props.dateHeaderCell,
        timeHeaderCell: this.$props.timeHeaderCell
      },
      dateRange: this.$props.dateRange,
      numberOfDays: numberOfDays,
      slotDuration: this.$props.slotDuration,
      slotDivisions: this.$props.slotDivisions,
      selectedDateFormat: this.$props.selectedDateFormat,
      selectedShortDateFormat: this.$props.selectedShortDateFormat,
      showWorkHours: this.$props.showWorkHours,
      title: title,
      step: DAYS_IN_WEEK_COUNT,
      slotRender: this.$props.slotRender,
      viewSlot: this.$props.viewSlot,
      resizeHint: this.$props.resizeHint,
      slotItem: this.$props.slotItem,
      item: this.$props.item,
      viewItem: this.$props.viewItem,
      editable: this.$props.editable,
      dateHeaderCell: this.$props.dateHeaderCell,
      timeHeaderCell: this.$props.timeHeaderCell,
      onDataaction: this.handleDataAction,
      on: this.v3 ? undefined : {
        "dataaction": this.handleDataAction
      }
    });
  },
  methods: {
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    }
  }
};
var firstDayInWeek = function firstDayInWeek(date, weekStartDay) {
  if (weekStartDay === void 0) {
    weekStartDay = Day.Sunday;
  }
  var first = date.clone();
  while (first.getDay() !== weekStartDay) {
    first = first.addDays(-1);
  }
  return first;
};
var workWeekViewDateRange = function workWeekViewDateRange(_a) {
  var intl = _a.intl,
    date = _a.date,
    timezone = _a.timezone,
    other = __rest(_a, ["intl", "date", "timezone"]);
  var normalized = ZonedDate.fromLocalDate(date, timezone);
  var workWeekStart = other.workWeekStart !== undefined ? other.workWeekStart : Day.Monday;
  var workWeekEnd = other.workWeekEnd !== undefined ? other.workWeekEnd : Day.Friday;
  var days = workWeekEnd < workWeekStart ? DAYS_IN_WEEK_COUNT + workWeekEnd - workWeekStart + 1 : workWeekEnd - workWeekStart + 1;
  var firstDate = getDate(firstDayInWeek(normalized, workWeekStart));
  var lastDate = addDays(firstDate, days);
  var zonedStart = ZonedDate.fromUTCDate(toUTCDateTime(firstDate), timezone);
  var zonedEnd = ZonedDate.fromUTCDate(toUTCDateTime(lastDate), timezone);
  var start = new Date(zonedStart.getTime());
  var end = new Date(zonedEnd.getTime());
  return {
    start: start,
    end: end,
    zonedStart: zonedStart,
    zonedEnd: zonedEnd
  };
};
/** @hidden */
var WorkWeekView = WorkWeekViewVue2;
export { WorkWeekView, WorkWeekViewVue2 };