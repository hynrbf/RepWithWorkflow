import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { MultiDayViewProps } from '../day/MultiDayView';
import { Day } from '@progress/kendo-date-math';
/**
 * Represents the properties of the Kendo UI for Vue [WeekView]({% slug api_scheduler_schedulerweekviewprops %}) Component.
 */
export interface WeekViewProps extends MultiDayViewProps {
    /**
     * The long-date format for displaying the
     * selected date in the Scheduler toolbar.
     * Defaults to `{0:D} - {1:D}`
     * ([more information](https://www.github.com/telerik/kendo-intl/blob/develop/docs/date-formatting/index.md))
     */
    selectedDateFormat?: string;
    /**
     * The short-date format for displaying the
     * selected date in the Scheduler toolbar.
     * Defaults to `{0:d} - {1-d}`
     * ([more information](https://www.github.com/telerik/kendo-intl/blob/develop/docs/date-formatting/index.md))
     */
    selectedShortDateFormat?: string;
    /**
     * Overrides the general `editable` prop of the Scheduler for the specified view only.
     */
    editable?: boolean;
    /**
     * The start time of the view. The WeekView displays events which are visible after the start time.
     * Accepts string values in the `HH:mm` format.
     */
    startTime?: string;
    /**
     * The end time of the view. The WeekView displays events which are visible before the end time.
     * Accepts string values in the `HH:mm` format.
     */
    endTime?: string;
    /**
     * The start time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format.
     */
    workDayStart?: string;
    /**
     * The end time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format.
     */
    workDayEnd?: string;
    /**
     * The start of the work week.
     */
    workWeekStart?: Day;
    /**
     * The end of the work week.
     */
    workWeekEnd?: Day;
    /**
     * The number of divisions of the time slots.
     */
    slotDivisions?: number;
    /**
     * The duration (in minutes) of the time slots.
     */
    slotDuration?: number;
    /**
     * If set to `true`, the view will be shown in the business-hours mode only.
     *
     * This will always override the internal `showWorkHours` state.
     */
    showWorkHours?: boolean;
    /**
     * Sets the initial business-hour mode. Default `true`.
     *
     * This option applies only the initial `showWorkHours` state.
     */
    defaultShowWorkHours?: boolean;
    /**
     * Sets a custom `id` to the wrapping element of the `DayView`.
     */
    id?: string;
}
/**
 * @hidden
 */
export interface WeekViewState {
}
/**
 * @hidden
 */
export interface WeekViewComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface WeekViewMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface WeekViewData {
}
/**
 * @hidden
 */
export interface WeekViewAll extends Vue2type, WeekViewMethods, WeekViewData, WeekViewComputed, WeekViewState {
}
/** @hidden */
declare let WeekViewVue2: ComponentOptions<WeekViewAll, DefaultData<WeekViewData>, DefaultMethods<WeekViewAll>, WeekViewComputed, RecordPropsDefinition<WeekViewProps>>;
/** @hidden */
declare const WeekView: DefineComponent<WeekViewProps, any, WeekViewData, WeekViewComputed, WeekViewMethods, {}, {}, {}, string, WeekViewProps, WeekViewProps, {}>;
export { WeekView, WeekViewVue2 };
