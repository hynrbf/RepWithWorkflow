// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { MultiDayView } from '../day/MultiDayView.js';
import { dayViewTitle, messages } from '../../messages/main.js';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { Day } from '@progress/kendo-date-math';
/** @hidden */
var DayViewVue2 = {
  name: 'KendoDayView',
  // @ts-ignore
  emits: {
    dataaction: null
  },
  props: {
    name: {
      type: String,
      default: 'day'
    },
    title: String,
    dateRange: {
      type: [Function, Object],
      default: function _default() {
        return MultiDayView.props.dateRange.default();
      }
    },
    showWorkHours: {
      type: Boolean,
      default: true
    },
    step: {
      type: Number,
      default: 1
    },
    numberOfDays: {
      type: Number,
      default: 1
    },
    slotDuration: {
      type: Number,
      default: 60
    },
    slotDivisions: {
      type: Number,
      default: 2
    },
    selectedDateFormat: {
      type: String,
      default: '{0:D}'
    },
    selectedShortDateFormat: {
      type: String,
      default: '{0:d}'
    },
    currentTimeMarker: {
      type: Boolean,
      default: true
    },
    startTime: {
      type: String,
      default: '00:00'
    },
    endTime: {
      type: String,
      default: '23:59'
    },
    workDayStart: {
      type: String,
      default: '08:00'
    },
    workDayEnd: {
      type: String,
      default: '17:00'
    },
    workWeekStart: {
      type: Number,
      default: Day.Monday
    },
    workWeekEnd: {
      type: Number,
      default: Day.Friday
    },
    defaultShowWorkHours: {
      type: Boolean,
      default: true
    },
    dateHeaderCell: [String, Function, Object],
    timeHeaderCell: [String, Function, Object],
    slotRender: [String, Function, Object],
    viewSlot: [String, Function, Object],
    resizeHint: [String, Function, Object],
    item: [String, Function, Object],
    viewItem: [String, Function, Object],
    editable: {
      type: [Boolean, Object],
      default: false
    },
    format: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var localization = provideLocalizationService(this);
    var title = localization.toLanguageString(dayViewTitle, messages[dayViewTitle]);
    return h(MultiDayView, {
      name: this.$props.name,
      attrs: this.v3 ? undefined : {
        name: this.$props.name,
        dateRange: this.$props.dateRange,
        step: this.$props.step,
        numberOfDays: this.$props.numberOfDays,
        slotDuration: this.$props.slotDuration,
        slotDivisions: this.$props.slotDivisions,
        selectedDateFormat: this.$props.selectedDateFormat,
        selectedShortDateFormat: this.$props.selectedShortDateFormat,
        showWorkHours: this.$props.showWorkHours,
        title: title,
        currentTimeMarker: this.$props.currentTimeMarker,
        startTime: this.$props.startTime,
        endTime: this.$props.endTime,
        workDayStart: this.$props.workDayStart,
        workDayEnd: this.$props.workDayEnd,
        workWeekStart: this.$props.workWeekStart,
        workWeekEnd: this.$props.workWeekEnd,
        defaultShowWorkHours: this.$props.defaultShowWorkHours,
        timeHeaderCell: this.$props.timeHeaderCell,
        dateHeaderCell: this.$props.dateHeaderCell,
        slotRender: this.$props.slotRender,
        viewSlot: this.$props.viewSlot,
        resizeHint: this.$props.resizeHint,
        item: this.$props.item,
        viewItem: this.$props.viewItem,
        slotItem: this.$props.slotItem,
        editable: this.$props.editable
      },
      dateRange: this.$props.dateRange,
      step: this.$props.step,
      numberOfDays: this.$props.numberOfDays,
      slotDuration: this.$props.slotDuration,
      slotDivisions: this.$props.slotDivisions,
      selectedDateFormat: this.$props.selectedDateFormat,
      selectedShortDateFormat: this.$props.selectedShortDateFormat,
      showWorkHours: this.$props.showWorkHours,
      title: title,
      currentTimeMarker: this.$props.currentTimeMarker,
      startTime: this.$props.startTime,
      endTime: this.$props.endTime,
      workDayStart: this.$props.workDayStart,
      workDayEnd: this.$props.workDayEnd,
      workWeekStart: this.$props.workWeekStart,
      workWeekEnd: this.$props.workWeekEnd,
      defaultShowWorkHours: this.$props.defaultShowWorkHours,
      timeHeaderCell: this.$props.timeHeaderCell,
      dateHeaderCell: this.$props.dateHeaderCell,
      slotRender: this.$props.slotRender,
      viewSlot: this.$props.viewSlot,
      resizeHint: this.$props.resizeHint,
      item: this.$props.item,
      viewItem: this.$props.viewItem,
      slotItem: this.$props.slotItem,
      editable: this.$props.editable,
      onDataaction: this.handleDataAction,
      on: this.v3 ? undefined : {
        "dataaction": this.handleDataAction
      }
    });
  },
  methods: {
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    }
  }
};
/** @hidden */
var DayView = DayViewVue2;
export { DayView, DayViewVue2 };