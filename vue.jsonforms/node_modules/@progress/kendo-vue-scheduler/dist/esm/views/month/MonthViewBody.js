// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { SchedulerEditSlot } from '../../slots/SchedulerEditSlot.js';
import { provideIntlService } from '@progress/kendo-vue-intl';
/** @hidden */
var MonthViewBodyVue2 = {
  name: 'KendoMonthViewBody',
  props: {
    editable: [Object, Boolean],
    groupIndex: Number,
    rangeIndex: Number,
    itemsPerSlot: Number,
    monthSlots: Array,
    ranges: Array,
    slotRender: [String, Function, Object],
    viewSlot: [String, Function, Object]
  },
  inject: {
    ri: {
      default: {}
    },
    ks: {
      default: null
    },
    setActiveDate: {
      default: null
    },
    setActiveViewName: {
      default: null
    },
    setSlots: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  provide: function provide() {
    return {
      ksSlots: this.ksSlots
    };
  },
  data: function data() {
    var _this = this;
    var groupIndex = this.groupIndex !== undefined ? this.groupIndex : this.ri.groupIndex;
    return {
      ksSlots: {
        cSlots: this.monthSlots.filter(function (slot) {
          return slot.group.index === groupIndex && slot.range.index === _this.rangeIndex;
        })
      }
    };
  },
  watch: {
    currentCellSlots: function currentCellSlots(newValue) {
      this.ksSlots.cSlots = newValue;
    }
  },
  computed: {
    currentCellSlots: function currentCellSlots() {
      var _this = this;
      var groupIndex = this.groupIndex !== undefined ? this.groupIndex : this.ri.groupIndex;
      return this.monthSlots.filter(function (slot) {
        return slot.group.index === groupIndex && slot.range.index === _this.rangeIndex;
      });
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    this.intl = provideIntlService(this);
    var EditSlot = this.$props.editSlot || SchedulerEditSlot;
    var that = this;
    var groupIndex = this.groupIndex !== undefined ? this.groupIndex : this.ri.groupIndex;
    return h("div", {
      "class": "k-scheduler-row",
      key: this.rangeIndex
    }, [this.currentCellSlots.map(function (slot, slotIndex, filtered) {
      return (
        // @ts-ignore  function children
        h(EditSlot, {
          slotRender: this.$props.slotRender,
          attrs: this.v3 ? undefined : {
            slotRender: this.$props.slotRender,
            viewSlot: that.$props.viewSlot,
            form: that.$props.form,
            index: slotIndex,
            navDay: true,
            itemsPerSlot: that.itemsPerSlot,
            expandable: {
              offsetTop: 30,
              offsetBottom: that.itemsPerSlot < slot.items.length ? 15 : 0
            },
            col: that.ks.orientation === 'horizontal' ? filtered.length * (groupIndex || 0) + slotIndex : slotIndex,
            row: that.ks.orientation === 'horizontal' ? that.rangeIndex : that.ranges.length * (groupIndex || 0) + that.rangeIndex,
            editable: that.$props.editable
          },
          viewSlot: that.$props.viewSlot,
          form: that.$props.form,
          index: slotIndex,
          navDay: true,
          itemsPerSlot: that.itemsPerSlot,
          expandable: {
            offsetTop: 30,
            offsetBottom: that.itemsPerSlot < slot.items.length ? 15 : 0
          },
          onDataaction: that.handleDataAction,
          on: this.v3 ? undefined : {
            "dataaction": that.handleDataAction,
            "showmoreitems": function showmoreitems(e) {
              return that.handleShowMoreItemsClick(e, slot);
            }
          },
          col: that.ks.orientation === 'horizontal' ? filtered.length * (groupIndex || 0) + slotIndex : slotIndex,
          row: that.ks.orientation === 'horizontal' ? that.rangeIndex : that.ranges.length * (groupIndex || 0) + that.rangeIndex,
          editable: that.$props.editable,
          onShowmoreitems: function showmoreitems(e) {
            return that.handleShowMoreItemsClick(e, slot);
          }
        })
      );
    }, this)]);
  },
  methods: {
    handleShowMoreItemsClick: function handleShowMoreItemsClick(event, slot) {
      var newView = this.ks.views.find(function (vw) {
        return vw.name === 'day';
      });
      if (!this.setActiveViewName || !newView || !newView.name || !slot) {
        return;
      }
      this.setActiveViewName(newView.name, event);
      this.setActiveDate(slot.start, event);
    },
    handleDataAction: function handleDataAction(action) {
      this.$emit('dataaction', action);
    }
  }
};
/** @hidden */
var MonthViewBody = MonthViewBodyVue2;
export { MonthViewBody, MonthViewBodyVue2 };