// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { DialogActionsBar, Dialog } from '@progress/kendo-vue-dialogs';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, editorCancel, deleteConfirmation, editorDelete, deleteDialogTitle } from '../messages/main.js';
import { Button } from '@progress/kendo-vue-buttons';
import { guid } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var SchedulerRemoveDialogVue2 = {
  name: 'KendoSchedulerRemoveDialog',
  props: {
    dataItem: Object
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created() {
    this.dialogId = guid();
  },
  mounted: function mounted() {
    var that = this;
    setTimeout(function () {
      var dialogWrapper = document.getElementById(that.dialogId);
      if (dialogWrapper) {
        dialogWrapper.focus();
      }
    }, 10);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var localization = provideLocalizationService(this);
    var removeCancelMessage = localization.toLanguageString(editorCancel, messages[editorCancel]);
    var removeConfirmMessage = localization.toLanguageString(editorDelete, messages[editorDelete]);
    var removeMessage = localization.toLanguageString(deleteConfirmation, messages[deleteConfirmation]);
    var deleteDialogTitleMessage = localization.toLanguageString(deleteDialogTitle, messages[deleteDialogTitle]);
    return (
      // @ts-ignore  function children
      h(Dialog, {
        title: deleteDialogTitleMessage,
        attrs: this.v3 ? undefined : {
          title: deleteDialogTitleMessage,
          appendTo: 'body',
          wrapperId: this.dialogId
        },
        appendTo: 'body',
        wrapperId: this.dialogId,
        onClose: this.handleClose,
        on: this.v3 ? undefined : {
          "close": this.handleClose
        }
      }, this.v3 ? function () {
        return [removeMessage,
        // @ts-ignore  function children
        h(DialogActionsBar, _this.v3 ? function () {
          return [
          // @ts-ignore  function children
          h(Button, {
            onClick: _this.handleCancel,
            on: _this.v3 ? undefined : {
              "click": _this.handleCancel
            }
          }, _this.v3 ? function () {
            return [removeCancelMessage];
          } : [removeCancelMessage]),
          // @ts-ignore  function children
          h(Button, {
            onClick: _this.handleConfirm,
            on: _this.v3 ? undefined : {
              "click": _this.handleConfirm
            }
          }, _this.v3 ? function () {
            return [removeConfirmMessage];
          } : [removeConfirmMessage])];
        } : [h(Button, {
          onClick: _this.handleCancel,
          on: _this.v3 ? undefined : {
            "click": _this.handleCancel
          }
        }, _this.v3 ? function () {
          return [removeCancelMessage];
        } : [removeCancelMessage]), h(Button, {
          onClick: _this.handleConfirm,
          on: _this.v3 ? undefined : {
            "click": _this.handleConfirm
          }
        }, _this.v3 ? function () {
          return [removeConfirmMessage];
        } : [removeConfirmMessage])])];
      } : [removeMessage, h(DialogActionsBar, _this.v3 ? function () {
        return [h(Button, {
          onClick: _this.handleCancel,
          on: _this.v3 ? undefined : {
            "click": _this.handleCancel
          }
        }, _this.v3 ? function () {
          return [removeCancelMessage];
        } : [removeCancelMessage]), h(Button, {
          onClick: _this.handleConfirm,
          on: _this.v3 ? undefined : {
            "click": _this.handleConfirm
          }
        }, _this.v3 ? function () {
          return [removeConfirmMessage];
        } : [removeConfirmMessage])];
      } : [h(Button, {
        onClick: _this.handleCancel,
        on: _this.v3 ? undefined : {
          "click": _this.handleCancel
        }
      }, _this.v3 ? function () {
        return [removeCancelMessage];
      } : [removeCancelMessage]), h(Button, {
        onClick: _this.handleConfirm,
        on: _this.v3 ? undefined : {
          "click": _this.handleConfirm
        }
      }, _this.v3 ? function () {
        return [removeConfirmMessage];
      } : [removeConfirmMessage])])])
    );
  },
  methods: {
    handleClose: function handleClose(_a) {
      var event = _a.event;
      this.$emit('close', {
        event: event
      });
    },
    handleCancel: function handleCancel(event) {
      this.$emit('cancel', {
        event: event,
        value: null
      });
    },
    handleConfirm: function handleConfirm(event) {
      this.$emit('confirm', {
        event: event,
        value: null
      });
    }
  }
};
/**
 * @hidden
 */
var SchedulerRemoveDialog = SchedulerRemoveDialogVue2;
export { SchedulerRemoveDialog, SchedulerRemoveDialogVue2 };