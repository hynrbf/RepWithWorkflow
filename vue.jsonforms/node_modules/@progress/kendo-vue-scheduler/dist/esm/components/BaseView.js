// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { useCellSync, dispatchFocusedItems, dispatchFocusedSlots } from '../hooks/main.js';
import { ITEMS_SELECT_ACTION, dispatchSelectedItems } from '../hooks/use-items-selection.js';
import { dispatchSelectedSlots, SLOTS_SELECT_ACTION } from '../hooks/use-slots-selection.js';
import { getDefaultSlots } from '@progress/kendo-vue-common';
import { COLLECTION_ACTION } from '../utils/main.js';
/**
 * @hidden
 */
var BaseViewVue2 = {
  name: 'KendoBaseView',
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  props: {
    viewProps: Object,
    baseSlots: Array,
    ranges: Array,
    id: String,
    isAgendaView: {
      type: Boolean,
      default: false
    }
  },
  provide: function provide() {
    return {
      bv: this.bv,
      setItems: this.dispatchItems,
      setSlots: this.dispatchSlots,
      dispatchSelectedSlots: this.handleSchedulerSlotsSelectAction,
      dispatchSelectedItems: this.handleSchedulerItemsSelectAction,
      dispatchFocusedItems: this.setFocusedItems,
      dispatchFocusedSlots: this.setFocusedSlots
      //    setActiveViewName: this.handleActiveViewNameChange
    };
  },

  data: function data() {
    return {
      bv: {
        viewProps: this.viewProps,
        ranges: this.ranges,
        items: [],
        slots: [],
        focusedItems: [],
        focusedSlots: [],
        selectedItems: [],
        selectedSlots: []
      }
    };
  },
  mounted: function mounted() {
    this.syncCells();
  },
  updated: function updated() {
    this.syncCells();
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("div", {
      "class": 'k-scheduler-layout k-scheduler-layout-flex',
      role: this.$props.isAgendaView ? 'grid' : 'presentation',
      attrs: this.v3 ? undefined : {
        role: this.$props.isAgendaView ? 'grid' : 'presentation'
      }
    }, [defaultSlot]);
  },
  methods: {
    syncCells: function syncCells() {
      useCellSync({
        element: this.$el,
        selector: '.k-group-cell',
        attribute: 'data-depth-index',
        explicitDepth: true
      });
      useCellSync({
        element: this.$el,
        selector: '.k-side-cell',
        attribute: 'data-depth-index',
        explicitDepth: false
      });
    },
    handleSchedulerItemsSelectAction: function handleSchedulerItemsSelectAction(action, event) {
      dispatchSelectedSlots.call(this, {
        type: SLOTS_SELECT_ACTION.reset
      });
      dispatchSelectedItems.call(this, action, event);
    },
    handleSchedulerSlotsSelectAction: function handleSchedulerSlotsSelectAction(action, event) {
      dispatchSelectedItems.call(this, {
        type: ITEMS_SELECT_ACTION.reset
      }, event);
      dispatchSelectedSlots.call(this, action);
    },
    setFocusedItems: function setFocusedItems(action, event) {
      dispatchFocusedItems.call(this, action, event);
    },
    setFocusedSlots: function setFocusedSlots(action, event) {
      dispatchFocusedSlots.call(this, action, event);
    },
    dispatchItems: function dispatchItems(action) {
      switch (action.type) {
        case COLLECTION_ACTION.add:
          this.bv.items.push(action.item);
          break;
        case COLLECTION_ACTION.remove:
          var index = this.bv.items.indexOf(action.item);
          this.bv.items.splice(index, 1);
          break;
        default:
          break;
      }
    },
    dispatchSlots: function dispatchSlots(action) {
      switch (action.type) {
        case COLLECTION_ACTION.add:
          this.bv.slots.push(action.item);
          break;
        case COLLECTION_ACTION.remove:
          var index = this.bv.slots.indexOf(action.item);
          this.bv.slots.splice(index, 1);
          break;
        default:
          break;
      }
    }
  }
};
/**
 * @hidden
 */
var BaseView = BaseViewVue2;
export { BaseView, BaseViewVue2 };