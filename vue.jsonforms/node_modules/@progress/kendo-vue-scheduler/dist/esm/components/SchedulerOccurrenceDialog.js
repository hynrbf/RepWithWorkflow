// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var inject = allVue.inject;
import { Dialog, DialogActionsBar } from '@progress/kendo-vue-dialogs';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, editorOccurrence, editorSeries, editorRecurringConfirmation, editorRecurringDialogTitle, deleteOccurrence, deleteSeries, deleteRecurringDialogTitle, deleteRecurringConfirmation } from '../messages/main.js';
import { guid } from '@progress/kendo-vue-common';
import { Button } from '@progress/kendo-vue-buttons';
/**
 * @hidden
 */
var SchedulerOccurrenceDialogVue2 = {
  name: 'KendoSchedulerOccurrenceDialog',
  props: {
    dataItem: Object,
    isRemove: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created() {
    this.dialogId = guid();
  },
  mounted: function mounted() {
    var that = this;
    setTimeout(function () {
      var dialogWrapper = document.getElementById(that.dialogId);
      if (dialogWrapper) {
        dialogWrapper.focus();
      }
    }, 10);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var isRemove = this.$props.isRemove;
    var localizationService = provideLocalizationService(this);
    var localizeMessage = function localizeMessage(message) {
      return localizationService.toLanguageString(message, messages[message]);
    };
    var editOccurrenceMessage = localizeMessage(editorOccurrence);
    var editSeriesMessage = localizeMessage(editorSeries);
    var editRecurringConfirmationMessage = localizeMessage(editorRecurringConfirmation);
    var editRecurringDialogTitleMessage = localizeMessage(editorRecurringDialogTitle);
    var deleteOccurrenceMessage = localizeMessage(deleteOccurrence);
    var deleteSeriesMessage = localizeMessage(deleteSeries);
    var deleteRecurringDialogTitleMessage = localizeMessage(deleteRecurringDialogTitle);
    var deleteRecurringConfirmationMessage = localizeMessage(deleteRecurringConfirmation);
    var titleMessage = isRemove ? deleteRecurringDialogTitleMessage : editRecurringDialogTitleMessage;
    var confirmationMessage = isRemove ? deleteRecurringConfirmationMessage : editRecurringConfirmationMessage;
    var occurrenceMessage = isRemove ? deleteOccurrenceMessage : editOccurrenceMessage;
    var seriesMessage = isRemove ? deleteSeriesMessage : editSeriesMessage;
    return (
      // @ts-ignore  function children
      h(Dialog, {
        title: titleMessage,
        attrs: this.v3 ? undefined : {
          title: titleMessage,
          appendTo: 'body',
          wrapperId: this.dialogId
        },
        appendTo: 'body',
        wrapperId: this.dialogId,
        onClose: this.handleClose,
        on: this.v3 ? undefined : {
          "close": this.handleClose
        }
      }, this.v3 ? function () {
        return [confirmationMessage,
        // @ts-ignore  function children
        h(DialogActionsBar, _this.v3 ? function () {
          return [
          // @ts-ignore  function children
          h(Button, {
            onClick: _this.handleOccurrenceClick,
            on: _this.v3 ? undefined : {
              "click": _this.handleOccurrenceClick
            }
          }, _this.v3 ? function () {
            return [occurrenceMessage];
          } : [occurrenceMessage]),
          // @ts-ignore  function children
          h(Button, {
            onClick: _this.handleSeriesClick,
            on: _this.v3 ? undefined : {
              "click": _this.handleSeriesClick
            }
          }, _this.v3 ? function () {
            return [seriesMessage];
          } : [seriesMessage])];
        } : [h(Button, {
          onClick: _this.handleOccurrenceClick,
          on: _this.v3 ? undefined : {
            "click": _this.handleOccurrenceClick
          }
        }, _this.v3 ? function () {
          return [occurrenceMessage];
        } : [occurrenceMessage]), h(Button, {
          onClick: _this.handleSeriesClick,
          on: _this.v3 ? undefined : {
            "click": _this.handleSeriesClick
          }
        }, _this.v3 ? function () {
          return [seriesMessage];
        } : [seriesMessage])])];
      } : [confirmationMessage, h(DialogActionsBar, _this.v3 ? function () {
        return [h(Button, {
          onClick: _this.handleOccurrenceClick,
          on: _this.v3 ? undefined : {
            "click": _this.handleOccurrenceClick
          }
        }, _this.v3 ? function () {
          return [occurrenceMessage];
        } : [occurrenceMessage]), h(Button, {
          onClick: _this.handleSeriesClick,
          on: _this.v3 ? undefined : {
            "click": _this.handleSeriesClick
          }
        }, _this.v3 ? function () {
          return [seriesMessage];
        } : [seriesMessage])];
      } : [h(Button, {
        onClick: _this.handleOccurrenceClick,
        on: _this.v3 ? undefined : {
          "click": _this.handleOccurrenceClick
        }
      }, _this.v3 ? function () {
        return [occurrenceMessage];
      } : [occurrenceMessage]), h(Button, {
        onClick: _this.handleSeriesClick,
        on: _this.v3 ? undefined : {
          "click": _this.handleSeriesClick
        }
      }, _this.v3 ? function () {
        return [seriesMessage];
      } : [seriesMessage])])])
    );
  },
  methods: {
    handleClose: function handleClose(_a) {
      var event = _a.event;
      this.$emit('close', {
        event: event,
        value: null
        // target: target.current
      });
    },

    handleSeriesClick: function handleSeriesClick(event) {
      this.$emit('seriesclose', {
        event: event,
        value: null
        // target: target.current 
      });
    },

    handleOccurrenceClick: function handleOccurrenceClick(event) {
      this.$emit('occurrenceclose', {
        event: event,
        value: null
        // target: target.current 
      });
    }
  }
};
/**
 * @hidden
 */
var SchedulerOccurrenceDialog = SchedulerOccurrenceDialogVue2;
export { SchedulerOccurrenceDialog, SchedulerOccurrenceDialogVue2 };