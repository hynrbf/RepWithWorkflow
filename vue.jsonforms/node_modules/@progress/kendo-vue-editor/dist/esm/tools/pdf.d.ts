import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { ToolProps } from './ToolProps';
import { EditorToolsSettings } from './../config/toolsSettings';
import { PDFExportProps } from '@progress/kendo-vue-pdf';
export interface PdfProps extends ToolProps {
    /**
     * The settings of the tool. Use it to modify the tool appearance.
     */
    settings?: EditorToolsSettings.PdfSettings;
    /**
     * The options which will be passed to the [`savePDF`]({% slug api_pdf_savepdf %}) function.
     */
    savePdfOptions?: PDFExportProps;
    /**
     * The callback which will be passed to the [`savePDF`]({% slug api_pdf_savepdf %}) function.
     */
    savePdfCallback?: () => void;
}
/**
 * @hidden
 */
export interface PdfState {
}
/**
 * @hidden
 */
export interface PdfComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface PdfMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface PdfData {
}
/**
 * @hidden
 */
export interface PdfAll extends Vue2type, PdfMethods, PdfData, PdfComputed, PdfState {
}
/**
 * @hidden
 */
declare let PdfVue2: ComponentOptions<PdfAll, DefaultData<PdfData>, DefaultMethods<PdfAll>, PdfComputed, RecordPropsDefinition<PdfProps>>;
/**
 * @hidden
 */
declare const Pdf: DefineComponent<PdfProps, any, PdfData, PdfComputed, PdfMethods, {}, {}, {}, string, PdfProps, PdfProps, {}>;
export { Pdf, PdfVue2 };
