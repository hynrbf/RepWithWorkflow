// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { Window, DialogActionsBar } from '@progress/kendo-vue-dialogs';
import { Button as KButton } from '@progress/kendo-vue-buttons';
import { getHtml, setHtml, indentHtml, trimWhitespace } from '@progress/kendo-editor-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages } from '../messages/main.js';
import { editorPropsKey } from './../utils/props-key.js';
import { getRef, setRef, guid } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var ViewHtmlDialogVue2 = {
  name: 'KendoViewHtmlDialog',
  // @ts-ignore
  emits: {
    close: null
  },
  props: {
    view: Object,
    settings: Object,
    dir: String
  },
  created: function created() {
    this.textAreaId = guid();
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    var view = this.$props.view;
    return {
      textAreaValue: indentHtml(getHtml(view.state))
    };
  },
  mounted: function mounted() {
    this.htmlArea = getRef(this, 'htmlArea');
    if (this.htmlArea) {
      this.htmlArea.focus();
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      settings = _a.settings,
      dir = _a.dir;
    var localization = provideLocalizationService(this);
    var _b = settings.messages,
      viewHtmlDialogTitle = _b.viewHtmlDialogTitle,
      viewHtmlCancel = _b.viewHtmlCancel,
      viewHtmlUpdate = _b.viewHtmlUpdate;
    var content = h("span", {
      "class": "k-input k-textarea k-input-md k-input-solid k-rounded-md k-editor-textarea"
    }, [h("textarea", {
      ref: setRef(this, 'htmlArea'),
      onInput: this.textAreaChange,
      on: this.v3 ? undefined : {
        "input": this.textAreaChange
      },
      value: this.v3 ? this.textAreaValue : null,
      domProps: this.v3 ? undefined : {
        "value": this.textAreaValue
      },
      id: this.textAreaId,
      attrs: this.v3 ? undefined : {
        id: this.textAreaId,
        role: "textbox",
        tabindex: "0",
        "aria-multiline": "true"
      },
      role: "textbox",
      "class": "k-input-inner !k-overflow-auto",
      tabindex: "0",
      "aria-multiline": "true",
      style: "resize: none;"
    })]);
    var actionButtons = [
    // @ts-ignore function children
    h(KButton, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        dir: dir
      },
      onClick: this.onClose,
      on: this.v3 ? undefined : {
        "click": this.onClose
      },
      dir: dir,
      key: "cancel"
    }, this.v3 ? function () {
      return [localization.toLanguageString(viewHtmlCancel, messages[viewHtmlCancel])];
    } : [localization.toLanguageString(viewHtmlCancel, messages[viewHtmlCancel])]),
    // @ts-ignore function children
    h(KButton, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        themeColor: 'primary',
        dir: dir
      },
      onClick: this.onUpdate,
      on: this.v3 ? undefined : {
        "click": this.onUpdate
      },
      themeColor: 'primary',
      dir: dir,
      key: "update"
    }, this.v3 ? function () {
      return [localization.toLanguageString(viewHtmlUpdate, messages[viewHtmlUpdate])];
    } : [localization.toLanguageString(viewHtmlUpdate, messages[viewHtmlUpdate])])];
    var dialog =
    // @ts-ignore function children
    h(Window, {
      initialHeight: 400,
      attrs: this.v3 ? undefined : {
        initialHeight: 400,
        initialWidth: 500,
        windowClass: 'k-editor-window',
        title: localization.toLanguageString(viewHtmlDialogTitle, messages[viewHtmlDialogTitle]),
        dir: dir,
        modal: true,
        minimizeButton: function minimizeButton() {
          return null;
        },
        maximizeButton: function maximizeButton() {
          return null;
        },
        resizable: false
      },
      initialWidth: 500,
      windowClass: 'k-editor-window',
      title: localization.toLanguageString(viewHtmlDialogTitle, messages[viewHtmlDialogTitle]),
      onClose: this.onClose,
      on: this.v3 ? undefined : {
        "close": this.onClose
      },
      key: "dialog",
      dir: dir,
      style: dir === 'rtl' ? {
        textAlign: 'right'
      } : undefined,
      modal: true,
      minimizeButton: function minimizeButton() {
        return null;
      },
      maximizeButton: function maximizeButton() {
        return null;
      },
      resizable: false
    }, this.v3 ? function () {
      return [content,
      // @ts-ignore function children
      h(DialogActionsBar, _this.v3 ? function () {
        return [actionButtons];
      } : [actionButtons])];
    } : [content, h(DialogActionsBar, _this.v3 ? function () {
      return [actionButtons];
    } : [actionButtons])]);
    return dialog;
  },
  methods: {
    textAreaChange: function textAreaChange(e) {
      this.textAreaValue = e.target.value;
    },
    onUpdate: function onUpdate() {
      var _a = this.$props,
        view = _a.view,
        settings = _a.settings;
      var html = trimWhitespace(this.htmlArea ? this.textAreaValue : '');
      var preserveWhitespace = editorPropsKey.getState(view.state).preserveWhitespace;
      setHtml(html, settings.commandName, {
        preserveWhitespace: preserveWhitespace
      })(view.state, view.dispatch);
      this.onClose();
    },
    onClose: function onClose() {
      this.$props.view.focus();
      this.$emit('close');
    }
  }
};
/**
 * @hidden
 */
var ViewHtmlDialog = ViewHtmlDialogVue2;
export { ViewHtmlDialog, ViewHtmlDialogVue2 };