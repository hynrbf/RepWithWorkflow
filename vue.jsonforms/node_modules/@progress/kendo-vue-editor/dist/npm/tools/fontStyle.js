"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var __spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FontNameVue2 = exports.FontName = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_dropdowns_1 = require("@progress/kendo-vue-dropdowns");
var kendo_editor_common_1 = require("@progress/kendo-editor-common");
var utils_1 = require("./utils");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("../messages/main");
/**
 * @hidden
 */
var FontNameVue2 = {
  name: 'KendoFontName',
  props: __assign({
    view: Object,
    settings: {
      type: Object,
      default: function _default() {
        return {
          messages: {}
        };
      }
    }
  }, kendo_vue_dropdowns_1.DropDownList.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      view = _a.view,
      render = _a.render,
      dataItems = _a.dataItems,
      settings = _a.settings,
      defaultItemProps = _a.defaultItem,
      other = __rest(_a, ["view", "render", "dataItems", "settings", "defaultItem"]);
    var style = settings.style;
    var styles = view ? (0, kendo_editor_common_1.getInlineStyles)(view.state, {
      name: style,
      value: /^.+$/
    }) : [];
    var value = new Set(styles).size === 1 ? styles[0] : null;
    var items = dataItems || settings.items;
    var defaultItem = defaultItemProps || settings.defaultItem;
    var localization = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    if (defaultItem && defaultItem.localizationKey) {
      defaultItem = __assign({}, defaultItem);
      defaultItem.text = defaultItem.localizationKey ? localization.toLanguageString(defaultItem.localizationKey, main_1.messages[defaultItem.localizationKey]) : defaultItem.text;
    }
    var ddlProps = __assign(__assign(__assign({}, other), {
      value: value ? items.find(function (i) {
        return i.value === value;
      }) : value,
      dataItems: items,
      defaultItem: defaultItem,
      itemRender: this.customItemRender,
      textField: 'text',
      dataItemKey: 'value',
      leftRightKeysNavigation: false,
      title: defaultItem.text
    }), settings.props);
    var dropdown = h(kendo_vue_dropdowns_1.DropDownList, __assign({
      onChange: this.onChange,
      on: this.v3 ? undefined : {
        'change': this.onChange
      },
      style: utils_1.userSelectNone,
      attrs: this.v3 ? undefined : ddlProps
    }, ddlProps));
    return dropdown;
  },
  methods: {
    customItemRender: function customItemRender(h, li, itemProps) {
      return itemProps.dataItem.style ? h('li', {
        class: itemProps.itemClass,
        onClick: itemProps.onClick,
        on: {
          click: itemProps.onClick
        }
      }, [h('span', {
        style: itemProps.dataItem.style
      }, __spreadArray([], li.children, true))]) : li;
    },
    onChange: function onChange(e) {
      var _a = this.$props,
        view = _a.view,
        settings = _a.settings;
      var style = settings.style;
      var item = e.target.value;
      if (view) {
        (0, kendo_editor_common_1.applyInlineStyle)({
          style: style,
          value: item.value
        }, settings.commandName)(view.state, view.dispatch);
        var event_1 = e.event;
        if (event_1 && event_1.type === 'click') {
          view.focus();
        }
      }
    }
  }
};
exports.FontNameVue2 = FontNameVue2;
/**
 * @hidden
 */
var FontName = FontNameVue2;
exports.FontName = FontName;