// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { Popup } from '@progress/kendo-vue-popup';
import { PopupGrid } from './popupGrid';
/**
 * @hidden
 */
var InsertTablePopupVue2 = {
  name: 'KendoInsertTablePopup',
  // @ts-ignore
  emits: {
    close: null
  },
  props: {
    show: {
      type: Boolean,
      required: true
    },
    createTableMessage: {
      type: String,
      required: true
    },
    createTableHintMessage: {
      type: String,
      required: true
    },
    anchor: String,
    rows: {
      type: Number,
      default: 6
    },
    columns: {
      type: Number,
      default: 8
    },
    dir: String
  },
  data: function data() {
    return {
      pointerdown: false
    };
  },
  updated: function updated() {
    // The case when the popup is shown and the view is updated (selection or document is changed).
    // if (prevProps.show && this.$props.show) {
    //     this.$props.onClose();
    // }
  },
  mounted: function mounted() {
    window.addEventListener('mousedown', this.onWindowDown);
    window.addEventListener('pointerdown', this.onWindowDown);
  },
  destroyed: !!isV3 ? undefined : function () {
    window.removeEventListener('mousedown', this.onWindowDown);
    window.removeEventListener('pointerdown', this.onWindowDown);
  },
  // @ts-ignore
  unmounted: function unmounted() {
    window.removeEventListener('mousedown', this.onWindowDown);
    window.removeEventListener('pointerdown', this.onWindowDown);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var _a = this.$props,
      show = _a.show,
      anchor = _a.anchor,
      dir = _a.dir,
      rows = _a.rows,
      columns = _a.columns;
    var horizontal = dir === 'rtl' ? 'right' : 'left';
    return (
      // @ts-ignore function children
      h(Popup, {
        anchor: anchor,
        attrs: this.v3 ? undefined : {
          anchor: anchor,
          anchorAlign: {
            horizontal: horizontal,
            vertical: 'bottom'
          },
          popupAlign: {
            horizontal: horizontal,
            vertical: 'top'
          },
          popupClass: "k-ct-popup k-group k-reset k-border-up",
          show: show
        },
        anchorAlign: {
          horizontal: horizontal,
          vertical: 'bottom'
        },
        popupAlign: {
          horizontal: horizontal,
          vertical: 'top'
        },
        popupClass: "k-ct-popup k-group k-reset k-border-up",
        show: show,
        style: dir === 'rtl' ? {
          direction: 'rtl'
        } : undefined
      }, this.v3 ? function () {
        return [
        // @ts-ignore
        h(PopupGrid, {
          rows: rows,
          attrs: _this.v3 ? undefined : {
            rows: rows,
            columns: columns,
            createTableMessage: _this.$props.createTableMessage,
            createTableHintMessage: _this.$props.createTableHintMessage
          },
          columns: columns,
          createTableMessage: _this.$props.createTableMessage,
          createTableHintMessage: _this.$props.createTableHintMessage,
          onCellclick: _this.onTableInsert,
          on: _this.v3 ? undefined : {
            "cellclick": _this.onTableInsert,
            "down": _this.onPointerDown
          },
          onDown: _this.onPointerDown
        })];
      } : [h(PopupGrid, {
        rows: rows,
        attrs: _this.v3 ? undefined : {
          rows: rows,
          columns: columns,
          createTableMessage: _this.$props.createTableMessage,
          createTableHintMessage: _this.$props.createTableHintMessage
        },
        columns: columns,
        createTableMessage: _this.$props.createTableMessage,
        createTableHintMessage: _this.$props.createTableHintMessage,
        onCellclick: _this.onTableInsert,
        on: _this.v3 ? undefined : {
          "cellclick": _this.onTableInsert,
          "down": _this.onPointerDown
        },
        onDown: _this.onPointerDown
      })])
    );
  },
  methods: {
    onTableInsert: function onTableInsert(row, col) {
      this.$emit('tableinsert', row, col);
    },
    onWindowDown: function onWindowDown(event) {
      var anchor = this.$props.anchor;
      if (anchor && (anchor === event.target || anchor.firstElementChild === event.target)) {
        return;
      }
      if (this.$props.show && !this.pointerdown) {
        this.$emit('close');
      }
      this.pointerdown = false;
    },
    onPointerDown: function onPointerDown() {
      this.pointerdown = true;
    }
  }
};
/**
 * @hidden
 */
var InsertTablePopup = InsertTablePopupVue2;
export { InsertTablePopup, InsertTablePopupVue2 };