// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { formatString } from '../utils';
var cellClass = 'k-ct-cell k-disabled';
var selectedClass = 'k-selected';
/**
 * @hidden
 */
var PopupGridVue2 = {
  name: 'KendoPopupGrid',
  props: {
    rows: Number,
    columns: Number,
    createTableMessage: String,
    createTableHintMessage: String
  },
  data: function data() {
    return {
      row: -1,
      col: -1
    };
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var cells = [];
    var total = this.$props.columns * this.$props.rows;
    var _a = this.$data,
      row = _a.row,
      col = _a.col;
    var message = this.$props.createTableMessage;
    if (col > -1) {
      message = formatString(this.$props.createTableHintMessage, row + 1, col + 1);
    }
    var renderCell = function renderCell(index, selRow, selCol) {
      var _this = this;
      var currentRow = Math.floor(index / this.$props.columns);
      var currentCol = index % this.$props.columns;
      var selected = currentCol <= selCol && currentRow <= selRow;
      return h("span", {
        "class": cellClass + (selected ? " ".concat(selectedClass) : ''),
        onMouseenter: function onMouseenter() {
          return _this.cellMouseEnter({
            row: currentRow,
            col: currentCol
          });
        },
        on: this.v3 ? undefined : {
          "mouseenter": function onMouseenter() {
            return _this.cellMouseEnter({
              row: currentRow,
              col: currentCol
            });
          },
          "click": function click() {
            return _this.onCellClick(currentRow, currentCol);
          }
        },
        onClick: function click() {
          return _this.onCellClick(currentRow, currentCol);
        },
        key: index
      });
    };
    for (var i = 0; i < total; i++) {
      cells.push(renderCell.call(this, i, row, col));
    }
    var body = [h("div", {
      onMouseleave: function onMouseleave() {
        return _this.handleMouseLeave();
      },
      on: this.v3 ? undefined : {
        "mouseleave": function onMouseleave() {
          return _this.handleMouseLeave();
        },
        "pointerdown": this.onDown,
        "mousedown": this.onDown
      },
      key: "cells",
      style: {
        borderColor: 'inherit'
      },
      onPointerdown: this.onDown,
      onMousedown: this.onDown
    }, [cells]), h("div", {
      "class": "k-status",
      key: "status",
      onPointerdown: this.onDown,
      on: this.v3 ? undefined : {
        "pointerdown": this.onDown,
        "mousedown": this.onDown
      },
      onMousedown: this.onDown
    }, [message])];
    return h("span", [body]);
  },
  methods: {
    cellMouseEnter: function cellMouseEnter(_a) {
      var row = _a.row,
        col = _a.col;
      this.row = row;
      this.col = col;
    },
    handleMouseLeave: function handleMouseLeave() {
      this.row = -1;
      this.col = -1;
    },
    onCellClick: function onCellClick(row, col) {
      this.$emit('cellclick', row, col);
    },
    onDown: function onDown(e) {
      this.$emit('down', e);
    }
  }
};
/**
 * @hidden
 */
var PopupGrid = PopupGridVue2;
export { PopupGrid, PopupGridVue2 };