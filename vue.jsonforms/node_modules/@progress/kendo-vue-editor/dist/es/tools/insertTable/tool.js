var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { Button as KButton } from '@progress/kendo-vue-buttons';
import { guid } from '@progress/kendo-vue-common';
import { InsertTablePopup } from './popup';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages } from '../../messages/main';
import { canInsert, createTable, insertNode } from '@progress/kendo-editor-common';
/**
 * @hidden
 */
var InsertTableVue2 = {
  name: 'KendoInsertTable',
  props: __assign({
    view: Object,
    settings: {
      type: Object,
      default: function _default() {
        return {
          messages: {}
        };
      }
    },
    dir: String
  }, KButton.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created() {
    this.buttonRef = guid();
  },
  data: function data() {
    return {
      openedPopup: false
    };
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      view = _a.view,
      settings = _a.settings,
      other = __rest(_a, ["view", "settings"]);
    var state = view && view.state;
    var localization = provideLocalizationService(this);
    var _b = settings.messages,
      createTableMsgKey = _b.createTable,
      createTableHint = _b.createTableHint;
    var createTableMsg = localization.toLanguageString(createTableMsgKey, messages[createTableMsgKey]);
    var createTableHintMsg = localization.toLanguageString(createTableHint, messages[createTableHint]);
    var buttonProps = __assign(__assign(__assign({}, other), {
      disabled: !state || !canInsert(state, state.schema.nodes.table),
      key: 'InsertTable',
      title: createTableMsg
    }), settings.props);
    var button = h(KButton, __assign({
      ref: this.buttonRef,
      onClick: this.togglePopup,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? undefined : {
        'click': this.togglePopup,
        'mousedown': this.preventDefault,
        'pointerdown': this.preventDefault
      },
      attrs: this.v3 ? undefined : buttonProps
    }, buttonProps));
    var rendering = [button, view &&
    // @ts-ignore function children
    h(InsertTablePopup, {
      key: "insertTablePopup",
      createTableMessage: createTableMsg,
      attrs: this.v3 ? undefined : {
        createTableMessage: createTableMsg,
        createTableHintMessage: createTableHintMsg,
        dir: this.dir,
        anchor: this.buttonRef,
        show: this.openedPopup
      },
      createTableHintMessage: createTableHintMsg,
      dir: this.dir,
      anchor: this.buttonRef,
      show: this.openedPopup,
      onClose: this.closePopup,
      on: this.v3 ? undefined : {
        "close": this.closePopup,
        "tableinsert": this.onTableInsert
      },
      onTableinsert: this.onTableInsert
    }) || null];
    return h("span", [rendering]);
  },
  methods: {
    togglePopup: function togglePopup() {
      this.openedPopup = !this.openedPopup;
    },
    closePopup: function closePopup() {
      if (this.openedPopup) {
        this.togglePopup();
      }
    },
    onTableInsert: function onTableInsert(row, col) {
      var view = this.$props.view;
      if (!view) {
        return;
      }
      var newTable = createTable(view.state.schema.nodes, row, col);
      if (newTable) {
        insertNode(newTable, true)(view.state, view.dispatch);
      }
      view.focus();
      this.closePopup();
    },
    preventDefault: function preventDefault(e) {
      e.preventDefault();
    }
  }
};
/**
 * @hidden
 */
var InsertTable = InsertTableVue2;
export { InsertTable, InsertTableVue2 };