import { FormContextType } from './FormContext';
import { FieldProps } from './interfaces/FieldProps';
import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * @hidden
 */
interface FieldState {
}
/**
 * @hidden
 */
interface FieldData {
}
/**
 * @hidden
 */
export interface FieldMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface FieldComputed {
    [key: string]: any;
    fieldClassName: object;
}
/**
 * @hidden
 */
export interface FieldAll extends FieldMethods, FieldState, FieldData, FieldComputed, FormContextType, Vue2type {
}
/**
 * @hidden
 */
declare const FieldVue2: ComponentOptions<Vue2type, DefaultData<FieldData>, DefaultMethods<FieldAll>, FieldComputed, RecordPropsDefinition<FieldProps>>;
/**
 * @hidden
 */
declare let Field: DefineComponent<FieldProps, any, FieldData, FieldComputed, FieldMethods, {}, {}, {}, string, FieldProps, FieldProps, {}>;
export { Field, FieldVue2 };
