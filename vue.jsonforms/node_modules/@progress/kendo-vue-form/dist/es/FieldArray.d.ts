import { FieldArrayProps } from './interfaces/FieldArrayProps';
import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * @hidden
 */
interface FieldArrayState {
}
/**
 * @hidden
 */
interface FieldArrayData {
}
/**
 * @hidden
 */
export interface FieldArrayMethods {
    [key: string]: any;
    onUnshift: (event: any) => void;
    onPush: (event: any) => void;
    onInsert: (event: any) => void;
    onPop: () => void;
    onRemove: (event: any) => void;
    onReplace: (event: any) => void;
    onMove: (event: any) => void;
}
/**
 * @hidden
 */
export interface FieldArrayComputed {
    [key: string]: any;
    fieldClassName: object;
}
/**
 * @hidden
 */
export interface FieldArrayAll extends FieldArrayMethods, FieldArrayState, FieldArrayData, FieldArrayComputed, Vue2type {
}
/**
 * @hidden
 */
declare const FieldArrayVue2: ComponentOptions<Vue2type, DefaultData<FieldArrayData>, DefaultMethods<FieldArrayAll>, FieldArrayComputed, RecordPropsDefinition<FieldArrayProps>>;
/**
 * @hidden
 */
declare const FieldArray: DefineComponent<FieldArrayProps, any, FieldArrayData, FieldArrayComputed, FieldArrayMethods, {}, {}, {}, string, FieldArrayProps, FieldArrayProps, {}>;
export { FieldArray, FieldArrayVue2 };
