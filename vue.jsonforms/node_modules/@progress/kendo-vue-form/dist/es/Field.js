var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { getDefaultSlots, getListeners, getTemplate, templateRendering } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var FieldVue2 = {
  name: 'KendoField',
  props: {
    component: [String, Number, Boolean, Object],
    validator: [Function, Array],
    name: String,
    changeOnInput: {
      type: Boolean,
      default: true
    }
  },
  created: function created() {
    if (!this.kendoForm) {
      return;
    }
    var unregisterField = this.kendoForm.registerField(this.$props.name, this.$props.validator);
    return unregisterField;
  },
  inject: {
    kendoForm: {
      default: null
    }
  },
  methods: {
    handleOnChange: function handleOnChange(event) {
      var newValue = event ? event.value !== undefined ? event.value : event.target ? event.target.value : event.target : event;
      this.kendoForm.onChange(this.$props.name, {
        value: newValue
      });
      this.$emit('change', event);
    },
    handleOnInput: function handleOnInput(event) {
      var newValue = event ? event.value !== undefined ? event.value : event.target ? event.target.value : event.target : event;
      if (this.changeOnInput) {
        this.kendoForm.onChange(this.$props.name, {
          value: newValue
        });
      }
      this.$emit('input', event);
    },
    onNativeComponentChange: function onNativeComponentChange(event) {
      this.kendoForm.onChange(this.$props.name, {
        value: event.target.value
      });
    },
    handleOnBlur: function handleOnBlur() {
      this.kendoForm.onBlur(this.$props.name);
    },
    handleOnFocus: function handleOnFocus() {
      this.kendoForm.onFocus(this.$props.name);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a = this.$props,
      name = _a.name,
      component = _a.component,
      validator = _a.validator,
      id = _a.id,
      others = __rest(_a, ["name", "component", "validator", "id"]);
    if (!this.kendoForm) {
      return null;
    }
    var value = this.kendoForm.values[name];
    if (typeof component === 'string' && component === ('input' || 'textarea')) {
      return h(component, __assign(__assign({
        attrs: this.$attrs
      }, this.$attrs), {
        onChange: this.onNativeComponentChange,
        onBlur: this.handleOnBlur,
        onFocus: this.handleOnFocus,
        on: this.v3 ? undefined : {
          change: this.handleOnChange,
          blur: this.handleOnBlur,
          focus: this.handleOnFocus
        },
        domProps: this.v3 ? undefined : {
          value: value ? value : ''
        },
        name: name,
        value: value ? value : ''
      }));
    }
    if (component) {
      var renderTemplate = templateRendering.call(this, component, getListeners.call(this));
      return getTemplate.call(this, {
        h: h,
        template: renderTemplate,
        additionalProps: __assign({
          value: value,
          // meta
          validationMessage: this.kendoForm.errors[name],
          touched: this.kendoForm.touchedByField[name],
          modified: this.kendoForm.modifiedByField[name],
          visited: this.kendoForm.visitedByField[name],
          // Our `valid` implementation requires double submit to show html5 validation errors,
          // however it's NOT recommended to show html5 validation errors at all as:
          // - There is no standard way to change validation look and feel with CSS.
          // - Look different in each browser / OS
          // - You can have a page in one language but an error message
          // displayed in another language (not localizable)
          valid: !(Boolean(this.kendoForm.errors[name]) && this.kendoForm.touchedByField[name]),
          name: name,
          id: id
        }, this.$attrs),
        additionalListeners: {
          change: this.handleOnChange,
          input: this.handleOnInput,
          blur: this.handleOnBlur,
          focus: this.handleOnFocus
        },
        defaultSlots: defaultSlot
      });
    }
  }
};
/**
 * @hidden
 */
var Field = FieldVue2;
export { Field, FieldVue2 };