var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { getListeners, getTemplate, templateRendering } from '@progress/kendo-vue-common';
/**
 * @hidden
 */
var FieldArrayVue2 = {
  name: 'KendoFieldArray',
  props: {
    value: [String, Number, Boolean, Object, Array],
    component: [String, Number, Boolean, Object],
    validationMessage: String,
    touched: Boolean,
    modified: Boolean,
    validator: [Function, Array],
    visited: Boolean,
    valid: Boolean,
    name: String,
    id: String
  },
  created: function created() {
    if (!this.kendoForm) {
      return;
    }
    var unregisterField = this.kendoForm.registerField(this.$props.name, this.$props.validator);
    return unregisterField;
  },
  methods: {
    onUnshift: function onUnshift(event) {
      this.kendoForm.onUnshift(this.$props.name, event);
    },
    onPush: function onPush(event) {
      this.kendoForm.onPush(this.$props.name, event);
    },
    onInsert: function onInsert(event) {
      this.kendoForm.onInsert(this.$props.name, event);
    },
    onPop: function onPop() {
      this.kendoForm.onPop(this.$props.name);
    },
    onRemove: function onRemove(event) {
      this.kendoForm.onRemove(this.$props.name, event);
    },
    onReplace: function onReplace(event) {
      this.kendoForm.onReplace(this.$props.name, event);
    },
    onMove: function onMove(event) {
      this.kendoForm.onMove(this.$props.name, event);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  inject: {
    kendoForm: {
      default: null
    }
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      name = _a.name,
      component = _a.component,
      id = _a.id;
    if (!this.kendoForm) {
      return null;
    }
    // TODO: remove this and pass down  getter to allow users optimize when to refresh the data?
    var value = this.kendoForm.values[name];
    if (component) {
      var renderTemplate = component ? templateRendering.call(this, component, getListeners.call(this)) : null;
      return getTemplate.call(this, {
        h: h,
        template: renderTemplate,
        additionalProps: __assign({
          value: value,
          // meta
          validationMessage: this.kendoForm.errors[name],
          touched: this.kendoForm.touchedByField[name],
          modified: this.kendoForm.modifiedByField[name],
          visited: this.kendoForm.visitedByField[name],
          // Our `valid` implementation requires double submit to show html5 validation errors,
          // however it's NOT recommended to show html5 validation errors at all as:
          // - There is no standard way to change validation look and feel with CSS.
          // - Look different in each browser / OS
          // - You can have a page in one language but an error message
          // displayed in another language (not localizable)
          valid: !(Boolean(this.kendoForm.errors[name]) && this.kendoForm.touchedByField[name]),
          name: name,
          id: id
        }, this.$attrs),
        additionalListeners: {
          unshift: this.onUnshift,
          push: this.onPush,
          insert: this.onInsert,
          pop: this.onPop,
          remove: this.onRemove,
          replace: this.onReplace,
          move: this.onMove
        }
      });
    }
  }
};
/**
 * @hidden
 */
var FieldArray = FieldArrayVue2;
export { FieldArray, FieldArrayVue2 };