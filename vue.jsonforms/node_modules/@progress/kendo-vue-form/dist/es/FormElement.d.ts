import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { FormContextType } from './FormContext';
/**
 * Represents the props of the Kendo U for Vue FormElement component.
 */
export interface FormElementProps {
    /**
     * Configures the `size` of the Form.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `class`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large' | string;
    /**
     * If set to `true` enable the horizontal layout of the form editors.
     */
    horizontal?: boolean;
    /**
     * @hidden
     */
    [customProp: string]: any;
}
/**
 * Represent the `ref` of the FormElement component.
 */
export interface FormElementHandle {
    props: FormElementProps;
    element: HTMLFormElement | null;
}
/**
 * @hidden
 */
interface FormElementState {
}
/**
 * @hidden
 */
interface FormElementData {
}
/**
 * @hidden
 */
export interface FormElementMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface FormElementComputed {
    [key: string]: any;
    formElementClassName: object;
}
/**
 * @hidden
 */
export interface FormElementAll extends FormElementMethods, FormElementState, FormElementData, FormElementComputed, FormContextType, Vue2type {
}
/**
 * @hidden
 */
declare const FormElementVue2: ComponentOptions<Vue2type, DefaultData<FormElementData>, DefaultMethods<FormElementAll>, FormElementComputed, RecordPropsDefinition<FormElementProps>>;
/**
 * @hidden
 */
declare let FormElement: DefineComponent<FormElementProps, any, FormElementData, FormElementComputed, FormElementMethods, {}, {}, {}, string, FormElementProps, FormElementProps, {}>;
export { FormElement, FormElementVue2 };
