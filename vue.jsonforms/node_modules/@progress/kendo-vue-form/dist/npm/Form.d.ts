import { FieldValidatorType } from './interfaces/FieldValidator';
import { FormProps } from './interfaces/FormProps';
import { KeyValue } from './interfaces/KeyValue';
import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * @hidden
 */
interface FormState {
    _accumulatorTimeout: any;
}
/**
 * @hidden
 */
interface FormData {
    id: string;
    touched: KeyValue<boolean>;
    visited: KeyValue<boolean>;
    modified: KeyValue<boolean>;
    validatorsByField: KeyValue<(FieldValidatorType | FieldValidatorType[] | undefined)[]>;
    values: KeyValue<any>;
    fields: any;
    unmounted: any;
    submitted: any;
}
/**
 * @hidden
 */
export interface FormMethods {
    [key: string]: any;
    formErrors: () => KeyValue<string> | undefined;
    formValid: () => boolean;
    formModified: () => boolean;
    formVisited: () => boolean;
    formHasNotTouched: () => boolean;
    allowSubmit: () => boolean;
    errors: () => KeyValue<string>;
    onDestroy: () => void;
}
/**
 * @hidden
 */
export interface FormComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface FormAll extends FormMethods, FormState, FormData, FormComputed, Vue2type {
}
/**
 * @hidden
 */
declare const FormVue2: ComponentOptions<Vue2type, DefaultData<FormData>, DefaultMethods<FormAll>, FormComputed, RecordPropsDefinition<FormProps>>;
/**
 * @hidden
 */
declare const Form: DefineComponent<FormProps, any, FormData, FormComputed, FormMethods, {}, {}, {}, string, FormProps, FormProps, {}>;
export { Form, FormVue2 };
