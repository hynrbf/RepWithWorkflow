// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { classNames, guid, kendoThemeMaps, validatePackage, templateRendering, getListeners, getTemplate } from '@progress/kendo-vue-common';
import { toolbarPosition } from './interfaces/Enums.js';
import { packageMetadata } from './package-metadata.js';
/**
 * @hidden
 */
var ListBoxVue2 = {
  name: 'KendoListBox',
  // @ts-ignore
  emits: {
    dragstart: null,
    itemclick: null,
    drop: null,
    dragover: null,
    keydown: null,
    dragleave: null
  },
  props: {
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return [null, 'small', 'medium', 'large'].includes(value);
      }
    },
    toolbarPosition: {
      type: String,
      default: toolbarPosition.RIGHT,
      validator: function validator(value) {
        return ['none', 'top', 'bottom', 'left', 'right'].includes(value);
      }
    },
    textField: String,
    valueField: String,
    keyField: String,
    selectedField: String,
    item: [String, Object, Function],
    toolbar: [String, Object, Function],
    tabIndex: Number,
    dataItems: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    draggable: {
      type: Boolean,
      default: false
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a;
      var nonePosition = this.$props.toolbarPosition === toolbarPosition.NONE || this.$props.toolbar === undefined;
      return _a = {
        'k-listbox': true
      }, _a["k-listbox-actions-".concat(this.$props.toolbarPosition)] = !nonePosition, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _a;
    var h = gh || createElement;
    var toolbarTemplate = templateRendering.call(this, this.$props.toolbar, getListeners.call(this));
    var toolbarRender = getTemplate.call(this, {
      h: h,
      template: toolbarTemplate
    });
    return h("div", {
      "class": this.wrapperClass,
      unselectable: "on",
      attrs: this.v3 ? undefined : {
        unselectable: "on"
      }
    }, [this.$props.toolbarPosition !== 'bottom' && toolbarRender, h("div", {
      "class": 'k-list-scroller k-selectable',
      "data-role": 'selectable',
      attrs: this.v3 ? undefined : {
        "data-role": 'selectable'
      },
      onDragover: function onDragover(e) {
        return e.preventDefault();
      },
      on: this.v3 ? undefined : {
        "dragover": function onDragover(e) {
          return e.preventDefault();
        },
        "drop": this.handleContainerDrop,
        "dragleave": this.handleOnDragLeave
      },
      onDrop: this.handleContainerDrop,
      onDragleave: this.handleOnDragLeave
    }, [h("div", {
      "class": classNames('k-list', (_a = {}, _a["k-list-".concat(kendoThemeMaps.sizeMap[this.$props.size] || this.$props.size)] = this.$props.size, _a))
    }, [h("div", {
      "class": 'k-list-content'
    }, [h("ul", {
      "class": 'k-list-ul',
      role: 'listbox',
      attrs: this.v3 ? undefined : {
        role: 'listbox',
        "aria-label": 'listbox-container',
        tabIndex: this.tabIndex
      },
      "aria-label": 'listbox-container',
      tabIndex: this.tabIndex,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown
      }
    }, [this.$props.dataItems.map(function (item, index) {
      var _this = this;
      var selectedValue = this.setSelected(item);
      var itemGuid = guid();
      var defaultRendering = h("span", {
        "class": 'k-list-item-text'
      }, [this.$props.textField ? item[this.$props.textField] : item.toString()]);
      var itemTemplate = templateRendering.call(this, this.$props.item, getListeners.call(this));
      var itemRender = getTemplate.call(this, {
        h: h,
        template: itemTemplate,
        defaultRendering: defaultRendering,
        additionalProps: {
          dataItem: item,
          index: index
        }
      });
      return h("li", {
        "class": classNames('k-list-item', {
          'k-selected': selectedValue
        }, item.class),
        style: item.style,
        role: 'option',
        attrs: this.v3 ? undefined : {
          role: 'option',
          "aria-selected": selectedValue,
          id: itemGuid + index,
          "data-uid": itemGuid + index,
          draggable: this.$props.draggable
        },
        "aria-selected": selectedValue,
        key: this.$props.keyField ? item[this.$props.keyField] : index,
        id: itemGuid + index,
        "data-uid": itemGuid + index,
        draggable: this.$props.draggable,
        onDragstart: function onDragstart(event) {
          return _this.dispatchEvent('dragstart', event, item);
        },
        on: this.v3 ? undefined : {
          "dragstart": function onDragstart(event) {
            return _this.dispatchEvent('dragstart', event, item);
          },
          "dragOver": function dragOver(event) {
            event.preventDefault();
            _this.dispatchEvent('dragover', event, item);
          },
          "drop": function drop(event) {
            return _this.dispatchEvent('drop', event, item);
          },
          "click": function click(event) {
            return _this.dispatchEvent('itemclick', event, item);
          }
        },
        onDragOver: function dragOver(event) {
          event.preventDefault();
          _this.dispatchEvent('dragover', event, item);
        },
        onDrop: function drop(event) {
          return _this.dispatchEvent('drop', event, item);
        },
        onClick: function click(event) {
          return _this.dispatchEvent('itemclick', event, item);
        }
      }, [itemRender]);
    }, this)])])])]), this.$props.toolbarPosition === 'bottom' && toolbarRender, h("select", {
      style: {
        display: 'none'
      },
      multiple: true,
      attrs: this.v3 ? undefined : {
        multiple: true,
        "data-role": "listbox"
      },
      "data-role": "listbox"
    }, [this.$props.dataItems.map(function (item, index) {
      var value = item[this.$props.valueField || this.$props.textField];
      return h("option", {
        key: index,
        value: this.v3 ? value : null,
        domProps: this.v3 ? undefined : {
          "value": value
        }
      }, [value]);
    }, this)])]);
  },
  methods: {
    dispatchEvent: function dispatchEvent(eventName, event, item) {
      this.$emit(eventName, {
        event: event,
        component: this,
        dataItem: item
      });
    },
    setSelected: function setSelected(item) {
      if (this.$props.selectedField) {
        return item[this.$props.selectedField] ? true : false;
      }
    },
    handleKeyDown: function handleKeyDown(event) {
      this.$emit('keydown', {
        event: event,
        component: this
      });
    },
    handleContainerDrop: function handleContainerDrop(event) {
      var targetElement = event.target;
      var isTargetContainer = targetElement.closest('.k-list-scroller');
      var isPartOfList = targetElement.closest('.k-list-ul');
      var items = this.$props.dataItems;
      if (isTargetContainer && !isPartOfList) {
        this.$emit('drop', {
          event: event,
          component: this,
          dataItem: items.length > 0 ? items[items.length - 1] : null
        });
      }
    },
    handleOnDragLeave: function handleOnDragLeave(event) {
      var isTargetContainer = event.target.classList.contains('k-list-content');
      if (isTargetContainer) {
        this.$emit('dragleave', {
          event: event,
          component: this
        });
      }
    }
  }
};
var ListBox = ListBoxVue2;
export { ListBox, ListBoxVue2 };