"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListBoxToolbarVue2 = exports.ListBoxToolbar = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");
var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");
var main_1 = require("./messages/main");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var tools = [{
  name: 'moveUp',
  iconName: 'caret-alt-up',
  svgIcon: kendo_svg_icons_1.caretAltUpIcon
}, {
  name: 'moveDown',
  iconName: 'caret-alt-down',
  svgIcon: kendo_svg_icons_1.caretAltDownIcon
}, {
  name: 'transferTo',
  iconName: 'caret-alt-right',
  svgIcon: kendo_svg_icons_1.caretAltRightIcon
}, {
  name: 'transferFrom',
  iconName: 'caret-alt-left',
  svgIcon: kendo_svg_icons_1.caretAltLeftIcon
}, {
  name: 'transferAllTo',
  iconName: 'caret-double-alt-right',
  svgIcon: kendo_svg_icons_1.caretDoubleAltRightIcon
}, {
  name: 'transferAllFrom',
  iconName: 'caret-double-alt-left',
  svgIcon: kendo_svg_icons_1.caretDoubleAltLeftIcon
}, {
  name: 'remove',
  iconName: 'x',
  svgIcon: kendo_svg_icons_1.xIcon
}];
/**
 * @hidden
 */
var ListBoxToolbarVue2 = {
  name: 'KendoListBoxToolbar',
  props: {
    dataItems: Array,
    dataConnected: Array,
    tools: Array,
    selectedField: {
      type: String,
      default: 'selected'
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      currentRtl: false
    };
  },
  mounted: function mounted() {
    this.currentRtl = (0, kendo_vue_common_1.isRtl)(this.$el);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var localizationService = (0, kendo_vue_intl_1.provideLocalizationService)(this);
    return h("div", {
      "class": 'k-listbox-actions'
    }, [this.$props.tools && this.$props.tools.map(function (tool, index) {
      var _this = this;
      var indexOfTool = tools.findIndex(function (x) {
        return x.name === tool;
      });
      var currentTool = tools[indexOfTool];
      var isDisabled = this.isItemDisabled(currentTool.name);
      var toolKey = "listbox.".concat(currentTool.name);
      var title = localizationService.toLanguageString(toolKey, main_1.messages[toolKey]);
      return h(kendo_vue_buttons_1.Button, {
        key: index,
        disabled: isDisabled,
        attrs: this.v3 ? undefined : {
          disabled: isDisabled,
          "data-command": currentTool.name,
          title: title,
          "aria-label": title,
          icon: this.currentRtl ? this.getRtlFontIcon(currentTool.iconName) : currentTool.iconName,
          svgIcon: this.currentRtl ? this.getRtlSvgIcon(currentTool.svgIcon) : currentTool.svgIcon
        },
        "data-command": currentTool.name,
        title: title,
        "aria-label": title,
        icon: this.currentRtl ? this.getRtlFontIcon(currentTool.iconName) : currentTool.iconName,
        svgIcon: this.currentRtl ? this.getRtlSvgIcon(currentTool.svgIcon) : currentTool.svgIcon,
        onClick: function onClick(e) {
          e.preventDefault();
          _this.handleToolClick(e, currentTool.name || null);
        },
        on: this.v3 ? undefined : {
          "click": function onClick(e) {
            e.preventDefault();
            _this.handleToolClick(e, currentTool.name || null);
          }
        }
      });
    }, this)]);
  },
  methods: {
    getRtlSvgIcon: function getRtlSvgIcon(toolIcon) {
      switch (toolIcon.name) {
        case 'caret-alt-right':
          return kendo_svg_icons_1.caretAltLeftIcon;
        case 'caret-alt-left':
          return kendo_svg_icons_1.caretAltRightIcon;
        case 'caret-double-alt-right':
          return kendo_svg_icons_1.caretDoubleAltLeftIcon;
        case 'caret-double-alt-left':
          return kendo_svg_icons_1.caretDoubleAltRightIcon;
        default:
      }
      return toolIcon;
    },
    getRtlFontIcon: function getRtlFontIcon(toolIcon) {
      switch (toolIcon) {
        case 'caret-alt-right':
          return 'caret-alt-left';
        case 'caret-alt-left':
          return 'caret-alt-right';
        case 'caret-double-alt-right':
          return 'caret-double-alt-left';
        case 'caret-double-alt-left':
          return 'caret-double-alt-right';
        default:
      }
      return toolIcon;
    },
    handleToolClick: function handleToolClick(event, name) {
      this.$emit('toolclick', {
        event: event,
        component: this,
        toolName: name
      });
    },
    isItemDisabled: function isItemDisabled(tool) {
      var disabled = true;
      var selectedField = this.$props.selectedField || 'selected';
      var dataLength = this.$props.dataItems.length;
      var dataConnectedLength = this.$props.dataConnected.length;
      var hasSelected = this.$props.dataItems.findIndex(function (item) {
        return item[selectedField] === true;
      }) >= 0;
      var hasSelectedTwo = this.$props.dataConnected.findIndex(function (item) {
        return item[selectedField] === true;
      }) >= 0;
      switch (tool) {
        case 'moveUp':
          if (hasSelected) {
            disabled = this.$props.dataItems.length > 0 ? this.$props.dataItems[0].selected : true;
          } else if (hasSelectedTwo) {
            disabled = this.$props.dataConnected.length > 0 ? this.$props.dataConnected[0].selected : true;
          } else {
            disabled = true;
          }
          break;
        case 'moveDown':
          if (hasSelected) {
            disabled = this.$props.dataItems[dataLength - 1] ? this.$props.dataItems[dataLength - 1].selectedField : true;
          } else if (hasSelectedTwo) {
            disabled = this.$props.dataConnected.length > 0 ? this.$props.dataConnected[dataConnectedLength - 1].selected : true;
          } else {
            disabled = true;
          }
          break;
        case 'transferTo':
          disabled = !(this.$props.dataConnected && hasSelected);
          break;
        case 'transferFrom':
          if (this.$props.dataConnected) {
            disabled = !(this.$props.dataConnected && hasSelectedTwo);
          } else {
            disabled = true;
          }
          break;
        case 'transferAllTo':
          disabled = !(this.$props.dataConnected && this.$props.dataItems.length > 0);
          break;
        case 'transferAllFrom':
          disabled = !(this.$props.dataConnected && this.$props.dataConnected.length > 0);
          break;
        case 'remove':
          disabled = !(hasSelected || hasSelectedTwo);
          break;
        default:
      }
      return disabled;
    }
  }
};
exports.ListBoxToolbarVue2 = ListBoxToolbarVue2;
var ListBoxToolbar = ListBoxToolbarVue2;
exports.ListBoxToolbar = ListBoxToolbar;