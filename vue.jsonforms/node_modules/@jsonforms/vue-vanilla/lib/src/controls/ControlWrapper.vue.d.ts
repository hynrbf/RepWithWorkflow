import { PropType } from 'vue';
import { Styles } from '../styles';
import { Options } from '../util';
declare const _default: import("vue").DefineComponent<{
    id: {
        required: true;
        type: StringConstructor;
    };
    description: {
        required: false;
        type: StringConstructor;
        default: undefined;
    };
    errors: {
        required: false;
        type: StringConstructor;
        default: undefined;
    };
    label: {
        required: false;
        type: StringConstructor;
        default: undefined;
    };
    appliedOptions: {
        required: false;
        type: PropType<Options>;
        default: undefined;
    };
    visible: {
        required: false;
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        required: false;
        type: BooleanConstructor;
        default: boolean;
    };
    isFocused: {
        required: false;
        type: BooleanConstructor;
        default: boolean;
    };
    styles: {
        required: true;
        type: PropType<Styles>;
    };
}, unknown, unknown, {
    showDescription(): boolean;
    computedLabel(): string;
}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    id?: unknown;
    description?: unknown;
    errors?: unknown;
    label?: unknown;
    appliedOptions?: unknown;
    visible?: unknown;
    required?: unknown;
    isFocused?: unknown;
    styles?: unknown;
} & {
    id: string;
    visible: boolean;
    required: boolean;
    isFocused: boolean;
    styles: Styles;
} & {
    description?: string | undefined;
    errors?: string | undefined;
    label?: string | undefined;
    appliedOptions?: Options | undefined;
}>, {
    description: string;
    errors: string;
    label: string;
    appliedOptions: Options;
    visible: boolean;
    required: boolean;
    isFocused: boolean;
}>;
export default _default;
