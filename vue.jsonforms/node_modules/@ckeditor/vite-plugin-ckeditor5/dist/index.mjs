import * as fs from 'node:fs';
import * as path from 'node:path';
import * as util from 'node:util';
import { normalizePath } from 'vite';
import postcss from 'postcss';
import postcssNesting from 'postcss-nesting';
import postcssMixins from 'postcss-mixins';
import postcssImport from 'postcss-import';

/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */
const isCKEditor5Icon = (id) => id.endsWith(".svg") && (id.includes("ckeditor5-") || id.includes("-ckeditor5"));
const iconsLoader = () => {
  return {
    name: "vite-ckeditor5-icons-loader",
    enforce: "pre",
    load: (id) => {
      if (!isCKEditor5Icon(id)) {
        return;
      }
      return fs.readFileSync(id, "utf8");
    },
    transform: (code, id) => {
      if (!isCKEditor5Icon(id)) {
        return;
      }
      const content = JSON.stringify(code);
      return {
        code: `export default ${content};`,
        map: { mappings: "" }
      };
    }
  };
};

/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */
const readFile = util.promisify(fs.readFile);
const postcssOptions = {
  plugins: [
    postcssNesting(),
    postcssMixins(),
    postcssImport()
  ]
};
const stylesLoader = (theme) => {
  return {
    name: "vite-ckeditor5-styles-loader",
    enforce: "pre",
    async transform(code, id) {
      if (!id.includes("ckeditor5-") || !id.endsWith(".css")) {
        return;
      }
      const themeStyles = await loadThemeStyles(id, theme);
      const stylesToLoad = code + themeStyles.code;
      return loadPostcssFile(stylesToLoad, id);
    }
  };
};
async function loadThemeStyles(id, theme) {
  const themeFilePath = getThemeFilePath(id, theme);
  if (themeFilePath && fs.existsSync(themeFilePath)) {
    const css = await readFile(themeFilePath);
    const result = await postcss(postcssOptions).process(css, { from: themeFilePath, map: { absolute: true, inline: true } });
    return { code: result.css.toString() };
  }
  return { code: "" };
}
async function loadPostcssFile(code, id) {
  const result = await postcss(postcssOptions).process(code, { from: id, map: { absolute: true, inline: true } });
  return {
    code: result.css.toString()
  };
}
function getThemeFilePath(inputFilePath, theme) {
  const themeDir = path.dirname(theme);
  const packageName = getPackageName(inputFilePath);
  if (!packageName) {
    return;
  }
  const inputFileName = inputFilePath.split(
    normalizePath(path.join(packageName, "theme", path.sep))
  )[1];
  if (!inputFileName) {
    return;
  }
  return path.resolve(themeDir, packageName, inputFileName);
}
function getPackageName(inputFilePath) {
  const match = inputFilePath.match(/^.+[/\\](ckeditor5-[^/\\]+)/);
  if (match) {
    return match.pop();
  } else {
    return null;
  }
}

/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */
const ckeditor5 = ({ theme }) => {
  return [
    iconsLoader(),
    stylesLoader(theme)
  ];
};

export { ckeditor5 as default };
